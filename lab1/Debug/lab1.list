
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c710  0800c710  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c710  0800c710  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c710  0800c710  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c710  0800c710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800c718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000950  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a3c  20000a3c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e3ef  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004060  00000000  00000000  0003e50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  00042570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  00043b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a26  00000000  00000000  00044f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024cdb  00000000  00000000  0006992e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a06  00000000  00000000  0008e609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016300f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064a0  00000000  00000000  00163064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0bc 	.word	0x0800c0bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800c0bc 	.word	0x0800c0bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HAL_RTC_AlarmAEventCallback>:




/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <HAL_RTC_AlarmAEventCallback+0x1c>)
 80002be:	f002 fd89 	bl	8002dd4 <HAL_GPIO_WritePin>
	//
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	48000800 	.word	0x48000800

080002d0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d131      	bne.n	8000348 <splitNumber+0x78>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d039      	beq.n	800035e <splitNumber+0x8e>
             while(num > 0 ){
 80002ea:	e02d      	b.n	8000348 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002ec:	6978      	ldr	r0, [r7, #20]
 80002ee:	1c43      	adds	r3, r0, #1
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <splitNumber+0x98>)
 80002f6:	fb83 2301 	smull	r2, r3, r3, r1
 80002fa:	109a      	asrs	r2, r3, #2
 80002fc:	17cb      	asrs	r3, r1, #31
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	1aca      	subs	r2, r1, r3
 800030a:	0083      	lsls	r3, r0, #2
 800030c:	f107 0118 	add.w	r1, r7, #24
 8000310:	440b      	add	r3, r1
 8000312:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a13      	ldr	r2, [pc, #76]	; (8000368 <splitNumber+0x98>)
 800031a:	fb82 1203 	smull	r1, r2, r2, r3
 800031e:	1092      	asrs	r2, r2, #2
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d109      	bne.n	8000340 <splitNumber+0x70>
                  arr[i++] = 0;
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	617a      	str	r2, [r7, #20]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	f107 0218 	add.w	r2, r7, #24
 8000338:	4413      	add	r3, r2
 800033a:	2200      	movs	r2, #0
 800033c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	480a      	ldr	r0, [pc, #40]	; (800036c <splitNumber+0x9c>)
 8000344:	f00a f8ce 	bl	800a4e4 <iprintf>
             while(num > 0 ){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	dcce      	bgt.n	80002ec <splitNumber+0x1c>


            }
        return arr[return_val];
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	f107 0218 	add.w	r2, r7, #24
 8000356:	4413      	add	r3, r2
 8000358:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800035c:	e000      	b.n	8000360 <splitNumber+0x90>
         } else {
             return 0;
 800035e:	2300      	movs	r3, #0
         }


}
 8000360:	4618      	mov	r0, r3
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	66666667 	.word	0x66666667
 800036c:	0800c0d4 	.word	0x0800c0d4

08000370 <convertToBinary>:

int convertToBinary(int num){
 8000370:	b480      	push	{r7}
 8000372:	b08f      	sub	sp, #60	; 0x3c
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000380:	e015      	b.n	80003ae <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	bfb8      	it	lt
 800038c:	425b      	neglt	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000398:	440b      	add	r3, r1
 800039a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	0fda      	lsrs	r2, r3, #31
 80003a2:	4413      	add	r3, r2
 80003a4:	105b      	asrs	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
              i++;
 80003a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003aa:	3301      	adds	r3, #1
 80003ac:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1e6      	bne.n	8000382 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 80003b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003b6:	3b01      	subs	r3, #1
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003ba:	e005      	b.n	80003c8 <convertToBinary+0x58>
              count++;
 80003bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003be:	3301      	adds	r3, #1
 80003c0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c4:	3b01      	subs	r3, #1
 80003c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	daf6      	bge.n	80003bc <convertToBinary+0x4c>

          }
          return count;
 80003ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	373c      	adds	r7, #60	; 0x3c
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <setTime>:



void setTime(RTC_TimeTypeDef sTime, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003dc:	b084      	sub	sp, #16
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	f107 0c08 	add.w	ip, r7, #8
 80003e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ea:	4817      	ldr	r0, [pc, #92]	; (8000448 <setTime+0x6c>)
 80003ec:	f007 fe22 	bl	8008034 <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003f0:	7f3b      	ldrb	r3, [r7, #28]
 80003f2:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003f8:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003fe:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000400:	2200      	movs	r2, #0
 8000402:	f107 0108 	add.w	r1, r7, #8
 8000406:	4810      	ldr	r0, [pc, #64]	; (8000448 <setTime+0x6c>)
 8000408:	f006 fd6e 	bl	8006ee8 <HAL_RTC_SetTime>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800040c:	2200      	movs	r2, #0
 800040e:	f107 0108 	add.w	r1, r7, #8
 8000412:	480d      	ldr	r0, [pc, #52]	; (8000448 <setTime+0x6c>)
 8000414:	f006 fd68 	bl	8006ee8 <HAL_RTC_SetTime>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <setTime+0x46>
	{
		Error_Handler();
 800041e:	f001 fc4f 	bl	8001cc0 <Error_Handler>
//	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000422:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000426:	2101      	movs	r1, #1
 8000428:	4807      	ldr	r0, [pc, #28]	; (8000448 <setTime+0x6c>)
 800042a:	f007 fe7f 	bl	800812c <HAL_RTCEx_BKUPWrite>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800042e:	2200      	movs	r2, #0
 8000430:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <setTime+0x6c>)
 8000436:	f007 fd27 	bl	8007e88 <HAL_RTCEx_SetWakeUpTimer_IT>



}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000442:	b004      	add	sp, #16
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000564 	.word	0x20000564

0800044c <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
 8000456:	460b      	mov	r3, r1
 8000458:	71bb      	strb	r3, [r7, #6]
 800045a:	4613      	mov	r3, r2
 800045c:	717b      	strb	r3, [r7, #5]
	resetPins();
 800045e:	f000 f8d1 	bl	8000604 <resetPins>

	int bits_count = convertToBinary(hour);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ff83 	bl	8000370 <convertToBinary>
 800046a:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b05      	cmp	r3, #5
 8000470:	dd03      	ble.n	800047a <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 8000472:	4858      	ldr	r0, [pc, #352]	; (80005d4 <displayHour+0x188>)
 8000474:	f000 fec2 	bl	80011fc <Send>
		hour_displayed = 1;

	}


}
 8000478:	e0a7      	b.n	80005ca <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
 800047e:	e016      	b.n	80004ae <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 8000480:	79fa      	ldrb	r2, [r7, #7]
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	fa42 f303 	asr.w	r3, r2, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00b      	beq.n	80004a8 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 8000490:	4a51      	ldr	r2, [pc, #324]	; (80005d8 <displayHour+0x18c>)
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000498:	4a50      	ldr	r2, [pc, #320]	; (80005dc <displayHour+0x190>)
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	f002 fc96 	bl	8002dd4 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	3301      	adds	r3, #1
 80004ac:	61fb      	str	r3, [r7, #28]
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	2b05      	cmp	r3, #5
 80004b2:	dde5      	ble.n	8000480 <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
 80004b8:	e01b      	b.n	80004f2 <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff06 	bl	80002d0 <splitNumber>
 80004c4:	4602      	mov	r2, r0
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	fa42 f303 	asr.w	r3, r2, r3
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 80004d4:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <displayHour+0x194>)
 80004d6:	69bb      	ldr	r3, [r7, #24]
 80004d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004dc:	4a41      	ldr	r2, [pc, #260]	; (80005e4 <displayHour+0x198>)
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f002 fc74 	bl	8002dd4 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	3301      	adds	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	dde0      	ble.n	80004ba <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e01b      	b.n	8000536 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fee4 	bl	80002d0 <splitNumber>
 8000508:	4602      	mov	r2, r0
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	fa42 f303 	asr.w	r3, r2, r3
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 8000518:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <displayHour+0x19c>)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000520:	4a32      	ldr	r2, [pc, #200]	; (80005ec <displayHour+0x1a0>)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	f002 fc52 	bl	8002dd4 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dde0      	ble.n	80004fe <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	e01b      	b.n	800057a <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fec2 	bl	80002d0 <splitNumber>
 800054c:	4602      	mov	r2, r0
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	fa42 f303 	asr.w	r3, r2, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00b      	beq.n	8000574 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 800055c:	4a24      	ldr	r2, [pc, #144]	; (80005f0 <displayHour+0x1a4>)
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000564:	4a23      	ldr	r2, [pc, #140]	; (80005f4 <displayHour+0x1a8>)
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	f002 fc30 	bl	8002dd4 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	2b04      	cmp	r3, #4
 800057e:	dde0      	ble.n	8000542 <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e01b      	b.n	80005be <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fea0 	bl	80002d0 <splitNumber>
 8000590:	4602      	mov	r2, r0
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	fa42 f303 	asr.w	r3, r2, r3
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <displayHour+0x1ac>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <displayHour+0x1b0>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	f002 fc0e 	bl	8002dd4 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	dde0      	ble.n	8000586 <displayHour+0x13a>
		hour_displayed = 1;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <displayHour+0x1b4>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800c0d8 	.word	0x0800c0d8
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000014 	.word	0x20000014
 80005e0:	20000020 	.word	0x20000020
 80005e4:	20000030 	.word	0x20000030
 80005e8:	20000038 	.word	0x20000038
 80005ec:	20000044 	.word	0x20000044
 80005f0:	20000060 	.word	0x20000060
 80005f4:	20000070 	.word	0x20000070
 80005f8:	2000004c 	.word	0x2000004c
 80005fc:	20000058 	.word	0x20000058
 8000600:	20000125 	.word	0x20000125

08000604 <resetPins>:

void resetPins(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00e      	b.n	800062e <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 8000610:	4a2c      	ldr	r2, [pc, #176]	; (80006c4 <resetPins+0xc0>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000618:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <resetPins+0xc4>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	f002 fbd6 	bl	8002dd4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b04      	cmp	r3, #4
 8000632:	dded      	ble.n	8000610 <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	e01a      	b.n	8000670 <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <resetPins+0xc8>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000642:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <resetPins+0xcc>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	f002 fbc1 	bl	8002dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 8000652:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <resetPins+0xd0>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800065a:	4a1f      	ldr	r2, [pc, #124]	; (80006d8 <resetPins+0xd4>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	f002 fbb5 	bl	8002dd4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	3301      	adds	r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b02      	cmp	r3, #2
 8000674:	dde1      	ble.n	800063a <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e01a      	b.n	80006b2 <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <resetPins+0xd8>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <resetPins+0xdc>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f002 fba0 	bl	8002dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <resetPins+0xe0>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <resetPins+0xe4>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f002 fb94 	bl	8002dd4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	dde1      	ble.n	800067c <resetPins+0x78>
	}



}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000014 	.word	0x20000014
 80006cc:	20000038 	.word	0x20000038
 80006d0:	20000044 	.word	0x20000044
 80006d4:	2000004c 	.word	0x2000004c
 80006d8:	20000058 	.word	0x20000058
 80006dc:	20000020 	.word	0x20000020
 80006e0:	20000030 	.word	0x20000030
 80006e4:	20000060 	.word	0x20000060
 80006e8:	20000070 	.word	0x20000070

080006ec <getNumOfDaysInMonth>:





uint8_t getNumOfDaysInMonth(uint8_t N){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d011      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d00e      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b05      	cmp	r3, #5
 8000706:	d00b      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d008      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b08      	cmp	r3, #8
 8000712:	d005      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b0a      	cmp	r3, #10
 8000718:	d002      	beq.n	8000720 <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d101      	bne.n	8000724 <getNumOfDaysInMonth+0x38>
	        return 31;
 8000720:	231f      	movs	r3, #31
 8000722:	e013      	b.n	800074c <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d008      	beq.n	800073c <getNumOfDaysInMonth+0x50>
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b06      	cmp	r3, #6
 800072e:	d005      	beq.n	800073c <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b09      	cmp	r3, #9
 8000734:	d002      	beq.n	800073c <getNumOfDaysInMonth+0x50>
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b0b      	cmp	r3, #11
 800073a:	d101      	bne.n	8000740 <getNumOfDaysInMonth+0x54>
	        return 30;
 800073c:	231e      	movs	r3, #30
 800073e:	e005      	b.n	800074c <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d101      	bne.n	800074a <getNumOfDaysInMonth+0x5e>
	        return 28;
 8000746:	231c      	movs	r3, #28
 8000748:	e000      	b.n	800074c <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 800074a:	2300      	movs	r3, #0
	    }

}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <FLASH_init>:


/* ===== FLASH INIT ===== */


void FLASH_init(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <FLASH_init+0x20>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <FLASH_init+0x24>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 255, FLASHTX_BUFF_SIZE);
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <FLASH_init+0x28>)
 800076e:	f009 feb1 	bl	800a4d4 <memset>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000010c 	.word	0x2000010c
 800077c:	2000010d 	.word	0x2000010d
 8000780:	20000168 	.word	0x20000168

08000784 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <Flash_flush>:





void Flash_flush(){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e010      	b.n	80007ca <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	2301      	movs	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	1cfb      	adds	r3, r7, #3
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	21a0      	movs	r1, #160	; 0xa0
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <Flash_flush+0x44>)
 80007ba:	f002 fdc9 	bl	8003350 <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 80007be:	2005      	movs	r0, #5
 80007c0:	f001 fe8e 	bl	80024e0 <HAL_Delay>
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b80      	cmp	r3, #128	; 0x80
 80007ce:	ddeb      	ble.n	80007a8 <Flash_flush+0x10>
	}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000268 	.word	0x20000268

080007e0 <Flash_write>:



uint8_t bt = 0;

void Flash_write(uint8_t data[], int start_idx){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <Flash_write+0x98>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	6013      	str	r3, [r2, #0]



		uint8_t arr_size = 6;
 80007f0:	2306      	movs	r3, #6
 80007f2:	72fb      	strb	r3, [r7, #11]

		//control memory
		if(counter >= FLASHTX_BUFF_SIZE - arr_size - 1){
 80007f4:	7afb      	ldrb	r3, [r7, #11]
 80007f6:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <Flash_write+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dc02      	bgt.n	8000808 <Flash_write+0x28>
			counter = 0;
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <Flash_write+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
		}


		Send("Counter at: %d\r\n", counter);
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <Flash_write+0x98>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <Flash_write+0x9c>)
 8000810:	f000 fcf4 	bl	80011fc <Send>

		for(int i = 0; i < arr_size ; i++){
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e024      	b.n	8000864 <Flash_write+0x84>
			if(i == 0){
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d107      	bne.n	8000830 <Flash_write+0x50>
				Send("%d", data[i]);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <Flash_write+0xa0>)
 800082c:	f000 fce6 	bl	80011fc <Send>
			}
			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <Flash_write+0x98>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b299      	uxth	r1, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	2201      	movs	r2, #1
 800083e:	9201      	str	r2, [sp, #4]
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	460a      	mov	r2, r1
 8000846:	21a0      	movs	r1, #160	; 0xa0
 8000848:	480e      	ldr	r0, [pc, #56]	; (8000884 <Flash_write+0xa4>)
 800084a:	f002 fd81 	bl	8003350 <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];

			counter++;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <Flash_write+0x98>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <Flash_write+0x98>)
 8000856:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 8000858:	2005      	movs	r0, #5
 800085a:	f001 fe41 	bl	80024e0 <HAL_Delay>
		for(int i = 0; i < arr_size ; i++){
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbd6      	blt.n	800081a <Flash_write+0x3a>





}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000108 	.word	0x20000108
 800087c:	0800c0f8 	.word	0x0800c0f8
 8000880:	0800c10c 	.word	0x0800c10c
 8000884:	20000268 	.word	0x20000268

08000888 <Flash_read>:


int *Flash_read(){
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af04      	add	r7, sp, #16
	FLASH_init();
 800088e:	f7ff ff63 	bl	8000758 <FLASH_init>

	uint8_t byte = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	717b      	strb	r3, [r7, #5]
	uint8_t data_found = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]


	uint8_t page = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	71bb      	strb	r3, [r7, #6]
	for(page = 0; page <= 128; page++){
 800089e:	2300      	movs	r3, #0
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	e031      	b.n	8000908 <Flash_read+0x80>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, page, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2301      	movs	r3, #1
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	1d7b      	adds	r3, r7, #5
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	21a1      	movs	r1, #161	; 0xa1
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <Flash_read+0x90>)
 80008bc:	f002 fc20 	bl	8003100 <HAL_I2C_Mem_Read>

		//if byte is found then start downloading bytes to buffer
		if(byte != 0x00 ){
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <Flash_read+0x42>
			//FlashTx_buff[Tx_busy++] = byte;
			data_found = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]

		}

		if(data_found == 1){
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d118      	bne.n	8000902 <Flash_read+0x7a>
				FlashTx_buff[FlashTx_busy++] = byte;
 80008d0:	7979      	ldrb	r1, [r7, #5]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <Flash_read+0x94>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	b2d0      	uxtb	r0, r2
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <Flash_read+0x94>)
 80008dc:	7010      	strb	r0, [r2, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	b289      	uxth	r1, r1
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <Flash_read+0x98>)
 80008e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(FlashTx_busy >= FLASHTX_BUFF_SIZE){
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <Flash_read+0x94>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da02      	bge.n	80008f8 <Flash_read+0x70>
					FlashTx_busy = 0;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <Flash_read+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
				}
				//if too many zeros found stop downlaoding to save only data
				if(byte == 0x00 ){
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <Flash_read+0x7a>
					data_found = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	71fb      	strb	r3, [r7, #7]
	for(page = 0; page <= 128; page++){
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	3301      	adds	r3, #1
 8000906:	71bb      	strb	r3, [r7, #6]
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b80      	cmp	r3, #128	; 0x80
 800090c:	d9ca      	bls.n	80008a4 <Flash_read+0x1c>
				}
		}

}

	return FlashTx_buff;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <Flash_read+0x98>)

}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000268 	.word	0x20000268
 800091c:	2000010d 	.word	0x2000010d
 8000920:	20000168 	.word	0x20000168

08000924 <Flash_getFreeSpace>:

// function to get first free address to write to
int Flash_getFreeSpace(){
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 8000932:	e010      	b.n	8000956 <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	b29a      	uxth	r2, r3
 8000938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2301      	movs	r3, #1
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	1cfb      	adds	r3, r7, #3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	21a1      	movs	r1, #161	; 0xa1
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <Flash_getFreeSpace+0x44>)
 800094c:	f002 fbd8 	bl	8003100 <HAL_I2C_Mem_Read>
		i++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	2bff      	cmp	r3, #255	; 0xff
 800095a:	d1eb      	bne.n	8000934 <Flash_getFreeSpace+0x10>

	}
	return i;
 800095c:	687b      	ldr	r3, [r7, #4]


}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000268 	.word	0x20000268

0800096c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b69      	ldr	r3, [pc, #420]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a68      	ldr	r2, [pc, #416]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 8000988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b66      	ldr	r3, [pc, #408]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4b63      	ldr	r3, [pc, #396]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a62      	ldr	r2, [pc, #392]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b60      	ldr	r3, [pc, #384]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a5c      	ldr	r2, [pc, #368]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b5a      	ldr	r3, [pc, #360]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a56      	ldr	r2, [pc, #344]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <MX_GPIO_Init+0x1bc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 80009fa:	2200      	movs	r2, #0
 80009fc:	f641 515f 	movw	r1, #7519	; 0x1d5f
 8000a00:	484a      	ldr	r0, [pc, #296]	; (8000b2c <MX_GPIO_Init+0x1c0>)
 8000a02:	f002 f9e7 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f002 f9e0 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000a14:	2200      	movs	r2, #0
 8000a16:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000a1a:	4845      	ldr	r0, [pc, #276]	; (8000b30 <MX_GPIO_Init+0x1c4>)
 8000a1c:	f002 f9da 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2104      	movs	r1, #4
 8000a24:	4843      	ldr	r0, [pc, #268]	; (8000b34 <MX_GPIO_Init+0x1c8>)
 8000a26:	f002 f9d5 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	483a      	ldr	r0, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x1c0>)
 8000a42:	f001 ff35 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000a46:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000a4a:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4833      	ldr	r0, [pc, #204]	; (8000b2c <MX_GPIO_Init+0x1c0>)
 8000a60:	f001 ff26 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 8000a64:	f248 2313 	movw	r3, #33299	; 0x8213
 8000a68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f001 ff18 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000a80:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 8000a84:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f001 ff08 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000aa0:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x1c0>)
 8000ab6:	f001 fefb 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000aba:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000abe:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_GPIO_Init+0x1c4>)
 8000ad4:	f001 feec 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000ad8:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_GPIO_Init+0x1c4>)
 8000aee:	f001 fedf 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000af2:	2304      	movs	r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x1c8>)
 8000b0a:	f001 fed1 	bl	80028b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2028      	movs	r0, #40	; 0x28
 8000b14:	f001 fdf8 	bl	8002708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b18:	2028      	movs	r0, #40	; 0x28
 8000b1a:	f001 fe21 	bl	8002760 <HAL_NVIC_EnableIRQ>

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000c00 	.word	0x48000c00

08000b38 <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000b3e:	f000 fdd5 	bl	80016ec <parseIntData>
 8000b42:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d002      	beq.n	8000b50 <handleSetClockMode+0x18>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d117      	bne.n	8000b80 <handleSetClockMode+0x48>

			clock_mode = mode;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <handleSetClockMode+0x58>)
 8000b56:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d10c      	bne.n	8000b78 <handleSetClockMode+0x40>
				resetPins();
 8000b5e:	f7ff fd51 	bl	8000604 <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <handleSetClockMode+0x5c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <handleSetClockMode+0x60>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <handleSetClockMode+0x64>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	f7ff fc6a 	bl	800044c <displayHour>
			}

			Send("$Success=1#\r\n");
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <handleSetClockMode+0x68>)
 8000b7a:	f000 fb3f 	bl	80011fc <Send>
		if(mode == 1 || mode == 2){
 8000b7e:	e003      	b.n	8000b88 <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000b80:	2004      	movs	r0, #4
 8000b82:	f000 ff71 	bl	8001a68 <sendFail>
		}


}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000078 	.word	0x20000078
 8000b94:	20000140 	.word	0x20000140
 8000b98:	20000141 	.word	0x20000141
 8000b9c:	20000142 	.word	0x20000142
 8000ba0:	0800c110 	.word	0x0800c110

08000ba4 <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	71bb      	strb	r3, [r7, #6]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000bb6:	f7ff fd25 	bl	8000604 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00c      	beq.n	8000bda <handleShowHour+0x36>
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b16      	cmp	r3, #22
 8000bc4:	d809      	bhi.n	8000bda <handleShowHour+0x36>
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	2b3b      	cmp	r3, #59	; 0x3b
 8000bca:	d806      	bhi.n	8000bda <handleShowHour+0x36>
 8000bcc:	797b      	ldrb	r3, [r7, #5]
 8000bce:	2b3b      	cmp	r3, #59	; 0x3b
 8000bd0:	d803      	bhi.n	8000bda <handleShowHour+0x36>

			 hour_displayed = 0;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <handleShowHour+0x48>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e003      	b.n	8000be2 <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000bda:	2004      	movs	r0, #4
 8000bdc:	f000 ff44 	bl	8001a68 <sendFail>
	        }


}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000125 	.word	0x20000125

08000bf0 <compareAlarms>:

//compare alarms that are set
/**
 * @returns earlier alarm in form of 1/2
 */
uint8_t compareAlarms(RTC_AlarmTypeDef alarmA, RTC_AlarmTypeDef alarmB){
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	f107 0c10 	add.w	ip, r7, #16
 8000bfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			//todo
			//add month checking
			uint8_t alarmA_day = alarmA.AlarmDateWeekDay;
 8000c00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c04:	71fb      	strb	r3, [r7, #7]
			uint8_t alarmA_hours = alarmA.AlarmTime.Hours;
 8000c06:	7c3b      	ldrb	r3, [r7, #16]
 8000c08:	71bb      	strb	r3, [r7, #6]
			uint8_t alarmA_minutes = alarmA.AlarmTime.Minutes;
 8000c0a:	7c7b      	ldrb	r3, [r7, #17]
 8000c0c:	717b      	strb	r3, [r7, #5]
			uint8_t alarmA_seconds = alarmA.AlarmTime.Seconds;
 8000c0e:	7cbb      	ldrb	r3, [r7, #18]
 8000c10:	713b      	strb	r3, [r7, #4]

			uint8_t alarmB_day = alarmB.AlarmDateWeekDay;
 8000c12:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000c16:	70fb      	strb	r3, [r7, #3]
			uint8_t alarmB_hours = alarmB.AlarmTime.Hours;
 8000c18:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c1c:	70bb      	strb	r3, [r7, #2]
			uint8_t alarmB_minutes = alarmB.AlarmTime.Minutes;
 8000c1e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c22:	707b      	strb	r3, [r7, #1]
			uint8_t alarmB_seconds = alarmB.AlarmTime.Seconds;
 8000c24:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000c28:	703b      	strb	r3, [r7, #0]

			if(alarmA_day == alarmB_day){ //check if day is same if yes - check if hour is the same
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d125      	bne.n	8000c7e <compareAlarms+0x8e>

				if(alarmA_hours == alarmB_hours){
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	78bb      	ldrb	r3, [r7, #2]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d119      	bne.n	8000c6e <compareAlarms+0x7e>

					if(alarmA_minutes == alarmB_minutes){
 8000c3a:	797a      	ldrb	r2, [r7, #5]
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d10d      	bne.n	8000c5e <compareAlarms+0x6e>


						if(alarmA_seconds == alarmB_seconds){
 8000c42:	793a      	ldrb	r2, [r7, #4]
 8000c44:	783b      	ldrb	r3, [r7, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d101      	bne.n	8000c4e <compareAlarms+0x5e>
							return 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e01e      	b.n	8000c8c <compareAlarms+0x9c>
						} else {
							if(alarmA_seconds < alarmB_seconds){
 8000c4e:	793a      	ldrb	r2, [r7, #4]
 8000c50:	783b      	ldrb	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d201      	bcs.n	8000c5a <compareAlarms+0x6a>
								return 1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e018      	b.n	8000c8c <compareAlarms+0x9c>
							} else {
								return 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e016      	b.n	8000c8c <compareAlarms+0x9c>



					}else {

						if(alarmA_minutes < alarmB_minutes){
 8000c5e:	797a      	ldrb	r2, [r7, #5]
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d201      	bcs.n	8000c6a <compareAlarms+0x7a>
							return 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e010      	b.n	8000c8c <compareAlarms+0x9c>
						} else {
							return 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e00e      	b.n	8000c8c <compareAlarms+0x9c>
						}
					}

				} else {

					if(alarmA_hours < alarmB_hours){
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	78bb      	ldrb	r3, [r7, #2]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d201      	bcs.n	8000c7a <compareAlarms+0x8a>

						return 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e008      	b.n	8000c8c <compareAlarms+0x9c>
					} else {
						return 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e006      	b.n	8000c8c <compareAlarms+0x9c>
					}

				}
			} else {
				if(alarmA_day < alarmB_day){
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d201      	bcs.n	8000c8a <compareAlarms+0x9a>
					return 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <compareAlarms+0x9c>
				} else {
					return 2;
 8000c8a:	2302      	movs	r3, #2
				}

			}


}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
	...

08000c9c <getAlarm>:


/**
 * @param INT {alarm} 1 for alarm A 2 for alarmB
 */
RTC_AlarmTypeDef getAlarm(uint8_t whichAlarm){
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef alarm;

	switch(whichAlarm){
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <getAlarm+0x18>
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d009      	beq.n	8000cc6 <getAlarm+0x2a>
 8000cb2:	e011      	b.n	8000cd8 <getAlarm+0x3c>
	case 1:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000cb4:	f107 0108 	add.w	r1, r7, #8
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <getAlarm+0x5c>)
 8000cc0:	f006 ff62 	bl	8007b88 <HAL_RTC_GetAlarm>
		break;
 8000cc4:	e008      	b.n	8000cd8 <getAlarm+0x3c>
	case 2:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8000cc6:	f107 0108 	add.w	r1, r7, #8
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <getAlarm+0x5c>)
 8000cd2:	f006 ff59 	bl	8007b88 <HAL_RTC_GetAlarm>
		break;
 8000cd6:	bf00      	nop
	}



	return alarm;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	461d      	mov	r5, r3
 8000cdc:	f107 0408 	add.w	r4, r7, #8
 8000ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cec:	e885 0003 	stmia.w	r5, {r0, r1}




}
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	20000564 	.word	0x20000564

08000cfc <handleSetAlarm>:
uint8_t getWeekDay(){
	return getDate().WeekDay;
}

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second){
 8000cfc:	b5b0      	push	{r4, r5, r7, lr}
 8000cfe:	b0a8      	sub	sp, #160	; 0xa0
 8000d00:	af10      	add	r7, sp, #64	; 0x40
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	70fb      	strb	r3, [r7, #3]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70bb      	strb	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	803b      	strh	r3, [r7, #0]



	//i sprawdzac czy juz jest ten dzien i zaprogramowac alarm na najblizszy dzien

	uint8_t max_days = getNumOfDaysInMonth(month); //get maximum days in a month
 8000d16:	78bb      	ldrb	r3, [r7, #2]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fce7 	bl	80006ec <getNumOfDaysInMonth>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	//fill array to encode it and save to flash
	uint8_t alarm_to_set[7];
	int alarm_to_backup[6];


	if(year >= 22 && (day > 0 && day <= max_days) && (month > 0 && month <= 12)){
 8000d24:	883b      	ldrh	r3, [r7, #0]
 8000d26:	2b15      	cmp	r3, #21
 8000d28:	f240 80bc 	bls.w	8000ea4 <handleSetAlarm+0x1a8>
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80b8 	beq.w	8000ea4 <handleSetAlarm+0x1a8>
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80b2 	bhi.w	8000ea4 <handleSetAlarm+0x1a8>
 8000d40:	78bb      	ldrb	r3, [r7, #2]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80ae 	beq.w	8000ea4 <handleSetAlarm+0x1a8>
 8000d48:	78bb      	ldrb	r3, [r7, #2]
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	f200 80aa 	bhi.w	8000ea4 <handleSetAlarm+0x1a8>

		if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000d50:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a1 	beq.w	8000e9c <handleSetAlarm+0x1a0>
 8000d5a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000d5e:	2b17      	cmp	r3, #23
 8000d60:	f200 809c 	bhi.w	8000e9c <handleSetAlarm+0x1a0>
 8000d64:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000d68:	2b3b      	cmp	r3, #59	; 0x3b
 8000d6a:	f200 8097 	bhi.w	8000e9c <handleSetAlarm+0x1a0>
 8000d6e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000d72:	2b3b      	cmp	r3, #59	; 0x3b
 8000d74:	f200 8092 	bhi.w	8000e9c <handleSetAlarm+0x1a0>

				alarm_to_set[0] = day;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				alarm_to_set[1] = month;
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				alarm_to_set[2] = year;
 8000d84:	883b      	ldrh	r3, [r7, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				alarm_to_set[3] = hour;
 8000d8c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000d90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				alarm_to_set[4] = minute;
 8000d94:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000d98:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				alarm_to_set[5] = second;
 8000d9c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000da0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				alarm_to_set[6] = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

			Send("$Success=1 %d#\r\n");
 8000daa:	4842      	ldr	r0, [pc, #264]	; (8000eb4 <handleSetAlarm+0x1b8>)
 8000dac:	f000 fa26 	bl	80011fc <Send>



			sAlarm.AlarmTime.Hours = hour;
 8000db0:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000db2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000db6:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 8000db8:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000dba:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000dbe:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = second;
 8000dc0:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000dc2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000dc6:	7093      	strb	r3, [r2, #2]
			sAlarm.AlarmDateWeekDay = day;
 8000dc8:	4a3b      	ldr	r2, [pc, #236]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	f882 3020 	strb.w	r3, [r2, #32]



			int start_idx = Flash_getFreeSpace() - 1;
 8000dd0:	f7ff fda8 	bl	8000924 <Flash_getFreeSpace>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	65bb      	str	r3, [r7, #88]	; 0x58


			Send("Start idx: %d\r\n", start_idx);
 8000dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ddc:	4837      	ldr	r0, [pc, #220]	; (8000ebc <handleSetAlarm+0x1c0>)
 8000dde:	f000 fa0d 	bl	80011fc <Send>

			//Flash_write(alarm_to_set, start_idx);

			//=========get alarms from eeprom to check whether to set new alarm or not===========

			int *alarms = Flash_read();
 8000de2:	f7ff fd51 	bl	8000888 <Flash_read>
 8000de6:	4603      	mov	r3, r0
 8000de8:	657b      	str	r3, [r7, #84]	; 0x54


			//get two already defined alarms
			RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff53 	bl	8000c9c <getAlarm>

					alarm_to_backup[0] = alarmA.AlarmDateWeekDay;
 8000df6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
					alarm_to_backup[1] = 02;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
					alarm_to_backup[2] = year;
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
					alarm_to_backup[3] = alarmA.AlarmTime.Hours;
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
					alarm_to_backup[4] = alarmA.AlarmTime.Minutes;
 8000e08:	7b7b      	ldrb	r3, [r7, #13]
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
					alarm_to_backup[5] = alarmA.AlarmTime.Seconds;
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
//			Send("AlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//					alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);


			//check which of the two is earlier
			uint8_t earlierAlarm = compareAlarms(alarmA, sAlarm);
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000e12:	ac06      	add	r4, sp, #24
 8000e14:	461d      	mov	r5, r3
 8000e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e22:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e26:	466d      	mov	r5, sp
 8000e28:	f107 041c 	add.w	r4, r7, #28
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3e:	f7ff fed7 	bl	8000bf0 <compareAlarms>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

			//if alarm is earlier set that alarm set that alarm
			if(earlierAlarm == 2){
 8000e48:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d11b      	bne.n	8000e88 <handleSetAlarm+0x18c>
				 sAlarm.Alarm = RTC_ALARM_A;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
				 Flash_write(alarm_to_backup, start_idx);
 8000e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fcbe 	bl	80007e0 <Flash_write>

				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000e64:	e004      	b.n	8000e70 <handleSetAlarm+0x174>
				 		Error_Handler();
 8000e66:	f000 ff2b 	bl	8001cc0 <Error_Handler>
				 		sendFail(4);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f000 fdfc 	bl	8001a68 <sendFail>
				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000e70:	2200      	movs	r2, #0
 8000e72:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <handleSetAlarm+0x1bc>)
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <handleSetAlarm+0x1c4>)
 8000e76:	f006 fb9b 	bl	80075b0 <HAL_RTC_SetAlarm_IT>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f2      	bne.n	8000e66 <handleSetAlarm+0x16a>
				 };

				 HAL_Delay(5);
 8000e80:	2005      	movs	r0, #5
 8000e82:	f001 fb2d 	bl	80024e0 <HAL_Delay>
 8000e86:	e005      	b.n	8000e94 <handleSetAlarm+0x198>

			} else {

				Flash_write(alarm_to_set, start_idx);
 8000e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fca6 	bl	80007e0 <Flash_write>





			handleGetAlarms();
 8000e94:	f000 f824 	bl	8000ee0 <handleGetAlarms>
		if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000e98:	bf00      	nop
 8000e9a:	e007      	b.n	8000eac <handleSetAlarm+0x1b0>

			} else { //send fail if data not correct
				sendFail(2);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f000 fde3 	bl	8001a68 <sendFail>
		if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000ea2:	e003      	b.n	8000eac <handleSetAlarm+0x1b0>
			}

	} else {
		sendFail(2);
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 fddf 	bl	8001a68 <sendFail>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3760      	adds	r7, #96	; 0x60
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb4:	0800c120 	.word	0x0800c120
 8000eb8:	20000338 	.word	0x20000338
 8000ebc:	0800c134 	.word	0x0800c134
 8000ec0:	20000564 	.word	0x20000564

08000ec4 <handleResetAlarms>:


void handleResetAlarms(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

	Flash_flush();
 8000ec8:	f7ff fc66 	bl	8000798 <Flash_flush>
	FLASH_init();
 8000ecc:	f7ff fc44 	bl	8000758 <FLASH_init>
	Send("$Success=1#\r\n");
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <handleResetAlarms+0x18>)
 8000ed2:	f000 f993 	bl	80011fc <Send>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	0800c110 	.word	0x0800c110

08000ee0 <handleGetAlarms>:



void handleGetAlarms(){
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	b09b      	sub	sp, #108	; 0x6c
 8000ee4:	af06      	add	r7, sp, #24

	Flash_read();
 8000ee6:	f7ff fccf 	bl	8000888 <Flash_read>


	RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fed3 	bl	8000c9c <getAlarm>
	RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fece 	bl	8000c9c <getAlarm>


		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000f00:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f04:	461d      	mov	r5, r3
 8000f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f0a:	461e      	mov	r6, r3
 8000f0c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f10:	469c      	mov	ip, r3
 8000f12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
							alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes, alarmA.AlarmTime.Seconds);
 8000f16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f1a:	7839      	ldrb	r1, [r7, #0]
 8000f1c:	7878      	ldrb	r0, [r7, #1]
 8000f1e:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000f22:	9404      	str	r4, [sp, #16]
 8000f24:	9003      	str	r0, [sp, #12]
 8000f26:	9102      	str	r1, [sp, #8]
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	4632      	mov	r2, r6
 8000f30:	4629      	mov	r1, r5
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <handleGetAlarms+0x60>)
 8000f34:	f000 f962 	bl	80011fc <Send>




}
 8000f38:	bf00      	nop
 8000f3a:	3754      	adds	r7, #84	; 0x54
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f40:	0800c144 	.word	0x0800c144

08000f44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <MX_I2C1_Init+0x78>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <MX_I2C1_Init+0x7c>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f80:	f001 ffa4 	bl	8002ecc <HAL_I2C_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f8a:	f000 fe99 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000f92:	f003 fe85 	bl	8004ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 fe90 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_I2C1_Init+0x74>)
 8000fa4:	f003 feec 	bl	8004d80 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 fe87 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000268 	.word	0x20000268
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	2000090e 	.word	0x2000090e

08000fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <HAL_I2C_MspInit+0x8c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12f      	bne.n	8001046 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_I2C_MspInit+0x90>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <HAL_I2C_MspInit+0x90>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_I2C_MspInit+0x90>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ffe:	23c0      	movs	r3, #192	; 0xc0
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100e:	2304      	movs	r3, #4
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_I2C_MspInit+0x94>)
 800101a:	f001 fc49 	bl	80028b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_I2C_MspInit+0x90>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_I2C_MspInit+0x90>)
 8001024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_I2C_MspInit+0x90>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	201f      	movs	r0, #31
 800103c:	f001 fb64 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001040:	201f      	movs	r0, #31
 8001042:	f001 fb8d 	bl	8002760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40005400 	.word	0x40005400
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400

0800105c <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	x1hzTime++;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <delay_1hz+0x30>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <delay_1hz+0x30>)
 800106a:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <delay_1hz+0x30>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001074:	d305      	bcc.n	8001082 <delay_1hz+0x26>
		x1hz = 1;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <delay_1hz+0x34>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <delay_1hz+0x30>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
	}
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	2000010e 	.word	0x2000010e
 8001090:	20000112 	.word	0x20000112

08001094 <delay_4hz>:

void delay_4hz(){
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	x4hzTime++;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <delay_4hz+0x30>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <delay_4hz+0x30>)
 80010a2:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <delay_4hz+0x30>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	2bf9      	cmp	r3, #249	; 0xf9
 80010aa:	d905      	bls.n	80010b8 <delay_4hz+0x24>
		x4hz = 1;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <delay_4hz+0x34>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <delay_4hz+0x30>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	801a      	strh	r2, [r3, #0]
	}

}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000110 	.word	0x20000110
 80010c8:	20000113 	.word	0x20000113

080010cc <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <delayUs+0x30>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80010de:	bf00      	nop
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <delayUs+0x34>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3f9      	bcc.n	80010e0 <delayUs+0x14>
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000958 	.word	0x20000958
 8001100:	2000090c 	.word	0x2000090c

08001104 <delayMs>:

void delayMs(uint16_t ms){
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	81fb      	strh	r3, [r7, #14]
 8001112:	e006      	b.n	8001122 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f7ff ffd8 	bl	80010cc <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	3301      	adds	r3, #1
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	89fa      	ldrh	r2, [r7, #14]
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3f4      	bcc.n	8001114 <delayMs+0x10>
	}
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <handleBlinkCommand+0x60>)
 800113a:	881a      	ldrh	r2, [r3, #0]
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <handleBlinkCommand+0x64>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	429a      	cmp	r2, r3
 8001144:	d805      	bhi.n	8001152 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <handleBlinkCommand+0x68>)
 800114c:	f001 fe42 	bl	8002dd4 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8001150:	e01e      	b.n	8001190 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <handleBlinkCommand+0x60>)
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <handleBlinkCommand+0x6c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	429a      	cmp	r2, r3
 800115e:	d805      	bhi.n	800116c <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <handleBlinkCommand+0x68>)
 8001166:	f001 fe35 	bl	8002dd4 <HAL_GPIO_WritePin>
}
 800116a:	e011      	b.n	8001190 <handleBlinkCommand+0x5c>
		led_delay = 0;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <handleBlinkCommand+0x60>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <handleBlinkCommand+0x70>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <handleBlinkCommand+0x70>)
 800117e:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <handleBlinkCommand+0x70>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <handleBlinkCommand+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000158 	.word	0x20000158
 8001198:	2000007a 	.word	0x2000007a
 800119c:	48000800 	.word	0x48000800
 80011a0:	2000014c 	.word	0x2000014c
 80011a4:	2000014e 	.word	0x2000014e
 80011a8:	2000014b 	.word	0x2000014b

080011ac <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <UART_init+0x38>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <UART_init+0x3c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <UART_init+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <UART_init+0x44>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	2100      	movs	r1, #0
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <UART_init+0x48>)
 80011d0:	f009 f980 	bl	800a4d4 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	2100      	movs	r1, #0
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <UART_init+0x4c>)
 80011dc:	f009 f97a 	bl	800a4d4 <memset>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000116 	.word	0x20000116
 80011e8:	20000118 	.word	0x20000118
 80011ec:	2000011a 	.word	0x2000011a
 80011f0:	2000011c 	.word	0x2000011c
 80011f4:	20000708 	.word	0x20000708
 80011f8:	20000364 	.word	0x20000364

080011fc <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 80011fc:	b40f      	push	{r0, r1, r2, r3}
 80011fe:	b580      	push	{r7, lr}
 8001200:	b0c4      	sub	sp, #272	; 0x110
 8001202:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <Send+0x110>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 8001212:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	f107 000c 	add.w	r0, r7, #12
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001226:	f009 f9fd 	bl	800a624 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001230:	e020      	b.n	8001274 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f107 010c 	add.w	r1, r7, #12
 800123c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001240:	440a      	add	r2, r1
 8001242:	7811      	ldrb	r1, [r2, #0]
 8001244:	4a32      	ldr	r2, [pc, #200]	; (8001310 <Send+0x114>)
 8001246:	54d1      	strb	r1, [r2, r3]
		idx++;
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001260:	db03      	blt.n	800126a <Send+0x6e>
			idx = 0;
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 800126a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800126e:	3301      	adds	r3, #1
 8001270:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ffbb 	bl	80001f4 <strlen>
 800127e:	4602      	mov	r2, r0
 8001280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001284:	429a      	cmp	r2, r3
 8001286:	d8d4      	bhi.n	8001232 <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <Send+0x110>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <Send+0x118>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	429a      	cmp	r2, r3
 800129a:	d127      	bne.n	80012ec <Send+0xf0>
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <Send+0x11c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <Send+0x110>)
 80012ac:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <Send+0x118>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <Send+0x114>)
 80012b8:	5c9a      	ldrb	r2, [r3, r2]
 80012ba:	1cfb      	adds	r3, r7, #3
 80012bc:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <Send+0x118>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <Send+0x118>)
 80012ca:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <Send+0x118>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012d6:	d302      	bcc.n	80012de <Send+0xe2>
			Tx_busy = 0;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <Send+0x118>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <Send+0x11c>)
 80012e6:	f007 fce9 	bl	8008cbc <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 80012ea:	e005      	b.n	80012f8 <Send+0xfc>

	} else {
		Tx_empty = idx;
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <Send+0x110>)
 80012f6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012f8:	b662      	cpsie	i
}
 80012fa:	bf00      	nop
	}
	__enable_irq();


}
 80012fc:	bf00      	nop
 80012fe:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001302:	46bd      	mov	sp, r7
 8001304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001308:	b004      	add	sp, #16
 800130a:	4770      	bx	lr
 800130c:	2000011a 	.word	0x2000011a
 8001310:	20000364 	.word	0x20000364
 8001314:	2000011c 	.word	0x2000011c
 8001318:	200009a4 	.word	0x200009a4

0800131c <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_UART_TxCpltCallback+0x60>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	429a      	cmp	r2, r3
 8001332:	d01d      	beq.n	8001370 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_TxCpltCallback+0x64>)
 800133e:	5c9b      	ldrb	r3, [r3, r2]
 8001340:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	3301      	adds	r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 800134e:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135a:	d302      	bcc.n	8001362 <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_UART_TxCpltCallback+0x5c>)
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001362:	f107 030f 	add.w	r3, r7, #15
 8001366:	2201      	movs	r2, #1
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_UART_TxCpltCallback+0x68>)
 800136c:	f007 fca6 	bl	8008cbc <HAL_UART_Transmit_IT>
	}
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000011c 	.word	0x2000011c
 800137c:	2000011a 	.word	0x2000011a
 8001380:	20000364 	.word	0x20000364
 8001384:	200009a4 	.word	0x200009a4

08001388 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_RxCpltCallback+0x50>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11a      	bne.n	80013d0 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_UART_RxCpltCallback+0x54>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_UART_RxCpltCallback+0x54>)
 80013a6:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_UART_RxCpltCallback+0x54>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b2:	d302      	bcc.n	80013ba <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_UART_RxCpltCallback+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_UART_RxCpltCallback+0x54>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_UART_RxCpltCallback+0x58>)
 80013c4:	4413      	add	r3, r2
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_UART_RxCpltCallback+0x5c>)
 80013cc:	f007 fce4 	bl	8008d98 <HAL_UART_Receive_IT>


	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	20000116 	.word	0x20000116
 80013e0:	20000708 	.word	0x20000708
 80013e4:	200009a4 	.word	0x200009a4

080013e8 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <uart_ready+0x24>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <uart_ready+0x28>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d101      	bne.n	8001400 <uart_ready+0x18>
		return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e000      	b.n	8001402 <uart_ready+0x1a>
	} else {
		return 1;
 8001400:	2301      	movs	r3, #1
	}
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000116 	.word	0x20000116
 8001410:	20000118 	.word	0x20000118

08001414 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ======== RTC =========== */



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 800141c:	2200      	movs	r2, #0
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f005 fecd 	bl	80071c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8001426:	2200      	movs	r2, #0
 8001428:	490e      	ldr	r1, [pc, #56]	; (8001464 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f006 f864 	bl	80074f8 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	737b      	strb	r3, [r7, #13]


	 if(clock_mode == 1){
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	7bb9      	ldrb	r1, [r7, #14]
 8001450:	7b7a      	ldrb	r2, [r7, #13]
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe fffa 	bl	800044c <displayHour>





}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000128 	.word	0x20000128
 8001464:	2000013c 	.word	0x2000013c
 8001468:	20000078 	.word	0x20000078

0800146c <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af04      	add	r7, sp, #16
	uint8_t picked_command = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 8001476:	495a      	ldr	r1, [pc, #360]	; (80015e0 <parseCommand+0x174>)
 8001478:	485a      	ldr	r0, [pc, #360]	; (80015e4 <parseCommand+0x178>)
 800147a:	f7fe feb1 	bl	80001e0 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <parseCommand+0x1e>

		handleSetClockMode();
 8001484:	f7ff fb58 	bl	8000b38 <handleSetClockMode>
 8001488:	e09f      	b.n	80015ca <parseCommand+0x15e>


	} else if (strcmp("setTime", command) == 0){
 800148a:	4955      	ldr	r1, [pc, #340]	; (80015e0 <parseCommand+0x174>)
 800148c:	4856      	ldr	r0, [pc, #344]	; (80015e8 <parseCommand+0x17c>)
 800148e:	f7fe fea7 	bl	80001e0 <strcmp>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d119      	bne.n	80014cc <parseCommand+0x60>
		parseTime();
 8001498:	f000 f8d0 	bl	800163c <parseTime>
		resetPins();
 800149c:	f7ff f8b2 	bl	8000604 <resetPins>

		setTime(sTime, hour_to_show, minute_to_show, second_to_show);
 80014a0:	4b52      	ldr	r3, [pc, #328]	; (80015ec <parseCommand+0x180>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <parseCommand+0x184>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <parseCommand+0x188>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <parseCommand+0x18c>)
 80014ba:	9003      	str	r0, [sp, #12]
 80014bc:	9102      	str	r1, [sp, #8]
 80014be:	9201      	str	r2, [sp, #4]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c6:	f7fe ff89 	bl	80003dc <setTime>
 80014ca:	e07e      	b.n	80015ca <parseCommand+0x15e>


	} else if (strcmp("getTime", command) == 0) {
 80014cc:	4944      	ldr	r1, [pc, #272]	; (80015e0 <parseCommand+0x174>)
 80014ce:	484b      	ldr	r0, [pc, #300]	; (80015fc <parseCommand+0x190>)
 80014d0:	f7fe fe86 	bl	80001e0 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <parseCommand+0x9c>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <parseCommand+0x18c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <parseCommand+0x18c>)
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <parseCommand+0x18c>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	4845      	ldr	r0, [pc, #276]	; (8001600 <parseCommand+0x194>)
 80014ec:	f7ff fe86 	bl	80011fc <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 80014f0:	4b44      	ldr	r3, [pc, #272]	; (8001604 <parseCommand+0x198>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <parseCommand+0x198>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b41      	ldr	r3, [pc, #260]	; (8001604 <parseCommand+0x198>)
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	4841      	ldr	r0, [pc, #260]	; (8001608 <parseCommand+0x19c>)
 8001502:	f7ff fe7b 	bl	80011fc <Send>
 8001506:	e060      	b.n	80015ca <parseCommand+0x15e>


	}else if(strcmp("setAlarm", command) == 0){
 8001508:	4935      	ldr	r1, [pc, #212]	; (80015e0 <parseCommand+0x174>)
 800150a:	4840      	ldr	r0, [pc, #256]	; (800160c <parseCommand+0x1a0>)
 800150c:	f7fe fe68 	bl	80001e0 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d123      	bne.n	800155e <parseCommand+0xf2>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 8001516:	f000 f8bf 	bl	8001698 <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set, second_to_set);
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <parseCommand+0x1a4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461c      	mov	r4, r3
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <parseCommand+0x1a8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461d      	mov	r5, r3
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <parseCommand+0x1ac>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	461e      	mov	r6, r3
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <parseCommand+0x1b0>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <parseCommand+0x1b4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <parseCommand+0x1b8>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	482e      	ldr	r0, [pc, #184]	; (8001604 <parseCommand+0x198>)
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	9101      	str	r1, [sp, #4]
 800154e:	9200      	str	r2, [sp, #0]
 8001550:	4633      	mov	r3, r6
 8001552:	462a      	mov	r2, r5
 8001554:	4621      	mov	r1, r4
 8001556:	6800      	ldr	r0, [r0, #0]
 8001558:	f7ff fbd0 	bl	8000cfc <handleSetAlarm>
 800155c:	e035      	b.n	80015ca <parseCommand+0x15e>


	} else if(strcmp("getAlarms", command) == 0){
 800155e:	4920      	ldr	r1, [pc, #128]	; (80015e0 <parseCommand+0x174>)
 8001560:	4831      	ldr	r0, [pc, #196]	; (8001628 <parseCommand+0x1bc>)
 8001562:	f7fe fe3d 	bl	80001e0 <strcmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <parseCommand+0x106>
		handleGetAlarms();
 800156c:	f7ff fcb8 	bl	8000ee0 <handleGetAlarms>
 8001570:	e02b      	b.n	80015ca <parseCommand+0x15e>


	} else if (strcmp("getAlarmsCount", command) == 0){
 8001572:	491b      	ldr	r1, [pc, #108]	; (80015e0 <parseCommand+0x174>)
 8001574:	482d      	ldr	r0, [pc, #180]	; (800162c <parseCommand+0x1c0>)
 8001576:	f7fe fe33 	bl	80001e0 <strcmp>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d024      	beq.n	80015ca <parseCommand+0x15e>



	} else if (strcmp("resetAlarms", command) == 0){
 8001580:	4917      	ldr	r1, [pc, #92]	; (80015e0 <parseCommand+0x174>)
 8001582:	482b      	ldr	r0, [pc, #172]	; (8001630 <parseCommand+0x1c4>)
 8001584:	f7fe fe2c 	bl	80001e0 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <parseCommand+0x128>
		handleResetAlarms();
 800158e:	f7ff fc99 	bl	8000ec4 <handleResetAlarms>
 8001592:	e01a      	b.n	80015ca <parseCommand+0x15e>

	} else if (strcmp("showHour", command) == 0){
 8001594:	4912      	ldr	r1, [pc, #72]	; (80015e0 <parseCommand+0x174>)
 8001596:	4827      	ldr	r0, [pc, #156]	; (8001634 <parseCommand+0x1c8>)
 8001598:	f7fe fe22 	bl	80001e0 <strcmp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d110      	bne.n	80015c4 <parseCommand+0x158>

		parseTime();
 80015a2:	f000 f84b 	bl	800163c <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <parseCommand+0x180>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <parseCommand+0x184>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <parseCommand+0x188>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	f7ff faf1 	bl	8000ba4 <handleShowHour>
 80015c2:	e002      	b.n	80015ca <parseCommand+0x15e>

	}
	else {
		sendFail(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 fa4f 	bl	8001a68 <sendFail>
	}

	//handle picked command

	clearCommand();
 80015ca:	f000 f8ab 	bl	8001724 <clearCommand>
	clearData();
 80015ce:	f000 f8b9 	bl	8001744 <clearData>
	Frame_busy = 0;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <parseCommand+0x1cc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e0:	200002b8 	.word	0x200002b8
 80015e4:	0800c17c 	.word	0x0800c17c
 80015e8:	0800c184 	.word	0x0800c184
 80015ec:	20000140 	.word	0x20000140
 80015f0:	20000141 	.word	0x20000141
 80015f4:	20000142 	.word	0x20000142
 80015f8:	20000128 	.word	0x20000128
 80015fc:	0800c18c 	.word	0x0800c18c
 8001600:	0800c194 	.word	0x0800c194
 8001604:	2000013c 	.word	0x2000013c
 8001608:	0800c1b4 	.word	0x0800c1b4
 800160c:	0800c1d4 	.word	0x0800c1d4
 8001610:	20000143 	.word	0x20000143
 8001614:	20000144 	.word	0x20000144
 8001618:	20000146 	.word	0x20000146
 800161c:	20000148 	.word	0x20000148
 8001620:	20000149 	.word	0x20000149
 8001624:	2000014a 	.word	0x2000014a
 8001628:	0800c1e0 	.word	0x0800c1e0
 800162c:	0800c1ec 	.word	0x0800c1ec
 8001630:	0800c1fc 	.word	0x0800c1fc
 8001634:	0800c208 	.word	0x0800c208
 8001638:	2000011e 	.word	0x2000011e

0800163c <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <parseTime+0x44>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <parseTime+0x48>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <parseTime+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <parseTime+0x4c>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <parseTime+0x48>)
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <parseTime+0x44>)
 800165c:	490b      	ldr	r1, [pc, #44]	; (800168c <parseTime+0x50>)
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <parseTime+0x54>)
 8001660:	f008 ff58 	bl	800a514 <siscanf>
 8001664:	4603      	mov	r3, r0
 8001666:	2b03      	cmp	r3, #3
 8001668:	d103      	bne.n	8001672 <parseTime+0x36>

		 Send("$Success=1#\r\n");
 800166a:	480a      	ldr	r0, [pc, #40]	; (8001694 <parseTime+0x58>)
 800166c:	f7ff fdc6 	bl	80011fc <Send>

	 } else {

		 sendFail(2);
	 }
}
 8001670:	e002      	b.n	8001678 <parseTime+0x3c>
		 sendFail(2);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 f9f8 	bl	8001a68 <sendFail>
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000140 	.word	0x20000140
 8001684:	20000141 	.word	0x20000141
 8001688:	20000142 	.word	0x20000142
 800168c:	0800c214 	.word	0x0800c214
 8001690:	20000584 	.word	0x20000584
 8001694:	0800c220 	.word	0x0800c220

08001698 <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set, &second_to_set) == 6){
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <parseDateTime+0x34>)
 80016a0:	9303      	str	r3, [sp, #12]
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <parseDateTime+0x38>)
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <parseDateTime+0x3c>)
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <parseDateTime+0x40>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <parseDateTime+0x44>)
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <parseDateTime+0x48>)
 80016b2:	490c      	ldr	r1, [pc, #48]	; (80016e4 <parseDateTime+0x4c>)
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <parseDateTime+0x50>)
 80016b6:	f008 ff2d 	bl	800a514 <siscanf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b06      	cmp	r3, #6
 80016be:	d002      	beq.n	80016c6 <parseDateTime+0x2e>


	} else {
		sendFail(2);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f000 f9d1 	bl	8001a68 <sendFail>
	}
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000014a 	.word	0x2000014a
 80016d0:	20000149 	.word	0x20000149
 80016d4:	20000148 	.word	0x20000148
 80016d8:	20000146 	.word	0x20000146
 80016dc:	20000144 	.word	0x20000144
 80016e0:	20000143 	.word	0x20000143
 80016e4:	0800c230 	.word	0x0800c230
 80016e8:	20000584 	.word	0x20000584

080016ec <parseIntData>:



int parseIntData(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	int single_param = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	461a      	mov	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <parseIntData+0x30>)
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <parseIntData+0x34>)
 80016fe:	f008 ff09 	bl	800a514 <siscanf>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <parseIntData+0x20>
		return single_param;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	e002      	b.n	8001712 <parseIntData+0x26>
	}
	else {
		sendFail(2);
 800170c:	2002      	movs	r0, #2
 800170e:	f000 f9ab 	bl	8001a68 <sendFail>
	}


}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800c244 	.word	0x0800c244
 8001720:	20000584 	.word	0x20000584

08001724 <clearCommand>:



/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <clearCommand+0x18>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	2100      	movs	r1, #0
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <clearCommand+0x1c>)
 8001734:	f008 fece 	bl	800a4d4 <memset>

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000123 	.word	0x20000123
 8001740:	200002b8 	.word	0x200002b8

08001744 <clearData>:

void clearData(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	data_busy = 0;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <clearData+0x18>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 800174e:	227d      	movs	r2, #125	; 0x7d
 8001750:	2100      	movs	r1, #0
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <clearData+0x1c>)
 8001754:	f008 febe 	bl	800a4d4 <memset>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000124 	.word	0x20000124
 8001760:	20000584 	.word	0x20000584

08001764 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 8001776:	2300      	movs	r3, #0
 8001778:	757b      	strb	r3, [r7, #21]



	//check if begining exists
	if(frame[0] == start_sign){
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <decodeFrame+0x158>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b24      	cmp	r3, #36	; 0x24
 8001780:	d105      	bne.n	800178e <decodeFrame+0x2a>
		required_pass++;
 8001782:	7d7b      	ldrb	r3, [r7, #21]
 8001784:	3301      	adds	r3, #1
 8001786:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <decodeFrame+0x158>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
		//if char was received, consider it as first sign so the length should be + 1

	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <decodeFrame+0x15c>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <decodeFrame+0x158>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	2b23      	cmp	r3, #35	; 0x23
 800179c:	d109      	bne.n	80017b2 <decodeFrame+0x4e>
		required_pass++;
 800179e:	7d7b      	ldrb	r3, [r7, #21]
 80017a0:	3301      	adds	r3, #1
 80017a2:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 80017a4:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <decodeFrame+0x15c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	4a43      	ldr	r2, [pc, #268]	; (80018bc <decodeFrame+0x158>)
 80017ae:	2100      	movs	r1, #0
 80017b0:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e013      	b.n	80017e0 <decodeFrame+0x7c>
		if(frame[i] == '='){
 80017b8:	4a40      	ldr	r2, [pc, #256]	; (80018bc <decodeFrame+0x158>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b3d      	cmp	r3, #61	; 0x3d
 80017c2:	d10a      	bne.n	80017da <decodeFrame+0x76>
			required_pass++;
 80017c4:	7d7b      	ldrb	r3, [r7, #21]
 80017c6:	3301      	adds	r3, #1
 80017c8:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	3301      	adds	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <decodeFrame+0x15c>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	dbe4      	blt.n	80017b8 <decodeFrame+0x54>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 80017ee:	7d7b      	ldrb	r3, [r7, #21]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d12b      	bne.n	800184c <decodeFrame+0xe8>
 80017f4:	7dba      	ldrb	r2, [r7, #22]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d027      	beq.n	800184c <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 80017fc:	2301      	movs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e020      	b.n	8001844 <decodeFrame+0xe0>
			//prevent memory leaks
			if(command_busy >= command_size){
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <decodeFrame+0x160>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	b25b      	sxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	da09      	bge.n	8001822 <decodeFrame+0xbe>
				command_busy = 0;
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <decodeFrame+0x160>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	2100      	movs	r1, #0
 8001818:	482b      	ldr	r0, [pc, #172]	; (80018c8 <decodeFrame+0x164>)
 800181a:	f008 fe5b 	bl	800a4d4 <memset>
				i = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <decodeFrame+0x160>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	b2d1      	uxtb	r1, r2
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <decodeFrame+0x160>)
 800182e:	7011      	strb	r1, [r2, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <decodeFrame+0x158>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <decodeFrame+0x164>)
 800183c:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	ddda      	ble.n	8001802 <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 800184c:	7d7b      	ldrb	r3, [r7, #21]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d130      	bne.n	80018b4 <decodeFrame+0x150>
 8001852:	7dfa      	ldrb	r2, [r7, #23]
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <decodeFrame+0x15c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	429a      	cmp	r2, r3
 800185e:	d029      	beq.n	80018b4 <decodeFrame+0x150>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	e01f      	b.n	80018a6 <decodeFrame+0x142>
			//prevent memory leaks
			if(data_busy >= data_size){
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <decodeFrame+0x168>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b7c      	cmp	r3, #124	; 0x7c
 800186e:	d909      	bls.n	8001884 <decodeFrame+0x120>
				data_busy = 0;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <decodeFrame+0x168>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 8001876:	227d      	movs	r2, #125	; 0x7d
 8001878:	2100      	movs	r1, #0
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <decodeFrame+0x16c>)
 800187c:	f008 fe2a 	bl	800a4d4 <memset>
				i = data_idx;
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <decodeFrame+0x168>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <decodeFrame+0x168>)
 8001890:	7011      	strb	r1, [r2, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <decodeFrame+0x158>)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <decodeFrame+0x16c>)
 800189e:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <decodeFrame+0x15c>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	dbd8      	blt.n	8001866 <decodeFrame+0x102>
		}

	}


}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000604 	.word	0x20000604
 80018c0:	20000120 	.word	0x20000120
 80018c4:	20000123 	.word	0x20000123
 80018c8:	200002b8 	.word	0x200002b8
 80018cc:	20000124 	.word	0x20000124
 80018d0:	20000584 	.word	0x20000584

080018d4 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <downloadFrame+0xf0>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <downloadFrame+0xf4>)
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <downloadFrame+0xf0>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <downloadFrame+0xf0>)
 80018f4:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <downloadFrame+0xf0>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001900:	d302      	bcc.n	8001908 <downloadFrame+0x34>
		Rx_busy = 0;
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <downloadFrame+0xf0>)
 8001904:	2200      	movs	r2, #0
 8001906:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b24      	cmp	r3, #36	; 0x24
 800190c:	d10f      	bne.n	800192e <downloadFrame+0x5a>
			memset(frame, 0x00, FRAME_SIZE); //reset frame #
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	2100      	movs	r1, #0
 8001914:	482d      	ldr	r0, [pc, #180]	; (80019cc <downloadFrame+0xf8>)
 8001916:	f008 fddd 	bl	800a4d4 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <downloadFrame+0xfc>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]

			Frame_busy = 0;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <downloadFrame+0x100>)
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
			frameLength = 1; //set frame length to one cos $ is already in the frame
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <downloadFrame+0x104>)
 8001928:	2201      	movs	r2, #1
 800192a:	801a      	strh	r2, [r3, #0]
 800192c:	e00a      	b.n	8001944 <downloadFrame+0x70>

		} else if(frame_found == 1){ //frame length if more than one start sign is found
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <downloadFrame+0xfc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <downloadFrame+0x70>

			frameLength++;
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <downloadFrame+0x104>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <downloadFrame+0x104>)
 8001942:	801a      	strh	r2, [r3, #0]

		}

		//if frame found start downloading frame
		//start downloading the frame
		if(frame_found == 1){
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <downloadFrame+0xfc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10a      	bne.n	8001962 <downloadFrame+0x8e>

				//copy a frame to analyze it
					frame[Frame_busy++] = byte; //download chars
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <downloadFrame+0x100>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	b291      	uxth	r1, r2
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <downloadFrame+0x100>)
 8001958:	8011      	strh	r1, [r2, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <downloadFrame+0xf8>)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	5453      	strb	r3, [r2, r1]

			}

		//check if frame is not too long
		if(frameLength > FRAME_SIZE){
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <downloadFrame+0x104>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196c:	d911      	bls.n	8001992 <downloadFrame+0xbe>
			memset(frame, 0x00, FRAME_SIZE);
 800196e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001972:	2100      	movs	r1, #0
 8001974:	4815      	ldr	r0, [pc, #84]	; (80019cc <downloadFrame+0xf8>)
 8001976:	f008 fdad 	bl	800a4d4 <memset>
			Frame_busy = 0;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <downloadFrame+0x100>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <downloadFrame+0x104>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <downloadFrame+0xfc>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 800198c:	2004      	movs	r0, #4
 800198e:	f000 f86b 	bl	8001a68 <sendFail>
		}


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b23      	cmp	r3, #35	; 0x23
 8001996:	d110      	bne.n	80019ba <downloadFrame+0xe6>
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <downloadFrame+0xfc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10c      	bne.n	80019ba <downloadFrame+0xe6>
			frame_found = 0; //stop downloading chars
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <downloadFrame+0xfc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <downloadFrame+0x100>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]

		  //if frame is received, analyze it
			decodeFrame();
 80019ac:	f7ff feda 	bl	8001764 <decodeFrame>
			parseCommand();
 80019b0:	f7ff fd5c 	bl	800146c <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <downloadFrame+0x104>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	801a      	strh	r2, [r3, #0]

		 }



}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000118 	.word	0x20000118
 80019c8:	20000708 	.word	0x20000708
 80019cc:	20000604 	.word	0x20000604
 80019d0:	20000122 	.word	0x20000122
 80019d4:	2000011e 	.word	0x2000011e
 80019d8:	20000120 	.word	0x20000120

080019dc <buttonHandler>:





void buttonHandler() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80019e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e4:	481c      	ldr	r0, [pc, #112]	; (8001a58 <buttonHandler+0x7c>)
 80019e6:	f001 f9cf 	bl	8002d88 <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d113      	bne.n	8001a18 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <buttonHandler+0x80>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <buttonHandler+0x80>)
 8001a02:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <buttonHandler+0x84>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <buttonHandler+0x88>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8001a10:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001a14:	f000 fd64 	bl	80024e0 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <buttonHandler+0x80>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10c      	bne.n	8001a3a <buttonHandler+0x5e>
			  if(x1hz == 1){
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <buttonHandler+0x84>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d114      	bne.n	8001a52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <buttonHandler+0x7c>)
 8001a2e:	f001 fa01 	bl	8002e34 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <buttonHandler+0x84>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001a38:	e00b      	b.n	8001a52 <buttonHandler+0x76>
			  if(x4hz == 1){
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <buttonHandler+0x88>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <buttonHandler+0x7c>)
 8001a48:	f001 f9f4 	bl	8002e34 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <buttonHandler+0x88>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	20000114 	.word	0x20000114
 8001a60:	20000112 	.word	0x20000112
 8001a64:	20000113 	.word	0x20000113

08001a68 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <sendFail+0x1c>)
 8001a78:	f7ff fbc0 	bl	80011fc <Send>

}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	0800c248 	.word	0x0800c248

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 8001a8e:	f7ff fb8d 	bl	80011ac <UART_init>
	FLASH_init();
 8001a92:	f7fe fe61 	bl	8000758 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a96:	f000 fcbd 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f8a9 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9e:	f7fe ff65 	bl	800096c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aa2:	f000 fc13 	bl	80022cc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001aa6:	f000 fb61 	bl	800216c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001aaa:	f000 fb97 	bl	80021dc <MX_TIM7_Init>

  MX_I2C1_Init();
 8001aae:	f7ff fa49 	bl	8000f44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	483d      	ldr	r0, [pc, #244]	; (8001bac <main+0x124>)
 8001ab6:	f006 fb5b 	bl	8008170 <HAL_RTCEx_BKUPRead>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d001      	beq.n	8001ac8 <main+0x40>
	  MX_RTC_Init();
 8001ac4:	f000 f90c 	bl	8001ce0 <MX_RTC_Init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001ac8:	4838      	ldr	r0, [pc, #224]	; (8001bac <main+0x124>)
 8001aca:	f006 fab3 	bl	8008034 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2500 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f640 11c3 	movw	r1, #2499	; 0x9c3
 8001ad4:	4835      	ldr	r0, [pc, #212]	; (8001bac <main+0x124>)
 8001ad6:	f006 f9d7 	bl	8007e88 <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <main+0x128>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <main+0x12c>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <main+0x130>)
 8001aec:	f007 f954 	bl	8008d98 <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 8001af0:	4832      	ldr	r0, [pc, #200]	; (8001bbc <main+0x134>)
 8001af2:	f7ff fb83 	bl	80011fc <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001af6:	4832      	ldr	r0, [pc, #200]	; (8001bc0 <main+0x138>)
 8001af8:	f006 fc46 	bl	8008388 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <main+0x138>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <main+0x13c>)
 8001b04:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <main+0x140>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <main+0xb6>
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <main+0x144>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d112      	bne.n	8001b3e <main+0xb6>
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <main+0x148>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <main+0xb6>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <main+0x148>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <main+0x14c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <main+0x150>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f7fe fc87 	bl	800044c <displayHour>
	   }


	 buttonHandler();
 8001b3e:	f7ff ff4d 	bl	80019dc <buttonHandler>


	 while(uart_ready()){
 8001b42:	e001      	b.n	8001b48 <main+0xc0>

		 downloadFrame();
 8001b44:	f7ff fec6 	bl	80018d4 <downloadFrame>
	 while(uart_ready()){
 8001b48:	f7ff fc4e 	bl	80013e8 <uart_ready>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f8      	bne.n	8001b44 <main+0xbc>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <main+0x154>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <main+0xda>
		 handleBlinkCommand();
 8001b5c:	f7ff faea 	bl	8001134 <handleBlinkCommand>
 8001b60:	e018      	b.n	8001b94 <main+0x10c>
	 } else if(blink_mode == 2){
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <main+0x154>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d113      	bne.n	8001b94 <main+0x10c>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <main+0x138>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <main+0x13c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <main+0x158>)
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d308      	bcc.n	8001b94 <main+0x10c>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	4817      	ldr	r0, [pc, #92]	; (8001be4 <main+0x15c>)
 8001b86:	f001 f955 	bl	8002e34 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <main+0x138>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <main+0x13c>)
 8001b92:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <main+0x160>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d1b3      	bne.n	8001b06 <main+0x7e>


		 delayMs(delayTime);
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <main+0x164>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff faad 	bl	8001104 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001baa:	e7ac      	b.n	8001b06 <main+0x7e>
 8001bac:	20000564 	.word	0x20000564
 8001bb0:	20000116 	.word	0x20000116
 8001bb4:	20000708 	.word	0x20000708
 8001bb8:	200009a4 	.word	0x200009a4
 8001bbc:	0800c254 	.word	0x0800c254
 8001bc0:	2000090c 	.word	0x2000090c
 8001bc4:	20000150 	.word	0x20000150
 8001bc8:	20000078 	.word	0x20000078
 8001bcc:	20000125 	.word	0x20000125
 8001bd0:	20000140 	.word	0x20000140
 8001bd4:	20000141 	.word	0x20000141
 8001bd8:	20000142 	.word	0x20000142
 8001bdc:	2000014b 	.word	0x2000014b
 8001be0:	20000360 	.word	0x20000360
 8001be4:	48000800 	.word	0x48000800
 8001be8:	20000154 	.word	0x20000154
 8001bec:	20000156 	.word	0x20000156

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0a6      	sub	sp, #152	; 0x98
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bfa:	2228      	movs	r2, #40	; 0x28
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f008 fc68 	bl	800a4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2258      	movs	r2, #88	; 0x58
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f008 fc5a 	bl	800a4d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c20:	230a      	movs	r3, #10
 8001c22:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 f90f 	bl	8004e78 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c60:	f000 f82e 	bl	8001cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c64:	230f      	movs	r3, #15
 8001c66:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 f96b 	bl	8005f5c <HAL_RCC_ClockConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c8c:	f000 f818 	bl	8001cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 fc33 	bl	8006510 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cb0:	f000 f806 	bl	8001cc0 <Error_Handler>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3798      	adds	r7, #152	; 0x98
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	00010022 	.word	0x00010022

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>

08001cca <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b090      	sub	sp, #64	; 0x40
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2228      	movs	r2, #40	; 0x28
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f008 fbe7 	bl	800a4d4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d06:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <MX_RTC_Init+0x164>)
 8001d0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d12:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d14:	227f      	movs	r2, #127	; 0x7f
 8001d16:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d18:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d1e:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d2a:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d30:	4843      	ldr	r0, [pc, #268]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d32:	f004 ffe5 	bl	8006d00 <HAL_RTC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d3c:	f7ff ffc0 	bl	8001cc0 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */


  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32f2){
 8001d40:	2101      	movs	r1, #1
 8001d42:	483f      	ldr	r0, [pc, #252]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d44:	f006 fa14 	bl	8008170 <HAL_RTCEx_BKUPRead>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d072      	beq.n	8001e38 <MX_RTC_Init+0x158>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8001d52:	2317      	movs	r3, #23
 8001d54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 59;
 8001d58:	233b      	movs	r3, #59	; 0x3b
 8001d5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 55;
 8001d5e:	2337      	movs	r3, #55	; 0x37
 8001d60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4832      	ldr	r0, [pc, #200]	; (8001e40 <MX_RTC_Init+0x160>)
 8001d76:	f005 f8b7 	bl	8006ee8 <HAL_RTC_SetTime>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001d80:	f7ff ff9e 	bl	8001cc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_FEBRUARY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 15;
 8001d90:	230f      	movs	r3, #15
 8001d92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8001d96:	2316      	movs	r3, #22
 8001d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da0:	2200      	movs	r2, #0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <MX_RTC_Init+0x160>)
 8001da6:	f005 fa77 	bl	8007298 <HAL_RTC_SetDate>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8001db0:	f7ff ff86 	bl	8001cc0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 13;
 8001db4:	230d      	movs	r3, #13
 8001db6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 20;
 8001db8:	2314      	movs	r3, #20
 8001dba:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 30;
 8001dbc:	231e      	movs	r3, #30
 8001dbe:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4815      	ldr	r0, [pc, #84]	; (8001e40 <MX_RTC_Init+0x160>)
 8001dec:	f005 fbe0 	bl	80075b0 <HAL_RTC_SetAlarm_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 8001df6:	f7ff ff63 	bl	8001cc0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001e00:	463b      	mov	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	480e      	ldr	r0, [pc, #56]	; (8001e40 <MX_RTC_Init+0x160>)
 8001e08:	f005 fbd2 	bl	80075b0 <HAL_RTC_SetAlarm_IT>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8001e12:	f7ff ff55 	bl	8001cc0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4809      	ldr	r0, [pc, #36]	; (8001e40 <MX_RTC_Init+0x160>)
 8001e1c:	f006 f834 	bl	8007e88 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8001e26:	f7ff ff4b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //write backup registry
  //HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001e2a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_RTC_Init+0x160>)
 8001e32:	f006 f97b 	bl	800812c <HAL_RTCEx_BKUPWrite>
 8001e36:	e000      	b.n	8001e3a <MX_RTC_Init+0x15a>
	  return;
 8001e38:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8001e3a:	3740      	adds	r7, #64	; 0x40
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000564 	.word	0x20000564
 8001e44:	40002800 	.word	0x40002800

08001e48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RTC_MspInit+0x64>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d123      	bne.n	8001ea2 <HAL_RTC_MspInit+0x5a>
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e68:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RTC_MspInit+0x68>)
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2003      	movs	r0, #3
 8001e84:	f000 fc40 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 fc69 	bl	8002760 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2029      	movs	r0, #41	; 0x29
 8001e94:	f000 fc38 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e98:	2029      	movs	r0, #41	; 0x29
 8001e9a:	f000 fc61 	bl	8002760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

    HAL_PWR_EnableBkUpAccess();
 8001e9e:	f002 ffdb 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40002800 	.word	0x40002800
 8001eb0:	10908100 	.word	0x10908100

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f000 fbec 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 8001f48:	f7ff f888 	bl	800105c <delay_1hz>
	delay_4hz();
 8001f4c:	f7ff f8a2 	bl	8001094 <delay_4hz>

	if(blink_mode == 1){
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <SysTick_Handler+0x2c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <SysTick_Handler+0x22>
		led_delay++;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <SysTick_Handler+0x30>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Handler+0x30>)
 8001f64:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 fa9b 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000014b 	.word	0x2000014b
 8001f74:	20000158 	.word	0x20000158

08001f78 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <RTC_WKUP_IRQHandler+0x10>)
 8001f7e:	f006 f8b1 	bl	80080e4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000564 	.word	0x20000564

08001f8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <I2C1_EV_IRQHandler+0x10>)
 8001f92:	f001 fa7d 	bl	8003490 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000268 	.word	0x20000268

08001fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USART2_IRQHandler+0x10>)
 8001fa6:	f006 ff45 	bl	8008e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200009a4 	.word	0x200009a4

08001fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fbc:	f000 ff62 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <RTC_Alarm_IRQHandler+0x10>)
 8001fca:	f005 fe87 	bl	8007cdc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000564 	.word	0x20000564

08001fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM6_DAC_IRQHandler+0x10>)
 8001fde:	f006 fa7f 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000090c 	.word	0x2000090c

08001fec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <TIM7_IRQHandler+0x10>)
 8001ff2:	f006 fa75 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000958 	.word	0x20000958

08002000 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e00a      	b.n	8002028 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002012:	f3af 8000 	nop.w
 8002016:	4601      	mov	r1, r0
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbf0      	blt.n	8002012 <_read+0x12>
	}

return len;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e009      	b.n	8002060 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf1      	blt.n	800204c <_write+0x12>
	}
	return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_close>:

int _close(int file)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
	return -1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209a:	605a      	str	r2, [r3, #4]
	return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_isatty>:

int _isatty(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	return 1;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f008 f9b8 	bl	800a480 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20010000 	.word	0x20010000
 800213c:	00000400 	.word	0x00000400
 8002140:	2000015c 	.word	0x2000015c
 8002144:	20000a40 	.word	0x20000a40

08002148 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <MX_TIM6_Init+0x68>)
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <MX_TIM6_Init+0x6c>)
 8002180:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_TIM6_Init+0x68>)
 8002184:	f242 720f 	movw	r2, #9999	; 0x270f
 8002188:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <MX_TIM6_Init+0x68>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_TIM6_Init+0x68>)
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_TIM6_Init+0x68>)
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800219e:	480d      	ldr	r0, [pc, #52]	; (80021d4 <MX_TIM6_Init+0x68>)
 80021a0:	f006 f810 	bl	80081c4 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021aa:	f7ff fd89 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	; (80021d4 <MX_TIM6_Init+0x68>)
 80021bc:	f006 fb80 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021c6:	f7ff fd7b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000090c 	.word	0x2000090c
 80021d8:	40001000 	.word	0x40001000

080021dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_TIM7_Init+0x64>)
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <MX_TIM7_Init+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_TIM7_Init+0x64>)
 80021f4:	2247      	movs	r2, #71	; 0x47
 80021f6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_TIM7_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_TIM7_Init+0x64>)
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_TIM7_Init+0x64>)
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_TIM7_Init+0x64>)
 800220e:	f005 ffd9 	bl	80081c4 <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002218:	f7ff fd52 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_TIM7_Init+0x64>)
 800222a:	f006 fb49 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002234:	f7ff fd44 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000958 	.word	0x20000958
 8002244:	40001400 	.word	0x40001400

08002248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_TIM_Base_MspInit+0x78>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d114      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2036      	movs	r0, #54	; 0x36
 8002278:	f000 fa46 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800227c:	2036      	movs	r0, #54	; 0x36
 800227e:	f000 fa6f 	bl	8002760 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002282:	e018      	b.n	80022b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_TIM_Base_MspInit+0x80>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_Base_MspInit+0x7c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2037      	movs	r0, #55	; 0x37
 80022ac:	f000 fa2c 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022b0:	2037      	movs	r0, #55	; 0x37
 80022b2:	f000 fa55 	bl	8002760 <HAL_NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40001000 	.word	0x40001000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40001400 	.word	0x40001400

080022cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART2_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002310:	f006 fc42 	bl	8008b98 <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f7ff fcd1 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200009a4 	.word	0x200009a4
 8002328:	40004400 	.word	0x40004400

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_UART_MspInit+0x8c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d130      	bne.n	80023b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_UART_MspInit+0x90>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_UART_MspInit+0x90>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	6153      	str	r3, [r2, #20]
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800237e:	230c      	movs	r3, #12
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238e:	2307      	movs	r3, #7
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f000 fa88 	bl	80028b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	2026      	movs	r0, #38	; 0x26
 80023a6:	f000 f9af 	bl	8002708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023aa:	2026      	movs	r0, #38	; 0x26
 80023ac:	f000 f9d8 	bl	8002760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40004400 	.word	0x40004400
 80023bc:	40021000 	.word	0x40021000

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopForever+0x16>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ea:	f7ff fead 	bl	8002148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f008 f84d 	bl	800a48c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7ff fb49 	bl	8001a88 <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002404:	0800c718 	.word	0x0800c718
  ldr r2, =_sbss
 8002408:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 800240c:	20000a3c 	.word	0x20000a3c

08002410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC1_2_IRQHandler>
	...

08002414 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x28>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_Init+0x28>)
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f94f 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fd40 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000

08002440 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f996 	bl	8002790 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f944 	bl	8002708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000007c 	.word	0x2000007c
 8002498:	20000084 	.word	0x20000084
 800249c:	20000080 	.word	0x20000080

080024a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000084 	.word	0x20000084
 80024c4:	20000a28 	.word	0x20000a28

080024c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000a28 	.word	0x20000a28

080024e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000084 	.word	0x20000084

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b07      	cmp	r3, #7
 80026d4:	d00f      	beq.n	80026f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d00c      	beq.n	80026f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d009      	beq.n	80026f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d006      	beq.n	80026f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d003      	beq.n	80026f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026ee:	21ac      	movs	r1, #172	; 0xac
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80026f2:	f7ff faea 	bl	8001cca <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff16 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	0800c274 	.word	0x0800c274

08002708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d903      	bls.n	8002728 <HAL_NVIC_SetPriority+0x20>
 8002720:	21c4      	movs	r1, #196	; 0xc4
 8002722:	480e      	ldr	r0, [pc, #56]	; (800275c <HAL_NVIC_SetPriority+0x54>)
 8002724:	f7ff fad1 	bl	8001cca <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	d903      	bls.n	8002736 <HAL_NVIC_SetPriority+0x2e>
 800272e:	21c5      	movs	r1, #197	; 0xc5
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <HAL_NVIC_SetPriority+0x54>)
 8002732:	f7ff faca 	bl	8001cca <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002736:	f7ff ff1b 	bl	8002570 <__NVIC_GetPriorityGrouping>
 800273a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	6978      	ldr	r0, [r7, #20]
 8002742:	f7ff ff6b 	bl	800261c <NVIC_EncodePriority>
 8002746:	4602      	mov	r2, r0
 8002748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff3a 	bl	80025c8 <__NVIC_SetPriority>
}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	0800c274 	.word	0x0800c274

08002760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	da03      	bge.n	800277a <HAL_NVIC_EnableIRQ+0x1a>
 8002772:	21d8      	movs	r1, #216	; 0xd8
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_NVIC_EnableIRQ+0x2c>)
 8002776:	f7ff faa8 	bl	8001cca <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff04 	bl	800258c <__NVIC_EnableIRQ>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	0800c274 	.word	0x0800c274

08002790 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff73 	bl	8002684 <SysTick_Config>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d008      	beq.n	80027cc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e020      	b.n	800280e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020e 	bic.w	r2, r2, #14
 80027da:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800282c:	2b02      	cmp	r3, #2
 800282e:	d005      	beq.n	800283c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e027      	b.n	800288c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 020e 	bic.w	r2, r2, #14
 800284a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
    } 
  }
  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c4:	d01f      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_GPIO_Init+0x104>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01b      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a39      	ldr	r2, [pc, #228]	; (80029b8 <HAL_GPIO_Init+0x108>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d017      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a38      	ldr	r2, [pc, #224]	; (80029bc <HAL_GPIO_Init+0x10c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <HAL_GPIO_Init+0x110>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00f      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a36      	ldr	r2, [pc, #216]	; (80029c4 <HAL_GPIO_Init+0x114>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00b      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a35      	ldr	r2, [pc, #212]	; (80029c8 <HAL_GPIO_Init+0x118>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_GPIO_Init+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028fe:	21b2      	movs	r1, #178	; 0xb2
 8002900:	4833      	ldr	r0, [pc, #204]	; (80029d0 <HAL_GPIO_Init+0x120>)
 8002902:	f7ff f9e2 	bl	8001cca <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_GPIO_Init+0x6c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x74>
 800291c:	21b3      	movs	r1, #179	; 0xb3
 800291e:	482c      	ldr	r0, [pc, #176]	; (80029d0 <HAL_GPIO_Init+0x120>)
 8002920:	f7ff f9d3 	bl	8001cca <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 821c 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	f000 8217 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b11      	cmp	r3, #17
 800293e:	f000 8212 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	f000 820d 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b12      	cmp	r3, #18
 8002952:	f000 8208 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800295e:	f000 8202 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800296a:	f000 81fc 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002976:	f000 81f6 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002982:	f000 81f0 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800298e:	f000 81ea 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800299a:	f000 81e4 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	f000 81df 	beq.w	8002d66 <HAL_GPIO_Init+0x4b6>
 80029a8:	21b4      	movs	r1, #180	; 0xb4
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <HAL_GPIO_Init+0x120>)
 80029ac:	f7ff f98d 	bl	8001cca <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b0:	e1d9      	b.n	8002d66 <HAL_GPIO_Init+0x4b6>
 80029b2:	bf00      	nop
 80029b4:	48000400 	.word	0x48000400
 80029b8:	48000800 	.word	0x48000800
 80029bc:	48000c00 	.word	0x48000c00
 80029c0:	48001000 	.word	0x48001000
 80029c4:	48001400 	.word	0x48001400
 80029c8:	48001800 	.word	0x48001800
 80029cc:	48001c00 	.word	0x48001c00
 80029d0:	0800c2b0 	.word	0x0800c2b0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 81ba 	beq.w	8002d60 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_GPIO_Init+0x154>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d140      	bne.n	8002a86 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_GPIO_Init+0x174>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x174>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x174>
 8002a1c:	21c3      	movs	r1, #195	; 0xc3
 8002a1e:	4894      	ldr	r0, [pc, #592]	; (8002c70 <HAL_GPIO_Init+0x3c0>)
 8002a20:	f7ff f953 	bl	8001cca <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d027      	beq.n	8002ae2 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002aaa:	21d4      	movs	r1, #212	; 0xd4
 8002aac:	4870      	ldr	r0, [pc, #448]	; (8002c70 <HAL_GPIO_Init+0x3c0>)
 8002aae:	f7ff f90c 	bl	8001cca <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d157      	bne.n	8002b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <HAL_GPIO_Init+0x3c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01b      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_GPIO_Init+0x3c8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d017      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_GPIO_Init+0x3cc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <HAL_GPIO_Init+0x3d0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <HAL_GPIO_Init+0x3d4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a59      	ldr	r2, [pc, #356]	; (8002c88 <HAL_GPIO_Init+0x3d8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_GPIO_Init+0x3dc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x286>
 8002b2e:	21e2      	movs	r1, #226	; 0xe2
 8002b30:	484f      	ldr	r0, [pc, #316]	; (8002c70 <HAL_GPIO_Init+0x3c0>)
 8002b32:	f7ff f8ca 	bl	8001cca <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d90b      	bls.n	8002b56 <HAL_GPIO_Init+0x2a6>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b0e      	cmp	r3, #14
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_Init+0x2a6>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2a6>
 8002b4e:	21e3      	movs	r1, #227	; 0xe3
 8002b50:	4847      	ldr	r0, [pc, #284]	; (8002c70 <HAL_GPIO_Init+0x3c0>)
 8002b52:	f7ff f8ba 	bl	8001cca <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80c0 	beq.w	8002d60 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_GPIO_Init+0x3e0>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <HAL_GPIO_Init+0x3e0>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x3e0>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_GPIO_Init+0x3e4>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c22:	d039      	beq.n	8002c98 <HAL_GPIO_Init+0x3e8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_GPIO_Init+0x3c4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d01f      	beq.n	8002c6c <HAL_GPIO_Init+0x3bc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_GPIO_Init+0x3c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d019      	beq.n	8002c68 <HAL_GPIO_Init+0x3b8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_GPIO_Init+0x3cc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <HAL_GPIO_Init+0x3b4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_GPIO_Init+0x3d0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00d      	beq.n	8002c60 <HAL_GPIO_Init+0x3b0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_GPIO_Init+0x3d4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <HAL_GPIO_Init+0x3ac>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_GPIO_Init+0x3d8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_GPIO_Init+0x3a8>
 8002c54:	2306      	movs	r3, #6
 8002c56:	e020      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c58:	2307      	movs	r3, #7
 8002c5a:	e01e      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	e01c      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e01a      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c64:	2303      	movs	r3, #3
 8002c66:	e018      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e016      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e014      	b.n	8002c9a <HAL_GPIO_Init+0x3ea>
 8002c70:	0800c2b0 	.word	0x0800c2b0
 8002c74:	48000400 	.word	0x48000400
 8002c78:	48000800 	.word	0x48000800
 8002c7c:	48000c00 	.word	0x48000c00
 8002c80:	48001000 	.word	0x48001000
 8002c84:	48001400 	.word	0x48001400
 8002c88:	48001800 	.word	0x48001800
 8002c8c:	48001c00 	.word	0x48001c00
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40010000 	.word	0x40010000
 8002c98:	2300      	movs	r3, #0
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	f002 0203 	and.w	r2, r2, #3
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002caa:	4935      	ldr	r1, [pc, #212]	; (8002d80 <HAL_GPIO_Init+0x4d0>)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb8:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d06:	4a1f      	ldr	r2, [pc, #124]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_GPIO_Init+0x4d4>)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3301      	adds	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f ae2f 	bne.w	80029d4 <HAL_GPIO_Init+0x124>
  }
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010400 	.word	0x40010400

08002d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_GPIO_ReadPin+0x1c>
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_GPIO_ReadPin+0x26>
 8002da4:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002da8:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <HAL_GPIO_ReadPin+0x48>)
 8002daa:	f7fe ff8e 	bl	8001cca <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e001      	b.n	8002dc4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	0800c2b0 	.word	0x0800c2b0

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_GPIO_WritePin+0x20>
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_GPIO_WritePin+0x2a>
 8002df4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <HAL_GPIO_WritePin+0x5c>)
 8002dfa:	f7fe ff66 	bl	8001cca <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002dfe:	787b      	ldrb	r3, [r7, #1]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_GPIO_WritePin+0x40>
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d004      	beq.n	8002e14 <HAL_GPIO_WritePin+0x40>
 8002e0a:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <HAL_GPIO_WritePin+0x5c>)
 8002e10:	f7fe ff5b 	bl	8001cca <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	0800c2b0 	.word	0x0800c2b0

08002e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_GPIO_TogglePin+0x1c>
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_GPIO_TogglePin+0x26>
 8002e50:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002e54:	480a      	ldr	r0, [pc, #40]	; (8002e80 <HAL_GPIO_TogglePin+0x4c>)
 8002e56:	f7fe ff38 	bl	8001cca <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	041a      	lsls	r2, r3, #16
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	400b      	ands	r3, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	0800c2b0 	.word	0x0800c2b0

08002e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f806 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e104      	b.n	80030e8 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a83      	ldr	r2, [pc, #524]	; (80030f0 <HAL_I2C_Init+0x224>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_I2C_Init+0x3a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a81      	ldr	r2, [pc, #516]	; (80030f4 <HAL_I2C_Init+0x228>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_I2C_Init+0x3a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a80      	ldr	r2, [pc, #512]	; (80030f8 <HAL_I2C_Init+0x22c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_I2C_Init+0x3a>
 8002efc:	f240 2113 	movw	r1, #531	; 0x213
 8002f00:	487e      	ldr	r0, [pc, #504]	; (80030fc <HAL_I2C_Init+0x230>)
 8002f02:	f7fe fee2 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d304      	bcc.n	8002f1a <HAL_I2C_Init+0x4e>
 8002f10:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002f14:	4879      	ldr	r0, [pc, #484]	; (80030fc <HAL_I2C_Init+0x230>)
 8002f16:	f7fe fed8 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d008      	beq.n	8002f34 <HAL_I2C_Init+0x68>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d004      	beq.n	8002f34 <HAL_I2C_Init+0x68>
 8002f2a:	f240 2115 	movw	r1, #533	; 0x215
 8002f2e:	4873      	ldr	r0, [pc, #460]	; (80030fc <HAL_I2C_Init+0x230>)
 8002f30:	f7fe fecb 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_I2C_Init+0x84>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	d004      	beq.n	8002f50 <HAL_I2C_Init+0x84>
 8002f46:	f240 2116 	movw	r1, #534	; 0x216
 8002f4a:	486c      	ldr	r0, [pc, #432]	; (80030fc <HAL_I2C_Init+0x230>)
 8002f4c:	f7fe febd 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d904      	bls.n	8002f62 <HAL_I2C_Init+0x96>
 8002f58:	f240 2117 	movw	r1, #535	; 0x217
 8002f5c:	4867      	ldr	r0, [pc, #412]	; (80030fc <HAL_I2C_Init+0x230>)
 8002f5e:	f7fe feb4 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d01c      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d018      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d014      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d010      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d00c      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d008      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	d004      	beq.n	8002fac <HAL_I2C_Init+0xe0>
 8002fa2:	f44f 7106 	mov.w	r1, #536	; 0x218
 8002fa6:	4855      	ldr	r0, [pc, #340]	; (80030fc <HAL_I2C_Init+0x230>)
 8002fa8:	f7fe fe8f 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_I2C_Init+0xfc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_I2C_Init+0xfc>
 8002fbe:	f240 2119 	movw	r1, #537	; 0x219
 8002fc2:	484e      	ldr	r0, [pc, #312]	; (80030fc <HAL_I2C_Init+0x230>)
 8002fc4:	f7fe fe81 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_I2C_Init+0x118>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd8:	d004      	beq.n	8002fe4 <HAL_I2C_Init+0x118>
 8002fda:	f240 211a 	movw	r1, #538	; 0x21a
 8002fde:	4847      	ldr	r0, [pc, #284]	; (80030fc <HAL_I2C_Init+0x230>)
 8002fe0:	f7fe fe73 	bl	8001cca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd ffe3 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2224      	movs	r2, #36	; 0x24
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003022:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003032:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	e006      	b.n	800305a <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003058:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d104      	bne.n	800306c <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800306a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800307a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69d9      	ldr	r1, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40005400 	.word	0x40005400
 80030f4:	40005800 	.word	0x40005800
 80030f8:	40007800 	.word	0x40007800
 80030fc:	0800c2ec 	.word	0x0800c2ec

08003100 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <HAL_I2C_Mem_Read+0x30>
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d004      	beq.n	8003130 <HAL_I2C_Mem_Read+0x30>
 8003126:	f640 11ca 	movw	r1, #2506	; 0x9ca
 800312a:	4886      	ldr	r0, [pc, #536]	; (8003344 <HAL_I2C_Mem_Read+0x244>)
 800312c:	f7fe fdcd 	bl	8001cca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b20      	cmp	r3, #32
 800313a:	f040 80fd 	bne.w	8003338 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_I2C_Mem_Read+0x4a>
 8003144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0f1      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_I2C_Mem_Read+0x64>
 8003160:	2302      	movs	r3, #2
 8003162:	e0ea      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800316c:	f7ff f9ac 	bl	80024c8 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2319      	movs	r3, #25
 8003178:	2201      	movs	r2, #1
 800317a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f001 fb27 	bl	80047d2 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0d5      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b6:	88f8      	ldrh	r0, [r7, #6]
 80031b8:	893a      	ldrh	r2, [r7, #8]
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4603      	mov	r3, r0
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fe2c 	bl	8003e24 <I2C_RequestMemoryRead>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0ad      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2bff      	cmp	r3, #255	; 0xff
 80031e6:	d90e      	bls.n	8003206 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_I2C_Mem_Read+0x248>)
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 fc1a 	bl	8004a38 <I2C_TransferConfig>
 8003204:	e00f      	b.n	8003226 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	b2da      	uxtb	r2, r3
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_I2C_Mem_Read+0x248>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f001 fc09 	bl	8004a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	2200      	movs	r2, #0
 800322e:	2104      	movs	r1, #4
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f001 face 	bl	80047d2 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e07c      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d034      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x1e6>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d130      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	2200      	movs	r2, #0
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f001 fa9f 	bl	80047d2 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e04d      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2bff      	cmp	r3, #255	; 0xff
 80032a6:	d90e      	bls.n	80032c6 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	22ff      	movs	r2, #255	; 0xff
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f001 fbba 	bl	8004a38 <I2C_TransferConfig>
 80032c4:	e00f      	b.n	80032e6 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	2300      	movs	r3, #0
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f001 fba9 	bl	8004a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d19a      	bne.n	8003226 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f001 faec 	bl	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01a      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2220      	movs	r2, #32
 800330a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_I2C_Mem_Read+0x24c>)
 8003318:	400b      	ands	r3, r1
 800331a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0800c2ec 	.word	0x0800c2ec
 8003348:	80002400 	.word	0x80002400
 800334c:	fe00e800 	.word	0xfe00e800

08003350 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <HAL_I2C_Mem_Write_IT+0x30>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d004      	beq.n	8003380 <HAL_I2C_Mem_Write_IT+0x30>
 8003376:	f640 2154 	movw	r1, #2644	; 0xa54
 800337a:	4842      	ldr	r0, [pc, #264]	; (8003484 <HAL_I2C_Mem_Write_IT+0x134>)
 800337c:	f7fe fca5 	bl	8001cca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	d176      	bne.n	800347a <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_I2C_Mem_Write_IT+0x48>
 8003392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e06b      	b.n	800347c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d101      	bne.n	80033b8 <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	e061      	b.n	800347c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Mem_Write_IT+0x76>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e05a      	b.n	800347c <HAL_I2C_Mem_Write_IT+0x12c>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ce:	f7ff f87b 	bl	80024c8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2221      	movs	r2, #33	; 0x21
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a23      	ldr	r2, [pc, #140]	; (8003488 <HAL_I2C_Mem_Write_IT+0x138>)
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_I2C_Mem_Write_IT+0x13c>)
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d906      	bls.n	800341a <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e007      	b.n	800342a <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003428:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800342a:	88f8      	ldrh	r0, [r7, #6]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	8979      	ldrh	r1, [r7, #10]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2319      	movs	r3, #25
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4603      	mov	r3, r0
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fc9e 	bl	8003d7c <I2C_RequestMemoryWrite>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e014      	b.n	800347c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	b2da      	uxtb	r2, r3
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f001 fae9 	bl	8004a38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800346e:	2101      	movs	r1, #1
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f001 fb53 	bl	8004b1c <I2C_Enable_IRQ>

    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	0800c2ec 	.word	0x0800c2ec
 8003488:	ffff0000 	.word	0xffff0000
 800348c:	08003581 	.word	0x08003581

08003490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
  }
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
 8003520:	4613      	mov	r3, r2
 8003522:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <I2C_Master_ISR_IT+0x1e>
 800359a:	2302      	movs	r3, #2
 800359c:	e114      	b.n	80037c8 <I2C_Master_ISR_IT+0x248>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d013      	beq.n	80035da <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 f8bb 	bl	800474e <I2C_Flush_TXDR>
 80035d8:	e0e1      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d023      	beq.n	800362e <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800362c:	e0b7      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01e      	beq.n	8003678 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003642:	2b00      	cmp	r3, #0
 8003644:	d018      	beq.n	8003678 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003676:	e092      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	09db      	lsrs	r3, r3, #7
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05d      	beq.n	8003740 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800368c:	2b00      	cmp	r3, #0
 800368e:	d057      	beq.n	8003740 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d040      	beq.n	800371c <I2C_Master_ISR_IT+0x19c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d13c      	bne.n	800371c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ae:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2bff      	cmp	r3, #255	; 0xff
 80036b8:	d90e      	bls.n	80036d8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8a79      	ldrh	r1, [r7, #18]
 80036c8:	2300      	movs	r3, #0
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f001 f9b1 	bl	8004a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d6:	e032      	b.n	800373e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ea:	d00b      	beq.n	8003704 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	8a79      	ldrh	r1, [r7, #18]
 80036f8:	2000      	movs	r0, #0
 80036fa:	9000      	str	r0, [sp, #0]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f001 f99b 	bl	8004a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003702:	e01c      	b.n	800373e <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8a79      	ldrh	r1, [r7, #18]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f001 f98f 	bl	8004a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371a:	e010      	b.n	800373e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800372a:	d003      	beq.n	8003734 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fc51 	bl	8003fd4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003732:	e034      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 ff12 	bl	8004560 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800373c:	e02f      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
 800373e:	e02e      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d028      	beq.n	800379e <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d119      	bne.n	8003796 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003770:	d015      	beq.n	800379e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800377a:	d108      	bne.n	800378e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e007      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fc20 	bl	8003fd4 <I2C_ITMasterSeqCplt>
 8003794:	e003      	b.n	800379e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fee1 	bl	8004560 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80037b6:	6979      	ldr	r1, [r7, #20]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fca7 	bl	800410c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <I2C_Slave_ISR_IT+0x24>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0ec      	b.n	80039ce <I2C_Slave_ISR_IT+0x1fe>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fd42 	bl	80042a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04d      	beq.n	80038c4 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003830:	2b00      	cmp	r3, #0
 8003832:	d047      	beq.n	80038c4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d128      	bne.n	8003890 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b28      	cmp	r3, #40	; 0x28
 8003848:	d108      	bne.n	800385c <I2C_Slave_ISR_IT+0x8c>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003850:	d104      	bne.n	800385c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003852:	6939      	ldr	r1, [r7, #16]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fe2d 	bl	80044b4 <I2C_ITListenCplt>
 800385a:	e032      	b.n	80038c2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b29      	cmp	r3, #41	; 0x29
 8003866:	d10e      	bne.n	8003886 <I2C_Slave_ISR_IT+0xb6>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386e:	d00a      	beq.n	8003886 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2210      	movs	r2, #16
 8003876:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 ff68 	bl	800474e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fbe5 	bl	800404e <I2C_ITSlaveSeqCplt>
 8003884:	e01d      	b.n	80038c2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800388e:	e096      	b.n	80039be <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2210      	movs	r2, #16
 8003896:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f043 0204 	orr.w	r2, r3, #4
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <I2C_Slave_ISR_IT+0xe4>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	f040 8085 	bne.w	80039be <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	4619      	mov	r1, r3
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fe50 	bl	8004560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038c0:	e07d      	b.n	80039be <I2C_Slave_ISR_IT+0x1ee>
 80038c2:	e07c      	b.n	80039be <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d030      	beq.n	8003932 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02a      	beq.n	8003932 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14f      	bne.n	80039c2 <I2C_Slave_ISR_IT+0x1f2>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003928:	d04b      	beq.n	80039c2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fb8f 	bl	800404e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003930:	e047      	b.n	80039c2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800394a:	6939      	ldr	r1, [r7, #16]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fabd 	bl	8003ecc <I2C_ITAddrCplt>
 8003952:	e037      	b.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d031      	beq.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02b      	beq.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80039a6:	e00d      	b.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ae:	d002      	beq.n	80039b6 <I2C_Slave_ISR_IT+0x1e6>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fb49 	bl	800404e <I2C_ITSlaveSeqCplt>
 80039bc:	e002      	b.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80039c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b088      	sub	sp, #32
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <I2C_Master_ISR_DMA+0x1a>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e0e1      	b.n	8003bb4 <I2C_Master_ISR_DMA+0x1de>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a24:	2120      	movs	r1, #32
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f001 f878 	bl	8004b1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fe8e 	bl	800474e <I2C_Flush_TXDR>
 8003a32:	e0ba      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	09db      	lsrs	r3, r3, #7
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d072      	beq.n	8003b26 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d06c      	beq.n	8003b26 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04e      	beq.n	8003b04 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a72:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2bff      	cmp	r3, #255	; 0xff
 8003a7c:	d906      	bls.n	8003a8c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e010      	b.n	8003aae <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a9e:	d003      	beq.n	8003aa8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e002      	b.n	8003aae <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aac:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8a79      	ldrh	r1, [r7, #18]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 ffbb 	bl	8004a38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b22      	cmp	r3, #34	; 0x22
 8003ade:	d108      	bne.n	8003af2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003af0:	e05b      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b02:	e052      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b12:	d003      	beq.n	8003b1c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa5d 	bl	8003fd4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b1a:	e046      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fd1e 	bl	8004560 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b24:	e041      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d029      	beq.n	8003b86 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d023      	beq.n	8003b86 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d119      	bne.n	8003b7c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b56:	d027      	beq.n	8003ba8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b60:	d108      	bne.n	8003b74 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b70:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003b72:	e019      	b.n	8003ba8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa2d 	bl	8003fd4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003b7a:	e015      	b.n	8003ba8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fcee 	bl	8004560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b84:	e010      	b.n	8003ba8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fab3 	bl	800410c <I2C_ITMasterCplt>
 8003ba6:	e000      	b.n	8003baa <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003ba8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <I2C_Slave_ISR_DMA+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0c9      	b.n	8003d74 <I2C_Slave_ISR_DMA+0x1b8>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb4c 	bl	80042a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 809a 	beq.w	8003d4a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8093 	beq.w	8003d4a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0b9b      	lsrs	r3, r3, #14
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0bdb      	lsrs	r3, r3, #15
 8003c34:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d07f      	beq.n	8003d3c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0bdb      	lsrs	r3, r3, #15
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0b9b      	lsrs	r3, r3, #14
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003c80:	2301      	movs	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d128      	bne.n	8003cdc <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b28      	cmp	r3, #40	; 0x28
 8003c94:	d108      	bne.n	8003ca8 <I2C_Slave_ISR_DMA+0xec>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9c:	d104      	bne.n	8003ca8 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fc07 	bl	80044b4 <I2C_ITListenCplt>
 8003ca6:	e048      	b.n	8003d3a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b29      	cmp	r3, #41	; 0x29
 8003cb2:	d10e      	bne.n	8003cd2 <I2C_Slave_ISR_DMA+0x116>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cba:	d00a      	beq.n	8003cd2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fd42 	bl	800474e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f9bf 	bl	800404e <I2C_ITSlaveSeqCplt>
 8003cd0:	e033      	b.n	8003d3a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003cda:	e034      	b.n	8003d46 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <I2C_Slave_ISR_DMA+0x14a>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d04:	d11f      	bne.n	8003d46 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b21      	cmp	r3, #33	; 0x21
 8003d0a:	d002      	beq.n	8003d12 <I2C_Slave_ISR_DMA+0x156>
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b29      	cmp	r3, #41	; 0x29
 8003d10:	d103      	bne.n	8003d1a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
 8003d18:	e008      	b.n	8003d2c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b22      	cmp	r3, #34	; 0x22
 8003d1e:	d002      	beq.n	8003d26 <I2C_Slave_ISR_DMA+0x16a>
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b2a      	cmp	r3, #42	; 0x2a
 8003d24:	d102      	bne.n	8003d2c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2222      	movs	r2, #34	; 0x22
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fc14 	bl	8004560 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d38:	e005      	b.n	8003d46 <I2C_Slave_ISR_DMA+0x18a>
 8003d3a:	e004      	b.n	8003d46 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2210      	movs	r2, #16
 8003d42:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d44:	e011      	b.n	8003d6a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d46:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d48:	e00f      	b.n	8003d6a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f8b1 	bl	8003ecc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <I2C_RequestMemoryWrite+0xa4>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fe47 	bl	8004a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fd4f 	bl	8004852 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e02c      	b.n	8003e18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8003dce:	e015      	b.n	8003dfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fd35 	bl	8004852 <I2C_WaitOnTXISFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e012      	b.n	8003e18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2200      	movs	r2, #0
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fce3 	bl	80047d2 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	80002000 	.word	0x80002000

08003e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	817b      	strh	r3, [r7, #10]
 8003e36:	460b      	mov	r3, r1
 8003e38:	813b      	strh	r3, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <I2C_RequestMemoryRead+0xa4>)
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fdf4 	bl	8004a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	69b9      	ldr	r1, [r7, #24]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fcfc 	bl	8004852 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e02c      	b.n	8003ebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6a:	893b      	ldrh	r3, [r7, #8]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
 8003e74:	e015      	b.n	8003ea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e76:	893b      	ldrh	r3, [r7, #8]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fce2 	bl	8004852 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e012      	b.n	8003ebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fc90 	bl	80047d2 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	80002000 	.word	0x80002000

08003ecc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee2:	2b28      	cmp	r3, #40	; 0x28
 8003ee4:	d16a      	bne.n	8003fbc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f04:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f12:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f20:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d138      	bne.n	8003f9c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003f2a:	897b      	ldrh	r3, [r7, #10]
 8003f2c:	09db      	lsrs	r3, r3, #7
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	89bb      	ldrh	r3, [r7, #12]
 8003f32:	4053      	eors	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f003 0306 	and.w	r3, r3, #6
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11c      	bne.n	8003f78 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d13b      	bne.n	8003fcc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f6a:	89ba      	ldrh	r2, [r7, #12]
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff facf 	bl	8003514 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f76:	e029      	b.n	8003fcc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fe2f 	bl	8004be4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f8e:	89ba      	ldrh	r2, [r7, #12]
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fabd 	bl	8003514 <HAL_I2C_AddrCallback>
}
 8003f9a:	e017      	b.n	8003fcc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fe1f 	bl	8004be4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fae:	89ba      	ldrh	r2, [r7, #12]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff faad 	bl	8003514 <HAL_I2C_AddrCallback>
}
 8003fba:	e007      	b.n	8003fcc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b21      	cmp	r3, #33	; 0x21
 8003fee:	d115      	bne.n	800401c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2211      	movs	r2, #17
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004004:	2101      	movs	r1, #1
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fdec 	bl	8004be4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fa55 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800401a:	e014      	b.n	8004046 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2212      	movs	r2, #18
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004030:	2102      	movs	r1, #2
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fdd6 	bl	8004be4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fa49 	bl	80034d8 <HAL_I2C_MasterRxCpltCallback>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0b9b      	lsrs	r3, r3, #14
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00d      	b.n	80040a0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0bdb      	lsrs	r3, r3, #15
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800409e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b29      	cmp	r3, #41	; 0x29
 80040aa:	d112      	bne.n	80040d2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2228      	movs	r2, #40	; 0x28
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2221      	movs	r2, #33	; 0x21
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040ba:	2101      	movs	r1, #1
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fd91 	bl	8004be4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fa0e 	bl	80034ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040d0:	e017      	b.n	8004102 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b2a      	cmp	r3, #42	; 0x2a
 80040dc:	d111      	bne.n	8004102 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2228      	movs	r2, #40	; 0x28
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2222      	movs	r2, #34	; 0x22
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040ec:	2102      	movs	r1, #2
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fd78 	bl	8004be4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff f9ff 	bl	8003500 <HAL_I2C_SlaveRxCpltCallback>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2220      	movs	r2, #32
 8004120:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b21      	cmp	r3, #33	; 0x21
 800412c:	d107      	bne.n	800413e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800412e:	2101      	movs	r1, #1
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fd57 	bl	8004be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2211      	movs	r2, #17
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
 800413c:	e00c      	b.n	8004158 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b22      	cmp	r3, #34	; 0x22
 8004148:	d106      	bne.n	8004158 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800414a:	2102      	movs	r1, #2
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fd49 	bl	8004be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2212      	movs	r2, #18
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <I2C_ITMasterCplt+0x18c>)
 8004164:	400b      	ands	r3, r1
 8004166:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <I2C_ITMasterCplt+0x190>)
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2210      	movs	r2, #16
 8004186:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d10b      	bne.n	80041b8 <I2C_ITMasterCplt+0xac>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fac8 	bl	800474e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d002      	beq.n	80041d6 <I2C_ITMasterCplt+0xca>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	4619      	mov	r1, r3
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9bf 	bl	8004560 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041e2:	e054      	b.n	800428e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	d124      	bne.n	800423a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d10b      	bne.n	8004222 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fc fab2 	bl	8000784 <HAL_I2C_MemTxCpltCallback>
}
 8004220:	e035      	b.n	800428e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff f946 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
}
 8004238:	e029      	b.n	800428e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b22      	cmp	r3, #34	; 0x22
 8004244:	d123      	bne.n	800428e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d10b      	bne.n	8004278 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff f967 	bl	8003544 <HAL_I2C_MemRxCpltCallback>
}
 8004276:	e00a      	b.n	800428e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff f925 	bl	80034d8 <HAL_I2C_MasterRxCpltCallback>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	fe00e800 	.word	0xfe00e800
 800429c:	ffff0000 	.word	0xffff0000

080042a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2220      	movs	r2, #32
 80042c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b21      	cmp	r3, #33	; 0x21
 80042ca:	d002      	beq.n	80042d2 <I2C_ITSlaveCplt+0x32>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b29      	cmp	r3, #41	; 0x29
 80042d0:	d108      	bne.n	80042e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fc84 	bl	8004be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2221      	movs	r2, #33	; 0x21
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
 80042e2:	e00d      	b.n	8004300 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b22      	cmp	r3, #34	; 0x22
 80042e8:	d002      	beq.n	80042f0 <I2C_ITSlaveCplt+0x50>
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b2a      	cmp	r3, #42	; 0x2a
 80042ee:	d107      	bne.n	8004300 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fc75 	bl	8004be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2222      	movs	r2, #34	; 0x22
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b64      	ldr	r3, [pc, #400]	; (80044ac <I2C_ITSlaveCplt+0x20c>)
 800431c:	400b      	ands	r3, r1
 800431e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fa14 	bl	800474e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	0b9b      	lsrs	r3, r3, #14
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004340:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004358:	e018      	b.n	800438c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	0bdb      	lsrs	r3, r3, #15
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004374:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f8a7 	bl	8004560 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b28      	cmp	r3, #40	; 0x28
 800441c:	d141      	bne.n	80044a2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f847 	bl	80044b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004426:	e03c      	b.n	80044a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004430:	d014      	beq.n	800445c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff fe0b 	bl	800404e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <I2C_ITSlaveCplt+0x210>)
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff f86b 	bl	8003530 <HAL_I2C_ListenCpltCallback>
}
 800445a:	e022      	b.n	80044a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b22      	cmp	r3, #34	; 0x22
 8004466:	d10e      	bne.n	8004486 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff f83e 	bl	8003500 <HAL_I2C_SlaveRxCpltCallback>
}
 8004484:	e00d      	b.n	80044a2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff f825 	bl	80034ec <HAL_I2C_SlaveTxCpltCallback>
}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	fe00e800 	.word	0xfe00e800
 80044b0:	ffff0000 	.word	0xffff0000

080044b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <I2C_ITListenCplt+0xa8>)
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d022      	beq.n	8004532 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004532:	f248 0103 	movw	r1, #32771	; 0x8003
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fb54 	bl	8004be4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fe ffef 	bl	8003530 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	ffff0000 	.word	0xffff0000

08004560 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a5d      	ldr	r2, [pc, #372]	; (80046f4 <I2C_ITError+0x194>)
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b28      	cmp	r3, #40	; 0x28
 8004596:	d005      	beq.n	80045a4 <I2C_ITError+0x44>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b29      	cmp	r3, #41	; 0x29
 800459c:	d002      	beq.n	80045a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b2a      	cmp	r3, #42	; 0x2a
 80045a2:	d10b      	bne.n	80045bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045a4:	2103      	movs	r1, #3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fb1c 	bl	8004be4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2228      	movs	r2, #40	; 0x28
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <I2C_ITError+0x198>)
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ba:	e011      	b.n	80045e0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fb0f 	bl	8004be4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b60      	cmp	r3, #96	; 0x60
 80045d0:	d003      	beq.n	80045da <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d039      	beq.n	8004662 <I2C_ITError+0x102>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b11      	cmp	r3, #17
 80045f2:	d002      	beq.n	80045fa <I2C_ITError+0x9a>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d133      	bne.n	8004662 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004608:	d107      	bne.n	800461a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004618:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe f939 	bl	8002896 <HAL_DMA_GetState>
 8004624:	4603      	mov	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d017      	beq.n	800465a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4a33      	ldr	r2, [pc, #204]	; (80046fc <I2C_ITError+0x19c>)
 8004630:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe f8eb 	bl	800281a <HAL_DMA_Abort_IT>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04d      	beq.n	80046e6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004654:	4610      	mov	r0, r2
 8004656:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004658:	e045      	b.n	80046e6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f850 	bl	8004700 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004660:	e041      	b.n	80046e6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d039      	beq.n	80046de <I2C_ITError+0x17e>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b12      	cmp	r3, #18
 800466e:	d002      	beq.n	8004676 <I2C_ITError+0x116>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	d133      	bne.n	80046de <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d107      	bne.n	8004696 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004694:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f8fb 	bl	8002896 <HAL_DMA_GetState>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d017      	beq.n	80046d6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <I2C_ITError+0x19c>)
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f8ad 	bl	800281a <HAL_DMA_Abort_IT>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d011      	beq.n	80046ea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d0:	4610      	mov	r0, r2
 80046d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d4:	e009      	b.n	80046ea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f812 	bl	8004700 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046dc:	e005      	b.n	80046ea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f80e 	bl	8004700 <I2C_TreatErrorCallback>
  }
}
 80046e4:	e002      	b.n	80046ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ea:	bf00      	nop
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	ffff0000 	.word	0xffff0000
 80046f8:	080037d1 	.word	0x080037d1
 80046fc:	08004797 	.word	0x08004797

08004700 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d10e      	bne.n	8004732 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fe ff1e 	bl	800356c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004730:	e009      	b.n	8004746 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fe ff09 	bl	8003558 <HAL_I2C_ErrorCallback>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d103      	bne.n	800476c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2200      	movs	r2, #0
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d007      	beq.n	800478a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	619a      	str	r2, [r3, #24]
  }
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	2200      	movs	r2, #0
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	2200      	movs	r2, #0
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff ff9b 	bl	8004700 <I2C_TreatErrorCallback>
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e2:	e022      	b.n	800482a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d01e      	beq.n	800482a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ec:	f7fd fe6c 	bl	80024c8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e00f      	b.n	800484a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0cd      	beq.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800485e:	e02c      	b.n	80048ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f871 	bl	800494c <I2C_IsAcknowledgeFailed>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e02a      	b.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d01e      	beq.n	80048ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fd fe24 	bl	80024c8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d113      	bne.n	80048ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e007      	b.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d1cb      	bne.n	8004860 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048de:	e028      	b.n	8004932 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f831 	bl	800494c <I2C_IsAcknowledgeFailed>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e026      	b.n	8004942 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f4:	f7fd fde8 	bl	80024c8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d113      	bne.n	8004932 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e007      	b.n	8004942 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b20      	cmp	r3, #32
 800493e:	d1cf      	bne.n	80048e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d161      	bne.n	8004a2a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004974:	d02b      	beq.n	80049ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004984:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004986:	e022      	b.n	80049ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d01e      	beq.n	80049ce <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fd fd9a 	bl	80024c8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_IsAcknowledgeFailed+0x5a>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d113      	bne.n	80049ce <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02e      	b.n	8004a2c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d1d5      	bne.n	8004988 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff feae 	bl	800474e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <I2C_IsAcknowledgeFailed+0xe8>)
 80049fe:	400b      	ands	r3, r1
 8004a00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	fe00e800 	.word	0xfe00e800

08004a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	4613      	mov	r3, r2
 8004a48:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <I2C_TransferConfig+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <I2C_TransferConfig+0x3a>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <I2C_TransferConfig+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <I2C_TransferConfig+0x3a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <I2C_TransferConfig+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <I2C_TransferConfig+0x3a>
 8004a68:	f641 11cb 	movw	r1, #6603	; 0x19cb
 8004a6c:	4826      	ldr	r0, [pc, #152]	; (8004b08 <I2C_TransferConfig+0xd0>)
 8004a6e:	f7fd f92c 	bl	8001cca <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a78:	d00b      	beq.n	8004a92 <I2C_TransferConfig+0x5a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a80:	d007      	beq.n	8004a92 <I2C_TransferConfig+0x5a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <I2C_TransferConfig+0x5a>
 8004a88:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8004a8c:	481e      	ldr	r0, [pc, #120]	; (8004b08 <I2C_TransferConfig+0xd0>)
 8004a8e:	f7fd f91c 	bl	8001cca <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <I2C_TransferConfig+0xd4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <I2C_TransferConfig+0x82>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <I2C_TransferConfig+0xd8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <I2C_TransferConfig+0x82>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <I2C_TransferConfig+0xdc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <I2C_TransferConfig+0x82>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <I2C_TransferConfig+0x82>
 8004ab0:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8004ab4:	4814      	ldr	r0, [pc, #80]	; (8004b08 <I2C_TransferConfig+0xd0>)
 8004ab6:	f7fd f908 	bl	8001cca <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	0d5b      	lsrs	r3, r3, #21
 8004ac4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <I2C_TransferConfig+0xe0>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	43db      	mvns	r3, r3
 8004ace:	ea02 0103 	and.w	r1, r2, r3
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ad8:	7a7b      	ldrb	r3, [r7, #9]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40005400 	.word	0x40005400
 8004b00:	40005800 	.word	0x40005800
 8004b04:	40007800 	.word	0x40007800
 8004b08:	0800c2ec 	.word	0x0800c2ec
 8004b0c:	80004000 	.word	0x80004000
 8004b10:	80002400 	.word	0x80002400
 8004b14:	80002000 	.word	0x80002000
 8004b18:	03ff63ff 	.word	0x03ff63ff

08004b1c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <I2C_Enable_IRQ+0xc0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b3a:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <I2C_Enable_IRQ+0xc4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d11d      	bne.n	8004b7c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	da03      	bge.n	8004b50 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d103      	bne.n	8004b5e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d103      	bne.n	8004b6c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d125      	bne.n	8004bbe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b78:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b7a:	e020      	b.n	8004bbe <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	da03      	bge.n	8004b8c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004b9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004bae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d103      	bne.n	8004bbe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f043 0320 	orr.w	r3, r3, #32
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	080039d7 	.word	0x080039d7
 8004be0:	08003bbd 	.word	0x08003bbd

08004be4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c12:	2b28      	cmp	r3, #40	; 0x28
 8004c14:	d003      	beq.n	8004c1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c3c:	2b28      	cmp	r3, #40	; 0x28
 8004c3e:	d003      	beq.n	8004c48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da03      	bge.n	8004c58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d103      	bne.n	8004c66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d103      	bne.n	8004c74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f043 0320 	orr.w	r3, r3, #32
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c74:	887b      	ldrh	r3, [r7, #2]
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d103      	bne.n	8004c82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	400a      	ands	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2e      	ldr	r2, [pc, #184]	; (8004d74 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d008      	beq.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cc8:	2164      	movs	r1, #100	; 0x64
 8004cca:	482c      	ldr	r0, [pc, #176]	; (8004d7c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004ccc:	f7fc fffd 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cdc:	d003      	beq.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004cde:	2165      	movs	r1, #101	; 0x65
 8004ce0:	4826      	ldr	r0, [pc, #152]	; (8004d7c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004ce2:	f7fc fff2 	bl	8001cca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d138      	bne.n	8004d64 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e032      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40005400 	.word	0x40005400
 8004d74:	40005800 	.word	0x40005800
 8004d78:	40007800 	.word	0x40007800
 8004d7c:	0800c324 	.word	0x0800c324

08004d80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2c      	ldr	r2, [pc, #176]	; (8004e4c <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d008      	beq.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004da8:	2192      	movs	r1, #146	; 0x92
 8004daa:	482a      	ldr	r0, [pc, #168]	; (8004e54 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dac:	f7fc ff8d 	bl	8001cca <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d903      	bls.n	8004dbe <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8004db6:	2193      	movs	r1, #147	; 0x93
 8004db8:	4826      	ldr	r0, [pc, #152]	; (8004e54 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dba:	f7fc ff86 	bl	8001cca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d139      	bne.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e033      	b.n	8004e40 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2224      	movs	r2, #36	; 0x24
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40005400 	.word	0x40005400
 8004e4c:	40005800 	.word	0x40005800
 8004e50:	40007800 	.word	0x40007800
 8004e54:	0800c324 	.word	0x0800c324

08004e58 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40007000 	.word	0x40007000

08004e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	1d3b      	adds	r3, r7, #4
 8004e82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f001 b85e 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x66>
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d119      	bne.n	8004ede <HAL_RCC_OscConfig+0x66>
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d112      	bne.n	8004ede <HAL_RCC_OscConfig+0x66>
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_RCC_OscConfig+0x66>
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_RCC_OscConfig+0x66>
 8004ed4:	f240 114b 	movw	r1, #331	; 0x14b
 8004ed8:	48be      	ldr	r0, [pc, #760]	; (80051d4 <HAL_RCC_OscConfig+0x35c>)
 8004eda:	f7fc fef6 	bl	8001cca <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8178 	beq.w	80051de <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d010      	beq.n	8004f1a <HAL_RCC_OscConfig+0xa2>
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCC_OscConfig+0xa2>
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f0e:	d004      	beq.n	8004f1a <HAL_RCC_OscConfig+0xa2>
 8004f10:	f240 1151 	movw	r1, #337	; 0x151
 8004f14:	48af      	ldr	r0, [pc, #700]	; (80051d4 <HAL_RCC_OscConfig+0x35c>)
 8004f16:	f7fc fed8 	bl	8001cca <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f1a:	4baf      	ldr	r3, [pc, #700]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d00c      	beq.n	8004f40 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f26:	4bac      	ldr	r3, [pc, #688]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d159      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x16e>
 8004f32:	4ba9      	ldr	r3, [pc, #676]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3e:	d152      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x16e>
 8004f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8004f54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCC_OscConfig+0xfa>
 8004f6c:	4b9a      	ldr	r3, [pc, #616]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x126>
 8004f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f9a:	4b8f      	ldr	r3, [pc, #572]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fa2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004fa6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004faa:	fa92 f2a2 	rbit	r2, r2
 8004fae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004fb2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fb6:	fab2 f282 	clz	r2, r2
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	f042 0220 	orr.w	r2, r2, #32
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f002 021f 	and.w	r2, r2, #31
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8104 	beq.w	80051dc <HAL_RCC_OscConfig+0x364>
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80fe 	bne.w	80051dc <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f000 bfb4 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x188>
 8004ff2:	4b79      	ldr	r3, [pc, #484]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a78      	ldr	r2, [pc, #480]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e030      	b.n	8005062 <HAL_RCC_OscConfig+0x1ea>
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x1ac>
 800500a:	4b73      	ldr	r3, [pc, #460]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a72      	ldr	r2, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b70      	ldr	r3, [pc, #448]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6f      	ldr	r2, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800501c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e01e      	b.n	8005062 <HAL_RCC_OscConfig+0x1ea>
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502e:	d10c      	bne.n	800504a <HAL_RCC_OscConfig+0x1d2>
 8005030:	4b69      	ldr	r3, [pc, #420]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b66      	ldr	r3, [pc, #408]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0x1ea>
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a62      	ldr	r2, [pc, #392]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b60      	ldr	r3, [pc, #384]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5f      	ldr	r2, [pc, #380]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d059      	beq.n	8005120 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fd fa2c 	bl	80024c8 <HAL_GetTick>
 8005070:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005074:	e00a      	b.n	800508c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005076:	f7fd fa27 	bl	80024c8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d902      	bls.n	800508c <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	f000 bf61 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 800508c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005090:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80050a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a4:	fab3 f383 	clz	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <HAL_RCC_OscConfig+0x246>
 80050b8:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	e015      	b.n	80050ea <HAL_RCC_OscConfig+0x272>
 80050be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80050d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050da:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050e6:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80050f2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80050f6:	fa92 f2a2 	rbit	r2, r2
 80050fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80050fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005102:	fab2 f282 	clz	r2, r2
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	f042 0220 	orr.w	r2, r2, #32
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	f002 021f 	and.w	r2, r2, #31
 8005112:	2101      	movs	r1, #1
 8005114:	fa01 f202 	lsl.w	r2, r1, r2
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0ab      	beq.n	8005076 <HAL_RCC_OscConfig+0x1fe>
 800511e:	e05e      	b.n	80051de <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fd f9d2 	bl	80024c8 <HAL_GetTick>
 8005124:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800512a:	f7fd f9cd 	bl	80024c8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d902      	bls.n	8005140 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	f000 bf07 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005144:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005154:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d102      	bne.n	8005172 <HAL_RCC_OscConfig+0x2fa>
 800516c:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	e015      	b.n	800519e <HAL_RCC_OscConfig+0x326>
 8005172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005176:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800518a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800518e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCC_OscConfig+0x360>)
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051a2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80051a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80051aa:	fa92 f2a2 	rbit	r2, r2
 80051ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80051b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051b6:	fab2 f282 	clz	r2, r2
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f042 0220 	orr.w	r2, r2, #32
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	f002 021f 	and.w	r2, r2, #31
 80051c6:	2101      	movs	r1, #1
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ab      	bne.n	800512a <HAL_RCC_OscConfig+0x2b2>
 80051d2:	e004      	b.n	80051de <HAL_RCC_OscConfig+0x366>
 80051d4:	0800c360 	.word	0x0800c360
 80051d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 818e 	beq.w	800550a <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_RCC_OscConfig+0x394>
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d004      	beq.n	800520c <HAL_RCC_OscConfig+0x394>
 8005202:	f240 1189 	movw	r1, #393	; 0x189
 8005206:	48a8      	ldr	r0, [pc, #672]	; (80054a8 <HAL_RCC_OscConfig+0x630>)
 8005208:	f7fc fd5f 	bl	8001cca <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b1f      	cmp	r3, #31
 8005214:	d904      	bls.n	8005220 <HAL_RCC_OscConfig+0x3a8>
 8005216:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800521a:	48a3      	ldr	r0, [pc, #652]	; (80054a8 <HAL_RCC_OscConfig+0x630>)
 800521c:	f7fc fd55 	bl	8001cca <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005220:	4ba2      	ldr	r3, [pc, #648]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800522c:	4b9f      	ldr	r3, [pc, #636]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d16d      	bne.n	8005314 <HAL_RCC_OscConfig+0x49c>
 8005238:	4b9c      	ldr	r3, [pc, #624]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005244:	d166      	bne.n	8005314 <HAL_RCC_OscConfig+0x49c>
 8005246:	2302      	movs	r3, #2
 8005248:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005258:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <HAL_RCC_OscConfig+0x3fe>
 8005270:	4b8e      	ldr	r3, [pc, #568]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	e013      	b.n	800529e <HAL_RCC_OscConfig+0x426>
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005288:	2302      	movs	r3, #2
 800528a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800528e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005292:	fa93 f3a3 	rbit	r3, r3
 8005296:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800529a:	4b84      	ldr	r3, [pc, #528]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2202      	movs	r2, #2
 80052a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80052a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80052a8:	fa92 f2a2 	rbit	r2, r2
 80052ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80052b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052b4:	fab2 f282 	clz	r2, r2
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f002 021f 	and.w	r2, r2, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_OscConfig+0x468>
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 be37 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	4b72      	ldr	r3, [pc, #456]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	21f8      	movs	r1, #248	; 0xf8
 80052f0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80052f8:	fa91 f1a1 	rbit	r1, r1
 80052fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005300:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005304:	fab1 f181 	clz	r1, r1
 8005308:	b2c9      	uxtb	r1, r1
 800530a:	408b      	lsls	r3, r1
 800530c:	4967      	ldr	r1, [pc, #412]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	e0fa      	b.n	800550a <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8085 	beq.w	800542a <HAL_RCC_OscConfig+0x5b2>
 8005320:	2301      	movs	r3, #1
 8005322:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005332:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	461a      	mov	r2, r3
 8005348:	2301      	movs	r3, #1
 800534a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fd f8bc 	bl	80024c8 <HAL_GetTick>
 8005350:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005354:	e00a      	b.n	800536c <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005356:	f7fd f8b7 	bl	80024c8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	f000 bdf1 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 800536c:	2302      	movs	r3, #2
 800536e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800537e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_RCC_OscConfig+0x524>
 8005396:	4b45      	ldr	r3, [pc, #276]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e013      	b.n	80053c4 <HAL_RCC_OscConfig+0x54c>
 800539c:	2302      	movs	r3, #2
 800539e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80053ae:	2302      	movs	r3, #2
 80053b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2202      	movs	r2, #2
 80053c6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80053ca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80053ce:	fa92 f2a2 	rbit	r2, r2
 80053d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80053d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053da:	fab2 f282 	clz	r2, r2
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	f002 021f 	and.w	r2, r2, #31
 80053ea:	2101      	movs	r1, #1
 80053ec:	fa01 f202 	lsl.w	r2, r1, r2
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0af      	beq.n	8005356 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	21f8      	movs	r1, #248	; 0xf8
 8005406:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800540e:	fa91 f1a1 	rbit	r1, r1
 8005412:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005416:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800541a:	fab1 f181 	clz	r1, r1
 800541e:	b2c9      	uxtb	r1, r1
 8005420:	408b      	lsls	r3, r1
 8005422:	4922      	ldr	r1, [pc, #136]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e06f      	b.n	800550a <HAL_RCC_OscConfig+0x692>
 800542a:	2301      	movs	r3, #1
 800542c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800543c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800544a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fd f837 	bl	80024c8 <HAL_GetTick>
 800545a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005460:	f7fd f832 	bl	80024c8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d902      	bls.n	8005476 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f000 bd6c 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005476:	2302      	movs	r3, #2
 8005478:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005488:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_OscConfig+0x638>
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <HAL_RCC_OscConfig+0x634>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	e018      	b.n	80054d8 <HAL_RCC_OscConfig+0x660>
 80054a6:	bf00      	nop
 80054a8:	0800c360 	.word	0x0800c360
 80054ac:	40021000 	.word	0x40021000
 80054b0:	2302      	movs	r3, #2
 80054b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054c2:	2302      	movs	r3, #2
 80054c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054d4:	4bc0      	ldr	r3, [pc, #768]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2202      	movs	r2, #2
 80054da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80054de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80054e2:	fa92 f2a2 	rbit	r2, r2
 80054e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80054ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054ee:	fab2 f282 	clz	r2, r2
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	f042 0220 	orr.w	r2, r2, #32
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	f002 021f 	and.w	r2, r2, #31
 80054fe:	2101      	movs	r1, #1
 8005500:	fa01 f202 	lsl.w	r2, r1, r2
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1aa      	bne.n	8005460 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80e7 	beq.w	80056e8 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <HAL_RCC_OscConfig+0x6c0>
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d004      	beq.n	8005538 <HAL_RCC_OscConfig+0x6c0>
 800552e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8005532:	48aa      	ldr	r0, [pc, #680]	; (80057dc <HAL_RCC_OscConfig+0x964>)
 8005534:	f7fc fbc9 	bl	8001cca <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d066      	beq.n	8005610 <HAL_RCC_OscConfig+0x798>
 8005542:	2301      	movs	r3, #1
 8005544:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	fa93 f3a3 	rbit	r3, r3
 8005550:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	4b9f      	ldr	r3, [pc, #636]	; (80057e0 <HAL_RCC_OscConfig+0x968>)
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	461a      	mov	r2, r3
 8005568:	2301      	movs	r3, #1
 800556a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556c:	f7fc ffac 	bl	80024c8 <HAL_GetTick>
 8005570:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005574:	e00a      	b.n	800558c <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005576:	f7fc ffa7 	bl	80024c8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	f000 bce1 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 800558c:	2302      	movs	r3, #2
 800558e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	fa93 f2a3 	rbit	r2, r3
 800559a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80055a4:	2202      	movs	r2, #2
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	fa93 f2a3 	rbit	r2, r3
 80055b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055bc:	2202      	movs	r2, #2
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	fa93 f2a3 	rbit	r2, r3
 80055ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80055ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d0:	4b81      	ldr	r3, [pc, #516]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80055d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055d8:	2102      	movs	r1, #2
 80055da:	6019      	str	r1, [r3, #0]
 80055dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	fa93 f1a3 	rbit	r1, r3
 80055e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055ea:	6019      	str	r1, [r3, #0]
  return result;
 80055ec:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2101      	movs	r1, #1
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0b3      	beq.n	8005576 <HAL_RCC_OscConfig+0x6fe>
 800560e:	e06b      	b.n	80056e8 <HAL_RCC_OscConfig+0x870>
 8005610:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	fa93 f2a3 	rbit	r2, r3
 8005622:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005626:	601a      	str	r2, [r3, #0]
  return result;
 8005628:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800562c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	4b6a      	ldr	r3, [pc, #424]	; (80057e0 <HAL_RCC_OscConfig+0x968>)
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fc ff41 	bl	80024c8 <HAL_GetTick>
 8005646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564a:	e00a      	b.n	8005662 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fc ff3c 	bl	80024c8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d902      	bls.n	8005662 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	f000 bc76 	b.w	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005662:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005666:	2202      	movs	r2, #2
 8005668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	fa93 f2a3 	rbit	r2, r3
 8005674:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800567e:	2202      	movs	r2, #2
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fa93 f2a3 	rbit	r2, r3
 800568c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005696:	2202      	movs	r2, #2
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	fa93 f2a3 	rbit	r2, r3
 80056a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056aa:	4b4b      	ldr	r3, [pc, #300]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80056ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056b2:	2102      	movs	r1, #2
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	fa93 f1a3 	rbit	r1, r3
 80056c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056c4:	6019      	str	r1, [r3, #0]
  return result;
 80056c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1b1      	bne.n	800564c <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8171 	beq.w	80059da <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00e      	beq.n	8005726 <HAL_RCC_OscConfig+0x8ae>
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d009      	beq.n	8005726 <HAL_RCC_OscConfig+0x8ae>
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d004      	beq.n	8005726 <HAL_RCC_OscConfig+0x8ae>
 800571c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005720:	482e      	ldr	r0, [pc, #184]	; (80057dc <HAL_RCC_OscConfig+0x964>)
 8005722:	f7fc fad2 	bl	8001cca <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005726:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d112      	bne.n	8005758 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	61d3      	str	r3, [r2, #28]
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <HAL_RCC_OscConfig+0x96c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11a      	bne.n	800579a <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005764:	4b1f      	ldr	r3, [pc, #124]	; (80057e4 <HAL_RCC_OscConfig+0x96c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_RCC_OscConfig+0x96c>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005770:	f7fc feaa 	bl	80024c8 <HAL_GetTick>
 8005774:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	e009      	b.n	800578e <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fc fea5 	bl	80024c8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b64      	cmp	r3, #100	; 0x64
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e3df      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_RCC_OscConfig+0x96c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ef      	beq.n	800577a <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d106      	bne.n	80057b2 <HAL_RCC_OscConfig+0x93a>
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6213      	str	r3, [r2, #32]
 80057b0:	e038      	b.n	8005824 <HAL_RCC_OscConfig+0x9ac>
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_OscConfig+0x970>
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	6213      	str	r3, [r2, #32]
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	4a02      	ldr	r2, [pc, #8]	; (80057d8 <HAL_RCC_OscConfig+0x960>)
 80057ce:	f023 0304 	bic.w	r3, r3, #4
 80057d2:	6213      	str	r3, [r2, #32]
 80057d4:	e026      	b.n	8005824 <HAL_RCC_OscConfig+0x9ac>
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	0800c360 	.word	0x0800c360
 80057e0:	10908120 	.word	0x10908120
 80057e4:	40007000 	.word	0x40007000
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d10c      	bne.n	800580c <HAL_RCC_OscConfig+0x994>
 80057f2:	4b5e      	ldr	r3, [pc, #376]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 80057f8:	f043 0304 	orr.w	r3, r3, #4
 80057fc:	6213      	str	r3, [r2, #32]
 80057fe:	4b5b      	ldr	r3, [pc, #364]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	4a5a      	ldr	r2, [pc, #360]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	6213      	str	r3, [r2, #32]
 800580a:	e00b      	b.n	8005824 <HAL_RCC_OscConfig+0x9ac>
 800580c:	4b57      	ldr	r3, [pc, #348]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	4a56      	ldr	r2, [pc, #344]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	6213      	str	r3, [r2, #32]
 8005818:	4b54      	ldr	r3, [pc, #336]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4a53      	ldr	r2, [pc, #332]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 800581e:	f023 0304 	bic.w	r3, r3, #4
 8005822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d064      	beq.n	80058f8 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582e:	f7fc fe4b 	bl	80024c8 <HAL_GetTick>
 8005832:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fc fe46 	bl	80024c8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e37e      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005850:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005854:	2202      	movs	r2, #2
 8005856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	fa93 f2a3 	rbit	r2, r3
 8005862:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800586c:	2202      	movs	r2, #2
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	fa93 f2a3 	rbit	r2, r3
 800587a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800587e:	601a      	str	r2, [r3, #0]
  return result;
 8005880:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005884:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005886:	fab3 f383 	clz	r3, r3
 800588a:	b2db      	uxtb	r3, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f043 0302 	orr.w	r3, r3, #2
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d102      	bne.n	80058a0 <HAL_RCC_OscConfig+0xa28>
 800589a:	4b34      	ldr	r3, [pc, #208]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	e00d      	b.n	80058bc <HAL_RCC_OscConfig+0xa44>
 80058a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058a4:	2202      	movs	r2, #2
 80058a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	fa93 f2a3 	rbit	r2, r3
 80058b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058c0:	2102      	movs	r1, #2
 80058c2:	6011      	str	r1, [r2, #0]
 80058c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	fa92 f1a2 	rbit	r1, r2
 80058ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058d2:	6011      	str	r1, [r2, #0]
  return result;
 80058d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	fab2 f282 	clz	r2, r2
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	f002 021f 	and.w	r2, r2, #31
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f202 	lsl.w	r2, r1, r2
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0a0      	beq.n	8005838 <HAL_RCC_OscConfig+0x9c0>
 80058f6:	e066      	b.n	80059c6 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f8:	f7fc fde6 	bl	80024c8 <HAL_GetTick>
 80058fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005900:	e00b      	b.n	800591a <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fc fde1 	bl	80024c8 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e319      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
 800591a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800591e:	2202      	movs	r2, #2
 8005920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	fa93 f2a3 	rbit	r2, r3
 800592c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005936:	2202      	movs	r2, #2
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	fa93 f2a3 	rbit	r2, r3
 8005944:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005948:	601a      	str	r2, [r3, #0]
  return result;
 800594a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800594e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005950:	fab3 f383 	clz	r3, r3
 8005954:	b2db      	uxtb	r3, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f043 0302 	orr.w	r3, r3, #2
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d105      	bne.n	8005970 <HAL_RCC_OscConfig+0xaf8>
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <HAL_RCC_OscConfig+0xaf4>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	e010      	b.n	800598c <HAL_RCC_OscConfig+0xb14>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005974:	2202      	movs	r2, #2
 8005976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	fa93 f2a3 	rbit	r2, r3
 8005982:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	4bad      	ldr	r3, [pc, #692]	; (8005c40 <HAL_RCC_OscConfig+0xdc8>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005990:	2102      	movs	r1, #2
 8005992:	6011      	str	r1, [r2, #0]
 8005994:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	fa92 f1a2 	rbit	r1, r2
 800599e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80059a2:	6011      	str	r1, [r2, #0]
  return result;
 80059a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	fab2 f282 	clz	r2, r2
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	f002 021f 	and.w	r2, r2, #31
 80059ba:	2101      	movs	r1, #1
 80059bc:	fa01 f202 	lsl.w	r2, r1, r2
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d19d      	bne.n	8005902 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059c6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d105      	bne.n	80059da <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ce:	4b9c      	ldr	r3, [pc, #624]	; (8005c40 <HAL_RCC_OscConfig+0xdc8>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	4a9b      	ldr	r2, [pc, #620]	; (8005c40 <HAL_RCC_OscConfig+0xdc8>)
 80059d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <HAL_RCC_OscConfig+0xb8a>
 80059e4:	1d3b      	adds	r3, r7, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_OscConfig+0xb8a>
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d004      	beq.n	8005a02 <HAL_RCC_OscConfig+0xb8a>
 80059f8:	f240 213a 	movw	r1, #570	; 0x23a
 80059fc:	4891      	ldr	r0, [pc, #580]	; (8005c44 <HAL_RCC_OscConfig+0xdcc>)
 80059fe:	f7fc f964 	bl	8001cca <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 829f 	beq.w	8005f4c <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a0e:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <HAL_RCC_OscConfig+0xdc8>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	f000 826c 	beq.w	8005ef4 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	f040 81e4 	bne.w	8005df0 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCC_OscConfig+0xbd2>
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d004      	beq.n	8005a4a <HAL_RCC_OscConfig+0xbd2>
 8005a40:	f240 2143 	movw	r1, #579	; 0x243
 8005a44:	487f      	ldr	r0, [pc, #508]	; (8005c44 <HAL_RCC_OscConfig+0xdcc>)
 8005a46:	f7fc f940 	bl	8001cca <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d058      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a5e:	d052      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a6a:	d04c      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a76:	d046      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a82:	d040      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a8e:	d03a      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a9a:	d034      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005a9c:	1d3b      	adds	r3, r7, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005aa6:	d02e      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab2:	d028      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005abe:	d022      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005aca:	d01c      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ad6:	d016      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005af0:	1d3b      	adds	r3, r7, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005afa:	d004      	beq.n	8005b06 <HAL_RCC_OscConfig+0xc8e>
 8005afc:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005b00:	4850      	ldr	r0, [pc, #320]	; (8005c44 <HAL_RCC_OscConfig+0xdcc>)
 8005b02:	f7fc f8e2 	bl	8001cca <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d04f      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b10:	1d3b      	adds	r3, r7, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d04a      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d045      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d040      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d03b      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d036      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b42:	1d3b      	adds	r3, r7, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d031      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b4c:	1d3b      	adds	r3, r7, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b07      	cmp	r3, #7
 8005b54:	d02c      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d027      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	d022      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b0a      	cmp	r3, #10
 8005b72:	d01d      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b74:	1d3b      	adds	r3, r7, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b0b      	cmp	r3, #11
 8005b7c:	d018      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d013      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b0d      	cmp	r3, #13
 8005b90:	d00e      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b92:	1d3b      	adds	r3, r7, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b0e      	cmp	r3, #14
 8005b9a:	d009      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xd38>
 8005ba6:	f240 2146 	movw	r1, #582	; 0x246
 8005baa:	4826      	ldr	r0, [pc, #152]	; (8005c44 <HAL_RCC_OscConfig+0xdcc>)
 8005bac:	f7fc f88d 	bl	8001cca <assert_failed>
 8005bb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fa93 f2a3 	rbit	r2, r3
 8005bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bc8:	601a      	str	r2, [r3, #0]
  return result;
 8005bca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bce:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	2300      	movs	r3, #0
 8005be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fc fc6f 	bl	80024c8 <HAL_GetTick>
 8005bea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bee:	e009      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fc fc6a 	bl	80024c8 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e1a4      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005c04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	fa93 f2a3 	rbit	r2, r3
 8005c18:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c1c:	601a      	str	r2, [r3, #0]
  return result;
 8005c1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c24:	fab3 f383 	clz	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_OscConfig+0xdd0>
 8005c38:	4b01      	ldr	r3, [pc, #4]	; (8005c40 <HAL_RCC_OscConfig+0xdc8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e020      	b.n	8005c80 <HAL_RCC_OscConfig+0xe08>
 8005c3e:	bf00      	nop
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800c360 	.word	0x0800c360
 8005c48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	fa93 f2a3 	rbit	r2, r3
 8005c5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	fa93 f2a3 	rbit	r2, r3
 8005c76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	4bb6      	ldr	r3, [pc, #728]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c88:	6011      	str	r1, [r2, #0]
 8005c8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	fa92 f1a2 	rbit	r1, r2
 8005c94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c98:	6011      	str	r1, [r2, #0]
  return result;
 8005c9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	fab2 f282 	clz	r2, r2
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	f042 0220 	orr.w	r2, r2, #32
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	f002 021f 	and.w	r2, r2, #31
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d199      	bne.n	8005bf0 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cbc:	4ba6      	ldr	r3, [pc, #664]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f023 020f 	bic.w	r2, r3, #15
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	49a3      	ldr	r1, [pc, #652]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005cd0:	4ba1      	ldr	r3, [pc, #644]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a19      	ldr	r1, [r3, #32]
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	499c      	ldr	r1, [pc, #624]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]
 8005cec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	fa93 f2a3 	rbit	r2, r3
 8005d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d04:	601a      	str	r2, [r3, #0]
  return result;
 8005d06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d0a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0c:	fab3 f383 	clz	r3, r3
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2301      	movs	r3, #1
 8005d20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fc fbd1 	bl	80024c8 <HAL_GetTick>
 8005d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d2a:	e009      	b.n	8005d40 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fc fbcc 	bl	80024c8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e106      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005d40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	fa93 f2a3 	rbit	r2, r3
 8005d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d58:	601a      	str	r2, [r3, #0]
  return result;
 8005d5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d102      	bne.n	8005d7a <HAL_RCC_OscConfig+0xf02>
 8005d74:	4b78      	ldr	r3, [pc, #480]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	e01b      	b.n	8005db2 <HAL_RCC_OscConfig+0xf3a>
 8005d7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	fa93 f2a3 	rbit	r2, r3
 8005d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fa93 f2a3 	rbit	r2, r3
 8005da8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4b6a      	ldr	r3, [pc, #424]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005db6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005dba:	6011      	str	r1, [r2, #0]
 8005dbc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	fa92 f1a2 	rbit	r1, r2
 8005dc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dca:	6011      	str	r1, [r2, #0]
  return result;
 8005dcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	fab2 f282 	clz	r2, r2
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f042 0220 	orr.w	r2, r2, #32
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f002 021f 	and.w	r2, r2, #31
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d09e      	beq.n	8005d2c <HAL_RCC_OscConfig+0xeb4>
 8005dee:	e0ad      	b.n	8005f4c <HAL_RCC_OscConfig+0x10d4>
 8005df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	fa93 f2a3 	rbit	r2, r3
 8005e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e08:	601a      	str	r2, [r3, #0]
  return result;
 8005e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e0e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e10:	fab3 f383 	clz	r3, r3
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	461a      	mov	r2, r3
 8005e22:	2300      	movs	r3, #0
 8005e24:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fc fb4f 	bl	80024c8 <HAL_GetTick>
 8005e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e2e:	e009      	b.n	8005e44 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc fb4a 	bl	80024c8 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e084      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
 8005e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	fa93 f2a3 	rbit	r2, r3
 8005e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e5c:	601a      	str	r2, [r3, #0]
  return result;
 8005e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e64:	fab3 f383 	clz	r3, r3
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <HAL_RCC_OscConfig+0x1006>
 8005e78:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	e01b      	b.n	8005eb6 <HAL_RCC_OscConfig+0x103e>
 8005e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	fa93 f2a3 	rbit	r2, r3
 8005e92:	f107 0320 	add.w	r3, r7, #32
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f107 031c 	add.w	r3, r7, #28
 8005e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f107 031c 	add.w	r3, r7, #28
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	fa93 f2a3 	rbit	r2, r3
 8005eac:	f107 0318 	add.w	r3, r7, #24
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	f107 0214 	add.w	r2, r7, #20
 8005eba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ebe:	6011      	str	r1, [r2, #0]
 8005ec0:	f107 0214 	add.w	r2, r7, #20
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	fa92 f1a2 	rbit	r1, r2
 8005eca:	f107 0210 	add.w	r2, r7, #16
 8005ece:	6011      	str	r1, [r2, #0]
  return result;
 8005ed0:	f107 0210 	add.w	r2, r7, #16
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	fab2 f282 	clz	r2, r2
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	f042 0220 	orr.w	r2, r2, #32
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	f002 021f 	and.w	r2, r2, #31
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d19e      	bne.n	8005e30 <HAL_RCC_OscConfig+0xfb8>
 8005ef2:	e02b      	b.n	8005f4c <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e025      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <HAL_RCC_OscConfig+0x10e0>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f16:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d111      	bne.n	8005f48 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d108      	bne.n	8005f48 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f3a:	f003 020f 	and.w	r2, r3, #15
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b09e      	sub	sp, #120	; 0x78
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e203      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d116      	bne.n	8005fae <HAL_RCC_ClockConfig+0x52>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d110      	bne.n	8005fae <HAL_RCC_ClockConfig+0x52>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <HAL_RCC_ClockConfig+0x52>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_RCC_ClockConfig+0x52>
 8005fa4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005fa8:	48a5      	ldr	r0, [pc, #660]	; (8006240 <HAL_RCC_ClockConfig+0x2e4>)
 8005faa:	f7fb fe8e 	bl	8001cca <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCC_ClockConfig+0x6e>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d007      	beq.n	8005fca <HAL_RCC_ClockConfig+0x6e>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d004      	beq.n	8005fca <HAL_RCC_ClockConfig+0x6e>
 8005fc0:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8005fc4:	489e      	ldr	r0, [pc, #632]	; (8006240 <HAL_RCC_ClockConfig+0x2e4>)
 8005fc6:	f7fb fe80 	bl	8001cca <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fca:	4b9e      	ldr	r3, [pc, #632]	; (8006244 <HAL_RCC_ClockConfig+0x2e8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d910      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd8:	4b9a      	ldr	r3, [pc, #616]	; (8006244 <HAL_RCC_ClockConfig+0x2e8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f023 0207 	bic.w	r2, r3, #7
 8005fe0:	4998      	ldr	r1, [pc, #608]	; (8006244 <HAL_RCC_ClockConfig+0x2e8>)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe8:	4b96      	ldr	r3, [pc, #600]	; (8006244 <HAL_RCC_ClockConfig+0x2e8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e1c0      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d031      	beq.n	800606a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d024      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d020      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b90      	cmp	r3, #144	; 0x90
 800601c:	d01c      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2ba0      	cmp	r3, #160	; 0xa0
 8006024:	d018      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2bb0      	cmp	r3, #176	; 0xb0
 800602c:	d014      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d010      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2bd0      	cmp	r3, #208	; 0xd0
 800603c:	d00c      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2be0      	cmp	r3, #224	; 0xe0
 8006044:	d008      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2bf0      	cmp	r3, #240	; 0xf0
 800604c:	d004      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
 800604e:	f240 21db 	movw	r1, #731	; 0x2db
 8006052:	487b      	ldr	r0, [pc, #492]	; (8006240 <HAL_RCC_ClockConfig+0x2e4>)
 8006054:	f7fb fe39 	bl	8001cca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006058:	4b7b      	ldr	r3, [pc, #492]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	4978      	ldr	r1, [pc, #480]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80f3 	beq.w	800625e <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <HAL_RCC_ClockConfig+0x13e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d008      	beq.n	800609a <HAL_RCC_ClockConfig+0x13e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d004      	beq.n	800609a <HAL_RCC_ClockConfig+0x13e>
 8006090:	f240 21e2 	movw	r1, #738	; 0x2e2
 8006094:	486a      	ldr	r0, [pc, #424]	; (8006240 <HAL_RCC_ClockConfig+0x2e4>)
 8006096:	f7fb fe18 	bl	8001cca <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d13c      	bne.n	800611c <HAL_RCC_ClockConfig+0x1c0>
 80060a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060aa:	fa93 f3a3 	rbit	r3, r3
 80060ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b2:	fab3 f383 	clz	r3, r3
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d102      	bne.n	80060cc <HAL_RCC_ClockConfig+0x170>
 80060c6:	4b60      	ldr	r3, [pc, #384]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	e00f      	b.n	80060ec <HAL_RCC_ClockConfig+0x190>
 80060cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	667b      	str	r3, [r7, #100]	; 0x64
 80060da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060de:	663b      	str	r3, [r7, #96]	; 0x60
 80060e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e8:	4b57      	ldr	r3, [pc, #348]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80060f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f4:	fa92 f2a2 	rbit	r2, r2
 80060f8:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80060fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060fc:	fab2 f282 	clz	r2, r2
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	f002 021f 	and.w	r2, r2, #31
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f202 	lsl.w	r2, r1, r2
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d17b      	bne.n	8006210 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e12f      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d13c      	bne.n	800619e <HAL_RCC_ClockConfig+0x242>
 8006124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006128:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006134:	fab3 f383 	clz	r3, r3
 8006138:	b2db      	uxtb	r3, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d102      	bne.n	800614e <HAL_RCC_ClockConfig+0x1f2>
 8006148:	4b3f      	ldr	r3, [pc, #252]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	e00f      	b.n	800616e <HAL_RCC_ClockConfig+0x212>
 800614e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006156:	fa93 f3a3 	rbit	r3, r3
 800615a:	647b      	str	r3, [r7, #68]	; 0x44
 800615c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
 8006162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006164:	fa93 f3a3 	rbit	r3, r3
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	4b37      	ldr	r3, [pc, #220]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006172:	63ba      	str	r2, [r7, #56]	; 0x38
 8006174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006176:	fa92 f2a2 	rbit	r2, r2
 800617a:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800617c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617e:	fab2 f282 	clz	r2, r2
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	f042 0220 	orr.w	r2, r2, #32
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	f002 021f 	and.w	r2, r2, #31
 800618e:	2101      	movs	r1, #1
 8006190:	fa01 f202 	lsl.w	r2, r1, r2
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d13a      	bne.n	8006210 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0ee      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
 800619e:	2302      	movs	r3, #2
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ac:	fab3 f383 	clz	r3, r3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d102      	bne.n	80061c6 <HAL_RCC_ClockConfig+0x26a>
 80061c0:	4b21      	ldr	r3, [pc, #132]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	e00d      	b.n	80061e2 <HAL_RCC_ClockConfig+0x286>
 80061c6:	2302      	movs	r3, #2
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
 80061d2:	2302      	movs	r3, #2
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2202      	movs	r2, #2
 80061e4:	61ba      	str	r2, [r7, #24]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	fa92 f2a2 	rbit	r2, r2
 80061ec:	617a      	str	r2, [r7, #20]
  return result;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	fab2 f282 	clz	r2, r2
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	f042 0220 	orr.w	r2, r2, #32
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	f002 021f 	and.w	r2, r2, #31
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f202 	lsl.w	r2, r1, r2
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0b5      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f023 0203 	bic.w	r2, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	490a      	ldr	r1, [pc, #40]	; (8006248 <HAL_RCC_ClockConfig+0x2ec>)
 800621e:	4313      	orrs	r3, r2
 8006220:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006222:	f7fc f951 	bl	80024c8 <HAL_GetTick>
 8006226:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006228:	e010      	b.n	800624c <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800622a:	f7fc f94d 	bl	80024c8 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d907      	bls.n	800624c <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e09d      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
 8006240:	0800c360 	.word	0x0800c360
 8006244:	40022000 	.word	0x40022000
 8006248:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624c:	4b4d      	ldr	r3, [pc, #308]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 020c 	and.w	r2, r3, #12
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	429a      	cmp	r2, r3
 800625c:	d1e5      	bne.n	800622a <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800625e:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <HAL_RCC_ClockConfig+0x42c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d210      	bcs.n	800628e <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626c:	4b46      	ldr	r3, [pc, #280]	; (8006388 <HAL_RCC_ClockConfig+0x42c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f023 0207 	bic.w	r2, r3, #7
 8006274:	4944      	ldr	r1, [pc, #272]	; (8006388 <HAL_RCC_ClockConfig+0x42c>)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	4313      	orrs	r3, r2
 800627a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627c:	4b42      	ldr	r3, [pc, #264]	; (8006388 <HAL_RCC_ClockConfig+0x42c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d001      	beq.n	800628e <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e076      	b.n	800637c <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d025      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d018      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x378>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x378>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80062b4:	d00e      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x378>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062be:	d009      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x378>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062c8:	d004      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x378>
 80062ca:	f240 311e 	movw	r1, #798	; 0x31e
 80062ce:	482f      	ldr	r0, [pc, #188]	; (800638c <HAL_RCC_ClockConfig+0x430>)
 80062d0:	f7fb fcfb 	bl	8001cca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4928      	ldr	r1, [pc, #160]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d026      	beq.n	8006340 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d018      	beq.n	800632c <HAL_RCC_ClockConfig+0x3d0>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d013      	beq.n	800632c <HAL_RCC_ClockConfig+0x3d0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800630c:	d00e      	beq.n	800632c <HAL_RCC_ClockConfig+0x3d0>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006316:	d009      	beq.n	800632c <HAL_RCC_ClockConfig+0x3d0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006320:	d004      	beq.n	800632c <HAL_RCC_ClockConfig+0x3d0>
 8006322:	f240 3125 	movw	r1, #805	; 0x325
 8006326:	4819      	ldr	r0, [pc, #100]	; (800638c <HAL_RCC_ClockConfig+0x430>)
 8006328:	f7fb fccf 	bl	8001cca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4912      	ldr	r1, [pc, #72]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006340:	f000 f82c 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006344:	4601      	mov	r1, r0
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_RCC_ClockConfig+0x428>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800634e:	22f0      	movs	r2, #240	; 0xf0
 8006350:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	fa92 f2a2 	rbit	r2, r2
 8006358:	60fa      	str	r2, [r7, #12]
  return result;
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	fab2 f282 	clz	r2, r2
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	40d3      	lsrs	r3, r2
 8006364:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x434>)
 8006366:	5cd3      	ldrb	r3, [r2, r3]
 8006368:	fa21 f303 	lsr.w	r3, r1, r3
 800636c:	4a09      	ldr	r2, [pc, #36]	; (8006394 <HAL_RCC_ClockConfig+0x438>)
 800636e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_RCC_ClockConfig+0x43c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fc f863 	bl	8002440 <HAL_InitTick>
  
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3778      	adds	r7, #120	; 0x78
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40021000 	.word	0x40021000
 8006388:	40022000 	.word	0x40022000
 800638c:	0800c360 	.word	0x0800c360
 8006390:	0800c524 	.word	0x0800c524
 8006394:	2000007c 	.word	0x2000007c
 8006398:	20000080 	.word	0x20000080

0800639c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	b480      	push	{r7}
 800639e:	b08b      	sub	sp, #44	; 0x2c
 80063a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d002      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x30>
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0x36>
 80063ca:	e03f      	b.n	800644c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063cc:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc8>)
 80063ce:	623b      	str	r3, [r7, #32]
      break;
 80063d0:	e03f      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	fa92 f2a2 	rbit	r2, r2
 80063e4:	607a      	str	r2, [r7, #4]
  return result;
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	fab2 f282 	clz	r2, r2
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	40d3      	lsrs	r3, r2
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	220f      	movs	r2, #15
 8006400:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	fa92 f2a2 	rbit	r2, r2
 8006408:	60fa      	str	r2, [r7, #12]
  return result;
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	fab2 f282 	clz	r2, r2
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	40d3      	lsrs	r3, r2
 8006414:	4a15      	ldr	r2, [pc, #84]	; (800646c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006424:	4a0f      	ldr	r2, [pc, #60]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	fbb2 f2f3 	udiv	r2, r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
 8006434:	e007      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006436:	4a0b      	ldr	r2, [pc, #44]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	fbb2 f2f3 	udiv	r2, r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	623b      	str	r3, [r7, #32]
      break;
 800644a:	e002      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc8>)
 800644e:	623b      	str	r3, [r7, #32]
      break;
 8006450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006452:	6a3b      	ldr	r3, [r7, #32]
}
 8006454:	4618      	mov	r0, r3
 8006456:	372c      	adds	r7, #44	; 0x2c
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40021000 	.word	0x40021000
 8006464:	007a1200 	.word	0x007a1200
 8006468:	0800c53c 	.word	0x0800c53c
 800646c:	0800c54c 	.word	0x0800c54c

08006470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_RCC_GetHCLKFreq+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	2000007c 	.word	0x2000007c

08006488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800648e:	f7ff ffef 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 8006492:	4601      	mov	r1, r0
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800649c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80064a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	fa92 f2a2 	rbit	r2, r2
 80064a8:	603a      	str	r2, [r7, #0]
  return result;
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	fab2 f282 	clz	r2, r2
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	40d3      	lsrs	r3, r2
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80064b6:	5cd3      	ldrb	r3, [r2, r3]
 80064b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40021000 	.word	0x40021000
 80064c8:	0800c534 	.word	0x0800c534

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064d2:	f7ff ffcd 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80064d6:	4601      	mov	r1, r0
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80064e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	fa92 f2a2 	rbit	r2, r2
 80064ec:	603a      	str	r2, [r7, #0]
  return result;
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	fab2 f282 	clz	r2, r2
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	40d3      	lsrs	r3, r2
 80064f8:	4a04      	ldr	r2, [pc, #16]	; (800650c <HAL_RCC_GetPCLK2Freq+0x40>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40021000 	.word	0x40021000
 800650c:	0800c534 	.word	0x0800c534

08006510 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b092      	sub	sp, #72	; 0x48
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a62      	ldr	r2, [pc, #392]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d303      	bcc.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006530:	2172      	movs	r1, #114	; 0x72
 8006532:	4861      	ldr	r0, [pc, #388]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006534:	f7fb fbc9 	bl	8001cca <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80f1 	beq.w	8006728 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d012      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006556:	d00d      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006560:	d008      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656a:	d003      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800656c:	2178      	movs	r1, #120	; 0x78
 800656e:	4852      	ldr	r0, [pc, #328]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006570:	f7fb fbab 	bl	8001cca <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006574:	4b51      	ldr	r3, [pc, #324]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10e      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006580:	4b4e      	ldr	r3, [pc, #312]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	4a4d      	ldr	r2, [pc, #308]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658a:	61d3      	str	r3, [r2, #28]
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659e:	4b48      	ldr	r3, [pc, #288]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d118      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065aa:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a44      	ldr	r2, [pc, #272]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b6:	f7fb ff87 	bl	80024c8 <HAL_GetTick>
 80065ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	e008      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065be:	f7fb ff83 	bl	80024c8 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b64      	cmp	r3, #100	; 0x64
 80065ca:	d901      	bls.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e38f      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d0:	4b3b      	ldr	r3, [pc, #236]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065dc:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 808a 	beq.w	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	f000 8082 	beq.w	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065fe:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800660c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	fa93 f3a3 	rbit	r3, r3
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006618:	fab3 f383 	clz	r3, r3
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	461a      	mov	r2, r3
 8006628:	2301      	movs	r3, #1
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	fa93 f3a3 	rbit	r3, r3
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663c:	fab3 f383 	clz	r3, r3
 8006640:	b2db      	uxtb	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	461a      	mov	r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006650:	4a1a      	ldr	r2, [pc, #104]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d050      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fb ff32 	bl	80024c8 <HAL_GetTick>
 8006664:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fb ff2e 	bl	80024c8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e338      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 800667e:	2302      	movs	r3, #2
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	fa93 f3a3 	rbit	r3, r3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	2302      	movs	r3, #2
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	61fb      	str	r3, [r7, #28]
  return result;
 8006696:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006698:	fab3 f383 	clz	r3, r3
 800669c:	b2db      	uxtb	r3, r3
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f043 0302 	orr.w	r3, r3, #2
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d10d      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	e012      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80066b2:	bf00      	nop
 80066b4:	03f73400 	.word	0x03f73400
 80066b8:	0800c398 	.word	0x0800c398
 80066bc:	40021000 	.word	0x40021000
 80066c0:	40007000 	.word	0x40007000
 80066c4:	10908100 	.word	0x10908100
 80066c8:	2302      	movs	r3, #2
 80066ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	fa93 f3a3 	rbit	r3, r3
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	4b97      	ldr	r3, [pc, #604]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2202      	movs	r2, #2
 80066da:	613a      	str	r2, [r7, #16]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	fa92 f2a2 	rbit	r2, r2
 80066e2:	60fa      	str	r2, [r7, #12]
  return result;
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	fab2 f282 	clz	r2, r2
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	f002 021f 	and.w	r2, r2, #31
 80066f6:	2101      	movs	r1, #1
 80066f8:	fa01 f202 	lsl.w	r2, r1, r2
 80066fc:	4013      	ands	r3, r2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0b2      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006702:	4b8c      	ldr	r3, [pc, #560]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4989      	ldr	r1, [pc, #548]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006710:	4313      	orrs	r3, r2
 8006712:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006714:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006718:	2b01      	cmp	r3, #1
 800671a:	d105      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800671c:	4b85      	ldr	r3, [pc, #532]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	4a84      	ldr	r2, [pc, #528]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01c      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d00b      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d007      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d003      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006754:	21be      	movs	r1, #190	; 0xbe
 8006756:	4878      	ldr	r0, [pc, #480]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006758:	f7fb fab7 	bl	8001cca <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800675c:	4b75      	ldr	r3, [pc, #468]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	f023 0203 	bic.w	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4972      	ldr	r1, [pc, #456]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800676a:	4313      	orrs	r3, r2
 800676c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01f      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678a:	d00d      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006794:	d008      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067a0:	21c9      	movs	r1, #201	; 0xc9
 80067a2:	4865      	ldr	r0, [pc, #404]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80067a4:	f7fb fa91 	bl	8001cca <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067a8:	4b62      	ldr	r3, [pc, #392]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	495f      	ldr	r1, [pc, #380]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01f      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067d6:	d00d      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067e0:	d008      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067ea:	d003      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067ec:	21d5      	movs	r1, #213	; 0xd5
 80067ee:	4852      	ldr	r0, [pc, #328]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80067f0:	f7fb fa6b 	bl	8001cca <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067f4:	4b4f      	ldr	r3, [pc, #316]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	494c      	ldr	r1, [pc, #304]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006802:	4313      	orrs	r3, r2
 8006804:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d014      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	2b10      	cmp	r3, #16
 8006820:	d003      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006822:	21e0      	movs	r1, #224	; 0xe0
 8006824:	4844      	ldr	r0, [pc, #272]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006826:	f7fb fa50 	bl	8001cca <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800682a:	4b42      	ldr	r3, [pc, #264]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f023 0210 	bic.w	r2, r3, #16
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	493f      	ldr	r1, [pc, #252]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006838:	4313      	orrs	r3, r2
 800683a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d015      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006850:	d007      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800685a:	21ee      	movs	r1, #238	; 0xee
 800685c:	4836      	ldr	r0, [pc, #216]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800685e:	f7fb fa34 	bl	8001cca <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006862:	4b34      	ldr	r3, [pc, #208]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	4931      	ldr	r1, [pc, #196]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006870:	4313      	orrs	r3, r2
 8006872:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d015      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	2b20      	cmp	r3, #32
 800688e:	d004      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006890:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006894:	4828      	ldr	r0, [pc, #160]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006896:	f7fb fa18 	bl	8001cca <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800689a:	4b26      	ldr	r3, [pc, #152]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f023 0220 	bic.w	r2, r3, #32
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4923      	ldr	r1, [pc, #140]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d015      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d004      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80068cc:	481a      	ldr	r0, [pc, #104]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80068ce:	f7fb f9fc 	bl	8001cca <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068d2:	4b18      	ldr	r3, [pc, #96]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	4915      	ldr	r1, [pc, #84]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d025      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006900:	d00e      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006914:	d004      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006916:	f240 1123 	movw	r1, #291	; 0x123
 800691a:	4807      	ldr	r0, [pc, #28]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800691c:	f7fb f9d5 	bl	8001cca <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006920:	4b04      	ldr	r3, [pc, #16]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	4901      	ldr	r1, [pc, #4]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800692e:	4313      	orrs	r3, r2
 8006930:	630b      	str	r3, [r1, #48]	; 0x30
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006934:	40021000 	.word	0x40021000
 8006938:	0800c398 	.word	0x0800c398
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d013      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006958:	d00e      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006962:	d009      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800696c:	d004      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800696e:	f240 112d 	movw	r1, #301	; 0x12d
 8006972:	48a1      	ldr	r0, [pc, #644]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006974:	f7fb f9a9 	bl	8001cca <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006978:	4ba0      	ldr	r3, [pc, #640]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	499d      	ldr	r1, [pc, #628]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006986:	4313      	orrs	r3, r2
 8006988:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80069a8:	f240 113d 	movw	r1, #317	; 0x13d
 80069ac:	4892      	ldr	r0, [pc, #584]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80069ae:	f7fb f98c 	bl	8001cca <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069b2:	4b92      	ldr	r3, [pc, #584]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	498f      	ldr	r1, [pc, #572]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d04d      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d040      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e0:	d03b      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80069ea:	d036      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80069f4:	d031      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80069fe:	d02c      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a08:	d027      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8006a12:	d022      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006a1c:	d01d      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006a26:	d018      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006a30:	d013      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006a3a:	d00e      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006a44:	d009      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006a4e:	d004      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a50:	f240 115d 	movw	r1, #349	; 0x15d
 8006a54:	4868      	ldr	r0, [pc, #416]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006a56:	f7fb f938 	bl	8001cca <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a5a:	4b68      	ldr	r3, [pc, #416]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	4965      	ldr	r1, [pc, #404]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d04d      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d040      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d03b      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8006a92:	d036      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8006a9c:	d031      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8006aa6:	d02c      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006ab0:	d027      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8006aba:	d022      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8006ac4:	d01d      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8006ace:	d018      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ad8:	d013      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8006ae2:	d00e      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8006aec:	d009      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006af6:	d004      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006af8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006afc:	483e      	ldr	r0, [pc, #248]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006afe:	f7fb f8e4 	bl	8001cca <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006b02:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	493b      	ldr	r1, [pc, #236]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d016      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b30:	d004      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b32:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006b36:	4830      	ldr	r0, [pc, #192]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b38:	f7fb f8c7 	bl	8001cca <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b48:	492c      	ldr	r1, [pc, #176]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d016      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6a:	d004      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b6c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006b70:	4821      	ldr	r0, [pc, #132]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b72:	f7fb f8aa 	bl	8001cca <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b76:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	491e      	ldr	r1, [pc, #120]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d016      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006ba6:	f240 11f7 	movw	r1, #503	; 0x1f7
 8006baa:	4813      	ldr	r0, [pc, #76]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006bac:	f7fb f88d 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01b      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bde:	d004      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006be0:	f240 2101 	movw	r1, #513	; 0x201
 8006be4:	4804      	ldr	r0, [pc, #16]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006be6:	f7fb f870 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006bea:	4b04      	ldr	r3, [pc, #16]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006bf8:	0800c398 	.word	0x0800c398
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	493d      	ldr	r1, [pc, #244]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d016      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c22:	d004      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c24:	f240 210b 	movw	r1, #523	; 0x20b
 8006c28:	4834      	ldr	r0, [pc, #208]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c2a:	f7fb f84e 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c2e:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	492f      	ldr	r1, [pc, #188]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d016      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5c:	d004      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c5e:	f240 2115 	movw	r1, #533	; 0x215
 8006c62:	4826      	ldr	r0, [pc, #152]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c64:	f7fb f831 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006c68:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c74:	4920      	ldr	r1, [pc, #128]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c96:	d004      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c98:	f240 211f 	movw	r1, #543	; 0x21f
 8006c9c:	4817      	ldr	r0, [pc, #92]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c9e:	f7fb f814 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006ca2:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	4912      	ldr	r1, [pc, #72]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d016      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cd2:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8006cd6:	4809      	ldr	r0, [pc, #36]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006cd8:	f7fa fff7 	bl	8001cca <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce8:	4903      	ldr	r1, [pc, #12]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3748      	adds	r7, #72	; 0x48
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	0800c398 	.word	0x0800c398

08006d00 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0e1      	b.n	8006ed6 <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a72      	ldr	r2, [pc, #456]	; (8006ee0 <HAL_RTC_Init+0x1e0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_RTC_Init+0x26>
 8006d1c:	f240 1121 	movw	r1, #289	; 0x121
 8006d20:	4870      	ldr	r0, [pc, #448]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006d22:	f7fa ffd2 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d008      	beq.n	8006d40 <HAL_RTC_Init+0x40>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_RTC_Init+0x40>
 8006d36:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006d3a:	486a      	ldr	r0, [pc, #424]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006d3c:	f7fa ffc5 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b7f      	cmp	r3, #127	; 0x7f
 8006d46:	d904      	bls.n	8006d52 <HAL_RTC_Init+0x52>
 8006d48:	f240 1123 	movw	r1, #291	; 0x123
 8006d4c:	4865      	ldr	r0, [pc, #404]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006d4e:	f7fa ffbc 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5a:	d304      	bcc.n	8006d66 <HAL_RTC_Init+0x66>
 8006d5c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8006d60:	4860      	ldr	r0, [pc, #384]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006d62:	f7fa ffb2 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_RTC_Init+0x96>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d76:	d00e      	beq.n	8006d96 <HAL_RTC_Init+0x96>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d80:	d009      	beq.n	8006d96 <HAL_RTC_Init+0x96>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d8a:	d004      	beq.n	8006d96 <HAL_RTC_Init+0x96>
 8006d8c:	f240 1125 	movw	r1, #293	; 0x125
 8006d90:	4854      	ldr	r0, [pc, #336]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006d92:	f7fa ff9a 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <HAL_RTC_Init+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da6:	d004      	beq.n	8006db2 <HAL_RTC_Init+0xb2>
 8006da8:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006dac:	484d      	ldr	r0, [pc, #308]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006dae:	f7fa ff8c 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <HAL_RTC_Init+0xce>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc2:	d004      	beq.n	8006dce <HAL_RTC_Init+0xce>
 8006dc4:	f240 1127 	movw	r1, #295	; 0x127
 8006dc8:	4846      	ldr	r0, [pc, #280]	; (8006ee4 <HAL_RTC_Init+0x1e4>)
 8006dca:	f7fa ff7e 	bl	8001cca <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7f5b      	ldrb	r3, [r3, #29]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb f832 	bl	8001e48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	22ca      	movs	r2, #202	; 0xca
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2253      	movs	r2, #83	; 0x53
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ffdc 	bl	8007db8 <RTC_EnterInitMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	22ff      	movs	r2, #255	; 0xff
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e05e      	b.n	8006ed6 <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6899      	ldr	r1, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68d2      	ldr	r2, [r2, #12]
 8006e52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6919      	ldr	r1, [r3, #16]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	041a      	lsls	r2, r3, #16
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10e      	bne.n	8006ea4 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 ff6e 	bl	8007d68 <HAL_RTC_WaitForSynchro>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	22ff      	movs	r2, #255	; 0xff
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e018      	b.n	8006ed6 <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40002800 	.word	0x40002800
 8006ee4:	0800c3f4 	.word	0x0800c3f4

08006ee8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_RTC_SetTime+0x26>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d004      	beq.n	8006f0e <HAL_RTC_SetTime+0x26>
 8006f04:	f240 310f 	movw	r1, #783	; 0x30f
 8006f08:	48a4      	ldr	r0, [pc, #656]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006f0a:	f7fa fede 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f16:	d00d      	beq.n	8006f34 <HAL_RTC_SetTime+0x4c>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f20:	d008      	beq.n	8006f34 <HAL_RTC_SetTime+0x4c>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <HAL_RTC_SetTime+0x4c>
 8006f2a:	f44f 7144 	mov.w	r1, #784	; 0x310
 8006f2e:	489b      	ldr	r0, [pc, #620]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006f30:	f7fa fecb 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <HAL_RTC_SetTime+0x68>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f44:	d004      	beq.n	8006f50 <HAL_RTC_SetTime+0x68>
 8006f46:	f240 3111 	movw	r1, #785	; 0x311
 8006f4a:	4894      	ldr	r0, [pc, #592]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006f4c:	f7fa febd 	bl	8001cca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	7f1b      	ldrb	r3, [r3, #28]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_RTC_SetTime+0x74>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e12c      	b.n	80071b6 <HAL_RTC_SetTime+0x2ce>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2202      	movs	r2, #2
 8006f66:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d15c      	bne.n	8007028 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01a      	beq.n	8006fb2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_RTC_SetTime+0xa4>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d904      	bls.n	8006f96 <HAL_RTC_SetTime+0xae>
 8006f8c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8006f90:	4882      	ldr	r0, [pc, #520]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006f92:	f7fa fe9a 	bl	8001cca <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d015      	beq.n	8006fca <HAL_RTC_SetTime+0xe2>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d011      	beq.n	8006fca <HAL_RTC_SetTime+0xe2>
 8006fa6:	f240 311d 	movw	r1, #797	; 0x31d
 8006faa:	487c      	ldr	r0, [pc, #496]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006fac:	f7fa fe8d 	bl	8001cca <assert_failed>
 8006fb0:	e00b      	b.n	8006fca <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b17      	cmp	r3, #23
 8006fbe:	d904      	bls.n	8006fca <HAL_RTC_SetTime+0xe2>
 8006fc0:	f240 3122 	movw	r1, #802	; 0x322
 8006fc4:	4875      	ldr	r0, [pc, #468]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006fc6:	f7fa fe80 	bl	8001cca <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	2b3b      	cmp	r3, #59	; 0x3b
 8006fd0:	d904      	bls.n	8006fdc <HAL_RTC_SetTime+0xf4>
 8006fd2:	f44f 7149 	mov.w	r1, #804	; 0x324
 8006fd6:	4871      	ldr	r0, [pc, #452]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006fd8:	f7fa fe77 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	789b      	ldrb	r3, [r3, #2]
 8006fe0:	2b3b      	cmp	r3, #59	; 0x3b
 8006fe2:	d904      	bls.n	8006fee <HAL_RTC_SetTime+0x106>
 8006fe4:	f240 3125 	movw	r1, #805	; 0x325
 8006fe8:	486c      	ldr	r0, [pc, #432]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8006fea:	f7fa fe6e 	bl	8001cca <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 ff0c 	bl	8007e10 <RTC_ByteToBcd2>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 ff05 	bl	8007e10 <RTC_ByteToBcd2>
 8007006:	4603      	mov	r3, r0
 8007008:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800700a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	789b      	ldrb	r3, [r3, #2]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fefd 	bl	8007e10 <RTC_ByteToBcd2>
 8007016:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007018:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	e062      	b.n	80070ee <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d022      	beq.n	800707c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff06 	bl	8007e4c <RTC_Bcd2ToByte>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_RTC_SetTime+0x16e>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fefe 	bl	8007e4c <RTC_Bcd2ToByte>
 8007050:	4603      	mov	r3, r0
 8007052:	2b0c      	cmp	r3, #12
 8007054:	d904      	bls.n	8007060 <HAL_RTC_SetTime+0x178>
 8007056:	f44f 714c 	mov.w	r1, #816	; 0x330
 800705a:	4850      	ldr	r0, [pc, #320]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 800705c:	f7fa fe35 	bl	8001cca <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	78db      	ldrb	r3, [r3, #3]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d019      	beq.n	800709c <HAL_RTC_SetTime+0x1b4>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	78db      	ldrb	r3, [r3, #3]
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d015      	beq.n	800709c <HAL_RTC_SetTime+0x1b4>
 8007070:	f240 3131 	movw	r1, #817	; 0x331
 8007074:	4849      	ldr	r0, [pc, #292]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8007076:	f7fa fe28 	bl	8001cca <assert_failed>
 800707a:	e00f      	b.n	800709c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fee0 	bl	8007e4c <RTC_Bcd2ToByte>
 800708c:	4603      	mov	r3, r0
 800708e:	2b17      	cmp	r3, #23
 8007090:	d904      	bls.n	800709c <HAL_RTC_SetTime+0x1b4>
 8007092:	f240 3136 	movw	r1, #822	; 0x336
 8007096:	4841      	ldr	r0, [pc, #260]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 8007098:	f7fa fe17 	bl	8001cca <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fed3 	bl	8007e4c <RTC_Bcd2ToByte>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b3b      	cmp	r3, #59	; 0x3b
 80070aa:	d904      	bls.n	80070b6 <HAL_RTC_SetTime+0x1ce>
 80070ac:	f44f 714e 	mov.w	r1, #824	; 0x338
 80070b0:	483a      	ldr	r0, [pc, #232]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 80070b2:	f7fa fe0a 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	789b      	ldrb	r3, [r3, #2]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fec6 	bl	8007e4c <RTC_Bcd2ToByte>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b3b      	cmp	r3, #59	; 0x3b
 80070c4:	d904      	bls.n	80070d0 <HAL_RTC_SetTime+0x1e8>
 80070c6:	f240 3139 	movw	r1, #825	; 0x339
 80070ca:	4834      	ldr	r0, [pc, #208]	; (800719c <HAL_RTC_SetTime+0x2b4>)
 80070cc:	f7fa fdfd 	bl	8001cca <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070dc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	78db      	ldrb	r3, [r3, #3]
 80070e8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	22ca      	movs	r2, #202	; 0xca
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2253      	movs	r2, #83	; 0x53
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fe5a 	bl	8007db8 <RTC_EnterInitMode>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	22ff      	movs	r2, #255	; 0xff
 8007110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2204      	movs	r2, #4
 8007116:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e049      	b.n	80071b6 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800712c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007130:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007140:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6899      	ldr	r1, [r3, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007168:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d113      	bne.n	80071a0 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fdf5 	bl	8007d68 <HAL_RTC_WaitForSynchro>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	22ff      	movs	r2, #255	; 0xff
 800718a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2204      	movs	r2, #4
 8007190:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e00c      	b.n	80071b6 <HAL_RTC_SetTime+0x2ce>
 800719c:	0800c3f4 	.word	0x0800c3f4
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	22ff      	movs	r2, #255	; 0xff
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80071b4:	2300      	movs	r3, #0
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	bf00      	nop

080071c0 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <HAL_RTC_GetTime+0x26>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d004      	beq.n	80071e6 <HAL_RTC_GetTime+0x26>
 80071dc:	f44f 7164 	mov.w	r1, #912	; 0x390
 80071e0:	482c      	ldr	r0, [pc, #176]	; (8007294 <HAL_RTC_GetTime+0xd4>)
 80071e2:	f7fa fd72 	bl	8001cca <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007208:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800720c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007218:	b2da      	uxtb	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	b2da      	uxtb	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d11a      	bne.n	8007288 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fdf8 	bl	8007e4c <RTC_Bcd2ToByte>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fdef 	bl	8007e4c <RTC_Bcd2ToByte>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	789b      	ldrb	r3, [r3, #2]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fde6 	bl	8007e4c <RTC_Bcd2ToByte>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	0800c3f4 	.word	0x0800c3f4

08007298 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_RTC_SetDate+0x26>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d004      	beq.n	80072be <HAL_RTC_SetDate+0x26>
 80072b4:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80072b8:	488e      	ldr	r0, [pc, #568]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 80072ba:	f7fa fd06 	bl	8001cca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7f1b      	ldrb	r3, [r3, #28]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_RTC_SetDate+0x32>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e10f      	b.n	80074ea <HAL_RTC_SetDate+0x252>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2202      	movs	r2, #2
 80072d4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10e      	bne.n	80072fa <HAL_RTC_SetDate+0x62>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	f023 0310 	bic.w	r3, r3, #16
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	330a      	adds	r3, #10
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d01c      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d018      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d014      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d010      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b05      	cmp	r3, #5
 8007320:	d00c      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b06      	cmp	r3, #6
 8007328:	d008      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b07      	cmp	r3, #7
 8007330:	d004      	beq.n	800733c <HAL_RTC_SetDate+0xa4>
 8007332:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8007336:	486f      	ldr	r0, [pc, #444]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 8007338:	f7fa fcc7 	bl	8001cca <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d13f      	bne.n	80073c2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	78db      	ldrb	r3, [r3, #3]
 8007346:	2b63      	cmp	r3, #99	; 0x63
 8007348:	d904      	bls.n	8007354 <HAL_RTC_SetDate+0xbc>
 800734a:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 800734e:	4869      	ldr	r0, [pc, #420]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 8007350:	f7fa fcbb 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_RTC_SetDate+0xcc>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d904      	bls.n	800736e <HAL_RTC_SetDate+0xd6>
 8007364:	f240 31cd 	movw	r1, #973	; 0x3cd
 8007368:	4862      	ldr	r0, [pc, #392]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 800736a:	f7fa fcae 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_RTC_SetDate+0xe6>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	789b      	ldrb	r3, [r3, #2]
 800737a:	2b1f      	cmp	r3, #31
 800737c:	d904      	bls.n	8007388 <HAL_RTC_SetDate+0xf0>
 800737e:	f240 31ce 	movw	r1, #974	; 0x3ce
 8007382:	485c      	ldr	r0, [pc, #368]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 8007384:	f7fa fca1 	bl	8001cca <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	78db      	ldrb	r3, [r3, #3]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fd3f 	bl	8007e10 <RTC_ByteToBcd2>
 8007392:	4603      	mov	r3, r0
 8007394:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fd38 	bl	8007e10 <RTC_ByteToBcd2>
 80073a0:	4603      	mov	r3, r0
 80073a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80073a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	789b      	ldrb	r3, [r3, #2]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fd30 	bl	8007e10 <RTC_ByteToBcd2>
 80073b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80073b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	e045      	b.n	800744e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fd40 	bl	8007e4c <RTC_Bcd2ToByte>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b63      	cmp	r3, #99	; 0x63
 80073d0:	d904      	bls.n	80073dc <HAL_RTC_SetDate+0x144>
 80073d2:	f240 31d7 	movw	r1, #983	; 0x3d7
 80073d6:	4847      	ldr	r0, [pc, #284]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 80073d8:	f7fa fc77 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fd33 	bl	8007e4c <RTC_Bcd2ToByte>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <HAL_RTC_SetDate+0x164>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fd2b 	bl	8007e4c <RTC_Bcd2ToByte>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b0c      	cmp	r3, #12
 80073fa:	d904      	bls.n	8007406 <HAL_RTC_SetDate+0x16e>
 80073fc:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8007400:	483c      	ldr	r0, [pc, #240]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 8007402:	f7fa fc62 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	789b      	ldrb	r3, [r3, #2]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fd1e 	bl	8007e4c <RTC_Bcd2ToByte>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <HAL_RTC_SetDate+0x18e>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	789b      	ldrb	r3, [r3, #2]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fd16 	bl	8007e4c <RTC_Bcd2ToByte>
 8007420:	4603      	mov	r3, r0
 8007422:	2b1f      	cmp	r3, #31
 8007424:	d904      	bls.n	8007430 <HAL_RTC_SetDate+0x198>
 8007426:	f240 31d9 	movw	r1, #985	; 0x3d9
 800742a:	4832      	ldr	r0, [pc, #200]	; (80074f4 <HAL_RTC_SetDate+0x25c>)
 800742c:	f7fa fc4d 	bl	8001cca <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	78db      	ldrb	r3, [r3, #3]
 8007434:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800743c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007442:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	22ca      	movs	r2, #202	; 0xca
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2253      	movs	r2, #83	; 0x53
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fcaa 	bl	8007db8 <RTC_EnterInitMode>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	22ff      	movs	r2, #255	; 0xff
 8007470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2204      	movs	r2, #4
 8007476:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e033      	b.n	80074ea <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800748c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007490:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fc59 	bl	8007d68 <HAL_RTC_WaitForSynchro>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2204      	movs	r2, #4
 80074c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e00a      	b.n	80074ea <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd90      	pop	{r4, r7, pc}
 80074f2:	bf00      	nop
 80074f4:	0800c3f4 	.word	0x0800c3f4

080074f8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <HAL_RTC_GetDate+0x26>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d004      	beq.n	800751e <HAL_RTC_GetDate+0x26>
 8007514:	f240 4126 	movw	r1, #1062	; 0x426
 8007518:	4824      	ldr	r0, [pc, #144]	; (80075ac <HAL_RTC_GetDate+0xb4>)
 800751a:	f7fa fbd6 	bl	8001cca <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800752c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	0c1b      	lsrs	r3, r3, #16
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	b2da      	uxtb	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	0b5b      	lsrs	r3, r3, #13
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	b2da      	uxtb	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d11a      	bne.n	80075a2 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	78db      	ldrb	r3, [r3, #3]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fc6b 	bl	8007e4c <RTC_Bcd2ToByte>
 8007576:	4603      	mov	r3, r0
 8007578:	461a      	mov	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fc62 	bl	8007e4c <RTC_Bcd2ToByte>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	789b      	ldrb	r3, [r3, #2]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fc59 	bl	8007e4c <RTC_Bcd2ToByte>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	0800c3f4 	.word	0x0800c3f4

080075b0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_RTC_SetAlarm_IT+0x2e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d004      	beq.n	80075de <HAL_RTC_SetAlarm_IT+0x2e>
 80075d4:	f240 5153 	movw	r1, #1363	; 0x553
 80075d8:	48a1      	ldr	r0, [pc, #644]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075da:	f7fa fb76 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d009      	beq.n	80075fc <HAL_RTC_SetAlarm_IT+0x4c>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f0:	d004      	beq.n	80075fc <HAL_RTC_SetAlarm_IT+0x4c>
 80075f2:	f240 5154 	movw	r1, #1364	; 0x554
 80075f6:	489a      	ldr	r0, [pc, #616]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075f8:	f7fa fb67 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <HAL_RTC_SetAlarm_IT+0x62>
 8007608:	f240 5155 	movw	r1, #1365	; 0x555
 800760c:	4894      	ldr	r0, [pc, #592]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800760e:	f7fa fb5c 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RTC_SetAlarm_IT+0x7e>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d004      	beq.n	800762e <HAL_RTC_SetAlarm_IT+0x7e>
 8007624:	f240 5156 	movw	r1, #1366	; 0x556
 8007628:	488d      	ldr	r0, [pc, #564]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800762a:	f7fa fb4e 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007636:	d304      	bcc.n	8007642 <HAL_RTC_SetAlarm_IT+0x92>
 8007638:	f240 5157 	movw	r1, #1367	; 0x557
 800763c:	4888      	ldr	r0, [pc, #544]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800763e:	f7fa fb44 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04f      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007652:	d04a      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800765c:	d045      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007666:	d040      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007670:	d03b      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800767a:	d036      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007684:	d031      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800768e:	d02c      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007698:	d027      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80076a2:	d022      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80076ac:	d01d      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80076b6:	d018      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076c0:	d013      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80076ca:	d00e      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80076d4:	d009      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076de:	d004      	beq.n	80076ea <HAL_RTC_SetAlarm_IT+0x13a>
 80076e0:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 80076e4:	485e      	ldr	r0, [pc, #376]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80076e6:	f7fa faf0 	bl	8001cca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7f1b      	ldrb	r3, [r3, #28]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_RTC_SetAlarm_IT+0x146>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e242      	b.n	8007b7c <HAL_RTC_SetAlarm_IT+0x5cc>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2202      	movs	r2, #2
 8007700:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 80ad 	bne.w	8007864 <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RTC_SetAlarm_IT+0x178>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d904      	bls.n	8007732 <HAL_RTC_SetAlarm_IT+0x182>
 8007728:	f240 5163 	movw	r1, #1379	; 0x563
 800772c:	484c      	ldr	r0, [pc, #304]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800772e:	f7fa facc 	bl	8001cca <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d015      	beq.n	8007766 <HAL_RTC_SetAlarm_IT+0x1b6>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	78db      	ldrb	r3, [r3, #3]
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d011      	beq.n	8007766 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007742:	f240 5164 	movw	r1, #1380	; 0x564
 8007746:	4846      	ldr	r0, [pc, #280]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007748:	f7fa fabf 	bl	8001cca <assert_failed>
 800774c:	e00b      	b.n	8007766 <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2200      	movs	r2, #0
 8007752:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b17      	cmp	r3, #23
 800775a:	d904      	bls.n	8007766 <HAL_RTC_SetAlarm_IT+0x1b6>
 800775c:	f240 5169 	movw	r1, #1385	; 0x569
 8007760:	483f      	ldr	r0, [pc, #252]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007762:	f7fa fab2 	bl	8001cca <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b3b      	cmp	r3, #59	; 0x3b
 800776c:	d904      	bls.n	8007778 <HAL_RTC_SetAlarm_IT+0x1c8>
 800776e:	f240 516b 	movw	r1, #1387	; 0x56b
 8007772:	483b      	ldr	r0, [pc, #236]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007774:	f7fa faa9 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	789b      	ldrb	r3, [r3, #2]
 800777c:	2b3b      	cmp	r3, #59	; 0x3b
 800777e:	d904      	bls.n	800778a <HAL_RTC_SetAlarm_IT+0x1da>
 8007780:	f240 516c 	movw	r1, #1388	; 0x56c
 8007784:	4836      	ldr	r0, [pc, #216]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007786:	f7fa faa0 	bl	8001cca <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10f      	bne.n	80077b2 <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <HAL_RTC_SetAlarm_IT+0x1f6>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a2:	2b1f      	cmp	r3, #31
 80077a4:	d92d      	bls.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077a6:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 80077aa:	482d      	ldr	r0, [pc, #180]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80077ac:	f7fa fa8d 	bl	8001cca <assert_failed>
 80077b0:	e027      	b.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d022      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d01d      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d018      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d013      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d00e      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ea:	2b06      	cmp	r3, #6
 80077ec:	d009      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077f4:	2b07      	cmp	r3, #7
 80077f6:	d004      	beq.n	8007802 <HAL_RTC_SetAlarm_IT+0x252>
 80077f8:	f240 5174 	movw	r1, #1396	; 0x574
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80077fe:	f7fa fa64 	bl	8001cca <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fb02 	bl	8007e10 <RTC_ByteToBcd2>
 800780c:	4603      	mov	r3, r0
 800780e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fafb 	bl	8007e10 <RTC_ByteToBcd2>
 800781a:	4603      	mov	r3, r0
 800781c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800781e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	789b      	ldrb	r3, [r3, #2]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 faf3 	bl	8007e10 <RTC_ByteToBcd2>
 800782a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800782c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007836:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fae5 	bl	8007e10 <RTC_ByteToBcd2>
 8007846:	4603      	mov	r3, r0
 8007848:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800784a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007852:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007858:	4313      	orrs	r3, r2
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	e0d0      	b.n	8007a00 <HAL_RTC_SetAlarm_IT+0x450>
 800785e:	bf00      	nop
 8007860:	0800c3f4 	.word	0x0800c3f4
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d022      	beq.n	80078b8 <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fae8 	bl	8007e4c <RTC_Bcd2ToByte>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_RTC_SetAlarm_IT+0x2e2>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fae0 	bl	8007e4c <RTC_Bcd2ToByte>
 800788c:	4603      	mov	r3, r0
 800788e:	2b0c      	cmp	r3, #12
 8007890:	d904      	bls.n	800789c <HAL_RTC_SetAlarm_IT+0x2ec>
 8007892:	f240 5182 	movw	r1, #1410	; 0x582
 8007896:	489d      	ldr	r0, [pc, #628]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 8007898:	f7fa fa17 	bl	8001cca <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d019      	beq.n	80078d8 <HAL_RTC_SetAlarm_IT+0x328>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d015      	beq.n	80078d8 <HAL_RTC_SetAlarm_IT+0x328>
 80078ac:	f240 5183 	movw	r1, #1411	; 0x583
 80078b0:	4896      	ldr	r0, [pc, #600]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 80078b2:	f7fa fa0a 	bl	8001cca <assert_failed>
 80078b6:	e00f      	b.n	80078d8 <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fac2 	bl	8007e4c <RTC_Bcd2ToByte>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b17      	cmp	r3, #23
 80078cc:	d904      	bls.n	80078d8 <HAL_RTC_SetAlarm_IT+0x328>
 80078ce:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 80078d2:	488e      	ldr	r0, [pc, #568]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 80078d4:	f7fa f9f9 	bl	8001cca <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fab5 	bl	8007e4c <RTC_Bcd2ToByte>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b3b      	cmp	r3, #59	; 0x3b
 80078e6:	d904      	bls.n	80078f2 <HAL_RTC_SetAlarm_IT+0x342>
 80078e8:	f240 518b 	movw	r1, #1419	; 0x58b
 80078ec:	4887      	ldr	r0, [pc, #540]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 80078ee:	f7fa f9ec 	bl	8001cca <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	789b      	ldrb	r3, [r3, #2]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 faa8 	bl	8007e4c <RTC_Bcd2ToByte>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b3b      	cmp	r3, #59	; 0x3b
 8007900:	d904      	bls.n	800790c <HAL_RTC_SetAlarm_IT+0x35c>
 8007902:	f240 518c 	movw	r1, #1420	; 0x58c
 8007906:	4881      	ldr	r0, [pc, #516]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 8007908:	f7fa f9df 	bl	8001cca <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d117      	bne.n	8007944 <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fa96 	bl	8007e4c <RTC_Bcd2ToByte>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <HAL_RTC_SetAlarm_IT+0x388>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fa8d 	bl	8007e4c <RTC_Bcd2ToByte>
 8007932:	4603      	mov	r3, r0
 8007934:	2b1f      	cmp	r3, #31
 8007936:	d949      	bls.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 8007938:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800793c:	4873      	ldr	r0, [pc, #460]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 800793e:	f7fa f9c4 	bl	8001cca <assert_failed>
 8007942:	e043      	b.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fa7e 	bl	8007e4c <RTC_Bcd2ToByte>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d03a      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fa75 	bl	8007e4c <RTC_Bcd2ToByte>
 8007962:	4603      	mov	r3, r0
 8007964:	2b02      	cmp	r3, #2
 8007966:	d031      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fa6c 	bl	8007e4c <RTC_Bcd2ToByte>
 8007974:	4603      	mov	r3, r0
 8007976:	2b03      	cmp	r3, #3
 8007978:	d028      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fa63 	bl	8007e4c <RTC_Bcd2ToByte>
 8007986:	4603      	mov	r3, r0
 8007988:	2b04      	cmp	r3, #4
 800798a:	d01f      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fa5a 	bl	8007e4c <RTC_Bcd2ToByte>
 8007998:	4603      	mov	r3, r0
 800799a:	2b05      	cmp	r3, #5
 800799c:	d016      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fa51 	bl	8007e4c <RTC_Bcd2ToByte>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	d00d      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fa48 	bl	8007e4c <RTC_Bcd2ToByte>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b07      	cmp	r3, #7
 80079c0:	d004      	beq.n	80079cc <HAL_RTC_SetAlarm_IT+0x41c>
 80079c2:	f240 5194 	movw	r1, #1428	; 0x594
 80079c6:	4851      	ldr	r0, [pc, #324]	; (8007b0c <HAL_RTC_SetAlarm_IT+0x55c>)
 80079c8:	f7fa f97f 	bl	8001cca <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079d8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	78db      	ldrb	r3, [r3, #3]
 80079e4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079fc:	4313      	orrs	r3, r2
 80079fe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	22ca      	movs	r2, #202	; 0xca
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2253      	movs	r2, #83	; 0x53
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a24:	d148      	bne.n	8007ab8 <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a34:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007a46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a48:	f7fa fd3e 	bl	80024c8 <HAL_GetTick>
 8007a4c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a4e:	e013      	b.n	8007a78 <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a50:	f7fa fd3a 	bl	80024c8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5e:	d90b      	bls.n	8007a78 <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e081      	b.n	8007b7c <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0e4      	beq.n	8007a50 <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab4:	609a      	str	r2, [r3, #8]
 8007ab6:	e04a      	b.n	8007b4e <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ac6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007ad8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ada:	f7fa fcf5 	bl	80024c8 <HAL_GetTick>
 8007ade:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ae0:	e016      	b.n	8007b10 <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ae2:	f7fa fcf1 	bl	80024c8 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af0:	d90e      	bls.n	8007b10 <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	22ff      	movs	r2, #255	; 0xff
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2203      	movs	r2, #3
 8007afe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e038      	b.n	8007b7c <HAL_RTC_SetAlarm_IT+0x5cc>
 8007b0a:	bf00      	nop
 8007b0c:	0800c3f4 	.word	0x0800c3f4
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0e1      	beq.n	8007ae2 <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b64:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3724      	adds	r7, #36	; 0x24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd90      	pop	{r4, r7, pc}
 8007b84:	40010400 	.word	0x40010400

08007b88 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_RTC_GetAlarm+0x2c>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d004      	beq.n	8007bb4 <HAL_RTC_GetAlarm+0x2c>
 8007baa:	f240 6166 	movw	r1, #1638	; 0x666
 8007bae:	484a      	ldr	r0, [pc, #296]	; (8007cd8 <HAL_RTC_GetAlarm+0x150>)
 8007bb0:	f7fa f88b 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_ALARM(Alarm));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d008      	beq.n	8007bce <HAL_RTC_GetAlarm+0x46>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc2:	d004      	beq.n	8007bce <HAL_RTC_GetAlarm+0x46>
 8007bc4:	f240 6167 	movw	r1, #1639	; 0x667
 8007bc8:	4843      	ldr	r0, [pc, #268]	; (8007cd8 <HAL_RTC_GetAlarm+0x150>)
 8007bca:	f7fa f87e 	bl	8001cca <assert_failed>

  if (Alarm == RTC_ALARM_A)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd4:	d10e      	bne.n	8007bf4 <HAL_RTC_GetAlarm+0x6c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e00d      	b.n	8007c10 <HAL_RTC_GetAlarm+0x88>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c0e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	0e1b      	lsrs	r3, r3, #24
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d125      	bne.n	8007ccc <HAL_RTC_GetAlarm+0x144>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f8e1 	bl	8007e4c <RTC_Bcd2ToByte>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f8d8 	bl	8007e4c <RTC_Bcd2ToByte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	789b      	ldrb	r3, [r3, #2]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f8cf 	bl	8007e4c <RTC_Bcd2ToByte>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 f8c5 	bl	8007e4c <RTC_Bcd2ToByte>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0800c3f4 	.word	0x0800c3f4

08007cdc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d012      	beq.n	8007d18 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7f8 fad5 	bl	80002b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007d16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d012      	beq.n	8007d4c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa3b 	bl	80081b0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007d4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007d4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d52:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	775a      	strb	r2, [r3, #29]
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40010400 	.word	0x40010400

08007d68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d84:	f7fa fba0 	bl	80024c8 <HAL_GetTick>
 8007d88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d8a:	e009      	b.n	8007da0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d8c:	f7fa fb9c 	bl	80024c8 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d9a:	d901      	bls.n	8007da0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e007      	b.n	8007db0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0ee      	beq.n	8007d8c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d119      	bne.n	8007e06 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ddc:	f7fa fb74 	bl	80024c8 <HAL_GetTick>
 8007de0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007de2:	e009      	b.n	8007df8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007de4:	f7fa fb70 	bl	80024c8 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007df2:	d901      	bls.n	8007df8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e007      	b.n	8007e08 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0ee      	beq.n	8007de4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007e1e:	e005      	b.n	8007e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	3b0a      	subs	r3, #10
 8007e2a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d8f6      	bhi.n	8007e20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	b2db      	uxtb	r3, r3
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	4413      	add	r3, r2
 8007e7a:	b2db      	uxtb	r3, r3
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d010      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d00d      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d00a      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d007      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d004      	beq.n	8007ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ebc:	f44f 7158 	mov.w	r1, #864	; 0x360
 8007ec0:	485a      	ldr	r0, [pc, #360]	; (800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007ec2:	f7f9 ff02 	bl	8001cca <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d304      	bcc.n	8007ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8007ece:	f240 3161 	movw	r1, #865	; 0x361
 8007ed2:	4856      	ldr	r0, [pc, #344]	; (800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007ed4:	f7f9 fef9 	bl	8001cca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7f1b      	ldrb	r3, [r3, #28]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e09e      	b.n	8008022 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2202      	movs	r2, #2
 8007eee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	22ca      	movs	r2, #202	; 0xca
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2253      	movs	r2, #83	; 0x53
 8007efe:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01e      	beq.n	8007f4c <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8007f0e:	f7fa fadb 	bl	80024c8 <HAL_GetTick>
 8007f12:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f14:	e013      	b.n	8007f3e <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f16:	f7fa fad7 	bl	80024c8 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f24:	d90b      	bls.n	8007f3e <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2203      	movs	r2, #3
 8007f32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e071      	b.n	8008022 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e4      	bne.n	8007f16 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007f6c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f6e:	f7fa faab 	bl	80024c8 <HAL_GetTick>
 8007f72:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f74:	e013      	b.n	8007f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f76:	f7fa faa7 	bl	80024c8 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f84:	d90b      	bls.n	8007f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	22ff      	movs	r2, #255	; 0xff
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2203      	movs	r2, #3
 8007f92:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e041      	b.n	8008022 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0e4      	beq.n	8007f76 <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0207 	bic.w	r2, r2, #7
 8007fc2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6899      	ldr	r1, [r3, #8]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007fd4:	4b16      	ldr	r3, [pc, #88]	; (8008030 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a15      	ldr	r2, [pc, #84]	; (8008030 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fde:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fea:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800800a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	22ff      	movs	r2, #255	; 0xff
 8008012:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	0800c42c 	.word	0x0800c42c
 8008030:	40010400 	.word	0x40010400

08008034 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7f1b      	ldrb	r3, [r3, #28]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008048:	2302      	movs	r3, #2
 800804a:	e047      	b.n	80080dc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	22ca      	movs	r2, #202	; 0xca
 800805e:	625a      	str	r2, [r3, #36]	; 0x24
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2253      	movs	r2, #83	; 0x53
 8008066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008076:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008086:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008088:	f7fa fa1e 	bl	80024c8 <HAL_GetTick>
 800808c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800808e:	e013      	b.n	80080b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008090:	f7fa fa1a 	bl	80024c8 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800809e:	d90b      	bls.n	80080b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	22ff      	movs	r2, #255	; 0xff
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2203      	movs	r2, #3
 80080ac:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e011      	b.n	80080dc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0e4      	beq.n	8008090 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	22ff      	movs	r2, #255	; 0xff
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00b      	beq.n	8008112 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7f9 f98a 	bl	8001414 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008110:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8008114:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008118:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	775a      	strb	r2, [r3, #29]
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40010400 	.word	0x40010400

0800812c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b0f      	cmp	r3, #15
 8008140:	d904      	bls.n	800814c <HAL_RTCEx_BKUPWrite+0x20>
 8008142:	f240 4171 	movw	r1, #1137	; 0x471
 8008146:	4809      	ldr	r0, [pc, #36]	; (800816c <HAL_RTCEx_BKUPWrite+0x40>)
 8008148:	f7f9 fdbf 	bl	8001cca <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3350      	adds	r3, #80	; 0x50
 8008152:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4413      	add	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	0800c42c 	.word	0x0800c42c

08008170 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b0f      	cmp	r3, #15
 8008182:	d904      	bls.n	800818e <HAL_RTCEx_BKUPRead+0x1e>
 8008184:	f240 4187 	movw	r1, #1159	; 0x487
 8008188:	4808      	ldr	r0, [pc, #32]	; (80081ac <HAL_RTCEx_BKUPRead+0x3c>)
 800818a:	f7f9 fd9e 	bl	8001cca <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3350      	adds	r3, #80	; 0x50
 8008194:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	0800c42c 	.word	0x0800c42c

080081b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e0be      	b.n	8008354 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a60      	ldr	r2, [pc, #384]	; (800835c <HAL_TIM_Base_Init+0x198>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d036      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e8:	d031      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a5c      	ldr	r2, [pc, #368]	; (8008360 <HAL_TIM_Base_Init+0x19c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d02c      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a5a      	ldr	r2, [pc, #360]	; (8008364 <HAL_TIM_Base_Init+0x1a0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d027      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a59      	ldr	r2, [pc, #356]	; (8008368 <HAL_TIM_Base_Init+0x1a4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d022      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a57      	ldr	r2, [pc, #348]	; (800836c <HAL_TIM_Base_Init+0x1a8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d01d      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a56      	ldr	r2, [pc, #344]	; (8008370 <HAL_TIM_Base_Init+0x1ac>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d018      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a54      	ldr	r2, [pc, #336]	; (8008374 <HAL_TIM_Base_Init+0x1b0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d013      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a53      	ldr	r2, [pc, #332]	; (8008378 <HAL_TIM_Base_Init+0x1b4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00e      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a51      	ldr	r2, [pc, #324]	; (800837c <HAL_TIM_Base_Init+0x1b8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d009      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a50      	ldr	r2, [pc, #320]	; (8008380 <HAL_TIM_Base_Init+0x1bc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d004      	beq.n	800824e <HAL_TIM_Base_Init+0x8a>
 8008244:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8008248:	484e      	ldr	r0, [pc, #312]	; (8008384 <HAL_TIM_Base_Init+0x1c0>)
 800824a:	f7f9 fd3e 	bl	8001cca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d014      	beq.n	8008280 <HAL_TIM_Base_Init+0xbc>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b10      	cmp	r3, #16
 800825c:	d010      	beq.n	8008280 <HAL_TIM_Base_Init+0xbc>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b20      	cmp	r3, #32
 8008264:	d00c      	beq.n	8008280 <HAL_TIM_Base_Init+0xbc>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b40      	cmp	r3, #64	; 0x40
 800826c:	d008      	beq.n	8008280 <HAL_TIM_Base_Init+0xbc>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b60      	cmp	r3, #96	; 0x60
 8008274:	d004      	beq.n	8008280 <HAL_TIM_Base_Init+0xbc>
 8008276:	f240 111b 	movw	r1, #283	; 0x11b
 800827a:	4842      	ldr	r0, [pc, #264]	; (8008384 <HAL_TIM_Base_Init+0x1c0>)
 800827c:	f7f9 fd25 	bl	8001cca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00e      	beq.n	80082a6 <HAL_TIM_Base_Init+0xe2>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008290:	d009      	beq.n	80082a6 <HAL_TIM_Base_Init+0xe2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829a:	d004      	beq.n	80082a6 <HAL_TIM_Base_Init+0xe2>
 800829c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80082a0:	4838      	ldr	r0, [pc, #224]	; (8008384 <HAL_TIM_Base_Init+0x1c0>)
 80082a2:	f7f9 fd12 	bl	8001cca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <HAL_TIM_Base_Init+0xfc>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d004      	beq.n	80082c0 <HAL_TIM_Base_Init+0xfc>
 80082b6:	f240 111d 	movw	r1, #285	; 0x11d
 80082ba:	4832      	ldr	r0, [pc, #200]	; (8008384 <HAL_TIM_Base_Init+0x1c0>)
 80082bc:	f7f9 fd05 	bl	8001cca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7f9 ffb7 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f000 fa49 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40001000 	.word	0x40001000
 800836c:	40001400 	.word	0x40001400
 8008370:	40013400 	.word	0x40013400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800
 8008380:	40015000 	.word	0x40015000
 8008384:	0800c468 	.word	0x0800c468

08008388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a46      	ldr	r2, [pc, #280]	; (80084b0 <HAL_TIM_Base_Start+0x128>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d036      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a2:	d031      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a42      	ldr	r2, [pc, #264]	; (80084b4 <HAL_TIM_Base_Start+0x12c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d02c      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a41      	ldr	r2, [pc, #260]	; (80084b8 <HAL_TIM_Base_Start+0x130>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d027      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a3f      	ldr	r2, [pc, #252]	; (80084bc <HAL_TIM_Base_Start+0x134>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d022      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a3e      	ldr	r2, [pc, #248]	; (80084c0 <HAL_TIM_Base_Start+0x138>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d01d      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a3c      	ldr	r2, [pc, #240]	; (80084c4 <HAL_TIM_Base_Start+0x13c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d018      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a3b      	ldr	r2, [pc, #236]	; (80084c8 <HAL_TIM_Base_Start+0x140>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d013      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a39      	ldr	r2, [pc, #228]	; (80084cc <HAL_TIM_Base_Start+0x144>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00e      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a38      	ldr	r2, [pc, #224]	; (80084d0 <HAL_TIM_Base_Start+0x148>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d009      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a36      	ldr	r2, [pc, #216]	; (80084d4 <HAL_TIM_Base_Start+0x14c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <HAL_TIM_Base_Start+0x80>
 80083fe:	f240 119b 	movw	r1, #411	; 0x19b
 8008402:	4835      	ldr	r0, [pc, #212]	; (80084d8 <HAL_TIM_Base_Start+0x150>)
 8008404:	f7f9 fc61 	bl	8001cca <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e047      	b.n	80084a8 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a22      	ldr	r2, [pc, #136]	; (80084b0 <HAL_TIM_Base_Start+0x128>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01d      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008432:	d018      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1e      	ldr	r2, [pc, #120]	; (80084b4 <HAL_TIM_Base_Start+0x12c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <HAL_TIM_Base_Start+0x130>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <HAL_TIM_Base_Start+0x13c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <HAL_TIM_Base_Start+0x140>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_TIM_Base_Start+0xde>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <HAL_TIM_Base_Start+0x14c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d115      	bne.n	8008492 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	4b1b      	ldr	r3, [pc, #108]	; (80084dc <HAL_TIM_Base_Start+0x154>)
 800846e:	4013      	ands	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b06      	cmp	r3, #6
 8008476:	d015      	beq.n	80084a4 <HAL_TIM_Base_Start+0x11c>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847e:	d011      	beq.n	80084a4 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008490:	e008      	b.n	80084a4 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0201 	orr.w	r2, r2, #1
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e000      	b.n	80084a6 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40000800 	.word	0x40000800
 80084bc:	40001000 	.word	0x40001000
 80084c0:	40001400 	.word	0x40001400
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800
 80084d4:	40015000 	.word	0x40015000
 80084d8:	0800c468 	.word	0x0800c468
 80084dc:	00010007 	.word	0x00010007

080084e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d122      	bne.n	800853c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b02      	cmp	r3, #2
 8008502:	d11b      	bne.n	800853c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f06f 0202 	mvn.w	r2, #2
 800850c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f90f 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 8008528:	e005      	b.n	8008536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f901 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f912 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b04      	cmp	r3, #4
 8008548:	d122      	bne.n	8008590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b04      	cmp	r3, #4
 8008556:	d11b      	bne.n	8008590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0204 	mvn.w	r2, #4
 8008560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2202      	movs	r2, #2
 8008566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8e5 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 800857c:	e005      	b.n	800858a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8d7 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8e8 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b08      	cmp	r3, #8
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0208 	mvn.w	r2, #8
 80085b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2204      	movs	r2, #4
 80085ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f8bb 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8ad 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8be 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2208      	movs	r2, #8
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f891 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f883 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f894 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10e      	bne.n	8008664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d107      	bne.n	8008664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0201 	mvn.w	r2, #1
 800865c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f85d 	bl	800871e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d10e      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b80      	cmp	r3, #128	; 0x80
 800867e:	d107      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa70 	bl	8008b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869e:	d10e      	bne.n	80086be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d107      	bne.n	80086be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa63 	bl	8008b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d10e      	bne.n	80086ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d107      	bne.n	80086ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f842 	bl	800876e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d10e      	bne.n	8008716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b20      	cmp	r3, #32
 8008704:	d107      	bne.n	8008716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f06f 0220 	mvn.w	r2, #32
 800870e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa23 	bl	8008b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a42      	ldr	r2, [pc, #264]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3f      	ldr	r2, [pc, #252]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3e      	ldr	r2, [pc, #248]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3d      	ldr	r2, [pc, #244]	; (80088ac <TIM_Base_SetConfig+0x128>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a31      	ldr	r2, [pc, #196]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d01f      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d01b      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2e      	ldr	r2, [pc, #184]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d017      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2d      	ldr	r2, [pc, #180]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <TIM_Base_SetConfig+0x128>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00f      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2c      	ldr	r2, [pc, #176]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00b      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2b      	ldr	r2, [pc, #172]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d007      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a2a      	ldr	r2, [pc, #168]	; (80088bc <TIM_Base_SetConfig+0x138>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_Base_SetConfig+0x9a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a25      	ldr	r2, [pc, #148]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d108      	bne.n	8008830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a12      	ldr	r2, [pc, #72]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d013      	beq.n	8008884 <TIM_Base_SetConfig+0x100>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a13      	ldr	r2, [pc, #76]	; (80088ac <TIM_Base_SetConfig+0x128>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00f      	beq.n	8008884 <TIM_Base_SetConfig+0x100>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00b      	beq.n	8008884 <TIM_Base_SetConfig+0x100>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <TIM_Base_SetConfig+0x100>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a11      	ldr	r2, [pc, #68]	; (80088bc <TIM_Base_SetConfig+0x138>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_Base_SetConfig+0x100>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d103      	bne.n	800888c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	615a      	str	r2, [r3, #20]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40012c00 	.word	0x40012c00
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40013400 	.word	0x40013400
 80088b0:	40015000 	.word	0x40015000
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400
 80088bc:	40014800 	.word	0x40014800

080088c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a9a      	ldr	r2, [pc, #616]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d02c      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088dc:	d027      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a96      	ldr	r2, [pc, #600]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a94      	ldr	r2, [pc, #592]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01d      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a93      	ldr	r2, [pc, #588]	; (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a91      	ldr	r2, [pc, #580]	; (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a90      	ldr	r2, [pc, #576]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a8e      	ldr	r2, [pc, #568]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a8d      	ldr	r2, [pc, #564]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008924:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8008928:	488b      	ldr	r0, [pc, #556]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800892a:	f7f9 f9ce 	bl	8001cca <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b10      	cmp	r3, #16
 800893c:	d01c      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b20      	cmp	r3, #32
 8008944:	d018      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b30      	cmp	r3, #48	; 0x30
 800894c:	d014      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	d010      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b50      	cmp	r3, #80	; 0x50
 800895c:	d00c      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b60      	cmp	r3, #96	; 0x60
 8008964:	d008      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b70      	cmp	r3, #112	; 0x70
 800896c:	d004      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800896e:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8008972:	4879      	ldr	r0, [pc, #484]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008974:	f7f9 f9a9 	bl	8001cca <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b80      	cmp	r3, #128	; 0x80
 800897e:	d008      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008988:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800898c:	4872      	ldr	r0, [pc, #456]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800898e:	f7f9 f99c 	bl	8001cca <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800899c:	2302      	movs	r3, #2
 800899e:	e0c6      	b.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a5c      	ldr	r2, [pc, #368]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a5f      	ldr	r2, [pc, #380]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a5e      	ldr	r2, [pc, #376]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d161      	bne.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d054      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ee:	d04f      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089f8:	d04a      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a02:	d045      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a0c:	d040      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008a16:	d03b      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a20:	d036      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2a:	d031      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8008a34:	d02c      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a3e:	d027      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8008a48:	d022      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008a52:	d01d      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8008a5c:	d018      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a66:	d013      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8008a70:	d00e      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8008a7a:	d009      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8008a84:	d004      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008a86:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008a8a:	4833      	ldr	r0, [pc, #204]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008a8c:	f7f9 f91d 	bl	8001cca <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1d      	ldr	r2, [pc, #116]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d01d      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ace:	d018      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d013      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a18      	ldr	r2, [pc, #96]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00e      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d009      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d004      	beq.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10c      	bne.n	8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40000400 	.word	0x40000400
 8008b40:	40000800 	.word	0x40000800
 8008b44:	40001000 	.word	0x40001000
 8008b48:	40001400 	.word	0x40001400
 8008b4c:	40013400 	.word	0x40013400
 8008b50:	40014000 	.word	0x40014000
 8008b54:	40015000 	.word	0x40015000
 8008b58:	0800c4a0 	.word	0x0800c4a0

08008b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e077      	b.n	8008c9a <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d014      	beq.n	8008bdc <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a3b      	ldr	r2, [pc, #236]	; (8008ca4 <HAL_UART_Init+0x10c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d02d      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a39      	ldr	r2, [pc, #228]	; (8008ca8 <HAL_UART_Init+0x110>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d028      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a38      	ldr	r2, [pc, #224]	; (8008cac <HAL_UART_Init+0x114>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d023      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008bd0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008bd4:	4836      	ldr	r0, [pc, #216]	; (8008cb0 <HAL_UART_Init+0x118>)
 8008bd6:	f7f9 f878 	bl	8001cca <assert_failed>
 8008bda:	e01d      	b.n	8008c18 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a30      	ldr	r2, [pc, #192]	; (8008ca4 <HAL_UART_Init+0x10c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d018      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a2f      	ldr	r2, [pc, #188]	; (8008ca8 <HAL_UART_Init+0x110>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d013      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2d      	ldr	r2, [pc, #180]	; (8008cac <HAL_UART_Init+0x114>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00e      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a2d      	ldr	r2, [pc, #180]	; (8008cb4 <HAL_UART_Init+0x11c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d009      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a2b      	ldr	r2, [pc, #172]	; (8008cb8 <HAL_UART_Init+0x120>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <HAL_UART_Init+0x80>
 8008c0e:	f240 1131 	movw	r1, #305	; 0x131
 8008c12:	4827      	ldr	r0, [pc, #156]	; (8008cb0 <HAL_UART_Init+0x118>)
 8008c14:	f7f9 f859 	bl	8001cca <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7f9 fb7f 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2224      	movs	r2, #36	; 0x24
 8008c32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0201 	bic.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fbe9 	bl	800941c <UART_SetConfig>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e022      	b.n	8008c9a <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fe41 	bl	80098e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 ff74 	bl	8009b80 <UART_CheckIdleState>
 8008c98:	4603      	mov	r3, r0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40013800 	.word	0x40013800
 8008ca8:	40004400 	.word	0x40004400
 8008cac:	40004800 	.word	0x40004800
 8008cb0:	0800c4dc 	.word	0x0800c4dc
 8008cb4:	40004c00 	.word	0x40004c00
 8008cb8:	40005000 	.word	0x40005000

08008cbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b08b      	sub	sp, #44	; 0x2c
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d156      	bne.n	8008d80 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_UART_Transmit_IT+0x22>
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e04f      	b.n	8008d82 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Transmit_IT+0x34>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e048      	b.n	8008d82 <HAL_UART_Transmit_IT+0xc6>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2221      	movs	r2, #33	; 0x21
 8008d20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2a:	d107      	bne.n	8008d3c <HAL_UART_Transmit_IT+0x80>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d103      	bne.n	8008d3c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <HAL_UART_Transmit_IT+0xd4>)
 8008d38:	669a      	str	r2, [r3, #104]	; 0x68
 8008d3a:	e002      	b.n	8008d42 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <HAL_UART_Transmit_IT+0xd8>)
 8008d40:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	613b      	str	r3, [r7, #16]
   return(result);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	69f9      	ldr	r1, [r7, #28]
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e6      	bne.n	8008d4a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e000      	b.n	8008d82 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008d80:	2302      	movs	r3, #2
  }
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	372c      	adds	r7, #44	; 0x2c
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	0800a09f 	.word	0x0800a09f
 8008d94:	08009fe7 	.word	0x08009fe7

08008d98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d13d      	bne.n	8008e2a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_UART_Receive_IT+0x22>
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e036      	b.n	8008e2c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_UART_Receive_IT+0x34>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e02f      	b.n	8008e2c <HAL_UART_Receive_IT+0x94>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d018      	beq.n	8008e1a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	613b      	str	r3, [r7, #16]
   return(result);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	69f9      	ldr	r1, [r7, #28]
 8008e0c:	6a3a      	ldr	r2, [r7, #32]
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e6      	bne.n	8008de8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 ffbb 	bl	8009d9c <UART_Start_Receive_IT>
 8008e26:	4603      	mov	r3, r0
 8008e28:	e000      	b.n	8008e2c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e2a:	2302      	movs	r3, #2
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3728      	adds	r7, #40	; 0x28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b0ba      	sub	sp, #232	; 0xe8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e62:	4013      	ands	r3, r2
 8008e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d115      	bne.n	8008e9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00f      	beq.n	8008e9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e80:	f003 0320 	and.w	r3, r3, #32
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d009      	beq.n	8008e9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 82a3 	beq.w	80093d8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
      }
      return;
 8008e9a:	e29d      	b.n	80093d8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8117 	beq.w	80090d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008eb6:	4b85      	ldr	r3, [pc, #532]	; (80090cc <HAL_UART_IRQHandler+0x298>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 810a 	beq.w	80090d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d011      	beq.n	8008ef0 <HAL_UART_IRQHandler+0xbc>
 8008ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2201      	movs	r2, #1
 8008ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ee6:	f043 0201 	orr.w	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d011      	beq.n	8008f20 <HAL_UART_IRQHandler+0xec>
 8008efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f16:	f043 0204 	orr.w	r2, r3, #4
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f24:	f003 0304 	and.w	r3, r3, #4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d011      	beq.n	8008f50 <HAL_UART_IRQHandler+0x11c>
 8008f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f46:	f043 0202 	orr.w	r2, r3, #2
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d017      	beq.n	8008f8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f82:	f043 0208 	orr.w	r2, r3, #8
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d012      	beq.n	8008fbe <HAL_UART_IRQHandler+0x18a>
 8008f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb4:	f043 0220 	orr.w	r2, r3, #32
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8209 	beq.w	80093dc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009006:	2b40      	cmp	r3, #64	; 0x40
 8009008:	d005      	beq.n	8009016 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800900a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800900e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009012:	2b00      	cmp	r3, #0
 8009014:	d04f      	beq.n	80090b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 ff6c 	bl	8009ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	d141      	bne.n	80090ae <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3308      	adds	r3, #8
 8009030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800905a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800906e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1d9      	bne.n	800902a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	2b00      	cmp	r3, #0
 800907c:	d013      	beq.n	80090a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	4a13      	ldr	r2, [pc, #76]	; (80090d0 <HAL_UART_IRQHandler+0x29c>)
 8009084:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	4618      	mov	r0, r3
 800908c:	f7f9 fbc5 	bl	800281a <HAL_DMA_Abort_IT>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d017      	beq.n	80090c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	e00f      	b.n	80090c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f9a2 	bl	80093f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ac:	e00b      	b.n	80090c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f99e 	bl	80093f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b4:	e007      	b.n	80090c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f99a 	bl	80093f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80090c4:	e18a      	b.n	80093dc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c6:	bf00      	nop
    return;
 80090c8:	e188      	b.n	80093dc <HAL_UART_IRQHandler+0x5a8>
 80090ca:	bf00      	nop
 80090cc:	04000120 	.word	0x04000120
 80090d0:	08009fbb 	.word	0x08009fbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f040 8143 	bne.w	8009364 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 813c 	beq.w	8009364 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f0:	f003 0310 	and.w	r3, r3, #16
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8135 	beq.w	8009364 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2210      	movs	r2, #16
 8009100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	f040 80b1 	bne.w	8009274 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800911e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 815c 	beq.w	80093e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800912e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009132:	429a      	cmp	r2, r3
 8009134:	f080 8154 	bcs.w	80093e0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800913e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b20      	cmp	r3, #32
 800914a:	f000 8085 	beq.w	8009258 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800916a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800917c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009184:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1da      	bne.n	800914e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091aa:	f023 0301 	bic.w	r3, r3, #1
 80091ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e1      	bne.n	8009198 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e3      	bne.n	80091d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009228:	f023 0310 	bic.w	r3, r3, #16
 800922c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800923a:	65bb      	str	r3, [r7, #88]	; 0x58
 800923c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e4      	bne.n	8009218 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	4618      	mov	r0, r3
 8009254:	f7f9 faa8 	bl	80027a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009264:	b29b      	uxth	r3, r3
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	b29b      	uxth	r3, r3
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8c9 	bl	8009404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009272:	e0b5      	b.n	80093e0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009280:	b29b      	uxth	r3, r3
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800928e:	b29b      	uxth	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80a7 	beq.w	80093e4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80a2 	beq.w	80093e4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44
 80092c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e4      	bne.n	80092a0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	623b      	str	r3, [r7, #32]
   return(result);
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80092fa:	633a      	str	r2, [r7, #48]	; 0x30
 80092fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e3      	bne.n	80092d6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	60fb      	str	r3, [r7, #12]
   return(result);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	69b9      	ldr	r1, [r7, #24]
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	617b      	str	r3, [r7, #20]
   return(result);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e4      	bne.n	8009320 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f851 	bl	8009404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009362:	e03f      	b.n	80093e4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <HAL_UART_IRQHandler+0x55a>
 8009370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f86f 	bl	800a46a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800938c:	e02d      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800938e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00e      	beq.n	80093b8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800939a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800939e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01c      	beq.n	80093e8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
    }
    return;
 80093b6:	e017      	b.n	80093e8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d012      	beq.n	80093ea <HAL_UART_IRQHandler+0x5b6>
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00c      	beq.n	80093ea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fec4 	bl	800a15e <UART_EndTransmit_IT>
    return;
 80093d6:	e008      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80093d8:	bf00      	nop
 80093da:	e006      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80093dc:	bf00      	nop
 80093de:	e004      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80093e0:	bf00      	nop
 80093e2:	e002      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80093e4:	bf00      	nop
 80093e6:	e000      	b.n	80093ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80093e8:	bf00      	nop
  }

}
 80093ea:	37e8      	adds	r7, #232	; 0xe8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4a9a      	ldr	r2, [pc, #616]	; (8009698 <UART_SetConfig+0x27c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d904      	bls.n	800943c <UART_SetConfig+0x20>
 8009432:	f640 313f 	movw	r1, #2879	; 0xb3f
 8009436:	4899      	ldr	r0, [pc, #612]	; (800969c <UART_SetConfig+0x280>)
 8009438:	f7f8 fc47 	bl	8001cca <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009444:	d00d      	beq.n	8009462 <UART_SetConfig+0x46>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <UART_SetConfig+0x46>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009456:	d004      	beq.n	8009462 <UART_SetConfig+0x46>
 8009458:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 800945c:	488f      	ldr	r0, [pc, #572]	; (800969c <UART_SetConfig+0x280>)
 800945e:	f7f8 fc34 	bl	8001cca <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800946a:	d012      	beq.n	8009492 <UART_SetConfig+0x76>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00e      	beq.n	8009492 <UART_SetConfig+0x76>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800947c:	d009      	beq.n	8009492 <UART_SetConfig+0x76>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009486:	d004      	beq.n	8009492 <UART_SetConfig+0x76>
 8009488:	f640 3141 	movw	r1, #2881	; 0xb41
 800948c:	4883      	ldr	r0, [pc, #524]	; (800969c <UART_SetConfig+0x280>)
 800948e:	f7f8 fc1c 	bl	8001cca <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <UART_SetConfig+0x92>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a2:	d004      	beq.n	80094ae <UART_SetConfig+0x92>
 80094a4:	f640 3142 	movw	r1, #2882	; 0xb42
 80094a8:	487c      	ldr	r0, [pc, #496]	; (800969c <UART_SetConfig+0x280>)
 80094aa:	f7f8 fc0e 	bl	8001cca <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00e      	beq.n	80094d4 <UART_SetConfig+0xb8>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094be:	d009      	beq.n	80094d4 <UART_SetConfig+0xb8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80094c8:	d004      	beq.n	80094d4 <UART_SetConfig+0xb8>
 80094ca:	f640 3144 	movw	r1, #2884	; 0xb44
 80094ce:	4873      	ldr	r0, [pc, #460]	; (800969c <UART_SetConfig+0x280>)
 80094d0:	f7f8 fbfb 	bl	8001cca <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	f023 030c 	bic.w	r3, r3, #12
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d103      	bne.n	80094e8 <UART_SetConfig+0xcc>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <UART_SetConfig+0xd6>
 80094e8:	f640 3145 	movw	r1, #2885	; 0xb45
 80094ec:	486b      	ldr	r0, [pc, #428]	; (800969c <UART_SetConfig+0x280>)
 80094ee:	f7f8 fbec 	bl	8001cca <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d013      	beq.n	8009522 <UART_SetConfig+0x106>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009502:	d00e      	beq.n	8009522 <UART_SetConfig+0x106>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800950c:	d009      	beq.n	8009522 <UART_SetConfig+0x106>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009516:	d004      	beq.n	8009522 <UART_SetConfig+0x106>
 8009518:	f640 3146 	movw	r1, #2886	; 0xb46
 800951c:	485f      	ldr	r0, [pc, #380]	; (800969c <UART_SetConfig+0x280>)
 800951e:	f7f8 fbd4 	bl	8001cca <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d009      	beq.n	800953e <UART_SetConfig+0x122>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009532:	d004      	beq.n	800953e <UART_SetConfig+0x122>
 8009534:	f640 3147 	movw	r1, #2887	; 0xb47
 8009538:	4858      	ldr	r0, [pc, #352]	; (800969c <UART_SetConfig+0x280>)
 800953a:	f7f8 fbc6 	bl	8001cca <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	4b50      	ldr	r3, [pc, #320]	; (80096a0 <UART_SetConfig+0x284>)
 800955e:	4013      	ands	r3, r2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	6979      	ldr	r1, [r7, #20]
 8009566:	430b      	orrs	r3, r1
 8009568:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a3e      	ldr	r2, [pc, #248]	; (80096a4 <UART_SetConfig+0x288>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d11f      	bne.n	80095ee <UART_SetConfig+0x1d2>
 80095ae:	4b3e      	ldr	r3, [pc, #248]	; (80096a8 <UART_SetConfig+0x28c>)
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d816      	bhi.n	80095e8 <UART_SetConfig+0x1cc>
 80095ba:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <UART_SetConfig+0x1a4>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095dd 	.word	0x080095dd
 80095c8:	080095e3 	.word	0x080095e3
 80095cc:	080095d7 	.word	0x080095d7
 80095d0:	2301      	movs	r3, #1
 80095d2:	77fb      	strb	r3, [r7, #31]
 80095d4:	e0c4      	b.n	8009760 <UART_SetConfig+0x344>
 80095d6:	2302      	movs	r3, #2
 80095d8:	77fb      	strb	r3, [r7, #31]
 80095da:	e0c1      	b.n	8009760 <UART_SetConfig+0x344>
 80095dc:	2304      	movs	r3, #4
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e0be      	b.n	8009760 <UART_SetConfig+0x344>
 80095e2:	2308      	movs	r3, #8
 80095e4:	77fb      	strb	r3, [r7, #31]
 80095e6:	e0bb      	b.n	8009760 <UART_SetConfig+0x344>
 80095e8:	2310      	movs	r3, #16
 80095ea:	77fb      	strb	r3, [r7, #31]
 80095ec:	e0b8      	b.n	8009760 <UART_SetConfig+0x344>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a2e      	ldr	r2, [pc, #184]	; (80096ac <UART_SetConfig+0x290>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d124      	bne.n	8009642 <UART_SetConfig+0x226>
 80095f8:	4b2b      	ldr	r3, [pc, #172]	; (80096a8 <UART_SetConfig+0x28c>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009604:	d011      	beq.n	800962a <UART_SetConfig+0x20e>
 8009606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800960a:	d817      	bhi.n	800963c <UART_SetConfig+0x220>
 800960c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009610:	d011      	beq.n	8009636 <UART_SetConfig+0x21a>
 8009612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009616:	d811      	bhi.n	800963c <UART_SetConfig+0x220>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <UART_SetConfig+0x208>
 800961c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009620:	d006      	beq.n	8009630 <UART_SetConfig+0x214>
 8009622:	e00b      	b.n	800963c <UART_SetConfig+0x220>
 8009624:	2300      	movs	r3, #0
 8009626:	77fb      	strb	r3, [r7, #31]
 8009628:	e09a      	b.n	8009760 <UART_SetConfig+0x344>
 800962a:	2302      	movs	r3, #2
 800962c:	77fb      	strb	r3, [r7, #31]
 800962e:	e097      	b.n	8009760 <UART_SetConfig+0x344>
 8009630:	2304      	movs	r3, #4
 8009632:	77fb      	strb	r3, [r7, #31]
 8009634:	e094      	b.n	8009760 <UART_SetConfig+0x344>
 8009636:	2308      	movs	r3, #8
 8009638:	77fb      	strb	r3, [r7, #31]
 800963a:	e091      	b.n	8009760 <UART_SetConfig+0x344>
 800963c:	2310      	movs	r3, #16
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e08e      	b.n	8009760 <UART_SetConfig+0x344>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1a      	ldr	r2, [pc, #104]	; (80096b0 <UART_SetConfig+0x294>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d133      	bne.n	80096b4 <UART_SetConfig+0x298>
 800964c:	4b16      	ldr	r3, [pc, #88]	; (80096a8 <UART_SetConfig+0x28c>)
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009654:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009658:	d011      	beq.n	800967e <UART_SetConfig+0x262>
 800965a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800965e:	d817      	bhi.n	8009690 <UART_SetConfig+0x274>
 8009660:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009664:	d011      	beq.n	800968a <UART_SetConfig+0x26e>
 8009666:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800966a:	d811      	bhi.n	8009690 <UART_SetConfig+0x274>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <UART_SetConfig+0x25c>
 8009670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009674:	d006      	beq.n	8009684 <UART_SetConfig+0x268>
 8009676:	e00b      	b.n	8009690 <UART_SetConfig+0x274>
 8009678:	2300      	movs	r3, #0
 800967a:	77fb      	strb	r3, [r7, #31]
 800967c:	e070      	b.n	8009760 <UART_SetConfig+0x344>
 800967e:	2302      	movs	r3, #2
 8009680:	77fb      	strb	r3, [r7, #31]
 8009682:	e06d      	b.n	8009760 <UART_SetConfig+0x344>
 8009684:	2304      	movs	r3, #4
 8009686:	77fb      	strb	r3, [r7, #31]
 8009688:	e06a      	b.n	8009760 <UART_SetConfig+0x344>
 800968a:	2308      	movs	r3, #8
 800968c:	77fb      	strb	r3, [r7, #31]
 800968e:	e067      	b.n	8009760 <UART_SetConfig+0x344>
 8009690:	2310      	movs	r3, #16
 8009692:	77fb      	strb	r3, [r7, #31]
 8009694:	e064      	b.n	8009760 <UART_SetConfig+0x344>
 8009696:	bf00      	nop
 8009698:	00895440 	.word	0x00895440
 800969c:	0800c4dc 	.word	0x0800c4dc
 80096a0:	efff69f3 	.word	0xefff69f3
 80096a4:	40013800 	.word	0x40013800
 80096a8:	40021000 	.word	0x40021000
 80096ac:	40004400 	.word	0x40004400
 80096b0:	40004800 	.word	0x40004800
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a86      	ldr	r2, [pc, #536]	; (80098d4 <UART_SetConfig+0x4b8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d124      	bne.n	8009708 <UART_SetConfig+0x2ec>
 80096be:	4b86      	ldr	r3, [pc, #536]	; (80098d8 <UART_SetConfig+0x4bc>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80096c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096ca:	d011      	beq.n	80096f0 <UART_SetConfig+0x2d4>
 80096cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d0:	d817      	bhi.n	8009702 <UART_SetConfig+0x2e6>
 80096d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d6:	d011      	beq.n	80096fc <UART_SetConfig+0x2e0>
 80096d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096dc:	d811      	bhi.n	8009702 <UART_SetConfig+0x2e6>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <UART_SetConfig+0x2ce>
 80096e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e6:	d006      	beq.n	80096f6 <UART_SetConfig+0x2da>
 80096e8:	e00b      	b.n	8009702 <UART_SetConfig+0x2e6>
 80096ea:	2300      	movs	r3, #0
 80096ec:	77fb      	strb	r3, [r7, #31]
 80096ee:	e037      	b.n	8009760 <UART_SetConfig+0x344>
 80096f0:	2302      	movs	r3, #2
 80096f2:	77fb      	strb	r3, [r7, #31]
 80096f4:	e034      	b.n	8009760 <UART_SetConfig+0x344>
 80096f6:	2304      	movs	r3, #4
 80096f8:	77fb      	strb	r3, [r7, #31]
 80096fa:	e031      	b.n	8009760 <UART_SetConfig+0x344>
 80096fc:	2308      	movs	r3, #8
 80096fe:	77fb      	strb	r3, [r7, #31]
 8009700:	e02e      	b.n	8009760 <UART_SetConfig+0x344>
 8009702:	2310      	movs	r3, #16
 8009704:	77fb      	strb	r3, [r7, #31]
 8009706:	e02b      	b.n	8009760 <UART_SetConfig+0x344>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a73      	ldr	r2, [pc, #460]	; (80098dc <UART_SetConfig+0x4c0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d124      	bne.n	800975c <UART_SetConfig+0x340>
 8009712:	4b71      	ldr	r3, [pc, #452]	; (80098d8 <UART_SetConfig+0x4bc>)
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800971a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800971e:	d011      	beq.n	8009744 <UART_SetConfig+0x328>
 8009720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009724:	d817      	bhi.n	8009756 <UART_SetConfig+0x33a>
 8009726:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800972a:	d011      	beq.n	8009750 <UART_SetConfig+0x334>
 800972c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009730:	d811      	bhi.n	8009756 <UART_SetConfig+0x33a>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <UART_SetConfig+0x322>
 8009736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973a:	d006      	beq.n	800974a <UART_SetConfig+0x32e>
 800973c:	e00b      	b.n	8009756 <UART_SetConfig+0x33a>
 800973e:	2300      	movs	r3, #0
 8009740:	77fb      	strb	r3, [r7, #31]
 8009742:	e00d      	b.n	8009760 <UART_SetConfig+0x344>
 8009744:	2302      	movs	r3, #2
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e00a      	b.n	8009760 <UART_SetConfig+0x344>
 800974a:	2304      	movs	r3, #4
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e007      	b.n	8009760 <UART_SetConfig+0x344>
 8009750:	2308      	movs	r3, #8
 8009752:	77fb      	strb	r3, [r7, #31]
 8009754:	e004      	b.n	8009760 <UART_SetConfig+0x344>
 8009756:	2310      	movs	r3, #16
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e001      	b.n	8009760 <UART_SetConfig+0x344>
 800975c:	2310      	movs	r3, #16
 800975e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009768:	d15c      	bne.n	8009824 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800976a:	7ffb      	ldrb	r3, [r7, #31]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d828      	bhi.n	80097c2 <UART_SetConfig+0x3a6>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <UART_SetConfig+0x35c>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	0800979d 	.word	0x0800979d
 800977c:	080097a5 	.word	0x080097a5
 8009780:	080097ad 	.word	0x080097ad
 8009784:	080097c3 	.word	0x080097c3
 8009788:	080097b3 	.word	0x080097b3
 800978c:	080097c3 	.word	0x080097c3
 8009790:	080097c3 	.word	0x080097c3
 8009794:	080097c3 	.word	0x080097c3
 8009798:	080097bb 	.word	0x080097bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800979c:	f7fc fe74 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 80097a0:	61b8      	str	r0, [r7, #24]
        break;
 80097a2:	e013      	b.n	80097cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097a4:	f7fc fe92 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 80097a8:	61b8      	str	r0, [r7, #24]
        break;
 80097aa:	e00f      	b.n	80097cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097ac:	4b4c      	ldr	r3, [pc, #304]	; (80098e0 <UART_SetConfig+0x4c4>)
 80097ae:	61bb      	str	r3, [r7, #24]
        break;
 80097b0:	e00c      	b.n	80097cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097b2:	f7fc fdf3 	bl	800639c <HAL_RCC_GetSysClockFreq>
 80097b6:	61b8      	str	r0, [r7, #24]
        break;
 80097b8:	e008      	b.n	80097cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097be:	61bb      	str	r3, [r7, #24]
        break;
 80097c0:	e004      	b.n	80097cc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	77bb      	strb	r3, [r7, #30]
        break;
 80097ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d074      	beq.n	80098bc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	005a      	lsls	r2, r3, #1
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	441a      	add	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b0f      	cmp	r3, #15
 80097ee:	d916      	bls.n	800981e <UART_SetConfig+0x402>
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f6:	d212      	bcs.n	800981e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f023 030f 	bic.w	r3, r3, #15
 8009800:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	b29b      	uxth	r3, r3
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	b29a      	uxth	r2, r3
 800980e:	89fb      	ldrh	r3, [r7, #14]
 8009810:	4313      	orrs	r3, r2
 8009812:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	89fa      	ldrh	r2, [r7, #14]
 800981a:	60da      	str	r2, [r3, #12]
 800981c:	e04e      	b.n	80098bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	77bb      	strb	r3, [r7, #30]
 8009822:	e04b      	b.n	80098bc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009824:	7ffb      	ldrb	r3, [r7, #31]
 8009826:	2b08      	cmp	r3, #8
 8009828:	d827      	bhi.n	800987a <UART_SetConfig+0x45e>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <UART_SetConfig+0x414>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009855 	.word	0x08009855
 8009834:	0800985d 	.word	0x0800985d
 8009838:	08009865 	.word	0x08009865
 800983c:	0800987b 	.word	0x0800987b
 8009840:	0800986b 	.word	0x0800986b
 8009844:	0800987b 	.word	0x0800987b
 8009848:	0800987b 	.word	0x0800987b
 800984c:	0800987b 	.word	0x0800987b
 8009850:	08009873 	.word	0x08009873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009854:	f7fc fe18 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8009858:	61b8      	str	r0, [r7, #24]
        break;
 800985a:	e013      	b.n	8009884 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800985c:	f7fc fe36 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8009860:	61b8      	str	r0, [r7, #24]
        break;
 8009862:	e00f      	b.n	8009884 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <UART_SetConfig+0x4c4>)
 8009866:	61bb      	str	r3, [r7, #24]
        break;
 8009868:	e00c      	b.n	8009884 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800986a:	f7fc fd97 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800986e:	61b8      	str	r0, [r7, #24]
        break;
 8009870:	e008      	b.n	8009884 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009876:	61bb      	str	r3, [r7, #24]
        break;
 8009878:	e004      	b.n	8009884 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	77bb      	strb	r3, [r7, #30]
        break;
 8009882:	bf00      	nop
    }

    if (pclk != 0U)
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d018      	beq.n	80098bc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	085a      	lsrs	r2, r3, #1
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	441a      	add	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	fbb2 f3f3 	udiv	r3, r2, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	2b0f      	cmp	r3, #15
 80098a4:	d908      	bls.n	80098b8 <UART_SetConfig+0x49c>
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ac:	d204      	bcs.n	80098b8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	e001      	b.n	80098bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80098c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40004c00 	.word	0x40004c00
 80098d8:	40021000 	.word	0x40021000
 80098dc:	40005000 	.word	0x40005000
 80098e0:	007a1200 	.word	0x007a1200

080098e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	2bff      	cmp	r3, #255	; 0xff
 80098f2:	d904      	bls.n	80098fe <UART_AdvFeatureConfig+0x1a>
 80098f4:	f640 31c8 	movw	r1, #3016	; 0xbc8
 80098f8:	489d      	ldr	r0, [pc, #628]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 80098fa:	f7f8 f9e6 	bl	8001cca <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d018      	beq.n	800993c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <UART_AdvFeatureConfig+0x42>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800991a:	d004      	beq.n	8009926 <UART_AdvFeatureConfig+0x42>
 800991c:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8009920:	4893      	ldr	r0, [pc, #588]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009922:	f7f8 f9d2 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d018      	beq.n	800997a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d009      	beq.n	8009964 <UART_AdvFeatureConfig+0x80>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009958:	d004      	beq.n	8009964 <UART_AdvFeatureConfig+0x80>
 800995a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800995e:	4884      	ldr	r0, [pc, #528]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009960:	f7f8 f9b3 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	f003 0304 	and.w	r3, r3, #4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d018      	beq.n	80099b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <UART_AdvFeatureConfig+0xbe>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009996:	d004      	beq.n	80099a2 <UART_AdvFeatureConfig+0xbe>
 8009998:	f640 31db 	movw	r1, #3035	; 0xbdb
 800999c:	4874      	ldr	r0, [pc, #464]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 800999e:	f7f8 f994 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d018      	beq.n	80099f6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <UART_AdvFeatureConfig+0xfc>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d4:	d004      	beq.n	80099e0 <UART_AdvFeatureConfig+0xfc>
 80099d6:	f640 31e2 	movw	r1, #3042	; 0xbe2
 80099da:	4865      	ldr	r0, [pc, #404]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 80099dc:	f7f8 f975 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	f003 0310 	and.w	r3, r3, #16
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d018      	beq.n	8009a34 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <UART_AdvFeatureConfig+0x13a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a12:	d004      	beq.n	8009a1e <UART_AdvFeatureConfig+0x13a>
 8009a14:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8009a18:	4855      	ldr	r0, [pc, #340]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009a1a:	f7f8 f956 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d018      	beq.n	8009a72 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <UART_AdvFeatureConfig+0x178>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a50:	d004      	beq.n	8009a5c <UART_AdvFeatureConfig+0x178>
 8009a52:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8009a56:	4846      	ldr	r0, [pc, #280]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009a58:	f7f8 f937 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d054      	beq.n	8009b28 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a3c      	ldr	r2, [pc, #240]	; (8009b74 <UART_AdvFeatureConfig+0x290>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x1c2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a3a      	ldr	r2, [pc, #232]	; (8009b78 <UART_AdvFeatureConfig+0x294>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x1c2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a39      	ldr	r2, [pc, #228]	; (8009b7c <UART_AdvFeatureConfig+0x298>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x1c2>
 8009a9c:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009aa0:	4833      	ldr	r0, [pc, #204]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009aa2:	f7f8 f912 	bl	8001cca <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <UART_AdvFeatureConfig+0x1de>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ab6:	d004      	beq.n	8009ac2 <UART_AdvFeatureConfig+0x1de>
 8009ab8:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8009abc:	482c      	ldr	r0, [pc, #176]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009abe:	f7f8 f904 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ae0:	d122      	bne.n	8009b28 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d013      	beq.n	8009b12 <UART_AdvFeatureConfig+0x22e>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009af2:	d00e      	beq.n	8009b12 <UART_AdvFeatureConfig+0x22e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009afc:	d009      	beq.n	8009b12 <UART_AdvFeatureConfig+0x22e>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b06:	d004      	beq.n	8009b12 <UART_AdvFeatureConfig+0x22e>
 8009b08:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009b0c:	4818      	ldr	r0, [pc, #96]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009b0e:	f7f8 f8dc 	bl	8001cca <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d018      	beq.n	8009b66 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d009      	beq.n	8009b50 <UART_AdvFeatureConfig+0x26c>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b44:	d004      	beq.n	8009b50 <UART_AdvFeatureConfig+0x26c>
 8009b46:	f640 4105 	movw	r1, #3077	; 0xc05
 8009b4a:	4809      	ldr	r0, [pc, #36]	; (8009b70 <UART_AdvFeatureConfig+0x28c>)
 8009b4c:	f7f8 f8bd 	bl	8001cca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  }
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	0800c4dc 	.word	0x0800c4dc
 8009b74:	40013800 	.word	0x40013800
 8009b78:	40004400 	.word	0x40004400
 8009b7c:	40004800 	.word	0x40004800

08009b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b90:	f7f8 fc9a 	bl	80024c8 <HAL_GetTick>
 8009b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d10e      	bne.n	8009bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f82d 	bl	8009c12 <UART_WaitOnFlagUntilTimeout>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e023      	b.n	8009c0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d10e      	bne.n	8009bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f817 	bl	8009c12 <UART_WaitOnFlagUntilTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e00d      	b.n	8009c0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b09c      	sub	sp, #112	; 0x70
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	603b      	str	r3, [r7, #0]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c22:	e0a5      	b.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	f000 80a1 	beq.w	8009d70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c2e:	f7f8 fc4b 	bl	80024c8 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d302      	bcc.n	8009c44 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d13e      	bne.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c58:	667b      	str	r3, [r7, #100]	; 0x64
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e6      	bne.n	8009c44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	f023 0301 	bic.w	r3, r3, #1
 8009c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c96:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e5      	bne.n	8009c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e067      	b.n	8009d92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d04f      	beq.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cde:	d147      	bne.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ce8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	e853 3f00 	ldrex	r3, [r3]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
 8009d0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d10:	e841 2300 	strex	r3, r2, [r1]
 8009d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e6      	bne.n	8009cea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3308      	adds	r3, #8
 8009d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d3c:	623a      	str	r2, [r7, #32]
 8009d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69f9      	ldr	r1, [r7, #28]
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e5      	bne.n	8009d1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e010      	b.n	8009d92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69da      	ldr	r2, [r3, #28]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	bf0c      	ite	eq
 8009d80:	2301      	moveq	r3, #1
 8009d82:	2300      	movne	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	f43f af4a 	beq.w	8009c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3770      	adds	r7, #112	; 0x70
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b091      	sub	sp, #68	; 0x44
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	88fa      	ldrh	r2, [r7, #6]
 8009db4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dce:	d10e      	bne.n	8009dee <UART_Start_Receive_IT+0x52>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d105      	bne.n	8009de4 <UART_Start_Receive_IT+0x48>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009de2:	e02d      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	22ff      	movs	r2, #255	; 0xff
 8009de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009dec:	e028      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10d      	bne.n	8009e12 <UART_Start_Receive_IT+0x76>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d104      	bne.n	8009e08 <UART_Start_Receive_IT+0x6c>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	22ff      	movs	r2, #255	; 0xff
 8009e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e06:	e01b      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	227f      	movs	r2, #127	; 0x7f
 8009e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e10:	e016      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e1a:	d10d      	bne.n	8009e38 <UART_Start_Receive_IT+0x9c>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <UART_Start_Receive_IT+0x92>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	227f      	movs	r2, #127	; 0x7f
 8009e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e2c:	e008      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	223f      	movs	r2, #63	; 0x3f
 8009e32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e36:	e003      	b.n	8009e40 <UART_Start_Receive_IT+0xa4>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2222      	movs	r2, #34	; 0x22
 8009e4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3308      	adds	r3, #8
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	f043 0301 	orr.w	r3, r3, #1
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8009e70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e5      	bne.n	8009e4e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e8a:	d107      	bne.n	8009e9c <UART_Start_Receive_IT+0x100>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4a15      	ldr	r2, [pc, #84]	; (8009eec <UART_Start_Receive_IT+0x150>)
 8009e98:	665a      	str	r2, [r3, #100]	; 0x64
 8009e9a:	e002      	b.n	8009ea2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a14      	ldr	r2, [pc, #80]	; (8009ef0 <UART_Start_Receive_IT+0x154>)
 8009ea0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	e853 3f00 	ldrex	r3, [r3]
 8009eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	623b      	str	r3, [r7, #32]
 8009eca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	69f9      	ldr	r1, [r7, #28]
 8009ece:	6a3a      	ldr	r2, [r7, #32]
 8009ed0:	e841 2300 	strex	r3, r2, [r1]
 8009ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e6      	bne.n	8009eaa <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3744      	adds	r7, #68	; 0x44
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	0800a30f 	.word	0x0800a30f
 8009ef0:	0800a1b3 	.word	0x0800a1b3

08009ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b095      	sub	sp, #84	; 0x54
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	f023 0301 	bic.w	r3, r3, #1
 8009f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e5      	bne.n	8009f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d118      	bne.n	8009f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0310 	bic.w	r3, r3, #16
 8009f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009fae:	bf00      	nop
 8009fb0:	3754      	adds	r7, #84	; 0x54
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff fa09 	bl	80093f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b08f      	sub	sp, #60	; 0x3c
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ff2:	2b21      	cmp	r3, #33	; 0x21
 8009ff4:	d14d      	bne.n	800a092 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d132      	bne.n	800a068 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a016:	637b      	str	r3, [r7, #52]	; 0x34
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a022:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e6      	bne.n	800a002 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	60bb      	str	r3, [r7, #8]
   return(result);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	61bb      	str	r3, [r7, #24]
 800a054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	6979      	ldr	r1, [r7, #20]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	613b      	str	r3, [r7, #16]
   return(result);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e6      	bne.n	800a034 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a066:	e014      	b.n	800a092 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06c:	781a      	ldrb	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	b292      	uxth	r2, r2
 800a074:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a086:	b29b      	uxth	r3, r3
 800a088:	3b01      	subs	r3, #1
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a092:	bf00      	nop
 800a094:	373c      	adds	r7, #60	; 0x3c
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b091      	sub	sp, #68	; 0x44
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0aa:	2b21      	cmp	r3, #33	; 0x21
 800a0ac:	d151      	bne.n	800a152 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d132      	bne.n	800a120 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a0da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e6      	bne.n	800a0ba <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a100:	637b      	str	r3, [r7, #52]	; 0x34
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	69b9      	ldr	r1, [r7, #24]
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	617b      	str	r3, [r7, #20]
   return(result);
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e6      	bne.n	800a0ec <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a11e:	e018      	b.n	800a152 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a124:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a132:	b292      	uxth	r2, r2
 800a134:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	1c9a      	adds	r2, r3, #2
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a152:	bf00      	nop
 800a154:	3744      	adds	r7, #68	; 0x44
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b088      	sub	sp, #32
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	60bb      	str	r3, [r7, #8]
   return(result);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6979      	ldr	r1, [r7, #20]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	613b      	str	r3, [r7, #16]
   return(result);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f7 f8b9 	bl	800131c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1aa:	bf00      	nop
 800a1ac:	3720      	adds	r7, #32
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b096      	sub	sp, #88	; 0x58
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c8:	2b22      	cmp	r3, #34	; 0x22
 800a1ca:	f040 8094 	bne.w	800a2f6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a1d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1dc:	b2d9      	uxtb	r1, r3
 800a1de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e8:	400a      	ands	r2, r1
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a210:	b29b      	uxth	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d177      	bne.n	800a306 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a22a:	653b      	str	r3, [r7, #80]	; 0x50
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a234:	647b      	str	r3, [r7, #68]	; 0x44
 800a236:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e6      	bne.n	800a216 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	623b      	str	r3, [r7, #32]
   return(result);
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3308      	adds	r3, #8
 800a266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a268:	633a      	str	r2, [r7, #48]	; 0x30
 800a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d12e      	bne.n	800a2ee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0310 	bic.w	r3, r3, #16
 800a2aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	69b9      	ldr	r1, [r7, #24]
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f003 0310 	and.w	r3, r3, #16
 800a2d2:	2b10      	cmp	r3, #16
 800a2d4:	d103      	bne.n	800a2de <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2210      	movs	r2, #16
 800a2dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f88c 	bl	8009404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2ec:	e00b      	b.n	800a306 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7f7 f84a 	bl	8001388 <HAL_UART_RxCpltCallback>
}
 800a2f4:	e007      	b.n	800a306 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0208 	orr.w	r2, r2, #8
 800a304:	619a      	str	r2, [r3, #24]
}
 800a306:	bf00      	nop
 800a308:	3758      	adds	r7, #88	; 0x58
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b096      	sub	sp, #88	; 0x58
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a31c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a324:	2b22      	cmp	r3, #34	; 0x22
 800a326:	f040 8094 	bne.w	800a452 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a330:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a338:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a33a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a33e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a342:	4013      	ands	r3, r2
 800a344:	b29a      	uxth	r2, r3
 800a346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a348:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34e:	1c9a      	adds	r2, r3, #2
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	3b01      	subs	r3, #1
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d177      	bne.n	800a462 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	461a      	mov	r2, r3
 800a38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a390:	643b      	str	r3, [r7, #64]	; 0x40
 800a392:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e6      	bne.n	800a372 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d12e      	bne.n	800a44a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f023 0310 	bic.w	r3, r3, #16
 800a406:	647b      	str	r3, [r7, #68]	; 0x44
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	461a      	mov	r2, r3
 800a40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6979      	ldr	r1, [r7, #20]
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	613b      	str	r3, [r7, #16]
   return(result);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e6      	bne.n	800a3f2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d103      	bne.n	800a43a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2210      	movs	r2, #16
 800a438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7fe ffde 	bl	8009404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a448:	e00b      	b.n	800a462 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7f6 ff9c 	bl	8001388 <HAL_UART_RxCpltCallback>
}
 800a450:	e007      	b.n	800a462 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f042 0208 	orr.w	r2, r2, #8
 800a460:	619a      	str	r2, [r3, #24]
}
 800a462:	bf00      	nop
 800a464:	3758      	adds	r7, #88	; 0x58
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
	...

0800a480 <__errno>:
 800a480:	4b01      	ldr	r3, [pc, #4]	; (800a488 <__errno+0x8>)
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000088 	.word	0x20000088

0800a48c <__libc_init_array>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	4d0d      	ldr	r5, [pc, #52]	; (800a4c4 <__libc_init_array+0x38>)
 800a490:	4c0d      	ldr	r4, [pc, #52]	; (800a4c8 <__libc_init_array+0x3c>)
 800a492:	1b64      	subs	r4, r4, r5
 800a494:	10a4      	asrs	r4, r4, #2
 800a496:	2600      	movs	r6, #0
 800a498:	42a6      	cmp	r6, r4
 800a49a:	d109      	bne.n	800a4b0 <__libc_init_array+0x24>
 800a49c:	4d0b      	ldr	r5, [pc, #44]	; (800a4cc <__libc_init_array+0x40>)
 800a49e:	4c0c      	ldr	r4, [pc, #48]	; (800a4d0 <__libc_init_array+0x44>)
 800a4a0:	f001 fe0c 	bl	800c0bc <_init>
 800a4a4:	1b64      	subs	r4, r4, r5
 800a4a6:	10a4      	asrs	r4, r4, #2
 800a4a8:	2600      	movs	r6, #0
 800a4aa:	42a6      	cmp	r6, r4
 800a4ac:	d105      	bne.n	800a4ba <__libc_init_array+0x2e>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b4:	4798      	blx	r3
 800a4b6:	3601      	adds	r6, #1
 800a4b8:	e7ee      	b.n	800a498 <__libc_init_array+0xc>
 800a4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4be:	4798      	blx	r3
 800a4c0:	3601      	adds	r6, #1
 800a4c2:	e7f2      	b.n	800a4aa <__libc_init_array+0x1e>
 800a4c4:	0800c710 	.word	0x0800c710
 800a4c8:	0800c710 	.word	0x0800c710
 800a4cc:	0800c710 	.word	0x0800c710
 800a4d0:	0800c714 	.word	0x0800c714

0800a4d4 <memset>:
 800a4d4:	4402      	add	r2, r0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d100      	bne.n	800a4de <memset+0xa>
 800a4dc:	4770      	bx	lr
 800a4de:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e2:	e7f9      	b.n	800a4d8 <memset+0x4>

0800a4e4 <iprintf>:
 800a4e4:	b40f      	push	{r0, r1, r2, r3}
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <iprintf+0x2c>)
 800a4e8:	b513      	push	{r0, r1, r4, lr}
 800a4ea:	681c      	ldr	r4, [r3, #0]
 800a4ec:	b124      	cbz	r4, 800a4f8 <iprintf+0x14>
 800a4ee:	69a3      	ldr	r3, [r4, #24]
 800a4f0:	b913      	cbnz	r3, 800a4f8 <iprintf+0x14>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 f91a 	bl	800a72c <__sinit>
 800a4f8:	ab05      	add	r3, sp, #20
 800a4fa:	9a04      	ldr	r2, [sp, #16]
 800a4fc:	68a1      	ldr	r1, [r4, #8]
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fd77 	bl	800aff4 <_vfiprintf_r>
 800a506:	b002      	add	sp, #8
 800a508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a50c:	b004      	add	sp, #16
 800a50e:	4770      	bx	lr
 800a510:	20000088 	.word	0x20000088

0800a514 <siscanf>:
 800a514:	b40e      	push	{r1, r2, r3}
 800a516:	b510      	push	{r4, lr}
 800a518:	b09f      	sub	sp, #124	; 0x7c
 800a51a:	ac21      	add	r4, sp, #132	; 0x84
 800a51c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a520:	f854 2b04 	ldr.w	r2, [r4], #4
 800a524:	9201      	str	r2, [sp, #4]
 800a526:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a52a:	9004      	str	r0, [sp, #16]
 800a52c:	9008      	str	r0, [sp, #32]
 800a52e:	f7f5 fe61 	bl	80001f4 <strlen>
 800a532:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <siscanf+0x50>)
 800a534:	9005      	str	r0, [sp, #20]
 800a536:	9009      	str	r0, [sp, #36]	; 0x24
 800a538:	930d      	str	r3, [sp, #52]	; 0x34
 800a53a:	480b      	ldr	r0, [pc, #44]	; (800a568 <siscanf+0x54>)
 800a53c:	9a01      	ldr	r2, [sp, #4]
 800a53e:	6800      	ldr	r0, [r0, #0]
 800a540:	9403      	str	r4, [sp, #12]
 800a542:	2300      	movs	r3, #0
 800a544:	9311      	str	r3, [sp, #68]	; 0x44
 800a546:	9316      	str	r3, [sp, #88]	; 0x58
 800a548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a54c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a550:	a904      	add	r1, sp, #16
 800a552:	4623      	mov	r3, r4
 800a554:	f000 fbac 	bl	800acb0 <__ssvfiscanf_r>
 800a558:	b01f      	add	sp, #124	; 0x7c
 800a55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55e:	b003      	add	sp, #12
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	0800a58f 	.word	0x0800a58f
 800a568:	20000088 	.word	0x20000088

0800a56c <__sread>:
 800a56c:	b510      	push	{r4, lr}
 800a56e:	460c      	mov	r4, r1
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	f001 f94e 	bl	800b814 <_read_r>
 800a578:	2800      	cmp	r0, #0
 800a57a:	bfab      	itete	ge
 800a57c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a57e:	89a3      	ldrhlt	r3, [r4, #12]
 800a580:	181b      	addge	r3, r3, r0
 800a582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a586:	bfac      	ite	ge
 800a588:	6563      	strge	r3, [r4, #84]	; 0x54
 800a58a:	81a3      	strhlt	r3, [r4, #12]
 800a58c:	bd10      	pop	{r4, pc}

0800a58e <__seofread>:
 800a58e:	2000      	movs	r0, #0
 800a590:	4770      	bx	lr

0800a592 <__swrite>:
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	461f      	mov	r7, r3
 800a598:	898b      	ldrh	r3, [r1, #12]
 800a59a:	05db      	lsls	r3, r3, #23
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	d505      	bpl.n	800a5b0 <__swrite+0x1e>
 800a5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f000 f95e 	bl	800a86c <_lseek_r>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	4632      	mov	r2, r6
 800a5be:	463b      	mov	r3, r7
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c6:	f000 b837 	b.w	800a638 <_write_r>

0800a5ca <__sseek>:
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d2:	f000 f94b 	bl	800a86c <_lseek_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	bf15      	itete	ne
 800a5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5e6:	81a3      	strheq	r3, [r4, #12]
 800a5e8:	bf18      	it	ne
 800a5ea:	81a3      	strhne	r3, [r4, #12]
 800a5ec:	bd10      	pop	{r4, pc}

0800a5ee <__sclose>:
 800a5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f2:	f000 b833 	b.w	800a65c <_close_r>
	...

0800a5f8 <_vsiprintf_r>:
 800a5f8:	b500      	push	{lr}
 800a5fa:	b09b      	sub	sp, #108	; 0x6c
 800a5fc:	9100      	str	r1, [sp, #0]
 800a5fe:	9104      	str	r1, [sp, #16]
 800a600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a604:	9105      	str	r1, [sp, #20]
 800a606:	9102      	str	r1, [sp, #8]
 800a608:	4905      	ldr	r1, [pc, #20]	; (800a620 <_vsiprintf_r+0x28>)
 800a60a:	9103      	str	r1, [sp, #12]
 800a60c:	4669      	mov	r1, sp
 800a60e:	f000 f9f5 	bl	800a9fc <_svfiprintf_r>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	b01b      	add	sp, #108	; 0x6c
 800a61a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a61e:	bf00      	nop
 800a620:	ffff0208 	.word	0xffff0208

0800a624 <vsiprintf>:
 800a624:	4613      	mov	r3, r2
 800a626:	460a      	mov	r2, r1
 800a628:	4601      	mov	r1, r0
 800a62a:	4802      	ldr	r0, [pc, #8]	; (800a634 <vsiprintf+0x10>)
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f7ff bfe3 	b.w	800a5f8 <_vsiprintf_r>
 800a632:	bf00      	nop
 800a634:	20000088 	.word	0x20000088

0800a638 <_write_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_write_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f7 fcf7 	bl	800203a <_write>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_write_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_write_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20000a38 	.word	0x20000a38

0800a65c <_close_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d06      	ldr	r5, [pc, #24]	; (800a678 <_close_r+0x1c>)
 800a660:	2300      	movs	r3, #0
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	f7f7 fd03 	bl	8002072 <_close>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_close_r+0x1a>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_close_r+0x1a>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20000a38 	.word	0x20000a38

0800a67c <std>:
 800a67c:	2300      	movs	r3, #0
 800a67e:	b510      	push	{r4, lr}
 800a680:	4604      	mov	r4, r0
 800a682:	e9c0 3300 	strd	r3, r3, [r0]
 800a686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a68a:	6083      	str	r3, [r0, #8]
 800a68c:	8181      	strh	r1, [r0, #12]
 800a68e:	6643      	str	r3, [r0, #100]	; 0x64
 800a690:	81c2      	strh	r2, [r0, #14]
 800a692:	6183      	str	r3, [r0, #24]
 800a694:	4619      	mov	r1, r3
 800a696:	2208      	movs	r2, #8
 800a698:	305c      	adds	r0, #92	; 0x5c
 800a69a:	f7ff ff1b 	bl	800a4d4 <memset>
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <std+0x38>)
 800a6a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a6a2:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <std+0x3c>)
 800a6a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6a6:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <std+0x40>)
 800a6a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6aa:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <std+0x44>)
 800a6ac:	6224      	str	r4, [r4, #32]
 800a6ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800a56d 	.word	0x0800a56d
 800a6b8:	0800a593 	.word	0x0800a593
 800a6bc:	0800a5cb 	.word	0x0800a5cb
 800a6c0:	0800a5ef 	.word	0x0800a5ef

0800a6c4 <_cleanup_r>:
 800a6c4:	4901      	ldr	r1, [pc, #4]	; (800a6cc <_cleanup_r+0x8>)
 800a6c6:	f000 b8af 	b.w	800a828 <_fwalk_reent>
 800a6ca:	bf00      	nop
 800a6cc:	0800bdd5 	.word	0x0800bdd5

0800a6d0 <__sfmoreglue>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	1e4a      	subs	r2, r1, #1
 800a6d4:	2568      	movs	r5, #104	; 0x68
 800a6d6:	4355      	muls	r5, r2
 800a6d8:	460e      	mov	r6, r1
 800a6da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6de:	f000 f8d7 	bl	800a890 <_malloc_r>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	b140      	cbz	r0, 800a6f8 <__sfmoreglue+0x28>
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a6ec:	300c      	adds	r0, #12
 800a6ee:	60a0      	str	r0, [r4, #8]
 800a6f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6f4:	f7ff feee 	bl	800a4d4 <memset>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}

0800a6fc <__sfp_lock_acquire>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__sfp_lock_acquire+0x8>)
 800a6fe:	f000 b8b3 	b.w	800a868 <__retarget_lock_acquire_recursive>
 800a702:	bf00      	nop
 800a704:	20000a34 	.word	0x20000a34

0800a708 <__sfp_lock_release>:
 800a708:	4801      	ldr	r0, [pc, #4]	; (800a710 <__sfp_lock_release+0x8>)
 800a70a:	f000 b8ae 	b.w	800a86a <__retarget_lock_release_recursive>
 800a70e:	bf00      	nop
 800a710:	20000a34 	.word	0x20000a34

0800a714 <__sinit_lock_acquire>:
 800a714:	4801      	ldr	r0, [pc, #4]	; (800a71c <__sinit_lock_acquire+0x8>)
 800a716:	f000 b8a7 	b.w	800a868 <__retarget_lock_acquire_recursive>
 800a71a:	bf00      	nop
 800a71c:	20000a2f 	.word	0x20000a2f

0800a720 <__sinit_lock_release>:
 800a720:	4801      	ldr	r0, [pc, #4]	; (800a728 <__sinit_lock_release+0x8>)
 800a722:	f000 b8a2 	b.w	800a86a <__retarget_lock_release_recursive>
 800a726:	bf00      	nop
 800a728:	20000a2f 	.word	0x20000a2f

0800a72c <__sinit>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	4604      	mov	r4, r0
 800a730:	f7ff fff0 	bl	800a714 <__sinit_lock_acquire>
 800a734:	69a3      	ldr	r3, [r4, #24]
 800a736:	b11b      	cbz	r3, 800a740 <__sinit+0x14>
 800a738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a73c:	f7ff bff0 	b.w	800a720 <__sinit_lock_release>
 800a740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a744:	6523      	str	r3, [r4, #80]	; 0x50
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <__sinit+0x68>)
 800a748:	4a13      	ldr	r2, [pc, #76]	; (800a798 <__sinit+0x6c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a74e:	42a3      	cmp	r3, r4
 800a750:	bf04      	itt	eq
 800a752:	2301      	moveq	r3, #1
 800a754:	61a3      	streq	r3, [r4, #24]
 800a756:	4620      	mov	r0, r4
 800a758:	f000 f820 	bl	800a79c <__sfp>
 800a75c:	6060      	str	r0, [r4, #4]
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 f81c 	bl	800a79c <__sfp>
 800a764:	60a0      	str	r0, [r4, #8]
 800a766:	4620      	mov	r0, r4
 800a768:	f000 f818 	bl	800a79c <__sfp>
 800a76c:	2200      	movs	r2, #0
 800a76e:	60e0      	str	r0, [r4, #12]
 800a770:	2104      	movs	r1, #4
 800a772:	6860      	ldr	r0, [r4, #4]
 800a774:	f7ff ff82 	bl	800a67c <std>
 800a778:	68a0      	ldr	r0, [r4, #8]
 800a77a:	2201      	movs	r2, #1
 800a77c:	2109      	movs	r1, #9
 800a77e:	f7ff ff7d 	bl	800a67c <std>
 800a782:	68e0      	ldr	r0, [r4, #12]
 800a784:	2202      	movs	r2, #2
 800a786:	2112      	movs	r1, #18
 800a788:	f7ff ff78 	bl	800a67c <std>
 800a78c:	2301      	movs	r3, #1
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	e7d2      	b.n	800a738 <__sinit+0xc>
 800a792:	bf00      	nop
 800a794:	0800c55c 	.word	0x0800c55c
 800a798:	0800a6c5 	.word	0x0800a6c5

0800a79c <__sfp>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	4607      	mov	r7, r0
 800a7a0:	f7ff ffac 	bl	800a6fc <__sfp_lock_acquire>
 800a7a4:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <__sfp+0x84>)
 800a7a6:	681e      	ldr	r6, [r3, #0]
 800a7a8:	69b3      	ldr	r3, [r6, #24]
 800a7aa:	b913      	cbnz	r3, 800a7b2 <__sfp+0x16>
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f7ff ffbd 	bl	800a72c <__sinit>
 800a7b2:	3648      	adds	r6, #72	; 0x48
 800a7b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	d503      	bpl.n	800a7c4 <__sfp+0x28>
 800a7bc:	6833      	ldr	r3, [r6, #0]
 800a7be:	b30b      	cbz	r3, 800a804 <__sfp+0x68>
 800a7c0:	6836      	ldr	r6, [r6, #0]
 800a7c2:	e7f7      	b.n	800a7b4 <__sfp+0x18>
 800a7c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7c8:	b9d5      	cbnz	r5, 800a800 <__sfp+0x64>
 800a7ca:	4b16      	ldr	r3, [pc, #88]	; (800a824 <__sfp+0x88>)
 800a7cc:	60e3      	str	r3, [r4, #12]
 800a7ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a7d4:	f000 f847 	bl	800a866 <__retarget_lock_init_recursive>
 800a7d8:	f7ff ff96 	bl	800a708 <__sfp_lock_release>
 800a7dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7e4:	6025      	str	r5, [r4, #0]
 800a7e6:	61a5      	str	r5, [r4, #24]
 800a7e8:	2208      	movs	r2, #8
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7f0:	f7ff fe70 	bl	800a4d4 <memset>
 800a7f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a800:	3468      	adds	r4, #104	; 0x68
 800a802:	e7d9      	b.n	800a7b8 <__sfp+0x1c>
 800a804:	2104      	movs	r1, #4
 800a806:	4638      	mov	r0, r7
 800a808:	f7ff ff62 	bl	800a6d0 <__sfmoreglue>
 800a80c:	4604      	mov	r4, r0
 800a80e:	6030      	str	r0, [r6, #0]
 800a810:	2800      	cmp	r0, #0
 800a812:	d1d5      	bne.n	800a7c0 <__sfp+0x24>
 800a814:	f7ff ff78 	bl	800a708 <__sfp_lock_release>
 800a818:	230c      	movs	r3, #12
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	e7ee      	b.n	800a7fc <__sfp+0x60>
 800a81e:	bf00      	nop
 800a820:	0800c55c 	.word	0x0800c55c
 800a824:	ffff0001 	.word	0xffff0001

0800a828 <_fwalk_reent>:
 800a828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	4606      	mov	r6, r0
 800a82e:	4688      	mov	r8, r1
 800a830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a834:	2700      	movs	r7, #0
 800a836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a83a:	f1b9 0901 	subs.w	r9, r9, #1
 800a83e:	d505      	bpl.n	800a84c <_fwalk_reent+0x24>
 800a840:	6824      	ldr	r4, [r4, #0]
 800a842:	2c00      	cmp	r4, #0
 800a844:	d1f7      	bne.n	800a836 <_fwalk_reent+0xe>
 800a846:	4638      	mov	r0, r7
 800a848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84c:	89ab      	ldrh	r3, [r5, #12]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d907      	bls.n	800a862 <_fwalk_reent+0x3a>
 800a852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a856:	3301      	adds	r3, #1
 800a858:	d003      	beq.n	800a862 <_fwalk_reent+0x3a>
 800a85a:	4629      	mov	r1, r5
 800a85c:	4630      	mov	r0, r6
 800a85e:	47c0      	blx	r8
 800a860:	4307      	orrs	r7, r0
 800a862:	3568      	adds	r5, #104	; 0x68
 800a864:	e7e9      	b.n	800a83a <_fwalk_reent+0x12>

0800a866 <__retarget_lock_init_recursive>:
 800a866:	4770      	bx	lr

0800a868 <__retarget_lock_acquire_recursive>:
 800a868:	4770      	bx	lr

0800a86a <__retarget_lock_release_recursive>:
 800a86a:	4770      	bx	lr

0800a86c <_lseek_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4d07      	ldr	r5, [pc, #28]	; (800a88c <_lseek_r+0x20>)
 800a870:	4604      	mov	r4, r0
 800a872:	4608      	mov	r0, r1
 800a874:	4611      	mov	r1, r2
 800a876:	2200      	movs	r2, #0
 800a878:	602a      	str	r2, [r5, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	f7f7 fc20 	bl	80020c0 <_lseek>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_lseek_r+0x1e>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_lseek_r+0x1e>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000a38 	.word	0x20000a38

0800a890 <_malloc_r>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	1ccd      	adds	r5, r1, #3
 800a894:	f025 0503 	bic.w	r5, r5, #3
 800a898:	3508      	adds	r5, #8
 800a89a:	2d0c      	cmp	r5, #12
 800a89c:	bf38      	it	cc
 800a89e:	250c      	movcc	r5, #12
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	db01      	blt.n	800a8aa <_malloc_r+0x1a>
 800a8a6:	42a9      	cmp	r1, r5
 800a8a8:	d903      	bls.n	800a8b2 <_malloc_r+0x22>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b2:	f001 fb57 	bl	800bf64 <__malloc_lock>
 800a8b6:	4921      	ldr	r1, [pc, #132]	; (800a93c <_malloc_r+0xac>)
 800a8b8:	680a      	ldr	r2, [r1, #0]
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	b99c      	cbnz	r4, 800a8e6 <_malloc_r+0x56>
 800a8be:	4f20      	ldr	r7, [pc, #128]	; (800a940 <_malloc_r+0xb0>)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	b923      	cbnz	r3, 800a8ce <_malloc_r+0x3e>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 ffb6 	bl	800b838 <_sbrk_r>
 800a8cc:	6038      	str	r0, [r7, #0]
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 ffb1 	bl	800b838 <_sbrk_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d123      	bne.n	800a922 <_malloc_r+0x92>
 800a8da:	230c      	movs	r3, #12
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f001 fb46 	bl	800bf70 <__malloc_unlock>
 800a8e4:	e7e3      	b.n	800a8ae <_malloc_r+0x1e>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	1b5b      	subs	r3, r3, r5
 800a8ea:	d417      	bmi.n	800a91c <_malloc_r+0x8c>
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d903      	bls.n	800a8f8 <_malloc_r+0x68>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	441c      	add	r4, r3
 800a8f4:	6025      	str	r5, [r4, #0]
 800a8f6:	e004      	b.n	800a902 <_malloc_r+0x72>
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	42a2      	cmp	r2, r4
 800a8fc:	bf0c      	ite	eq
 800a8fe:	600b      	streq	r3, [r1, #0]
 800a900:	6053      	strne	r3, [r2, #4]
 800a902:	4630      	mov	r0, r6
 800a904:	f001 fb34 	bl	800bf70 <__malloc_unlock>
 800a908:	f104 000b 	add.w	r0, r4, #11
 800a90c:	1d23      	adds	r3, r4, #4
 800a90e:	f020 0007 	bic.w	r0, r0, #7
 800a912:	1ac2      	subs	r2, r0, r3
 800a914:	d0cc      	beq.n	800a8b0 <_malloc_r+0x20>
 800a916:	1a1b      	subs	r3, r3, r0
 800a918:	50a3      	str	r3, [r4, r2]
 800a91a:	e7c9      	b.n	800a8b0 <_malloc_r+0x20>
 800a91c:	4622      	mov	r2, r4
 800a91e:	6864      	ldr	r4, [r4, #4]
 800a920:	e7cc      	b.n	800a8bc <_malloc_r+0x2c>
 800a922:	1cc4      	adds	r4, r0, #3
 800a924:	f024 0403 	bic.w	r4, r4, #3
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d0e3      	beq.n	800a8f4 <_malloc_r+0x64>
 800a92c:	1a21      	subs	r1, r4, r0
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 ff82 	bl	800b838 <_sbrk_r>
 800a934:	3001      	adds	r0, #1
 800a936:	d1dd      	bne.n	800a8f4 <_malloc_r+0x64>
 800a938:	e7cf      	b.n	800a8da <_malloc_r+0x4a>
 800a93a:	bf00      	nop
 800a93c:	20000160 	.word	0x20000160
 800a940:	20000164 	.word	0x20000164

0800a944 <__ssputs_r>:
 800a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	688e      	ldr	r6, [r1, #8]
 800a94a:	429e      	cmp	r6, r3
 800a94c:	4682      	mov	sl, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4690      	mov	r8, r2
 800a952:	461f      	mov	r7, r3
 800a954:	d838      	bhi.n	800a9c8 <__ssputs_r+0x84>
 800a956:	898a      	ldrh	r2, [r1, #12]
 800a958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a95c:	d032      	beq.n	800a9c4 <__ssputs_r+0x80>
 800a95e:	6825      	ldr	r5, [r4, #0]
 800a960:	6909      	ldr	r1, [r1, #16]
 800a962:	eba5 0901 	sub.w	r9, r5, r1
 800a966:	6965      	ldr	r5, [r4, #20]
 800a968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a96c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a970:	3301      	adds	r3, #1
 800a972:	444b      	add	r3, r9
 800a974:	106d      	asrs	r5, r5, #1
 800a976:	429d      	cmp	r5, r3
 800a978:	bf38      	it	cc
 800a97a:	461d      	movcc	r5, r3
 800a97c:	0553      	lsls	r3, r2, #21
 800a97e:	d531      	bpl.n	800a9e4 <__ssputs_r+0xa0>
 800a980:	4629      	mov	r1, r5
 800a982:	f7ff ff85 	bl	800a890 <_malloc_r>
 800a986:	4606      	mov	r6, r0
 800a988:	b950      	cbnz	r0, 800a9a0 <__ssputs_r+0x5c>
 800a98a:	230c      	movs	r3, #12
 800a98c:	f8ca 3000 	str.w	r3, [sl]
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a0:	6921      	ldr	r1, [r4, #16]
 800a9a2:	464a      	mov	r2, r9
 800a9a4:	f001 fab6 	bl	800bf14 <memcpy>
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	6126      	str	r6, [r4, #16]
 800a9b6:	6165      	str	r5, [r4, #20]
 800a9b8:	444e      	add	r6, r9
 800a9ba:	eba5 0509 	sub.w	r5, r5, r9
 800a9be:	6026      	str	r6, [r4, #0]
 800a9c0:	60a5      	str	r5, [r4, #8]
 800a9c2:	463e      	mov	r6, r7
 800a9c4:	42be      	cmp	r6, r7
 800a9c6:	d900      	bls.n	800a9ca <__ssputs_r+0x86>
 800a9c8:	463e      	mov	r6, r7
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	6820      	ldr	r0, [r4, #0]
 800a9ce:	4641      	mov	r1, r8
 800a9d0:	f001 faae 	bl	800bf30 <memmove>
 800a9d4:	68a3      	ldr	r3, [r4, #8]
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	1b9b      	subs	r3, r3, r6
 800a9da:	4432      	add	r2, r6
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	6022      	str	r2, [r4, #0]
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7db      	b.n	800a99c <__ssputs_r+0x58>
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	f001 fb19 	bl	800c01c <_realloc_r>
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d1e1      	bne.n	800a9b4 <__ssputs_r+0x70>
 800a9f0:	6921      	ldr	r1, [r4, #16]
 800a9f2:	4650      	mov	r0, sl
 800a9f4:	f001 fac2 	bl	800bf7c <_free_r>
 800a9f8:	e7c7      	b.n	800a98a <__ssputs_r+0x46>
	...

0800a9fc <_svfiprintf_r>:
 800a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	4698      	mov	r8, r3
 800aa02:	898b      	ldrh	r3, [r1, #12]
 800aa04:	061b      	lsls	r3, r3, #24
 800aa06:	b09d      	sub	sp, #116	; 0x74
 800aa08:	4607      	mov	r7, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	d50e      	bpl.n	800aa2e <_svfiprintf_r+0x32>
 800aa10:	690b      	ldr	r3, [r1, #16]
 800aa12:	b963      	cbnz	r3, 800aa2e <_svfiprintf_r+0x32>
 800aa14:	2140      	movs	r1, #64	; 0x40
 800aa16:	f7ff ff3b 	bl	800a890 <_malloc_r>
 800aa1a:	6028      	str	r0, [r5, #0]
 800aa1c:	6128      	str	r0, [r5, #16]
 800aa1e:	b920      	cbnz	r0, 800aa2a <_svfiprintf_r+0x2e>
 800aa20:	230c      	movs	r3, #12
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	e0d1      	b.n	800abce <_svfiprintf_r+0x1d2>
 800aa2a:	2340      	movs	r3, #64	; 0x40
 800aa2c:	616b      	str	r3, [r5, #20]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9309      	str	r3, [sp, #36]	; 0x24
 800aa32:	2320      	movs	r3, #32
 800aa34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa38:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3c:	2330      	movs	r3, #48	; 0x30
 800aa3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abe8 <_svfiprintf_r+0x1ec>
 800aa42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa46:	f04f 0901 	mov.w	r9, #1
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	469a      	mov	sl, r3
 800aa4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa52:	b10a      	cbz	r2, 800aa58 <_svfiprintf_r+0x5c>
 800aa54:	2a25      	cmp	r2, #37	; 0x25
 800aa56:	d1f9      	bne.n	800aa4c <_svfiprintf_r+0x50>
 800aa58:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5c:	d00b      	beq.n	800aa76 <_svfiprintf_r+0x7a>
 800aa5e:	465b      	mov	r3, fp
 800aa60:	4622      	mov	r2, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff ff6d 	bl	800a944 <__ssputs_r>
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	f000 80aa 	beq.w	800abc4 <_svfiprintf_r+0x1c8>
 800aa70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa72:	445a      	add	r2, fp
 800aa74:	9209      	str	r2, [sp, #36]	; 0x24
 800aa76:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 80a2 	beq.w	800abc4 <_svfiprintf_r+0x1c8>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295
 800aa86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8a:	f10a 0a01 	add.w	sl, sl, #1
 800aa8e:	9304      	str	r3, [sp, #16]
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa96:	931a      	str	r3, [sp, #104]	; 0x68
 800aa98:	4654      	mov	r4, sl
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa0:	4851      	ldr	r0, [pc, #324]	; (800abe8 <_svfiprintf_r+0x1ec>)
 800aaa2:	f7f5 fbb5 	bl	8000210 <memchr>
 800aaa6:	9a04      	ldr	r2, [sp, #16]
 800aaa8:	b9d8      	cbnz	r0, 800aae2 <_svfiprintf_r+0xe6>
 800aaaa:	06d0      	lsls	r0, r2, #27
 800aaac:	bf44      	itt	mi
 800aaae:	2320      	movmi	r3, #32
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab4:	0711      	lsls	r1, r2, #28
 800aab6:	bf44      	itt	mi
 800aab8:	232b      	movmi	r3, #43	; 0x2b
 800aaba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aabe:	f89a 3000 	ldrb.w	r3, [sl]
 800aac2:	2b2a      	cmp	r3, #42	; 0x2a
 800aac4:	d015      	beq.n	800aaf2 <_svfiprintf_r+0xf6>
 800aac6:	9a07      	ldr	r2, [sp, #28]
 800aac8:	4654      	mov	r4, sl
 800aaca:	2000      	movs	r0, #0
 800aacc:	f04f 0c0a 	mov.w	ip, #10
 800aad0:	4621      	mov	r1, r4
 800aad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad6:	3b30      	subs	r3, #48	; 0x30
 800aad8:	2b09      	cmp	r3, #9
 800aada:	d94e      	bls.n	800ab7a <_svfiprintf_r+0x17e>
 800aadc:	b1b0      	cbz	r0, 800ab0c <_svfiprintf_r+0x110>
 800aade:	9207      	str	r2, [sp, #28]
 800aae0:	e014      	b.n	800ab0c <_svfiprintf_r+0x110>
 800aae2:	eba0 0308 	sub.w	r3, r0, r8
 800aae6:	fa09 f303 	lsl.w	r3, r9, r3
 800aaea:	4313      	orrs	r3, r2
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	46a2      	mov	sl, r4
 800aaf0:	e7d2      	b.n	800aa98 <_svfiprintf_r+0x9c>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	1d19      	adds	r1, r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9103      	str	r1, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfbb      	ittet	lt
 800aafe:	425b      	neglt	r3, r3
 800ab00:	f042 0202 	orrlt.w	r2, r2, #2
 800ab04:	9307      	strge	r3, [sp, #28]
 800ab06:	9307      	strlt	r3, [sp, #28]
 800ab08:	bfb8      	it	lt
 800ab0a:	9204      	strlt	r2, [sp, #16]
 800ab0c:	7823      	ldrb	r3, [r4, #0]
 800ab0e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab10:	d10c      	bne.n	800ab2c <_svfiprintf_r+0x130>
 800ab12:	7863      	ldrb	r3, [r4, #1]
 800ab14:	2b2a      	cmp	r3, #42	; 0x2a
 800ab16:	d135      	bne.n	800ab84 <_svfiprintf_r+0x188>
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	1d1a      	adds	r2, r3, #4
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	9203      	str	r2, [sp, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bfb8      	it	lt
 800ab24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab28:	3402      	adds	r4, #2
 800ab2a:	9305      	str	r3, [sp, #20]
 800ab2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abf8 <_svfiprintf_r+0x1fc>
 800ab30:	7821      	ldrb	r1, [r4, #0]
 800ab32:	2203      	movs	r2, #3
 800ab34:	4650      	mov	r0, sl
 800ab36:	f7f5 fb6b 	bl	8000210 <memchr>
 800ab3a:	b140      	cbz	r0, 800ab4e <_svfiprintf_r+0x152>
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	eba0 000a 	sub.w	r0, r0, sl
 800ab42:	fa03 f000 	lsl.w	r0, r3, r0
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	4303      	orrs	r3, r0
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	4826      	ldr	r0, [pc, #152]	; (800abec <_svfiprintf_r+0x1f0>)
 800ab54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab58:	2206      	movs	r2, #6
 800ab5a:	f7f5 fb59 	bl	8000210 <memchr>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d038      	beq.n	800abd4 <_svfiprintf_r+0x1d8>
 800ab62:	4b23      	ldr	r3, [pc, #140]	; (800abf0 <_svfiprintf_r+0x1f4>)
 800ab64:	bb1b      	cbnz	r3, 800abae <_svfiprintf_r+0x1b2>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	3308      	adds	r3, #8
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab74:	4433      	add	r3, r6
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	e767      	b.n	800aa4a <_svfiprintf_r+0x4e>
 800ab7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7a5      	b.n	800aad0 <_svfiprintf_r+0xd4>
 800ab84:	2300      	movs	r3, #0
 800ab86:	3401      	adds	r4, #1
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	4620      	mov	r0, r4
 800ab92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab96:	3a30      	subs	r2, #48	; 0x30
 800ab98:	2a09      	cmp	r2, #9
 800ab9a:	d903      	bls.n	800aba4 <_svfiprintf_r+0x1a8>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c5      	beq.n	800ab2c <_svfiprintf_r+0x130>
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	e7c3      	b.n	800ab2c <_svfiprintf_r+0x130>
 800aba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba8:	4604      	mov	r4, r0
 800abaa:	2301      	movs	r3, #1
 800abac:	e7f0      	b.n	800ab90 <_svfiprintf_r+0x194>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b0f      	ldr	r3, [pc, #60]	; (800abf4 <_svfiprintf_r+0x1f8>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4638      	mov	r0, r7
 800abba:	f3af 8000 	nop.w
 800abbe:	1c42      	adds	r2, r0, #1
 800abc0:	4606      	mov	r6, r0
 800abc2:	d1d6      	bne.n	800ab72 <_svfiprintf_r+0x176>
 800abc4:	89ab      	ldrh	r3, [r5, #12]
 800abc6:	065b      	lsls	r3, r3, #25
 800abc8:	f53f af2c 	bmi.w	800aa24 <_svfiprintf_r+0x28>
 800abcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abce:	b01d      	add	sp, #116	; 0x74
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	ab03      	add	r3, sp, #12
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	462a      	mov	r2, r5
 800abda:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <_svfiprintf_r+0x1f8>)
 800abdc:	a904      	add	r1, sp, #16
 800abde:	4638      	mov	r0, r7
 800abe0:	f000 fba6 	bl	800b330 <_printf_i>
 800abe4:	e7eb      	b.n	800abbe <_svfiprintf_r+0x1c2>
 800abe6:	bf00      	nop
 800abe8:	0800c5c0 	.word	0x0800c5c0
 800abec:	0800c5ca 	.word	0x0800c5ca
 800abf0:	00000000 	.word	0x00000000
 800abf4:	0800a945 	.word	0x0800a945
 800abf8:	0800c5c6 	.word	0x0800c5c6

0800abfc <_sungetc_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	1c4b      	adds	r3, r1, #1
 800ac00:	4614      	mov	r4, r2
 800ac02:	d103      	bne.n	800ac0c <_sungetc_r+0x10>
 800ac04:	f04f 35ff 	mov.w	r5, #4294967295
 800ac08:	4628      	mov	r0, r5
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	8993      	ldrh	r3, [r2, #12]
 800ac0e:	f023 0320 	bic.w	r3, r3, #32
 800ac12:	8193      	strh	r3, [r2, #12]
 800ac14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac16:	6852      	ldr	r2, [r2, #4]
 800ac18:	b2cd      	uxtb	r5, r1
 800ac1a:	b18b      	cbz	r3, 800ac40 <_sungetc_r+0x44>
 800ac1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	dd08      	ble.n	800ac34 <_sungetc_r+0x38>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	1e5a      	subs	r2, r3, #1
 800ac26:	6022      	str	r2, [r4, #0]
 800ac28:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	6063      	str	r3, [r4, #4]
 800ac32:	e7e9      	b.n	800ac08 <_sungetc_r+0xc>
 800ac34:	4621      	mov	r1, r4
 800ac36:	f000 ff4d 	bl	800bad4 <__submore>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0f1      	beq.n	800ac22 <_sungetc_r+0x26>
 800ac3e:	e7e1      	b.n	800ac04 <_sungetc_r+0x8>
 800ac40:	6921      	ldr	r1, [r4, #16]
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	b151      	cbz	r1, 800ac5c <_sungetc_r+0x60>
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d208      	bcs.n	800ac5c <_sungetc_r+0x60>
 800ac4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ac4e:	42a9      	cmp	r1, r5
 800ac50:	d104      	bne.n	800ac5c <_sungetc_r+0x60>
 800ac52:	3b01      	subs	r3, #1
 800ac54:	3201      	adds	r2, #1
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	6062      	str	r2, [r4, #4]
 800ac5a:	e7d5      	b.n	800ac08 <_sungetc_r+0xc>
 800ac5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ac60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac64:	6363      	str	r3, [r4, #52]	; 0x34
 800ac66:	2303      	movs	r3, #3
 800ac68:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	2301      	movs	r3, #1
 800ac74:	e7dc      	b.n	800ac30 <_sungetc_r+0x34>

0800ac76 <__ssrefill_r>:
 800ac76:	b510      	push	{r4, lr}
 800ac78:	460c      	mov	r4, r1
 800ac7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ac7c:	b169      	cbz	r1, 800ac9a <__ssrefill_r+0x24>
 800ac7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac82:	4299      	cmp	r1, r3
 800ac84:	d001      	beq.n	800ac8a <__ssrefill_r+0x14>
 800ac86:	f001 f979 	bl	800bf7c <_free_r>
 800ac8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	2000      	movs	r0, #0
 800ac90:	6360      	str	r0, [r4, #52]	; 0x34
 800ac92:	b113      	cbz	r3, 800ac9a <__ssrefill_r+0x24>
 800ac94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	81a3      	strh	r3, [r4, #12]
 800acaa:	f04f 30ff 	mov.w	r0, #4294967295
 800acae:	e7f3      	b.n	800ac98 <__ssrefill_r+0x22>

0800acb0 <__ssvfiscanf_r>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800acba:	2100      	movs	r1, #0
 800acbc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800acc0:	49b2      	ldr	r1, [pc, #712]	; (800af8c <__ssvfiscanf_r+0x2dc>)
 800acc2:	91a0      	str	r1, [sp, #640]	; 0x280
 800acc4:	f10d 0804 	add.w	r8, sp, #4
 800acc8:	49b1      	ldr	r1, [pc, #708]	; (800af90 <__ssvfiscanf_r+0x2e0>)
 800acca:	4fb2      	ldr	r7, [pc, #712]	; (800af94 <__ssvfiscanf_r+0x2e4>)
 800accc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800af98 <__ssvfiscanf_r+0x2e8>
 800acd0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800acd4:	4606      	mov	r6, r0
 800acd6:	91a1      	str	r1, [sp, #644]	; 0x284
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	f892 a000 	ldrb.w	sl, [r2]
 800acde:	f1ba 0f00 	cmp.w	sl, #0
 800ace2:	f000 8151 	beq.w	800af88 <__ssvfiscanf_r+0x2d8>
 800ace6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800acea:	f013 0308 	ands.w	r3, r3, #8
 800acee:	f102 0501 	add.w	r5, r2, #1
 800acf2:	d019      	beq.n	800ad28 <__ssvfiscanf_r+0x78>
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd0f      	ble.n	800ad1a <__ssvfiscanf_r+0x6a>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	781a      	ldrb	r2, [r3, #0]
 800acfe:	5cba      	ldrb	r2, [r7, r2]
 800ad00:	0712      	lsls	r2, r2, #28
 800ad02:	d401      	bmi.n	800ad08 <__ssvfiscanf_r+0x58>
 800ad04:	462a      	mov	r2, r5
 800ad06:	e7e8      	b.n	800acda <__ssvfiscanf_r+0x2a>
 800ad08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad0a:	3201      	adds	r2, #1
 800ad0c:	9245      	str	r2, [sp, #276]	; 0x114
 800ad0e:	6862      	ldr	r2, [r4, #4]
 800ad10:	3301      	adds	r3, #1
 800ad12:	3a01      	subs	r2, #1
 800ad14:	6062      	str	r2, [r4, #4]
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	e7ec      	b.n	800acf4 <__ssvfiscanf_r+0x44>
 800ad1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4630      	mov	r0, r6
 800ad20:	4798      	blx	r3
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0e9      	beq.n	800acfa <__ssvfiscanf_r+0x4a>
 800ad26:	e7ed      	b.n	800ad04 <__ssvfiscanf_r+0x54>
 800ad28:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ad2c:	f040 8083 	bne.w	800ae36 <__ssvfiscanf_r+0x186>
 800ad30:	9341      	str	r3, [sp, #260]	; 0x104
 800ad32:	9343      	str	r3, [sp, #268]	; 0x10c
 800ad34:	7853      	ldrb	r3, [r2, #1]
 800ad36:	2b2a      	cmp	r3, #42	; 0x2a
 800ad38:	bf02      	ittt	eq
 800ad3a:	2310      	moveq	r3, #16
 800ad3c:	1c95      	addeq	r5, r2, #2
 800ad3e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ad40:	220a      	movs	r2, #10
 800ad42:	46ab      	mov	fp, r5
 800ad44:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ad48:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d91d      	bls.n	800ad8c <__ssvfiscanf_r+0xdc>
 800ad50:	4891      	ldr	r0, [pc, #580]	; (800af98 <__ssvfiscanf_r+0x2e8>)
 800ad52:	2203      	movs	r2, #3
 800ad54:	f7f5 fa5c 	bl	8000210 <memchr>
 800ad58:	b140      	cbz	r0, 800ad6c <__ssvfiscanf_r+0xbc>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	eba0 0009 	sub.w	r0, r0, r9
 800ad60:	fa03 f000 	lsl.w	r0, r3, r0
 800ad64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad66:	4318      	orrs	r0, r3
 800ad68:	9041      	str	r0, [sp, #260]	; 0x104
 800ad6a:	465d      	mov	r5, fp
 800ad6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad70:	2b78      	cmp	r3, #120	; 0x78
 800ad72:	d806      	bhi.n	800ad82 <__ssvfiscanf_r+0xd2>
 800ad74:	2b57      	cmp	r3, #87	; 0x57
 800ad76:	d810      	bhi.n	800ad9a <__ssvfiscanf_r+0xea>
 800ad78:	2b25      	cmp	r3, #37	; 0x25
 800ad7a:	d05c      	beq.n	800ae36 <__ssvfiscanf_r+0x186>
 800ad7c:	d856      	bhi.n	800ae2c <__ssvfiscanf_r+0x17c>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d074      	beq.n	800ae6c <__ssvfiscanf_r+0x1bc>
 800ad82:	2303      	movs	r3, #3
 800ad84:	9347      	str	r3, [sp, #284]	; 0x11c
 800ad86:	230a      	movs	r3, #10
 800ad88:	9342      	str	r3, [sp, #264]	; 0x108
 800ad8a:	e081      	b.n	800ae90 <__ssvfiscanf_r+0x1e0>
 800ad8c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ad8e:	fb02 1303 	mla	r3, r2, r3, r1
 800ad92:	3b30      	subs	r3, #48	; 0x30
 800ad94:	9343      	str	r3, [sp, #268]	; 0x10c
 800ad96:	465d      	mov	r5, fp
 800ad98:	e7d3      	b.n	800ad42 <__ssvfiscanf_r+0x92>
 800ad9a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ad9e:	2a20      	cmp	r2, #32
 800ada0:	d8ef      	bhi.n	800ad82 <__ssvfiscanf_r+0xd2>
 800ada2:	a101      	add	r1, pc, #4	; (adr r1, 800ada8 <__ssvfiscanf_r+0xf8>)
 800ada4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ada8:	0800ae7b 	.word	0x0800ae7b
 800adac:	0800ad83 	.word	0x0800ad83
 800adb0:	0800ad83 	.word	0x0800ad83
 800adb4:	0800aed9 	.word	0x0800aed9
 800adb8:	0800ad83 	.word	0x0800ad83
 800adbc:	0800ad83 	.word	0x0800ad83
 800adc0:	0800ad83 	.word	0x0800ad83
 800adc4:	0800ad83 	.word	0x0800ad83
 800adc8:	0800ad83 	.word	0x0800ad83
 800adcc:	0800ad83 	.word	0x0800ad83
 800add0:	0800ad83 	.word	0x0800ad83
 800add4:	0800aeef 	.word	0x0800aeef
 800add8:	0800aec5 	.word	0x0800aec5
 800addc:	0800ae33 	.word	0x0800ae33
 800ade0:	0800ae33 	.word	0x0800ae33
 800ade4:	0800ae33 	.word	0x0800ae33
 800ade8:	0800ad83 	.word	0x0800ad83
 800adec:	0800aec9 	.word	0x0800aec9
 800adf0:	0800ad83 	.word	0x0800ad83
 800adf4:	0800ad83 	.word	0x0800ad83
 800adf8:	0800ad83 	.word	0x0800ad83
 800adfc:	0800ad83 	.word	0x0800ad83
 800ae00:	0800aeff 	.word	0x0800aeff
 800ae04:	0800aed1 	.word	0x0800aed1
 800ae08:	0800ae73 	.word	0x0800ae73
 800ae0c:	0800ad83 	.word	0x0800ad83
 800ae10:	0800ad83 	.word	0x0800ad83
 800ae14:	0800aefb 	.word	0x0800aefb
 800ae18:	0800ad83 	.word	0x0800ad83
 800ae1c:	0800aec5 	.word	0x0800aec5
 800ae20:	0800ad83 	.word	0x0800ad83
 800ae24:	0800ad83 	.word	0x0800ad83
 800ae28:	0800ae7b 	.word	0x0800ae7b
 800ae2c:	3b45      	subs	r3, #69	; 0x45
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d8a7      	bhi.n	800ad82 <__ssvfiscanf_r+0xd2>
 800ae32:	2305      	movs	r3, #5
 800ae34:	e02b      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800ae36:	6863      	ldr	r3, [r4, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dd0d      	ble.n	800ae58 <__ssvfiscanf_r+0x1a8>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	4552      	cmp	r2, sl
 800ae42:	f040 80a1 	bne.w	800af88 <__ssvfiscanf_r+0x2d8>
 800ae46:	3301      	adds	r3, #1
 800ae48:	6862      	ldr	r2, [r4, #4]
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ae4e:	3a01      	subs	r2, #1
 800ae50:	3301      	adds	r3, #1
 800ae52:	6062      	str	r2, [r4, #4]
 800ae54:	9345      	str	r3, [sp, #276]	; 0x114
 800ae56:	e755      	b.n	800ad04 <__ssvfiscanf_r+0x54>
 800ae58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4798      	blx	r3
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0eb      	beq.n	800ae3c <__ssvfiscanf_r+0x18c>
 800ae64:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f040 8084 	bne.w	800af74 <__ssvfiscanf_r+0x2c4>
 800ae6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae70:	e086      	b.n	800af80 <__ssvfiscanf_r+0x2d0>
 800ae72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ae74:	f042 0220 	orr.w	r2, r2, #32
 800ae78:	9241      	str	r2, [sp, #260]	; 0x104
 800ae7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ae7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae80:	9241      	str	r2, [sp, #260]	; 0x104
 800ae82:	2210      	movs	r2, #16
 800ae84:	2b6f      	cmp	r3, #111	; 0x6f
 800ae86:	9242      	str	r2, [sp, #264]	; 0x108
 800ae88:	bf34      	ite	cc
 800ae8a:	2303      	movcc	r3, #3
 800ae8c:	2304      	movcs	r3, #4
 800ae8e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae90:	6863      	ldr	r3, [r4, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dd41      	ble.n	800af1a <__ssvfiscanf_r+0x26a>
 800ae96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae98:	0659      	lsls	r1, r3, #25
 800ae9a:	d404      	bmi.n	800aea6 <__ssvfiscanf_r+0x1f6>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	5cba      	ldrb	r2, [r7, r2]
 800aea2:	0712      	lsls	r2, r2, #28
 800aea4:	d440      	bmi.n	800af28 <__ssvfiscanf_r+0x278>
 800aea6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	dc4f      	bgt.n	800af4c <__ssvfiscanf_r+0x29c>
 800aeac:	466b      	mov	r3, sp
 800aeae:	4622      	mov	r2, r4
 800aeb0:	a941      	add	r1, sp, #260	; 0x104
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f000 fb62 	bl	800b57c <_scanf_chars>
 800aeb8:	2801      	cmp	r0, #1
 800aeba:	d065      	beq.n	800af88 <__ssvfiscanf_r+0x2d8>
 800aebc:	2802      	cmp	r0, #2
 800aebe:	f47f af21 	bne.w	800ad04 <__ssvfiscanf_r+0x54>
 800aec2:	e7cf      	b.n	800ae64 <__ssvfiscanf_r+0x1b4>
 800aec4:	220a      	movs	r2, #10
 800aec6:	e7dd      	b.n	800ae84 <__ssvfiscanf_r+0x1d4>
 800aec8:	2300      	movs	r3, #0
 800aeca:	9342      	str	r3, [sp, #264]	; 0x108
 800aecc:	2303      	movs	r3, #3
 800aece:	e7de      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800aed0:	2308      	movs	r3, #8
 800aed2:	9342      	str	r3, [sp, #264]	; 0x108
 800aed4:	2304      	movs	r3, #4
 800aed6:	e7da      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800aed8:	4629      	mov	r1, r5
 800aeda:	4640      	mov	r0, r8
 800aedc:	f000 fcbc 	bl	800b858 <__sccl>
 800aee0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee6:	9341      	str	r3, [sp, #260]	; 0x104
 800aee8:	4605      	mov	r5, r0
 800aeea:	2301      	movs	r3, #1
 800aeec:	e7cf      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800aeee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef4:	9341      	str	r3, [sp, #260]	; 0x104
 800aef6:	2300      	movs	r3, #0
 800aef8:	e7c9      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800aefa:	2302      	movs	r3, #2
 800aefc:	e7c7      	b.n	800ae8e <__ssvfiscanf_r+0x1de>
 800aefe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800af00:	06c3      	lsls	r3, r0, #27
 800af02:	f53f aeff 	bmi.w	800ad04 <__ssvfiscanf_r+0x54>
 800af06:	9b00      	ldr	r3, [sp, #0]
 800af08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af0a:	1d19      	adds	r1, r3, #4
 800af0c:	9100      	str	r1, [sp, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	07c0      	lsls	r0, r0, #31
 800af12:	bf4c      	ite	mi
 800af14:	801a      	strhmi	r2, [r3, #0]
 800af16:	601a      	strpl	r2, [r3, #0]
 800af18:	e6f4      	b.n	800ad04 <__ssvfiscanf_r+0x54>
 800af1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af1c:	4621      	mov	r1, r4
 800af1e:	4630      	mov	r0, r6
 800af20:	4798      	blx	r3
 800af22:	2800      	cmp	r0, #0
 800af24:	d0b7      	beq.n	800ae96 <__ssvfiscanf_r+0x1e6>
 800af26:	e79d      	b.n	800ae64 <__ssvfiscanf_r+0x1b4>
 800af28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af2a:	3201      	adds	r2, #1
 800af2c:	9245      	str	r2, [sp, #276]	; 0x114
 800af2e:	6862      	ldr	r2, [r4, #4]
 800af30:	3a01      	subs	r2, #1
 800af32:	2a00      	cmp	r2, #0
 800af34:	6062      	str	r2, [r4, #4]
 800af36:	dd02      	ble.n	800af3e <__ssvfiscanf_r+0x28e>
 800af38:	3301      	adds	r3, #1
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	e7ae      	b.n	800ae9c <__ssvfiscanf_r+0x1ec>
 800af3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af40:	4621      	mov	r1, r4
 800af42:	4630      	mov	r0, r6
 800af44:	4798      	blx	r3
 800af46:	2800      	cmp	r0, #0
 800af48:	d0a8      	beq.n	800ae9c <__ssvfiscanf_r+0x1ec>
 800af4a:	e78b      	b.n	800ae64 <__ssvfiscanf_r+0x1b4>
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	dc06      	bgt.n	800af5e <__ssvfiscanf_r+0x2ae>
 800af50:	466b      	mov	r3, sp
 800af52:	4622      	mov	r2, r4
 800af54:	a941      	add	r1, sp, #260	; 0x104
 800af56:	4630      	mov	r0, r6
 800af58:	f000 fb68 	bl	800b62c <_scanf_i>
 800af5c:	e7ac      	b.n	800aeb8 <__ssvfiscanf_r+0x208>
 800af5e:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <__ssvfiscanf_r+0x2ec>)
 800af60:	2b00      	cmp	r3, #0
 800af62:	f43f aecf 	beq.w	800ad04 <__ssvfiscanf_r+0x54>
 800af66:	466b      	mov	r3, sp
 800af68:	4622      	mov	r2, r4
 800af6a:	a941      	add	r1, sp, #260	; 0x104
 800af6c:	4630      	mov	r0, r6
 800af6e:	f3af 8000 	nop.w
 800af72:	e7a1      	b.n	800aeb8 <__ssvfiscanf_r+0x208>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af7a:	bf18      	it	ne
 800af7c:	f04f 30ff 	movne.w	r0, #4294967295
 800af80:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af88:	9844      	ldr	r0, [sp, #272]	; 0x110
 800af8a:	e7f9      	b.n	800af80 <__ssvfiscanf_r+0x2d0>
 800af8c:	0800abfd 	.word	0x0800abfd
 800af90:	0800ac77 	.word	0x0800ac77
 800af94:	0800c60f 	.word	0x0800c60f
 800af98:	0800c5c6 	.word	0x0800c5c6
 800af9c:	00000000 	.word	0x00000000

0800afa0 <__sfputc_r>:
 800afa0:	6893      	ldr	r3, [r2, #8]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	b410      	push	{r4}
 800afa8:	6093      	str	r3, [r2, #8]
 800afaa:	da08      	bge.n	800afbe <__sfputc_r+0x1e>
 800afac:	6994      	ldr	r4, [r2, #24]
 800afae:	42a3      	cmp	r3, r4
 800afb0:	db01      	blt.n	800afb6 <__sfputc_r+0x16>
 800afb2:	290a      	cmp	r1, #10
 800afb4:	d103      	bne.n	800afbe <__sfputc_r+0x1e>
 800afb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afba:	f000 bdc5 	b.w	800bb48 <__swbuf_r>
 800afbe:	6813      	ldr	r3, [r2, #0]
 800afc0:	1c58      	adds	r0, r3, #1
 800afc2:	6010      	str	r0, [r2, #0]
 800afc4:	7019      	strb	r1, [r3, #0]
 800afc6:	4608      	mov	r0, r1
 800afc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <__sfputs_r>:
 800afce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd0:	4606      	mov	r6, r0
 800afd2:	460f      	mov	r7, r1
 800afd4:	4614      	mov	r4, r2
 800afd6:	18d5      	adds	r5, r2, r3
 800afd8:	42ac      	cmp	r4, r5
 800afda:	d101      	bne.n	800afe0 <__sfputs_r+0x12>
 800afdc:	2000      	movs	r0, #0
 800afde:	e007      	b.n	800aff0 <__sfputs_r+0x22>
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	463a      	mov	r2, r7
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7ff ffda 	bl	800afa0 <__sfputc_r>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d1f3      	bne.n	800afd8 <__sfputs_r+0xa>
 800aff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aff4 <_vfiprintf_r>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	460d      	mov	r5, r1
 800affa:	b09d      	sub	sp, #116	; 0x74
 800affc:	4614      	mov	r4, r2
 800affe:	4698      	mov	r8, r3
 800b000:	4606      	mov	r6, r0
 800b002:	b118      	cbz	r0, 800b00c <_vfiprintf_r+0x18>
 800b004:	6983      	ldr	r3, [r0, #24]
 800b006:	b90b      	cbnz	r3, 800b00c <_vfiprintf_r+0x18>
 800b008:	f7ff fb90 	bl	800a72c <__sinit>
 800b00c:	4b89      	ldr	r3, [pc, #548]	; (800b234 <_vfiprintf_r+0x240>)
 800b00e:	429d      	cmp	r5, r3
 800b010:	d11b      	bne.n	800b04a <_vfiprintf_r+0x56>
 800b012:	6875      	ldr	r5, [r6, #4]
 800b014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b016:	07d9      	lsls	r1, r3, #31
 800b018:	d405      	bmi.n	800b026 <_vfiprintf_r+0x32>
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	059a      	lsls	r2, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_vfiprintf_r+0x32>
 800b020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b022:	f7ff fc21 	bl	800a868 <__retarget_lock_acquire_recursive>
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	071b      	lsls	r3, r3, #28
 800b02a:	d501      	bpl.n	800b030 <_vfiprintf_r+0x3c>
 800b02c:	692b      	ldr	r3, [r5, #16]
 800b02e:	b9eb      	cbnz	r3, 800b06c <_vfiprintf_r+0x78>
 800b030:	4629      	mov	r1, r5
 800b032:	4630      	mov	r0, r6
 800b034:	f000 fdda 	bl	800bbec <__swsetup_r>
 800b038:	b1c0      	cbz	r0, 800b06c <_vfiprintf_r+0x78>
 800b03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b03c:	07dc      	lsls	r4, r3, #31
 800b03e:	d50e      	bpl.n	800b05e <_vfiprintf_r+0x6a>
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	b01d      	add	sp, #116	; 0x74
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	4b7b      	ldr	r3, [pc, #492]	; (800b238 <_vfiprintf_r+0x244>)
 800b04c:	429d      	cmp	r5, r3
 800b04e:	d101      	bne.n	800b054 <_vfiprintf_r+0x60>
 800b050:	68b5      	ldr	r5, [r6, #8]
 800b052:	e7df      	b.n	800b014 <_vfiprintf_r+0x20>
 800b054:	4b79      	ldr	r3, [pc, #484]	; (800b23c <_vfiprintf_r+0x248>)
 800b056:	429d      	cmp	r5, r3
 800b058:	bf08      	it	eq
 800b05a:	68f5      	ldreq	r5, [r6, #12]
 800b05c:	e7da      	b.n	800b014 <_vfiprintf_r+0x20>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	0598      	lsls	r0, r3, #22
 800b062:	d4ed      	bmi.n	800b040 <_vfiprintf_r+0x4c>
 800b064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b066:	f7ff fc00 	bl	800a86a <__retarget_lock_release_recursive>
 800b06a:	e7e9      	b.n	800b040 <_vfiprintf_r+0x4c>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9309      	str	r3, [sp, #36]	; 0x24
 800b070:	2320      	movs	r3, #32
 800b072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b076:	f8cd 800c 	str.w	r8, [sp, #12]
 800b07a:	2330      	movs	r3, #48	; 0x30
 800b07c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b240 <_vfiprintf_r+0x24c>
 800b080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b084:	f04f 0901 	mov.w	r9, #1
 800b088:	4623      	mov	r3, r4
 800b08a:	469a      	mov	sl, r3
 800b08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b090:	b10a      	cbz	r2, 800b096 <_vfiprintf_r+0xa2>
 800b092:	2a25      	cmp	r2, #37	; 0x25
 800b094:	d1f9      	bne.n	800b08a <_vfiprintf_r+0x96>
 800b096:	ebba 0b04 	subs.w	fp, sl, r4
 800b09a:	d00b      	beq.n	800b0b4 <_vfiprintf_r+0xc0>
 800b09c:	465b      	mov	r3, fp
 800b09e:	4622      	mov	r2, r4
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7ff ff93 	bl	800afce <__sfputs_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f000 80aa 	beq.w	800b202 <_vfiprintf_r+0x20e>
 800b0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b0:	445a      	add	r2, fp
 800b0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 80a2 	beq.w	800b202 <_vfiprintf_r+0x20e>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c8:	f10a 0a01 	add.w	sl, sl, #1
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	9307      	str	r3, [sp, #28]
 800b0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0d6:	4654      	mov	r4, sl
 800b0d8:	2205      	movs	r2, #5
 800b0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0de:	4858      	ldr	r0, [pc, #352]	; (800b240 <_vfiprintf_r+0x24c>)
 800b0e0:	f7f5 f896 	bl	8000210 <memchr>
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	b9d8      	cbnz	r0, 800b120 <_vfiprintf_r+0x12c>
 800b0e8:	06d1      	lsls	r1, r2, #27
 800b0ea:	bf44      	itt	mi
 800b0ec:	2320      	movmi	r3, #32
 800b0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f2:	0713      	lsls	r3, r2, #28
 800b0f4:	bf44      	itt	mi
 800b0f6:	232b      	movmi	r3, #43	; 0x2b
 800b0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b100:	2b2a      	cmp	r3, #42	; 0x2a
 800b102:	d015      	beq.n	800b130 <_vfiprintf_r+0x13c>
 800b104:	9a07      	ldr	r2, [sp, #28]
 800b106:	4654      	mov	r4, sl
 800b108:	2000      	movs	r0, #0
 800b10a:	f04f 0c0a 	mov.w	ip, #10
 800b10e:	4621      	mov	r1, r4
 800b110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b114:	3b30      	subs	r3, #48	; 0x30
 800b116:	2b09      	cmp	r3, #9
 800b118:	d94e      	bls.n	800b1b8 <_vfiprintf_r+0x1c4>
 800b11a:	b1b0      	cbz	r0, 800b14a <_vfiprintf_r+0x156>
 800b11c:	9207      	str	r2, [sp, #28]
 800b11e:	e014      	b.n	800b14a <_vfiprintf_r+0x156>
 800b120:	eba0 0308 	sub.w	r3, r0, r8
 800b124:	fa09 f303 	lsl.w	r3, r9, r3
 800b128:	4313      	orrs	r3, r2
 800b12a:	9304      	str	r3, [sp, #16]
 800b12c:	46a2      	mov	sl, r4
 800b12e:	e7d2      	b.n	800b0d6 <_vfiprintf_r+0xe2>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	1d19      	adds	r1, r3, #4
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	9103      	str	r1, [sp, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	bfbb      	ittet	lt
 800b13c:	425b      	neglt	r3, r3
 800b13e:	f042 0202 	orrlt.w	r2, r2, #2
 800b142:	9307      	strge	r3, [sp, #28]
 800b144:	9307      	strlt	r3, [sp, #28]
 800b146:	bfb8      	it	lt
 800b148:	9204      	strlt	r2, [sp, #16]
 800b14a:	7823      	ldrb	r3, [r4, #0]
 800b14c:	2b2e      	cmp	r3, #46	; 0x2e
 800b14e:	d10c      	bne.n	800b16a <_vfiprintf_r+0x176>
 800b150:	7863      	ldrb	r3, [r4, #1]
 800b152:	2b2a      	cmp	r3, #42	; 0x2a
 800b154:	d135      	bne.n	800b1c2 <_vfiprintf_r+0x1ce>
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	1d1a      	adds	r2, r3, #4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	9203      	str	r2, [sp, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfb8      	it	lt
 800b162:	f04f 33ff 	movlt.w	r3, #4294967295
 800b166:	3402      	adds	r4, #2
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b250 <_vfiprintf_r+0x25c>
 800b16e:	7821      	ldrb	r1, [r4, #0]
 800b170:	2203      	movs	r2, #3
 800b172:	4650      	mov	r0, sl
 800b174:	f7f5 f84c 	bl	8000210 <memchr>
 800b178:	b140      	cbz	r0, 800b18c <_vfiprintf_r+0x198>
 800b17a:	2340      	movs	r3, #64	; 0x40
 800b17c:	eba0 000a 	sub.w	r0, r0, sl
 800b180:	fa03 f000 	lsl.w	r0, r3, r0
 800b184:	9b04      	ldr	r3, [sp, #16]
 800b186:	4303      	orrs	r3, r0
 800b188:	3401      	adds	r4, #1
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b190:	482c      	ldr	r0, [pc, #176]	; (800b244 <_vfiprintf_r+0x250>)
 800b192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b196:	2206      	movs	r2, #6
 800b198:	f7f5 f83a 	bl	8000210 <memchr>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d03f      	beq.n	800b220 <_vfiprintf_r+0x22c>
 800b1a0:	4b29      	ldr	r3, [pc, #164]	; (800b248 <_vfiprintf_r+0x254>)
 800b1a2:	bb1b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x1f8>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	3307      	adds	r3, #7
 800b1a8:	f023 0307 	bic.w	r3, r3, #7
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b2:	443b      	add	r3, r7
 800b1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b6:	e767      	b.n	800b088 <_vfiprintf_r+0x94>
 800b1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1bc:	460c      	mov	r4, r1
 800b1be:	2001      	movs	r0, #1
 800b1c0:	e7a5      	b.n	800b10e <_vfiprintf_r+0x11a>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f04f 0c0a 	mov.w	ip, #10
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d4:	3a30      	subs	r2, #48	; 0x30
 800b1d6:	2a09      	cmp	r2, #9
 800b1d8:	d903      	bls.n	800b1e2 <_vfiprintf_r+0x1ee>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0c5      	beq.n	800b16a <_vfiprintf_r+0x176>
 800b1de:	9105      	str	r1, [sp, #20]
 800b1e0:	e7c3      	b.n	800b16a <_vfiprintf_r+0x176>
 800b1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e7f0      	b.n	800b1ce <_vfiprintf_r+0x1da>
 800b1ec:	ab03      	add	r3, sp, #12
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	462a      	mov	r2, r5
 800b1f2:	4b16      	ldr	r3, [pc, #88]	; (800b24c <_vfiprintf_r+0x258>)
 800b1f4:	a904      	add	r1, sp, #16
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f3af 8000 	nop.w
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	1c78      	adds	r0, r7, #1
 800b200:	d1d6      	bne.n	800b1b0 <_vfiprintf_r+0x1bc>
 800b202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b204:	07d9      	lsls	r1, r3, #31
 800b206:	d405      	bmi.n	800b214 <_vfiprintf_r+0x220>
 800b208:	89ab      	ldrh	r3, [r5, #12]
 800b20a:	059a      	lsls	r2, r3, #22
 800b20c:	d402      	bmi.n	800b214 <_vfiprintf_r+0x220>
 800b20e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b210:	f7ff fb2b 	bl	800a86a <__retarget_lock_release_recursive>
 800b214:	89ab      	ldrh	r3, [r5, #12]
 800b216:	065b      	lsls	r3, r3, #25
 800b218:	f53f af12 	bmi.w	800b040 <_vfiprintf_r+0x4c>
 800b21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b21e:	e711      	b.n	800b044 <_vfiprintf_r+0x50>
 800b220:	ab03      	add	r3, sp, #12
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	462a      	mov	r2, r5
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <_vfiprintf_r+0x258>)
 800b228:	a904      	add	r1, sp, #16
 800b22a:	4630      	mov	r0, r6
 800b22c:	f000 f880 	bl	800b330 <_printf_i>
 800b230:	e7e4      	b.n	800b1fc <_vfiprintf_r+0x208>
 800b232:	bf00      	nop
 800b234:	0800c580 	.word	0x0800c580
 800b238:	0800c5a0 	.word	0x0800c5a0
 800b23c:	0800c560 	.word	0x0800c560
 800b240:	0800c5c0 	.word	0x0800c5c0
 800b244:	0800c5ca 	.word	0x0800c5ca
 800b248:	00000000 	.word	0x00000000
 800b24c:	0800afcf 	.word	0x0800afcf
 800b250:	0800c5c6 	.word	0x0800c5c6

0800b254 <_printf_common>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	4616      	mov	r6, r2
 800b25a:	4699      	mov	r9, r3
 800b25c:	688a      	ldr	r2, [r1, #8]
 800b25e:	690b      	ldr	r3, [r1, #16]
 800b260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b264:	4293      	cmp	r3, r2
 800b266:	bfb8      	it	lt
 800b268:	4613      	movlt	r3, r2
 800b26a:	6033      	str	r3, [r6, #0]
 800b26c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b270:	4607      	mov	r7, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b10a      	cbz	r2, 800b27a <_printf_common+0x26>
 800b276:	3301      	adds	r3, #1
 800b278:	6033      	str	r3, [r6, #0]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	0699      	lsls	r1, r3, #26
 800b27e:	bf42      	ittt	mi
 800b280:	6833      	ldrmi	r3, [r6, #0]
 800b282:	3302      	addmi	r3, #2
 800b284:	6033      	strmi	r3, [r6, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	f015 0506 	ands.w	r5, r5, #6
 800b28c:	d106      	bne.n	800b29c <_printf_common+0x48>
 800b28e:	f104 0a19 	add.w	sl, r4, #25
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	6832      	ldr	r2, [r6, #0]
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc26      	bgt.n	800b2ea <_printf_common+0x96>
 800b29c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2a0:	1e13      	subs	r3, r2, #0
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	bf18      	it	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	0692      	lsls	r2, r2, #26
 800b2aa:	d42b      	bmi.n	800b304 <_printf_common+0xb0>
 800b2ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	47c0      	blx	r8
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d01e      	beq.n	800b2f8 <_printf_common+0xa4>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	68e5      	ldr	r5, [r4, #12]
 800b2be:	6832      	ldr	r2, [r6, #0]
 800b2c0:	f003 0306 	and.w	r3, r3, #6
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	bf08      	it	eq
 800b2c8:	1aad      	subeq	r5, r5, r2
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	6922      	ldr	r2, [r4, #16]
 800b2ce:	bf0c      	ite	eq
 800b2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d4:	2500      	movne	r5, #0
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	bfc4      	itt	gt
 800b2da:	1a9b      	subgt	r3, r3, r2
 800b2dc:	18ed      	addgt	r5, r5, r3
 800b2de:	2600      	movs	r6, #0
 800b2e0:	341a      	adds	r4, #26
 800b2e2:	42b5      	cmp	r5, r6
 800b2e4:	d11a      	bne.n	800b31c <_printf_common+0xc8>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	e008      	b.n	800b2fc <_printf_common+0xa8>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	47c0      	blx	r8
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d103      	bne.n	800b300 <_printf_common+0xac>
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	3501      	adds	r5, #1
 800b302:	e7c6      	b.n	800b292 <_printf_common+0x3e>
 800b304:	18e1      	adds	r1, r4, r3
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	2030      	movs	r0, #48	; 0x30
 800b30a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b30e:	4422      	add	r2, r4
 800b310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b318:	3302      	adds	r3, #2
 800b31a:	e7c7      	b.n	800b2ac <_printf_common+0x58>
 800b31c:	2301      	movs	r3, #1
 800b31e:	4622      	mov	r2, r4
 800b320:	4649      	mov	r1, r9
 800b322:	4638      	mov	r0, r7
 800b324:	47c0      	blx	r8
 800b326:	3001      	adds	r0, #1
 800b328:	d0e6      	beq.n	800b2f8 <_printf_common+0xa4>
 800b32a:	3601      	adds	r6, #1
 800b32c:	e7d9      	b.n	800b2e2 <_printf_common+0x8e>
	...

0800b330 <_printf_i>:
 800b330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b334:	460c      	mov	r4, r1
 800b336:	4691      	mov	r9, r2
 800b338:	7e27      	ldrb	r7, [r4, #24]
 800b33a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b33c:	2f78      	cmp	r7, #120	; 0x78
 800b33e:	4680      	mov	r8, r0
 800b340:	469a      	mov	sl, r3
 800b342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b346:	d807      	bhi.n	800b358 <_printf_i+0x28>
 800b348:	2f62      	cmp	r7, #98	; 0x62
 800b34a:	d80a      	bhi.n	800b362 <_printf_i+0x32>
 800b34c:	2f00      	cmp	r7, #0
 800b34e:	f000 80d8 	beq.w	800b502 <_printf_i+0x1d2>
 800b352:	2f58      	cmp	r7, #88	; 0x58
 800b354:	f000 80a3 	beq.w	800b49e <_printf_i+0x16e>
 800b358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b35c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b360:	e03a      	b.n	800b3d8 <_printf_i+0xa8>
 800b362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b366:	2b15      	cmp	r3, #21
 800b368:	d8f6      	bhi.n	800b358 <_printf_i+0x28>
 800b36a:	a001      	add	r0, pc, #4	; (adr r0, 800b370 <_printf_i+0x40>)
 800b36c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3dd 	.word	0x0800b3dd
 800b378:	0800b359 	.word	0x0800b359
 800b37c:	0800b359 	.word	0x0800b359
 800b380:	0800b359 	.word	0x0800b359
 800b384:	0800b359 	.word	0x0800b359
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b359 	.word	0x0800b359
 800b390:	0800b359 	.word	0x0800b359
 800b394:	0800b359 	.word	0x0800b359
 800b398:	0800b359 	.word	0x0800b359
 800b39c:	0800b4e9 	.word	0x0800b4e9
 800b3a0:	0800b40d 	.word	0x0800b40d
 800b3a4:	0800b4cb 	.word	0x0800b4cb
 800b3a8:	0800b359 	.word	0x0800b359
 800b3ac:	0800b359 	.word	0x0800b359
 800b3b0:	0800b50b 	.word	0x0800b50b
 800b3b4:	0800b359 	.word	0x0800b359
 800b3b8:	0800b40d 	.word	0x0800b40d
 800b3bc:	0800b359 	.word	0x0800b359
 800b3c0:	0800b359 	.word	0x0800b359
 800b3c4:	0800b4d3 	.word	0x0800b4d3
 800b3c8:	680b      	ldr	r3, [r1, #0]
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	600a      	str	r2, [r1, #0]
 800b3d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e0a3      	b.n	800b524 <_printf_i+0x1f4>
 800b3dc:	6825      	ldr	r5, [r4, #0]
 800b3de:	6808      	ldr	r0, [r1, #0]
 800b3e0:	062e      	lsls	r6, r5, #24
 800b3e2:	f100 0304 	add.w	r3, r0, #4
 800b3e6:	d50a      	bpl.n	800b3fe <_printf_i+0xce>
 800b3e8:	6805      	ldr	r5, [r0, #0]
 800b3ea:	600b      	str	r3, [r1, #0]
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	da03      	bge.n	800b3f8 <_printf_i+0xc8>
 800b3f0:	232d      	movs	r3, #45	; 0x2d
 800b3f2:	426d      	negs	r5, r5
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f8:	485e      	ldr	r0, [pc, #376]	; (800b574 <_printf_i+0x244>)
 800b3fa:	230a      	movs	r3, #10
 800b3fc:	e019      	b.n	800b432 <_printf_i+0x102>
 800b3fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b402:	6805      	ldr	r5, [r0, #0]
 800b404:	600b      	str	r3, [r1, #0]
 800b406:	bf18      	it	ne
 800b408:	b22d      	sxthne	r5, r5
 800b40a:	e7ef      	b.n	800b3ec <_printf_i+0xbc>
 800b40c:	680b      	ldr	r3, [r1, #0]
 800b40e:	6825      	ldr	r5, [r4, #0]
 800b410:	1d18      	adds	r0, r3, #4
 800b412:	6008      	str	r0, [r1, #0]
 800b414:	0628      	lsls	r0, r5, #24
 800b416:	d501      	bpl.n	800b41c <_printf_i+0xec>
 800b418:	681d      	ldr	r5, [r3, #0]
 800b41a:	e002      	b.n	800b422 <_printf_i+0xf2>
 800b41c:	0669      	lsls	r1, r5, #25
 800b41e:	d5fb      	bpl.n	800b418 <_printf_i+0xe8>
 800b420:	881d      	ldrh	r5, [r3, #0]
 800b422:	4854      	ldr	r0, [pc, #336]	; (800b574 <_printf_i+0x244>)
 800b424:	2f6f      	cmp	r7, #111	; 0x6f
 800b426:	bf0c      	ite	eq
 800b428:	2308      	moveq	r3, #8
 800b42a:	230a      	movne	r3, #10
 800b42c:	2100      	movs	r1, #0
 800b42e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b432:	6866      	ldr	r6, [r4, #4]
 800b434:	60a6      	str	r6, [r4, #8]
 800b436:	2e00      	cmp	r6, #0
 800b438:	bfa2      	ittt	ge
 800b43a:	6821      	ldrge	r1, [r4, #0]
 800b43c:	f021 0104 	bicge.w	r1, r1, #4
 800b440:	6021      	strge	r1, [r4, #0]
 800b442:	b90d      	cbnz	r5, 800b448 <_printf_i+0x118>
 800b444:	2e00      	cmp	r6, #0
 800b446:	d04d      	beq.n	800b4e4 <_printf_i+0x1b4>
 800b448:	4616      	mov	r6, r2
 800b44a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b44e:	fb03 5711 	mls	r7, r3, r1, r5
 800b452:	5dc7      	ldrb	r7, [r0, r7]
 800b454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b458:	462f      	mov	r7, r5
 800b45a:	42bb      	cmp	r3, r7
 800b45c:	460d      	mov	r5, r1
 800b45e:	d9f4      	bls.n	800b44a <_printf_i+0x11a>
 800b460:	2b08      	cmp	r3, #8
 800b462:	d10b      	bne.n	800b47c <_printf_i+0x14c>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	07df      	lsls	r7, r3, #31
 800b468:	d508      	bpl.n	800b47c <_printf_i+0x14c>
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	6861      	ldr	r1, [r4, #4]
 800b46e:	4299      	cmp	r1, r3
 800b470:	bfde      	ittt	le
 800b472:	2330      	movle	r3, #48	; 0x30
 800b474:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b47c:	1b92      	subs	r2, r2, r6
 800b47e:	6122      	str	r2, [r4, #16]
 800b480:	f8cd a000 	str.w	sl, [sp]
 800b484:	464b      	mov	r3, r9
 800b486:	aa03      	add	r2, sp, #12
 800b488:	4621      	mov	r1, r4
 800b48a:	4640      	mov	r0, r8
 800b48c:	f7ff fee2 	bl	800b254 <_printf_common>
 800b490:	3001      	adds	r0, #1
 800b492:	d14c      	bne.n	800b52e <_printf_i+0x1fe>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	b004      	add	sp, #16
 800b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49e:	4835      	ldr	r0, [pc, #212]	; (800b574 <_printf_i+0x244>)
 800b4a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	680e      	ldr	r6, [r1, #0]
 800b4a8:	061f      	lsls	r7, r3, #24
 800b4aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4ae:	600e      	str	r6, [r1, #0]
 800b4b0:	d514      	bpl.n	800b4dc <_printf_i+0x1ac>
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	bf44      	itt	mi
 800b4b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ba:	6023      	strmi	r3, [r4, #0]
 800b4bc:	b91d      	cbnz	r5, 800b4c6 <_printf_i+0x196>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	f023 0320 	bic.w	r3, r3, #32
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	2310      	movs	r3, #16
 800b4c8:	e7b0      	b.n	800b42c <_printf_i+0xfc>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	f043 0320 	orr.w	r3, r3, #32
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	2378      	movs	r3, #120	; 0x78
 800b4d4:	4828      	ldr	r0, [pc, #160]	; (800b578 <_printf_i+0x248>)
 800b4d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4da:	e7e3      	b.n	800b4a4 <_printf_i+0x174>
 800b4dc:	065e      	lsls	r6, r3, #25
 800b4de:	bf48      	it	mi
 800b4e0:	b2ad      	uxthmi	r5, r5
 800b4e2:	e7e6      	b.n	800b4b2 <_printf_i+0x182>
 800b4e4:	4616      	mov	r6, r2
 800b4e6:	e7bb      	b.n	800b460 <_printf_i+0x130>
 800b4e8:	680b      	ldr	r3, [r1, #0]
 800b4ea:	6826      	ldr	r6, [r4, #0]
 800b4ec:	6960      	ldr	r0, [r4, #20]
 800b4ee:	1d1d      	adds	r5, r3, #4
 800b4f0:	600d      	str	r5, [r1, #0]
 800b4f2:	0635      	lsls	r5, r6, #24
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	d501      	bpl.n	800b4fc <_printf_i+0x1cc>
 800b4f8:	6018      	str	r0, [r3, #0]
 800b4fa:	e002      	b.n	800b502 <_printf_i+0x1d2>
 800b4fc:	0671      	lsls	r1, r6, #25
 800b4fe:	d5fb      	bpl.n	800b4f8 <_printf_i+0x1c8>
 800b500:	8018      	strh	r0, [r3, #0]
 800b502:	2300      	movs	r3, #0
 800b504:	6123      	str	r3, [r4, #16]
 800b506:	4616      	mov	r6, r2
 800b508:	e7ba      	b.n	800b480 <_printf_i+0x150>
 800b50a:	680b      	ldr	r3, [r1, #0]
 800b50c:	1d1a      	adds	r2, r3, #4
 800b50e:	600a      	str	r2, [r1, #0]
 800b510:	681e      	ldr	r6, [r3, #0]
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	2100      	movs	r1, #0
 800b516:	4630      	mov	r0, r6
 800b518:	f7f4 fe7a 	bl	8000210 <memchr>
 800b51c:	b108      	cbz	r0, 800b522 <_printf_i+0x1f2>
 800b51e:	1b80      	subs	r0, r0, r6
 800b520:	6060      	str	r0, [r4, #4]
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	2300      	movs	r3, #0
 800b528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52c:	e7a8      	b.n	800b480 <_printf_i+0x150>
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	4632      	mov	r2, r6
 800b532:	4649      	mov	r1, r9
 800b534:	4640      	mov	r0, r8
 800b536:	47d0      	blx	sl
 800b538:	3001      	adds	r0, #1
 800b53a:	d0ab      	beq.n	800b494 <_printf_i+0x164>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	079b      	lsls	r3, r3, #30
 800b540:	d413      	bmi.n	800b56a <_printf_i+0x23a>
 800b542:	68e0      	ldr	r0, [r4, #12]
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	4298      	cmp	r0, r3
 800b548:	bfb8      	it	lt
 800b54a:	4618      	movlt	r0, r3
 800b54c:	e7a4      	b.n	800b498 <_printf_i+0x168>
 800b54e:	2301      	movs	r3, #1
 800b550:	4632      	mov	r2, r6
 800b552:	4649      	mov	r1, r9
 800b554:	4640      	mov	r0, r8
 800b556:	47d0      	blx	sl
 800b558:	3001      	adds	r0, #1
 800b55a:	d09b      	beq.n	800b494 <_printf_i+0x164>
 800b55c:	3501      	adds	r5, #1
 800b55e:	68e3      	ldr	r3, [r4, #12]
 800b560:	9903      	ldr	r1, [sp, #12]
 800b562:	1a5b      	subs	r3, r3, r1
 800b564:	42ab      	cmp	r3, r5
 800b566:	dcf2      	bgt.n	800b54e <_printf_i+0x21e>
 800b568:	e7eb      	b.n	800b542 <_printf_i+0x212>
 800b56a:	2500      	movs	r5, #0
 800b56c:	f104 0619 	add.w	r6, r4, #25
 800b570:	e7f5      	b.n	800b55e <_printf_i+0x22e>
 800b572:	bf00      	nop
 800b574:	0800c5d1 	.word	0x0800c5d1
 800b578:	0800c5e2 	.word	0x0800c5e2

0800b57c <_scanf_chars>:
 800b57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b580:	4615      	mov	r5, r2
 800b582:	688a      	ldr	r2, [r1, #8]
 800b584:	4680      	mov	r8, r0
 800b586:	460c      	mov	r4, r1
 800b588:	b932      	cbnz	r2, 800b598 <_scanf_chars+0x1c>
 800b58a:	698a      	ldr	r2, [r1, #24]
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	bf0c      	ite	eq
 800b590:	2201      	moveq	r2, #1
 800b592:	f04f 32ff 	movne.w	r2, #4294967295
 800b596:	608a      	str	r2, [r1, #8]
 800b598:	6822      	ldr	r2, [r4, #0]
 800b59a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b628 <_scanf_chars+0xac>
 800b59e:	06d1      	lsls	r1, r2, #27
 800b5a0:	bf5f      	itttt	pl
 800b5a2:	681a      	ldrpl	r2, [r3, #0]
 800b5a4:	1d11      	addpl	r1, r2, #4
 800b5a6:	6019      	strpl	r1, [r3, #0]
 800b5a8:	6816      	ldrpl	r6, [r2, #0]
 800b5aa:	2700      	movs	r7, #0
 800b5ac:	69a0      	ldr	r0, [r4, #24]
 800b5ae:	b188      	cbz	r0, 800b5d4 <_scanf_chars+0x58>
 800b5b0:	2801      	cmp	r0, #1
 800b5b2:	d107      	bne.n	800b5c4 <_scanf_chars+0x48>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	6963      	ldr	r3, [r4, #20]
 800b5ba:	5c9b      	ldrb	r3, [r3, r2]
 800b5bc:	b953      	cbnz	r3, 800b5d4 <_scanf_chars+0x58>
 800b5be:	bb27      	cbnz	r7, 800b60a <_scanf_chars+0x8e>
 800b5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c4:	2802      	cmp	r0, #2
 800b5c6:	d120      	bne.n	800b60a <_scanf_chars+0x8e>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b5d0:	071b      	lsls	r3, r3, #28
 800b5d2:	d41a      	bmi.n	800b60a <_scanf_chars+0x8e>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	06da      	lsls	r2, r3, #27
 800b5d8:	bf5e      	ittt	pl
 800b5da:	682b      	ldrpl	r3, [r5, #0]
 800b5dc:	781b      	ldrbpl	r3, [r3, #0]
 800b5de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b5e2:	682a      	ldr	r2, [r5, #0]
 800b5e4:	686b      	ldr	r3, [r5, #4]
 800b5e6:	3201      	adds	r2, #1
 800b5e8:	602a      	str	r2, [r5, #0]
 800b5ea:	68a2      	ldr	r2, [r4, #8]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	606b      	str	r3, [r5, #4]
 800b5f2:	3701      	adds	r7, #1
 800b5f4:	60a2      	str	r2, [r4, #8]
 800b5f6:	b142      	cbz	r2, 800b60a <_scanf_chars+0x8e>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dcd7      	bgt.n	800b5ac <_scanf_chars+0x30>
 800b5fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b600:	4629      	mov	r1, r5
 800b602:	4640      	mov	r0, r8
 800b604:	4798      	blx	r3
 800b606:	2800      	cmp	r0, #0
 800b608:	d0d0      	beq.n	800b5ac <_scanf_chars+0x30>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	f013 0310 	ands.w	r3, r3, #16
 800b610:	d105      	bne.n	800b61e <_scanf_chars+0xa2>
 800b612:	68e2      	ldr	r2, [r4, #12]
 800b614:	3201      	adds	r2, #1
 800b616:	60e2      	str	r2, [r4, #12]
 800b618:	69a2      	ldr	r2, [r4, #24]
 800b61a:	b102      	cbz	r2, 800b61e <_scanf_chars+0xa2>
 800b61c:	7033      	strb	r3, [r6, #0]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	441f      	add	r7, r3
 800b622:	6127      	str	r7, [r4, #16]
 800b624:	2000      	movs	r0, #0
 800b626:	e7cb      	b.n	800b5c0 <_scanf_chars+0x44>
 800b628:	0800c60f 	.word	0x0800c60f

0800b62c <_scanf_i>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4698      	mov	r8, r3
 800b632:	4b74      	ldr	r3, [pc, #464]	; (800b804 <_scanf_i+0x1d8>)
 800b634:	460c      	mov	r4, r1
 800b636:	4682      	mov	sl, r0
 800b638:	4616      	mov	r6, r2
 800b63a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b63e:	b087      	sub	sp, #28
 800b640:	ab03      	add	r3, sp, #12
 800b642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b646:	4b70      	ldr	r3, [pc, #448]	; (800b808 <_scanf_i+0x1dc>)
 800b648:	69a1      	ldr	r1, [r4, #24]
 800b64a:	4a70      	ldr	r2, [pc, #448]	; (800b80c <_scanf_i+0x1e0>)
 800b64c:	2903      	cmp	r1, #3
 800b64e:	bf18      	it	ne
 800b650:	461a      	movne	r2, r3
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	9201      	str	r2, [sp, #4]
 800b656:	1e5a      	subs	r2, r3, #1
 800b658:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b65c:	bf88      	it	hi
 800b65e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b662:	4627      	mov	r7, r4
 800b664:	bf82      	ittt	hi
 800b666:	eb03 0905 	addhi.w	r9, r3, r5
 800b66a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b66e:	60a3      	strhi	r3, [r4, #8]
 800b670:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b674:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b678:	bf98      	it	ls
 800b67a:	f04f 0900 	movls.w	r9, #0
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	463d      	mov	r5, r7
 800b682:	f04f 0b00 	mov.w	fp, #0
 800b686:	6831      	ldr	r1, [r6, #0]
 800b688:	ab03      	add	r3, sp, #12
 800b68a:	7809      	ldrb	r1, [r1, #0]
 800b68c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b690:	2202      	movs	r2, #2
 800b692:	f7f4 fdbd 	bl	8000210 <memchr>
 800b696:	b328      	cbz	r0, 800b6e4 <_scanf_i+0xb8>
 800b698:	f1bb 0f01 	cmp.w	fp, #1
 800b69c:	d159      	bne.n	800b752 <_scanf_i+0x126>
 800b69e:	6862      	ldr	r2, [r4, #4]
 800b6a0:	b92a      	cbnz	r2, 800b6ae <_scanf_i+0x82>
 800b6a2:	6822      	ldr	r2, [r4, #0]
 800b6a4:	2308      	movs	r3, #8
 800b6a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6aa:	6063      	str	r3, [r4, #4]
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	6822      	ldr	r2, [r4, #0]
 800b6b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b6b4:	6022      	str	r2, [r4, #0]
 800b6b6:	68a2      	ldr	r2, [r4, #8]
 800b6b8:	1e51      	subs	r1, r2, #1
 800b6ba:	60a1      	str	r1, [r4, #8]
 800b6bc:	b192      	cbz	r2, 800b6e4 <_scanf_i+0xb8>
 800b6be:	6832      	ldr	r2, [r6, #0]
 800b6c0:	1c51      	adds	r1, r2, #1
 800b6c2:	6031      	str	r1, [r6, #0]
 800b6c4:	7812      	ldrb	r2, [r2, #0]
 800b6c6:	f805 2b01 	strb.w	r2, [r5], #1
 800b6ca:	6872      	ldr	r2, [r6, #4]
 800b6cc:	3a01      	subs	r2, #1
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	6072      	str	r2, [r6, #4]
 800b6d2:	dc07      	bgt.n	800b6e4 <_scanf_i+0xb8>
 800b6d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4650      	mov	r0, sl
 800b6dc:	4790      	blx	r2
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f040 8085 	bne.w	800b7ee <_scanf_i+0x1c2>
 800b6e4:	f10b 0b01 	add.w	fp, fp, #1
 800b6e8:	f1bb 0f03 	cmp.w	fp, #3
 800b6ec:	d1cb      	bne.n	800b686 <_scanf_i+0x5a>
 800b6ee:	6863      	ldr	r3, [r4, #4]
 800b6f0:	b90b      	cbnz	r3, 800b6f6 <_scanf_i+0xca>
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	6863      	ldr	r3, [r4, #4]
 800b6f8:	4945      	ldr	r1, [pc, #276]	; (800b810 <_scanf_i+0x1e4>)
 800b6fa:	6960      	ldr	r0, [r4, #20]
 800b6fc:	1ac9      	subs	r1, r1, r3
 800b6fe:	f000 f8ab 	bl	800b858 <__sccl>
 800b702:	f04f 0b00 	mov.w	fp, #0
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	6822      	ldr	r2, [r4, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d03d      	beq.n	800b78a <_scanf_i+0x15e>
 800b70e:	6831      	ldr	r1, [r6, #0]
 800b710:	6960      	ldr	r0, [r4, #20]
 800b712:	f891 c000 	ldrb.w	ip, [r1]
 800b716:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d035      	beq.n	800b78a <_scanf_i+0x15e>
 800b71e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b722:	d124      	bne.n	800b76e <_scanf_i+0x142>
 800b724:	0510      	lsls	r0, r2, #20
 800b726:	d522      	bpl.n	800b76e <_scanf_i+0x142>
 800b728:	f10b 0b01 	add.w	fp, fp, #1
 800b72c:	f1b9 0f00 	cmp.w	r9, #0
 800b730:	d003      	beq.n	800b73a <_scanf_i+0x10e>
 800b732:	3301      	adds	r3, #1
 800b734:	f109 39ff 	add.w	r9, r9, #4294967295
 800b738:	60a3      	str	r3, [r4, #8]
 800b73a:	6873      	ldr	r3, [r6, #4]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	6073      	str	r3, [r6, #4]
 800b742:	dd1b      	ble.n	800b77c <_scanf_i+0x150>
 800b744:	6833      	ldr	r3, [r6, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	60a3      	str	r3, [r4, #8]
 800b750:	e7d9      	b.n	800b706 <_scanf_i+0xda>
 800b752:	f1bb 0f02 	cmp.w	fp, #2
 800b756:	d1ae      	bne.n	800b6b6 <_scanf_i+0x8a>
 800b758:	6822      	ldr	r2, [r4, #0]
 800b75a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b75e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b762:	d1bf      	bne.n	800b6e4 <_scanf_i+0xb8>
 800b764:	2310      	movs	r3, #16
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b76c:	e7a2      	b.n	800b6b4 <_scanf_i+0x88>
 800b76e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b772:	6022      	str	r2, [r4, #0]
 800b774:	780b      	ldrb	r3, [r1, #0]
 800b776:	f805 3b01 	strb.w	r3, [r5], #1
 800b77a:	e7de      	b.n	800b73a <_scanf_i+0x10e>
 800b77c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b780:	4631      	mov	r1, r6
 800b782:	4650      	mov	r0, sl
 800b784:	4798      	blx	r3
 800b786:	2800      	cmp	r0, #0
 800b788:	d0df      	beq.n	800b74a <_scanf_i+0x11e>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	05d9      	lsls	r1, r3, #23
 800b78e:	d50d      	bpl.n	800b7ac <_scanf_i+0x180>
 800b790:	42bd      	cmp	r5, r7
 800b792:	d909      	bls.n	800b7a8 <_scanf_i+0x17c>
 800b794:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b79c:	4632      	mov	r2, r6
 800b79e:	4650      	mov	r0, sl
 800b7a0:	4798      	blx	r3
 800b7a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b7a6:	464d      	mov	r5, r9
 800b7a8:	42bd      	cmp	r5, r7
 800b7aa:	d028      	beq.n	800b7fe <_scanf_i+0x1d2>
 800b7ac:	6822      	ldr	r2, [r4, #0]
 800b7ae:	f012 0210 	ands.w	r2, r2, #16
 800b7b2:	d113      	bne.n	800b7dc <_scanf_i+0x1b0>
 800b7b4:	702a      	strb	r2, [r5, #0]
 800b7b6:	6863      	ldr	r3, [r4, #4]
 800b7b8:	9e01      	ldr	r6, [sp, #4]
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4650      	mov	r0, sl
 800b7be:	47b0      	blx	r6
 800b7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c4:	6821      	ldr	r1, [r4, #0]
 800b7c6:	1d1a      	adds	r2, r3, #4
 800b7c8:	f8c8 2000 	str.w	r2, [r8]
 800b7cc:	f011 0f20 	tst.w	r1, #32
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	d00f      	beq.n	800b7f4 <_scanf_i+0x1c8>
 800b7d4:	6018      	str	r0, [r3, #0]
 800b7d6:	68e3      	ldr	r3, [r4, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60e3      	str	r3, [r4, #12]
 800b7dc:	1bed      	subs	r5, r5, r7
 800b7de:	44ab      	add	fp, r5
 800b7e0:	6925      	ldr	r5, [r4, #16]
 800b7e2:	445d      	add	r5, fp
 800b7e4:	6125      	str	r5, [r4, #16]
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	b007      	add	sp, #28
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ee:	f04f 0b00 	mov.w	fp, #0
 800b7f2:	e7ca      	b.n	800b78a <_scanf_i+0x15e>
 800b7f4:	07ca      	lsls	r2, r1, #31
 800b7f6:	bf4c      	ite	mi
 800b7f8:	8018      	strhmi	r0, [r3, #0]
 800b7fa:	6018      	strpl	r0, [r3, #0]
 800b7fc:	e7eb      	b.n	800b7d6 <_scanf_i+0x1aa>
 800b7fe:	2001      	movs	r0, #1
 800b800:	e7f2      	b.n	800b7e8 <_scanf_i+0x1bc>
 800b802:	bf00      	nop
 800b804:	0800c518 	.word	0x0800c518
 800b808:	0800bad1 	.word	0x0800bad1
 800b80c:	0800b9d5 	.word	0x0800b9d5
 800b810:	0800c60c 	.word	0x0800c60c

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_read_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f6 fbec 	bl	8002000 <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20000a38 	.word	0x20000a38

0800b838 <_sbrk_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d06      	ldr	r5, [pc, #24]	; (800b854 <_sbrk_r+0x1c>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f6 fc4a 	bl	80020dc <_sbrk>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_sbrk_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_sbrk_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20000a38 	.word	0x20000a38

0800b858 <__sccl>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	780b      	ldrb	r3, [r1, #0]
 800b85c:	4604      	mov	r4, r0
 800b85e:	2b5e      	cmp	r3, #94	; 0x5e
 800b860:	bf0b      	itete	eq
 800b862:	784b      	ldrbeq	r3, [r1, #1]
 800b864:	1c48      	addne	r0, r1, #1
 800b866:	1c88      	addeq	r0, r1, #2
 800b868:	2200      	movne	r2, #0
 800b86a:	bf08      	it	eq
 800b86c:	2201      	moveq	r2, #1
 800b86e:	1e61      	subs	r1, r4, #1
 800b870:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b874:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b878:	42a9      	cmp	r1, r5
 800b87a:	d1fb      	bne.n	800b874 <__sccl+0x1c>
 800b87c:	b90b      	cbnz	r3, 800b882 <__sccl+0x2a>
 800b87e:	3801      	subs	r0, #1
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	f082 0101 	eor.w	r1, r2, #1
 800b886:	54e1      	strb	r1, [r4, r3]
 800b888:	1c42      	adds	r2, r0, #1
 800b88a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b88e:	2d2d      	cmp	r5, #45	; 0x2d
 800b890:	f102 36ff 	add.w	r6, r2, #4294967295
 800b894:	4610      	mov	r0, r2
 800b896:	d006      	beq.n	800b8a6 <__sccl+0x4e>
 800b898:	2d5d      	cmp	r5, #93	; 0x5d
 800b89a:	d0f1      	beq.n	800b880 <__sccl+0x28>
 800b89c:	b90d      	cbnz	r5, 800b8a2 <__sccl+0x4a>
 800b89e:	4630      	mov	r0, r6
 800b8a0:	e7ee      	b.n	800b880 <__sccl+0x28>
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	e7ef      	b.n	800b886 <__sccl+0x2e>
 800b8a6:	7816      	ldrb	r6, [r2, #0]
 800b8a8:	2e5d      	cmp	r6, #93	; 0x5d
 800b8aa:	d0fa      	beq.n	800b8a2 <__sccl+0x4a>
 800b8ac:	42b3      	cmp	r3, r6
 800b8ae:	dcf8      	bgt.n	800b8a2 <__sccl+0x4a>
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	4286      	cmp	r6, r0
 800b8b6:	5421      	strb	r1, [r4, r0]
 800b8b8:	dcfb      	bgt.n	800b8b2 <__sccl+0x5a>
 800b8ba:	43d8      	mvns	r0, r3
 800b8bc:	4430      	add	r0, r6
 800b8be:	1c5d      	adds	r5, r3, #1
 800b8c0:	42b3      	cmp	r3, r6
 800b8c2:	bfa8      	it	ge
 800b8c4:	2000      	movge	r0, #0
 800b8c6:	182b      	adds	r3, r5, r0
 800b8c8:	3202      	adds	r2, #2
 800b8ca:	e7de      	b.n	800b88a <__sccl+0x32>

0800b8cc <_strtol_l.isra.0>:
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d2:	d001      	beq.n	800b8d8 <_strtol_l.isra.0+0xc>
 800b8d4:	2b24      	cmp	r3, #36	; 0x24
 800b8d6:	d906      	bls.n	800b8e6 <_strtol_l.isra.0+0x1a>
 800b8d8:	f7fe fdd2 	bl	800a480 <__errno>
 800b8dc:	2316      	movs	r3, #22
 800b8de:	6003      	str	r3, [r0, #0]
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e6:	4f3a      	ldr	r7, [pc, #232]	; (800b9d0 <_strtol_l.isra.0+0x104>)
 800b8e8:	468e      	mov	lr, r1
 800b8ea:	4676      	mov	r6, lr
 800b8ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b8f0:	5de5      	ldrb	r5, [r4, r7]
 800b8f2:	f015 0508 	ands.w	r5, r5, #8
 800b8f6:	d1f8      	bne.n	800b8ea <_strtol_l.isra.0+0x1e>
 800b8f8:	2c2d      	cmp	r4, #45	; 0x2d
 800b8fa:	d134      	bne.n	800b966 <_strtol_l.isra.0+0x9a>
 800b8fc:	f89e 4000 	ldrb.w	r4, [lr]
 800b900:	f04f 0801 	mov.w	r8, #1
 800b904:	f106 0e02 	add.w	lr, r6, #2
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d05c      	beq.n	800b9c6 <_strtol_l.isra.0+0xfa>
 800b90c:	2b10      	cmp	r3, #16
 800b90e:	d10c      	bne.n	800b92a <_strtol_l.isra.0+0x5e>
 800b910:	2c30      	cmp	r4, #48	; 0x30
 800b912:	d10a      	bne.n	800b92a <_strtol_l.isra.0+0x5e>
 800b914:	f89e 4000 	ldrb.w	r4, [lr]
 800b918:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b91c:	2c58      	cmp	r4, #88	; 0x58
 800b91e:	d14d      	bne.n	800b9bc <_strtol_l.isra.0+0xf0>
 800b920:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b924:	2310      	movs	r3, #16
 800b926:	f10e 0e02 	add.w	lr, lr, #2
 800b92a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b92e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b932:	2600      	movs	r6, #0
 800b934:	fbbc f9f3 	udiv	r9, ip, r3
 800b938:	4635      	mov	r5, r6
 800b93a:	fb03 ca19 	mls	sl, r3, r9, ip
 800b93e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b942:	2f09      	cmp	r7, #9
 800b944:	d818      	bhi.n	800b978 <_strtol_l.isra.0+0xac>
 800b946:	463c      	mov	r4, r7
 800b948:	42a3      	cmp	r3, r4
 800b94a:	dd24      	ble.n	800b996 <_strtol_l.isra.0+0xca>
 800b94c:	2e00      	cmp	r6, #0
 800b94e:	db1f      	blt.n	800b990 <_strtol_l.isra.0+0xc4>
 800b950:	45a9      	cmp	r9, r5
 800b952:	d31d      	bcc.n	800b990 <_strtol_l.isra.0+0xc4>
 800b954:	d101      	bne.n	800b95a <_strtol_l.isra.0+0x8e>
 800b956:	45a2      	cmp	sl, r4
 800b958:	db1a      	blt.n	800b990 <_strtol_l.isra.0+0xc4>
 800b95a:	fb05 4503 	mla	r5, r5, r3, r4
 800b95e:	2601      	movs	r6, #1
 800b960:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b964:	e7eb      	b.n	800b93e <_strtol_l.isra.0+0x72>
 800b966:	2c2b      	cmp	r4, #43	; 0x2b
 800b968:	bf08      	it	eq
 800b96a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b96e:	46a8      	mov	r8, r5
 800b970:	bf08      	it	eq
 800b972:	f106 0e02 	addeq.w	lr, r6, #2
 800b976:	e7c7      	b.n	800b908 <_strtol_l.isra.0+0x3c>
 800b978:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b97c:	2f19      	cmp	r7, #25
 800b97e:	d801      	bhi.n	800b984 <_strtol_l.isra.0+0xb8>
 800b980:	3c37      	subs	r4, #55	; 0x37
 800b982:	e7e1      	b.n	800b948 <_strtol_l.isra.0+0x7c>
 800b984:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b988:	2f19      	cmp	r7, #25
 800b98a:	d804      	bhi.n	800b996 <_strtol_l.isra.0+0xca>
 800b98c:	3c57      	subs	r4, #87	; 0x57
 800b98e:	e7db      	b.n	800b948 <_strtol_l.isra.0+0x7c>
 800b990:	f04f 36ff 	mov.w	r6, #4294967295
 800b994:	e7e4      	b.n	800b960 <_strtol_l.isra.0+0x94>
 800b996:	2e00      	cmp	r6, #0
 800b998:	da05      	bge.n	800b9a6 <_strtol_l.isra.0+0xda>
 800b99a:	2322      	movs	r3, #34	; 0x22
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	4665      	mov	r5, ip
 800b9a0:	b942      	cbnz	r2, 800b9b4 <_strtol_l.isra.0+0xe8>
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	e79d      	b.n	800b8e2 <_strtol_l.isra.0+0x16>
 800b9a6:	f1b8 0f00 	cmp.w	r8, #0
 800b9aa:	d000      	beq.n	800b9ae <_strtol_l.isra.0+0xe2>
 800b9ac:	426d      	negs	r5, r5
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	d0f7      	beq.n	800b9a2 <_strtol_l.isra.0+0xd6>
 800b9b2:	b10e      	cbz	r6, 800b9b8 <_strtol_l.isra.0+0xec>
 800b9b4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b9b8:	6011      	str	r1, [r2, #0]
 800b9ba:	e7f2      	b.n	800b9a2 <_strtol_l.isra.0+0xd6>
 800b9bc:	2430      	movs	r4, #48	; 0x30
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1b3      	bne.n	800b92a <_strtol_l.isra.0+0x5e>
 800b9c2:	2308      	movs	r3, #8
 800b9c4:	e7b1      	b.n	800b92a <_strtol_l.isra.0+0x5e>
 800b9c6:	2c30      	cmp	r4, #48	; 0x30
 800b9c8:	d0a4      	beq.n	800b914 <_strtol_l.isra.0+0x48>
 800b9ca:	230a      	movs	r3, #10
 800b9cc:	e7ad      	b.n	800b92a <_strtol_l.isra.0+0x5e>
 800b9ce:	bf00      	nop
 800b9d0:	0800c60f 	.word	0x0800c60f

0800b9d4 <_strtol_r>:
 800b9d4:	f7ff bf7a 	b.w	800b8cc <_strtol_l.isra.0>

0800b9d8 <_strtoul_l.isra.0>:
 800b9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4e3b      	ldr	r6, [pc, #236]	; (800bacc <_strtoul_l.isra.0+0xf4>)
 800b9de:	4686      	mov	lr, r0
 800b9e0:	468c      	mov	ip, r1
 800b9e2:	4660      	mov	r0, ip
 800b9e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b9e8:	5da5      	ldrb	r5, [r4, r6]
 800b9ea:	f015 0508 	ands.w	r5, r5, #8
 800b9ee:	d1f8      	bne.n	800b9e2 <_strtoul_l.isra.0+0xa>
 800b9f0:	2c2d      	cmp	r4, #45	; 0x2d
 800b9f2:	d134      	bne.n	800ba5e <_strtoul_l.isra.0+0x86>
 800b9f4:	f89c 4000 	ldrb.w	r4, [ip]
 800b9f8:	f04f 0801 	mov.w	r8, #1
 800b9fc:	f100 0c02 	add.w	ip, r0, #2
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d05e      	beq.n	800bac2 <_strtoul_l.isra.0+0xea>
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d10c      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800ba08:	2c30      	cmp	r4, #48	; 0x30
 800ba0a:	d10a      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800ba0c:	f89c 0000 	ldrb.w	r0, [ip]
 800ba10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba14:	2858      	cmp	r0, #88	; 0x58
 800ba16:	d14f      	bne.n	800bab8 <_strtoul_l.isra.0+0xe0>
 800ba18:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ba1c:	2310      	movs	r3, #16
 800ba1e:	f10c 0c02 	add.w	ip, ip, #2
 800ba22:	f04f 37ff 	mov.w	r7, #4294967295
 800ba26:	2500      	movs	r5, #0
 800ba28:	fbb7 f7f3 	udiv	r7, r7, r3
 800ba2c:	fb03 f907 	mul.w	r9, r3, r7
 800ba30:	ea6f 0909 	mvn.w	r9, r9
 800ba34:	4628      	mov	r0, r5
 800ba36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ba3a:	2e09      	cmp	r6, #9
 800ba3c:	d818      	bhi.n	800ba70 <_strtoul_l.isra.0+0x98>
 800ba3e:	4634      	mov	r4, r6
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	dd24      	ble.n	800ba8e <_strtoul_l.isra.0+0xb6>
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	db1f      	blt.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba48:	4287      	cmp	r7, r0
 800ba4a:	d31d      	bcc.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba4c:	d101      	bne.n	800ba52 <_strtoul_l.isra.0+0x7a>
 800ba4e:	45a1      	cmp	r9, r4
 800ba50:	db1a      	blt.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba52:	fb00 4003 	mla	r0, r0, r3, r4
 800ba56:	2501      	movs	r5, #1
 800ba58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ba5c:	e7eb      	b.n	800ba36 <_strtoul_l.isra.0+0x5e>
 800ba5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ba60:	bf08      	it	eq
 800ba62:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ba66:	46a8      	mov	r8, r5
 800ba68:	bf08      	it	eq
 800ba6a:	f100 0c02 	addeq.w	ip, r0, #2
 800ba6e:	e7c7      	b.n	800ba00 <_strtoul_l.isra.0+0x28>
 800ba70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ba74:	2e19      	cmp	r6, #25
 800ba76:	d801      	bhi.n	800ba7c <_strtoul_l.isra.0+0xa4>
 800ba78:	3c37      	subs	r4, #55	; 0x37
 800ba7a:	e7e1      	b.n	800ba40 <_strtoul_l.isra.0+0x68>
 800ba7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ba80:	2e19      	cmp	r6, #25
 800ba82:	d804      	bhi.n	800ba8e <_strtoul_l.isra.0+0xb6>
 800ba84:	3c57      	subs	r4, #87	; 0x57
 800ba86:	e7db      	b.n	800ba40 <_strtoul_l.isra.0+0x68>
 800ba88:	f04f 35ff 	mov.w	r5, #4294967295
 800ba8c:	e7e4      	b.n	800ba58 <_strtoul_l.isra.0+0x80>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	da07      	bge.n	800baa2 <_strtoul_l.isra.0+0xca>
 800ba92:	2322      	movs	r3, #34	; 0x22
 800ba94:	f8ce 3000 	str.w	r3, [lr]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b942      	cbnz	r2, 800bab0 <_strtoul_l.isra.0+0xd8>
 800ba9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa2:	f1b8 0f00 	cmp.w	r8, #0
 800baa6:	d000      	beq.n	800baaa <_strtoul_l.isra.0+0xd2>
 800baa8:	4240      	negs	r0, r0
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d0f7      	beq.n	800ba9e <_strtoul_l.isra.0+0xc6>
 800baae:	b10d      	cbz	r5, 800bab4 <_strtoul_l.isra.0+0xdc>
 800bab0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	e7f2      	b.n	800ba9e <_strtoul_l.isra.0+0xc6>
 800bab8:	2430      	movs	r4, #48	; 0x30
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1b1      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800babe:	2308      	movs	r3, #8
 800bac0:	e7af      	b.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800bac2:	2c30      	cmp	r4, #48	; 0x30
 800bac4:	d0a2      	beq.n	800ba0c <_strtoul_l.isra.0+0x34>
 800bac6:	230a      	movs	r3, #10
 800bac8:	e7ab      	b.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800baca:	bf00      	nop
 800bacc:	0800c60f 	.word	0x0800c60f

0800bad0 <_strtoul_r>:
 800bad0:	f7ff bf82 	b.w	800b9d8 <_strtoul_l.isra.0>

0800bad4 <__submore>:
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	460c      	mov	r4, r1
 800bada:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800badc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bae0:	4299      	cmp	r1, r3
 800bae2:	d11d      	bne.n	800bb20 <__submore+0x4c>
 800bae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bae8:	f7fe fed2 	bl	800a890 <_malloc_r>
 800baec:	b918      	cbnz	r0, 800baf6 <__submore+0x22>
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bafa:	63a3      	str	r3, [r4, #56]	; 0x38
 800bafc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb00:	6360      	str	r0, [r4, #52]	; 0x34
 800bb02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bb0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bb16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb1a:	6020      	str	r0, [r4, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7e8      	b.n	800baf2 <__submore+0x1e>
 800bb20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb22:	0077      	lsls	r7, r6, #1
 800bb24:	463a      	mov	r2, r7
 800bb26:	f000 fa79 	bl	800c01c <_realloc_r>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0de      	beq.n	800baee <__submore+0x1a>
 800bb30:	eb00 0806 	add.w	r8, r0, r6
 800bb34:	4601      	mov	r1, r0
 800bb36:	4632      	mov	r2, r6
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f000 f9eb 	bl	800bf14 <memcpy>
 800bb3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bb42:	f8c4 8000 	str.w	r8, [r4]
 800bb46:	e7e9      	b.n	800bb1c <__submore+0x48>

0800bb48 <__swbuf_r>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b118      	cbz	r0, 800bb5a <__swbuf_r+0x12>
 800bb52:	6983      	ldr	r3, [r0, #24]
 800bb54:	b90b      	cbnz	r3, 800bb5a <__swbuf_r+0x12>
 800bb56:	f7fe fde9 	bl	800a72c <__sinit>
 800bb5a:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <__swbuf_r+0x98>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d12b      	bne.n	800bbb8 <__swbuf_r+0x70>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	69a3      	ldr	r3, [r4, #24]
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	071a      	lsls	r2, r3, #28
 800bb6a:	d52f      	bpl.n	800bbcc <__swbuf_r+0x84>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	b36b      	cbz	r3, 800bbcc <__swbuf_r+0x84>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1ac0      	subs	r0, r0, r3
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	b2f6      	uxtb	r6, r6
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	4637      	mov	r7, r6
 800bb7e:	dc04      	bgt.n	800bb8a <__swbuf_r+0x42>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4628      	mov	r0, r5
 800bb84:	f000 f926 	bl	800bdd4 <_fflush_r>
 800bb88:	bb30      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	6022      	str	r2, [r4, #0]
 800bb96:	701e      	strb	r6, [r3, #0]
 800bb98:	6963      	ldr	r3, [r4, #20]
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	4283      	cmp	r3, r0
 800bb9e:	d004      	beq.n	800bbaa <__swbuf_r+0x62>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d506      	bpl.n	800bbb4 <__swbuf_r+0x6c>
 800bba6:	2e0a      	cmp	r6, #10
 800bba8:	d104      	bne.n	800bbb4 <__swbuf_r+0x6c>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f911 	bl	800bdd4 <_fflush_r>
 800bbb2:	b988      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <__swbuf_r+0x9c>)
 800bbba:	429c      	cmp	r4, r3
 800bbbc:	d101      	bne.n	800bbc2 <__swbuf_r+0x7a>
 800bbbe:	68ac      	ldr	r4, [r5, #8]
 800bbc0:	e7cf      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <__swbuf_r+0xa0>)
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	bf08      	it	eq
 800bbc8:	68ec      	ldreq	r4, [r5, #12]
 800bbca:	e7ca      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 f80c 	bl	800bbec <__swsetup_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d0cb      	beq.n	800bb70 <__swbuf_r+0x28>
 800bbd8:	f04f 37ff 	mov.w	r7, #4294967295
 800bbdc:	e7ea      	b.n	800bbb4 <__swbuf_r+0x6c>
 800bbde:	bf00      	nop
 800bbe0:	0800c580 	.word	0x0800c580
 800bbe4:	0800c5a0 	.word	0x0800c5a0
 800bbe8:	0800c560 	.word	0x0800c560

0800bbec <__swsetup_r>:
 800bbec:	4b32      	ldr	r3, [pc, #200]	; (800bcb8 <__swsetup_r+0xcc>)
 800bbee:	b570      	push	{r4, r5, r6, lr}
 800bbf0:	681d      	ldr	r5, [r3, #0]
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	b125      	cbz	r5, 800bc02 <__swsetup_r+0x16>
 800bbf8:	69ab      	ldr	r3, [r5, #24]
 800bbfa:	b913      	cbnz	r3, 800bc02 <__swsetup_r+0x16>
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7fe fd95 	bl	800a72c <__sinit>
 800bc02:	4b2e      	ldr	r3, [pc, #184]	; (800bcbc <__swsetup_r+0xd0>)
 800bc04:	429c      	cmp	r4, r3
 800bc06:	d10f      	bne.n	800bc28 <__swsetup_r+0x3c>
 800bc08:	686c      	ldr	r4, [r5, #4]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc10:	0719      	lsls	r1, r3, #28
 800bc12:	d42c      	bmi.n	800bc6e <__swsetup_r+0x82>
 800bc14:	06dd      	lsls	r5, r3, #27
 800bc16:	d411      	bmi.n	800bc3c <__swsetup_r+0x50>
 800bc18:	2309      	movs	r3, #9
 800bc1a:	6033      	str	r3, [r6, #0]
 800bc1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295
 800bc26:	e03e      	b.n	800bca6 <__swsetup_r+0xba>
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <__swsetup_r+0xd4>)
 800bc2a:	429c      	cmp	r4, r3
 800bc2c:	d101      	bne.n	800bc32 <__swsetup_r+0x46>
 800bc2e:	68ac      	ldr	r4, [r5, #8]
 800bc30:	e7eb      	b.n	800bc0a <__swsetup_r+0x1e>
 800bc32:	4b24      	ldr	r3, [pc, #144]	; (800bcc4 <__swsetup_r+0xd8>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	bf08      	it	eq
 800bc38:	68ec      	ldreq	r4, [r5, #12]
 800bc3a:	e7e6      	b.n	800bc0a <__swsetup_r+0x1e>
 800bc3c:	0758      	lsls	r0, r3, #29
 800bc3e:	d512      	bpl.n	800bc66 <__swsetup_r+0x7a>
 800bc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc42:	b141      	cbz	r1, 800bc56 <__swsetup_r+0x6a>
 800bc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc48:	4299      	cmp	r1, r3
 800bc4a:	d002      	beq.n	800bc52 <__swsetup_r+0x66>
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f000 f995 	bl	800bf7c <_free_r>
 800bc52:	2300      	movs	r3, #0
 800bc54:	6363      	str	r3, [r4, #52]	; 0x34
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	f043 0308 	orr.w	r3, r3, #8
 800bc6c:	81a3      	strh	r3, [r4, #12]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	b94b      	cbnz	r3, 800bc86 <__swsetup_r+0x9a>
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc7c:	d003      	beq.n	800bc86 <__swsetup_r+0x9a>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4630      	mov	r0, r6
 800bc82:	f000 f907 	bl	800be94 <__smakebuf_r>
 800bc86:	89a0      	ldrh	r0, [r4, #12]
 800bc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc8c:	f010 0301 	ands.w	r3, r0, #1
 800bc90:	d00a      	beq.n	800bca8 <__swsetup_r+0xbc>
 800bc92:	2300      	movs	r3, #0
 800bc94:	60a3      	str	r3, [r4, #8]
 800bc96:	6963      	ldr	r3, [r4, #20]
 800bc98:	425b      	negs	r3, r3
 800bc9a:	61a3      	str	r3, [r4, #24]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	b943      	cbnz	r3, 800bcb2 <__swsetup_r+0xc6>
 800bca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bca4:	d1ba      	bne.n	800bc1c <__swsetup_r+0x30>
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	0781      	lsls	r1, r0, #30
 800bcaa:	bf58      	it	pl
 800bcac:	6963      	ldrpl	r3, [r4, #20]
 800bcae:	60a3      	str	r3, [r4, #8]
 800bcb0:	e7f4      	b.n	800bc9c <__swsetup_r+0xb0>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e7f7      	b.n	800bca6 <__swsetup_r+0xba>
 800bcb6:	bf00      	nop
 800bcb8:	20000088 	.word	0x20000088
 800bcbc:	0800c580 	.word	0x0800c580
 800bcc0:	0800c5a0 	.word	0x0800c5a0
 800bcc4:	0800c560 	.word	0x0800c560

0800bcc8 <__sflush_r>:
 800bcc8:	898a      	ldrh	r2, [r1, #12]
 800bcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcce:	4605      	mov	r5, r0
 800bcd0:	0710      	lsls	r0, r2, #28
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	d458      	bmi.n	800bd88 <__sflush_r+0xc0>
 800bcd6:	684b      	ldr	r3, [r1, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dc05      	bgt.n	800bce8 <__sflush_r+0x20>
 800bcdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	dc02      	bgt.n	800bce8 <__sflush_r+0x20>
 800bce2:	2000      	movs	r0, #0
 800bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	d0f9      	beq.n	800bce2 <__sflush_r+0x1a>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcf4:	682f      	ldr	r7, [r5, #0]
 800bcf6:	602b      	str	r3, [r5, #0]
 800bcf8:	d032      	beq.n	800bd60 <__sflush_r+0x98>
 800bcfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	075a      	lsls	r2, r3, #29
 800bd00:	d505      	bpl.n	800bd0e <__sflush_r+0x46>
 800bd02:	6863      	ldr	r3, [r4, #4]
 800bd04:	1ac0      	subs	r0, r0, r3
 800bd06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd08:	b10b      	cbz	r3, 800bd0e <__sflush_r+0x46>
 800bd0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd0c:	1ac0      	subs	r0, r0, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	4602      	mov	r2, r0
 800bd12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	4628      	mov	r0, r5
 800bd18:	47b0      	blx	r6
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	d106      	bne.n	800bd2e <__sflush_r+0x66>
 800bd20:	6829      	ldr	r1, [r5, #0]
 800bd22:	291d      	cmp	r1, #29
 800bd24:	d82c      	bhi.n	800bd80 <__sflush_r+0xb8>
 800bd26:	4a2a      	ldr	r2, [pc, #168]	; (800bdd0 <__sflush_r+0x108>)
 800bd28:	40ca      	lsrs	r2, r1
 800bd2a:	07d6      	lsls	r6, r2, #31
 800bd2c:	d528      	bpl.n	800bd80 <__sflush_r+0xb8>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	6062      	str	r2, [r4, #4]
 800bd32:	04d9      	lsls	r1, r3, #19
 800bd34:	6922      	ldr	r2, [r4, #16]
 800bd36:	6022      	str	r2, [r4, #0]
 800bd38:	d504      	bpl.n	800bd44 <__sflush_r+0x7c>
 800bd3a:	1c42      	adds	r2, r0, #1
 800bd3c:	d101      	bne.n	800bd42 <__sflush_r+0x7a>
 800bd3e:	682b      	ldr	r3, [r5, #0]
 800bd40:	b903      	cbnz	r3, 800bd44 <__sflush_r+0x7c>
 800bd42:	6560      	str	r0, [r4, #84]	; 0x54
 800bd44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd46:	602f      	str	r7, [r5, #0]
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	d0ca      	beq.n	800bce2 <__sflush_r+0x1a>
 800bd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd50:	4299      	cmp	r1, r3
 800bd52:	d002      	beq.n	800bd5a <__sflush_r+0x92>
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f911 	bl	800bf7c <_free_r>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd5e:	e7c1      	b.n	800bce4 <__sflush_r+0x1c>
 800bd60:	6a21      	ldr	r1, [r4, #32]
 800bd62:	2301      	movs	r3, #1
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	1c41      	adds	r1, r0, #1
 800bd6a:	d1c7      	bne.n	800bcfc <__sflush_r+0x34>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0c4      	beq.n	800bcfc <__sflush_r+0x34>
 800bd72:	2b1d      	cmp	r3, #29
 800bd74:	d001      	beq.n	800bd7a <__sflush_r+0xb2>
 800bd76:	2b16      	cmp	r3, #22
 800bd78:	d101      	bne.n	800bd7e <__sflush_r+0xb6>
 800bd7a:	602f      	str	r7, [r5, #0]
 800bd7c:	e7b1      	b.n	800bce2 <__sflush_r+0x1a>
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	e7ad      	b.n	800bce4 <__sflush_r+0x1c>
 800bd88:	690f      	ldr	r7, [r1, #16]
 800bd8a:	2f00      	cmp	r7, #0
 800bd8c:	d0a9      	beq.n	800bce2 <__sflush_r+0x1a>
 800bd8e:	0793      	lsls	r3, r2, #30
 800bd90:	680e      	ldr	r6, [r1, #0]
 800bd92:	bf08      	it	eq
 800bd94:	694b      	ldreq	r3, [r1, #20]
 800bd96:	600f      	str	r7, [r1, #0]
 800bd98:	bf18      	it	ne
 800bd9a:	2300      	movne	r3, #0
 800bd9c:	eba6 0807 	sub.w	r8, r6, r7
 800bda0:	608b      	str	r3, [r1, #8]
 800bda2:	f1b8 0f00 	cmp.w	r8, #0
 800bda6:	dd9c      	ble.n	800bce2 <__sflush_r+0x1a>
 800bda8:	6a21      	ldr	r1, [r4, #32]
 800bdaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdac:	4643      	mov	r3, r8
 800bdae:	463a      	mov	r2, r7
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	47b0      	blx	r6
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	dc06      	bgt.n	800bdc6 <__sflush_r+0xfe>
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdbe:	81a3      	strh	r3, [r4, #12]
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	e78e      	b.n	800bce4 <__sflush_r+0x1c>
 800bdc6:	4407      	add	r7, r0
 800bdc8:	eba8 0800 	sub.w	r8, r8, r0
 800bdcc:	e7e9      	b.n	800bda2 <__sflush_r+0xda>
 800bdce:	bf00      	nop
 800bdd0:	20400001 	.word	0x20400001

0800bdd4 <_fflush_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	690b      	ldr	r3, [r1, #16]
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	b913      	cbnz	r3, 800bde4 <_fflush_r+0x10>
 800bdde:	2500      	movs	r5, #0
 800bde0:	4628      	mov	r0, r5
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	b118      	cbz	r0, 800bdee <_fflush_r+0x1a>
 800bde6:	6983      	ldr	r3, [r0, #24]
 800bde8:	b90b      	cbnz	r3, 800bdee <_fflush_r+0x1a>
 800bdea:	f7fe fc9f 	bl	800a72c <__sinit>
 800bdee:	4b14      	ldr	r3, [pc, #80]	; (800be40 <_fflush_r+0x6c>)
 800bdf0:	429c      	cmp	r4, r3
 800bdf2:	d11b      	bne.n	800be2c <_fflush_r+0x58>
 800bdf4:	686c      	ldr	r4, [r5, #4]
 800bdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0ef      	beq.n	800bdde <_fflush_r+0xa>
 800bdfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be00:	07d0      	lsls	r0, r2, #31
 800be02:	d404      	bmi.n	800be0e <_fflush_r+0x3a>
 800be04:	0599      	lsls	r1, r3, #22
 800be06:	d402      	bmi.n	800be0e <_fflush_r+0x3a>
 800be08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be0a:	f7fe fd2d 	bl	800a868 <__retarget_lock_acquire_recursive>
 800be0e:	4628      	mov	r0, r5
 800be10:	4621      	mov	r1, r4
 800be12:	f7ff ff59 	bl	800bcc8 <__sflush_r>
 800be16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be18:	07da      	lsls	r2, r3, #31
 800be1a:	4605      	mov	r5, r0
 800be1c:	d4e0      	bmi.n	800bde0 <_fflush_r+0xc>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	059b      	lsls	r3, r3, #22
 800be22:	d4dd      	bmi.n	800bde0 <_fflush_r+0xc>
 800be24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be26:	f7fe fd20 	bl	800a86a <__retarget_lock_release_recursive>
 800be2a:	e7d9      	b.n	800bde0 <_fflush_r+0xc>
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <_fflush_r+0x70>)
 800be2e:	429c      	cmp	r4, r3
 800be30:	d101      	bne.n	800be36 <_fflush_r+0x62>
 800be32:	68ac      	ldr	r4, [r5, #8]
 800be34:	e7df      	b.n	800bdf6 <_fflush_r+0x22>
 800be36:	4b04      	ldr	r3, [pc, #16]	; (800be48 <_fflush_r+0x74>)
 800be38:	429c      	cmp	r4, r3
 800be3a:	bf08      	it	eq
 800be3c:	68ec      	ldreq	r4, [r5, #12]
 800be3e:	e7da      	b.n	800bdf6 <_fflush_r+0x22>
 800be40:	0800c580 	.word	0x0800c580
 800be44:	0800c5a0 	.word	0x0800c5a0
 800be48:	0800c560 	.word	0x0800c560

0800be4c <__swhatbuf_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	460e      	mov	r6, r1
 800be50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be54:	2900      	cmp	r1, #0
 800be56:	b096      	sub	sp, #88	; 0x58
 800be58:	4614      	mov	r4, r2
 800be5a:	461d      	mov	r5, r3
 800be5c:	da07      	bge.n	800be6e <__swhatbuf_r+0x22>
 800be5e:	2300      	movs	r3, #0
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	89b3      	ldrh	r3, [r6, #12]
 800be64:	061a      	lsls	r2, r3, #24
 800be66:	d410      	bmi.n	800be8a <__swhatbuf_r+0x3e>
 800be68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be6c:	e00e      	b.n	800be8c <__swhatbuf_r+0x40>
 800be6e:	466a      	mov	r2, sp
 800be70:	f000 f8fa 	bl	800c068 <_fstat_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	dbf2      	blt.n	800be5e <__swhatbuf_r+0x12>
 800be78:	9a01      	ldr	r2, [sp, #4]
 800be7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be82:	425a      	negs	r2, r3
 800be84:	415a      	adcs	r2, r3
 800be86:	602a      	str	r2, [r5, #0]
 800be88:	e7ee      	b.n	800be68 <__swhatbuf_r+0x1c>
 800be8a:	2340      	movs	r3, #64	; 0x40
 800be8c:	2000      	movs	r0, #0
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	b016      	add	sp, #88	; 0x58
 800be92:	bd70      	pop	{r4, r5, r6, pc}

0800be94 <__smakebuf_r>:
 800be94:	898b      	ldrh	r3, [r1, #12]
 800be96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be98:	079d      	lsls	r5, r3, #30
 800be9a:	4606      	mov	r6, r0
 800be9c:	460c      	mov	r4, r1
 800be9e:	d507      	bpl.n	800beb0 <__smakebuf_r+0x1c>
 800bea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	6123      	str	r3, [r4, #16]
 800bea8:	2301      	movs	r3, #1
 800beaa:	6163      	str	r3, [r4, #20]
 800beac:	b002      	add	sp, #8
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	ab01      	add	r3, sp, #4
 800beb2:	466a      	mov	r2, sp
 800beb4:	f7ff ffca 	bl	800be4c <__swhatbuf_r>
 800beb8:	9900      	ldr	r1, [sp, #0]
 800beba:	4605      	mov	r5, r0
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7fe fce7 	bl	800a890 <_malloc_r>
 800bec2:	b948      	cbnz	r0, 800bed8 <__smakebuf_r+0x44>
 800bec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec8:	059a      	lsls	r2, r3, #22
 800beca:	d4ef      	bmi.n	800beac <__smakebuf_r+0x18>
 800becc:	f023 0303 	bic.w	r3, r3, #3
 800bed0:	f043 0302 	orr.w	r3, r3, #2
 800bed4:	81a3      	strh	r3, [r4, #12]
 800bed6:	e7e3      	b.n	800bea0 <__smakebuf_r+0xc>
 800bed8:	4b0d      	ldr	r3, [pc, #52]	; (800bf10 <__smakebuf_r+0x7c>)
 800beda:	62b3      	str	r3, [r6, #40]	; 0x28
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	6020      	str	r0, [r4, #0]
 800bee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	9b00      	ldr	r3, [sp, #0]
 800bee8:	6163      	str	r3, [r4, #20]
 800beea:	9b01      	ldr	r3, [sp, #4]
 800beec:	6120      	str	r0, [r4, #16]
 800beee:	b15b      	cbz	r3, 800bf08 <__smakebuf_r+0x74>
 800bef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef4:	4630      	mov	r0, r6
 800bef6:	f000 f8c9 	bl	800c08c <_isatty_r>
 800befa:	b128      	cbz	r0, 800bf08 <__smakebuf_r+0x74>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	f023 0303 	bic.w	r3, r3, #3
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	81a3      	strh	r3, [r4, #12]
 800bf08:	89a0      	ldrh	r0, [r4, #12]
 800bf0a:	4305      	orrs	r5, r0
 800bf0c:	81a5      	strh	r5, [r4, #12]
 800bf0e:	e7cd      	b.n	800beac <__smakebuf_r+0x18>
 800bf10:	0800a6c5 	.word	0x0800a6c5

0800bf14 <memcpy>:
 800bf14:	440a      	add	r2, r1
 800bf16:	4291      	cmp	r1, r2
 800bf18:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf1c:	d100      	bne.n	800bf20 <memcpy+0xc>
 800bf1e:	4770      	bx	lr
 800bf20:	b510      	push	{r4, lr}
 800bf22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2a:	4291      	cmp	r1, r2
 800bf2c:	d1f9      	bne.n	800bf22 <memcpy+0xe>
 800bf2e:	bd10      	pop	{r4, pc}

0800bf30 <memmove>:
 800bf30:	4288      	cmp	r0, r1
 800bf32:	b510      	push	{r4, lr}
 800bf34:	eb01 0402 	add.w	r4, r1, r2
 800bf38:	d902      	bls.n	800bf40 <memmove+0x10>
 800bf3a:	4284      	cmp	r4, r0
 800bf3c:	4623      	mov	r3, r4
 800bf3e:	d807      	bhi.n	800bf50 <memmove+0x20>
 800bf40:	1e43      	subs	r3, r0, #1
 800bf42:	42a1      	cmp	r1, r4
 800bf44:	d008      	beq.n	800bf58 <memmove+0x28>
 800bf46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf4e:	e7f8      	b.n	800bf42 <memmove+0x12>
 800bf50:	4402      	add	r2, r0
 800bf52:	4601      	mov	r1, r0
 800bf54:	428a      	cmp	r2, r1
 800bf56:	d100      	bne.n	800bf5a <memmove+0x2a>
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf62:	e7f7      	b.n	800bf54 <memmove+0x24>

0800bf64 <__malloc_lock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__malloc_lock+0x8>)
 800bf66:	f7fe bc7f 	b.w	800a868 <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000a30 	.word	0x20000a30

0800bf70 <__malloc_unlock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__malloc_unlock+0x8>)
 800bf72:	f7fe bc7a 	b.w	800a86a <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20000a30 	.word	0x20000a30

0800bf7c <_free_r>:
 800bf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d048      	beq.n	800c014 <_free_r+0x98>
 800bf82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf86:	9001      	str	r0, [sp, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf8e:	bfb8      	it	lt
 800bf90:	18e4      	addlt	r4, r4, r3
 800bf92:	f7ff ffe7 	bl	800bf64 <__malloc_lock>
 800bf96:	4a20      	ldr	r2, [pc, #128]	; (800c018 <_free_r+0x9c>)
 800bf98:	9801      	ldr	r0, [sp, #4]
 800bf9a:	6813      	ldr	r3, [r2, #0]
 800bf9c:	4615      	mov	r5, r2
 800bf9e:	b933      	cbnz	r3, 800bfae <_free_r+0x32>
 800bfa0:	6063      	str	r3, [r4, #4]
 800bfa2:	6014      	str	r4, [r2, #0]
 800bfa4:	b003      	add	sp, #12
 800bfa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfaa:	f7ff bfe1 	b.w	800bf70 <__malloc_unlock>
 800bfae:	42a3      	cmp	r3, r4
 800bfb0:	d90b      	bls.n	800bfca <_free_r+0x4e>
 800bfb2:	6821      	ldr	r1, [r4, #0]
 800bfb4:	1862      	adds	r2, r4, r1
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	bf04      	itt	eq
 800bfba:	681a      	ldreq	r2, [r3, #0]
 800bfbc:	685b      	ldreq	r3, [r3, #4]
 800bfbe:	6063      	str	r3, [r4, #4]
 800bfc0:	bf04      	itt	eq
 800bfc2:	1852      	addeq	r2, r2, r1
 800bfc4:	6022      	streq	r2, [r4, #0]
 800bfc6:	602c      	str	r4, [r5, #0]
 800bfc8:	e7ec      	b.n	800bfa4 <_free_r+0x28>
 800bfca:	461a      	mov	r2, r3
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	b10b      	cbz	r3, 800bfd4 <_free_r+0x58>
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	d9fa      	bls.n	800bfca <_free_r+0x4e>
 800bfd4:	6811      	ldr	r1, [r2, #0]
 800bfd6:	1855      	adds	r5, r2, r1
 800bfd8:	42a5      	cmp	r5, r4
 800bfda:	d10b      	bne.n	800bff4 <_free_r+0x78>
 800bfdc:	6824      	ldr	r4, [r4, #0]
 800bfde:	4421      	add	r1, r4
 800bfe0:	1854      	adds	r4, r2, r1
 800bfe2:	42a3      	cmp	r3, r4
 800bfe4:	6011      	str	r1, [r2, #0]
 800bfe6:	d1dd      	bne.n	800bfa4 <_free_r+0x28>
 800bfe8:	681c      	ldr	r4, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	6053      	str	r3, [r2, #4]
 800bfee:	4421      	add	r1, r4
 800bff0:	6011      	str	r1, [r2, #0]
 800bff2:	e7d7      	b.n	800bfa4 <_free_r+0x28>
 800bff4:	d902      	bls.n	800bffc <_free_r+0x80>
 800bff6:	230c      	movs	r3, #12
 800bff8:	6003      	str	r3, [r0, #0]
 800bffa:	e7d3      	b.n	800bfa4 <_free_r+0x28>
 800bffc:	6825      	ldr	r5, [r4, #0]
 800bffe:	1961      	adds	r1, r4, r5
 800c000:	428b      	cmp	r3, r1
 800c002:	bf04      	itt	eq
 800c004:	6819      	ldreq	r1, [r3, #0]
 800c006:	685b      	ldreq	r3, [r3, #4]
 800c008:	6063      	str	r3, [r4, #4]
 800c00a:	bf04      	itt	eq
 800c00c:	1949      	addeq	r1, r1, r5
 800c00e:	6021      	streq	r1, [r4, #0]
 800c010:	6054      	str	r4, [r2, #4]
 800c012:	e7c7      	b.n	800bfa4 <_free_r+0x28>
 800c014:	b003      	add	sp, #12
 800c016:	bd30      	pop	{r4, r5, pc}
 800c018:	20000160 	.word	0x20000160

0800c01c <_realloc_r>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	4607      	mov	r7, r0
 800c020:	4614      	mov	r4, r2
 800c022:	460e      	mov	r6, r1
 800c024:	b921      	cbnz	r1, 800c030 <_realloc_r+0x14>
 800c026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c02a:	4611      	mov	r1, r2
 800c02c:	f7fe bc30 	b.w	800a890 <_malloc_r>
 800c030:	b922      	cbnz	r2, 800c03c <_realloc_r+0x20>
 800c032:	f7ff ffa3 	bl	800bf7c <_free_r>
 800c036:	4625      	mov	r5, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c03c:	f000 f836 	bl	800c0ac <_malloc_usable_size_r>
 800c040:	42a0      	cmp	r0, r4
 800c042:	d20f      	bcs.n	800c064 <_realloc_r+0x48>
 800c044:	4621      	mov	r1, r4
 800c046:	4638      	mov	r0, r7
 800c048:	f7fe fc22 	bl	800a890 <_malloc_r>
 800c04c:	4605      	mov	r5, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d0f2      	beq.n	800c038 <_realloc_r+0x1c>
 800c052:	4631      	mov	r1, r6
 800c054:	4622      	mov	r2, r4
 800c056:	f7ff ff5d 	bl	800bf14 <memcpy>
 800c05a:	4631      	mov	r1, r6
 800c05c:	4638      	mov	r0, r7
 800c05e:	f7ff ff8d 	bl	800bf7c <_free_r>
 800c062:	e7e9      	b.n	800c038 <_realloc_r+0x1c>
 800c064:	4635      	mov	r5, r6
 800c066:	e7e7      	b.n	800c038 <_realloc_r+0x1c>

0800c068 <_fstat_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d07      	ldr	r5, [pc, #28]	; (800c088 <_fstat_r+0x20>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	4611      	mov	r1, r2
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	f7f6 f808 	bl	800208a <_fstat>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d102      	bne.n	800c084 <_fstat_r+0x1c>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	b103      	cbz	r3, 800c084 <_fstat_r+0x1c>
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	bd38      	pop	{r3, r4, r5, pc}
 800c086:	bf00      	nop
 800c088:	20000a38 	.word	0x20000a38

0800c08c <_isatty_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d06      	ldr	r5, [pc, #24]	; (800c0a8 <_isatty_r+0x1c>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	f7f6 f807 	bl	80020aa <_isatty>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_isatty_r+0x1a>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_isatty_r+0x1a>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20000a38 	.word	0x20000a38

0800c0ac <_malloc_usable_size_r>:
 800c0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b0:	1f18      	subs	r0, r3, #4
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bfbc      	itt	lt
 800c0b6:	580b      	ldrlt	r3, [r1, r0]
 800c0b8:	18c0      	addlt	r0, r0, r3
 800c0ba:	4770      	bx	lr

0800c0bc <_init>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	bf00      	nop
 800c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c2:	bc08      	pop	{r3}
 800c0c4:	469e      	mov	lr, r3
 800c0c6:	4770      	bx	lr

0800c0c8 <_fini>:
 800c0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ca:	bf00      	nop
 800c0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ce:	bc08      	pop	{r3}
 800c0d0:	469e      	mov	lr, r3
 800c0d2:	4770      	bx	lr
