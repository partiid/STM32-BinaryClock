
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005944  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d20  08005d20  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005d20  08005d20  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d20  08005d20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000130  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8da  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f2  00000000  00000000  0002f982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219ef  00000000  00000000  00033190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120ba  00000000  00000000  00054b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8397  00000000  00000000  00066c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012efd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002abc  00000000  00000000  0012f024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005acc 	.word	0x08005acc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005acc 	.word	0x08005acc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b5a      	ldr	r3, [pc, #360]	; (8000400 <MX_GPIO_Init+0x180>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a59      	ldr	r2, [pc, #356]	; (8000400 <MX_GPIO_Init+0x180>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <MX_GPIO_Init+0x180>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b54      	ldr	r3, [pc, #336]	; (8000400 <MX_GPIO_Init+0x180>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a53      	ldr	r2, [pc, #332]	; (8000400 <MX_GPIO_Init+0x180>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b51      	ldr	r3, [pc, #324]	; (8000400 <MX_GPIO_Init+0x180>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b4e      	ldr	r3, [pc, #312]	; (8000400 <MX_GPIO_Init+0x180>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a4d      	ldr	r2, [pc, #308]	; (8000400 <MX_GPIO_Init+0x180>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b4b      	ldr	r3, [pc, #300]	; (8000400 <MX_GPIO_Init+0x180>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b48      	ldr	r3, [pc, #288]	; (8000400 <MX_GPIO_Init+0x180>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a47      	ldr	r2, [pc, #284]	; (8000400 <MX_GPIO_Init+0x180>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b45      	ldr	r3, [pc, #276]	; (8000400 <MX_GPIO_Init+0x180>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f6:	4b42      	ldr	r3, [pc, #264]	; (8000400 <MX_GPIO_Init+0x180>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a41      	ldr	r2, [pc, #260]	; (8000400 <MX_GPIO_Init+0x180>)
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b3f      	ldr	r3, [pc, #252]	; (8000400 <MX_GPIO_Init+0x180>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ZIE_Pin|FIO_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f001 f800 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOL_Pin|NIE_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000322:	4838      	ldr	r0, [pc, #224]	; (8000404 <MX_GPIO_Init+0x184>)
 8000324:	f000 fffa 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRO_Pin|BIA_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800032e:	4836      	ldr	r0, [pc, #216]	; (8000408 <MX_GPIO_Init+0x188>)
 8000330:	f000 fff4 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC7
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000334:	f643 63bf 	movw	r3, #16063	; 0x3ebf
 8000338:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033a:	2303      	movs	r3, #3
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	482f      	ldr	r0, [pc, #188]	; (8000408 <MX_GPIO_Init+0x188>)
 800034a:	f000 fd7b 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800034e:	f248 73d3 	movw	r3, #34771	; 0x87d3
 8000352:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4619      	mov	r1, r3
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fd6d 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ZIE_Pin|FIO_Pin;
 800036a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fd5d 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800038a:	f24e 73f7 	movw	r3, #59383	; 0xe7f7
 800038e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	2303      	movs	r3, #3
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	4819      	ldr	r0, [pc, #100]	; (8000404 <MX_GPIO_Init+0x184>)
 80003a0:	f000 fd50 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ZOL_Pin|NIE_Pin;
 80003a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <MX_GPIO_Init+0x184>)
 80003be:	f000 fd41 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BRO_Pin|BIA_Pin;
 80003c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_GPIO_Init+0x188>)
 80003dc:	f000 fd32 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <MX_GPIO_Init+0x18c>)
 80003f4:	f000 fd26 	bl	8000e44 <HAL_GPIO_Init>

}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	; 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400
 8000408:	48000800 	.word	0x48000800
 800040c:	48000c00 	.word	0x48000c00

08000410 <splitNumber>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int splitNumber(int num){
 8000410:	b480      	push	{r7}
 8000412:	b087      	sub	sp, #28
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	      int arr[2];

	      while(num != 0){
 8000418:	e023      	b.n	8000462 <splitNumber+0x52>
	          for(int i = 0; i < 2; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e015      	b.n	800044c <splitNumber+0x3c>
	              arr[i] = num % 10;
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <splitNumber+0x68>)
 8000424:	fb83 2301 	smull	r2, r3, r3, r1
 8000428:	109a      	asrs	r2, r3, #2
 800042a:	17cb      	asrs	r3, r1, #31
 800042c:	1ad2      	subs	r2, r2, r3
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	1aca      	subs	r2, r1, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	f107 0118 	add.w	r1, r7, #24
 8000440:	440b      	add	r3, r1
 8000442:	f843 2c0c 	str.w	r2, [r3, #-12]
	          for(int i = 0; i < 2; i++){
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	2b01      	cmp	r3, #1
 8000450:	dde6      	ble.n	8000420 <splitNumber+0x10>
	          }
	          num = num / 10;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <splitNumber+0x68>)
 8000456:	fb82 1203 	smull	r1, r2, r2, r3
 800045a:	1092      	asrs	r2, r2, #2
 800045c:	17db      	asrs	r3, r3, #31
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	607b      	str	r3, [r7, #4]
	      while(num != 0){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1d8      	bne.n	800041a <splitNumber+0xa>
	      }
	      return arr[1];
 8000468:	693b      	ldr	r3, [r7, #16]

}
 800046a:	4618      	mov	r0, r3
 800046c:	371c      	adds	r7, #28
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	66666667 	.word	0x66666667

0800047c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af02      	add	r7, sp, #8
 8000482:	6078      	str	r0, [r7, #4]
	static RTC_TimeTypeDef sTime;
	static char mess[30];
	 size_t size;

	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000484:	2200      	movs	r2, #0
 8000486:	4917      	ldr	r1, [pc, #92]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f003 f91b 	bl	80036c4 <HAL_RTC_GetTime>

	size = sprintf(mess, "%2.2u:%2.2u:%2.2u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	4619      	mov	r1, r3
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 800049c:	789b      	ldrb	r3, [r3, #2]
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	460b      	mov	r3, r1
 80004a2:	4911      	ldr	r1, [pc, #68]	; (80004e8 <HAL_RTCEx_WakeUpTimerEventCallback+0x6c>)
 80004a4:	4811      	ldr	r0, [pc, #68]	; (80004ec <HAL_RTCEx_WakeUpTimerEventCallback+0x70>)
 80004a6:	f004 fee3 	bl	8005270 <siprintf>
 80004aa:	4603      	mov	r3, r0
 80004ac:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)mess, size);
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	490d      	ldr	r1, [pc, #52]	; (80004ec <HAL_RTCEx_WakeUpTimerEventCallback+0x70>)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <HAL_RTCEx_WakeUpTimerEventCallback+0x74>)
 80004b8:	f003 fd14 	bl	8003ee4 <HAL_UART_Transmit_IT>

	 uint8_t hours = sTime.Hours;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	74fb      	strb	r3, [r7, #19]
	 uint16_t seconds = sTime.Seconds;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	823b      	strh	r3, [r7, #16]


	 int hour = splitNumber(seconds);
 80004c8:	8a3b      	ldrh	r3, [r7, #16]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ffa0 	bl	8000410 <splitNumber>
 80004d0:	4603      	mov	r3, r0
 80004d2:	60fb      	str	r3, [r7, #12]
	 hr = &hour;
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>)
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	6013      	str	r3, [r2, #0]
	 //size = sprintf(mess, "Split number: %d\n", *hr);
	 //HAL_UART_Transmit_IT(&huart2, (uint8_t*)mess, size);



}
 80004dc:	bf00      	nop
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000094 	.word	0x20000094
 80004e8:	08005ae4 	.word	0x08005ae4
 80004ec:	200000a8 	.word	0x200000a8
 80004f0:	20000110 	.word	0x20000110
 80004f4:	2000010c 	.word	0x2000010c

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b092      	sub	sp, #72	; 0x48
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fa83 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f82d 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f7ff febb 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f9d9 	bl	80008c0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800050e:	f000 f89d 	bl	800064c <MX_RTC_Init>
  RTC_TimeTypeDef sTime;

  char mess[50];
  uint8_t size;

  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000512:	4811      	ldr	r0, [pc, #68]	; (8000558 <main+0x60>)
 8000514:	f003 fbd8 	bl	8003cc8 <HAL_RTCEx_DeactivateWakeUpTimer>

  sTime.Hours = 20;
 8000518:	2314      	movs	r3, #20
 800051a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 25;
 800051e:	2319      	movs	r3, #25
 8000520:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 15;
 8000524:	230f      	movs	r3, #15
 8000526:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800052a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x60>)
 8000534:	f002 ff5a 	bl	80033ec <HAL_RTC_SetTime>



    //HAL_UART_Transmit_IT(&huart2, (uint8_t*)mess, size);

    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000538:	2200      	movs	r2, #0
 800053a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x60>)
 8000540:	f003 faec 	bl	8003b1c <HAL_RTCEx_SetWakeUpTimer_IT>




	  if(*hr == 2 || 6){
		  HAL_GPIO_WritePin(leds0[0], BIA_Pin, GPIO_PIN_SET);
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <main+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fee4 	bl	800131c <HAL_GPIO_WritePin>
	  if(*hr == 2 || 6){
 8000554:	e7f6      	b.n	8000544 <main+0x4c>
 8000556:	bf00      	nop
 8000558:	200000ec 	.word	0x200000ec
 800055c:	20000000 	.word	0x20000000

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0a6      	sub	sp, #152	; 0x98
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800056a:	2228      	movs	r2, #40	; 0x28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fe76 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2258      	movs	r2, #88	; 0x58
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fe68 	bl	8005260 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000590:	230a      	movs	r3, #10
 8000592:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fed9 	bl	800137c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005d0:	f000 f82c 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 ff35 	bl	8002460 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005fc:	f000 f816 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <SystemClock_Config+0xc8>)
 8000602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f9ff 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800061c:	f000 f806 	bl	800062c <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3798      	adds	r7, #152	; 0x98
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	00010002 	.word	0x00010002

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>

08000636 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_RTC_Init+0xc0>)
 8000666:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <MX_RTC_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_RTC_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_RTC_Init+0xc0>)
 8000672:	227f      	movs	r2, #127	; 0x7f
 8000674:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_RTC_Init+0xc0>)
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_RTC_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_RTC_Init+0xc0>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_RTC_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <MX_RTC_Init+0xc0>)
 8000690:	f002 fdb8 	bl	8003204 <HAL_RTC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800069a:	f7ff ffc7 	bl	800062c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 18;
 800069e:	2312      	movs	r3, #18
 80006a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 20;
 80006a2:	2314      	movs	r3, #20
 80006a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 10;
 80006a6:	230a      	movs	r3, #10
 80006a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	4619      	mov	r1, r3
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_RTC_Init+0xc0>)
 80006ba:	f002 fe97 	bl	80033ec <HAL_RTC_SetTime>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006c4:	f7ff ffb2 	bl	800062c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80006c8:	2304      	movs	r3, #4
 80006ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80006cc:	2310      	movs	r3, #16
 80006ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 21;
 80006d0:	2315      	movs	r3, #21
 80006d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_RTC_Init+0xc0>)
 80006e0:	f003 f85c 	bl	800379c <HAL_RTC_SetDate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80006ea:	f7ff ff9f 	bl	800062c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_RTC_Init+0xc0>)
 80006f4:	f003 fa12 	bl	8003b1c <HAL_RTCEx_SetWakeUpTimer_IT>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80006fe:	f7ff ff95 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ec 	.word	0x200000ec
 8000710:	40002800 	.word	0x40002800

08000714 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <HAL_RTC_MspInit+0x50>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d119      	bne.n	800075a <HAL_RTC_MspInit+0x46>
 8000726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000734:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000736:	fab3 f383 	clz	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_RTC_MspInit+0x54>)
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	2301      	movs	r3, #1
 8000748:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2003      	movs	r0, #3
 8000750:	f000 fab0 	bl	8000cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fad9 	bl	8000d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40002800 	.word	0x40002800
 8000768:	10908100 	.word	0x10908100

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 fa66 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f948 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <RTC_WKUP_IRQHandler+0x10>)
 800080e:	f003 fab3 	bl	8003d78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ec 	.word	0x200000ec

0800081c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <USART2_IRQHandler+0x10>)
 8000822:	f003 fbcd 	bl	8003fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000110 	.word	0x20000110

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f004 fcd4 	bl	800520c <__errno>
 8000864:	4603      	mov	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <_sbrk+0x64>)
 8000880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20010000 	.word	0x20010000
 8000890:	00000400 	.word	0x00000400
 8000894:	200000c8 	.word	0x200000c8
 8000898:	200001a8 	.word	0x200001a8

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	f003 fa5c 	bl	8003dc0 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f7ff fe8d 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000110 	.word	0x20000110
 800091c:	40004400 	.word	0x40004400

08000920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <HAL_UART_MspInit+0x8c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d130      	bne.n	80009a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fa58 	bl	8000e44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2026      	movs	r0, #38	; 0x26
 800099a:	f000 f98b 	bl	8000cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099e:	2026      	movs	r0, #38	; 0x26
 80009a0:	f000 f9b4 	bl	8000d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009de:	f7ff ff5d 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f004 fc19 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fd87 	bl	80004f8 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009f8:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 80009fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a00:	200001a8 	.word	0x200001a8

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f92b 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fea2 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f972 	bl	8000d3c <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f920 	bl	8000cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000010 	.word	0x20000010
 8000a90:	2000000c 	.word	0x2000000c

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	20000194 	.word	0x20000194

08000abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000194 	.word	0x20000194

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d00f      	beq.n	8000ca2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b06      	cmp	r3, #6
 8000c86:	d00c      	beq.n	8000ca2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	d009      	beq.n	8000ca2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d006      	beq.n	8000ca2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d003      	beq.n	8000ca2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c9a:	21ac      	movs	r1, #172	; 0xac
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c9e:	f7ff fcca 	bl	8000636 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff16 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08005af8 	.word	0x08005af8

08000cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d903      	bls.n	8000cd4 <HAL_NVIC_SetPriority+0x20>
 8000ccc:	21c4      	movs	r1, #196	; 0xc4
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <HAL_NVIC_SetPriority+0x54>)
 8000cd0:	f7ff fcb1 	bl	8000636 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d903      	bls.n	8000ce2 <HAL_NVIC_SetPriority+0x2e>
 8000cda:	21c5      	movs	r1, #197	; 0xc5
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <HAL_NVIC_SetPriority+0x54>)
 8000cde:	f7ff fcaa 	bl	8000636 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce2:	f7ff ff1b 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	6978      	ldr	r0, [r7, #20]
 8000cee:	f7ff ff6b 	bl	8000bc8 <NVIC_EncodePriority>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff3a 	bl	8000b74 <__NVIC_SetPriority>
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08005af8 	.word	0x08005af8

08000d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da03      	bge.n	8000d26 <HAL_NVIC_EnableIRQ+0x1a>
 8000d1e:	21d8      	movs	r1, #216	; 0xd8
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d22:	f7ff fc88 	bl	8000636 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff04 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	08005af8 	.word	0x08005af8

08000d3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff73 	bl	8000c30 <SysTick_Config>
 8000d4a:	4603      	mov	r3, r0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d008      	beq.n	8000d78 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e020      	b.n	8000dba <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 020e 	bic.w	r2, r2, #14
 8000d86:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f202 	lsl.w	r2, r1, r2
 8000da6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d005      	beq.n	8000de8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2204      	movs	r2, #4
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e027      	b.n	8000e38 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020e 	bic.w	r2, r2, #14
 8000df6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	4798      	blx	r3
    } 
  }
  return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e58:	d01f      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <HAL_GPIO_Init+0x104>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01b      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a39      	ldr	r2, [pc, #228]	; (8000f4c <HAL_GPIO_Init+0x108>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d017      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a38      	ldr	r2, [pc, #224]	; (8000f50 <HAL_GPIO_Init+0x10c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a37      	ldr	r2, [pc, #220]	; (8000f54 <HAL_GPIO_Init+0x110>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00f      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a36      	ldr	r2, [pc, #216]	; (8000f58 <HAL_GPIO_Init+0x114>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00b      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x118>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_GPIO_Init+0x11c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e92:	21b2      	movs	r1, #178	; 0xb2
 8000e94:	4833      	ldr	r0, [pc, #204]	; (8000f64 <HAL_GPIO_Init+0x120>)
 8000e96:	f7ff fbce 	bl	8000636 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x6c>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x74>
 8000eb0:	21b3      	movs	r1, #179	; 0xb3
 8000eb2:	482c      	ldr	r0, [pc, #176]	; (8000f64 <HAL_GPIO_Init+0x120>)
 8000eb4:	f7ff fbbf 	bl	8000636 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 821c 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	f000 8217 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b11      	cmp	r3, #17
 8000ed2:	f000 8212 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	f000 820d 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	f000 8208 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000ef2:	f000 8202 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000efe:	f000 81fc 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000f0a:	f000 81f6 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000f16:	f000 81f0 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000f22:	f000 81ea 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000f2e:	f000 81e4 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	f000 81df 	beq.w	80012fa <HAL_GPIO_Init+0x4b6>
 8000f3c:	21b4      	movs	r1, #180	; 0xb4
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <HAL_GPIO_Init+0x120>)
 8000f40:	f7ff fb79 	bl	8000636 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	e1d9      	b.n	80012fa <HAL_GPIO_Init+0x4b6>
 8000f46:	bf00      	nop
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000c00 	.word	0x48000c00
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	48001800 	.word	0x48001800
 8000f60:	48001c00 	.word	0x48001c00
 8000f64:	08005b34 	.word	0x08005b34
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 81ba 	beq.w	80012f4 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x154>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d140      	bne.n	800101a <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00b      	beq.n	8000fb8 <HAL_GPIO_Init+0x174>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x174>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x174>
 8000fb0:	21c3      	movs	r1, #195	; 0xc3
 8000fb2:	4894      	ldr	r0, [pc, #592]	; (8001204 <HAL_GPIO_Init+0x3c0>)
 8000fb4:	f7ff fb3f 	bl	8000636 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d027      	beq.n	8001076 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_GPIO_Init+0x202>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x202>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x202>
 800103e:	21d4      	movs	r1, #212	; 0xd4
 8001040:	4870      	ldr	r0, [pc, #448]	; (8001204 <HAL_GPIO_Init+0x3c0>)
 8001042:	f7ff faf8 	bl	8000636 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d157      	bne.n	8001132 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <HAL_GPIO_Init+0x3c4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01b      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a5d      	ldr	r2, [pc, #372]	; (800120c <HAL_GPIO_Init+0x3c8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d017      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x3cc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x3d0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00f      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_GPIO_Init+0x3d4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00b      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a59      	ldr	r2, [pc, #356]	; (800121c <HAL_GPIO_Init+0x3d8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x3dc>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x286>
 80010c2:	21e2      	movs	r1, #226	; 0xe2
 80010c4:	484f      	ldr	r0, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x3c0>)
 80010c6:	f7ff fab6 	bl	8000636 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d90b      	bls.n	80010ea <HAL_GPIO_Init+0x2a6>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b0e      	cmp	r3, #14
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x2a6>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2a6>
 80010e2:	21e3      	movs	r1, #227	; 0xe3
 80010e4:	4847      	ldr	r0, [pc, #284]	; (8001204 <HAL_GPIO_Init+0x3c0>)
 80010e6:	f7ff faa6 	bl	8000636 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	6939      	ldr	r1, [r7, #16]
 800112e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0203 	and.w	r2, r3, #3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80c0 	beq.w	80012f4 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_GPIO_Init+0x3e0>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <HAL_GPIO_Init+0x3e0>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_GPIO_Init+0x3e0>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x3e4>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b6:	d039      	beq.n	800122c <HAL_GPIO_Init+0x3e8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_GPIO_Init+0x3c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d01f      	beq.n	8001200 <HAL_GPIO_Init+0x3bc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_GPIO_Init+0x3c8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d019      	beq.n	80011fc <HAL_GPIO_Init+0x3b8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_GPIO_Init+0x3cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x3b4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_GPIO_Init+0x3d0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x3b0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_GPIO_Init+0x3d4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x3ac>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_GPIO_Init+0x3d8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x3a8>
 80011e8:	2306      	movs	r3, #6
 80011ea:	e020      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 80011ec:	2307      	movs	r3, #7
 80011ee:	e01e      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 80011f0:	2305      	movs	r3, #5
 80011f2:	e01c      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e01a      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 80011f8:	2303      	movs	r3, #3
 80011fa:	e018      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e016      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 8001200:	2301      	movs	r3, #1
 8001202:	e014      	b.n	800122e <HAL_GPIO_Init+0x3ea>
 8001204:	08005b34 	.word	0x08005b34
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	48000c00 	.word	0x48000c00
 8001214:	48001000 	.word	0x48001000
 8001218:	48001400 	.word	0x48001400
 800121c:	48001800 	.word	0x48001800
 8001220:	48001c00 	.word	0x48001c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	2300      	movs	r3, #0
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4093      	lsls	r3, r2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800123e:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x4d0>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001270:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_GPIO_Init+0x4d4>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	f47f ae2f 	bne.w	8000f68 <HAL_GPIO_Init+0x124>
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010000 	.word	0x40010000
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <HAL_GPIO_WritePin+0x20>
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	041b      	lsls	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_WritePin+0x2a>
 800133c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <HAL_GPIO_WritePin+0x5c>)
 8001342:	f7ff f978 	bl	8000636 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001346:	787b      	ldrb	r3, [r7, #1]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_GPIO_WritePin+0x40>
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d004      	beq.n	800135c <HAL_GPIO_WritePin+0x40>
 8001352:	f240 11a5 	movw	r1, #421	; 0x1a5
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <HAL_GPIO_WritePin+0x5c>)
 8001358:	f7ff f96d 	bl	8000636 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001368:	e002      	b.n	8001370 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08005b34 	.word	0x08005b34

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001382:	af00      	add	r7, sp, #0
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	f001 b85e 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x66>
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d119      	bne.n	80013e2 <HAL_RCC_OscConfig+0x66>
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d112      	bne.n	80013e2 <HAL_RCC_OscConfig+0x66>
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x66>
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <HAL_RCC_OscConfig+0x66>
 80013d8:	f240 114b 	movw	r1, #331	; 0x14b
 80013dc:	48be      	ldr	r0, [pc, #760]	; (80016d8 <HAL_RCC_OscConfig+0x35c>)
 80013de:	f7ff f92a 	bl	8000636 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8178 	beq.w	80016e2 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <HAL_RCC_OscConfig+0xa2>
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001406:	d00a      	beq.n	800141e <HAL_RCC_OscConfig+0xa2>
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001412:	d004      	beq.n	800141e <HAL_RCC_OscConfig+0xa2>
 8001414:	f240 1151 	movw	r1, #337	; 0x151
 8001418:	48af      	ldr	r0, [pc, #700]	; (80016d8 <HAL_RCC_OscConfig+0x35c>)
 800141a:	f7ff f90c 	bl	8000636 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800141e:	4baf      	ldr	r3, [pc, #700]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b04      	cmp	r3, #4
 8001428:	d00c      	beq.n	8001444 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142a:	4bac      	ldr	r3, [pc, #688]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d159      	bne.n	80014ea <HAL_RCC_OscConfig+0x16e>
 8001436:	4ba9      	ldr	r3, [pc, #676]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d152      	bne.n	80014ea <HAL_RCC_OscConfig+0x16e>
 8001444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001448:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001458:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d102      	bne.n	8001476 <HAL_RCC_OscConfig+0xfa>
 8001470:	4b9a      	ldr	r3, [pc, #616]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x126>
 8001476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800148a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001492:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800149e:	4b8f      	ldr	r3, [pc, #572]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80014aa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014ae:	fa92 f2a2 	rbit	r2, r2
 80014b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80014b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014ba:	fab2 f282 	clz	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8104 	beq.w	80016e0 <HAL_RCC_OscConfig+0x364>
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80fe 	bne.w	80016e0 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f000 bfb4 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x188>
 80014f6:	4b79      	ldr	r3, [pc, #484]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a78      	ldr	r2, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e030      	b.n	8001566 <HAL_RCC_OscConfig+0x1ea>
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x1ac>
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a72      	ldr	r2, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6f      	ldr	r2, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01e      	b.n	8001566 <HAL_RCC_OscConfig+0x1ea>
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x1d2>
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 800153a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a65      	ldr	r2, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x1ea>
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a62      	ldr	r2, [pc, #392]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b60      	ldr	r3, [pc, #384]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d059      	beq.n	8001624 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff faa4 	bl	8000abc <HAL_GetTick>
 8001574:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fa9f 	bl	8000abc <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d902      	bls.n	8001590 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	f000 bf61 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80015a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x246>
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e015      	b.n	80015ee <HAL_RCC_OscConfig+0x272>
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80015d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015ea:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ab      	beq.n	800157a <HAL_RCC_OscConfig+0x1fe>
 8001622:	e05e      	b.n	80016e2 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa4a 	bl	8000abc <HAL_GetTick>
 8001628:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162e:	f7ff fa45 	bl	8000abc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d902      	bls.n	8001644 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	f000 bf07 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001648:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x2fa>
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x326>
 8001676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800168a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_RCC_OscConfig+0x360>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80016aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80016ae:	fa92 f2a2 	rbit	r2, r2
 80016b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80016b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f002 021f 	and.w	r2, r2, #31
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ab      	bne.n	800162e <HAL_RCC_OscConfig+0x2b2>
 80016d6:	e004      	b.n	80016e2 <HAL_RCC_OscConfig+0x366>
 80016d8:	08005b70 	.word	0x08005b70
 80016dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 818e 	beq.w	8001a0e <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_RCC_OscConfig+0x394>
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d004      	beq.n	8001710 <HAL_RCC_OscConfig+0x394>
 8001706:	f240 1189 	movw	r1, #393	; 0x189
 800170a:	48a8      	ldr	r0, [pc, #672]	; (80019ac <HAL_RCC_OscConfig+0x630>)
 800170c:	f7fe ff93 	bl	8000636 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b1f      	cmp	r3, #31
 8001718:	d904      	bls.n	8001724 <HAL_RCC_OscConfig+0x3a8>
 800171a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800171e:	48a3      	ldr	r0, [pc, #652]	; (80019ac <HAL_RCC_OscConfig+0x630>)
 8001720:	f7fe ff89 	bl	8000636 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001724:	4ba2      	ldr	r3, [pc, #648]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001730:	4b9f      	ldr	r3, [pc, #636]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d16d      	bne.n	8001818 <HAL_RCC_OscConfig+0x49c>
 800173c:	4b9c      	ldr	r3, [pc, #624]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001748:	d166      	bne.n	8001818 <HAL_RCC_OscConfig+0x49c>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800175c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x3fe>
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x426>
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001792:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800179e:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	2202      	movs	r2, #2
 80017a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017ac:	fa92 f2a2 	rbit	r2, r2
 80017b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80017b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017b8:	fab2 f282 	clz	r2, r2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f042 0220 	orr.w	r2, r2, #32
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x468>
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f000 be37 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	21f8      	movs	r1, #248	; 0xf8
 80017f4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80017fc:	fa91 f1a1 	rbit	r1, r1
 8001800:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001804:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001808:	fab1 f181 	clz	r1, r1
 800180c:	b2c9      	uxtb	r1, r1
 800180e:	408b      	lsls	r3, r1
 8001810:	4967      	ldr	r1, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	e0fa      	b.n	8001a0e <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8085 	beq.w	800192e <HAL_RCC_OscConfig+0x5b2>
 8001824:	2301      	movs	r3, #1
 8001826:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001836:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001844:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	2301      	movs	r3, #1
 800184e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f934 	bl	8000abc <HAL_GetTick>
 8001854:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff f92f 	bl	8000abc <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d902      	bls.n	8001870 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	f000 bdf1 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001882:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_OscConfig+0x524>
 800189a:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e013      	b.n	80018c8 <HAL_RCC_OscConfig+0x54c>
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018c4:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	2202      	movs	r2, #2
 80018ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80018ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80018da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0af      	beq.n	800185a <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	21f8      	movs	r1, #248	; 0xf8
 800190a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001912:	fa91 f1a1 	rbit	r1, r1
 8001916:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800191a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800191e:	fab1 f181 	clz	r1, r1
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	408b      	lsls	r3, r1
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e06f      	b.n	8001a0e <HAL_RCC_OscConfig+0x692>
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001940:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	461a      	mov	r2, r3
 8001956:	2300      	movs	r3, #0
 8001958:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f8af 	bl	8000abc <HAL_GetTick>
 800195e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff f8aa 	bl	8000abc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d902      	bls.n	800197a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	f000 bd6c 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800198c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x638>
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_RCC_OscConfig+0x634>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e018      	b.n	80019dc <HAL_RCC_OscConfig+0x660>
 80019aa:	bf00      	nop
 80019ac:	08005b70 	.word	0x08005b70
 80019b0:	40021000 	.word	0x40021000
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019d8:	4bc0      	ldr	r3, [pc, #768]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	2202      	movs	r2, #2
 80019de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80019e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019e6:	fa92 f2a2 	rbit	r2, r2
 80019ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80019ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f042 0220 	orr.w	r2, r2, #32
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1aa      	bne.n	8001964 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80e7 	beq.w	8001bec <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d009      	beq.n	8001a3c <HAL_RCC_OscConfig+0x6c0>
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d004      	beq.n	8001a3c <HAL_RCC_OscConfig+0x6c0>
 8001a32:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8001a36:	48aa      	ldr	r0, [pc, #680]	; (8001ce0 <HAL_RCC_OscConfig+0x964>)
 8001a38:	f7fe fdfd 	bl	8000636 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d066      	beq.n	8001b14 <HAL_RCC_OscConfig+0x798>
 8001a46:	2301      	movs	r3, #1
 8001a48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b9f      	ldr	r3, [pc, #636]	; (8001ce4 <HAL_RCC_OscConfig+0x968>)
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff f824 	bl	8000abc <HAL_GetTick>
 8001a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f81f 	bl	8000abc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d902      	bls.n	8001a90 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f000 bce1 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ad2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad4:	4b81      	ldr	r3, [pc, #516]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001adc:	2102      	movs	r1, #2
 8001ade:	6019      	str	r1, [r3, #0]
 8001ae0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f1a3 	rbit	r1, r3
 8001aea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001aee:	6019      	str	r1, [r3, #0]
  return result;
 8001af0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0b3      	beq.n	8001a7a <HAL_RCC_OscConfig+0x6fe>
 8001b12:	e06b      	b.n	8001bec <HAL_RCC_OscConfig+0x870>
 8001b14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x968>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7fe ffb9 	bl	8000abc <HAL_GetTick>
 8001b4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7fe ffb4 	bl	8000abc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d902      	bls.n	8001b66 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f000 bc76 	b.w	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001b66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	6019      	str	r1, [r3, #0]
 8001bba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f1a3 	rbit	r1, r3
 8001bc4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bc8:	6019      	str	r1, [r3, #0]
  return result;
 8001bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1b1      	bne.n	8001b50 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8171 	beq.w	8001ede <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <HAL_RCC_OscConfig+0x8ae>
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_OscConfig+0x8ae>
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d004      	beq.n	8001c2a <HAL_RCC_OscConfig+0x8ae>
 8001c20:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001c24:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <HAL_RCC_OscConfig+0x964>)
 8001c26:	f7fe fd06 	bl	8000636 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_OscConfig+0x96c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11a      	bne.n	8001c9e <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_RCC_OscConfig+0x96c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x96c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c74:	f7fe ff22 	bl	8000abc <HAL_GetTick>
 8001c78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7fe ff1d 	bl	8000abc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e3df      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x96c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ef      	beq.n	8001c7e <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x93a>
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e038      	b.n	8001d28 <HAL_RCC_OscConfig+0x9ac>
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d115      	bne.n	8001cec <HAL_RCC_OscConfig+0x970>
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a02      	ldr	r2, [pc, #8]	; (8001cdc <HAL_RCC_OscConfig+0x960>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e026      	b.n	8001d28 <HAL_RCC_OscConfig+0x9ac>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08005b70 	.word	0x08005b70
 8001ce4:	10908120 	.word	0x10908120
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x994>
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x9ac>
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d064      	beq.n	8001dfc <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7fe fec3 	bl	8000abc <HAL_GetTick>
 8001d36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe febe 	bl	8000abc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e37e      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d58:	2202      	movs	r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d70:	2202      	movs	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d82:	601a      	str	r2, [r3, #0]
  return result;
 8001d84:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_OscConfig+0xa28>
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xa44>
 8001da4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	6011      	str	r1, [r2, #0]
 8001dc8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fa92 f1a2 	rbit	r1, r2
 8001dd2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd6:	6011      	str	r1, [r2, #0]
  return result;
 8001dd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0a0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x9c0>
 8001dfa:	e066      	b.n	8001eca <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe fe5e 	bl	8000abc <HAL_GetTick>
 8001e00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fe59 	bl	8000abc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e319      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
 8001e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e4c:	601a      	str	r2, [r3, #0]
  return result;
 8001e4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0xaf8>
 8001e68:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <HAL_RCC_OscConfig+0xaf4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	e010      	b.n	8001e90 <HAL_RCC_OscConfig+0xb14>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4bad      	ldr	r3, [pc, #692]	; (8002144 <HAL_RCC_OscConfig+0xdc8>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e94:	2102      	movs	r1, #2
 8001e96:	6011      	str	r1, [r2, #0]
 8001e98:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	fa92 f1a2 	rbit	r1, r2
 8001ea2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ea6:	6011      	str	r1, [r2, #0]
  return result;
 8001ea8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d19d      	bne.n	8001e06 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b9c      	ldr	r3, [pc, #624]	; (8002144 <HAL_RCC_OscConfig+0xdc8>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a9b      	ldr	r2, [pc, #620]	; (8002144 <HAL_RCC_OscConfig+0xdc8>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <HAL_RCC_OscConfig+0xb8a>
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_OscConfig+0xb8a>
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d004      	beq.n	8001f06 <HAL_RCC_OscConfig+0xb8a>
 8001efc:	f240 213a 	movw	r1, #570	; 0x23a
 8001f00:	4891      	ldr	r0, [pc, #580]	; (8002148 <HAL_RCC_OscConfig+0xdcc>)
 8001f02:	f7fe fb98 	bl	8000636 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 829f 	beq.w	8002450 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f12:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0xdc8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	f000 826c 	beq.w	80023f8 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	f040 81e4 	bne.w	80022f4 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCC_OscConfig+0xbd2>
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d004      	beq.n	8001f4e <HAL_RCC_OscConfig+0xbd2>
 8001f44:	f240 2143 	movw	r1, #579	; 0x243
 8001f48:	487f      	ldr	r0, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0xdcc>)
 8001f4a:	f7fe fb74 	bl	8000636 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d058      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f62:	d052      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f6e:	d04c      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f7a:	d046      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f86:	d040      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f92:	d03a      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001f9e:	d034      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001faa:	d02e      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb6:	d028      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001fc2:	d022      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001fce:	d01c      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001fda:	d016      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001ff2:	d00a      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001ffe:	d004      	beq.n	800200a <HAL_RCC_OscConfig+0xc8e>
 8002000:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002004:	4850      	ldr	r0, [pc, #320]	; (8002148 <HAL_RCC_OscConfig+0xdcc>)
 8002006:	f7fe fb16 	bl	8000636 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d04f      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b01      	cmp	r3, #1
 800201c:	d04a      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b02      	cmp	r3, #2
 8002026:	d045      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2b03      	cmp	r3, #3
 8002030:	d040      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2b04      	cmp	r3, #4
 800203a:	d03b      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	2b05      	cmp	r3, #5
 8002044:	d036      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b06      	cmp	r3, #6
 800204e:	d031      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b07      	cmp	r3, #7
 8002058:	d02c      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2b08      	cmp	r3, #8
 8002062:	d027      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2b09      	cmp	r3, #9
 800206c:	d022      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d01d      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2b0b      	cmp	r3, #11
 8002080:	d018      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b0d      	cmp	r3, #13
 8002094:	d00e      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b0e      	cmp	r3, #14
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d004      	beq.n	80020b4 <HAL_RCC_OscConfig+0xd38>
 80020aa:	f240 2146 	movw	r1, #582	; 0x246
 80020ae:	4826      	ldr	r0, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0xdcc>)
 80020b0:	f7fe fac1 	bl	8000636 <assert_failed>
 80020b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020d2:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	2300      	movs	r3, #0
 80020e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fce7 	bl	8000abc <HAL_GetTick>
 80020ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	e009      	b.n	8002108 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fce2 	bl	8000abc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1a4      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
 8002108:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002120:	601a      	str	r2, [r3, #0]
  return result;
 8002122:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002126:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0xdd0>
 800213c:	4b01      	ldr	r3, [pc, #4]	; (8002144 <HAL_RCC_OscConfig+0xdc8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e020      	b.n	8002184 <HAL_RCC_OscConfig+0xe08>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08005b70 	.word	0x08005b70
 800214c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4bb6      	ldr	r3, [pc, #728]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800219c:	6011      	str	r1, [r2, #0]
  return result;
 800219e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d199      	bne.n	80020f4 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4ba6      	ldr	r3, [pc, #664]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f023 020f 	bic.w	r2, r3, #15
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	49a3      	ldr	r1, [pc, #652]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80021d4:	4ba1      	ldr	r3, [pc, #644]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a19      	ldr	r1, [r3, #32]
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	499c      	ldr	r1, [pc, #624]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002208:	601a      	str	r2, [r3, #0]
  return result;
 800220a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800220e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fc49 	bl	8000abc <HAL_GetTick>
 800222a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222e:	e009      	b.n	8002244 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fc44 	bl	8000abc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e106      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
 8002244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800225c:	601a      	str	r2, [r3, #0]
  return result;
 800225e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002262:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0xf02>
 8002278:	4b78      	ldr	r3, [pc, #480]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	e01b      	b.n	80022b6 <HAL_RCC_OscConfig+0xf3a>
 800227e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022be:	6011      	str	r1, [r2, #0]
 80022c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fa92 f1a2 	rbit	r1, r2
 80022ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ce:	6011      	str	r1, [r2, #0]
  return result;
 80022d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0220 	orr.w	r2, r2, #32
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d09e      	beq.n	8002230 <HAL_RCC_OscConfig+0xeb4>
 80022f2:	e0ad      	b.n	8002450 <HAL_RCC_OscConfig+0x10d4>
 80022f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230c:	601a      	str	r2, [r3, #0]
  return result;
 800230e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002312:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	461a      	mov	r2, r3
 8002326:	2300      	movs	r3, #0
 8002328:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fbc7 	bl	8000abc <HAL_GetTick>
 800232e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e009      	b.n	8002348 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fbc2 	bl	8000abc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e084      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002366:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_RCC_OscConfig+0x1006>
 800237c:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	e01b      	b.n	80023ba <HAL_RCC_OscConfig+0x103e>
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800238a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f107 0214 	add.w	r2, r7, #20
 80023be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f107 0214 	add.w	r2, r7, #20
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fa92 f1a2 	rbit	r1, r2
 80023ce:	f107 0210 	add.w	r2, r7, #16
 80023d2:	6011      	str	r1, [r2, #0]
  return result;
 80023d4:	f107 0210 	add.w	r2, r7, #16
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d19e      	bne.n	8002334 <HAL_RCC_OscConfig+0xfb8>
 80023f6:	e02b      	b.n	8002450 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e025      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x10e0>)
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002416:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800241a:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	429a      	cmp	r2, r3
 8002426:	d111      	bne.n	800244c <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002428:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800242c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002436:	429a      	cmp	r2, r3
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b09e      	sub	sp, #120	; 0x78
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e203      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x52>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d110      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x52>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x52>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x52>
 80024a8:	f240 21c3 	movw	r1, #707	; 0x2c3
 80024ac:	48a5      	ldr	r0, [pc, #660]	; (8002744 <HAL_RCC_ClockConfig+0x2e4>)
 80024ae:	f7fe f8c2 	bl	8000636 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCC_ClockConfig+0x6e>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d007      	beq.n	80024ce <HAL_RCC_ClockConfig+0x6e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d004      	beq.n	80024ce <HAL_RCC_ClockConfig+0x6e>
 80024c4:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80024c8:	489e      	ldr	r0, [pc, #632]	; (8002744 <HAL_RCC_ClockConfig+0x2e4>)
 80024ca:	f7fe f8b4 	bl	8000636 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ce:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d910      	bls.n	80024fe <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024dc:	4b9a      	ldr	r3, [pc, #616]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 0207 	bic.w	r2, r3, #7
 80024e4:	4998      	ldr	r1, [pc, #608]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	4b96      	ldr	r3, [pc, #600]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1c0      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d031      	beq.n	800256e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d024      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d020      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b90      	cmp	r3, #144	; 0x90
 8002520:	d01c      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2ba0      	cmp	r3, #160	; 0xa0
 8002528:	d018      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2bb0      	cmp	r3, #176	; 0xb0
 8002530:	d014      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2bc0      	cmp	r3, #192	; 0xc0
 8002538:	d010      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2bd0      	cmp	r3, #208	; 0xd0
 8002540:	d00c      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2be0      	cmp	r3, #224	; 0xe0
 8002548:	d008      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2bf0      	cmp	r3, #240	; 0xf0
 8002550:	d004      	beq.n	800255c <HAL_RCC_ClockConfig+0xfc>
 8002552:	f240 21db 	movw	r1, #731	; 0x2db
 8002556:	487b      	ldr	r0, [pc, #492]	; (8002744 <HAL_RCC_ClockConfig+0x2e4>)
 8002558:	f7fe f86d 	bl	8000636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b7b      	ldr	r3, [pc, #492]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4978      	ldr	r1, [pc, #480]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80f3 	beq.w	8002762 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_RCC_ClockConfig+0x13e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x13e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d004      	beq.n	800259e <HAL_RCC_ClockConfig+0x13e>
 8002594:	f240 21e2 	movw	r1, #738	; 0x2e2
 8002598:	486a      	ldr	r0, [pc, #424]	; (8002744 <HAL_RCC_ClockConfig+0x2e4>)
 800259a:	f7fe f84c 	bl	8000636 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d13c      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1c0>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x170>
 80025ca:	4b60      	ldr	r3, [pc, #384]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e00f      	b.n	80025f0 <HAL_RCC_ClockConfig+0x190>
 80025d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
 80025de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e2:	663b      	str	r3, [r7, #96]	; 0x60
 80025e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80025f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f002 021f 	and.w	r2, r2, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17b      	bne.n	8002714 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e12f      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d13c      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x242>
 8002628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1f2>
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e00f      	b.n	8002672 <HAL_RCC_ClockConfig+0x212>
 8002652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
 8002660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002664:	643b      	str	r3, [r7, #64]	; 0x40
 8002666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	63ba      	str	r2, [r7, #56]	; 0x38
 8002678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267a:	fa92 f2a2 	rbit	r2, r2
 800267e:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002682:	fab2 f282 	clz	r2, r2
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f002 021f 	and.w	r2, r2, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d13a      	bne.n	8002714 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0ee      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
 80026a2:	2302      	movs	r3, #2
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_ClockConfig+0x26a>
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e00d      	b.n	80026e6 <HAL_RCC_ClockConfig+0x286>
 80026ca:	2302      	movs	r3, #2
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	2302      	movs	r3, #2
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2202      	movs	r2, #2
 80026e8:	61ba      	str	r2, [r7, #24]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	617a      	str	r2, [r7, #20]
  return result;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b5      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 0203 	bic.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002726:	f7fe f9c9 	bl	8000abc <HAL_GetTick>
 800272a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272c:	e010      	b.n	8002750 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272e:	f7fe f9c5 	bl	8000abc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d907      	bls.n	8002750 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e09d      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
 8002744:	08005b70 	.word	0x08005b70
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 020c 	and.w	r2, r3, #12
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	429a      	cmp	r2, r3
 8002760:	d1e5      	bne.n	800272e <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCC_ClockConfig+0x42c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d210      	bcs.n	8002792 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_ClockConfig+0x42c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0207 	bic.w	r2, r3, #7
 8002778:	4944      	ldr	r1, [pc, #272]	; (800288c <HAL_RCC_ClockConfig+0x42c>)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_ClockConfig+0x42c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e076      	b.n	8002880 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d025      	beq.n	80027ea <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x378>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x378>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80027b8:	d00e      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x378>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027c2:	d009      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x378>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027cc:	d004      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x378>
 80027ce:	f240 311e 	movw	r1, #798	; 0x31e
 80027d2:	482f      	ldr	r0, [pc, #188]	; (8002890 <HAL_RCC_ClockConfig+0x430>)
 80027d4:	f7fd ff2f 	bl	8000636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4928      	ldr	r1, [pc, #160]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d026      	beq.n	8002844 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3d0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d013      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3d0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002810:	d00e      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3d0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800281a:	d009      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3d0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	d004      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3d0>
 8002826:	f240 3125 	movw	r1, #805	; 0x325
 800282a:	4819      	ldr	r0, [pc, #100]	; (8002890 <HAL_RCC_ClockConfig+0x430>)
 800282c:	f7fd ff03 	bl	8000636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4912      	ldr	r1, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002844:	f000 f82c 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002848:	4601      	mov	r1, r0
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_RCC_ClockConfig+0x428>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	22f0      	movs	r2, #240	; 0xf0
 8002854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	60fa      	str	r2, [r7, #12]
  return result;
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x434>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	fa21 f303 	lsr.w	r3, r1, r3
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x438>)
 8002872:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x43c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f8db 	bl	8000a34 <HAL_InitTick>
  
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3778      	adds	r7, #120	; 0x78
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	40022000 	.word	0x40022000
 8002890:	08005b70 	.word	0x08005b70
 8002894:	08005cb4 	.word	0x08005cb4
 8002898:	20000008 	.word	0x20000008
 800289c:	2000000c 	.word	0x2000000c

080028a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b08b      	sub	sp, #44	; 0x2c
 80028a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x36>
 80028ce:	e03f      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	e03f      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	607a      	str	r2, [r7, #4]
  return result;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	40d3      	lsrs	r3, r2
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_RCC_GetSysClockFreq+0xcc>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	220f      	movs	r2, #15
 8002904:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	fa92 f2a2 	rbit	r2, r2
 800290c:	60fa      	str	r2, [r7, #12]
  return result;
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	40d3      	lsrs	r3, r2
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <HAL_RCC_GetSysClockFreq+0xd0>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_RCC_GetSysClockFreq+0xc8>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	e007      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0xc8>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	623b      	str	r3, [r7, #32]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002952:	623b      	str	r3, [r7, #32]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	6a3b      	ldr	r3, [r7, #32]
}
 8002958:	4618      	mov	r0, r3
 800295a:	372c      	adds	r7, #44	; 0x2c
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	08005ccc 	.word	0x08005ccc
 8002970:	08005cdc 	.word	0x08005cdc

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002992:	f7ff ffef 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002996:	4601      	mov	r1, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	603a      	str	r2, [r7, #0]
  return result;
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	40d3      	lsrs	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08005cc4 	.word	0x08005cc4

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029d6:	f7ff ffcd 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029da:	4601      	mov	r1, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	603a      	str	r2, [r7, #0]
  return result;
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	40d3      	lsrs	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08005cc4 	.word	0x08005cc4

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b092      	sub	sp, #72	; 0x48
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d303      	bcc.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002a34:	2172      	movs	r1, #114	; 0x72
 8002a36:	4861      	ldr	r0, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a38:	f7fd fdfd 	bl	8000636 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80f1 	beq.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5a:	d00d      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a6e:	d003      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a70:	2178      	movs	r1, #120	; 0x78
 8002a72:	4852      	ldr	r0, [pc, #328]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a74:	f7fd fddf 	bl	8000636 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10e      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fd ffff 	bl	8000abc <HAL_GetTick>
 8002abe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fd fffb 	bl	8000abc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e38f      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae0:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 808a 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f000 8082 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b54:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b58:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d050      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd ffaa 	bl	8000abc <HAL_GetTick>
 8002b68:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fd ffa6 	bl	8000abc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e338      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8002b82:	2302      	movs	r3, #2
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	61fb      	str	r3, [r7, #28]
  return result;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	e012      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002bb6:	bf00      	nop
 8002bb8:	03f73400 	.word	0x03f73400
 8002bbc:	08005ba8 	.word	0x08005ba8
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	10908100 	.word	0x10908100
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	4b97      	ldr	r3, [pc, #604]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2202      	movs	r2, #2
 8002bde:	613a      	str	r2, [r7, #16]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	60fa      	str	r2, [r7, #12]
  return result;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0b2      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4989      	ldr	r1, [pc, #548]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a84      	ldr	r2, [pc, #528]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01c      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00f      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00b      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d007      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d003      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002c58:	21be      	movs	r1, #190	; 0xbe
 8002c5a:	4878      	ldr	r0, [pc, #480]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002c5c:	f7fd fceb 	bl	8000636 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c60:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f023 0203 	bic.w	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4972      	ldr	r1, [pc, #456]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01f      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d00d      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ca2:	d003      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ca4:	21c9      	movs	r1, #201	; 0xc9
 8002ca6:	4865      	ldr	r0, [pc, #404]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ca8:	f7fd fcc5 	bl	8000636 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	495f      	ldr	r1, [pc, #380]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002cf0:	21d5      	movs	r1, #213	; 0xd5
 8002cf2:	4852      	ldr	r0, [pc, #328]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002cf4:	f7fd fc9f 	bl	8000636 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf8:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	494c      	ldr	r1, [pc, #304]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d014      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d003      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8002d26:	21e0      	movs	r1, #224	; 0xe0
 8002d28:	4844      	ldr	r0, [pc, #272]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d2a:	f7fd fc84 	bl	8000636 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	493f      	ldr	r1, [pc, #252]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d54:	d007      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002d5e:	21ee      	movs	r1, #238	; 0xee
 8002d60:	4836      	ldr	r0, [pc, #216]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d62:	f7fd fc68 	bl	8000636 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4931      	ldr	r1, [pc, #196]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d015      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d004      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8002d94:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002d98:	4828      	ldr	r0, [pc, #160]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d9a:	f7fd fc4c 	bl	8000636 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f023 0220 	bic.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4923      	ldr	r1, [pc, #140]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d004      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002dcc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002dd0:	481a      	ldr	r0, [pc, #104]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dd2:	f7fd fc30 	bl	8000636 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	4915      	ldr	r1, [pc, #84]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d025      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e04:	d00e      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e0e:	d009      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e18:	d004      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002e1a:	f240 1123 	movw	r1, #291	; 0x123
 8002e1e:	4807      	ldr	r0, [pc, #28]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e20:	f7fd fc09 	bl	8000636 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4901      	ldr	r1, [pc, #4]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	630b      	str	r3, [r1, #48]	; 0x30
 8002e36:	e003      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08005ba8 	.word	0x08005ba8
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d00e      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e66:	d009      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e70:	d004      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002e72:	f240 112d 	movw	r1, #301	; 0x12d
 8002e76:	48a1      	ldr	r0, [pc, #644]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002e78:	f7fd fbdd 	bl	8000636 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e7c:	4ba0      	ldr	r3, [pc, #640]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	499d      	ldr	r1, [pc, #628]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8002eac:	f240 113d 	movw	r1, #317	; 0x13d
 8002eb0:	4892      	ldr	r0, [pc, #584]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002eb2:	f7fd fbc0 	bl	8000636 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eb6:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	498f      	ldr	r1, [pc, #572]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d04d      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d040      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d03b      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002eee:	d036      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002ef8:	d031      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002f02:	d02c      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f0c:	d027      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8002f16:	d022      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8002f20:	d01d      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8002f2a:	d018      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002f34:	d013      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f3e:	d00e      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002f52:	d004      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002f54:	f240 115d 	movw	r1, #349	; 0x15d
 8002f58:	4868      	ldr	r0, [pc, #416]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002f5a:	f7fd fb6c 	bl	8000636 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f5e:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	4965      	ldr	r1, [pc, #404]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d04d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d040      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8c:	d03b      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8002f96:	d036      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8002fa0:	d031      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8002faa:	d02c      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8002fb4:	d027      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8002fbe:	d022      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8002fc8:	d01d      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8002fd2:	d018      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fdc:	d013      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8002fe6:	d00e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8002ff0:	d009      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8002ffa:	d004      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002ffc:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8003000:	483e      	ldr	r0, [pc, #248]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003002:	f7fd fb18 	bl	8000636 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	493b      	ldr	r1, [pc, #236]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d016      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d004      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003036:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800303a:	4830      	ldr	r0, [pc, #192]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800303c:	f7fd fafb 	bl	8000636 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	492c      	ldr	r1, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800304e:	4313      	orrs	r3, r2
 8003050:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306e:	d004      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8003070:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003074:	4821      	ldr	r0, [pc, #132]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003076:	f7fd fade 	bl	8000636 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	491e      	ldr	r1, [pc, #120]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a8:	d004      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80030aa:	f240 11f7 	movw	r1, #503	; 0x1f7
 80030ae:	4813      	ldr	r0, [pc, #76]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80030b0:	f7fd fac1 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	490f      	ldr	r1, [pc, #60]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01b      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030e2:	d004      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80030e4:	f240 2101 	movw	r1, #513	; 0x201
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80030ea:	f7fd faa4 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80030fc:	08005ba8 	.word	0x08005ba8
 8003100:	40021000 	.word	0x40021000
 8003104:	493d      	ldr	r1, [pc, #244]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d004      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003128:	f240 210b 	movw	r1, #523	; 0x20b
 800312c:	4834      	ldr	r0, [pc, #208]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800312e:	f7fd fa82 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003132:	4b32      	ldr	r3, [pc, #200]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	492f      	ldr	r1, [pc, #188]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x758>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003160:	d004      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x758>
 8003162:	f240 2115 	movw	r1, #533	; 0x215
 8003166:	4826      	ldr	r0, [pc, #152]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8003168:	f7fd fa65 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	4920      	ldr	r1, [pc, #128]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	d004      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x792>
 800319c:	f240 211f 	movw	r1, #543	; 0x21f
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80031a2:	f7fd fa48 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	4912      	ldr	r1, [pc, #72]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d4:	d004      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80031d6:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80031dc:	f7fd fa2b 	bl	8000636 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3748      	adds	r7, #72	; 0x48
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08005ba8 	.word	0x08005ba8

08003204 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0e1      	b.n	80033da <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_RTC_Init+0x1e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_RTC_Init+0x26>
 8003220:	f240 1121 	movw	r1, #289	; 0x121
 8003224:	4870      	ldr	r0, [pc, #448]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 8003226:	f7fd fa06 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d008      	beq.n	8003244 <HAL_RTC_Init+0x40>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_RTC_Init+0x40>
 800323a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800323e:	486a      	ldr	r0, [pc, #424]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 8003240:	f7fd f9f9 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b7f      	cmp	r3, #127	; 0x7f
 800324a:	d904      	bls.n	8003256 <HAL_RTC_Init+0x52>
 800324c:	f240 1123 	movw	r1, #291	; 0x123
 8003250:	4865      	ldr	r0, [pc, #404]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 8003252:	f7fd f9f0 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	d304      	bcc.n	800326a <HAL_RTC_Init+0x66>
 8003260:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003264:	4860      	ldr	r0, [pc, #384]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 8003266:	f7fd f9e6 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_RTC_Init+0x96>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800327a:	d00e      	beq.n	800329a <HAL_RTC_Init+0x96>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003284:	d009      	beq.n	800329a <HAL_RTC_Init+0x96>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800328e:	d004      	beq.n	800329a <HAL_RTC_Init+0x96>
 8003290:	f240 1125 	movw	r1, #293	; 0x125
 8003294:	4854      	ldr	r0, [pc, #336]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 8003296:	f7fd f9ce 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RTC_Init+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032aa:	d004      	beq.n	80032b6 <HAL_RTC_Init+0xb2>
 80032ac:	f44f 7193 	mov.w	r1, #294	; 0x126
 80032b0:	484d      	ldr	r0, [pc, #308]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 80032b2:	f7fd f9c0 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RTC_Init+0xce>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c6:	d004      	beq.n	80032d2 <HAL_RTC_Init+0xce>
 80032c8:	f240 1127 	movw	r1, #295	; 0x127
 80032cc:	4846      	ldr	r0, [pc, #280]	; (80033e8 <HAL_RTC_Init+0x1e4>)
 80032ce:	f7fd f9b2 	bl	8000636 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7f5b      	ldrb	r3, [r3, #29]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fa16 	bl	8000714 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ca      	movs	r2, #202	; 0xca
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2253      	movs	r2, #83	; 0x53
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fba4 	bl	8003a4c <RTC_EnterInitMode>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	22ff      	movs	r2, #255	; 0xff
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e05e      	b.n	80033da <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800332a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68d2      	ldr	r2, [r2, #12]
 8003356:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6919      	ldr	r1, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	041a      	lsls	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10e      	bne.n	80033a8 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fb36 	bl	80039fc <HAL_RTC_WaitForSynchro>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2204      	movs	r2, #4
 80033a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e018      	b.n	80033da <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	22ff      	movs	r2, #255	; 0xff
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40002800 	.word	0x40002800
 80033e8:	08005c04 	.word	0x08005c04

080033ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <HAL_RTC_SetTime+0x26>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d004      	beq.n	8003412 <HAL_RTC_SetTime+0x26>
 8003408:	f240 310f 	movw	r1, #783	; 0x30f
 800340c:	48a4      	ldr	r0, [pc, #656]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 800340e:	f7fd f912 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800341a:	d00d      	beq.n	8003438 <HAL_RTC_SetTime+0x4c>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d008      	beq.n	8003438 <HAL_RTC_SetTime+0x4c>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_RTC_SetTime+0x4c>
 800342e:	f44f 7144 	mov.w	r1, #784	; 0x310
 8003432:	489b      	ldr	r0, [pc, #620]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 8003434:	f7fd f8ff 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_RTC_SetTime+0x68>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003448:	d004      	beq.n	8003454 <HAL_RTC_SetTime+0x68>
 800344a:	f240 3111 	movw	r1, #785	; 0x311
 800344e:	4894      	ldr	r0, [pc, #592]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 8003450:	f7fd f8f1 	bl	8000636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_RTC_SetTime+0x74>
 800345c:	2302      	movs	r3, #2
 800345e:	e12c      	b.n	80036ba <HAL_RTC_SetTime+0x2ce>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2202      	movs	r2, #2
 800346a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d15c      	bne.n	800352c <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01a      	beq.n	80034b6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RTC_SetTime+0xa4>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d904      	bls.n	800349a <HAL_RTC_SetTime+0xae>
 8003490:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003494:	4882      	ldr	r0, [pc, #520]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 8003496:	f7fd f8ce 	bl	8000636 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <HAL_RTC_SetTime+0xe2>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d011      	beq.n	80034ce <HAL_RTC_SetTime+0xe2>
 80034aa:	f240 311d 	movw	r1, #797	; 0x31d
 80034ae:	487c      	ldr	r0, [pc, #496]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80034b0:	f7fd f8c1 	bl	8000636 <assert_failed>
 80034b4:	e00b      	b.n	80034ce <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b17      	cmp	r3, #23
 80034c2:	d904      	bls.n	80034ce <HAL_RTC_SetTime+0xe2>
 80034c4:	f240 3122 	movw	r1, #802	; 0x322
 80034c8:	4875      	ldr	r0, [pc, #468]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80034ca:	f7fd f8b4 	bl	8000636 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	2b3b      	cmp	r3, #59	; 0x3b
 80034d4:	d904      	bls.n	80034e0 <HAL_RTC_SetTime+0xf4>
 80034d6:	f44f 7149 	mov.w	r1, #804	; 0x324
 80034da:	4871      	ldr	r0, [pc, #452]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80034dc:	f7fd f8ab 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	789b      	ldrb	r3, [r3, #2]
 80034e4:	2b3b      	cmp	r3, #59	; 0x3b
 80034e6:	d904      	bls.n	80034f2 <HAL_RTC_SetTime+0x106>
 80034e8:	f240 3125 	movw	r1, #805	; 0x325
 80034ec:	486c      	ldr	r0, [pc, #432]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80034ee:	f7fd f8a2 	bl	8000636 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fad4 	bl	8003aa4 <RTC_ByteToBcd2>
 80034fc:	4603      	mov	r3, r0
 80034fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 facd 	bl	8003aa4 <RTC_ByteToBcd2>
 800350a:	4603      	mov	r3, r0
 800350c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800350e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	789b      	ldrb	r3, [r3, #2]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fac5 	bl	8003aa4 <RTC_ByteToBcd2>
 800351a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800351c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e062      	b.n	80035f2 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d022      	beq.n	8003580 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 face 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_RTC_SetTime+0x16e>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fac6 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003554:	4603      	mov	r3, r0
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d904      	bls.n	8003564 <HAL_RTC_SetTime+0x178>
 800355a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800355e:	4850      	ldr	r0, [pc, #320]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 8003560:	f7fd f869 	bl	8000636 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	78db      	ldrb	r3, [r3, #3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d019      	beq.n	80035a0 <HAL_RTC_SetTime+0x1b4>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	78db      	ldrb	r3, [r3, #3]
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d015      	beq.n	80035a0 <HAL_RTC_SetTime+0x1b4>
 8003574:	f240 3131 	movw	r1, #817	; 0x331
 8003578:	4849      	ldr	r0, [pc, #292]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 800357a:	f7fd f85c 	bl	8000636 <assert_failed>
 800357e:	e00f      	b.n	80035a0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 faa8 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003590:	4603      	mov	r3, r0
 8003592:	2b17      	cmp	r3, #23
 8003594:	d904      	bls.n	80035a0 <HAL_RTC_SetTime+0x1b4>
 8003596:	f240 3136 	movw	r1, #822	; 0x336
 800359a:	4841      	ldr	r0, [pc, #260]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 800359c:	f7fd f84b 	bl	8000636 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa9b 	bl	8003ae0 <RTC_Bcd2ToByte>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b3b      	cmp	r3, #59	; 0x3b
 80035ae:	d904      	bls.n	80035ba <HAL_RTC_SetTime+0x1ce>
 80035b0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80035b4:	483a      	ldr	r0, [pc, #232]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80035b6:	f7fd f83e 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa8e 	bl	8003ae0 <RTC_Bcd2ToByte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b3b      	cmp	r3, #59	; 0x3b
 80035c8:	d904      	bls.n	80035d4 <HAL_RTC_SetTime+0x1e8>
 80035ca:	f240 3139 	movw	r1, #825	; 0x339
 80035ce:	4834      	ldr	r0, [pc, #208]	; (80036a0 <HAL_RTC_SetTime+0x2b4>)
 80035d0:	f7fd f831 	bl	8000636 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	78db      	ldrb	r3, [r3, #3]
 80035ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	22ca      	movs	r2, #202	; 0xca
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2253      	movs	r2, #83	; 0x53
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa22 	bl	8003a4c <RTC_EnterInitMode>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2204      	movs	r2, #4
 800361a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e049      	b.n	80036ba <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003630:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003634:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003644:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d113      	bne.n	80036a4 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9bd 	bl	80039fc <HAL_RTC_WaitForSynchro>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2204      	movs	r2, #4
 8003694:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e00c      	b.n	80036ba <HAL_RTC_SetTime+0x2ce>
 80036a0:	08005c04 	.word	0x08005c04
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop

080036c4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_RTC_GetTime+0x26>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d004      	beq.n	80036ea <HAL_RTC_GetTime+0x26>
 80036e0:	f44f 7164 	mov.w	r1, #912	; 0x390
 80036e4:	482c      	ldr	r0, [pc, #176]	; (8003798 <HAL_RTC_GetTime+0xd4>)
 80036e6:	f7fc ffa6 	bl	8000636 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800370c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003710:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11a      	bne.n	800378c <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f9c0 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	785b      	ldrb	r3, [r3, #1]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f9b7 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f9ae 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08005c04 	.word	0x08005c04

0800379c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_RTC_SetDate+0x26>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d004      	beq.n	80037c2 <HAL_RTC_SetDate+0x26>
 80037b8:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80037bc:	488e      	ldr	r0, [pc, #568]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 80037be:	f7fc ff3a 	bl	8000636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	7f1b      	ldrb	r3, [r3, #28]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_RTC_SetDate+0x32>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e10f      	b.n	80039ee <HAL_RTC_SetDate+0x252>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2202      	movs	r2, #2
 80037d8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10e      	bne.n	80037fe <HAL_RTC_SetDate+0x62>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	f023 0310 	bic.w	r3, r3, #16
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	330a      	adds	r3, #10
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d01c      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d018      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d014      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d010      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d00c      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b06      	cmp	r3, #6
 800382c:	d008      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b07      	cmp	r3, #7
 8003834:	d004      	beq.n	8003840 <HAL_RTC_SetDate+0xa4>
 8003836:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800383a:	486f      	ldr	r0, [pc, #444]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 800383c:	f7fc fefb 	bl	8000636 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13f      	bne.n	80038c6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	78db      	ldrb	r3, [r3, #3]
 800384a:	2b63      	cmp	r3, #99	; 0x63
 800384c:	d904      	bls.n	8003858 <HAL_RTC_SetDate+0xbc>
 800384e:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8003852:	4869      	ldr	r0, [pc, #420]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 8003854:	f7fc feef 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RTC_SetDate+0xcc>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d904      	bls.n	8003872 <HAL_RTC_SetDate+0xd6>
 8003868:	f240 31cd 	movw	r1, #973	; 0x3cd
 800386c:	4862      	ldr	r0, [pc, #392]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 800386e:	f7fc fee2 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_RTC_SetDate+0xe6>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	789b      	ldrb	r3, [r3, #2]
 800387e:	2b1f      	cmp	r3, #31
 8003880:	d904      	bls.n	800388c <HAL_RTC_SetDate+0xf0>
 8003882:	f240 31ce 	movw	r1, #974	; 0x3ce
 8003886:	485c      	ldr	r0, [pc, #368]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 8003888:	f7fc fed5 	bl	8000636 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	78db      	ldrb	r3, [r3, #3]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f907 	bl	8003aa4 <RTC_ByteToBcd2>
 8003896:	4603      	mov	r3, r0
 8003898:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f900 	bl	8003aa4 <RTC_ByteToBcd2>
 80038a4:	4603      	mov	r3, r0
 80038a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80038a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	789b      	ldrb	r3, [r3, #2]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f8f8 	bl	8003aa4 <RTC_ByteToBcd2>
 80038b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80038b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e045      	b.n	8003952 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	78db      	ldrb	r3, [r3, #3]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f908 	bl	8003ae0 <RTC_Bcd2ToByte>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b63      	cmp	r3, #99	; 0x63
 80038d4:	d904      	bls.n	80038e0 <HAL_RTC_SetDate+0x144>
 80038d6:	f240 31d7 	movw	r1, #983	; 0x3d7
 80038da:	4847      	ldr	r0, [pc, #284]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 80038dc:	f7fc feab 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f8fb 	bl	8003ae0 <RTC_Bcd2ToByte>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_RTC_SetDate+0x164>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f8f3 	bl	8003ae0 <RTC_Bcd2ToByte>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d904      	bls.n	800390a <HAL_RTC_SetDate+0x16e>
 8003900:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8003904:	483c      	ldr	r0, [pc, #240]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 8003906:	f7fc fe96 	bl	8000636 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	789b      	ldrb	r3, [r3, #2]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f8e6 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_RTC_SetDate+0x18e>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	789b      	ldrb	r3, [r3, #2]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f8de 	bl	8003ae0 <RTC_Bcd2ToByte>
 8003924:	4603      	mov	r3, r0
 8003926:	2b1f      	cmp	r3, #31
 8003928:	d904      	bls.n	8003934 <HAL_RTC_SetDate+0x198>
 800392a:	f240 31d9 	movw	r1, #985	; 0x3d9
 800392e:	4832      	ldr	r0, [pc, #200]	; (80039f8 <HAL_RTC_SetDate+0x25c>)
 8003930:	f7fc fe81 	bl	8000636 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003940:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003946:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	22ca      	movs	r2, #202	; 0xca
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2253      	movs	r2, #83	; 0x53
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f872 	bl	8003a4c <RTC_EnterInitMode>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2204      	movs	r2, #4
 800397a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e033      	b.n	80039ee <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003990:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003994:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d111      	bne.n	80039d8 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f821 	bl	80039fc <HAL_RTC_WaitForSynchro>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2204      	movs	r2, #4
 80039cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e00a      	b.n	80039ee <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	08005c04 	.word	0x08005c04

080039fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a18:	f7fd f850 	bl	8000abc <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a1e:	e009      	b.n	8003a34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a20:	f7fd f84c 	bl	8000abc <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2e:	d901      	bls.n	8003a34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e007      	b.n	8003a44 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ee      	beq.n	8003a20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d119      	bne.n	8003a9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a70:	f7fd f824 	bl	8000abc <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a76:	e009      	b.n	8003a8c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a78:	f7fd f820 	bl	8000abc <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a86:	d901      	bls.n	8003a8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e007      	b.n	8003a9c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ee      	beq.n	8003a78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003ab2:	e005      	b.n	8003ac0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	3b0a      	subs	r3, #10
 8003abe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d8f6      	bhi.n	8003ab4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d013      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d010      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d00a      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d007      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d004      	beq.n	8003b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b50:	f44f 7158 	mov.w	r1, #864	; 0x360
 8003b54:	485a      	ldr	r0, [pc, #360]	; (8003cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003b56:	f7fc fd6e 	bl	8000636 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d304      	bcc.n	8003b6c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8003b62:	f240 3161 	movw	r1, #865	; 0x361
 8003b66:	4856      	ldr	r0, [pc, #344]	; (8003cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003b68:	f7fc fd65 	bl	8000636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	7f1b      	ldrb	r3, [r3, #28]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e09e      	b.n	8003cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	22ca      	movs	r2, #202	; 0xca
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2253      	movs	r2, #83	; 0x53
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01e      	beq.n	8003be0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8003ba2:	f7fc ff8b 	bl	8000abc <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003ba8:	e013      	b.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003baa:	f7fc ff87 	bl	8000abc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb8:	d90b      	bls.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	22ff      	movs	r2, #255	; 0xff
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e071      	b.n	8003cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e4      	bne.n	8003baa <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bee:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003c00:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c02:	f7fc ff5b 	bl	8000abc <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003c08:	e013      	b.n	8003c32 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c0a:	f7fc ff57 	bl	8000abc <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	d90b      	bls.n	8003c32 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	22ff      	movs	r2, #255	; 0xff
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2203      	movs	r2, #3
 8003c26:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e041      	b.n	8003cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0e4      	beq.n	8003c0a <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0207 	bic.w	r2, r2, #7
 8003c56:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c72:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08005c3c 	.word	0x08005c3c
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7f1b      	ldrb	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e047      	b.n	8003d70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	22ca      	movs	r2, #202	; 0xca
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2253      	movs	r2, #83	; 0x53
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d1a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003d1c:	f7fc fece 	bl	8000abc <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d22:	e013      	b.n	8003d4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d24:	f7fc feca 	bl	8000abc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d32:	d90b      	bls.n	8003d4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e011      	b.n	8003d70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0e4      	beq.n	8003d24 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	22ff      	movs	r2, #255	; 0xff
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc fb74 	bl	800047c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003da4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dac:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	775a      	strb	r2, [r3, #29]
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e077      	b.n	8003ec2 <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d014      	beq.n	8003e04 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <HAL_UART_Init+0x10c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02d      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <HAL_UART_Init+0x110>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d028      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a38      	ldr	r2, [pc, #224]	; (8003ed4 <HAL_UART_Init+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d023      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003df8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dfc:	4836      	ldr	r0, [pc, #216]	; (8003ed8 <HAL_UART_Init+0x118>)
 8003dfe:	f7fc fc1a 	bl	8000636 <assert_failed>
 8003e02:	e01d      	b.n	8003e40 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a30      	ldr	r2, [pc, #192]	; (8003ecc <HAL_UART_Init+0x10c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_UART_Init+0x110>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <HAL_UART_Init+0x114>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <HAL_UART_Init+0x11c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_UART_Init+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_UART_Init+0x80>
 8003e36:	f240 1131 	movw	r1, #305	; 0x131
 8003e3a:	4827      	ldr	r0, [pc, #156]	; (8003ed8 <HAL_UART_Init+0x118>)
 8003e3c:	f7fc fbfb 	bl	8000636 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fc fd65 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fba5 	bl	80045bc <UART_SetConfig>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e022      	b.n	8003ec2 <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fdfd 	bl	8004a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 ff30 	bl	8004d20 <UART_CheckIdleState>
 8003ec0:	4603      	mov	r3, r0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40004400 	.word	0x40004400
 8003ed4:	40004800 	.word	0x40004800
 8003ed8:	08005c78 	.word	0x08005c78
 8003edc:	40004c00 	.word	0x40004c00
 8003ee0:	40005000 	.word	0x40005000

08003ee4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b08b      	sub	sp, #44	; 0x2c
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d156      	bne.n	8003fa8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UART_Transmit_IT+0x22>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e04f      	b.n	8003faa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Transmit_IT+0x34>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e048      	b.n	8003faa <HAL_UART_Transmit_IT+0xc6>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2221      	movs	r2, #33	; 0x21
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f52:	d107      	bne.n	8003f64 <HAL_UART_Transmit_IT+0x80>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <HAL_UART_Transmit_IT+0xd4>)
 8003f60:	669a      	str	r2, [r3, #104]	; 0x68
 8003f62:	e002      	b.n	8003f6a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_UART_Transmit_IT+0xd8>)
 8003f68:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e6      	bne.n	8003f72 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	372c      	adds	r7, #44	; 0x2c
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	080050e5 	.word	0x080050e5
 8003fbc:	0800502d 	.word	0x0800502d

08003fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b0ba      	sub	sp, #232	; 0xe8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fee:	4013      	ands	r3, r2
 8003ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d115      	bne.n	8004028 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00f      	beq.n	8004028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 82a3 	beq.w	8004564 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
      }
      return;
 8004026:	e29d      	b.n	8004564 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8117 	beq.w	8004260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800403e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <HAL_UART_IRQHandler+0x298>)
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 810a 	beq.w	8004260 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d011      	beq.n	800407c <HAL_UART_IRQHandler+0xbc>
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800407c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d011      	beq.n	80040ac <HAL_UART_IRQHandler+0xec>
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2202      	movs	r2, #2
 800409a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d011      	beq.n	80040dc <HAL_UART_IRQHandler+0x11c>
 80040b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2204      	movs	r2, #4
 80040ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d017      	beq.n	8004118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2208      	movs	r2, #8
 8004106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	f043 0208 	orr.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <HAL_UART_IRQHandler+0x18a>
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00c      	beq.n	800414a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8209 	beq.w	8004568 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800419a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d04f      	beq.n	8004242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fec9 	bl	8004f3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d141      	bne.n	800423a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1d9      	bne.n	80041b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	2b00      	cmp	r3, #0
 8004208:	d013      	beq.n	8004232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_UART_IRQHandler+0x29c>)
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fdd5 	bl	8000dc6 <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e00f      	b.n	8004252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9ac 	bl	8004590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e00b      	b.n	8004252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9a8 	bl	8004590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e007      	b.n	8004252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9a4 	bl	8004590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004250:	e18a      	b.n	8004568 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004252:	bf00      	nop
    return;
 8004254:	e188      	b.n	8004568 <HAL_UART_IRQHandler+0x5a8>
 8004256:	bf00      	nop
 8004258:	04000120 	.word	0x04000120
 800425c:	08005001 	.word	0x08005001

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 8143 	bne.w	80044f0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 813c 	beq.w	80044f0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8135 	beq.w	80044f0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	f040 80b1 	bne.w	8004400 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 815c 	beq.w	800456c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042be:	429a      	cmp	r2, r3
 80042c0:	f080 8154 	bcs.w	800456c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	f000 8085 	beq.w	80043e4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004308:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004310:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800431c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1da      	bne.n	80042da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004348:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800434c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004350:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e1      	bne.n	8004324 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004384:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004386:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800438a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	f023 0310 	bic.w	r3, r3, #16
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e4      	bne.n	80043a4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc fcb8 	bl	8000d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8d3 	bl	80045a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043fe:	e0b5      	b.n	800456c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a7 	beq.w	8004570 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80a2 	beq.w	8004570 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800445c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e4      	bne.n	800442c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	623b      	str	r3, [r7, #32]
   return(result);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004486:	633a      	str	r2, [r7, #48]	; 0x30
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 0310 	bic.w	r3, r3, #16
 80044c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	69b9      	ldr	r1, [r7, #24]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	617b      	str	r3, [r7, #20]
   return(result);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e4      	bne.n	80044ac <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f85b 	bl	80045a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ee:	e03f      	b.n	8004570 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <HAL_UART_IRQHandler+0x55a>
 80044fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fe70 	bl	80051f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004518:	e02d      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01c      	beq.n	8004574 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
    }
    return;
 8004542:	e017      	b.n	8004574 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d012      	beq.n	8004576 <HAL_UART_IRQHandler+0x5b6>
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fe21 	bl	80051a4 <UART_EndTransmit_IT>
    return;
 8004562:	e008      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004564:	bf00      	nop
 8004566:	e006      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004568:	bf00      	nop
 800456a:	e004      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
      return;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004574:	bf00      	nop
  }

}
 8004576:	37e8      	adds	r7, #232	; 0xe8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a9a      	ldr	r2, [pc, #616]	; (8004838 <UART_SetConfig+0x27c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d904      	bls.n	80045dc <UART_SetConfig+0x20>
 80045d2:	f640 313f 	movw	r1, #2879	; 0xb3f
 80045d6:	4899      	ldr	r0, [pc, #612]	; (800483c <UART_SetConfig+0x280>)
 80045d8:	f7fc f82d 	bl	8000636 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e4:	d00d      	beq.n	8004602 <UART_SetConfig+0x46>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <UART_SetConfig+0x46>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d004      	beq.n	8004602 <UART_SetConfig+0x46>
 80045f8:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80045fc:	488f      	ldr	r0, [pc, #572]	; (800483c <UART_SetConfig+0x280>)
 80045fe:	f7fc f81a 	bl	8000636 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d012      	beq.n	8004632 <UART_SetConfig+0x76>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <UART_SetConfig+0x76>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800461c:	d009      	beq.n	8004632 <UART_SetConfig+0x76>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	d004      	beq.n	8004632 <UART_SetConfig+0x76>
 8004628:	f640 3141 	movw	r1, #2881	; 0xb41
 800462c:	4883      	ldr	r0, [pc, #524]	; (800483c <UART_SetConfig+0x280>)
 800462e:	f7fc f802 	bl	8000636 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <UART_SetConfig+0x92>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004642:	d004      	beq.n	800464e <UART_SetConfig+0x92>
 8004644:	f640 3142 	movw	r1, #2882	; 0xb42
 8004648:	487c      	ldr	r0, [pc, #496]	; (800483c <UART_SetConfig+0x280>)
 800464a:	f7fb fff4 	bl	8000636 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <UART_SetConfig+0xb8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d009      	beq.n	8004674 <UART_SetConfig+0xb8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004668:	d004      	beq.n	8004674 <UART_SetConfig+0xb8>
 800466a:	f640 3144 	movw	r1, #2884	; 0xb44
 800466e:	4873      	ldr	r0, [pc, #460]	; (800483c <UART_SetConfig+0x280>)
 8004670:	f7fb ffe1 	bl	8000636 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f023 030c 	bic.w	r3, r3, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <UART_SetConfig+0xcc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <UART_SetConfig+0xd6>
 8004688:	f640 3145 	movw	r1, #2885	; 0xb45
 800468c:	486b      	ldr	r0, [pc, #428]	; (800483c <UART_SetConfig+0x280>)
 800468e:	f7fb ffd2 	bl	8000636 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <UART_SetConfig+0x106>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d00e      	beq.n	80046c2 <UART_SetConfig+0x106>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d009      	beq.n	80046c2 <UART_SetConfig+0x106>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b6:	d004      	beq.n	80046c2 <UART_SetConfig+0x106>
 80046b8:	f640 3146 	movw	r1, #2886	; 0xb46
 80046bc:	485f      	ldr	r0, [pc, #380]	; (800483c <UART_SetConfig+0x280>)
 80046be:	f7fb ffba 	bl	8000636 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x122>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d004      	beq.n	80046de <UART_SetConfig+0x122>
 80046d4:	f640 3147 	movw	r1, #2887	; 0xb47
 80046d8:	4858      	ldr	r0, [pc, #352]	; (800483c <UART_SetConfig+0x280>)
 80046da:	f7fb ffac 	bl	8000636 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <UART_SetConfig+0x284>)
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	430b      	orrs	r3, r1
 8004708:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <UART_SetConfig+0x288>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d11f      	bne.n	800478e <UART_SetConfig+0x1d2>
 800474e:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <UART_SetConfig+0x28c>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d816      	bhi.n	8004788 <UART_SetConfig+0x1cc>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x1a4>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004771 	.word	0x08004771
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004783 	.word	0x08004783
 800476c:	08004777 	.word	0x08004777
 8004770:	2301      	movs	r3, #1
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0c4      	b.n	8004900 <UART_SetConfig+0x344>
 8004776:	2302      	movs	r3, #2
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e0c1      	b.n	8004900 <UART_SetConfig+0x344>
 800477c:	2304      	movs	r3, #4
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e0be      	b.n	8004900 <UART_SetConfig+0x344>
 8004782:	2308      	movs	r3, #8
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e0bb      	b.n	8004900 <UART_SetConfig+0x344>
 8004788:	2310      	movs	r3, #16
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e0b8      	b.n	8004900 <UART_SetConfig+0x344>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2e      	ldr	r2, [pc, #184]	; (800484c <UART_SetConfig+0x290>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d124      	bne.n	80047e2 <UART_SetConfig+0x226>
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <UART_SetConfig+0x28c>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047a4:	d011      	beq.n	80047ca <UART_SetConfig+0x20e>
 80047a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047aa:	d817      	bhi.n	80047dc <UART_SetConfig+0x220>
 80047ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b0:	d011      	beq.n	80047d6 <UART_SetConfig+0x21a>
 80047b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b6:	d811      	bhi.n	80047dc <UART_SetConfig+0x220>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <UART_SetConfig+0x208>
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d006      	beq.n	80047d0 <UART_SetConfig+0x214>
 80047c2:	e00b      	b.n	80047dc <UART_SetConfig+0x220>
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e09a      	b.n	8004900 <UART_SetConfig+0x344>
 80047ca:	2302      	movs	r3, #2
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e097      	b.n	8004900 <UART_SetConfig+0x344>
 80047d0:	2304      	movs	r3, #4
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e094      	b.n	8004900 <UART_SetConfig+0x344>
 80047d6:	2308      	movs	r3, #8
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e091      	b.n	8004900 <UART_SetConfig+0x344>
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e08e      	b.n	8004900 <UART_SetConfig+0x344>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <UART_SetConfig+0x294>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d133      	bne.n	8004854 <UART_SetConfig+0x298>
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <UART_SetConfig+0x28c>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80047f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047f8:	d011      	beq.n	800481e <UART_SetConfig+0x262>
 80047fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047fe:	d817      	bhi.n	8004830 <UART_SetConfig+0x274>
 8004800:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004804:	d011      	beq.n	800482a <UART_SetConfig+0x26e>
 8004806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800480a:	d811      	bhi.n	8004830 <UART_SetConfig+0x274>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <UART_SetConfig+0x25c>
 8004810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004814:	d006      	beq.n	8004824 <UART_SetConfig+0x268>
 8004816:	e00b      	b.n	8004830 <UART_SetConfig+0x274>
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e070      	b.n	8004900 <UART_SetConfig+0x344>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e06d      	b.n	8004900 <UART_SetConfig+0x344>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e06a      	b.n	8004900 <UART_SetConfig+0x344>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e067      	b.n	8004900 <UART_SetConfig+0x344>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e064      	b.n	8004900 <UART_SetConfig+0x344>
 8004836:	bf00      	nop
 8004838:	00895440 	.word	0x00895440
 800483c:	08005c78 	.word	0x08005c78
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40013800 	.word	0x40013800
 8004848:	40021000 	.word	0x40021000
 800484c:	40004400 	.word	0x40004400
 8004850:	40004800 	.word	0x40004800
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a86      	ldr	r2, [pc, #536]	; (8004a74 <UART_SetConfig+0x4b8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d124      	bne.n	80048a8 <UART_SetConfig+0x2ec>
 800485e:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <UART_SetConfig+0x4bc>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800486a:	d011      	beq.n	8004890 <UART_SetConfig+0x2d4>
 800486c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004870:	d817      	bhi.n	80048a2 <UART_SetConfig+0x2e6>
 8004872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004876:	d011      	beq.n	800489c <UART_SetConfig+0x2e0>
 8004878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800487c:	d811      	bhi.n	80048a2 <UART_SetConfig+0x2e6>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <UART_SetConfig+0x2ce>
 8004882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004886:	d006      	beq.n	8004896 <UART_SetConfig+0x2da>
 8004888:	e00b      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800488a:	2300      	movs	r3, #0
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e037      	b.n	8004900 <UART_SetConfig+0x344>
 8004890:	2302      	movs	r3, #2
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e034      	b.n	8004900 <UART_SetConfig+0x344>
 8004896:	2304      	movs	r3, #4
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e031      	b.n	8004900 <UART_SetConfig+0x344>
 800489c:	2308      	movs	r3, #8
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e02e      	b.n	8004900 <UART_SetConfig+0x344>
 80048a2:	2310      	movs	r3, #16
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e02b      	b.n	8004900 <UART_SetConfig+0x344>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a73      	ldr	r2, [pc, #460]	; (8004a7c <UART_SetConfig+0x4c0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d124      	bne.n	80048fc <UART_SetConfig+0x340>
 80048b2:	4b71      	ldr	r3, [pc, #452]	; (8004a78 <UART_SetConfig+0x4bc>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048be:	d011      	beq.n	80048e4 <UART_SetConfig+0x328>
 80048c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048c4:	d817      	bhi.n	80048f6 <UART_SetConfig+0x33a>
 80048c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ca:	d011      	beq.n	80048f0 <UART_SetConfig+0x334>
 80048cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d0:	d811      	bhi.n	80048f6 <UART_SetConfig+0x33a>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <UART_SetConfig+0x322>
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048da:	d006      	beq.n	80048ea <UART_SetConfig+0x32e>
 80048dc:	e00b      	b.n	80048f6 <UART_SetConfig+0x33a>
 80048de:	2300      	movs	r3, #0
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e00d      	b.n	8004900 <UART_SetConfig+0x344>
 80048e4:	2302      	movs	r3, #2
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e00a      	b.n	8004900 <UART_SetConfig+0x344>
 80048ea:	2304      	movs	r3, #4
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e007      	b.n	8004900 <UART_SetConfig+0x344>
 80048f0:	2308      	movs	r3, #8
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e004      	b.n	8004900 <UART_SetConfig+0x344>
 80048f6:	2310      	movs	r3, #16
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e001      	b.n	8004900 <UART_SetConfig+0x344>
 80048fc:	2310      	movs	r3, #16
 80048fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d15c      	bne.n	80049c4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d828      	bhi.n	8004962 <UART_SetConfig+0x3a6>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x35c>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe f826 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004940:	61b8      	str	r0, [r7, #24]
        break;
 8004942:	e013      	b.n	800496c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe f844 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <UART_SetConfig+0x4c4>)
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e00c      	b.n	800496c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fd ffa5 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8004956:	61b8      	str	r0, [r7, #24]
        break;
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61bb      	str	r3, [r7, #24]
        break;
 8004960:	e004      	b.n	800496c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77bb      	strb	r3, [r7, #30]
        break;
 800496a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d074      	beq.n	8004a5c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	005a      	lsls	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d916      	bls.n	80049be <UART_SetConfig+0x402>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d212      	bcs.n	80049be <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	89fa      	ldrh	r2, [r7, #14]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e04e      	b.n	8004a5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77bb      	strb	r3, [r7, #30]
 80049c2:	e04b      	b.n	8004a5c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d827      	bhi.n	8004a1a <UART_SetConfig+0x45e>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x414>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a0b 	.word	0x08004a0b
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fd ffca 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80049f8:	61b8      	str	r0, [r7, #24]
        break;
 80049fa:	e013      	b.n	8004a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fd ffe8 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <UART_SetConfig+0x4c4>)
 8004a06:	61bb      	str	r3, [r7, #24]
        break;
 8004a08:	e00c      	b.n	8004a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fd ff49 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8004a0e:	61b8      	str	r0, [r7, #24]
        break;
 8004a10:	e008      	b.n	8004a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	61bb      	str	r3, [r7, #24]
        break;
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	77bb      	strb	r3, [r7, #30]
        break;
 8004a22:	bf00      	nop
    }

    if (pclk != 0U)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	085a      	lsrs	r2, r3, #1
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	441a      	add	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d908      	bls.n	8004a58 <UART_SetConfig+0x49c>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d204      	bcs.n	8004a58 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e001      	b.n	8004a5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40004c00 	.word	0x40004c00
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40005000 	.word	0x40005000
 8004a80:	007a1200 	.word	0x007a1200

08004a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2bff      	cmp	r3, #255	; 0xff
 8004a92:	d904      	bls.n	8004a9e <UART_AdvFeatureConfig+0x1a>
 8004a94:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8004a98:	489d      	ldr	r0, [pc, #628]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004a9a:	f7fb fdcc 	bl	8000636 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x42>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aba:	d004      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x42>
 8004abc:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8004ac0:	4893      	ldr	r0, [pc, #588]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004ac2:	f7fb fdb8 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <UART_AdvFeatureConfig+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af8:	d004      	beq.n	8004b04 <UART_AdvFeatureConfig+0x80>
 8004afa:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8004afe:	4884      	ldr	r0, [pc, #528]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004b00:	f7fb fd99 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <UART_AdvFeatureConfig+0xbe>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b36:	d004      	beq.n	8004b42 <UART_AdvFeatureConfig+0xbe>
 8004b38:	f640 31db 	movw	r1, #3035	; 0xbdb
 8004b3c:	4874      	ldr	r0, [pc, #464]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004b3e:	f7fb fd7a 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d018      	beq.n	8004b96 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <UART_AdvFeatureConfig+0xfc>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d004      	beq.n	8004b80 <UART_AdvFeatureConfig+0xfc>
 8004b76:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8004b7a:	4865      	ldr	r0, [pc, #404]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004b7c:	f7fb fd5b 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <UART_AdvFeatureConfig+0x13a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	d004      	beq.n	8004bbe <UART_AdvFeatureConfig+0x13a>
 8004bb4:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8004bb8:	4855      	ldr	r0, [pc, #340]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004bba:	f7fb fd3c 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d018      	beq.n	8004c12 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <UART_AdvFeatureConfig+0x178>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf0:	d004      	beq.n	8004bfc <UART_AdvFeatureConfig+0x178>
 8004bf2:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8004bf6:	4846      	ldr	r0, [pc, #280]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004bf8:	f7fb fd1d 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d054      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <UART_AdvFeatureConfig+0x290>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <UART_AdvFeatureConfig+0x1c2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	; (8004d18 <UART_AdvFeatureConfig+0x294>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <UART_AdvFeatureConfig+0x1c2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <UART_AdvFeatureConfig+0x298>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <UART_AdvFeatureConfig+0x1c2>
 8004c3c:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8004c40:	4833      	ldr	r0, [pc, #204]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004c42:	f7fb fcf8 	bl	8000636 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <UART_AdvFeatureConfig+0x1de>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d004      	beq.n	8004c62 <UART_AdvFeatureConfig+0x1de>
 8004c58:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8004c5c:	482c      	ldr	r0, [pc, #176]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004c5e:	f7fb fcea 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c80:	d122      	bne.n	8004cc8 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x22e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c92:	d00e      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x22e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d009      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x22e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ca6:	d004      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x22e>
 8004ca8:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004cac:	4818      	ldr	r0, [pc, #96]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004cae:	f7fb fcc2 	bl	8000636 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d018      	beq.n	8004d06 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x26c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ce4:	d004      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x26c>
 8004ce6:	f640 4105 	movw	r1, #3077	; 0xc05
 8004cea:	4809      	ldr	r0, [pc, #36]	; (8004d10 <UART_AdvFeatureConfig+0x28c>)
 8004cec:	f7fb fca3 	bl	8000636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08005c78 	.word	0x08005c78
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40004400 	.word	0x40004400
 8004d1c:	40004800 	.word	0x40004800

08004d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d30:	f7fb fec4 	bl	8000abc <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d10e      	bne.n	8004d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f82d 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e023      	b.n	8004daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d10e      	bne.n	8004d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f817 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e00d      	b.n	8004daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b09c      	sub	sp, #112	; 0x70
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	e0a5      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	f000 80a1 	beq.w	8004f10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fb fe75 	bl	8000abc <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d13e      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e067      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d04f      	beq.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7e:	d147      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004edc:	623a      	str	r2, [r7, #32]
 8004ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e010      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69da      	ldr	r2, [r3, #28]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	f43f af4a 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3770      	adds	r7, #112	; 0x70
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b095      	sub	sp, #84	; 0x54
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
 8004f62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ff4:	bf00      	nop
 8004ff6:	3754      	adds	r7, #84	; 0x54
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fab6 	bl	8004590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b08f      	sub	sp, #60	; 0x3c
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d14d      	bne.n	80050d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d132      	bne.n	80050ae <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	61fb      	str	r3, [r7, #28]
   return(result);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005068:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60bb      	str	r3, [r7, #8]
   return(result);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	613b      	str	r3, [r7, #16]
   return(result);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80050ac:	e014      	b.n	80050d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b292      	uxth	r2, r2
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050d8:	bf00      	nop
 80050da:	373c      	adds	r7, #60	; 0x3c
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b091      	sub	sp, #68	; 0x44
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f0:	2b21      	cmp	r3, #33	; 0x21
 80050f2:	d151      	bne.n	8005198 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d132      	bne.n	8005166 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	623b      	str	r3, [r7, #32]
   return(result);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005114:	63bb      	str	r3, [r7, #56]	; 0x38
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
 8005120:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e6      	bne.n	8005100 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005164:	e018      	b.n	8005198 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	b292      	uxth	r2, r2
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005198:	bf00      	nop
 800519a:	3744      	adds	r7, #68	; 0x44
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6979      	ldr	r1, [r7, #20]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	613b      	str	r3, [r7, #16]
   return(result);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff f9c6 	bl	800457c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f0:	bf00      	nop
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000014 	.word	0x20000014

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4d0d      	ldr	r5, [pc, #52]	; (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 800521e:	1b64      	subs	r4, r4, r5
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2600      	movs	r6, #0
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4d0b      	ldr	r5, [pc, #44]	; (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	; (800525c <__libc_init_array+0x44>)
 800522c:	f000 fc4e 	bl	8005acc <_init>
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2600      	movs	r6, #0
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f855 3b04 	ldr.w	r3, [r5], #4
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08005d20 	.word	0x08005d20
 8005254:	08005d20 	.word	0x08005d20
 8005258:	08005d20 	.word	0x08005d20
 800525c:	08005d24 	.word	0x08005d24

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <siprintf>:
 8005270:	b40e      	push	{r1, r2, r3}
 8005272:	b500      	push	{lr}
 8005274:	b09c      	sub	sp, #112	; 0x70
 8005276:	ab1d      	add	r3, sp, #116	; 0x74
 8005278:	9002      	str	r0, [sp, #8]
 800527a:	9006      	str	r0, [sp, #24]
 800527c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005280:	4809      	ldr	r0, [pc, #36]	; (80052a8 <siprintf+0x38>)
 8005282:	9107      	str	r1, [sp, #28]
 8005284:	9104      	str	r1, [sp, #16]
 8005286:	4909      	ldr	r1, [pc, #36]	; (80052ac <siprintf+0x3c>)
 8005288:	f853 2b04 	ldr.w	r2, [r3], #4
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	6800      	ldr	r0, [r0, #0]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	a902      	add	r1, sp, #8
 8005294:	f000 f868 	bl	8005368 <_svfiprintf_r>
 8005298:	9b02      	ldr	r3, [sp, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	b01c      	add	sp, #112	; 0x70
 80052a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a4:	b003      	add	sp, #12
 80052a6:	4770      	bx	lr
 80052a8:	20000014 	.word	0x20000014
 80052ac:	ffff0208 	.word	0xffff0208

080052b0 <__ssputs_r>:
 80052b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	688e      	ldr	r6, [r1, #8]
 80052b6:	429e      	cmp	r6, r3
 80052b8:	4682      	mov	sl, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	4690      	mov	r8, r2
 80052be:	461f      	mov	r7, r3
 80052c0:	d838      	bhi.n	8005334 <__ssputs_r+0x84>
 80052c2:	898a      	ldrh	r2, [r1, #12]
 80052c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052c8:	d032      	beq.n	8005330 <__ssputs_r+0x80>
 80052ca:	6825      	ldr	r5, [r4, #0]
 80052cc:	6909      	ldr	r1, [r1, #16]
 80052ce:	eba5 0901 	sub.w	r9, r5, r1
 80052d2:	6965      	ldr	r5, [r4, #20]
 80052d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052dc:	3301      	adds	r3, #1
 80052de:	444b      	add	r3, r9
 80052e0:	106d      	asrs	r5, r5, #1
 80052e2:	429d      	cmp	r5, r3
 80052e4:	bf38      	it	cc
 80052e6:	461d      	movcc	r5, r3
 80052e8:	0553      	lsls	r3, r2, #21
 80052ea:	d531      	bpl.n	8005350 <__ssputs_r+0xa0>
 80052ec:	4629      	mov	r1, r5
 80052ee:	f000 fb47 	bl	8005980 <_malloc_r>
 80052f2:	4606      	mov	r6, r0
 80052f4:	b950      	cbnz	r0, 800530c <__ssputs_r+0x5c>
 80052f6:	230c      	movs	r3, #12
 80052f8:	f8ca 3000 	str.w	r3, [sl]
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	6921      	ldr	r1, [r4, #16]
 800530e:	464a      	mov	r2, r9
 8005310:	f000 fabe 	bl	8005890 <memcpy>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800531a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	6126      	str	r6, [r4, #16]
 8005322:	6165      	str	r5, [r4, #20]
 8005324:	444e      	add	r6, r9
 8005326:	eba5 0509 	sub.w	r5, r5, r9
 800532a:	6026      	str	r6, [r4, #0]
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	463e      	mov	r6, r7
 8005330:	42be      	cmp	r6, r7
 8005332:	d900      	bls.n	8005336 <__ssputs_r+0x86>
 8005334:	463e      	mov	r6, r7
 8005336:	4632      	mov	r2, r6
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	4641      	mov	r1, r8
 800533c:	f000 fab6 	bl	80058ac <memmove>
 8005340:	68a3      	ldr	r3, [r4, #8]
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	1b9b      	subs	r3, r3, r6
 8005346:	4432      	add	r2, r6
 8005348:	60a3      	str	r3, [r4, #8]
 800534a:	6022      	str	r2, [r4, #0]
 800534c:	2000      	movs	r0, #0
 800534e:	e7db      	b.n	8005308 <__ssputs_r+0x58>
 8005350:	462a      	mov	r2, r5
 8005352:	f000 fb6f 	bl	8005a34 <_realloc_r>
 8005356:	4606      	mov	r6, r0
 8005358:	2800      	cmp	r0, #0
 800535a:	d1e1      	bne.n	8005320 <__ssputs_r+0x70>
 800535c:	6921      	ldr	r1, [r4, #16]
 800535e:	4650      	mov	r0, sl
 8005360:	f000 fabe 	bl	80058e0 <_free_r>
 8005364:	e7c7      	b.n	80052f6 <__ssputs_r+0x46>
	...

08005368 <_svfiprintf_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	4698      	mov	r8, r3
 800536e:	898b      	ldrh	r3, [r1, #12]
 8005370:	061b      	lsls	r3, r3, #24
 8005372:	b09d      	sub	sp, #116	; 0x74
 8005374:	4607      	mov	r7, r0
 8005376:	460d      	mov	r5, r1
 8005378:	4614      	mov	r4, r2
 800537a:	d50e      	bpl.n	800539a <_svfiprintf_r+0x32>
 800537c:	690b      	ldr	r3, [r1, #16]
 800537e:	b963      	cbnz	r3, 800539a <_svfiprintf_r+0x32>
 8005380:	2140      	movs	r1, #64	; 0x40
 8005382:	f000 fafd 	bl	8005980 <_malloc_r>
 8005386:	6028      	str	r0, [r5, #0]
 8005388:	6128      	str	r0, [r5, #16]
 800538a:	b920      	cbnz	r0, 8005396 <_svfiprintf_r+0x2e>
 800538c:	230c      	movs	r3, #12
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	e0d1      	b.n	800553a <_svfiprintf_r+0x1d2>
 8005396:	2340      	movs	r3, #64	; 0x40
 8005398:	616b      	str	r3, [r5, #20]
 800539a:	2300      	movs	r3, #0
 800539c:	9309      	str	r3, [sp, #36]	; 0x24
 800539e:	2320      	movs	r3, #32
 80053a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80053a8:	2330      	movs	r3, #48	; 0x30
 80053aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005554 <_svfiprintf_r+0x1ec>
 80053ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053b2:	f04f 0901 	mov.w	r9, #1
 80053b6:	4623      	mov	r3, r4
 80053b8:	469a      	mov	sl, r3
 80053ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053be:	b10a      	cbz	r2, 80053c4 <_svfiprintf_r+0x5c>
 80053c0:	2a25      	cmp	r2, #37	; 0x25
 80053c2:	d1f9      	bne.n	80053b8 <_svfiprintf_r+0x50>
 80053c4:	ebba 0b04 	subs.w	fp, sl, r4
 80053c8:	d00b      	beq.n	80053e2 <_svfiprintf_r+0x7a>
 80053ca:	465b      	mov	r3, fp
 80053cc:	4622      	mov	r2, r4
 80053ce:	4629      	mov	r1, r5
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7ff ff6d 	bl	80052b0 <__ssputs_r>
 80053d6:	3001      	adds	r0, #1
 80053d8:	f000 80aa 	beq.w	8005530 <_svfiprintf_r+0x1c8>
 80053dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053de:	445a      	add	r2, fp
 80053e0:	9209      	str	r2, [sp, #36]	; 0x24
 80053e2:	f89a 3000 	ldrb.w	r3, [sl]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80a2 	beq.w	8005530 <_svfiprintf_r+0x1c8>
 80053ec:	2300      	movs	r3, #0
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f6:	f10a 0a01 	add.w	sl, sl, #1
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005402:	931a      	str	r3, [sp, #104]	; 0x68
 8005404:	4654      	mov	r4, sl
 8005406:	2205      	movs	r2, #5
 8005408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540c:	4851      	ldr	r0, [pc, #324]	; (8005554 <_svfiprintf_r+0x1ec>)
 800540e:	f7fa fee7 	bl	80001e0 <memchr>
 8005412:	9a04      	ldr	r2, [sp, #16]
 8005414:	b9d8      	cbnz	r0, 800544e <_svfiprintf_r+0xe6>
 8005416:	06d0      	lsls	r0, r2, #27
 8005418:	bf44      	itt	mi
 800541a:	2320      	movmi	r3, #32
 800541c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005420:	0711      	lsls	r1, r2, #28
 8005422:	bf44      	itt	mi
 8005424:	232b      	movmi	r3, #43	; 0x2b
 8005426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800542a:	f89a 3000 	ldrb.w	r3, [sl]
 800542e:	2b2a      	cmp	r3, #42	; 0x2a
 8005430:	d015      	beq.n	800545e <_svfiprintf_r+0xf6>
 8005432:	9a07      	ldr	r2, [sp, #28]
 8005434:	4654      	mov	r4, sl
 8005436:	2000      	movs	r0, #0
 8005438:	f04f 0c0a 	mov.w	ip, #10
 800543c:	4621      	mov	r1, r4
 800543e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005442:	3b30      	subs	r3, #48	; 0x30
 8005444:	2b09      	cmp	r3, #9
 8005446:	d94e      	bls.n	80054e6 <_svfiprintf_r+0x17e>
 8005448:	b1b0      	cbz	r0, 8005478 <_svfiprintf_r+0x110>
 800544a:	9207      	str	r2, [sp, #28]
 800544c:	e014      	b.n	8005478 <_svfiprintf_r+0x110>
 800544e:	eba0 0308 	sub.w	r3, r0, r8
 8005452:	fa09 f303 	lsl.w	r3, r9, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	9304      	str	r3, [sp, #16]
 800545a:	46a2      	mov	sl, r4
 800545c:	e7d2      	b.n	8005404 <_svfiprintf_r+0x9c>
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	9103      	str	r1, [sp, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	bfbb      	ittet	lt
 800546a:	425b      	neglt	r3, r3
 800546c:	f042 0202 	orrlt.w	r2, r2, #2
 8005470:	9307      	strge	r3, [sp, #28]
 8005472:	9307      	strlt	r3, [sp, #28]
 8005474:	bfb8      	it	lt
 8005476:	9204      	strlt	r2, [sp, #16]
 8005478:	7823      	ldrb	r3, [r4, #0]
 800547a:	2b2e      	cmp	r3, #46	; 0x2e
 800547c:	d10c      	bne.n	8005498 <_svfiprintf_r+0x130>
 800547e:	7863      	ldrb	r3, [r4, #1]
 8005480:	2b2a      	cmp	r3, #42	; 0x2a
 8005482:	d135      	bne.n	80054f0 <_svfiprintf_r+0x188>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9203      	str	r2, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfb8      	it	lt
 8005490:	f04f 33ff 	movlt.w	r3, #4294967295
 8005494:	3402      	adds	r4, #2
 8005496:	9305      	str	r3, [sp, #20]
 8005498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005564 <_svfiprintf_r+0x1fc>
 800549c:	7821      	ldrb	r1, [r4, #0]
 800549e:	2203      	movs	r2, #3
 80054a0:	4650      	mov	r0, sl
 80054a2:	f7fa fe9d 	bl	80001e0 <memchr>
 80054a6:	b140      	cbz	r0, 80054ba <_svfiprintf_r+0x152>
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	eba0 000a 	sub.w	r0, r0, sl
 80054ae:	fa03 f000 	lsl.w	r0, r3, r0
 80054b2:	9b04      	ldr	r3, [sp, #16]
 80054b4:	4303      	orrs	r3, r0
 80054b6:	3401      	adds	r4, #1
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054be:	4826      	ldr	r0, [pc, #152]	; (8005558 <_svfiprintf_r+0x1f0>)
 80054c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054c4:	2206      	movs	r2, #6
 80054c6:	f7fa fe8b 	bl	80001e0 <memchr>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d038      	beq.n	8005540 <_svfiprintf_r+0x1d8>
 80054ce:	4b23      	ldr	r3, [pc, #140]	; (800555c <_svfiprintf_r+0x1f4>)
 80054d0:	bb1b      	cbnz	r3, 800551a <_svfiprintf_r+0x1b2>
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	3307      	adds	r3, #7
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	3308      	adds	r3, #8
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e0:	4433      	add	r3, r6
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	e767      	b.n	80053b6 <_svfiprintf_r+0x4e>
 80054e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ea:	460c      	mov	r4, r1
 80054ec:	2001      	movs	r0, #1
 80054ee:	e7a5      	b.n	800543c <_svfiprintf_r+0xd4>
 80054f0:	2300      	movs	r3, #0
 80054f2:	3401      	adds	r4, #1
 80054f4:	9305      	str	r3, [sp, #20]
 80054f6:	4619      	mov	r1, r3
 80054f8:	f04f 0c0a 	mov.w	ip, #10
 80054fc:	4620      	mov	r0, r4
 80054fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005502:	3a30      	subs	r2, #48	; 0x30
 8005504:	2a09      	cmp	r2, #9
 8005506:	d903      	bls.n	8005510 <_svfiprintf_r+0x1a8>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0c5      	beq.n	8005498 <_svfiprintf_r+0x130>
 800550c:	9105      	str	r1, [sp, #20]
 800550e:	e7c3      	b.n	8005498 <_svfiprintf_r+0x130>
 8005510:	fb0c 2101 	mla	r1, ip, r1, r2
 8005514:	4604      	mov	r4, r0
 8005516:	2301      	movs	r3, #1
 8005518:	e7f0      	b.n	80054fc <_svfiprintf_r+0x194>
 800551a:	ab03      	add	r3, sp, #12
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	462a      	mov	r2, r5
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <_svfiprintf_r+0x1f8>)
 8005522:	a904      	add	r1, sp, #16
 8005524:	4638      	mov	r0, r7
 8005526:	f3af 8000 	nop.w
 800552a:	1c42      	adds	r2, r0, #1
 800552c:	4606      	mov	r6, r0
 800552e:	d1d6      	bne.n	80054de <_svfiprintf_r+0x176>
 8005530:	89ab      	ldrh	r3, [r5, #12]
 8005532:	065b      	lsls	r3, r3, #25
 8005534:	f53f af2c 	bmi.w	8005390 <_svfiprintf_r+0x28>
 8005538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800553a:	b01d      	add	sp, #116	; 0x74
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	ab03      	add	r3, sp, #12
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	462a      	mov	r2, r5
 8005546:	4b06      	ldr	r3, [pc, #24]	; (8005560 <_svfiprintf_r+0x1f8>)
 8005548:	a904      	add	r1, sp, #16
 800554a:	4638      	mov	r0, r7
 800554c:	f000 f87a 	bl	8005644 <_printf_i>
 8005550:	e7eb      	b.n	800552a <_svfiprintf_r+0x1c2>
 8005552:	bf00      	nop
 8005554:	08005cec 	.word	0x08005cec
 8005558:	08005cf6 	.word	0x08005cf6
 800555c:	00000000 	.word	0x00000000
 8005560:	080052b1 	.word	0x080052b1
 8005564:	08005cf2 	.word	0x08005cf2

08005568 <_printf_common>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	4616      	mov	r6, r2
 800556e:	4699      	mov	r9, r3
 8005570:	688a      	ldr	r2, [r1, #8]
 8005572:	690b      	ldr	r3, [r1, #16]
 8005574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005578:	4293      	cmp	r3, r2
 800557a:	bfb8      	it	lt
 800557c:	4613      	movlt	r3, r2
 800557e:	6033      	str	r3, [r6, #0]
 8005580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005584:	4607      	mov	r7, r0
 8005586:	460c      	mov	r4, r1
 8005588:	b10a      	cbz	r2, 800558e <_printf_common+0x26>
 800558a:	3301      	adds	r3, #1
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0699      	lsls	r1, r3, #26
 8005592:	bf42      	ittt	mi
 8005594:	6833      	ldrmi	r3, [r6, #0]
 8005596:	3302      	addmi	r3, #2
 8005598:	6033      	strmi	r3, [r6, #0]
 800559a:	6825      	ldr	r5, [r4, #0]
 800559c:	f015 0506 	ands.w	r5, r5, #6
 80055a0:	d106      	bne.n	80055b0 <_printf_common+0x48>
 80055a2:	f104 0a19 	add.w	sl, r4, #25
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	6832      	ldr	r2, [r6, #0]
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc26      	bgt.n	80055fe <_printf_common+0x96>
 80055b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055b4:	1e13      	subs	r3, r2, #0
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	bf18      	it	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	0692      	lsls	r2, r2, #26
 80055be:	d42b      	bmi.n	8005618 <_printf_common+0xb0>
 80055c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055c4:	4649      	mov	r1, r9
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c0      	blx	r8
 80055ca:	3001      	adds	r0, #1
 80055cc:	d01e      	beq.n	800560c <_printf_common+0xa4>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	68e5      	ldr	r5, [r4, #12]
 80055d2:	6832      	ldr	r2, [r6, #0]
 80055d4:	f003 0306 	and.w	r3, r3, #6
 80055d8:	2b04      	cmp	r3, #4
 80055da:	bf08      	it	eq
 80055dc:	1aad      	subeq	r5, r5, r2
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	6922      	ldr	r2, [r4, #16]
 80055e2:	bf0c      	ite	eq
 80055e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e8:	2500      	movne	r5, #0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bfc4      	itt	gt
 80055ee:	1a9b      	subgt	r3, r3, r2
 80055f0:	18ed      	addgt	r5, r5, r3
 80055f2:	2600      	movs	r6, #0
 80055f4:	341a      	adds	r4, #26
 80055f6:	42b5      	cmp	r5, r6
 80055f8:	d11a      	bne.n	8005630 <_printf_common+0xc8>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e008      	b.n	8005610 <_printf_common+0xa8>
 80055fe:	2301      	movs	r3, #1
 8005600:	4652      	mov	r2, sl
 8005602:	4649      	mov	r1, r9
 8005604:	4638      	mov	r0, r7
 8005606:	47c0      	blx	r8
 8005608:	3001      	adds	r0, #1
 800560a:	d103      	bne.n	8005614 <_printf_common+0xac>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	3501      	adds	r5, #1
 8005616:	e7c6      	b.n	80055a6 <_printf_common+0x3e>
 8005618:	18e1      	adds	r1, r4, r3
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	2030      	movs	r0, #48	; 0x30
 800561e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005622:	4422      	add	r2, r4
 8005624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800562c:	3302      	adds	r3, #2
 800562e:	e7c7      	b.n	80055c0 <_printf_common+0x58>
 8005630:	2301      	movs	r3, #1
 8005632:	4622      	mov	r2, r4
 8005634:	4649      	mov	r1, r9
 8005636:	4638      	mov	r0, r7
 8005638:	47c0      	blx	r8
 800563a:	3001      	adds	r0, #1
 800563c:	d0e6      	beq.n	800560c <_printf_common+0xa4>
 800563e:	3601      	adds	r6, #1
 8005640:	e7d9      	b.n	80055f6 <_printf_common+0x8e>
	...

08005644 <_printf_i>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	4691      	mov	r9, r2
 800564c:	7e27      	ldrb	r7, [r4, #24]
 800564e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005650:	2f78      	cmp	r7, #120	; 0x78
 8005652:	4680      	mov	r8, r0
 8005654:	469a      	mov	sl, r3
 8005656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800565a:	d807      	bhi.n	800566c <_printf_i+0x28>
 800565c:	2f62      	cmp	r7, #98	; 0x62
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x32>
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80d8 	beq.w	8005816 <_printf_i+0x1d2>
 8005666:	2f58      	cmp	r7, #88	; 0x58
 8005668:	f000 80a3 	beq.w	80057b2 <_printf_i+0x16e>
 800566c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005674:	e03a      	b.n	80056ec <_printf_i+0xa8>
 8005676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800567a:	2b15      	cmp	r3, #21
 800567c:	d8f6      	bhi.n	800566c <_printf_i+0x28>
 800567e:	a001      	add	r0, pc, #4	; (adr r0, 8005684 <_printf_i+0x40>)
 8005680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056f1 	.word	0x080056f1
 800568c:	0800566d 	.word	0x0800566d
 8005690:	0800566d 	.word	0x0800566d
 8005694:	0800566d 	.word	0x0800566d
 8005698:	0800566d 	.word	0x0800566d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800566d 	.word	0x0800566d
 80056a4:	0800566d 	.word	0x0800566d
 80056a8:	0800566d 	.word	0x0800566d
 80056ac:	0800566d 	.word	0x0800566d
 80056b0:	080057fd 	.word	0x080057fd
 80056b4:	08005721 	.word	0x08005721
 80056b8:	080057df 	.word	0x080057df
 80056bc:	0800566d 	.word	0x0800566d
 80056c0:	0800566d 	.word	0x0800566d
 80056c4:	0800581f 	.word	0x0800581f
 80056c8:	0800566d 	.word	0x0800566d
 80056cc:	08005721 	.word	0x08005721
 80056d0:	0800566d 	.word	0x0800566d
 80056d4:	0800566d 	.word	0x0800566d
 80056d8:	080057e7 	.word	0x080057e7
 80056dc:	680b      	ldr	r3, [r1, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	600a      	str	r2, [r1, #0]
 80056e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0a3      	b.n	8005838 <_printf_i+0x1f4>
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	6808      	ldr	r0, [r1, #0]
 80056f4:	062e      	lsls	r6, r5, #24
 80056f6:	f100 0304 	add.w	r3, r0, #4
 80056fa:	d50a      	bpl.n	8005712 <_printf_i+0xce>
 80056fc:	6805      	ldr	r5, [r0, #0]
 80056fe:	600b      	str	r3, [r1, #0]
 8005700:	2d00      	cmp	r5, #0
 8005702:	da03      	bge.n	800570c <_printf_i+0xc8>
 8005704:	232d      	movs	r3, #45	; 0x2d
 8005706:	426d      	negs	r5, r5
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570c:	485e      	ldr	r0, [pc, #376]	; (8005888 <_printf_i+0x244>)
 800570e:	230a      	movs	r3, #10
 8005710:	e019      	b.n	8005746 <_printf_i+0x102>
 8005712:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005716:	6805      	ldr	r5, [r0, #0]
 8005718:	600b      	str	r3, [r1, #0]
 800571a:	bf18      	it	ne
 800571c:	b22d      	sxthne	r5, r5
 800571e:	e7ef      	b.n	8005700 <_printf_i+0xbc>
 8005720:	680b      	ldr	r3, [r1, #0]
 8005722:	6825      	ldr	r5, [r4, #0]
 8005724:	1d18      	adds	r0, r3, #4
 8005726:	6008      	str	r0, [r1, #0]
 8005728:	0628      	lsls	r0, r5, #24
 800572a:	d501      	bpl.n	8005730 <_printf_i+0xec>
 800572c:	681d      	ldr	r5, [r3, #0]
 800572e:	e002      	b.n	8005736 <_printf_i+0xf2>
 8005730:	0669      	lsls	r1, r5, #25
 8005732:	d5fb      	bpl.n	800572c <_printf_i+0xe8>
 8005734:	881d      	ldrh	r5, [r3, #0]
 8005736:	4854      	ldr	r0, [pc, #336]	; (8005888 <_printf_i+0x244>)
 8005738:	2f6f      	cmp	r7, #111	; 0x6f
 800573a:	bf0c      	ite	eq
 800573c:	2308      	moveq	r3, #8
 800573e:	230a      	movne	r3, #10
 8005740:	2100      	movs	r1, #0
 8005742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005746:	6866      	ldr	r6, [r4, #4]
 8005748:	60a6      	str	r6, [r4, #8]
 800574a:	2e00      	cmp	r6, #0
 800574c:	bfa2      	ittt	ge
 800574e:	6821      	ldrge	r1, [r4, #0]
 8005750:	f021 0104 	bicge.w	r1, r1, #4
 8005754:	6021      	strge	r1, [r4, #0]
 8005756:	b90d      	cbnz	r5, 800575c <_printf_i+0x118>
 8005758:	2e00      	cmp	r6, #0
 800575a:	d04d      	beq.n	80057f8 <_printf_i+0x1b4>
 800575c:	4616      	mov	r6, r2
 800575e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005762:	fb03 5711 	mls	r7, r3, r1, r5
 8005766:	5dc7      	ldrb	r7, [r0, r7]
 8005768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800576c:	462f      	mov	r7, r5
 800576e:	42bb      	cmp	r3, r7
 8005770:	460d      	mov	r5, r1
 8005772:	d9f4      	bls.n	800575e <_printf_i+0x11a>
 8005774:	2b08      	cmp	r3, #8
 8005776:	d10b      	bne.n	8005790 <_printf_i+0x14c>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	07df      	lsls	r7, r3, #31
 800577c:	d508      	bpl.n	8005790 <_printf_i+0x14c>
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	6861      	ldr	r1, [r4, #4]
 8005782:	4299      	cmp	r1, r3
 8005784:	bfde      	ittt	le
 8005786:	2330      	movle	r3, #48	; 0x30
 8005788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800578c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005790:	1b92      	subs	r2, r2, r6
 8005792:	6122      	str	r2, [r4, #16]
 8005794:	f8cd a000 	str.w	sl, [sp]
 8005798:	464b      	mov	r3, r9
 800579a:	aa03      	add	r2, sp, #12
 800579c:	4621      	mov	r1, r4
 800579e:	4640      	mov	r0, r8
 80057a0:	f7ff fee2 	bl	8005568 <_printf_common>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d14c      	bne.n	8005842 <_printf_i+0x1fe>
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	b004      	add	sp, #16
 80057ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b2:	4835      	ldr	r0, [pc, #212]	; (8005888 <_printf_i+0x244>)
 80057b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	680e      	ldr	r6, [r1, #0]
 80057bc:	061f      	lsls	r7, r3, #24
 80057be:	f856 5b04 	ldr.w	r5, [r6], #4
 80057c2:	600e      	str	r6, [r1, #0]
 80057c4:	d514      	bpl.n	80057f0 <_printf_i+0x1ac>
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	bf44      	itt	mi
 80057ca:	f043 0320 	orrmi.w	r3, r3, #32
 80057ce:	6023      	strmi	r3, [r4, #0]
 80057d0:	b91d      	cbnz	r5, 80057da <_printf_i+0x196>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	f023 0320 	bic.w	r3, r3, #32
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	2310      	movs	r3, #16
 80057dc:	e7b0      	b.n	8005740 <_printf_i+0xfc>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	f043 0320 	orr.w	r3, r3, #32
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	2378      	movs	r3, #120	; 0x78
 80057e8:	4828      	ldr	r0, [pc, #160]	; (800588c <_printf_i+0x248>)
 80057ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ee:	e7e3      	b.n	80057b8 <_printf_i+0x174>
 80057f0:	065e      	lsls	r6, r3, #25
 80057f2:	bf48      	it	mi
 80057f4:	b2ad      	uxthmi	r5, r5
 80057f6:	e7e6      	b.n	80057c6 <_printf_i+0x182>
 80057f8:	4616      	mov	r6, r2
 80057fa:	e7bb      	b.n	8005774 <_printf_i+0x130>
 80057fc:	680b      	ldr	r3, [r1, #0]
 80057fe:	6826      	ldr	r6, [r4, #0]
 8005800:	6960      	ldr	r0, [r4, #20]
 8005802:	1d1d      	adds	r5, r3, #4
 8005804:	600d      	str	r5, [r1, #0]
 8005806:	0635      	lsls	r5, r6, #24
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	d501      	bpl.n	8005810 <_printf_i+0x1cc>
 800580c:	6018      	str	r0, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0x1d2>
 8005810:	0671      	lsls	r1, r6, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0x1c8>
 8005814:	8018      	strh	r0, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	4616      	mov	r6, r2
 800581c:	e7ba      	b.n	8005794 <_printf_i+0x150>
 800581e:	680b      	ldr	r3, [r1, #0]
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	600a      	str	r2, [r1, #0]
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	2100      	movs	r1, #0
 800582a:	4630      	mov	r0, r6
 800582c:	f7fa fcd8 	bl	80001e0 <memchr>
 8005830:	b108      	cbz	r0, 8005836 <_printf_i+0x1f2>
 8005832:	1b80      	subs	r0, r0, r6
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	2300      	movs	r3, #0
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005840:	e7a8      	b.n	8005794 <_printf_i+0x150>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d0ab      	beq.n	80057a8 <_printf_i+0x164>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	079b      	lsls	r3, r3, #30
 8005854:	d413      	bmi.n	800587e <_printf_i+0x23a>
 8005856:	68e0      	ldr	r0, [r4, #12]
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	4298      	cmp	r0, r3
 800585c:	bfb8      	it	lt
 800585e:	4618      	movlt	r0, r3
 8005860:	e7a4      	b.n	80057ac <_printf_i+0x168>
 8005862:	2301      	movs	r3, #1
 8005864:	4632      	mov	r2, r6
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	47d0      	blx	sl
 800586c:	3001      	adds	r0, #1
 800586e:	d09b      	beq.n	80057a8 <_printf_i+0x164>
 8005870:	3501      	adds	r5, #1
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	9903      	ldr	r1, [sp, #12]
 8005876:	1a5b      	subs	r3, r3, r1
 8005878:	42ab      	cmp	r3, r5
 800587a:	dcf2      	bgt.n	8005862 <_printf_i+0x21e>
 800587c:	e7eb      	b.n	8005856 <_printf_i+0x212>
 800587e:	2500      	movs	r5, #0
 8005880:	f104 0619 	add.w	r6, r4, #25
 8005884:	e7f5      	b.n	8005872 <_printf_i+0x22e>
 8005886:	bf00      	nop
 8005888:	08005cfd 	.word	0x08005cfd
 800588c:	08005d0e 	.word	0x08005d0e

08005890 <memcpy>:
 8005890:	440a      	add	r2, r1
 8005892:	4291      	cmp	r1, r2
 8005894:	f100 33ff 	add.w	r3, r0, #4294967295
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	4770      	bx	lr
 800589c:	b510      	push	{r4, lr}
 800589e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d1f9      	bne.n	800589e <memcpy+0xe>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <memmove>:
 80058ac:	4288      	cmp	r0, r1
 80058ae:	b510      	push	{r4, lr}
 80058b0:	eb01 0402 	add.w	r4, r1, r2
 80058b4:	d902      	bls.n	80058bc <memmove+0x10>
 80058b6:	4284      	cmp	r4, r0
 80058b8:	4623      	mov	r3, r4
 80058ba:	d807      	bhi.n	80058cc <memmove+0x20>
 80058bc:	1e43      	subs	r3, r0, #1
 80058be:	42a1      	cmp	r1, r4
 80058c0:	d008      	beq.n	80058d4 <memmove+0x28>
 80058c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ca:	e7f8      	b.n	80058be <memmove+0x12>
 80058cc:	4402      	add	r2, r0
 80058ce:	4601      	mov	r1, r0
 80058d0:	428a      	cmp	r2, r1
 80058d2:	d100      	bne.n	80058d6 <memmove+0x2a>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058de:	e7f7      	b.n	80058d0 <memmove+0x24>

080058e0 <_free_r>:
 80058e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d048      	beq.n	8005978 <_free_r+0x98>
 80058e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ea:	9001      	str	r0, [sp, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f1a1 0404 	sub.w	r4, r1, #4
 80058f2:	bfb8      	it	lt
 80058f4:	18e4      	addlt	r4, r4, r3
 80058f6:	f000 f8d3 	bl	8005aa0 <__malloc_lock>
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <_free_r+0x9c>)
 80058fc:	9801      	ldr	r0, [sp, #4]
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	4615      	mov	r5, r2
 8005902:	b933      	cbnz	r3, 8005912 <_free_r+0x32>
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	6014      	str	r4, [r2, #0]
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800590e:	f000 b8cd 	b.w	8005aac <__malloc_unlock>
 8005912:	42a3      	cmp	r3, r4
 8005914:	d90b      	bls.n	800592e <_free_r+0x4e>
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	1862      	adds	r2, r4, r1
 800591a:	4293      	cmp	r3, r2
 800591c:	bf04      	itt	eq
 800591e:	681a      	ldreq	r2, [r3, #0]
 8005920:	685b      	ldreq	r3, [r3, #4]
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	bf04      	itt	eq
 8005926:	1852      	addeq	r2, r2, r1
 8005928:	6022      	streq	r2, [r4, #0]
 800592a:	602c      	str	r4, [r5, #0]
 800592c:	e7ec      	b.n	8005908 <_free_r+0x28>
 800592e:	461a      	mov	r2, r3
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	b10b      	cbz	r3, 8005938 <_free_r+0x58>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d9fa      	bls.n	800592e <_free_r+0x4e>
 8005938:	6811      	ldr	r1, [r2, #0]
 800593a:	1855      	adds	r5, r2, r1
 800593c:	42a5      	cmp	r5, r4
 800593e:	d10b      	bne.n	8005958 <_free_r+0x78>
 8005940:	6824      	ldr	r4, [r4, #0]
 8005942:	4421      	add	r1, r4
 8005944:	1854      	adds	r4, r2, r1
 8005946:	42a3      	cmp	r3, r4
 8005948:	6011      	str	r1, [r2, #0]
 800594a:	d1dd      	bne.n	8005908 <_free_r+0x28>
 800594c:	681c      	ldr	r4, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	6053      	str	r3, [r2, #4]
 8005952:	4421      	add	r1, r4
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	e7d7      	b.n	8005908 <_free_r+0x28>
 8005958:	d902      	bls.n	8005960 <_free_r+0x80>
 800595a:	230c      	movs	r3, #12
 800595c:	6003      	str	r3, [r0, #0]
 800595e:	e7d3      	b.n	8005908 <_free_r+0x28>
 8005960:	6825      	ldr	r5, [r4, #0]
 8005962:	1961      	adds	r1, r4, r5
 8005964:	428b      	cmp	r3, r1
 8005966:	bf04      	itt	eq
 8005968:	6819      	ldreq	r1, [r3, #0]
 800596a:	685b      	ldreq	r3, [r3, #4]
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	bf04      	itt	eq
 8005970:	1949      	addeq	r1, r1, r5
 8005972:	6021      	streq	r1, [r4, #0]
 8005974:	6054      	str	r4, [r2, #4]
 8005976:	e7c7      	b.n	8005908 <_free_r+0x28>
 8005978:	b003      	add	sp, #12
 800597a:	bd30      	pop	{r4, r5, pc}
 800597c:	200000cc 	.word	0x200000cc

08005980 <_malloc_r>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	1ccd      	adds	r5, r1, #3
 8005984:	f025 0503 	bic.w	r5, r5, #3
 8005988:	3508      	adds	r5, #8
 800598a:	2d0c      	cmp	r5, #12
 800598c:	bf38      	it	cc
 800598e:	250c      	movcc	r5, #12
 8005990:	2d00      	cmp	r5, #0
 8005992:	4606      	mov	r6, r0
 8005994:	db01      	blt.n	800599a <_malloc_r+0x1a>
 8005996:	42a9      	cmp	r1, r5
 8005998:	d903      	bls.n	80059a2 <_malloc_r+0x22>
 800599a:	230c      	movs	r3, #12
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	2000      	movs	r0, #0
 80059a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a2:	f000 f87d 	bl	8005aa0 <__malloc_lock>
 80059a6:	4921      	ldr	r1, [pc, #132]	; (8005a2c <_malloc_r+0xac>)
 80059a8:	680a      	ldr	r2, [r1, #0]
 80059aa:	4614      	mov	r4, r2
 80059ac:	b99c      	cbnz	r4, 80059d6 <_malloc_r+0x56>
 80059ae:	4f20      	ldr	r7, [pc, #128]	; (8005a30 <_malloc_r+0xb0>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	b923      	cbnz	r3, 80059be <_malloc_r+0x3e>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4630      	mov	r0, r6
 80059b8:	f000 f862 	bl	8005a80 <_sbrk_r>
 80059bc:	6038      	str	r0, [r7, #0]
 80059be:	4629      	mov	r1, r5
 80059c0:	4630      	mov	r0, r6
 80059c2:	f000 f85d 	bl	8005a80 <_sbrk_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d123      	bne.n	8005a12 <_malloc_r+0x92>
 80059ca:	230c      	movs	r3, #12
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	4630      	mov	r0, r6
 80059d0:	f000 f86c 	bl	8005aac <__malloc_unlock>
 80059d4:	e7e3      	b.n	800599e <_malloc_r+0x1e>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	1b5b      	subs	r3, r3, r5
 80059da:	d417      	bmi.n	8005a0c <_malloc_r+0x8c>
 80059dc:	2b0b      	cmp	r3, #11
 80059de:	d903      	bls.n	80059e8 <_malloc_r+0x68>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	441c      	add	r4, r3
 80059e4:	6025      	str	r5, [r4, #0]
 80059e6:	e004      	b.n	80059f2 <_malloc_r+0x72>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	42a2      	cmp	r2, r4
 80059ec:	bf0c      	ite	eq
 80059ee:	600b      	streq	r3, [r1, #0]
 80059f0:	6053      	strne	r3, [r2, #4]
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 f85a 	bl	8005aac <__malloc_unlock>
 80059f8:	f104 000b 	add.w	r0, r4, #11
 80059fc:	1d23      	adds	r3, r4, #4
 80059fe:	f020 0007 	bic.w	r0, r0, #7
 8005a02:	1ac2      	subs	r2, r0, r3
 8005a04:	d0cc      	beq.n	80059a0 <_malloc_r+0x20>
 8005a06:	1a1b      	subs	r3, r3, r0
 8005a08:	50a3      	str	r3, [r4, r2]
 8005a0a:	e7c9      	b.n	80059a0 <_malloc_r+0x20>
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	6864      	ldr	r4, [r4, #4]
 8005a10:	e7cc      	b.n	80059ac <_malloc_r+0x2c>
 8005a12:	1cc4      	adds	r4, r0, #3
 8005a14:	f024 0403 	bic.w	r4, r4, #3
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d0e3      	beq.n	80059e4 <_malloc_r+0x64>
 8005a1c:	1a21      	subs	r1, r4, r0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f82e 	bl	8005a80 <_sbrk_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d1dd      	bne.n	80059e4 <_malloc_r+0x64>
 8005a28:	e7cf      	b.n	80059ca <_malloc_r+0x4a>
 8005a2a:	bf00      	nop
 8005a2c:	200000cc 	.word	0x200000cc
 8005a30:	200000d0 	.word	0x200000d0

08005a34 <_realloc_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	4607      	mov	r7, r0
 8005a38:	4614      	mov	r4, r2
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	b921      	cbnz	r1, 8005a48 <_realloc_r+0x14>
 8005a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a42:	4611      	mov	r1, r2
 8005a44:	f7ff bf9c 	b.w	8005980 <_malloc_r>
 8005a48:	b922      	cbnz	r2, 8005a54 <_realloc_r+0x20>
 8005a4a:	f7ff ff49 	bl	80058e0 <_free_r>
 8005a4e:	4625      	mov	r5, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	f000 f830 	bl	8005ab8 <_malloc_usable_size_r>
 8005a58:	42a0      	cmp	r0, r4
 8005a5a:	d20f      	bcs.n	8005a7c <_realloc_r+0x48>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff ff8e 	bl	8005980 <_malloc_r>
 8005a64:	4605      	mov	r5, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0f2      	beq.n	8005a50 <_realloc_r+0x1c>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	f7ff ff0f 	bl	8005890 <memcpy>
 8005a72:	4631      	mov	r1, r6
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff ff33 	bl	80058e0 <_free_r>
 8005a7a:	e7e9      	b.n	8005a50 <_realloc_r+0x1c>
 8005a7c:	4635      	mov	r5, r6
 8005a7e:	e7e7      	b.n	8005a50 <_realloc_r+0x1c>

08005a80 <_sbrk_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	; (8005a9c <_sbrk_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fa fed0 	bl	8000830 <_sbrk>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_sbrk_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_sbrk_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000198 	.word	0x20000198

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f000 b811 	b.w	8005ac8 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200001a0 	.word	0x200001a0

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f000 b80c 	b.w	8005aca <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200001a0 	.word	0x200001a0

08005ab8 <_malloc_usable_size_r>:
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f18      	subs	r0, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfbc      	itt	lt
 8005ac2:	580b      	ldrlt	r3, [r1, r0]
 8005ac4:	18c0      	addlt	r0, r0, r3
 8005ac6:	4770      	bx	lr

08005ac8 <__retarget_lock_acquire_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <__retarget_lock_release_recursive>:
 8005aca:	4770      	bx	lr

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
