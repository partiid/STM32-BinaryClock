
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007254  08007254  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007254  08007254  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007254  08007254  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001f0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012675  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026de  00000000  00000000  00032719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00034df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212fc  00000000  00000000  00036870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d60  00000000  00000000  00057b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5dc  00000000  00000000  0006f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00139ea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004088  00000000  00000000  00139efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e14 	.word	0x08006e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006e14 	.word	0x08006e14

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c6:	4b5a      	ldr	r3, [pc, #360]	; (8000430 <MX_GPIO_Init+0x180>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a59      	ldr	r2, [pc, #356]	; (8000430 <MX_GPIO_Init+0x180>)
 80002cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b57      	ldr	r3, [pc, #348]	; (8000430 <MX_GPIO_Init+0x180>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002da:	613b      	str	r3, [r7, #16]
 80002dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002de:	4b54      	ldr	r3, [pc, #336]	; (8000430 <MX_GPIO_Init+0x180>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a53      	ldr	r2, [pc, #332]	; (8000430 <MX_GPIO_Init+0x180>)
 80002e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b51      	ldr	r3, [pc, #324]	; (8000430 <MX_GPIO_Init+0x180>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <MX_GPIO_Init+0x180>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a4d      	ldr	r2, [pc, #308]	; (8000430 <MX_GPIO_Init+0x180>)
 80002fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b4b      	ldr	r3, [pc, #300]	; (8000430 <MX_GPIO_Init+0x180>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	4b48      	ldr	r3, [pc, #288]	; (8000430 <MX_GPIO_Init+0x180>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a47      	ldr	r2, [pc, #284]	; (8000430 <MX_GPIO_Init+0x180>)
 8000314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b45      	ldr	r3, [pc, #276]	; (8000430 <MX_GPIO_Init+0x180>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000326:	4b42      	ldr	r3, [pc, #264]	; (8000430 <MX_GPIO_Init+0x180>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a41      	ldr	r2, [pc, #260]	; (8000430 <MX_GPIO_Init+0x180>)
 800032c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <MX_GPIO_Init+0x180>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f001 fb23 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRO_Pin|BIA_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000350:	4838      	ldr	r0, [pc, #224]	; (8000434 <MX_GPIO_Init+0x184>)
 8000352:	f001 fb1d 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800035c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4831      	ldr	r0, [pc, #196]	; (8000434 <MX_GPIO_Init+0x184>)
 800036e:	f001 f87d 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC7 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000372:	f641 63bf 	movw	r3, #7871	; 0x1ebf
 8000376:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	482b      	ldr	r0, [pc, #172]	; (8000434 <MX_GPIO_Init+0x184>)
 8000388:	f001 f870 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800038c:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 8000390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000392:	2303      	movs	r3, #3
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f001 f862 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f001 f853 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003c6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80003ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	4817      	ldr	r0, [pc, #92]	; (8000438 <MX_GPIO_Init+0x188>)
 80003dc:	f001 f846 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BRO_Pin|BIA_Pin;
 80003e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2300      	movs	r3, #0
 80003f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	480e      	ldr	r0, [pc, #56]	; (8000434 <MX_GPIO_Init+0x184>)
 80003fa:	f001 f837 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003fe:	2304      	movs	r3, #4
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000402:	2303      	movs	r3, #3
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	4619      	mov	r1, r3
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <MX_GPIO_Init+0x18c>)
 8000412:	f001 f82b 	bl	800146c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	2028      	movs	r0, #40	; 0x28
 800041c:	f000 ff5e 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000420:	2028      	movs	r0, #40	; 0x28
 8000422:	f000 ff87 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 8000426:	bf00      	nop
 8000428:	3728      	adds	r7, #40	; 0x28
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	48000800 	.word	0x48000800
 8000438:	48000400 	.word	0x48000400
 800043c:	48000c00 	.word	0x48000c00

08000440 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	x1hzTime++;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <delay_1hz+0x30>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <delay_1hz+0x30>)
 800044c:	6013      	str	r3, [r2, #0]
	if( x1hzTime >= 1000){
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <delay_1hz+0x30>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000456:	d305      	bcc.n	8000464 <delay_1hz+0x24>
		x1hz = 1;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <delay_1hz+0x34>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <delay_1hz+0x30>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	}
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090
 8000474:	20000098 	.word	0x20000098

08000478 <delay_4hz>:

void delay_4hz(){
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	x4hzTime++;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <delay_4hz+0x2c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <delay_4hz+0x2c>)
 8000484:	6013      	str	r3, [r2, #0]

	if(x4hzTime >= 250){
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <delay_4hz+0x2c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2bf9      	cmp	r3, #249	; 0xf9
 800048c:	d905      	bls.n	800049a <delay_4hz+0x22>
		x4hz = 1;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <delay_4hz+0x30>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <delay_4hz+0x2c>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
	}

}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	20000094 	.word	0x20000094
 80004a8:	20000099 	.word	0x20000099

080004ac <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <delayUs+0x30>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80004be:	bf00      	nop
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <delayUs+0x34>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d3f9      	bcc.n	80004c0 <delayUs+0x14>
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000180 	.word	0x20000180
 80004e0:	20000134 	.word	0x20000134

080004e4 <delayMs>:

void delayMs(uint16_t ms){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 80004ee:	2300      	movs	r3, #0
 80004f0:	81fb      	strh	r3, [r7, #14]
 80004f2:	e006      	b.n	8000502 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f7ff ffd8 	bl	80004ac <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 80004fc:	89fb      	ldrh	r3, [r7, #14]
 80004fe:	3301      	adds	r3, #1
 8000500:	81fb      	strh	r3, [r7, #14]
 8000502:	89fa      	ldrh	r2, [r7, #14]
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	429a      	cmp	r2, r3
 8000508:	d3f4      	bcc.n	80004f4 <delayMs+0x10>
	}
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <assignBlinkParamsCommand>:
/* USER CODE BEGIN 0 */


/* ===== COMMAND HANDLERS ===== */

void assignBlinkParamsCommand(){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	time_on = pTimeOn;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <assignBlinkParamsCommand+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <assignBlinkParamsCommand+0x40>)
 8000520:	801a      	strh	r2, [r3, #0]
	time_off = pTimeOff + pTimeOn;
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <assignBlinkParamsCommand+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <assignBlinkParamsCommand+0x3c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4413      	add	r3, r2
 8000530:	b29a      	uxth	r2, r3
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <assignBlinkParamsCommand+0x48>)
 8000534:	801a      	strh	r2, [r3, #0]
	blink_count = pCount;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <assignBlinkParamsCommand+0x4c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <assignBlinkParamsCommand+0x50>)
 800053e:	801a      	strh	r2, [r3, #0]
	blink_mode = 1;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <assignBlinkParamsCommand+0x54>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]



}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	200000c0 	.word	0x200000c0
 8000554:	20000000 	.word	0x20000000
 8000558:	20000108 	.word	0x20000108
 800055c:	200000a2 	.word	0x200000a2
 8000560:	2000010c 	.word	0x2000010c
 8000564:	200000a4 	.word	0x200000a4
 8000568:	200000a1 	.word	0x200000a1

0800056c <handleBlinkCommand>:
void handleBlinkCommand(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <handleBlinkCommand+0x60>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <handleBlinkCommand+0x64>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b29b      	uxth	r3, r3
 800057a:	429a      	cmp	r2, r3
 800057c:	d805      	bhi.n	800058a <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <handleBlinkCommand+0x68>)
 8000584:	f001 fa04 	bl	8001990 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8000588:	e01e      	b.n	80005c8 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <handleBlinkCommand+0x60>)
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <handleBlinkCommand+0x6c>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	429a      	cmp	r2, r3
 8000596:	d805      	bhi.n	80005a4 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <handleBlinkCommand+0x68>)
 800059e:	f001 f9f7 	bl	8001990 <HAL_GPIO_WritePin>
}
 80005a2:	e011      	b.n	80005c8 <handleBlinkCommand+0x5c>
		led_delay = 0;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <handleBlinkCommand+0x60>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <handleBlinkCommand+0x70>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3b01      	subs	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <handleBlinkCommand+0x70>)
 80005b6:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <handleBlinkCommand+0x70>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d102      	bne.n	80005c8 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <handleBlinkCommand+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000b0 	.word	0x200000b0
 80005d0:	20000000 	.word	0x20000000
 80005d4:	48000800 	.word	0x48000800
 80005d8:	200000a2 	.word	0x200000a2
 80005dc:	200000a4 	.word	0x200000a4
 80005e0:	200000a1 	.word	0x200000a1

080005e4 <Send>:

/* ===== SEND USART ==== */

void Send(char* message, ...){
 80005e4:	b40f      	push	{r0, r1, r2, r3}
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b094      	sub	sp, #80	; 0x50
 80005ea:	af00      	add	r7, sp, #0
	char temp[64];

	volatile int idx = Tx_empty;
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <Send+0xd4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	60bb      	str	r3, [r7, #8]


	va_list arglist;
	va_start(arglist, message);
 80005f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005f8:	607b      	str	r3, [r7, #4]
	vsprintf(temp, message, arglist);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fb58 	bl	8005cb8 <vsiprintf>
	va_end(arglist);

	for(int i = 0; i < strlen(temp); i++){
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800060c:	e012      	b.n	8000634 <Send+0x50>
		Tx_buff[idx] = temp[i];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f107 010c 	add.w	r1, r7, #12
 8000614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000616:	440a      	add	r2, r1
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <Send+0xd8>)
 800061c:	54d1      	strb	r1, [r2, r3]
		idx++;
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	3301      	adds	r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
		if(idx >= TX_BUFF_SIZE){
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b1f      	cmp	r3, #31
 8000628:	dd01      	ble.n	800062e <Send+0x4a>
			idx = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < strlen(temp); i++){
 800062e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000630:	3301      	adds	r3, #1
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fddb 	bl	80001f4 <strlen>
 800063e:	4602      	mov	r2, r0
 8000640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000642:	429a      	cmp	r2, r3
 8000644:	d8e3      	bhi.n	800060e <Send+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000646:	b672      	cpsid	i
}
 8000648:	bf00      	nop
		}

	}
	__disable_irq();

	if(Tx_empty == Tx_busy){
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <Send+0xd4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <Send+0xdc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	429a      	cmp	r2, r3
 8000658:	d120      	bne.n	800069c <Send+0xb8>
		Tx_empty = idx;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <Send+0xd4>)
 8000660:	701a      	strb	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <Send+0xdc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <Send+0xd8>)
 800066c:	5c9b      	ldrb	r3, [r3, r2]
 800066e:	70fb      	strb	r3, [r7, #3]
		Tx_busy++;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Send+0xdc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <Send+0xdc>)
 800067c:	701a      	strb	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <Send+0xdc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b1f      	cmp	r3, #31
 8000686:	d902      	bls.n	800068e <Send+0xaa>
			Tx_busy = 0;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <Send+0xdc>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <Send+0xe0>)
 8000696:	f003 feb7 	bl	8004408 <HAL_UART_Transmit_IT>
 800069a:	e003      	b.n	80006a4 <Send+0xc0>

	} else {
		Tx_empty = idx;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <Send+0xd4>)
 80006a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006a4:	b662      	cpsie	i
}
 80006a6:	bf00      	nop
	}
	__enable_irq();
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b2:	b004      	add	sp, #16
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000009e 	.word	0x2000009e
 80006bc:	200000e8 	.word	0x200000e8
 80006c0:	2000009f 	.word	0x2000009f
 80006c4:	200001cc 	.word	0x200001cc

080006c8 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_UART_TxCpltCallback+0x60>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	429a      	cmp	r2, r3
 80006de:	d01c      	beq.n	800071a <HAL_UART_TxCpltCallback+0x52>

		uint8_t temp = Tx_buff[Tx_busy];
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_UART_TxCpltCallback+0x64>)
 80006ea:	5c9b      	ldrb	r3, [r3, r2]
 80006ec:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 80006fa:	701a      	strb	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b1f      	cmp	r3, #31
 8000704:	d902      	bls.n	800070c <HAL_UART_TxCpltCallback+0x44>
			Tx_busy = 0;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <HAL_UART_TxCpltCallback+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 800070c:	f107 030f 	add.w	r3, r7, #15
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <HAL_UART_TxCpltCallback+0x68>)
 8000716:	f003 fe77 	bl	8004408 <HAL_UART_Transmit_IT>
	}
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000009f 	.word	0x2000009f
 8000728:	2000009e 	.word	0x2000009e
 800072c:	200000e8 	.word	0x200000e8
 8000730:	200001cc 	.word	0x200001cc

08000734 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_UART_RxCpltCallback+0x50>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d119      	bne.n	800077a <HAL_UART_RxCpltCallback+0x46>
		Rx_empty++;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_UART_RxCpltCallback+0x54>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_UART_RxCpltCallback+0x54>)
 8000752:	701a      	strb	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_UART_RxCpltCallback+0x54>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b1f      	cmp	r3, #31
 800075c:	d902      	bls.n	8000764 <HAL_UART_RxCpltCallback+0x30>
			Rx_empty = 0;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_UART_RxCpltCallback+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_UART_RxCpltCallback+0x54>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_UART_RxCpltCallback+0x58>)
 800076e:	4413      	add	r3, r2
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <HAL_UART_RxCpltCallback+0x5c>)
 8000776:	f003 feb5 	bl	80044e4 <HAL_UART_Receive_IT>


	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40004400 	.word	0x40004400
 8000788:	2000009c 	.word	0x2000009c
 800078c:	20000110 	.word	0x20000110
 8000790:	200001cc 	.word	0x200001cc

08000794 <isRxBuffEmpty>:


/* ===== check if data stopped to be received ===== */

uint8_t isRxBuffEmpty(){
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	if(Rx_empty != Rx_busy){
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <isRxBuffEmpty+0x24>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <isRxBuffEmpty+0x28>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d001      	beq.n	80007ac <isRxBuffEmpty+0x18>
		return 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e000      	b.n	80007ae <isRxBuffEmpty+0x1a>
	}else {
		return 0;
 80007ac:	2300      	movs	r3, #0
	}
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	2000009c 	.word	0x2000009c
 80007bc:	2000009d 	.word	0x2000009d

080007c0 <parseCmd>:



/* ===== command parser ===== */
void parseCmd(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8

		if(strcmp("LED[ON]", command) == 0){
 80007c6:	4927      	ldr	r1, [pc, #156]	; (8000864 <parseCmd+0xa4>)
 80007c8:	4827      	ldr	r0, [pc, #156]	; (8000868 <parseCmd+0xa8>)
 80007ca:	f7ff fd09 	bl	80001e0 <strcmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <parseCmd+0x20>
				HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	4824      	ldr	r0, [pc, #144]	; (800086c <parseCmd+0xac>)
 80007da:	f001 f8d9 	bl	8001990 <HAL_GPIO_WritePin>
 80007de:	e03a      	b.n	8000856 <parseCmd+0x96>

			}
			else if(strcmp("LED[OFF]", command) == 0){
 80007e0:	4920      	ldr	r1, [pc, #128]	; (8000864 <parseCmd+0xa4>)
 80007e2:	4823      	ldr	r0, [pc, #140]	; (8000870 <parseCmd+0xb0>)
 80007e4:	f7ff fcfc 	bl	80001e0 <strcmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d105      	bne.n	80007fa <parseCmd+0x3a>
				HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	481e      	ldr	r0, [pc, #120]	; (800086c <parseCmd+0xac>)
 80007f4:	f001 f8cc 	bl	8001990 <HAL_GPIO_WritePin>
 80007f8:	e02d      	b.n	8000856 <parseCmd+0x96>
			} else if(sscanf(command, "LED[BLINK,%d,%d,%d]", &pTimeOn, &pTimeOff, &pCount) == 3){
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <parseCmd+0xb4>)
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <parseCmd+0xb8>)
 8000800:	4a1e      	ldr	r2, [pc, #120]	; (800087c <parseCmd+0xbc>)
 8000802:	491f      	ldr	r1, [pc, #124]	; (8000880 <parseCmd+0xc0>)
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <parseCmd+0xa4>)
 8000806:	f005 fa13 	bl	8005c30 <siscanf>
 800080a:	4603      	mov	r3, r0
 800080c:	2b03      	cmp	r3, #3
 800080e:	d102      	bne.n	8000816 <parseCmd+0x56>
				assignBlinkParamsCommand();
 8000810:	f7ff fe80 	bl	8000514 <assignBlinkParamsCommand>
 8000814:	e01f      	b.n	8000856 <parseCmd+0x96>

			} else if(sscanf(command, "LED[BLINK,%d]", &pBlinkTime) == 1){
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <parseCmd+0xc4>)
 8000818:	491b      	ldr	r1, [pc, #108]	; (8000888 <parseCmd+0xc8>)
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <parseCmd+0xa4>)
 800081c:	f005 fa08 	bl	8005c30 <siscanf>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <parseCmd+0x78>
				blink_mode = 2;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <parseCmd+0xcc>)
 8000828:	2202      	movs	r2, #2
 800082a:	701a      	strb	r2, [r3, #0]
				blink_time = pBlinkTime;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <parseCmd+0xc4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <parseCmd+0xd0>)
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e00e      	b.n	8000856 <parseCmd+0x96>

			} else if(sscanf(command, "LED[Delay,%d]", &delayTime) == 1){
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <parseCmd+0xd4>)
 800083a:	4917      	ldr	r1, [pc, #92]	; (8000898 <parseCmd+0xd8>)
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <parseCmd+0xa4>)
 800083e:	f005 f9f7 	bl	8005c30 <siscanf>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d103      	bne.n	8000850 <parseCmd+0x90>
				delayFlag = 1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <parseCmd+0xdc>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e002      	b.n	8000856 <parseCmd+0x96>
			}
				else {
				Send("Nieprawidłowa komenda \n\r");
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <parseCmd+0xe0>)
 8000852:	f7ff fec7 	bl	80005e4 <Send>





	Cmd_busy = 0;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <parseCmd+0xe4>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]



}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000c4 	.word	0x200000c4
 8000868:	08006e2c 	.word	0x08006e2c
 800086c:	48000800 	.word	0x48000800
 8000870:	08006e34 	.word	0x08006e34
 8000874:	2000010c 	.word	0x2000010c
 8000878:	20000108 	.word	0x20000108
 800087c:	200000c0 	.word	0x200000c0
 8000880:	08006e40 	.word	0x08006e40
 8000884:	20000130 	.word	0x20000130
 8000888:	08006e54 	.word	0x08006e54
 800088c:	200000a1 	.word	0x200000a1
 8000890:	200000e4 	.word	0x200000e4
 8000894:	200000ae 	.word	0x200000ae
 8000898:	08006e64 	.word	0x08006e64
 800089c:	200000ac 	.word	0x200000ac
 80008a0:	08006e74 	.word	0x08006e74
 80008a4:	200000a0 	.word	0x200000a0

080008a8 <downloadCmd>:



void downloadCmd(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

	char temp = Rx_buff[Rx_busy];
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <downloadCmd+0x90>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <downloadCmd+0x94>)
 80008b8:	5c9b      	ldrb	r3, [r3, r2]
 80008ba:	71fb      	strb	r3, [r7, #7]

	if(temp == 0x3B /* ; */){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b3b      	cmp	r3, #59	; 0x3b
 80008c0:	d109      	bne.n	80008d6 <downloadCmd+0x2e>
		command[Cmd_busy] = 0x00;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <downloadCmd+0x98>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <downloadCmd+0x9c>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	5499      	strb	r1, [r3, r2]
		parseCmd();
 80008d0:	f7ff ff76 	bl	80007c0 <parseCmd>
 80008d4:	e006      	b.n	80008e4 <downloadCmd+0x3c>

	} else {
		command[Cmd_busy] = temp;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <downloadCmd+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	4a19      	ldr	r2, [pc, #100]	; (8000944 <downloadCmd+0x9c>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	5453      	strb	r3, [r2, r1]
	}

	/* check cmd length */
	if(temp != 0x3B){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b3b      	cmp	r3, #59	; 0x3b
 80008e8:	d013      	beq.n	8000912 <downloadCmd+0x6a>
		Cmd_busy++;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <downloadCmd+0x98>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <downloadCmd+0x98>)
 80008f6:	701a      	strb	r2, [r3, #0]
		if(Cmd_busy >= CMD_SIZE){
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <downloadCmd+0x98>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b1f      	cmp	r3, #31
 8000900:	d907      	bls.n	8000912 <downloadCmd+0x6a>
			Rx_busy = Rx_empty;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <downloadCmd+0xa0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <downloadCmd+0x90>)
 800090a:	701a      	strb	r2, [r3, #0]
			Cmd_busy = 0;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <downloadCmd+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]

		}

	}

	Rx_busy++;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <downloadCmd+0x90>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <downloadCmd+0x90>)
 800091e:	701a      	strb	r2, [r3, #0]
	if(Rx_busy >= RX_BUFF_SIZE){
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <downloadCmd+0x90>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b1f      	cmp	r3, #31
 8000928:	d902      	bls.n	8000930 <downloadCmd+0x88>
		Rx_busy = 0;
 800092a:	4b03      	ldr	r3, [pc, #12]	; (8000938 <downloadCmd+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	}



}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000009d 	.word	0x2000009d
 800093c:	20000110 	.word	0x20000110
 8000940:	200000a0 	.word	0x200000a0
 8000944:	200000c4 	.word	0x200000c4
 8000948:	2000009c 	.word	0x2000009c

0800094c <buttonHandler>:





void buttonHandler() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <buttonHandler+0x7c>)
 8000956:	f000 fff5 	bl	8001944 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d113      	bne.n	8000988 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <buttonHandler+0x80>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <buttonHandler+0x80>)
 8000972:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <buttonHandler+0x84>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <buttonHandler+0x88>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8000980:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000984:	f000 fb96 	bl	80010b4 <HAL_Delay>

		  }



		  if(buttonMode == 1){
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <buttonHandler+0x80>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10c      	bne.n	80009aa <buttonHandler+0x5e>
			  if(x1hz == 1){
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <buttonHandler+0x84>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d114      	bne.n	80009c2 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <buttonHandler+0x7c>)
 800099e:	f001 f827 	bl	80019f0 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <buttonHandler+0x84>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 80009a8:	e00b      	b.n	80009c2 <buttonHandler+0x76>
			  if(x4hz == 1){
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <buttonHandler+0x88>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d107      	bne.n	80009c2 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 80009b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <buttonHandler+0x7c>)
 80009b8:	f001 f81a 	bl	80019f0 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <buttonHandler+0x88>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	48000800 	.word	0x48000800
 80009cc:	2000009a 	.word	0x2000009a
 80009d0:	20000098 	.word	0x20000098
 80009d4:	20000099 	.word	0x20000099

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fb04 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f870 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fc64 	bl	80002b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 fa5a 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009ec:	f000 f9a8 	bl	8000d40 <MX_TIM6_Init>
  MX_TIM7_Init();
 80009f0:	f000 f9de 	bl	8000db0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <main+0xc0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <main+0xc4>)
 80009fe:	4413      	add	r3, r2
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	4826      	ldr	r0, [pc, #152]	; (8000aa0 <main+0xc8>)
 8000a06:	f003 fd6d 	bl	80044e4 <HAL_UART_Receive_IT>

  Send("Hello, im STM32!\r\n");
 8000a0a:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <main+0xcc>)
 8000a0c:	f7ff fdea 	bl	80005e4 <Send>

  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <main+0xd0>)
 8000a12:	f003 f85f 	bl	8003ad4 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <main+0xd0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <main+0xd4>)
 8000a1e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 buttonHandler();
 8000a20:	f7ff ff94 	bl	800094c <buttonHandler>


	 while(isRxBuffEmpty()){
 8000a24:	e001      	b.n	8000a2a <main+0x52>
		 downloadCmd();
 8000a26:	f7ff ff3f 	bl	80008a8 <downloadCmd>
	 while(isRxBuffEmpty()){
 8000a2a:	f7ff feb3 	bl	8000794 <isRxBuffEmpty>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f8      	bne.n	8000a26 <main+0x4e>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <main+0xd8>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <main+0x6c>
		 handleBlinkCommand();
 8000a3e:	f7ff fd95 	bl	800056c <handleBlinkCommand>
 8000a42:	e018      	b.n	8000a76 <main+0x9e>
	 } else if(blink_mode == 2){
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <main+0xd8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d113      	bne.n	8000a76 <main+0x9e>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <main+0xd0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <main+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <main+0xdc>)
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d308      	bcc.n	8000a76 <main+0x9e>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <main+0xe0>)
 8000a68:	f000 ffc2 	bl	80019f0 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <main+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <main+0xd4>)
 8000a74:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <main+0xe4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d1cf      	bne.n	8000a20 <main+0x48>


		 delayMs(delayTime);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <main+0xe8>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd2c 	bl	80004e4 <delayMs>
		 HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <main+0xe0>)
 8000a92:	f000 ff7d 	bl	8001990 <HAL_GPIO_WritePin>
	 buttonHandler();
 8000a96:	e7c3      	b.n	8000a20 <main+0x48>
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	20000110 	.word	0x20000110
 8000aa0:	200001cc 	.word	0x200001cc
 8000aa4:	08006e90 	.word	0x08006e90
 8000aa8:	20000134 	.word	0x20000134
 8000aac:	200000a8 	.word	0x200000a8
 8000ab0:	200000a1 	.word	0x200000a1
 8000ab4:	200000e4 	.word	0x200000e4
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	200000ac 	.word	0x200000ac
 8000ac0:	200000ae 	.word	0x200000ae

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0a6      	sub	sp, #152	; 0x98
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f005 f8a4 	bl	8005c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2258      	movs	r2, #88	; 0x58
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 f896 	bl	8005c20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 ffb0 	bl	8001a88 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f827 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2302      	movs	r3, #2
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 f80c 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b5a:	f000 f811 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fad9 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b74:	f000 f804 	bl	8000b80 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3798      	adds	r7, #152	; 0x98
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>

08000b8a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f000 fb60 	bl	800129c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 8000c34:	f7ff fc04 	bl	8000440 <delay_1hz>
	delay_4hz();
 8000c38:	f7ff fc1e 	bl	8000478 <delay_4hz>

	if(blink_mode == 1){
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <SysTick_Handler+0x2c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d106      	bne.n	8000c52 <SysTick_Handler+0x22>
		led_delay++;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SysTick_Handler+0x30>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Handler+0x30>)
 8000c50:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c52:	f000 fa0f 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000a1 	.word	0x200000a1
 8000c60:	200000b0 	.word	0x200000b0

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f003 fc89 	bl	8004580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001cc 	.word	0x200001cc

08000c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c80:	f000 fede 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM6_DAC_IRQHandler+0x10>)
 8000c8e:	f002 ffcd 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000134 	.word	0x20000134

08000c9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM7_IRQHandler+0x10>)
 8000ca2:	f002 ffc3 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000180 	.word	0x20000180

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f004 ff74 	bl	8005bcc <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20010000 	.word	0x20010000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	200000b4 	.word	0x200000b4
 8000d18:	20000268 	.word	0x20000268

08000d1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <MX_TIM6_Init+0x6c>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d74:	f002 fdcc 	bl	8003910 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d7e:	f7ff feff 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_TIM6_Init+0x68>)
 8000d90:	f003 f93c 	bl	800400c <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d9a:	f7ff fef1 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000134 	.word	0x20000134
 8000dac:	40001000 	.word	0x40001000

08000db0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_TIM7_Init+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000dc8:	2247      	movs	r2, #71	; 0x47
 8000dca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000de2:	f002 fd95 	bl	8003910 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000dec:	f7ff fec8 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM7_Init+0x64>)
 8000dfe:	f003 f905 	bl	800400c <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f7ff feba 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000180 	.word	0x20000180
 8000e18:	40001400 	.word	0x40001400

08000e1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_TIM_Base_MspInit+0x78>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d114      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2036      	movs	r0, #54	; 0x36
 8000e4c:	f000 fa46 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e50:	2036      	movs	r0, #54	; 0x36
 8000e52:	f000 fa6f 	bl	8001334 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e56:	e018      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_TIM_Base_MspInit+0x80>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d113      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_Base_MspInit+0x7c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2037      	movs	r0, #55	; 0x37
 8000e80:	f000 fa2c 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e84:	2037      	movs	r0, #55	; 0x37
 8000e86:	f000 fa55 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40001000 	.word	0x40001000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40001400 	.word	0x40001400

08000ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_USART2_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f003 f9fe 	bl	80042e4 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f7ff fe47 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001cc 	.word	0x200001cc
 8000efc:	40004400 	.word	0x40004400

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d130      	bne.n	8000f84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f52:	230c      	movs	r3, #12
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f62:	2307      	movs	r3, #7
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f000 fa7c 	bl	800146c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2026      	movs	r0, #38	; 0x26
 8000f7a:	f000 f9af 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f000 f9d8 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40021000 	.word	0x40021000

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fbe:	f7ff fead 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 fe09 	bl	8005bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fd07 	bl	80009d8 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fd8:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 8000fdc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fe0:	20000264 	.word	0x20000264

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f94f 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fdcc 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f996 	bl	8001364 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f944 	bl	80012dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000250 	.word	0x20000250

0800109c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;  
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000250 	.word	0x20000250

080010b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000000c 	.word	0x2000000c

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff8e 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d00f      	beq.n	80012ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	d00c      	beq.n	80012ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d009      	beq.n	80012ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d006      	beq.n	80012ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d003      	beq.n	80012ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012c2:	21ac      	movs	r1, #172	; 0xac
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80012c6:	f7ff fc60 	bl	8000b8a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff16 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08006ea4 	.word	0x08006ea4

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d903      	bls.n	80012fc <HAL_NVIC_SetPriority+0x20>
 80012f4:	21c4      	movs	r1, #196	; 0xc4
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <HAL_NVIC_SetPriority+0x54>)
 80012f8:	f7ff fc47 	bl	8000b8a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d903      	bls.n	800130a <HAL_NVIC_SetPriority+0x2e>
 8001302:	21c5      	movs	r1, #197	; 0xc5
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <HAL_NVIC_SetPriority+0x54>)
 8001306:	f7ff fc40 	bl	8000b8a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130a:	f7ff ff1b 	bl	8001144 <__NVIC_GetPriorityGrouping>
 800130e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff ff6b 	bl	80011f0 <NVIC_EncodePriority>
 800131a:	4602      	mov	r2, r0
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff3a 	bl	800119c <__NVIC_SetPriority>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	08006ea4 	.word	0x08006ea4

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	da03      	bge.n	800134e <HAL_NVIC_EnableIRQ+0x1a>
 8001346:	21d8      	movs	r1, #216	; 0xd8
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_NVIC_EnableIRQ+0x2c>)
 800134a:	f7ff fc1e 	bl	8000b8a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff04 	bl	8001160 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08006ea4 	.word	0x08006ea4

08001364 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff73 	bl	8001258 <SysTick_Config>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800138a:	2b02      	cmp	r3, #2
 800138c:	d008      	beq.n	80013a0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e020      	b.n	80013e2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001400:	2b02      	cmp	r3, #2
 8001402:	d005      	beq.n	8001410 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2204      	movs	r2, #4
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e027      	b.n	8001460 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 020e 	bic.w	r2, r2, #14
 800141e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f202 	lsl.w	r2, r1, r2
 800143e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
    } 
  }
  return status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_GPIO_Init+0x104>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01b      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a39      	ldr	r2, [pc, #228]	; (8001574 <HAL_GPIO_Init+0x108>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_GPIO_Init+0x10c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a37      	ldr	r2, [pc, #220]	; (800157c <HAL_GPIO_Init+0x110>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00f      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_GPIO_Init+0x114>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00b      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a35      	ldr	r2, [pc, #212]	; (8001584 <HAL_GPIO_Init+0x118>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a34      	ldr	r2, [pc, #208]	; (8001588 <HAL_GPIO_Init+0x11c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 80014ba:	21b2      	movs	r1, #178	; 0xb2
 80014bc:	4833      	ldr	r0, [pc, #204]	; (800158c <HAL_GPIO_Init+0x120>)
 80014be:	f7ff fb64 	bl	8000b8a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_GPIO_Init+0x6c>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x74>
 80014d8:	21b3      	movs	r1, #179	; 0xb3
 80014da:	482c      	ldr	r0, [pc, #176]	; (800158c <HAL_GPIO_Init+0x120>)
 80014dc:	f7ff fb55 	bl	8000b8a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 821c 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	f000 8217 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	f000 8212 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	f000 820d 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	f000 8208 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800151a:	f000 8202 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001526:	f000 81fc 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001532:	f000 81f6 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800153e:	f000 81f0 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800154a:	f000 81ea 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001556:	f000 81e4 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	f000 81df 	beq.w	8001922 <HAL_GPIO_Init+0x4b6>
 8001564:	21b4      	movs	r1, #180	; 0xb4
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_GPIO_Init+0x120>)
 8001568:	f7ff fb0f 	bl	8000b8a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	e1d9      	b.n	8001922 <HAL_GPIO_Init+0x4b6>
 800156e:	bf00      	nop
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	48000c00 	.word	0x48000c00
 800157c:	48001000 	.word	0x48001000
 8001580:	48001400 	.word	0x48001400
 8001584:	48001800 	.word	0x48001800
 8001588:	48001c00 	.word	0x48001c00
 800158c:	08006ee0 	.word	0x08006ee0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 81ba 	beq.w	800191c <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x154>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d140      	bne.n	8001642 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_GPIO_Init+0x174>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x174>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x174>
 80015d8:	21c3      	movs	r1, #195	; 0xc3
 80015da:	4894      	ldr	r0, [pc, #592]	; (800182c <HAL_GPIO_Init+0x3c0>)
 80015dc:	f7ff fad5 	bl	8000b8a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 0201 	and.w	r2, r3, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b03      	cmp	r3, #3
 800164c:	d027      	beq.n	800169e <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_GPIO_Init+0x202>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x202>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x202>
 8001666:	21d4      	movs	r1, #212	; 0xd4
 8001668:	4870      	ldr	r0, [pc, #448]	; (800182c <HAL_GPIO_Init+0x3c0>)
 800166a:	f7ff fa8e 	bl	8000b8a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d157      	bne.n	800175a <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <HAL_GPIO_Init+0x3c4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01b      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a5d      	ldr	r2, [pc, #372]	; (8001834 <HAL_GPIO_Init+0x3c8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d017      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a5c      	ldr	r2, [pc, #368]	; (8001838 <HAL_GPIO_Init+0x3cc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a5b      	ldr	r2, [pc, #364]	; (800183c <HAL_GPIO_Init+0x3d0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00f      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <HAL_GPIO_Init+0x3d4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00b      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a59      	ldr	r2, [pc, #356]	; (8001844 <HAL_GPIO_Init+0x3d8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_GPIO_Init+0x3dc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x286>
 80016ea:	21e2      	movs	r1, #226	; 0xe2
 80016ec:	484f      	ldr	r0, [pc, #316]	; (800182c <HAL_GPIO_Init+0x3c0>)
 80016ee:	f7ff fa4c 	bl	8000b8a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d90b      	bls.n	8001712 <HAL_GPIO_Init+0x2a6>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b0e      	cmp	r3, #14
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x2a6>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2a6>
 800170a:	21e3      	movs	r1, #227	; 0xe3
 800170c:	4847      	ldr	r0, [pc, #284]	; (800182c <HAL_GPIO_Init+0x3c0>)
 800170e:	f7ff fa3c 	bl	8000b8a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0203 	and.w	r2, r3, #3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80c0 	beq.w	800191c <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_GPIO_Init+0x3e0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_GPIO_Init+0x3e0>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_GPIO_Init+0x3e0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_GPIO_Init+0x3e4>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017de:	d039      	beq.n	8001854 <HAL_GPIO_Init+0x3e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_GPIO_Init+0x3c4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01f      	beq.n	8001828 <HAL_GPIO_Init+0x3bc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_GPIO_Init+0x3c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d019      	beq.n	8001824 <HAL_GPIO_Init+0x3b8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_GPIO_Init+0x3cc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_GPIO_Init+0x3b4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_GPIO_Init+0x3d0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x3b0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_GPIO_Init+0x3d4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x3ac>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_GPIO_Init+0x3d8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x3a8>
 8001810:	2306      	movs	r3, #6
 8001812:	e020      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 8001814:	2307      	movs	r3, #7
 8001816:	e01e      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 8001818:	2305      	movs	r3, #5
 800181a:	e01c      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 800181c:	2304      	movs	r3, #4
 800181e:	e01a      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 8001820:	2303      	movs	r3, #3
 8001822:	e018      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 8001824:	2302      	movs	r3, #2
 8001826:	e016      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 8001828:	2301      	movs	r3, #1
 800182a:	e014      	b.n	8001856 <HAL_GPIO_Init+0x3ea>
 800182c:	08006ee0 	.word	0x08006ee0
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	48001000 	.word	0x48001000
 8001840:	48001400 	.word	0x48001400
 8001844:	48001800 	.word	0x48001800
 8001848:	48001c00 	.word	0x48001c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	2300      	movs	r3, #0
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001866:	4935      	ldr	r1, [pc, #212]	; (800193c <HAL_GPIO_Init+0x4d0>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_GPIO_Init+0x4d4>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f ae2f 	bne.w	8001590 <HAL_GPIO_Init+0x124>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010000 	.word	0x40010000
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_GPIO_ReadPin+0x1c>
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_GPIO_ReadPin+0x26>
 8001960:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <HAL_GPIO_ReadPin+0x48>)
 8001966:	f7ff f910 	bl	8000b8a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	e001      	b.n	8001980 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08006ee0 	.word	0x08006ee0

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <HAL_GPIO_WritePin+0x20>
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_GPIO_WritePin+0x2a>
 80019b0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <HAL_GPIO_WritePin+0x5c>)
 80019b6:	f7ff f8e8 	bl	8000b8a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80019ba:	787b      	ldrb	r3, [r7, #1]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_WritePin+0x40>
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d004      	beq.n	80019d0 <HAL_GPIO_WritePin+0x40>
 80019c6:	f240 11a5 	movw	r1, #421	; 0x1a5
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_GPIO_WritePin+0x5c>)
 80019cc:	f7ff f8dd 	bl	8000b8a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08006ee0 	.word	0x08006ee0

080019f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <HAL_GPIO_TogglePin+0x1c>
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_GPIO_TogglePin+0x26>
 8001a0c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001a10:	480a      	ldr	r0, [pc, #40]	; (8001a3c <HAL_GPIO_TogglePin+0x4c>)
 8001a12:	f7ff f8ba 	bl	8000b8a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a1c:	887a      	ldrh	r2, [r7, #2]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08006ee0 	.word	0x08006ee0

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f806 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f001 b85e 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x66>
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_OscConfig+0x66>
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x66>
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x66>
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d104      	bne.n	8001aee <HAL_RCC_OscConfig+0x66>
 8001ae4:	f240 114b 	movw	r1, #331	; 0x14b
 8001ae8:	48be      	ldr	r0, [pc, #760]	; (8001de4 <HAL_RCC_OscConfig+0x35c>)
 8001aea:	f7ff f84e 	bl	8000b8a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8178 	beq.w	8001dee <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_OscConfig+0xa2>
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d00a      	beq.n	8001b2a <HAL_RCC_OscConfig+0xa2>
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1e:	d004      	beq.n	8001b2a <HAL_RCC_OscConfig+0xa2>
 8001b20:	f240 1151 	movw	r1, #337	; 0x151
 8001b24:	48af      	ldr	r0, [pc, #700]	; (8001de4 <HAL_RCC_OscConfig+0x35c>)
 8001b26:	f7ff f830 	bl	8000b8a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b2a:	4baf      	ldr	r3, [pc, #700]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00c      	beq.n	8001b50 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b36:	4bac      	ldr	r3, [pc, #688]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d159      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x16e>
 8001b42:	4ba9      	ldr	r3, [pc, #676]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d152      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x16e>
 8001b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b54:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0xfa>
 8001b7c:	4b9a      	ldr	r3, [pc, #616]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x126>
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b9e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001baa:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001bb6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001bba:	fa92 f2a2 	rbit	r2, r2
 8001bbe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001bc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8104 	beq.w	8001dec <HAL_RCC_OscConfig+0x364>
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80fe 	bne.w	8001dec <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f000 bfb4 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x188>
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e030      	b.n	8001c72 <HAL_RCC_OscConfig+0x1ea>
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1ac>
 8001c1a:	4b73      	ldr	r3, [pc, #460]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a72      	ldr	r2, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6f      	ldr	r2, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01e      	b.n	8001c72 <HAL_RCC_OscConfig+0x1ea>
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x1d2>
 8001c40:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a68      	ldr	r2, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x1ea>
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a62      	ldr	r2, [pc, #392]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b60      	ldr	r3, [pc, #384]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5f      	ldr	r2, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d059      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fa0e 	bl	800109c <HAL_GetTick>
 8001c80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c86:	f7ff fa09 	bl	800109c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d902      	bls.n	8001c9c <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	f000 bf61 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001cb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_OscConfig+0x246>
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x272>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d02:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d12:	fab2 f282 	clz	r2, r2
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f042 0220 	orr.w	r2, r2, #32
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f002 021f 	and.w	r2, r2, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ab      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1fe>
 8001d2e:	e05e      	b.n	8001dee <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f9b4 	bl	800109c <HAL_GetTick>
 8001d34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7ff f9af 	bl	800109c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d902      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f000 bf07 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2fa>
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x326>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCC_OscConfig+0x360>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001db6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001dc2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f042 0220 	orr.w	r2, r2, #32
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f002 021f 	and.w	r2, r2, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ab      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2b2>
 8001de2:	e004      	b.n	8001dee <HAL_RCC_OscConfig+0x366>
 8001de4:	08006f1c 	.word	0x08006f1c
 8001de8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 818e 	beq.w	800211a <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_RCC_OscConfig+0x394>
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d004      	beq.n	8001e1c <HAL_RCC_OscConfig+0x394>
 8001e12:	f240 1189 	movw	r1, #393	; 0x189
 8001e16:	48a8      	ldr	r0, [pc, #672]	; (80020b8 <HAL_RCC_OscConfig+0x630>)
 8001e18:	f7fe feb7 	bl	8000b8a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b1f      	cmp	r3, #31
 8001e24:	d904      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3a8>
 8001e26:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001e2a:	48a3      	ldr	r0, [pc, #652]	; (80020b8 <HAL_RCC_OscConfig+0x630>)
 8001e2c:	f7fe fead 	bl	8000b8a <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e30:	4ba2      	ldr	r3, [pc, #648]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e3c:	4b9f      	ldr	r3, [pc, #636]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d16d      	bne.n	8001f24 <HAL_RCC_OscConfig+0x49c>
 8001e48:	4b9c      	ldr	r3, [pc, #624]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e54:	d166      	bne.n	8001f24 <HAL_RCC_OscConfig+0x49c>
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
 8001e80:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e013      	b.n	8001eae <HAL_RCC_OscConfig+0x426>
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eaa:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001eb4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001eb8:	fa92 f2a2 	rbit	r2, r2
 8001ebc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001ec0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x468>
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f000 be37 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	21f8      	movs	r1, #248	; 0xf8
 8001f00:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f08:	fa91 f1a1 	rbit	r1, r1
 8001f0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f14:	fab1 f181 	clz	r1, r1
 8001f18:	b2c9      	uxtb	r1, r1
 8001f1a:	408b      	lsls	r3, r1
 8001f1c:	4967      	ldr	r1, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e0fa      	b.n	800211a <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8085 	beq.w	800203a <HAL_RCC_OscConfig+0x5b2>
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f89e 	bl	800109c <HAL_GetTick>
 8001f60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff f899 	bl	800109c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f000 bdf1 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x524>
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001fda:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001fe6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0af      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	21f8      	movs	r1, #248	; 0xf8
 8002016:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800201e:	fa91 f1a1 	rbit	r1, r1
 8002022:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002026:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800202a:	fab1 f181 	clz	r1, r1
 800202e:	b2c9      	uxtb	r1, r1
 8002030:	408b      	lsls	r3, r1
 8002032:	4922      	ldr	r1, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e06f      	b.n	800211a <HAL_RCC_OscConfig+0x692>
 800203a:	2301      	movs	r3, #1
 800203c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800204c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2300      	movs	r3, #0
 8002064:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff f819 	bl	800109c <HAL_GetTick>
 800206a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f814 	bl	800109c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d902      	bls.n	8002086 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	f000 bd6c 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002098:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x638>
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <HAL_RCC_OscConfig+0x634>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x660>
 80020b6:	bf00      	nop
 80020b8:	08006f1c 	.word	0x08006f1c
 80020bc:	40021000 	.word	0x40021000
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020e4:	4bc0      	ldr	r3, [pc, #768]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80020ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80020fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1aa      	bne.n	8002070 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e7 	beq.w	80022f8 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <HAL_RCC_OscConfig+0x6c0>
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d004      	beq.n	8002148 <HAL_RCC_OscConfig+0x6c0>
 800213e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8002142:	48aa      	ldr	r0, [pc, #680]	; (80023ec <HAL_RCC_OscConfig+0x964>)
 8002144:	f7fe fd21 	bl	8000b8a <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d066      	beq.n	8002220 <HAL_RCC_OscConfig+0x798>
 8002152:	2301      	movs	r3, #1
 8002154:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002164:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b9f      	ldr	r3, [pc, #636]	; (80023f0 <HAL_RCC_OscConfig+0x968>)
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2301      	movs	r3, #1
 800217a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe ff8e 	bl	800109c <HAL_GetTick>
 8002180:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe ff89 	bl	800109c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d902      	bls.n	800219c <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	f000 bce1 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80021e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021e8:	2102      	movs	r1, #2
 80021ea:	6019      	str	r1, [r3, #0]
 80021ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f1a3 	rbit	r1, r3
 80021f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021fa:	6019      	str	r1, [r3, #0]
  return result;
 80021fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0b3      	beq.n	8002186 <HAL_RCC_OscConfig+0x6fe>
 800221e:	e06b      	b.n	80022f8 <HAL_RCC_OscConfig+0x870>
 8002220:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800223c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x968>)
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	461a      	mov	r2, r3
 800224e:	2300      	movs	r3, #0
 8002250:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe ff23 	bl	800109c <HAL_GetTick>
 8002256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe ff1e 	bl	800109c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d902      	bls.n	8002272 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	f000 bc76 	b.w	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002272:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80022bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022c2:	2102      	movs	r1, #2
 80022c4:	6019      	str	r1, [r3, #0]
 80022c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f1a3 	rbit	r1, r3
 80022d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022d4:	6019      	str	r1, [r3, #0]
  return result;
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1b1      	bne.n	800225c <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8171 	beq.w	80025ea <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00e      	beq.n	8002336 <HAL_RCC_OscConfig+0x8ae>
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d009      	beq.n	8002336 <HAL_RCC_OscConfig+0x8ae>
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d004      	beq.n	8002336 <HAL_RCC_OscConfig+0x8ae>
 800232c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8002330:	482e      	ldr	r0, [pc, #184]	; (80023ec <HAL_RCC_OscConfig+0x964>)
 8002332:	f7fe fc2a 	bl	8000b8a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d112      	bne.n	8002368 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x96c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11a      	bne.n	80023aa <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_RCC_OscConfig+0x96c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x96c>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fe fe8c 	bl	800109c <HAL_GetTick>
 8002384:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e009      	b.n	800239e <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe fe87 	bl	800109c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e3df      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x96c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ef      	beq.n	800238a <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x93a>
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e038      	b.n	8002434 <HAL_RCC_OscConfig+0x9ac>
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_OscConfig+0x970>
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a02      	ldr	r2, [pc, #8]	; (80023e8 <HAL_RCC_OscConfig+0x960>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e026      	b.n	8002434 <HAL_RCC_OscConfig+0x9ac>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08006f1c 	.word	0x08006f1c
 80023f0:	10908120 	.word	0x10908120
 80023f4:	40007000 	.word	0x40007000
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x994>
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a5a      	ldr	r2, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x9ac>
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b54      	ldr	r3, [pc, #336]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a53      	ldr	r2, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d064      	beq.n	8002508 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fe2d 	bl	800109c <HAL_GetTick>
 8002442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fe28 	bl	800109c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e37e      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002460:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002494:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0xa28>
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	e00d      	b.n	80024cc <HAL_RCC_OscConfig+0xa44>
 80024b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024b4:	2202      	movs	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024d0:	2102      	movs	r1, #2
 80024d2:	6011      	str	r1, [r2, #0]
 80024d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fa92 f1a2 	rbit	r1, r2
 80024de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e2:	6011      	str	r1, [r2, #0]
  return result;
 80024e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0a0      	beq.n	8002448 <HAL_RCC_OscConfig+0x9c0>
 8002506:	e066      	b.n	80025d6 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7fe fdc8 	bl	800109c <HAL_GetTick>
 800250c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe fdc3 	bl	800109c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e319      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
 800252a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800255e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0xaf8>
 8002574:	4b01      	ldr	r3, [pc, #4]	; (800257c <HAL_RCC_OscConfig+0xaf4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	e010      	b.n	800259c <HAL_RCC_OscConfig+0xb14>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002584:	2202      	movs	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	4bad      	ldr	r3, [pc, #692]	; (8002850 <HAL_RCC_OscConfig+0xdc8>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025a0:	2102      	movs	r1, #2
 80025a2:	6011      	str	r1, [r2, #0]
 80025a4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	fa92 f1a2 	rbit	r1, r2
 80025ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025b2:	6011      	str	r1, [r2, #0]
  return result;
 80025b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19d      	bne.n	8002512 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b9c      	ldr	r3, [pc, #624]	; (8002850 <HAL_RCC_OscConfig+0xdc8>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a9b      	ldr	r2, [pc, #620]	; (8002850 <HAL_RCC_OscConfig+0xdc8>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_RCC_OscConfig+0xb8a>
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_OscConfig+0xb8a>
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d004      	beq.n	8002612 <HAL_RCC_OscConfig+0xb8a>
 8002608:	f240 213a 	movw	r1, #570	; 0x23a
 800260c:	4891      	ldr	r0, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0xdcc>)
 800260e:	f7fe fabc 	bl	8000b8a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 829f 	beq.w	8002b5c <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261e:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <HAL_RCC_OscConfig+0xdc8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	f000 826c 	beq.w	8002b04 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b02      	cmp	r3, #2
 8002634:	f040 81e4 	bne.w	8002a00 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002642:	d00a      	beq.n	800265a <HAL_RCC_OscConfig+0xbd2>
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264e:	d004      	beq.n	800265a <HAL_RCC_OscConfig+0xbd2>
 8002650:	f240 2143 	movw	r1, #579	; 0x243
 8002654:	487f      	ldr	r0, [pc, #508]	; (8002854 <HAL_RCC_OscConfig+0xdcc>)
 8002656:	f7fe fa98 	bl	8000b8a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d058      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800266e:	d052      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800267a:	d04c      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002686:	d046      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002692:	d040      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800269e:	d03a      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026aa:	d034      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026b6:	d02e      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c2:	d028      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026ce:	d022      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026da:	d01c      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026e6:	d016      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80026fe:	d00a      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800270a:	d004      	beq.n	8002716 <HAL_RCC_OscConfig+0xc8e>
 800270c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002710:	4850      	ldr	r0, [pc, #320]	; (8002854 <HAL_RCC_OscConfig+0xdcc>)
 8002712:	f7fe fa3a 	bl	8000b8a <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b00      	cmp	r3, #0
 800271e:	d04f      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2b01      	cmp	r3, #1
 8002728:	d04a      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b02      	cmp	r3, #2
 8002732:	d045      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b03      	cmp	r3, #3
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b04      	cmp	r3, #4
 8002746:	d03b      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b05      	cmp	r3, #5
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2b06      	cmp	r3, #6
 800275a:	d031      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b07      	cmp	r3, #7
 8002764:	d02c      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b08      	cmp	r3, #8
 800276e:	d027      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b09      	cmp	r3, #9
 8002778:	d022      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b0a      	cmp	r3, #10
 8002782:	d01d      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b0b      	cmp	r3, #11
 800278c:	d018      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	2b0d      	cmp	r3, #13
 80027a0:	d00e      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	2b0e      	cmp	r3, #14
 80027aa:	d009      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d004      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd38>
 80027b6:	f240 2146 	movw	r1, #582	; 0x246
 80027ba:	4826      	ldr	r0, [pc, #152]	; (8002854 <HAL_RCC_OscConfig+0xdcc>)
 80027bc:	f7fe f9e5 	bl	8000b8a <assert_failed>
 80027c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027d8:	601a      	str	r2, [r3, #0]
  return result;
 80027da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027de:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	2300      	movs	r3, #0
 80027f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fc51 	bl	800109c <HAL_GetTick>
 80027fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fc4c 	bl	800109c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a4      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002814:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800282c:	601a      	str	r2, [r3, #0]
  return result;
 800282e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002832:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0xdd0>
 8002848:	4b01      	ldr	r3, [pc, #4]	; (8002850 <HAL_RCC_OscConfig+0xdc8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e020      	b.n	8002890 <HAL_RCC_OscConfig+0xe08>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	08006f1c 	.word	0x08006f1c
 8002858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800285c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4bb6      	ldr	r3, [pc, #728]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002898:	6011      	str	r1, [r2, #0]
 800289a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028a8:	6011      	str	r1, [r2, #0]
  return result;
 80028aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d199      	bne.n	8002800 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028cc:	4ba6      	ldr	r3, [pc, #664]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f023 020f 	bic.w	r2, r3, #15
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	49a3      	ldr	r1, [pc, #652]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028e0:	4ba1      	ldr	r3, [pc, #644]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a19      	ldr	r1, [r3, #32]
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	499c      	ldr	r1, [pc, #624]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002914:	601a      	str	r2, [r3, #0]
  return result;
 8002916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800291a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002926:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2301      	movs	r3, #1
 8002930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fbb3 	bl	800109c <HAL_GetTick>
 8002936:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293a:	e009      	b.n	8002950 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fbae 	bl	800109c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e106      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002950:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002968:	601a      	str	r2, [r3, #0]
  return result;
 800296a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800296e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0xf02>
 8002984:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e01b      	b.n	80029c2 <HAL_RCC_OscConfig+0xf3a>
 800298a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800298e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ca:	6011      	str	r1, [r2, #0]
 80029cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	fa92 f1a2 	rbit	r1, r2
 80029d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029da:	6011      	str	r1, [r2, #0]
  return result;
 80029dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d09e      	beq.n	800293c <HAL_RCC_OscConfig+0xeb4>
 80029fe:	e0ad      	b.n	8002b5c <HAL_RCC_OscConfig+0x10d4>
 8002a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a18:	601a      	str	r2, [r3, #0]
  return result;
 8002a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fb31 	bl	800109c <HAL_GetTick>
 8002a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e009      	b.n	8002a54 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fb2c 	bl	800109c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e084      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
 8002a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6c:	601a      	str	r2, [r3, #0]
  return result;
 8002a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x1006>
 8002a88:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e01b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x103e>
 8002a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f107 0318 	add.w	r3, r7, #24
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f107 0214 	add.w	r2, r7, #20
 8002aca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ace:	6011      	str	r1, [r2, #0]
 8002ad0:	f107 0214 	add.w	r2, r7, #20
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	fa92 f1a2 	rbit	r1, r2
 8002ada:	f107 0210 	add.w	r2, r7, #16
 8002ade:	6011      	str	r1, [r2, #0]
  return result;
 8002ae0:	f107 0210 	add.w	r2, r7, #16
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	fab2 f282 	clz	r2, r2
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f042 0220 	orr.w	r2, r2, #32
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f002 021f 	and.w	r2, r2, #31
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d19e      	bne.n	8002a40 <HAL_RCC_OscConfig+0xfb8>
 8002b02:	e02b      	b.n	8002b5c <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e025      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCC_OscConfig+0x10e0>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b26:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d111      	bne.n	8002b58 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b38:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d108      	bne.n	8002b58 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b09e      	sub	sp, #120	; 0x78
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e203      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x52>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d110      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x52>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x52>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x52>
 8002bb4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002bb8:	48a5      	ldr	r0, [pc, #660]	; (8002e50 <HAL_RCC_ClockConfig+0x2e4>)
 8002bba:	f7fd ffe6 	bl	8000b8a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCC_ClockConfig+0x6e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_ClockConfig+0x6e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d004      	beq.n	8002bda <HAL_RCC_ClockConfig+0x6e>
 8002bd0:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8002bd4:	489e      	ldr	r0, [pc, #632]	; (8002e50 <HAL_RCC_ClockConfig+0x2e4>)
 8002bd6:	f7fd ffd8 	bl	8000b8a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bda:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <HAL_RCC_ClockConfig+0x2e8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d910      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_RCC_ClockConfig+0x2e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4998      	ldr	r1, [pc, #608]	; (8002e54 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf8:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1c0      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d031      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d024      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d020      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b90      	cmp	r3, #144	; 0x90
 8002c2c:	d01c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2ba0      	cmp	r3, #160	; 0xa0
 8002c34:	d018      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2bb0      	cmp	r3, #176	; 0xb0
 8002c3c:	d014      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2bc0      	cmp	r3, #192	; 0xc0
 8002c44:	d010      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2bd0      	cmp	r3, #208	; 0xd0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2be0      	cmp	r3, #224	; 0xe0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2bf0      	cmp	r3, #240	; 0xf0
 8002c5c:	d004      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c5e:	f240 21db 	movw	r1, #731	; 0x2db
 8002c62:	487b      	ldr	r0, [pc, #492]	; (8002e50 <HAL_RCC_ClockConfig+0x2e4>)
 8002c64:	f7fd ff91 	bl	8000b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4978      	ldr	r1, [pc, #480]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80f3 	beq.w	8002e6e <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00c      	beq.n	8002caa <HAL_RCC_ClockConfig+0x13e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x13e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d004      	beq.n	8002caa <HAL_RCC_ClockConfig+0x13e>
 8002ca0:	f240 21e2 	movw	r1, #738	; 0x2e2
 8002ca4:	486a      	ldr	r0, [pc, #424]	; (8002e50 <HAL_RCC_ClockConfig+0x2e4>)
 8002ca6:	f7fd ff70 	bl	8000b8a <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d13c      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x1c0>
 8002cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x170>
 8002cd6:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_ClockConfig+0x190>
 8002cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8002cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cee:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf8:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d17b      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e12f      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d13c      	bne.n	8002dae <HAL_RCC_ClockConfig+0x242>
 8002d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x1f2>
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e00f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x212>
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
 8002d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d82:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8e:	fab2 f282 	clz	r2, r2
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f042 0220 	orr.w	r2, r2, #32
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f002 021f 	and.w	r2, r2, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d13a      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0ee      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
 8002dae:	2302      	movs	r3, #2
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x26a>
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	e00d      	b.n	8002df2 <HAL_RCC_ClockConfig+0x286>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2202      	movs	r2, #2
 8002df4:	61ba      	str	r2, [r7, #24]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	fa92 f2a2 	rbit	r2, r2
 8002dfc:	617a      	str	r2, [r7, #20]
  return result;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f002 021f 	and.w	r2, r2, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b5      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 0203 	bic.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x2ec>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe f933 	bl	800109c <HAL_GetTick>
 8002e36:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e38:	e010      	b.n	8002e5c <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3a:	f7fe f92f 	bl	800109c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d907      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e09d      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
 8002e50:	08006f1c 	.word	0x08006f1c
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 020c 	and.w	r2, r3, #12
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d1e5      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_ClockConfig+0x42c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d210      	bcs.n	8002e9e <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_ClockConfig+0x42c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	4944      	ldr	r1, [pc, #272]	; (8002f98 <HAL_RCC_ClockConfig+0x42c>)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8c:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <HAL_RCC_ClockConfig+0x42c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e076      	b.n	8002f8c <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d025      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x378>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x378>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x378>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x378>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ed8:	d004      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x378>
 8002eda:	f240 311e 	movw	r1, #798	; 0x31e
 8002ede:	482f      	ldr	r0, [pc, #188]	; (8002f9c <HAL_RCC_ClockConfig+0x430>)
 8002ee0:	f7fd fe53 	bl	8000b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4928      	ldr	r1, [pc, #160]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d026      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3d0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3d0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f1c:	d00e      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3d0>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f26:	d009      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3d0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f30:	d004      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3d0>
 8002f32:	f240 3125 	movw	r1, #805	; 0x325
 8002f36:	4819      	ldr	r0, [pc, #100]	; (8002f9c <HAL_RCC_ClockConfig+0x430>)
 8002f38:	f7fd fe27 	bl	8000b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f50:	f000 f82c 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f54:	4601      	mov	r1, r0
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_ClockConfig+0x428>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	22f0      	movs	r2, #240	; 0xf0
 8002f60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	fa92 f2a2 	rbit	r2, r2
 8002f68:	60fa      	str	r2, [r7, #12]
  return result;
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	40d3      	lsrs	r3, r2
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x434>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x438>)
 8002f7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x43c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe f845 	bl	8001014 <HAL_InitTick>
  
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3778      	adds	r7, #120	; 0x78
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	08006f1c 	.word	0x08006f1c
 8002fa0:	0800706c 	.word	0x0800706c
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b08b      	sub	sp, #44	; 0x2c
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x30>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fda:	e03f      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fde:	623b      	str	r3, [r7, #32]
      break;
 8002fe0:	e03f      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fe8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	fa92 f2a2 	rbit	r2, r2
 8002ff4:	607a      	str	r2, [r7, #4]
  return result;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	40d3      	lsrs	r3, r2
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	220f      	movs	r2, #15
 8003010:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	60fa      	str	r2, [r7, #12]
  return result;
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	40d3      	lsrs	r3, r2
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	e007      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fbb2 f2f3 	udiv	r2, r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	623b      	str	r3, [r7, #32]
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetSysClockFreq+0xc8>)
 800305e:	623b      	str	r3, [r7, #32]
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6a3b      	ldr	r3, [r7, #32]
}
 8003064:	4618      	mov	r0, r3
 8003066:	372c      	adds	r7, #44	; 0x2c
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40021000 	.word	0x40021000
 8003074:	007a1200 	.word	0x007a1200
 8003078:	08007084 	.word	0x08007084
 800307c:	08007094 	.word	0x08007094

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800309e:	f7ff ffef 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800707c 	.word	0x0800707c

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030e2:	f7ff ffcd 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	603a      	str	r2, [r7, #0]
  return result;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_RCC_GetPCLK2Freq+0x40>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	0800707c 	.word	0x0800707c

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b092      	sub	sp, #72	; 0x48
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a62      	ldr	r2, [pc, #392]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d303      	bcc.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003140:	2172      	movs	r1, #114	; 0x72
 8003142:	4861      	ldr	r0, [pc, #388]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003144:	f7fd fd21 	bl	8000b8a <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80f1 	beq.w	8003338 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d00d      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317a:	d003      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800317c:	2178      	movs	r1, #120	; 0x78
 800317e:	4852      	ldr	r0, [pc, #328]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003180:	f7fd fd03 	bl	8000b8a <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003184:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10e      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4a4d      	ldr	r2, [pc, #308]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319a:	61d3      	str	r3, [r2, #28]
 800319c:	4b4b      	ldr	r3, [pc, #300]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b45      	ldr	r3, [pc, #276]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a44      	ldr	r2, [pc, #272]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fd ff69 	bl	800109c <HAL_GetTick>
 80031ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fd ff65 	bl	800109c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e38f      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ec:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 808a 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003208:	429a      	cmp	r2, r3
 800320a:	f000 8082 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	2301      	movs	r3, #1
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d050      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fd ff14 	bl	800109c <HAL_GetTick>
 8003274:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fd ff10 	bl	800109c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e338      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 800328e:	2302      	movs	r3, #2
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	2302      	movs	r3, #2
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	61fb      	str	r3, [r7, #28]
  return result;
 80032a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	e012      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80032c2:	bf00      	nop
 80032c4:	03f73400 	.word	0x03f73400
 80032c8:	08006f54 	.word	0x08006f54
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	10908100 	.word	0x10908100
 80032d8:	2302      	movs	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	4b97      	ldr	r3, [pc, #604]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2202      	movs	r2, #2
 80032ea:	613a      	str	r2, [r7, #16]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	60fa      	str	r2, [r7, #12]
  return result;
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0b2      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003312:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4989      	ldr	r1, [pc, #548]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003320:	4313      	orrs	r3, r2
 8003322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003324:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	4a84      	ldr	r2, [pc, #528]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01c      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00f      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d00b      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d007      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d003      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003364:	21be      	movs	r1, #190	; 0xbe
 8003366:	4878      	ldr	r0, [pc, #480]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003368:	f7fd fc0f 	bl	8000b8a <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336c:	4b75      	ldr	r3, [pc, #468]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f023 0203 	bic.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4972      	ldr	r1, [pc, #456]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01f      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d012      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d00d      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033ae:	d003      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033b0:	21c9      	movs	r1, #201	; 0xc9
 80033b2:	4865      	ldr	r0, [pc, #404]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80033b4:	f7fd fbe9 	bl	8000b8a <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b8:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	495f      	ldr	r1, [pc, #380]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01f      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033fa:	d003      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80033fc:	21d5      	movs	r1, #213	; 0xd5
 80033fe:	4852      	ldr	r0, [pc, #328]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003400:	f7fd fbc3 	bl	8000b8a <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003404:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	494c      	ldr	r1, [pc, #304]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d003      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003432:	21e0      	movs	r1, #224	; 0xe0
 8003434:	4844      	ldr	r0, [pc, #272]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003436:	f7fd fba8 	bl	8000b8a <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343a:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	493f      	ldr	r1, [pc, #252]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800346a:	21ee      	movs	r1, #238	; 0xee
 800346c:	4836      	ldr	r0, [pc, #216]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800346e:	f7fd fb8c 	bl	8000b8a <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	4931      	ldr	r1, [pc, #196]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	2b20      	cmp	r3, #32
 800349e:	d004      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80034a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034a4:	4828      	ldr	r0, [pc, #160]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80034a6:	f7fd fb70 	bl	8000b8a <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f023 0220 	bic.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4923      	ldr	r1, [pc, #140]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d004      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80034d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80034dc:	481a      	ldr	r0, [pc, #104]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80034de:	f7fd fb54 	bl	8000b8a <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	4915      	ldr	r1, [pc, #84]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d025      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003510:	d00e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351a:	d009      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003526:	f240 1123 	movw	r1, #291	; 0x123
 800352a:	4807      	ldr	r0, [pc, #28]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800352c:	f7fd fb2d 	bl	8000b8a <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4901      	ldr	r1, [pc, #4]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800353e:	4313      	orrs	r3, r2
 8003540:	630b      	str	r3, [r1, #48]	; 0x30
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003544:	40021000 	.word	0x40021000
 8003548:	08006f54 	.word	0x08006f54
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003568:	d00e      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003572:	d009      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800357c:	d004      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800357e:	f240 112d 	movw	r1, #301	; 0x12d
 8003582:	48a1      	ldr	r0, [pc, #644]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003584:	f7fd fb01 	bl	8000b8a <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003588:	4ba0      	ldr	r3, [pc, #640]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	499d      	ldr	r1, [pc, #628]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b6:	d004      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80035b8:	f240 113d 	movw	r1, #317	; 0x13d
 80035bc:	4892      	ldr	r0, [pc, #584]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80035be:	f7fd fae4 	bl	8000b8a <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035c2:	4b92      	ldr	r3, [pc, #584]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	498f      	ldr	r1, [pc, #572]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d04d      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d040      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d03b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80035fa:	d036      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8003604:	d031      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800360e:	d02c      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003618:	d027      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8003622:	d022      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800362c:	d01d      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8003636:	d018      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003640:	d013      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800364a:	d00e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8003654:	d009      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800365e:	d004      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003660:	f240 115d 	movw	r1, #349	; 0x15d
 8003664:	4868      	ldr	r0, [pc, #416]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003666:	f7fd fa90 	bl	8000b8a <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800366a:	4b68      	ldr	r3, [pc, #416]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	4965      	ldr	r1, [pc, #404]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d04d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d040      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d03b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80036a2:	d036      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80036ac:	d031      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80036b6:	d02c      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80036c0:	d027      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 80036d4:	d01d      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 80036de:	d018      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036e8:	d013      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 80036f2:	d00e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 80036fc:	d009      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8003706:	d004      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003708:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800370c:	483e      	ldr	r0, [pc, #248]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800370e:	f7fd fa3c 	bl	8000b8a <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003712:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	493b      	ldr	r1, [pc, #236]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	d004      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003742:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003746:	4830      	ldr	r0, [pc, #192]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003748:	f7fd fa1f 	bl	8000b8a <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800374c:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	492c      	ldr	r1, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377a:	d004      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800377c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003780:	4821      	ldr	r0, [pc, #132]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003782:	f7fd fa02 	bl	8000b8a <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	491e      	ldr	r1, [pc, #120]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d004      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80037b6:	f240 11f7 	movw	r1, #503	; 0x1f7
 80037ba:	4813      	ldr	r0, [pc, #76]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80037bc:	f7fd f9e5 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	490f      	ldr	r1, [pc, #60]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ee:	d004      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80037f0:	f240 2101 	movw	r1, #513	; 0x201
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80037f6:	f7fd f9c8 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003808:	08006f54 	.word	0x08006f54
 800380c:	40021000 	.word	0x40021000
 8003810:	493d      	ldr	r1, [pc, #244]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d004      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003834:	f240 210b 	movw	r1, #523	; 0x20b
 8003838:	4834      	ldr	r0, [pc, #208]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800383a:	f7fd f9a6 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800383e:	4b32      	ldr	r3, [pc, #200]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	492f      	ldr	r1, [pc, #188]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d004      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800386e:	f240 2115 	movw	r1, #533	; 0x215
 8003872:	4826      	ldr	r0, [pc, #152]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8003874:	f7fd f989 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	4920      	ldr	r1, [pc, #128]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	d004      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 80038a8:	f240 211f 	movw	r1, #543	; 0x21f
 80038ac:	4817      	ldr	r0, [pc, #92]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80038ae:	f7fd f96c 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4912      	ldr	r1, [pc, #72]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e0:	d004      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80038e2:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80038e6:	4809      	ldr	r0, [pc, #36]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80038e8:	f7fd f94f 	bl	8000b8a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3748      	adds	r7, #72	; 0x48
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	08006f54 	.word	0x08006f54

08003910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0be      	b.n	8003aa0 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a60      	ldr	r2, [pc, #384]	; (8003aa8 <HAL_TIM_Base_Init+0x198>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003934:	d031      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5c      	ldr	r2, [pc, #368]	; (8003aac <HAL_TIM_Base_Init+0x19c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <HAL_TIM_Base_Init+0x1a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <HAL_TIM_Base_Init+0x1a4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <HAL_TIM_Base_Init+0x1a8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a56      	ldr	r2, [pc, #344]	; (8003abc <HAL_TIM_Base_Init+0x1ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a54      	ldr	r2, [pc, #336]	; (8003ac0 <HAL_TIM_Base_Init+0x1b0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	; (8003ac4 <HAL_TIM_Base_Init+0x1b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <HAL_TIM_Base_Init+0x1b8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a50      	ldr	r2, [pc, #320]	; (8003acc <HAL_TIM_Base_Init+0x1bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIM_Base_Init+0x8a>
 8003990:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003994:	484e      	ldr	r0, [pc, #312]	; (8003ad0 <HAL_TIM_Base_Init+0x1c0>)
 8003996:	f7fd f8f8 	bl	8000b8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d014      	beq.n	80039cc <HAL_TIM_Base_Init+0xbc>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d010      	beq.n	80039cc <HAL_TIM_Base_Init+0xbc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_Base_Init+0xbc>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d008      	beq.n	80039cc <HAL_TIM_Base_Init+0xbc>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b60      	cmp	r3, #96	; 0x60
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_Base_Init+0xbc>
 80039c2:	f240 111b 	movw	r1, #283	; 0x11b
 80039c6:	4842      	ldr	r0, [pc, #264]	; (8003ad0 <HAL_TIM_Base_Init+0x1c0>)
 80039c8:	f7fd f8df 	bl	8000b8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIM_Base_Init+0xe2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039dc:	d009      	beq.n	80039f2 <HAL_TIM_Base_Init+0xe2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d004      	beq.n	80039f2 <HAL_TIM_Base_Init+0xe2>
 80039e8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80039ec:	4838      	ldr	r0, [pc, #224]	; (8003ad0 <HAL_TIM_Base_Init+0x1c0>)
 80039ee:	f7fd f8cc 	bl	8000b8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_TIM_Base_Init+0xfc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d004      	beq.n	8003a0c <HAL_TIM_Base_Init+0xfc>
 8003a02:	f240 111d 	movw	r1, #285	; 0x11d
 8003a06:	4832      	ldr	r0, [pc, #200]	; (8003ad0 <HAL_TIM_Base_Init+0x1c0>)
 8003a08:	f7fd f8bf 	bl	8000b8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd f9fb 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 fa49 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40001000 	.word	0x40001000
 8003ab8:	40001400 	.word	0x40001400
 8003abc:	40013400 	.word	0x40013400
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800
 8003acc:	40015000 	.word	0x40015000
 8003ad0:	08006fb0 	.word	0x08006fb0

08003ad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a46      	ldr	r2, [pc, #280]	; (8003bfc <HAL_TIM_Base_Start+0x128>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d031      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_TIM_Base_Start+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <HAL_TIM_Base_Start+0x130>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_TIM_Base_Start+0x134>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a3e      	ldr	r2, [pc, #248]	; (8003c0c <HAL_TIM_Base_Start+0x138>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <HAL_TIM_Base_Start+0x13c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_TIM_Base_Start+0x140>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a39      	ldr	r2, [pc, #228]	; (8003c18 <HAL_TIM_Base_Start+0x144>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <HAL_TIM_Base_Start+0x148>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <HAL_TIM_Base_Start+0x14c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_TIM_Base_Start+0x80>
 8003b4a:	f240 119b 	movw	r1, #411	; 0x19b
 8003b4e:	4835      	ldr	r0, [pc, #212]	; (8003c24 <HAL_TIM_Base_Start+0x150>)
 8003b50:	f7fd f81b 	bl	8000b8a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e047      	b.n	8003bf4 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_TIM_Base_Start+0x128>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d018      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIM_Base_Start+0x12c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_TIM_Base_Start+0x130>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_TIM_Base_Start+0x13c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_TIM_Base_Start+0x140>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_Base_Start+0xde>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_TIM_Base_Start+0x14c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d115      	bne.n	8003bde <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_TIM_Base_Start+0x154>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d015      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x11c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d011      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	e008      	b.n	8003bf0 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e000      	b.n	8003bf2 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40001000 	.word	0x40001000
 8003c0c:	40001400 	.word	0x40001400
 8003c10:	40013400 	.word	0x40013400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800
 8003c20:	40015000 	.word	0x40015000
 8003c24:	08006fb0 	.word	0x08006fb0
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0202 	mvn.w	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f90f 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f901 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f912 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8e5 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8d7 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8e8 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0208 	mvn.w	r2, #8
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8bb 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8ad 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f8be 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f891 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f883 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f894 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f85d 	bl	8003e6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa70 	bl	80042bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d10e      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa63 	bl	80042d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d10e      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f842 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d10e      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0220 	mvn.w	r2, #32
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa23 	bl	80042a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a42      	ldr	r2, [pc, #264]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3e      	ldr	r2, [pc, #248]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3d      	ldr	r2, [pc, #244]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a31      	ldr	r2, [pc, #196]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d01b      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00f      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <TIM_Base_SetConfig+0x134>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <TIM_Base_SetConfig+0x138>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <TIM_Base_SetConfig+0x100>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <TIM_Base_SetConfig+0x100>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_Base_SetConfig+0x100>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <TIM_Base_SetConfig+0x134>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_Base_SetConfig+0x100>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <TIM_Base_SetConfig+0x138>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0x100>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40013400 	.word	0x40013400
 8003ffc:	40015000 	.word	0x40015000
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800

0800400c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a9a      	ldr	r2, [pc, #616]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d027      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a96      	ldr	r2, [pc, #600]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a94      	ldr	r2, [pc, #592]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a93      	ldr	r2, [pc, #588]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a91      	ldr	r2, [pc, #580]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a90      	ldr	r2, [pc, #576]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a8e      	ldr	r2, [pc, #568]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a8d      	ldr	r2, [pc, #564]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004070:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8004074:	488b      	ldr	r0, [pc, #556]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8004076:	f7fc fd88 	bl	8000b8a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d01c      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b20      	cmp	r3, #32
 8004090:	d018      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b30      	cmp	r3, #48	; 0x30
 8004098:	d014      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d010      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b50      	cmp	r3, #80	; 0x50
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b60      	cmp	r3, #96	; 0x60
 80040b0:	d008      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b70      	cmp	r3, #112	; 0x70
 80040b8:	d004      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040ba:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80040be:	4879      	ldr	r0, [pc, #484]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80040c0:	f7fc fd63 	bl	8000b8a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d008      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80040d4:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80040d8:	4872      	ldr	r0, [pc, #456]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80040da:	f7fc fd56 	bl	8000b8a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e0c6      	b.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5c      	ldr	r2, [pc, #368]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5f      	ldr	r2, [pc, #380]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d161      	bne.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d054      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d04f      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004144:	d04a      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800414e:	d045      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004158:	d040      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004162:	d03b      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800416c:	d036      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004176:	d031      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004180:	d02c      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800418a:	d027      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8004194:	d022      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800419e:	d01d      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80041a8:	d018      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041b2:	d013      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80041bc:	d00e      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80041c6:	d009      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80041d0:	d004      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80041d2:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80041d6:	4833      	ldr	r0, [pc, #204]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80041d8:	f7fc fcd7 	bl	8000b8a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d018      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10c      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40001000 	.word	0x40001000
 8004294:	40001400 	.word	0x40001400
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40015000 	.word	0x40015000
 80042a4:	08006fe8 	.word	0x08006fe8

080042a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e077      	b.n	80043e6 <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d014      	beq.n	8004328 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <HAL_UART_Init+0x10c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02d      	beq.n	8004364 <HAL_UART_Init+0x80>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a39      	ldr	r2, [pc, #228]	; (80043f4 <HAL_UART_Init+0x110>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d028      	beq.n	8004364 <HAL_UART_Init+0x80>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <HAL_UART_Init+0x114>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d023      	beq.n	8004364 <HAL_UART_Init+0x80>
 800431c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004320:	4836      	ldr	r0, [pc, #216]	; (80043fc <HAL_UART_Init+0x118>)
 8004322:	f7fc fc32 	bl	8000b8a <assert_failed>
 8004326:	e01d      	b.n	8004364 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_UART_Init+0x10c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <HAL_UART_Init+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <HAL_UART_Init+0x110>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <HAL_UART_Init+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_UART_Init+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <HAL_UART_Init+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2d      	ldr	r2, [pc, #180]	; (8004400 <HAL_UART_Init+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_UART_Init+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <HAL_UART_Init+0x120>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_UART_Init+0x80>
 800435a:	f240 1131 	movw	r1, #305	; 0x131
 800435e:	4827      	ldr	r0, [pc, #156]	; (80043fc <HAL_UART_Init+0x118>)
 8004360:	f7fc fc13 	bl	8000b8a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fdc3 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2224      	movs	r2, #36	; 0x24
 800437e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fbe9 	bl	8004b68 <UART_SetConfig>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e022      	b.n	80043e6 <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fe41 	bl	8005030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 ff74 	bl	80052cc <UART_CheckIdleState>
 80043e4:	4603      	mov	r3, r0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40013800 	.word	0x40013800
 80043f4:	40004400 	.word	0x40004400
 80043f8:	40004800 	.word	0x40004800
 80043fc:	08007024 	.word	0x08007024
 8004400:	40004c00 	.word	0x40004c00
 8004404:	40005000 	.word	0x40005000

08004408 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004408:	b480      	push	{r7}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441a:	2b20      	cmp	r3, #32
 800441c:	d156      	bne.n	80044cc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit_IT+0x22>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e04f      	b.n	80044ce <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit_IT+0x34>
 8004438:	2302      	movs	r3, #2
 800443a:	e048      	b.n	80044ce <HAL_UART_Transmit_IT+0xc6>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2221      	movs	r2, #33	; 0x21
 800446c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d107      	bne.n	8004488 <HAL_UART_Transmit_IT+0x80>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_UART_Transmit_IT+0xd4>)
 8004484:	669a      	str	r2, [r3, #104]	; 0x68
 8004486:	e002      	b.n	800448e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_UART_Transmit_IT+0xd8>)
 800448c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	69f9      	ldr	r1, [r7, #28]
 80044ba:	6a3a      	ldr	r2, [r7, #32]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e6      	bne.n	8004496 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	372c      	adds	r7, #44	; 0x2c
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	080057eb 	.word	0x080057eb
 80044e0:	08005733 	.word	0x08005733

080044e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d13d      	bne.n	8004576 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Receive_IT+0x22>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e036      	b.n	8004578 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Receive_IT+0x34>
 8004514:	2302      	movs	r3, #2
 8004516:	e02f      	b.n	8004578 <HAL_UART_Receive_IT+0x94>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d018      	beq.n	8004566 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e6      	bne.n	8004534 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	461a      	mov	r2, r3
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 ffbb 	bl	80054e8 <UART_Start_Receive_IT>
 8004572:	4603      	mov	r3, r0
 8004574:	e000      	b.n	8004578 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3728      	adds	r7, #40	; 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0ba      	sub	sp, #232	; 0xe8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80045ae:	4013      	ands	r3, r2
 80045b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d115      	bne.n	80045e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 82a3 	beq.w	8004b24 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
      }
      return;
 80045e6:	e29d      	b.n	8004b24 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8117 	beq.w	8004820 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004602:	4b85      	ldr	r3, [pc, #532]	; (8004818 <HAL_UART_IRQHandler+0x298>)
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 810a 	beq.w	8004820 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d011      	beq.n	800463c <HAL_UART_IRQHandler+0xbc>
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HAL_UART_IRQHandler+0xec>
 8004648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2202      	movs	r2, #2
 800465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d011      	beq.n	800469c <HAL_UART_IRQHandler+0x11c>
 8004678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2204      	movs	r2, #4
 800468a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d017      	beq.n	80046d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2208      	movs	r2, #8
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	f043 0208 	orr.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <HAL_UART_IRQHandler+0x18a>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00c      	beq.n	800470a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8209 	beq.w	8004b28 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800475a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04f      	beq.n	8004802 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 ff6c 	bl	8005640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d141      	bne.n	80047fa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800478c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1d9      	bne.n	8004776 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d013      	beq.n	80047f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_UART_IRQHandler+0x29c>)
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc fe09 	bl	80013ee <HAL_DMA_Abort_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d017      	beq.n	8004812 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00f      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9a2 	bl	8004b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00b      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f99e 	bl	8004b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e007      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f99a 	bl	8004b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004810:	e18a      	b.n	8004b28 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	bf00      	nop
    return;
 8004814:	e188      	b.n	8004b28 <HAL_UART_IRQHandler+0x5a8>
 8004816:	bf00      	nop
 8004818:	04000120 	.word	0x04000120
 800481c:	08005707 	.word	0x08005707

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 8143 	bne.w	8004ab0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 813c 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8135 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	f040 80b1 	bne.w	80049c0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800486a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 815c 	beq.w	8004b2c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800487a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800487e:	429a      	cmp	r2, r3
 8004880:	f080 8154 	bcs.w	8004b2c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800488a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b20      	cmp	r3, #32
 8004896:	f000 8085 	beq.w	80049a4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1da      	bne.n	800489a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004908:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800490c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004910:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800491a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e1      	bne.n	80048e4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004944:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004946:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800494a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e3      	bne.n	8004920 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	f023 0310 	bic.w	r3, r3, #16
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004986:	65bb      	str	r3, [r7, #88]	; 0x58
 8004988:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800498c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e4      	bne.n	8004964 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fcec 	bl	800137c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8c9 	bl	8004b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049be:	e0b5      	b.n	8004b2c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a7 	beq.w	8004b30 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80049e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80a2 	beq.w	8004b30 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e4      	bne.n	80049ec <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	623b      	str	r3, [r7, #32]
   return(result);
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a46:	633a      	str	r2, [r7, #48]	; 0x30
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0310 	bic.w	r3, r3, #16
 8004a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e4      	bne.n	8004a6c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f851 	bl	8004b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aae:	e03f      	b.n	8004b30 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00e      	beq.n	8004ada <HAL_UART_IRQHandler+0x55a>
 8004abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 f86f 	bl	8005bb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ad8:	e02d      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00e      	beq.n	8004b04 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01c      	beq.n	8004b34 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
    }
    return;
 8004b02:	e017      	b.n	8004b34 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
 8004b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fec4 	bl	80058aa <UART_EndTransmit_IT>
    return;
 8004b22:	e008      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b24:	bf00      	nop
 8004b26:	e006      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b34:	bf00      	nop
  }

}
 8004b36:	37e8      	adds	r7, #232	; 0xe8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a9a      	ldr	r2, [pc, #616]	; (8004de4 <UART_SetConfig+0x27c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d904      	bls.n	8004b88 <UART_SetConfig+0x20>
 8004b7e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8004b82:	4899      	ldr	r0, [pc, #612]	; (8004de8 <UART_SetConfig+0x280>)
 8004b84:	f7fc f801 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b90:	d00d      	beq.n	8004bae <UART_SetConfig+0x46>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <UART_SetConfig+0x46>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d004      	beq.n	8004bae <UART_SetConfig+0x46>
 8004ba4:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8004ba8:	488f      	ldr	r0, [pc, #572]	; (8004de8 <UART_SetConfig+0x280>)
 8004baa:	f7fb ffee 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	d012      	beq.n	8004bde <UART_SetConfig+0x76>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <UART_SetConfig+0x76>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x76>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d004      	beq.n	8004bde <UART_SetConfig+0x76>
 8004bd4:	f640 3141 	movw	r1, #2881	; 0xb41
 8004bd8:	4883      	ldr	r0, [pc, #524]	; (8004de8 <UART_SetConfig+0x280>)
 8004bda:	f7fb ffd6 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <UART_SetConfig+0x92>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d004      	beq.n	8004bfa <UART_SetConfig+0x92>
 8004bf0:	f640 3142 	movw	r1, #2882	; 0xb42
 8004bf4:	487c      	ldr	r0, [pc, #496]	; (8004de8 <UART_SetConfig+0x280>)
 8004bf6:	f7fb ffc8 	bl	8000b8a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <UART_SetConfig+0xb8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0a:	d009      	beq.n	8004c20 <UART_SetConfig+0xb8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c14:	d004      	beq.n	8004c20 <UART_SetConfig+0xb8>
 8004c16:	f640 3144 	movw	r1, #2884	; 0xb44
 8004c1a:	4873      	ldr	r0, [pc, #460]	; (8004de8 <UART_SetConfig+0x280>)
 8004c1c:	f7fb ffb5 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f023 030c 	bic.w	r3, r3, #12
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <UART_SetConfig+0xcc>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <UART_SetConfig+0xd6>
 8004c34:	f640 3145 	movw	r1, #2885	; 0xb45
 8004c38:	486b      	ldr	r0, [pc, #428]	; (8004de8 <UART_SetConfig+0x280>)
 8004c3a:	f7fb ffa6 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <UART_SetConfig+0x106>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d00e      	beq.n	8004c6e <UART_SetConfig+0x106>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c58:	d009      	beq.n	8004c6e <UART_SetConfig+0x106>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d004      	beq.n	8004c6e <UART_SetConfig+0x106>
 8004c64:	f640 3146 	movw	r1, #2886	; 0xb46
 8004c68:	485f      	ldr	r0, [pc, #380]	; (8004de8 <UART_SetConfig+0x280>)
 8004c6a:	f7fb ff8e 	bl	8000b8a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <UART_SetConfig+0x122>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d004      	beq.n	8004c8a <UART_SetConfig+0x122>
 8004c80:	f640 3147 	movw	r1, #2887	; 0xb47
 8004c84:	4858      	ldr	r0, [pc, #352]	; (8004de8 <UART_SetConfig+0x280>)
 8004c86:	f7fb ff80 	bl	8000b8a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <UART_SetConfig+0x284>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <UART_SetConfig+0x288>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d11f      	bne.n	8004d3a <UART_SetConfig+0x1d2>
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <UART_SetConfig+0x28c>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d816      	bhi.n	8004d34 <UART_SetConfig+0x1cc>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x1a4>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d29 	.word	0x08004d29
 8004d14:	08004d2f 	.word	0x08004d2f
 8004d18:	08004d23 	.word	0x08004d23
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e0c4      	b.n	8004eac <UART_SetConfig+0x344>
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e0c1      	b.n	8004eac <UART_SetConfig+0x344>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e0be      	b.n	8004eac <UART_SetConfig+0x344>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e0bb      	b.n	8004eac <UART_SetConfig+0x344>
 8004d34:	2310      	movs	r3, #16
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e0b8      	b.n	8004eac <UART_SetConfig+0x344>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2e      	ldr	r2, [pc, #184]	; (8004df8 <UART_SetConfig+0x290>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d124      	bne.n	8004d8e <UART_SetConfig+0x226>
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <UART_SetConfig+0x28c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d50:	d011      	beq.n	8004d76 <UART_SetConfig+0x20e>
 8004d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d56:	d817      	bhi.n	8004d88 <UART_SetConfig+0x220>
 8004d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5c:	d011      	beq.n	8004d82 <UART_SetConfig+0x21a>
 8004d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d62:	d811      	bhi.n	8004d88 <UART_SetConfig+0x220>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x208>
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d006      	beq.n	8004d7c <UART_SetConfig+0x214>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x220>
 8004d70:	2300      	movs	r3, #0
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e09a      	b.n	8004eac <UART_SetConfig+0x344>
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e097      	b.n	8004eac <UART_SetConfig+0x344>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e094      	b.n	8004eac <UART_SetConfig+0x344>
 8004d82:	2308      	movs	r3, #8
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e091      	b.n	8004eac <UART_SetConfig+0x344>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e08e      	b.n	8004eac <UART_SetConfig+0x344>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <UART_SetConfig+0x294>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d133      	bne.n	8004e00 <UART_SetConfig+0x298>
 8004d98:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <UART_SetConfig+0x28c>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004da0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004da4:	d011      	beq.n	8004dca <UART_SetConfig+0x262>
 8004da6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004daa:	d817      	bhi.n	8004ddc <UART_SetConfig+0x274>
 8004dac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004db0:	d011      	beq.n	8004dd6 <UART_SetConfig+0x26e>
 8004db2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004db6:	d811      	bhi.n	8004ddc <UART_SetConfig+0x274>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <UART_SetConfig+0x25c>
 8004dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc0:	d006      	beq.n	8004dd0 <UART_SetConfig+0x268>
 8004dc2:	e00b      	b.n	8004ddc <UART_SetConfig+0x274>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e070      	b.n	8004eac <UART_SetConfig+0x344>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e06d      	b.n	8004eac <UART_SetConfig+0x344>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e06a      	b.n	8004eac <UART_SetConfig+0x344>
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e067      	b.n	8004eac <UART_SetConfig+0x344>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e064      	b.n	8004eac <UART_SetConfig+0x344>
 8004de2:	bf00      	nop
 8004de4:	00895440 	.word	0x00895440
 8004de8:	08007024 	.word	0x08007024
 8004dec:	efff69f3 	.word	0xefff69f3
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	40004800 	.word	0x40004800
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a86      	ldr	r2, [pc, #536]	; (8005020 <UART_SetConfig+0x4b8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d124      	bne.n	8004e54 <UART_SetConfig+0x2ec>
 8004e0a:	4b86      	ldr	r3, [pc, #536]	; (8005024 <UART_SetConfig+0x4bc>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e16:	d011      	beq.n	8004e3c <UART_SetConfig+0x2d4>
 8004e18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e1c:	d817      	bhi.n	8004e4e <UART_SetConfig+0x2e6>
 8004e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e22:	d011      	beq.n	8004e48 <UART_SetConfig+0x2e0>
 8004e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e28:	d811      	bhi.n	8004e4e <UART_SetConfig+0x2e6>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <UART_SetConfig+0x2ce>
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d006      	beq.n	8004e42 <UART_SetConfig+0x2da>
 8004e34:	e00b      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e36:	2300      	movs	r3, #0
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e037      	b.n	8004eac <UART_SetConfig+0x344>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e034      	b.n	8004eac <UART_SetConfig+0x344>
 8004e42:	2304      	movs	r3, #4
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e031      	b.n	8004eac <UART_SetConfig+0x344>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e02e      	b.n	8004eac <UART_SetConfig+0x344>
 8004e4e:	2310      	movs	r3, #16
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e02b      	b.n	8004eac <UART_SetConfig+0x344>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a73      	ldr	r2, [pc, #460]	; (8005028 <UART_SetConfig+0x4c0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d124      	bne.n	8004ea8 <UART_SetConfig+0x340>
 8004e5e:	4b71      	ldr	r3, [pc, #452]	; (8005024 <UART_SetConfig+0x4bc>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e6a:	d011      	beq.n	8004e90 <UART_SetConfig+0x328>
 8004e6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e70:	d817      	bhi.n	8004ea2 <UART_SetConfig+0x33a>
 8004e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e76:	d011      	beq.n	8004e9c <UART_SetConfig+0x334>
 8004e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e7c:	d811      	bhi.n	8004ea2 <UART_SetConfig+0x33a>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <UART_SetConfig+0x322>
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d006      	beq.n	8004e96 <UART_SetConfig+0x32e>
 8004e88:	e00b      	b.n	8004ea2 <UART_SetConfig+0x33a>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e00d      	b.n	8004eac <UART_SetConfig+0x344>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e00a      	b.n	8004eac <UART_SetConfig+0x344>
 8004e96:	2304      	movs	r3, #4
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e007      	b.n	8004eac <UART_SetConfig+0x344>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e004      	b.n	8004eac <UART_SetConfig+0x344>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e001      	b.n	8004eac <UART_SetConfig+0x344>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d15c      	bne.n	8004f70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d828      	bhi.n	8004f0e <UART_SetConfig+0x3a6>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x35c>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f0f 	.word	0x08004f0f
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f0f 	.word	0x08004f0f
 8004ee4:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fe f8d6 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8004eec:	61b8      	str	r0, [r7, #24]
        break;
 8004eee:	e013      	b.n	8004f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe f8f4 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8004ef4:	61b8      	str	r0, [r7, #24]
        break;
 8004ef6:	e00f      	b.n	8004f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b4c      	ldr	r3, [pc, #304]	; (800502c <UART_SetConfig+0x4c4>)
 8004efa:	61bb      	str	r3, [r7, #24]
        break;
 8004efc:	e00c      	b.n	8004f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fe f855 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004f02:	61b8      	str	r0, [r7, #24]
        break;
 8004f04:	e008      	b.n	8004f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e004      	b.n	8004f18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	77bb      	strb	r3, [r7, #30]
        break;
 8004f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d074      	beq.n	8005008 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b0f      	cmp	r3, #15
 8004f3a:	d916      	bls.n	8004f6a <UART_SetConfig+0x402>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d212      	bcs.n	8004f6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f023 030f 	bic.w	r3, r3, #15
 8004f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	89fb      	ldrh	r3, [r7, #14]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	89fa      	ldrh	r2, [r7, #14]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	e04e      	b.n	8005008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	77bb      	strb	r3, [r7, #30]
 8004f6e:	e04b      	b.n	8005008 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d827      	bhi.n	8004fc6 <UART_SetConfig+0x45e>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x414>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe f87a 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61b8      	str	r0, [r7, #24]
        break;
 8004fa6:	e013      	b.n	8004fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe f898 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8004fac:	61b8      	str	r0, [r7, #24]
        break;
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <UART_SetConfig+0x4c4>)
 8004fb2:	61bb      	str	r3, [r7, #24]
        break;
 8004fb4:	e00c      	b.n	8004fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fd fff9 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004fba:	61b8      	str	r0, [r7, #24]
        break;
 8004fbc:	e008      	b.n	8004fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	61bb      	str	r3, [r7, #24]
        break;
 8004fc4:	e004      	b.n	8004fd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004fce:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d018      	beq.n	8005008 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085a      	lsrs	r2, r3, #1
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	441a      	add	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d908      	bls.n	8005004 <UART_SetConfig+0x49c>
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff8:	d204      	bcs.n	8005004 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	e001      	b.n	8005008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005014:	7fbb      	ldrb	r3, [r7, #30]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40004c00 	.word	0x40004c00
 8005024:	40021000 	.word	0x40021000
 8005028:	40005000 	.word	0x40005000
 800502c:	007a1200 	.word	0x007a1200

08005030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2bff      	cmp	r3, #255	; 0xff
 800503e:	d904      	bls.n	800504a <UART_AdvFeatureConfig+0x1a>
 8005040:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8005044:	489d      	ldr	r0, [pc, #628]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 8005046:	f7fb fda0 	bl	8000b8a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <UART_AdvFeatureConfig+0x42>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005066:	d004      	beq.n	8005072 <UART_AdvFeatureConfig+0x42>
 8005068:	f640 31cd 	movw	r1, #3021	; 0xbcd
 800506c:	4893      	ldr	r0, [pc, #588]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 800506e:	f7fb fd8c 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d018      	beq.n	80050c6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <UART_AdvFeatureConfig+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d004      	beq.n	80050b0 <UART_AdvFeatureConfig+0x80>
 80050a6:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80050aa:	4884      	ldr	r0, [pc, #528]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 80050ac:	f7fb fd6d 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <UART_AdvFeatureConfig+0xbe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e2:	d004      	beq.n	80050ee <UART_AdvFeatureConfig+0xbe>
 80050e4:	f640 31db 	movw	r1, #3035	; 0xbdb
 80050e8:	4874      	ldr	r0, [pc, #464]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 80050ea:	f7fb fd4e 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <UART_AdvFeatureConfig+0xfc>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	d004      	beq.n	800512c <UART_AdvFeatureConfig+0xfc>
 8005122:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005126:	4865      	ldr	r0, [pc, #404]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 8005128:	f7fb fd2f 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <UART_AdvFeatureConfig+0x13a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d004      	beq.n	800516a <UART_AdvFeatureConfig+0x13a>
 8005160:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8005164:	4855      	ldr	r0, [pc, #340]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 8005166:	f7fb fd10 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <UART_AdvFeatureConfig+0x178>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d004      	beq.n	80051a8 <UART_AdvFeatureConfig+0x178>
 800519e:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 80051a2:	4846      	ldr	r0, [pc, #280]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 80051a4:	f7fb fcf1 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d054      	beq.n	8005274 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <UART_AdvFeatureConfig+0x290>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <UART_AdvFeatureConfig+0x1c2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3a      	ldr	r2, [pc, #232]	; (80052c4 <UART_AdvFeatureConfig+0x294>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <UART_AdvFeatureConfig+0x1c2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a39      	ldr	r2, [pc, #228]	; (80052c8 <UART_AdvFeatureConfig+0x298>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <UART_AdvFeatureConfig+0x1c2>
 80051e8:	f640 31f7 	movw	r1, #3063	; 0xbf7
 80051ec:	4833      	ldr	r0, [pc, #204]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 80051ee:	f7fb fccc 	bl	8000b8a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <UART_AdvFeatureConfig+0x1de>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d004      	beq.n	800520e <UART_AdvFeatureConfig+0x1de>
 8005204:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8005208:	482c      	ldr	r0, [pc, #176]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 800520a:	f7fb fcbe 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d122      	bne.n	8005274 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	2b00      	cmp	r3, #0
 8005234:	d013      	beq.n	800525e <UART_AdvFeatureConfig+0x22e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800523e:	d00e      	beq.n	800525e <UART_AdvFeatureConfig+0x22e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005248:	d009      	beq.n	800525e <UART_AdvFeatureConfig+0x22e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005252:	d004      	beq.n	800525e <UART_AdvFeatureConfig+0x22e>
 8005254:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005258:	4818      	ldr	r0, [pc, #96]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 800525a:	f7fb fc96 	bl	8000b8a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d018      	beq.n	80052b2 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <UART_AdvFeatureConfig+0x26c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005290:	d004      	beq.n	800529c <UART_AdvFeatureConfig+0x26c>
 8005292:	f640 4105 	movw	r1, #3077	; 0xc05
 8005296:	4809      	ldr	r0, [pc, #36]	; (80052bc <UART_AdvFeatureConfig+0x28c>)
 8005298:	f7fb fc77 	bl	8000b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	08007024 	.word	0x08007024
 80052c0:	40013800 	.word	0x40013800
 80052c4:	40004400 	.word	0x40004400
 80052c8:	40004800 	.word	0x40004800

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052dc:	f7fb fede 	bl	800109c <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d10e      	bne.n	800530e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f82d 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e023      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d10e      	bne.n	800533a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f817 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00d      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b09c      	sub	sp, #112	; 0x70
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	e0a5      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	f000 80a1 	beq.w	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fb fe8f 	bl	800109c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <UART_WaitOnFlagUntilTimeout+0x32>
 800538a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538c:	2b00      	cmp	r3, #0
 800538e:	d13e      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a4:	667b      	str	r3, [r7, #100]	; 0x64
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e067      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d04f      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d147      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800544a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
 8005456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005488:	623a      	str	r2, [r7, #32]
 800548a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	61bb      	str	r3, [r7, #24]
   return(result);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e010      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f43f af4a 	beq.w	8005370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3770      	adds	r7, #112	; 0x70
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b091      	sub	sp, #68	; 0x44
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d10e      	bne.n	800553a <UART_Start_Receive_IT+0x52>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <UART_Start_Receive_IT+0x48>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f240 12ff 	movw	r2, #511	; 0x1ff
 800552a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552e:	e02d      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005538:	e028      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <UART_Start_Receive_IT+0x76>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <UART_Start_Receive_IT+0x6c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005552:	e01b      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	227f      	movs	r2, #127	; 0x7f
 8005558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800555c:	e016      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005566:	d10d      	bne.n	8005584 <UART_Start_Receive_IT+0x9c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <UART_Start_Receive_IT+0x92>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	227f      	movs	r2, #127	; 0x7f
 8005574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005578:	e008      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	223f      	movs	r2, #63	; 0x3f
 800557e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005582:	e003      	b.n	800558c <UART_Start_Receive_IT+0xa4>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ba:	637a      	str	r2, [r7, #52]	; 0x34
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d107      	bne.n	80055e8 <UART_Start_Receive_IT+0x100>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <UART_Start_Receive_IT+0x150>)
 80055e4:	665a      	str	r2, [r3, #100]	; 0x64
 80055e6:	e002      	b.n	80055ee <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <UART_Start_Receive_IT+0x154>)
 80055ec:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	613b      	str	r3, [r7, #16]
   return(result);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800560a:	63bb      	str	r3, [r7, #56]	; 0x38
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	69f9      	ldr	r1, [r7, #28]
 800561a:	6a3a      	ldr	r2, [r7, #32]
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	61bb      	str	r3, [r7, #24]
   return(result);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e6      	bne.n	80055f6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3744      	adds	r7, #68	; 0x44
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	08005a5b 	.word	0x08005a5b
 800563c:	080058ff 	.word	0x080058ff

08005640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b095      	sub	sp, #84	; 0x54
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
 8005668:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800566c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e6      	bne.n	8005648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	61fb      	str	r3, [r7, #28]
   return(result);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d118      	bne.n	80056e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0310 	bic.w	r3, r3, #16
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e6      	bne.n	80056b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056fa:	bf00      	nop
 80056fc:	3754      	adds	r7, #84	; 0x54
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fa09 	bl	8004b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005732:	b480      	push	{r7}
 8005734:	b08f      	sub	sp, #60	; 0x3c
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573e:	2b21      	cmp	r3, #33	; 0x21
 8005740:	d14d      	bne.n	80057de <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d132      	bne.n	80057b4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	61fb      	str	r3, [r7, #28]
   return(result);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	60bb      	str	r3, [r7, #8]
   return(result);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	613b      	str	r3, [r7, #16]
   return(result);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057b2:	e014      	b.n	80057de <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	b292      	uxth	r2, r2
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057de:	bf00      	nop
 80057e0:	373c      	adds	r7, #60	; 0x3c
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b091      	sub	sp, #68	; 0x44
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f6:	2b21      	cmp	r3, #33	; 0x21
 80057f8:	d151      	bne.n	800589e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d132      	bne.n	800586c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	623b      	str	r3, [r7, #32]
   return(result);
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	633b      	str	r3, [r7, #48]	; 0x30
 8005826:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800582a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e6      	bne.n	8005806 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	60fb      	str	r3, [r7, #12]
   return(result);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	617b      	str	r3, [r7, #20]
   return(result);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800586a:	e018      	b.n	800589e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005874:	881a      	ldrh	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587e:	b292      	uxth	r2, r2
 8005880:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	1c9a      	adds	r2, r3, #2
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800589e:	bf00      	nop
 80058a0:	3744      	adds	r7, #68	; 0x44
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b088      	sub	sp, #32
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	613b      	str	r3, [r7, #16]
   return(result);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fa fee9 	bl	80006c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f6:	bf00      	nop
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b096      	sub	sp, #88	; 0x58
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800590c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005914:	2b22      	cmp	r3, #34	; 0x22
 8005916:	f040 8094 	bne.w	8005a42 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005920:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005924:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005928:	b2d9      	uxtb	r1, r3
 800592a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800592e:	b2da      	uxtb	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	400a      	ands	r2, r1
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d177      	bne.n	8005a52 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005976:	653b      	str	r3, [r7, #80]	; 0x50
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005980:	647b      	str	r3, [r7, #68]	; 0x44
 8005982:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800598e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	623b      	str	r3, [r7, #32]
   return(result);
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059b4:	633a      	str	r2, [r7, #48]	; 0x30
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12e      	bne.n	8005a3a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69b9      	ldr	r1, [r7, #24]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d103      	bne.n	8005a2a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2210      	movs	r2, #16
 8005a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff f88c 	bl	8004b50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a38:	e00b      	b.n	8005a52 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fa fe7a 	bl	8000734 <HAL_UART_RxCpltCallback>
}
 8005a40:	e007      	b.n	8005a52 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0208 	orr.w	r2, r2, #8
 8005a50:	619a      	str	r2, [r3, #24]
}
 8005a52:	bf00      	nop
 8005a54:	3758      	adds	r7, #88	; 0x58
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b096      	sub	sp, #88	; 0x58
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a70:	2b22      	cmp	r3, #34	; 0x22
 8005a72:	f040 8094 	bne.w	8005b9e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a86:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a8e:	4013      	ands	r3, r2
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d177      	bne.n	8005bae <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ade:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d12e      	bne.n	8005b96 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d103      	bne.n	8005b86 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe ffde 	bl	8004b50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b94:	e00b      	b.n	8005bae <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fa fdcc 	bl	8000734 <HAL_UART_RxCpltCallback>
}
 8005b9c:	e007      	b.n	8005bae <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0208 	orr.w	r2, r2, #8
 8005bac:	619a      	str	r2, [r3, #24]
}
 8005bae:	bf00      	nop
 8005bb0:	3758      	adds	r7, #88	; 0x58
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	; (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000010 	.word	0x20000010

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4d0d      	ldr	r5, [pc, #52]	; (8005c10 <__libc_init_array+0x38>)
 8005bdc:	4c0d      	ldr	r4, [pc, #52]	; (8005c14 <__libc_init_array+0x3c>)
 8005bde:	1b64      	subs	r4, r4, r5
 8005be0:	10a4      	asrs	r4, r4, #2
 8005be2:	2600      	movs	r6, #0
 8005be4:	42a6      	cmp	r6, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	4d0b      	ldr	r5, [pc, #44]	; (8005c18 <__libc_init_array+0x40>)
 8005bea:	4c0c      	ldr	r4, [pc, #48]	; (8005c1c <__libc_init_array+0x44>)
 8005bec:	f001 f912 	bl	8006e14 <_init>
 8005bf0:	1b64      	subs	r4, r4, r5
 8005bf2:	10a4      	asrs	r4, r4, #2
 8005bf4:	2600      	movs	r6, #0
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c00:	4798      	blx	r3
 8005c02:	3601      	adds	r6, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0a:	4798      	blx	r3
 8005c0c:	3601      	adds	r6, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	08007254 	.word	0x08007254
 8005c14:	08007254 	.word	0x08007254
 8005c18:	08007254 	.word	0x08007254
 8005c1c:	08007258 	.word	0x08007258

08005c20 <memset>:
 8005c20:	4402      	add	r2, r0
 8005c22:	4603      	mov	r3, r0
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d100      	bne.n	8005c2a <memset+0xa>
 8005c28:	4770      	bx	lr
 8005c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2e:	e7f9      	b.n	8005c24 <memset+0x4>

08005c30 <siscanf>:
 8005c30:	b40e      	push	{r1, r2, r3}
 8005c32:	b510      	push	{r4, lr}
 8005c34:	b09f      	sub	sp, #124	; 0x7c
 8005c36:	ac21      	add	r4, sp, #132	; 0x84
 8005c38:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005c3c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005c40:	9201      	str	r2, [sp, #4]
 8005c42:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005c46:	9004      	str	r0, [sp, #16]
 8005c48:	9008      	str	r0, [sp, #32]
 8005c4a:	f7fa fad3 	bl	80001f4 <strlen>
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <siscanf+0x50>)
 8005c50:	9005      	str	r0, [sp, #20]
 8005c52:	9009      	str	r0, [sp, #36]	; 0x24
 8005c54:	930d      	str	r3, [sp, #52]	; 0x34
 8005c56:	480b      	ldr	r0, [pc, #44]	; (8005c84 <siscanf+0x54>)
 8005c58:	9a01      	ldr	r2, [sp, #4]
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9403      	str	r4, [sp, #12]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9311      	str	r3, [sp, #68]	; 0x44
 8005c62:	9316      	str	r3, [sp, #88]	; 0x58
 8005c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c6c:	a904      	add	r1, sp, #16
 8005c6e:	4623      	mov	r3, r4
 8005c70:	f000 f9e2 	bl	8006038 <__ssvfiscanf_r>
 8005c74:	b01f      	add	sp, #124	; 0x7c
 8005c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c7a:	b003      	add	sp, #12
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	08005c89 	.word	0x08005c89
 8005c84:	20000010 	.word	0x20000010

08005c88 <__seofread>:
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4770      	bx	lr

08005c8c <_vsiprintf_r>:
 8005c8c:	b500      	push	{lr}
 8005c8e:	b09b      	sub	sp, #108	; 0x6c
 8005c90:	9100      	str	r1, [sp, #0]
 8005c92:	9104      	str	r1, [sp, #16]
 8005c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c98:	9105      	str	r1, [sp, #20]
 8005c9a:	9102      	str	r1, [sp, #8]
 8005c9c:	4905      	ldr	r1, [pc, #20]	; (8005cb4 <_vsiprintf_r+0x28>)
 8005c9e:	9103      	str	r1, [sp, #12]
 8005ca0:	4669      	mov	r1, sp
 8005ca2:	f000 f86f 	bl	8005d84 <_svfiprintf_r>
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	b01b      	add	sp, #108	; 0x6c
 8005cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cb2:	bf00      	nop
 8005cb4:	ffff0208 	.word	0xffff0208

08005cb8 <vsiprintf>:
 8005cb8:	4613      	mov	r3, r2
 8005cba:	460a      	mov	r2, r1
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	4802      	ldr	r0, [pc, #8]	; (8005cc8 <vsiprintf+0x10>)
 8005cc0:	6800      	ldr	r0, [r0, #0]
 8005cc2:	f7ff bfe3 	b.w	8005c8c <_vsiprintf_r>
 8005cc6:	bf00      	nop
 8005cc8:	20000010 	.word	0x20000010

08005ccc <__ssputs_r>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	688e      	ldr	r6, [r1, #8]
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4690      	mov	r8, r2
 8005cda:	461f      	mov	r7, r3
 8005cdc:	d838      	bhi.n	8005d50 <__ssputs_r+0x84>
 8005cde:	898a      	ldrh	r2, [r1, #12]
 8005ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ce4:	d032      	beq.n	8005d4c <__ssputs_r+0x80>
 8005ce6:	6825      	ldr	r5, [r4, #0]
 8005ce8:	6909      	ldr	r1, [r1, #16]
 8005cea:	eba5 0901 	sub.w	r9, r5, r1
 8005cee:	6965      	ldr	r5, [r4, #20]
 8005cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	444b      	add	r3, r9
 8005cfc:	106d      	asrs	r5, r5, #1
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	bf38      	it	cc
 8005d02:	461d      	movcc	r5, r3
 8005d04:	0553      	lsls	r3, r2, #21
 8005d06:	d531      	bpl.n	8005d6c <__ssputs_r+0xa0>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f000 ffdf 	bl	8006ccc <_malloc_r>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	b950      	cbnz	r0, 8005d28 <__ssputs_r+0x5c>
 8005d12:	230c      	movs	r3, #12
 8005d14:	f8ca 3000 	str.w	r3, [sl]
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	6921      	ldr	r1, [r4, #16]
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	f000 ff56 	bl	8006bdc <memcpy>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	6126      	str	r6, [r4, #16]
 8005d3e:	6165      	str	r5, [r4, #20]
 8005d40:	444e      	add	r6, r9
 8005d42:	eba5 0509 	sub.w	r5, r5, r9
 8005d46:	6026      	str	r6, [r4, #0]
 8005d48:	60a5      	str	r5, [r4, #8]
 8005d4a:	463e      	mov	r6, r7
 8005d4c:	42be      	cmp	r6, r7
 8005d4e:	d900      	bls.n	8005d52 <__ssputs_r+0x86>
 8005d50:	463e      	mov	r6, r7
 8005d52:	4632      	mov	r2, r6
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	4641      	mov	r1, r8
 8005d58:	f000 ff4e 	bl	8006bf8 <memmove>
 8005d5c:	68a3      	ldr	r3, [r4, #8]
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	1b9b      	subs	r3, r3, r6
 8005d62:	4432      	add	r2, r6
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e7db      	b.n	8005d24 <__ssputs_r+0x58>
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	f001 f807 	bl	8006d80 <_realloc_r>
 8005d72:	4606      	mov	r6, r0
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d1e1      	bne.n	8005d3c <__ssputs_r+0x70>
 8005d78:	6921      	ldr	r1, [r4, #16]
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	f000 ff56 	bl	8006c2c <_free_r>
 8005d80:	e7c7      	b.n	8005d12 <__ssputs_r+0x46>
	...

08005d84 <_svfiprintf_r>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	4698      	mov	r8, r3
 8005d8a:	898b      	ldrh	r3, [r1, #12]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	b09d      	sub	sp, #116	; 0x74
 8005d90:	4607      	mov	r7, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	d50e      	bpl.n	8005db6 <_svfiprintf_r+0x32>
 8005d98:	690b      	ldr	r3, [r1, #16]
 8005d9a:	b963      	cbnz	r3, 8005db6 <_svfiprintf_r+0x32>
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	f000 ff95 	bl	8006ccc <_malloc_r>
 8005da2:	6028      	str	r0, [r5, #0]
 8005da4:	6128      	str	r0, [r5, #16]
 8005da6:	b920      	cbnz	r0, 8005db2 <_svfiprintf_r+0x2e>
 8005da8:	230c      	movs	r3, #12
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e0d1      	b.n	8005f56 <_svfiprintf_r+0x1d2>
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	616b      	str	r3, [r5, #20]
 8005db6:	2300      	movs	r3, #0
 8005db8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dba:	2320      	movs	r3, #32
 8005dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc4:	2330      	movs	r3, #48	; 0x30
 8005dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f70 <_svfiprintf_r+0x1ec>
 8005dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dce:	f04f 0901 	mov.w	r9, #1
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	469a      	mov	sl, r3
 8005dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dda:	b10a      	cbz	r2, 8005de0 <_svfiprintf_r+0x5c>
 8005ddc:	2a25      	cmp	r2, #37	; 0x25
 8005dde:	d1f9      	bne.n	8005dd4 <_svfiprintf_r+0x50>
 8005de0:	ebba 0b04 	subs.w	fp, sl, r4
 8005de4:	d00b      	beq.n	8005dfe <_svfiprintf_r+0x7a>
 8005de6:	465b      	mov	r3, fp
 8005de8:	4622      	mov	r2, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	4638      	mov	r0, r7
 8005dee:	f7ff ff6d 	bl	8005ccc <__ssputs_r>
 8005df2:	3001      	adds	r0, #1
 8005df4:	f000 80aa 	beq.w	8005f4c <_svfiprintf_r+0x1c8>
 8005df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dfa:	445a      	add	r2, fp
 8005dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a2 	beq.w	8005f4c <_svfiprintf_r+0x1c8>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e12:	f10a 0a01 	add.w	sl, sl, #1
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	9307      	str	r3, [sp, #28]
 8005e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e20:	4654      	mov	r4, sl
 8005e22:	2205      	movs	r2, #5
 8005e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e28:	4851      	ldr	r0, [pc, #324]	; (8005f70 <_svfiprintf_r+0x1ec>)
 8005e2a:	f7fa f9f1 	bl	8000210 <memchr>
 8005e2e:	9a04      	ldr	r2, [sp, #16]
 8005e30:	b9d8      	cbnz	r0, 8005e6a <_svfiprintf_r+0xe6>
 8005e32:	06d0      	lsls	r0, r2, #27
 8005e34:	bf44      	itt	mi
 8005e36:	2320      	movmi	r3, #32
 8005e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e3c:	0711      	lsls	r1, r2, #28
 8005e3e:	bf44      	itt	mi
 8005e40:	232b      	movmi	r3, #43	; 0x2b
 8005e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e46:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4c:	d015      	beq.n	8005e7a <_svfiprintf_r+0xf6>
 8005e4e:	9a07      	ldr	r2, [sp, #28]
 8005e50:	4654      	mov	r4, sl
 8005e52:	2000      	movs	r0, #0
 8005e54:	f04f 0c0a 	mov.w	ip, #10
 8005e58:	4621      	mov	r1, r4
 8005e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e5e:	3b30      	subs	r3, #48	; 0x30
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d94e      	bls.n	8005f02 <_svfiprintf_r+0x17e>
 8005e64:	b1b0      	cbz	r0, 8005e94 <_svfiprintf_r+0x110>
 8005e66:	9207      	str	r2, [sp, #28]
 8005e68:	e014      	b.n	8005e94 <_svfiprintf_r+0x110>
 8005e6a:	eba0 0308 	sub.w	r3, r0, r8
 8005e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e72:	4313      	orrs	r3, r2
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	46a2      	mov	sl, r4
 8005e78:	e7d2      	b.n	8005e20 <_svfiprintf_r+0x9c>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	1d19      	adds	r1, r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	9103      	str	r1, [sp, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfbb      	ittet	lt
 8005e86:	425b      	neglt	r3, r3
 8005e88:	f042 0202 	orrlt.w	r2, r2, #2
 8005e8c:	9307      	strge	r3, [sp, #28]
 8005e8e:	9307      	strlt	r3, [sp, #28]
 8005e90:	bfb8      	it	lt
 8005e92:	9204      	strlt	r2, [sp, #16]
 8005e94:	7823      	ldrb	r3, [r4, #0]
 8005e96:	2b2e      	cmp	r3, #46	; 0x2e
 8005e98:	d10c      	bne.n	8005eb4 <_svfiprintf_r+0x130>
 8005e9a:	7863      	ldrb	r3, [r4, #1]
 8005e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9e:	d135      	bne.n	8005f0c <_svfiprintf_r+0x188>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	9203      	str	r2, [sp, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfb8      	it	lt
 8005eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eb0:	3402      	adds	r4, #2
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f80 <_svfiprintf_r+0x1fc>
 8005eb8:	7821      	ldrb	r1, [r4, #0]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f7fa f9a7 	bl	8000210 <memchr>
 8005ec2:	b140      	cbz	r0, 8005ed6 <_svfiprintf_r+0x152>
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	eba0 000a 	sub.w	r0, r0, sl
 8005eca:	fa03 f000 	lsl.w	r0, r3, r0
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	4303      	orrs	r3, r0
 8005ed2:	3401      	adds	r4, #1
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eda:	4826      	ldr	r0, [pc, #152]	; (8005f74 <_svfiprintf_r+0x1f0>)
 8005edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee0:	2206      	movs	r2, #6
 8005ee2:	f7fa f995 	bl	8000210 <memchr>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d038      	beq.n	8005f5c <_svfiprintf_r+0x1d8>
 8005eea:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <_svfiprintf_r+0x1f4>)
 8005eec:	bb1b      	cbnz	r3, 8005f36 <_svfiprintf_r+0x1b2>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	3307      	adds	r3, #7
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	9303      	str	r3, [sp, #12]
 8005efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efc:	4433      	add	r3, r6
 8005efe:	9309      	str	r3, [sp, #36]	; 0x24
 8005f00:	e767      	b.n	8005dd2 <_svfiprintf_r+0x4e>
 8005f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f06:	460c      	mov	r4, r1
 8005f08:	2001      	movs	r0, #1
 8005f0a:	e7a5      	b.n	8005e58 <_svfiprintf_r+0xd4>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	3401      	adds	r4, #1
 8005f10:	9305      	str	r3, [sp, #20]
 8005f12:	4619      	mov	r1, r3
 8005f14:	f04f 0c0a 	mov.w	ip, #10
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f1e:	3a30      	subs	r2, #48	; 0x30
 8005f20:	2a09      	cmp	r2, #9
 8005f22:	d903      	bls.n	8005f2c <_svfiprintf_r+0x1a8>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0c5      	beq.n	8005eb4 <_svfiprintf_r+0x130>
 8005f28:	9105      	str	r1, [sp, #20]
 8005f2a:	e7c3      	b.n	8005eb4 <_svfiprintf_r+0x130>
 8005f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f30:	4604      	mov	r4, r0
 8005f32:	2301      	movs	r3, #1
 8005f34:	e7f0      	b.n	8005f18 <_svfiprintf_r+0x194>
 8005f36:	ab03      	add	r3, sp, #12
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <_svfiprintf_r+0x1f8>)
 8005f3e:	a904      	add	r1, sp, #16
 8005f40:	4638      	mov	r0, r7
 8005f42:	f3af 8000 	nop.w
 8005f46:	1c42      	adds	r2, r0, #1
 8005f48:	4606      	mov	r6, r0
 8005f4a:	d1d6      	bne.n	8005efa <_svfiprintf_r+0x176>
 8005f4c:	89ab      	ldrh	r3, [r5, #12]
 8005f4e:	065b      	lsls	r3, r3, #25
 8005f50:	f53f af2c 	bmi.w	8005dac <_svfiprintf_r+0x28>
 8005f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f56:	b01d      	add	sp, #116	; 0x74
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	ab03      	add	r3, sp, #12
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	462a      	mov	r2, r5
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <_svfiprintf_r+0x1f8>)
 8005f64:	a904      	add	r1, sp, #16
 8005f66:	4638      	mov	r0, r7
 8005f68:	f000 fa4c 	bl	8006404 <_printf_i>
 8005f6c:	e7eb      	b.n	8005f46 <_svfiprintf_r+0x1c2>
 8005f6e:	bf00      	nop
 8005f70:	080070a4 	.word	0x080070a4
 8005f74:	080070ae 	.word	0x080070ae
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	08005ccd 	.word	0x08005ccd
 8005f80:	080070aa 	.word	0x080070aa

08005f84 <_sungetc_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	1c4b      	adds	r3, r1, #1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	d103      	bne.n	8005f94 <_sungetc_r+0x10>
 8005f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f90:	4628      	mov	r0, r5
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	8993      	ldrh	r3, [r2, #12]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	8193      	strh	r3, [r2, #12]
 8005f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f9e:	6852      	ldr	r2, [r2, #4]
 8005fa0:	b2cd      	uxtb	r5, r1
 8005fa2:	b18b      	cbz	r3, 8005fc8 <_sungetc_r+0x44>
 8005fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	dd08      	ble.n	8005fbc <_sungetc_r+0x38>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	1e5a      	subs	r2, r3, #1
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	e7e9      	b.n	8005f90 <_sungetc_r+0xc>
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	f000 fdd1 	bl	8006b64 <__submore>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d0f1      	beq.n	8005faa <_sungetc_r+0x26>
 8005fc6:	e7e1      	b.n	8005f8c <_sungetc_r+0x8>
 8005fc8:	6921      	ldr	r1, [r4, #16]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	b151      	cbz	r1, 8005fe4 <_sungetc_r+0x60>
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d208      	bcs.n	8005fe4 <_sungetc_r+0x60>
 8005fd2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005fd6:	42a9      	cmp	r1, r5
 8005fd8:	d104      	bne.n	8005fe4 <_sungetc_r+0x60>
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	3201      	adds	r2, #1
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	6062      	str	r2, [r4, #4]
 8005fe2:	e7d5      	b.n	8005f90 <_sungetc_r+0xc>
 8005fe4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fec:	6363      	str	r3, [r4, #52]	; 0x34
 8005fee:	2303      	movs	r3, #3
 8005ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7dc      	b.n	8005fb8 <_sungetc_r+0x34>

08005ffe <__ssrefill_r>:
 8005ffe:	b510      	push	{r4, lr}
 8006000:	460c      	mov	r4, r1
 8006002:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006004:	b169      	cbz	r1, 8006022 <__ssrefill_r+0x24>
 8006006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800600a:	4299      	cmp	r1, r3
 800600c:	d001      	beq.n	8006012 <__ssrefill_r+0x14>
 800600e:	f000 fe0d 	bl	8006c2c <_free_r>
 8006012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	2000      	movs	r0, #0
 8006018:	6360      	str	r0, [r4, #52]	; 0x34
 800601a:	b113      	cbz	r3, 8006022 <__ssrefill_r+0x24>
 800601c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	bd10      	pop	{r4, pc}
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f043 0320 	orr.w	r3, r3, #32
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	e7f3      	b.n	8006020 <__ssrefill_r+0x22>

08006038 <__ssvfiscanf_r>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006042:	2100      	movs	r1, #0
 8006044:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006048:	49b2      	ldr	r1, [pc, #712]	; (8006314 <__ssvfiscanf_r+0x2dc>)
 800604a:	91a0      	str	r1, [sp, #640]	; 0x280
 800604c:	f10d 0804 	add.w	r8, sp, #4
 8006050:	49b1      	ldr	r1, [pc, #708]	; (8006318 <__ssvfiscanf_r+0x2e0>)
 8006052:	4fb2      	ldr	r7, [pc, #712]	; (800631c <__ssvfiscanf_r+0x2e4>)
 8006054:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8006320 <__ssvfiscanf_r+0x2e8>
 8006058:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800605c:	4606      	mov	r6, r0
 800605e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	f892 a000 	ldrb.w	sl, [r2]
 8006066:	f1ba 0f00 	cmp.w	sl, #0
 800606a:	f000 8151 	beq.w	8006310 <__ssvfiscanf_r+0x2d8>
 800606e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8006072:	f013 0308 	ands.w	r3, r3, #8
 8006076:	f102 0501 	add.w	r5, r2, #1
 800607a:	d019      	beq.n	80060b0 <__ssvfiscanf_r+0x78>
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dd0f      	ble.n	80060a2 <__ssvfiscanf_r+0x6a>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	5cba      	ldrb	r2, [r7, r2]
 8006088:	0712      	lsls	r2, r2, #28
 800608a:	d401      	bmi.n	8006090 <__ssvfiscanf_r+0x58>
 800608c:	462a      	mov	r2, r5
 800608e:	e7e8      	b.n	8006062 <__ssvfiscanf_r+0x2a>
 8006090:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006092:	3201      	adds	r2, #1
 8006094:	9245      	str	r2, [sp, #276]	; 0x114
 8006096:	6862      	ldr	r2, [r4, #4]
 8006098:	3301      	adds	r3, #1
 800609a:	3a01      	subs	r2, #1
 800609c:	6062      	str	r2, [r4, #4]
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e7ec      	b.n	800607c <__ssvfiscanf_r+0x44>
 80060a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060a4:	4621      	mov	r1, r4
 80060a6:	4630      	mov	r0, r6
 80060a8:	4798      	blx	r3
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0e9      	beq.n	8006082 <__ssvfiscanf_r+0x4a>
 80060ae:	e7ed      	b.n	800608c <__ssvfiscanf_r+0x54>
 80060b0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80060b4:	f040 8083 	bne.w	80061be <__ssvfiscanf_r+0x186>
 80060b8:	9341      	str	r3, [sp, #260]	; 0x104
 80060ba:	9343      	str	r3, [sp, #268]	; 0x10c
 80060bc:	7853      	ldrb	r3, [r2, #1]
 80060be:	2b2a      	cmp	r3, #42	; 0x2a
 80060c0:	bf02      	ittt	eq
 80060c2:	2310      	moveq	r3, #16
 80060c4:	1c95      	addeq	r5, r2, #2
 80060c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80060c8:	220a      	movs	r2, #10
 80060ca:	46ab      	mov	fp, r5
 80060cc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80060d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d91d      	bls.n	8006114 <__ssvfiscanf_r+0xdc>
 80060d8:	4891      	ldr	r0, [pc, #580]	; (8006320 <__ssvfiscanf_r+0x2e8>)
 80060da:	2203      	movs	r2, #3
 80060dc:	f7fa f898 	bl	8000210 <memchr>
 80060e0:	b140      	cbz	r0, 80060f4 <__ssvfiscanf_r+0xbc>
 80060e2:	2301      	movs	r3, #1
 80060e4:	eba0 0009 	sub.w	r0, r0, r9
 80060e8:	fa03 f000 	lsl.w	r0, r3, r0
 80060ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060ee:	4318      	orrs	r0, r3
 80060f0:	9041      	str	r0, [sp, #260]	; 0x104
 80060f2:	465d      	mov	r5, fp
 80060f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060f8:	2b78      	cmp	r3, #120	; 0x78
 80060fa:	d806      	bhi.n	800610a <__ssvfiscanf_r+0xd2>
 80060fc:	2b57      	cmp	r3, #87	; 0x57
 80060fe:	d810      	bhi.n	8006122 <__ssvfiscanf_r+0xea>
 8006100:	2b25      	cmp	r3, #37	; 0x25
 8006102:	d05c      	beq.n	80061be <__ssvfiscanf_r+0x186>
 8006104:	d856      	bhi.n	80061b4 <__ssvfiscanf_r+0x17c>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d074      	beq.n	80061f4 <__ssvfiscanf_r+0x1bc>
 800610a:	2303      	movs	r3, #3
 800610c:	9347      	str	r3, [sp, #284]	; 0x11c
 800610e:	230a      	movs	r3, #10
 8006110:	9342      	str	r3, [sp, #264]	; 0x108
 8006112:	e081      	b.n	8006218 <__ssvfiscanf_r+0x1e0>
 8006114:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006116:	fb02 1303 	mla	r3, r2, r3, r1
 800611a:	3b30      	subs	r3, #48	; 0x30
 800611c:	9343      	str	r3, [sp, #268]	; 0x10c
 800611e:	465d      	mov	r5, fp
 8006120:	e7d3      	b.n	80060ca <__ssvfiscanf_r+0x92>
 8006122:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006126:	2a20      	cmp	r2, #32
 8006128:	d8ef      	bhi.n	800610a <__ssvfiscanf_r+0xd2>
 800612a:	a101      	add	r1, pc, #4	; (adr r1, 8006130 <__ssvfiscanf_r+0xf8>)
 800612c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006130:	08006203 	.word	0x08006203
 8006134:	0800610b 	.word	0x0800610b
 8006138:	0800610b 	.word	0x0800610b
 800613c:	08006261 	.word	0x08006261
 8006140:	0800610b 	.word	0x0800610b
 8006144:	0800610b 	.word	0x0800610b
 8006148:	0800610b 	.word	0x0800610b
 800614c:	0800610b 	.word	0x0800610b
 8006150:	0800610b 	.word	0x0800610b
 8006154:	0800610b 	.word	0x0800610b
 8006158:	0800610b 	.word	0x0800610b
 800615c:	08006277 	.word	0x08006277
 8006160:	0800624d 	.word	0x0800624d
 8006164:	080061bb 	.word	0x080061bb
 8006168:	080061bb 	.word	0x080061bb
 800616c:	080061bb 	.word	0x080061bb
 8006170:	0800610b 	.word	0x0800610b
 8006174:	08006251 	.word	0x08006251
 8006178:	0800610b 	.word	0x0800610b
 800617c:	0800610b 	.word	0x0800610b
 8006180:	0800610b 	.word	0x0800610b
 8006184:	0800610b 	.word	0x0800610b
 8006188:	08006287 	.word	0x08006287
 800618c:	08006259 	.word	0x08006259
 8006190:	080061fb 	.word	0x080061fb
 8006194:	0800610b 	.word	0x0800610b
 8006198:	0800610b 	.word	0x0800610b
 800619c:	08006283 	.word	0x08006283
 80061a0:	0800610b 	.word	0x0800610b
 80061a4:	0800624d 	.word	0x0800624d
 80061a8:	0800610b 	.word	0x0800610b
 80061ac:	0800610b 	.word	0x0800610b
 80061b0:	08006203 	.word	0x08006203
 80061b4:	3b45      	subs	r3, #69	; 0x45
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d8a7      	bhi.n	800610a <__ssvfiscanf_r+0xd2>
 80061ba:	2305      	movs	r3, #5
 80061bc:	e02b      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dd0d      	ble.n	80061e0 <__ssvfiscanf_r+0x1a8>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	781a      	ldrb	r2, [r3, #0]
 80061c8:	4552      	cmp	r2, sl
 80061ca:	f040 80a1 	bne.w	8006310 <__ssvfiscanf_r+0x2d8>
 80061ce:	3301      	adds	r3, #1
 80061d0:	6862      	ldr	r2, [r4, #4]
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80061d6:	3a01      	subs	r2, #1
 80061d8:	3301      	adds	r3, #1
 80061da:	6062      	str	r2, [r4, #4]
 80061dc:	9345      	str	r3, [sp, #276]	; 0x114
 80061de:	e755      	b.n	800608c <__ssvfiscanf_r+0x54>
 80061e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061e2:	4621      	mov	r1, r4
 80061e4:	4630      	mov	r0, r6
 80061e6:	4798      	blx	r3
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0eb      	beq.n	80061c4 <__ssvfiscanf_r+0x18c>
 80061ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 8084 	bne.w	80062fc <__ssvfiscanf_r+0x2c4>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	e086      	b.n	8006308 <__ssvfiscanf_r+0x2d0>
 80061fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80061fc:	f042 0220 	orr.w	r2, r2, #32
 8006200:	9241      	str	r2, [sp, #260]	; 0x104
 8006202:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	9241      	str	r2, [sp, #260]	; 0x104
 800620a:	2210      	movs	r2, #16
 800620c:	2b6f      	cmp	r3, #111	; 0x6f
 800620e:	9242      	str	r2, [sp, #264]	; 0x108
 8006210:	bf34      	ite	cc
 8006212:	2303      	movcc	r3, #3
 8006214:	2304      	movcs	r3, #4
 8006216:	9347      	str	r3, [sp, #284]	; 0x11c
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	dd41      	ble.n	80062a2 <__ssvfiscanf_r+0x26a>
 800621e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006220:	0659      	lsls	r1, r3, #25
 8006222:	d404      	bmi.n	800622e <__ssvfiscanf_r+0x1f6>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	5cba      	ldrb	r2, [r7, r2]
 800622a:	0712      	lsls	r2, r2, #28
 800622c:	d440      	bmi.n	80062b0 <__ssvfiscanf_r+0x278>
 800622e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006230:	2b02      	cmp	r3, #2
 8006232:	dc4f      	bgt.n	80062d4 <__ssvfiscanf_r+0x29c>
 8006234:	466b      	mov	r3, sp
 8006236:	4622      	mov	r2, r4
 8006238:	a941      	add	r1, sp, #260	; 0x104
 800623a:	4630      	mov	r0, r6
 800623c:	f000 fa08 	bl	8006650 <_scanf_chars>
 8006240:	2801      	cmp	r0, #1
 8006242:	d065      	beq.n	8006310 <__ssvfiscanf_r+0x2d8>
 8006244:	2802      	cmp	r0, #2
 8006246:	f47f af21 	bne.w	800608c <__ssvfiscanf_r+0x54>
 800624a:	e7cf      	b.n	80061ec <__ssvfiscanf_r+0x1b4>
 800624c:	220a      	movs	r2, #10
 800624e:	e7dd      	b.n	800620c <__ssvfiscanf_r+0x1d4>
 8006250:	2300      	movs	r3, #0
 8006252:	9342      	str	r3, [sp, #264]	; 0x108
 8006254:	2303      	movs	r3, #3
 8006256:	e7de      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 8006258:	2308      	movs	r3, #8
 800625a:	9342      	str	r3, [sp, #264]	; 0x108
 800625c:	2304      	movs	r3, #4
 800625e:	e7da      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 8006260:	4629      	mov	r1, r5
 8006262:	4640      	mov	r0, r8
 8006264:	f000 fb40 	bl	80068e8 <__sccl>
 8006268:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	9341      	str	r3, [sp, #260]	; 0x104
 8006270:	4605      	mov	r5, r0
 8006272:	2301      	movs	r3, #1
 8006274:	e7cf      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 8006276:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627c:	9341      	str	r3, [sp, #260]	; 0x104
 800627e:	2300      	movs	r3, #0
 8006280:	e7c9      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 8006282:	2302      	movs	r3, #2
 8006284:	e7c7      	b.n	8006216 <__ssvfiscanf_r+0x1de>
 8006286:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006288:	06c3      	lsls	r3, r0, #27
 800628a:	f53f aeff 	bmi.w	800608c <__ssvfiscanf_r+0x54>
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006292:	1d19      	adds	r1, r3, #4
 8006294:	9100      	str	r1, [sp, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	07c0      	lsls	r0, r0, #31
 800629a:	bf4c      	ite	mi
 800629c:	801a      	strhmi	r2, [r3, #0]
 800629e:	601a      	strpl	r2, [r3, #0]
 80062a0:	e6f4      	b.n	800608c <__ssvfiscanf_r+0x54>
 80062a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062a4:	4621      	mov	r1, r4
 80062a6:	4630      	mov	r0, r6
 80062a8:	4798      	blx	r3
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0b7      	beq.n	800621e <__ssvfiscanf_r+0x1e6>
 80062ae:	e79d      	b.n	80061ec <__ssvfiscanf_r+0x1b4>
 80062b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062b2:	3201      	adds	r2, #1
 80062b4:	9245      	str	r2, [sp, #276]	; 0x114
 80062b6:	6862      	ldr	r2, [r4, #4]
 80062b8:	3a01      	subs	r2, #1
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	6062      	str	r2, [r4, #4]
 80062be:	dd02      	ble.n	80062c6 <__ssvfiscanf_r+0x28e>
 80062c0:	3301      	adds	r3, #1
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	e7ae      	b.n	8006224 <__ssvfiscanf_r+0x1ec>
 80062c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062c8:	4621      	mov	r1, r4
 80062ca:	4630      	mov	r0, r6
 80062cc:	4798      	blx	r3
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0a8      	beq.n	8006224 <__ssvfiscanf_r+0x1ec>
 80062d2:	e78b      	b.n	80061ec <__ssvfiscanf_r+0x1b4>
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	dc06      	bgt.n	80062e6 <__ssvfiscanf_r+0x2ae>
 80062d8:	466b      	mov	r3, sp
 80062da:	4622      	mov	r2, r4
 80062dc:	a941      	add	r1, sp, #260	; 0x104
 80062de:	4630      	mov	r0, r6
 80062e0:	f000 fa0e 	bl	8006700 <_scanf_i>
 80062e4:	e7ac      	b.n	8006240 <__ssvfiscanf_r+0x208>
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <__ssvfiscanf_r+0x2ec>)
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f43f aecf 	beq.w	800608c <__ssvfiscanf_r+0x54>
 80062ee:	466b      	mov	r3, sp
 80062f0:	4622      	mov	r2, r4
 80062f2:	a941      	add	r1, sp, #260	; 0x104
 80062f4:	4630      	mov	r0, r6
 80062f6:	f3af 8000 	nop.w
 80062fa:	e7a1      	b.n	8006240 <__ssvfiscanf_r+0x208>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006302:	bf18      	it	ne
 8006304:	f04f 30ff 	movne.w	r0, #4294967295
 8006308:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006312:	e7f9      	b.n	8006308 <__ssvfiscanf_r+0x2d0>
 8006314:	08005f85 	.word	0x08005f85
 8006318:	08005fff 	.word	0x08005fff
 800631c:	080070f3 	.word	0x080070f3
 8006320:	080070aa 	.word	0x080070aa
 8006324:	00000000 	.word	0x00000000

08006328 <_printf_common>:
 8006328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800632c:	4616      	mov	r6, r2
 800632e:	4699      	mov	r9, r3
 8006330:	688a      	ldr	r2, [r1, #8]
 8006332:	690b      	ldr	r3, [r1, #16]
 8006334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006338:	4293      	cmp	r3, r2
 800633a:	bfb8      	it	lt
 800633c:	4613      	movlt	r3, r2
 800633e:	6033      	str	r3, [r6, #0]
 8006340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006344:	4607      	mov	r7, r0
 8006346:	460c      	mov	r4, r1
 8006348:	b10a      	cbz	r2, 800634e <_printf_common+0x26>
 800634a:	3301      	adds	r3, #1
 800634c:	6033      	str	r3, [r6, #0]
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	0699      	lsls	r1, r3, #26
 8006352:	bf42      	ittt	mi
 8006354:	6833      	ldrmi	r3, [r6, #0]
 8006356:	3302      	addmi	r3, #2
 8006358:	6033      	strmi	r3, [r6, #0]
 800635a:	6825      	ldr	r5, [r4, #0]
 800635c:	f015 0506 	ands.w	r5, r5, #6
 8006360:	d106      	bne.n	8006370 <_printf_common+0x48>
 8006362:	f104 0a19 	add.w	sl, r4, #25
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	6832      	ldr	r2, [r6, #0]
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	42ab      	cmp	r3, r5
 800636e:	dc26      	bgt.n	80063be <_printf_common+0x96>
 8006370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006374:	1e13      	subs	r3, r2, #0
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	bf18      	it	ne
 800637a:	2301      	movne	r3, #1
 800637c:	0692      	lsls	r2, r2, #26
 800637e:	d42b      	bmi.n	80063d8 <_printf_common+0xb0>
 8006380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006384:	4649      	mov	r1, r9
 8006386:	4638      	mov	r0, r7
 8006388:	47c0      	blx	r8
 800638a:	3001      	adds	r0, #1
 800638c:	d01e      	beq.n	80063cc <_printf_common+0xa4>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	68e5      	ldr	r5, [r4, #12]
 8006392:	6832      	ldr	r2, [r6, #0]
 8006394:	f003 0306 	and.w	r3, r3, #6
 8006398:	2b04      	cmp	r3, #4
 800639a:	bf08      	it	eq
 800639c:	1aad      	subeq	r5, r5, r2
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	6922      	ldr	r2, [r4, #16]
 80063a2:	bf0c      	ite	eq
 80063a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a8:	2500      	movne	r5, #0
 80063aa:	4293      	cmp	r3, r2
 80063ac:	bfc4      	itt	gt
 80063ae:	1a9b      	subgt	r3, r3, r2
 80063b0:	18ed      	addgt	r5, r5, r3
 80063b2:	2600      	movs	r6, #0
 80063b4:	341a      	adds	r4, #26
 80063b6:	42b5      	cmp	r5, r6
 80063b8:	d11a      	bne.n	80063f0 <_printf_common+0xc8>
 80063ba:	2000      	movs	r0, #0
 80063bc:	e008      	b.n	80063d0 <_printf_common+0xa8>
 80063be:	2301      	movs	r3, #1
 80063c0:	4652      	mov	r2, sl
 80063c2:	4649      	mov	r1, r9
 80063c4:	4638      	mov	r0, r7
 80063c6:	47c0      	blx	r8
 80063c8:	3001      	adds	r0, #1
 80063ca:	d103      	bne.n	80063d4 <_printf_common+0xac>
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d4:	3501      	adds	r5, #1
 80063d6:	e7c6      	b.n	8006366 <_printf_common+0x3e>
 80063d8:	18e1      	adds	r1, r4, r3
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	2030      	movs	r0, #48	; 0x30
 80063de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e2:	4422      	add	r2, r4
 80063e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063ec:	3302      	adds	r3, #2
 80063ee:	e7c7      	b.n	8006380 <_printf_common+0x58>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4622      	mov	r2, r4
 80063f4:	4649      	mov	r1, r9
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d0e6      	beq.n	80063cc <_printf_common+0xa4>
 80063fe:	3601      	adds	r6, #1
 8006400:	e7d9      	b.n	80063b6 <_printf_common+0x8e>
	...

08006404 <_printf_i>:
 8006404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	460c      	mov	r4, r1
 800640a:	4691      	mov	r9, r2
 800640c:	7e27      	ldrb	r7, [r4, #24]
 800640e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006410:	2f78      	cmp	r7, #120	; 0x78
 8006412:	4680      	mov	r8, r0
 8006414:	469a      	mov	sl, r3
 8006416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800641a:	d807      	bhi.n	800642c <_printf_i+0x28>
 800641c:	2f62      	cmp	r7, #98	; 0x62
 800641e:	d80a      	bhi.n	8006436 <_printf_i+0x32>
 8006420:	2f00      	cmp	r7, #0
 8006422:	f000 80d8 	beq.w	80065d6 <_printf_i+0x1d2>
 8006426:	2f58      	cmp	r7, #88	; 0x58
 8006428:	f000 80a3 	beq.w	8006572 <_printf_i+0x16e>
 800642c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006434:	e03a      	b.n	80064ac <_printf_i+0xa8>
 8006436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800643a:	2b15      	cmp	r3, #21
 800643c:	d8f6      	bhi.n	800642c <_printf_i+0x28>
 800643e:	a001      	add	r0, pc, #4	; (adr r0, 8006444 <_printf_i+0x40>)
 8006440:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006444:	0800649d 	.word	0x0800649d
 8006448:	080064b1 	.word	0x080064b1
 800644c:	0800642d 	.word	0x0800642d
 8006450:	0800642d 	.word	0x0800642d
 8006454:	0800642d 	.word	0x0800642d
 8006458:	0800642d 	.word	0x0800642d
 800645c:	080064b1 	.word	0x080064b1
 8006460:	0800642d 	.word	0x0800642d
 8006464:	0800642d 	.word	0x0800642d
 8006468:	0800642d 	.word	0x0800642d
 800646c:	0800642d 	.word	0x0800642d
 8006470:	080065bd 	.word	0x080065bd
 8006474:	080064e1 	.word	0x080064e1
 8006478:	0800659f 	.word	0x0800659f
 800647c:	0800642d 	.word	0x0800642d
 8006480:	0800642d 	.word	0x0800642d
 8006484:	080065df 	.word	0x080065df
 8006488:	0800642d 	.word	0x0800642d
 800648c:	080064e1 	.word	0x080064e1
 8006490:	0800642d 	.word	0x0800642d
 8006494:	0800642d 	.word	0x0800642d
 8006498:	080065a7 	.word	0x080065a7
 800649c:	680b      	ldr	r3, [r1, #0]
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	600a      	str	r2, [r1, #0]
 80064a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0a3      	b.n	80065f8 <_printf_i+0x1f4>
 80064b0:	6825      	ldr	r5, [r4, #0]
 80064b2:	6808      	ldr	r0, [r1, #0]
 80064b4:	062e      	lsls	r6, r5, #24
 80064b6:	f100 0304 	add.w	r3, r0, #4
 80064ba:	d50a      	bpl.n	80064d2 <_printf_i+0xce>
 80064bc:	6805      	ldr	r5, [r0, #0]
 80064be:	600b      	str	r3, [r1, #0]
 80064c0:	2d00      	cmp	r5, #0
 80064c2:	da03      	bge.n	80064cc <_printf_i+0xc8>
 80064c4:	232d      	movs	r3, #45	; 0x2d
 80064c6:	426d      	negs	r5, r5
 80064c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064cc:	485e      	ldr	r0, [pc, #376]	; (8006648 <_printf_i+0x244>)
 80064ce:	230a      	movs	r3, #10
 80064d0:	e019      	b.n	8006506 <_printf_i+0x102>
 80064d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064d6:	6805      	ldr	r5, [r0, #0]
 80064d8:	600b      	str	r3, [r1, #0]
 80064da:	bf18      	it	ne
 80064dc:	b22d      	sxthne	r5, r5
 80064de:	e7ef      	b.n	80064c0 <_printf_i+0xbc>
 80064e0:	680b      	ldr	r3, [r1, #0]
 80064e2:	6825      	ldr	r5, [r4, #0]
 80064e4:	1d18      	adds	r0, r3, #4
 80064e6:	6008      	str	r0, [r1, #0]
 80064e8:	0628      	lsls	r0, r5, #24
 80064ea:	d501      	bpl.n	80064f0 <_printf_i+0xec>
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <_printf_i+0xf2>
 80064f0:	0669      	lsls	r1, r5, #25
 80064f2:	d5fb      	bpl.n	80064ec <_printf_i+0xe8>
 80064f4:	881d      	ldrh	r5, [r3, #0]
 80064f6:	4854      	ldr	r0, [pc, #336]	; (8006648 <_printf_i+0x244>)
 80064f8:	2f6f      	cmp	r7, #111	; 0x6f
 80064fa:	bf0c      	ite	eq
 80064fc:	2308      	moveq	r3, #8
 80064fe:	230a      	movne	r3, #10
 8006500:	2100      	movs	r1, #0
 8006502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006506:	6866      	ldr	r6, [r4, #4]
 8006508:	60a6      	str	r6, [r4, #8]
 800650a:	2e00      	cmp	r6, #0
 800650c:	bfa2      	ittt	ge
 800650e:	6821      	ldrge	r1, [r4, #0]
 8006510:	f021 0104 	bicge.w	r1, r1, #4
 8006514:	6021      	strge	r1, [r4, #0]
 8006516:	b90d      	cbnz	r5, 800651c <_printf_i+0x118>
 8006518:	2e00      	cmp	r6, #0
 800651a:	d04d      	beq.n	80065b8 <_printf_i+0x1b4>
 800651c:	4616      	mov	r6, r2
 800651e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006522:	fb03 5711 	mls	r7, r3, r1, r5
 8006526:	5dc7      	ldrb	r7, [r0, r7]
 8006528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800652c:	462f      	mov	r7, r5
 800652e:	42bb      	cmp	r3, r7
 8006530:	460d      	mov	r5, r1
 8006532:	d9f4      	bls.n	800651e <_printf_i+0x11a>
 8006534:	2b08      	cmp	r3, #8
 8006536:	d10b      	bne.n	8006550 <_printf_i+0x14c>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	07df      	lsls	r7, r3, #31
 800653c:	d508      	bpl.n	8006550 <_printf_i+0x14c>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	6861      	ldr	r1, [r4, #4]
 8006542:	4299      	cmp	r1, r3
 8006544:	bfde      	ittt	le
 8006546:	2330      	movle	r3, #48	; 0x30
 8006548:	f806 3c01 	strble.w	r3, [r6, #-1]
 800654c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006550:	1b92      	subs	r2, r2, r6
 8006552:	6122      	str	r2, [r4, #16]
 8006554:	f8cd a000 	str.w	sl, [sp]
 8006558:	464b      	mov	r3, r9
 800655a:	aa03      	add	r2, sp, #12
 800655c:	4621      	mov	r1, r4
 800655e:	4640      	mov	r0, r8
 8006560:	f7ff fee2 	bl	8006328 <_printf_common>
 8006564:	3001      	adds	r0, #1
 8006566:	d14c      	bne.n	8006602 <_printf_i+0x1fe>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	b004      	add	sp, #16
 800656e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006572:	4835      	ldr	r0, [pc, #212]	; (8006648 <_printf_i+0x244>)
 8006574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	680e      	ldr	r6, [r1, #0]
 800657c:	061f      	lsls	r7, r3, #24
 800657e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006582:	600e      	str	r6, [r1, #0]
 8006584:	d514      	bpl.n	80065b0 <_printf_i+0x1ac>
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	bf44      	itt	mi
 800658a:	f043 0320 	orrmi.w	r3, r3, #32
 800658e:	6023      	strmi	r3, [r4, #0]
 8006590:	b91d      	cbnz	r5, 800659a <_printf_i+0x196>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	f023 0320 	bic.w	r3, r3, #32
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	2310      	movs	r3, #16
 800659c:	e7b0      	b.n	8006500 <_printf_i+0xfc>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f043 0320 	orr.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	2378      	movs	r3, #120	; 0x78
 80065a8:	4828      	ldr	r0, [pc, #160]	; (800664c <_printf_i+0x248>)
 80065aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ae:	e7e3      	b.n	8006578 <_printf_i+0x174>
 80065b0:	065e      	lsls	r6, r3, #25
 80065b2:	bf48      	it	mi
 80065b4:	b2ad      	uxthmi	r5, r5
 80065b6:	e7e6      	b.n	8006586 <_printf_i+0x182>
 80065b8:	4616      	mov	r6, r2
 80065ba:	e7bb      	b.n	8006534 <_printf_i+0x130>
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	6826      	ldr	r6, [r4, #0]
 80065c0:	6960      	ldr	r0, [r4, #20]
 80065c2:	1d1d      	adds	r5, r3, #4
 80065c4:	600d      	str	r5, [r1, #0]
 80065c6:	0635      	lsls	r5, r6, #24
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	d501      	bpl.n	80065d0 <_printf_i+0x1cc>
 80065cc:	6018      	str	r0, [r3, #0]
 80065ce:	e002      	b.n	80065d6 <_printf_i+0x1d2>
 80065d0:	0671      	lsls	r1, r6, #25
 80065d2:	d5fb      	bpl.n	80065cc <_printf_i+0x1c8>
 80065d4:	8018      	strh	r0, [r3, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	4616      	mov	r6, r2
 80065dc:	e7ba      	b.n	8006554 <_printf_i+0x150>
 80065de:	680b      	ldr	r3, [r1, #0]
 80065e0:	1d1a      	adds	r2, r3, #4
 80065e2:	600a      	str	r2, [r1, #0]
 80065e4:	681e      	ldr	r6, [r3, #0]
 80065e6:	6862      	ldr	r2, [r4, #4]
 80065e8:	2100      	movs	r1, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7f9 fe10 	bl	8000210 <memchr>
 80065f0:	b108      	cbz	r0, 80065f6 <_printf_i+0x1f2>
 80065f2:	1b80      	subs	r0, r0, r6
 80065f4:	6060      	str	r0, [r4, #4]
 80065f6:	6863      	ldr	r3, [r4, #4]
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	2300      	movs	r3, #0
 80065fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006600:	e7a8      	b.n	8006554 <_printf_i+0x150>
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	4632      	mov	r2, r6
 8006606:	4649      	mov	r1, r9
 8006608:	4640      	mov	r0, r8
 800660a:	47d0      	blx	sl
 800660c:	3001      	adds	r0, #1
 800660e:	d0ab      	beq.n	8006568 <_printf_i+0x164>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	079b      	lsls	r3, r3, #30
 8006614:	d413      	bmi.n	800663e <_printf_i+0x23a>
 8006616:	68e0      	ldr	r0, [r4, #12]
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	4298      	cmp	r0, r3
 800661c:	bfb8      	it	lt
 800661e:	4618      	movlt	r0, r3
 8006620:	e7a4      	b.n	800656c <_printf_i+0x168>
 8006622:	2301      	movs	r3, #1
 8006624:	4632      	mov	r2, r6
 8006626:	4649      	mov	r1, r9
 8006628:	4640      	mov	r0, r8
 800662a:	47d0      	blx	sl
 800662c:	3001      	adds	r0, #1
 800662e:	d09b      	beq.n	8006568 <_printf_i+0x164>
 8006630:	3501      	adds	r5, #1
 8006632:	68e3      	ldr	r3, [r4, #12]
 8006634:	9903      	ldr	r1, [sp, #12]
 8006636:	1a5b      	subs	r3, r3, r1
 8006638:	42ab      	cmp	r3, r5
 800663a:	dcf2      	bgt.n	8006622 <_printf_i+0x21e>
 800663c:	e7eb      	b.n	8006616 <_printf_i+0x212>
 800663e:	2500      	movs	r5, #0
 8006640:	f104 0619 	add.w	r6, r4, #25
 8006644:	e7f5      	b.n	8006632 <_printf_i+0x22e>
 8006646:	bf00      	nop
 8006648:	080070b5 	.word	0x080070b5
 800664c:	080070c6 	.word	0x080070c6

08006650 <_scanf_chars>:
 8006650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006654:	4615      	mov	r5, r2
 8006656:	688a      	ldr	r2, [r1, #8]
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	b932      	cbnz	r2, 800666c <_scanf_chars+0x1c>
 800665e:	698a      	ldr	r2, [r1, #24]
 8006660:	2a00      	cmp	r2, #0
 8006662:	bf0c      	ite	eq
 8006664:	2201      	moveq	r2, #1
 8006666:	f04f 32ff 	movne.w	r2, #4294967295
 800666a:	608a      	str	r2, [r1, #8]
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80066fc <_scanf_chars+0xac>
 8006672:	06d1      	lsls	r1, r2, #27
 8006674:	bf5f      	itttt	pl
 8006676:	681a      	ldrpl	r2, [r3, #0]
 8006678:	1d11      	addpl	r1, r2, #4
 800667a:	6019      	strpl	r1, [r3, #0]
 800667c:	6816      	ldrpl	r6, [r2, #0]
 800667e:	2700      	movs	r7, #0
 8006680:	69a0      	ldr	r0, [r4, #24]
 8006682:	b188      	cbz	r0, 80066a8 <_scanf_chars+0x58>
 8006684:	2801      	cmp	r0, #1
 8006686:	d107      	bne.n	8006698 <_scanf_chars+0x48>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	6963      	ldr	r3, [r4, #20]
 800668e:	5c9b      	ldrb	r3, [r3, r2]
 8006690:	b953      	cbnz	r3, 80066a8 <_scanf_chars+0x58>
 8006692:	bb27      	cbnz	r7, 80066de <_scanf_chars+0x8e>
 8006694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006698:	2802      	cmp	r0, #2
 800669a:	d120      	bne.n	80066de <_scanf_chars+0x8e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80066a4:	071b      	lsls	r3, r3, #28
 80066a6:	d41a      	bmi.n	80066de <_scanf_chars+0x8e>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	06da      	lsls	r2, r3, #27
 80066ac:	bf5e      	ittt	pl
 80066ae:	682b      	ldrpl	r3, [r5, #0]
 80066b0:	781b      	ldrbpl	r3, [r3, #0]
 80066b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80066b6:	682a      	ldr	r2, [r5, #0]
 80066b8:	686b      	ldr	r3, [r5, #4]
 80066ba:	3201      	adds	r2, #1
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	68a2      	ldr	r2, [r4, #8]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	3a01      	subs	r2, #1
 80066c4:	606b      	str	r3, [r5, #4]
 80066c6:	3701      	adds	r7, #1
 80066c8:	60a2      	str	r2, [r4, #8]
 80066ca:	b142      	cbz	r2, 80066de <_scanf_chars+0x8e>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dcd7      	bgt.n	8006680 <_scanf_chars+0x30>
 80066d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066d4:	4629      	mov	r1, r5
 80066d6:	4640      	mov	r0, r8
 80066d8:	4798      	blx	r3
 80066da:	2800      	cmp	r0, #0
 80066dc:	d0d0      	beq.n	8006680 <_scanf_chars+0x30>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	f013 0310 	ands.w	r3, r3, #16
 80066e4:	d105      	bne.n	80066f2 <_scanf_chars+0xa2>
 80066e6:	68e2      	ldr	r2, [r4, #12]
 80066e8:	3201      	adds	r2, #1
 80066ea:	60e2      	str	r2, [r4, #12]
 80066ec:	69a2      	ldr	r2, [r4, #24]
 80066ee:	b102      	cbz	r2, 80066f2 <_scanf_chars+0xa2>
 80066f0:	7033      	strb	r3, [r6, #0]
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	441f      	add	r7, r3
 80066f6:	6127      	str	r7, [r4, #16]
 80066f8:	2000      	movs	r0, #0
 80066fa:	e7cb      	b.n	8006694 <_scanf_chars+0x44>
 80066fc:	080070f3 	.word	0x080070f3

08006700 <_scanf_i>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4698      	mov	r8, r3
 8006706:	4b74      	ldr	r3, [pc, #464]	; (80068d8 <_scanf_i+0x1d8>)
 8006708:	460c      	mov	r4, r1
 800670a:	4682      	mov	sl, r0
 800670c:	4616      	mov	r6, r2
 800670e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006712:	b087      	sub	sp, #28
 8006714:	ab03      	add	r3, sp, #12
 8006716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800671a:	4b70      	ldr	r3, [pc, #448]	; (80068dc <_scanf_i+0x1dc>)
 800671c:	69a1      	ldr	r1, [r4, #24]
 800671e:	4a70      	ldr	r2, [pc, #448]	; (80068e0 <_scanf_i+0x1e0>)
 8006720:	2903      	cmp	r1, #3
 8006722:	bf18      	it	ne
 8006724:	461a      	movne	r2, r3
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	9201      	str	r2, [sp, #4]
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006730:	bf88      	it	hi
 8006732:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006736:	4627      	mov	r7, r4
 8006738:	bf82      	ittt	hi
 800673a:	eb03 0905 	addhi.w	r9, r3, r5
 800673e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006742:	60a3      	strhi	r3, [r4, #8]
 8006744:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006748:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800674c:	bf98      	it	ls
 800674e:	f04f 0900 	movls.w	r9, #0
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	463d      	mov	r5, r7
 8006756:	f04f 0b00 	mov.w	fp, #0
 800675a:	6831      	ldr	r1, [r6, #0]
 800675c:	ab03      	add	r3, sp, #12
 800675e:	7809      	ldrb	r1, [r1, #0]
 8006760:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006764:	2202      	movs	r2, #2
 8006766:	f7f9 fd53 	bl	8000210 <memchr>
 800676a:	b328      	cbz	r0, 80067b8 <_scanf_i+0xb8>
 800676c:	f1bb 0f01 	cmp.w	fp, #1
 8006770:	d159      	bne.n	8006826 <_scanf_i+0x126>
 8006772:	6862      	ldr	r2, [r4, #4]
 8006774:	b92a      	cbnz	r2, 8006782 <_scanf_i+0x82>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	2308      	movs	r3, #8
 800677a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	6022      	str	r2, [r4, #0]
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	68a2      	ldr	r2, [r4, #8]
 800678c:	1e51      	subs	r1, r2, #1
 800678e:	60a1      	str	r1, [r4, #8]
 8006790:	b192      	cbz	r2, 80067b8 <_scanf_i+0xb8>
 8006792:	6832      	ldr	r2, [r6, #0]
 8006794:	1c51      	adds	r1, r2, #1
 8006796:	6031      	str	r1, [r6, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	f805 2b01 	strb.w	r2, [r5], #1
 800679e:	6872      	ldr	r2, [r6, #4]
 80067a0:	3a01      	subs	r2, #1
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	6072      	str	r2, [r6, #4]
 80067a6:	dc07      	bgt.n	80067b8 <_scanf_i+0xb8>
 80067a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80067ac:	4631      	mov	r1, r6
 80067ae:	4650      	mov	r0, sl
 80067b0:	4790      	blx	r2
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f040 8085 	bne.w	80068c2 <_scanf_i+0x1c2>
 80067b8:	f10b 0b01 	add.w	fp, fp, #1
 80067bc:	f1bb 0f03 	cmp.w	fp, #3
 80067c0:	d1cb      	bne.n	800675a <_scanf_i+0x5a>
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	b90b      	cbnz	r3, 80067ca <_scanf_i+0xca>
 80067c6:	230a      	movs	r3, #10
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	4945      	ldr	r1, [pc, #276]	; (80068e4 <_scanf_i+0x1e4>)
 80067ce:	6960      	ldr	r0, [r4, #20]
 80067d0:	1ac9      	subs	r1, r1, r3
 80067d2:	f000 f889 	bl	80068e8 <__sccl>
 80067d6:	f04f 0b00 	mov.w	fp, #0
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d03d      	beq.n	800685e <_scanf_i+0x15e>
 80067e2:	6831      	ldr	r1, [r6, #0]
 80067e4:	6960      	ldr	r0, [r4, #20]
 80067e6:	f891 c000 	ldrb.w	ip, [r1]
 80067ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d035      	beq.n	800685e <_scanf_i+0x15e>
 80067f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80067f6:	d124      	bne.n	8006842 <_scanf_i+0x142>
 80067f8:	0510      	lsls	r0, r2, #20
 80067fa:	d522      	bpl.n	8006842 <_scanf_i+0x142>
 80067fc:	f10b 0b01 	add.w	fp, fp, #1
 8006800:	f1b9 0f00 	cmp.w	r9, #0
 8006804:	d003      	beq.n	800680e <_scanf_i+0x10e>
 8006806:	3301      	adds	r3, #1
 8006808:	f109 39ff 	add.w	r9, r9, #4294967295
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	6873      	ldr	r3, [r6, #4]
 8006810:	3b01      	subs	r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	6073      	str	r3, [r6, #4]
 8006816:	dd1b      	ble.n	8006850 <_scanf_i+0x150>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	6033      	str	r3, [r6, #0]
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	3b01      	subs	r3, #1
 8006822:	60a3      	str	r3, [r4, #8]
 8006824:	e7d9      	b.n	80067da <_scanf_i+0xda>
 8006826:	f1bb 0f02 	cmp.w	fp, #2
 800682a:	d1ae      	bne.n	800678a <_scanf_i+0x8a>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006832:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006836:	d1bf      	bne.n	80067b8 <_scanf_i+0xb8>
 8006838:	2310      	movs	r3, #16
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006840:	e7a2      	b.n	8006788 <_scanf_i+0x88>
 8006842:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	780b      	ldrb	r3, [r1, #0]
 800684a:	f805 3b01 	strb.w	r3, [r5], #1
 800684e:	e7de      	b.n	800680e <_scanf_i+0x10e>
 8006850:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006854:	4631      	mov	r1, r6
 8006856:	4650      	mov	r0, sl
 8006858:	4798      	blx	r3
 800685a:	2800      	cmp	r0, #0
 800685c:	d0df      	beq.n	800681e <_scanf_i+0x11e>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	05d9      	lsls	r1, r3, #23
 8006862:	d50d      	bpl.n	8006880 <_scanf_i+0x180>
 8006864:	42bd      	cmp	r5, r7
 8006866:	d909      	bls.n	800687c <_scanf_i+0x17c>
 8006868:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800686c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006870:	4632      	mov	r2, r6
 8006872:	4650      	mov	r0, sl
 8006874:	4798      	blx	r3
 8006876:	f105 39ff 	add.w	r9, r5, #4294967295
 800687a:	464d      	mov	r5, r9
 800687c:	42bd      	cmp	r5, r7
 800687e:	d028      	beq.n	80068d2 <_scanf_i+0x1d2>
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	f012 0210 	ands.w	r2, r2, #16
 8006886:	d113      	bne.n	80068b0 <_scanf_i+0x1b0>
 8006888:	702a      	strb	r2, [r5, #0]
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	9e01      	ldr	r6, [sp, #4]
 800688e:	4639      	mov	r1, r7
 8006890:	4650      	mov	r0, sl
 8006892:	47b0      	blx	r6
 8006894:	f8d8 3000 	ldr.w	r3, [r8]
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	f8c8 2000 	str.w	r2, [r8]
 80068a0:	f011 0f20 	tst.w	r1, #32
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	d00f      	beq.n	80068c8 <_scanf_i+0x1c8>
 80068a8:	6018      	str	r0, [r3, #0]
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60e3      	str	r3, [r4, #12]
 80068b0:	1bed      	subs	r5, r5, r7
 80068b2:	44ab      	add	fp, r5
 80068b4:	6925      	ldr	r5, [r4, #16]
 80068b6:	445d      	add	r5, fp
 80068b8:	6125      	str	r5, [r4, #16]
 80068ba:	2000      	movs	r0, #0
 80068bc:	b007      	add	sp, #28
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	f04f 0b00 	mov.w	fp, #0
 80068c6:	e7ca      	b.n	800685e <_scanf_i+0x15e>
 80068c8:	07ca      	lsls	r2, r1, #31
 80068ca:	bf4c      	ite	mi
 80068cc:	8018      	strhmi	r0, [r3, #0]
 80068ce:	6018      	strpl	r0, [r3, #0]
 80068d0:	e7eb      	b.n	80068aa <_scanf_i+0x1aa>
 80068d2:	2001      	movs	r0, #1
 80068d4:	e7f2      	b.n	80068bc <_scanf_i+0x1bc>
 80068d6:	bf00      	nop
 80068d8:	08007060 	.word	0x08007060
 80068dc:	08006b61 	.word	0x08006b61
 80068e0:	08006a65 	.word	0x08006a65
 80068e4:	080070f0 	.word	0x080070f0

080068e8 <__sccl>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	780b      	ldrb	r3, [r1, #0]
 80068ec:	4604      	mov	r4, r0
 80068ee:	2b5e      	cmp	r3, #94	; 0x5e
 80068f0:	bf0b      	itete	eq
 80068f2:	784b      	ldrbeq	r3, [r1, #1]
 80068f4:	1c48      	addne	r0, r1, #1
 80068f6:	1c88      	addeq	r0, r1, #2
 80068f8:	2200      	movne	r2, #0
 80068fa:	bf08      	it	eq
 80068fc:	2201      	moveq	r2, #1
 80068fe:	1e61      	subs	r1, r4, #1
 8006900:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006904:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006908:	42a9      	cmp	r1, r5
 800690a:	d1fb      	bne.n	8006904 <__sccl+0x1c>
 800690c:	b90b      	cbnz	r3, 8006912 <__sccl+0x2a>
 800690e:	3801      	subs	r0, #1
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	f082 0101 	eor.w	r1, r2, #1
 8006916:	54e1      	strb	r1, [r4, r3]
 8006918:	1c42      	adds	r2, r0, #1
 800691a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800691e:	2d2d      	cmp	r5, #45	; 0x2d
 8006920:	f102 36ff 	add.w	r6, r2, #4294967295
 8006924:	4610      	mov	r0, r2
 8006926:	d006      	beq.n	8006936 <__sccl+0x4e>
 8006928:	2d5d      	cmp	r5, #93	; 0x5d
 800692a:	d0f1      	beq.n	8006910 <__sccl+0x28>
 800692c:	b90d      	cbnz	r5, 8006932 <__sccl+0x4a>
 800692e:	4630      	mov	r0, r6
 8006930:	e7ee      	b.n	8006910 <__sccl+0x28>
 8006932:	462b      	mov	r3, r5
 8006934:	e7ef      	b.n	8006916 <__sccl+0x2e>
 8006936:	7816      	ldrb	r6, [r2, #0]
 8006938:	2e5d      	cmp	r6, #93	; 0x5d
 800693a:	d0fa      	beq.n	8006932 <__sccl+0x4a>
 800693c:	42b3      	cmp	r3, r6
 800693e:	dcf8      	bgt.n	8006932 <__sccl+0x4a>
 8006940:	4618      	mov	r0, r3
 8006942:	3001      	adds	r0, #1
 8006944:	4286      	cmp	r6, r0
 8006946:	5421      	strb	r1, [r4, r0]
 8006948:	dcfb      	bgt.n	8006942 <__sccl+0x5a>
 800694a:	43d8      	mvns	r0, r3
 800694c:	4430      	add	r0, r6
 800694e:	1c5d      	adds	r5, r3, #1
 8006950:	42b3      	cmp	r3, r6
 8006952:	bfa8      	it	ge
 8006954:	2000      	movge	r0, #0
 8006956:	182b      	adds	r3, r5, r0
 8006958:	3202      	adds	r2, #2
 800695a:	e7de      	b.n	800691a <__sccl+0x32>

0800695c <_strtol_l.isra.0>:
 800695c:	2b01      	cmp	r3, #1
 800695e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006962:	d001      	beq.n	8006968 <_strtol_l.isra.0+0xc>
 8006964:	2b24      	cmp	r3, #36	; 0x24
 8006966:	d906      	bls.n	8006976 <_strtol_l.isra.0+0x1a>
 8006968:	f7ff f930 	bl	8005bcc <__errno>
 800696c:	2316      	movs	r3, #22
 800696e:	6003      	str	r3, [r0, #0]
 8006970:	2000      	movs	r0, #0
 8006972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006976:	4f3a      	ldr	r7, [pc, #232]	; (8006a60 <_strtol_l.isra.0+0x104>)
 8006978:	468e      	mov	lr, r1
 800697a:	4676      	mov	r6, lr
 800697c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006980:	5de5      	ldrb	r5, [r4, r7]
 8006982:	f015 0508 	ands.w	r5, r5, #8
 8006986:	d1f8      	bne.n	800697a <_strtol_l.isra.0+0x1e>
 8006988:	2c2d      	cmp	r4, #45	; 0x2d
 800698a:	d134      	bne.n	80069f6 <_strtol_l.isra.0+0x9a>
 800698c:	f89e 4000 	ldrb.w	r4, [lr]
 8006990:	f04f 0801 	mov.w	r8, #1
 8006994:	f106 0e02 	add.w	lr, r6, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05c      	beq.n	8006a56 <_strtol_l.isra.0+0xfa>
 800699c:	2b10      	cmp	r3, #16
 800699e:	d10c      	bne.n	80069ba <_strtol_l.isra.0+0x5e>
 80069a0:	2c30      	cmp	r4, #48	; 0x30
 80069a2:	d10a      	bne.n	80069ba <_strtol_l.isra.0+0x5e>
 80069a4:	f89e 4000 	ldrb.w	r4, [lr]
 80069a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069ac:	2c58      	cmp	r4, #88	; 0x58
 80069ae:	d14d      	bne.n	8006a4c <_strtol_l.isra.0+0xf0>
 80069b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80069b4:	2310      	movs	r3, #16
 80069b6:	f10e 0e02 	add.w	lr, lr, #2
 80069ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80069be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069c2:	2600      	movs	r6, #0
 80069c4:	fbbc f9f3 	udiv	r9, ip, r3
 80069c8:	4635      	mov	r5, r6
 80069ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80069ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80069d2:	2f09      	cmp	r7, #9
 80069d4:	d818      	bhi.n	8006a08 <_strtol_l.isra.0+0xac>
 80069d6:	463c      	mov	r4, r7
 80069d8:	42a3      	cmp	r3, r4
 80069da:	dd24      	ble.n	8006a26 <_strtol_l.isra.0+0xca>
 80069dc:	2e00      	cmp	r6, #0
 80069de:	db1f      	blt.n	8006a20 <_strtol_l.isra.0+0xc4>
 80069e0:	45a9      	cmp	r9, r5
 80069e2:	d31d      	bcc.n	8006a20 <_strtol_l.isra.0+0xc4>
 80069e4:	d101      	bne.n	80069ea <_strtol_l.isra.0+0x8e>
 80069e6:	45a2      	cmp	sl, r4
 80069e8:	db1a      	blt.n	8006a20 <_strtol_l.isra.0+0xc4>
 80069ea:	fb05 4503 	mla	r5, r5, r3, r4
 80069ee:	2601      	movs	r6, #1
 80069f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80069f4:	e7eb      	b.n	80069ce <_strtol_l.isra.0+0x72>
 80069f6:	2c2b      	cmp	r4, #43	; 0x2b
 80069f8:	bf08      	it	eq
 80069fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80069fe:	46a8      	mov	r8, r5
 8006a00:	bf08      	it	eq
 8006a02:	f106 0e02 	addeq.w	lr, r6, #2
 8006a06:	e7c7      	b.n	8006998 <_strtol_l.isra.0+0x3c>
 8006a08:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006a0c:	2f19      	cmp	r7, #25
 8006a0e:	d801      	bhi.n	8006a14 <_strtol_l.isra.0+0xb8>
 8006a10:	3c37      	subs	r4, #55	; 0x37
 8006a12:	e7e1      	b.n	80069d8 <_strtol_l.isra.0+0x7c>
 8006a14:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006a18:	2f19      	cmp	r7, #25
 8006a1a:	d804      	bhi.n	8006a26 <_strtol_l.isra.0+0xca>
 8006a1c:	3c57      	subs	r4, #87	; 0x57
 8006a1e:	e7db      	b.n	80069d8 <_strtol_l.isra.0+0x7c>
 8006a20:	f04f 36ff 	mov.w	r6, #4294967295
 8006a24:	e7e4      	b.n	80069f0 <_strtol_l.isra.0+0x94>
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	da05      	bge.n	8006a36 <_strtol_l.isra.0+0xda>
 8006a2a:	2322      	movs	r3, #34	; 0x22
 8006a2c:	6003      	str	r3, [r0, #0]
 8006a2e:	4665      	mov	r5, ip
 8006a30:	b942      	cbnz	r2, 8006a44 <_strtol_l.isra.0+0xe8>
 8006a32:	4628      	mov	r0, r5
 8006a34:	e79d      	b.n	8006972 <_strtol_l.isra.0+0x16>
 8006a36:	f1b8 0f00 	cmp.w	r8, #0
 8006a3a:	d000      	beq.n	8006a3e <_strtol_l.isra.0+0xe2>
 8006a3c:	426d      	negs	r5, r5
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	d0f7      	beq.n	8006a32 <_strtol_l.isra.0+0xd6>
 8006a42:	b10e      	cbz	r6, 8006a48 <_strtol_l.isra.0+0xec>
 8006a44:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	e7f2      	b.n	8006a32 <_strtol_l.isra.0+0xd6>
 8006a4c:	2430      	movs	r4, #48	; 0x30
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1b3      	bne.n	80069ba <_strtol_l.isra.0+0x5e>
 8006a52:	2308      	movs	r3, #8
 8006a54:	e7b1      	b.n	80069ba <_strtol_l.isra.0+0x5e>
 8006a56:	2c30      	cmp	r4, #48	; 0x30
 8006a58:	d0a4      	beq.n	80069a4 <_strtol_l.isra.0+0x48>
 8006a5a:	230a      	movs	r3, #10
 8006a5c:	e7ad      	b.n	80069ba <_strtol_l.isra.0+0x5e>
 8006a5e:	bf00      	nop
 8006a60:	080070f3 	.word	0x080070f3

08006a64 <_strtol_r>:
 8006a64:	f7ff bf7a 	b.w	800695c <_strtol_l.isra.0>

08006a68 <_strtoul_l.isra.0>:
 8006a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a6c:	4e3b      	ldr	r6, [pc, #236]	; (8006b5c <_strtoul_l.isra.0+0xf4>)
 8006a6e:	4686      	mov	lr, r0
 8006a70:	468c      	mov	ip, r1
 8006a72:	4660      	mov	r0, ip
 8006a74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006a78:	5da5      	ldrb	r5, [r4, r6]
 8006a7a:	f015 0508 	ands.w	r5, r5, #8
 8006a7e:	d1f8      	bne.n	8006a72 <_strtoul_l.isra.0+0xa>
 8006a80:	2c2d      	cmp	r4, #45	; 0x2d
 8006a82:	d134      	bne.n	8006aee <_strtoul_l.isra.0+0x86>
 8006a84:	f89c 4000 	ldrb.w	r4, [ip]
 8006a88:	f04f 0801 	mov.w	r8, #1
 8006a8c:	f100 0c02 	add.w	ip, r0, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05e      	beq.n	8006b52 <_strtoul_l.isra.0+0xea>
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d10c      	bne.n	8006ab2 <_strtoul_l.isra.0+0x4a>
 8006a98:	2c30      	cmp	r4, #48	; 0x30
 8006a9a:	d10a      	bne.n	8006ab2 <_strtoul_l.isra.0+0x4a>
 8006a9c:	f89c 0000 	ldrb.w	r0, [ip]
 8006aa0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006aa4:	2858      	cmp	r0, #88	; 0x58
 8006aa6:	d14f      	bne.n	8006b48 <_strtoul_l.isra.0+0xe0>
 8006aa8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006aac:	2310      	movs	r3, #16
 8006aae:	f10c 0c02 	add.w	ip, ip, #2
 8006ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	fbb7 f7f3 	udiv	r7, r7, r3
 8006abc:	fb03 f907 	mul.w	r9, r3, r7
 8006ac0:	ea6f 0909 	mvn.w	r9, r9
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006aca:	2e09      	cmp	r6, #9
 8006acc:	d818      	bhi.n	8006b00 <_strtoul_l.isra.0+0x98>
 8006ace:	4634      	mov	r4, r6
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	dd24      	ble.n	8006b1e <_strtoul_l.isra.0+0xb6>
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	db1f      	blt.n	8006b18 <_strtoul_l.isra.0+0xb0>
 8006ad8:	4287      	cmp	r7, r0
 8006ada:	d31d      	bcc.n	8006b18 <_strtoul_l.isra.0+0xb0>
 8006adc:	d101      	bne.n	8006ae2 <_strtoul_l.isra.0+0x7a>
 8006ade:	45a1      	cmp	r9, r4
 8006ae0:	db1a      	blt.n	8006b18 <_strtoul_l.isra.0+0xb0>
 8006ae2:	fb00 4003 	mla	r0, r0, r3, r4
 8006ae6:	2501      	movs	r5, #1
 8006ae8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006aec:	e7eb      	b.n	8006ac6 <_strtoul_l.isra.0+0x5e>
 8006aee:	2c2b      	cmp	r4, #43	; 0x2b
 8006af0:	bf08      	it	eq
 8006af2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006af6:	46a8      	mov	r8, r5
 8006af8:	bf08      	it	eq
 8006afa:	f100 0c02 	addeq.w	ip, r0, #2
 8006afe:	e7c7      	b.n	8006a90 <_strtoul_l.isra.0+0x28>
 8006b00:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006b04:	2e19      	cmp	r6, #25
 8006b06:	d801      	bhi.n	8006b0c <_strtoul_l.isra.0+0xa4>
 8006b08:	3c37      	subs	r4, #55	; 0x37
 8006b0a:	e7e1      	b.n	8006ad0 <_strtoul_l.isra.0+0x68>
 8006b0c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006b10:	2e19      	cmp	r6, #25
 8006b12:	d804      	bhi.n	8006b1e <_strtoul_l.isra.0+0xb6>
 8006b14:	3c57      	subs	r4, #87	; 0x57
 8006b16:	e7db      	b.n	8006ad0 <_strtoul_l.isra.0+0x68>
 8006b18:	f04f 35ff 	mov.w	r5, #4294967295
 8006b1c:	e7e4      	b.n	8006ae8 <_strtoul_l.isra.0+0x80>
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	da07      	bge.n	8006b32 <_strtoul_l.isra.0+0xca>
 8006b22:	2322      	movs	r3, #34	; 0x22
 8006b24:	f8ce 3000 	str.w	r3, [lr]
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b942      	cbnz	r2, 8006b40 <_strtoul_l.isra.0+0xd8>
 8006b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b32:	f1b8 0f00 	cmp.w	r8, #0
 8006b36:	d000      	beq.n	8006b3a <_strtoul_l.isra.0+0xd2>
 8006b38:	4240      	negs	r0, r0
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d0f7      	beq.n	8006b2e <_strtoul_l.isra.0+0xc6>
 8006b3e:	b10d      	cbz	r5, 8006b44 <_strtoul_l.isra.0+0xdc>
 8006b40:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	e7f2      	b.n	8006b2e <_strtoul_l.isra.0+0xc6>
 8006b48:	2430      	movs	r4, #48	; 0x30
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1b1      	bne.n	8006ab2 <_strtoul_l.isra.0+0x4a>
 8006b4e:	2308      	movs	r3, #8
 8006b50:	e7af      	b.n	8006ab2 <_strtoul_l.isra.0+0x4a>
 8006b52:	2c30      	cmp	r4, #48	; 0x30
 8006b54:	d0a2      	beq.n	8006a9c <_strtoul_l.isra.0+0x34>
 8006b56:	230a      	movs	r3, #10
 8006b58:	e7ab      	b.n	8006ab2 <_strtoul_l.isra.0+0x4a>
 8006b5a:	bf00      	nop
 8006b5c:	080070f3 	.word	0x080070f3

08006b60 <_strtoul_r>:
 8006b60:	f7ff bf82 	b.w	8006a68 <_strtoul_l.isra.0>

08006b64 <__submore>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d11d      	bne.n	8006bb0 <__submore+0x4c>
 8006b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b78:	f000 f8a8 	bl	8006ccc <_malloc_r>
 8006b7c:	b918      	cbnz	r0, 8006b86 <__submore+0x22>
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006b90:	6360      	str	r0, [r4, #52]	; 0x34
 8006b92:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006b96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006b9a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006b9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006ba2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006ba6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7e8      	b.n	8006b82 <__submore+0x1e>
 8006bb0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006bb2:	0077      	lsls	r7, r6, #1
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	f000 f8e3 	bl	8006d80 <_realloc_r>
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d0de      	beq.n	8006b7e <__submore+0x1a>
 8006bc0:	eb00 0806 	add.w	r8, r0, r6
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f000 f807 	bl	8006bdc <memcpy>
 8006bce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006bd2:	f8c4 8000 	str.w	r8, [r4]
 8006bd6:	e7e9      	b.n	8006bac <__submore+0x48>

08006bd8 <__retarget_lock_acquire_recursive>:
 8006bd8:	4770      	bx	lr

08006bda <__retarget_lock_release_recursive>:
 8006bda:	4770      	bx	lr

08006bdc <memcpy>:
 8006bdc:	440a      	add	r2, r1
 8006bde:	4291      	cmp	r1, r2
 8006be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be4:	d100      	bne.n	8006be8 <memcpy+0xc>
 8006be6:	4770      	bx	lr
 8006be8:	b510      	push	{r4, lr}
 8006bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d1f9      	bne.n	8006bea <memcpy+0xe>
 8006bf6:	bd10      	pop	{r4, pc}

08006bf8 <memmove>:
 8006bf8:	4288      	cmp	r0, r1
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	eb01 0402 	add.w	r4, r1, r2
 8006c00:	d902      	bls.n	8006c08 <memmove+0x10>
 8006c02:	4284      	cmp	r4, r0
 8006c04:	4623      	mov	r3, r4
 8006c06:	d807      	bhi.n	8006c18 <memmove+0x20>
 8006c08:	1e43      	subs	r3, r0, #1
 8006c0a:	42a1      	cmp	r1, r4
 8006c0c:	d008      	beq.n	8006c20 <memmove+0x28>
 8006c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c16:	e7f8      	b.n	8006c0a <memmove+0x12>
 8006c18:	4402      	add	r2, r0
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	428a      	cmp	r2, r1
 8006c1e:	d100      	bne.n	8006c22 <memmove+0x2a>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2a:	e7f7      	b.n	8006c1c <memmove+0x24>

08006c2c <_free_r>:
 8006c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	d048      	beq.n	8006cc4 <_free_r+0x98>
 8006c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c36:	9001      	str	r0, [sp, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c3e:	bfb8      	it	lt
 8006c40:	18e4      	addlt	r4, r4, r3
 8006c42:	f000 f8d3 	bl	8006dec <__malloc_lock>
 8006c46:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <_free_r+0x9c>)
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	4615      	mov	r5, r2
 8006c4e:	b933      	cbnz	r3, 8006c5e <_free_r+0x32>
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	6014      	str	r4, [r2, #0]
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c5a:	f000 b8cd 	b.w	8006df8 <__malloc_unlock>
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	d90b      	bls.n	8006c7a <_free_r+0x4e>
 8006c62:	6821      	ldr	r1, [r4, #0]
 8006c64:	1862      	adds	r2, r4, r1
 8006c66:	4293      	cmp	r3, r2
 8006c68:	bf04      	itt	eq
 8006c6a:	681a      	ldreq	r2, [r3, #0]
 8006c6c:	685b      	ldreq	r3, [r3, #4]
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	bf04      	itt	eq
 8006c72:	1852      	addeq	r2, r2, r1
 8006c74:	6022      	streq	r2, [r4, #0]
 8006c76:	602c      	str	r4, [r5, #0]
 8006c78:	e7ec      	b.n	8006c54 <_free_r+0x28>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b10b      	cbz	r3, 8006c84 <_free_r+0x58>
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d9fa      	bls.n	8006c7a <_free_r+0x4e>
 8006c84:	6811      	ldr	r1, [r2, #0]
 8006c86:	1855      	adds	r5, r2, r1
 8006c88:	42a5      	cmp	r5, r4
 8006c8a:	d10b      	bne.n	8006ca4 <_free_r+0x78>
 8006c8c:	6824      	ldr	r4, [r4, #0]
 8006c8e:	4421      	add	r1, r4
 8006c90:	1854      	adds	r4, r2, r1
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	d1dd      	bne.n	8006c54 <_free_r+0x28>
 8006c98:	681c      	ldr	r4, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	6053      	str	r3, [r2, #4]
 8006c9e:	4421      	add	r1, r4
 8006ca0:	6011      	str	r1, [r2, #0]
 8006ca2:	e7d7      	b.n	8006c54 <_free_r+0x28>
 8006ca4:	d902      	bls.n	8006cac <_free_r+0x80>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	e7d3      	b.n	8006c54 <_free_r+0x28>
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf04      	itt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	6063      	str	r3, [r4, #4]
 8006cba:	bf04      	itt	eq
 8006cbc:	1949      	addeq	r1, r1, r5
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	6054      	str	r4, [r2, #4]
 8006cc2:	e7c7      	b.n	8006c54 <_free_r+0x28>
 8006cc4:	b003      	add	sp, #12
 8006cc6:	bd30      	pop	{r4, r5, pc}
 8006cc8:	200000b8 	.word	0x200000b8

08006ccc <_malloc_r>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	1ccd      	adds	r5, r1, #3
 8006cd0:	f025 0503 	bic.w	r5, r5, #3
 8006cd4:	3508      	adds	r5, #8
 8006cd6:	2d0c      	cmp	r5, #12
 8006cd8:	bf38      	it	cc
 8006cda:	250c      	movcc	r5, #12
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	4606      	mov	r6, r0
 8006ce0:	db01      	blt.n	8006ce6 <_malloc_r+0x1a>
 8006ce2:	42a9      	cmp	r1, r5
 8006ce4:	d903      	bls.n	8006cee <_malloc_r+0x22>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	2000      	movs	r0, #0
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cee:	f000 f87d 	bl	8006dec <__malloc_lock>
 8006cf2:	4921      	ldr	r1, [pc, #132]	; (8006d78 <_malloc_r+0xac>)
 8006cf4:	680a      	ldr	r2, [r1, #0]
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	b99c      	cbnz	r4, 8006d22 <_malloc_r+0x56>
 8006cfa:	4f20      	ldr	r7, [pc, #128]	; (8006d7c <_malloc_r+0xb0>)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b923      	cbnz	r3, 8006d0a <_malloc_r+0x3e>
 8006d00:	4621      	mov	r1, r4
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f862 	bl	8006dcc <_sbrk_r>
 8006d08:	6038      	str	r0, [r7, #0]
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f85d 	bl	8006dcc <_sbrk_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d123      	bne.n	8006d5e <_malloc_r+0x92>
 8006d16:	230c      	movs	r3, #12
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f000 f86c 	bl	8006df8 <__malloc_unlock>
 8006d20:	e7e3      	b.n	8006cea <_malloc_r+0x1e>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	1b5b      	subs	r3, r3, r5
 8006d26:	d417      	bmi.n	8006d58 <_malloc_r+0x8c>
 8006d28:	2b0b      	cmp	r3, #11
 8006d2a:	d903      	bls.n	8006d34 <_malloc_r+0x68>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	441c      	add	r4, r3
 8006d30:	6025      	str	r5, [r4, #0]
 8006d32:	e004      	b.n	8006d3e <_malloc_r+0x72>
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	42a2      	cmp	r2, r4
 8006d38:	bf0c      	ite	eq
 8006d3a:	600b      	streq	r3, [r1, #0]
 8006d3c:	6053      	strne	r3, [r2, #4]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 f85a 	bl	8006df8 <__malloc_unlock>
 8006d44:	f104 000b 	add.w	r0, r4, #11
 8006d48:	1d23      	adds	r3, r4, #4
 8006d4a:	f020 0007 	bic.w	r0, r0, #7
 8006d4e:	1ac2      	subs	r2, r0, r3
 8006d50:	d0cc      	beq.n	8006cec <_malloc_r+0x20>
 8006d52:	1a1b      	subs	r3, r3, r0
 8006d54:	50a3      	str	r3, [r4, r2]
 8006d56:	e7c9      	b.n	8006cec <_malloc_r+0x20>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	6864      	ldr	r4, [r4, #4]
 8006d5c:	e7cc      	b.n	8006cf8 <_malloc_r+0x2c>
 8006d5e:	1cc4      	adds	r4, r0, #3
 8006d60:	f024 0403 	bic.w	r4, r4, #3
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d0e3      	beq.n	8006d30 <_malloc_r+0x64>
 8006d68:	1a21      	subs	r1, r4, r0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f82e 	bl	8006dcc <_sbrk_r>
 8006d70:	3001      	adds	r0, #1
 8006d72:	d1dd      	bne.n	8006d30 <_malloc_r+0x64>
 8006d74:	e7cf      	b.n	8006d16 <_malloc_r+0x4a>
 8006d76:	bf00      	nop
 8006d78:	200000b8 	.word	0x200000b8
 8006d7c:	200000bc 	.word	0x200000bc

08006d80 <_realloc_r>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	4607      	mov	r7, r0
 8006d84:	4614      	mov	r4, r2
 8006d86:	460e      	mov	r6, r1
 8006d88:	b921      	cbnz	r1, 8006d94 <_realloc_r+0x14>
 8006d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d8e:	4611      	mov	r1, r2
 8006d90:	f7ff bf9c 	b.w	8006ccc <_malloc_r>
 8006d94:	b922      	cbnz	r2, 8006da0 <_realloc_r+0x20>
 8006d96:	f7ff ff49 	bl	8006c2c <_free_r>
 8006d9a:	4625      	mov	r5, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da0:	f000 f830 	bl	8006e04 <_malloc_usable_size_r>
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d20f      	bcs.n	8006dc8 <_realloc_r+0x48>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ff8e 	bl	8006ccc <_malloc_r>
 8006db0:	4605      	mov	r5, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0f2      	beq.n	8006d9c <_realloc_r+0x1c>
 8006db6:	4631      	mov	r1, r6
 8006db8:	4622      	mov	r2, r4
 8006dba:	f7ff ff0f 	bl	8006bdc <memcpy>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ff33 	bl	8006c2c <_free_r>
 8006dc6:	e7e9      	b.n	8006d9c <_realloc_r+0x1c>
 8006dc8:	4635      	mov	r5, r6
 8006dca:	e7e7      	b.n	8006d9c <_realloc_r+0x1c>

08006dcc <_sbrk_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d06      	ldr	r5, [pc, #24]	; (8006de8 <_sbrk_r+0x1c>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7f9 ff6a 	bl	8000cb0 <_sbrk>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_sbrk_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_sbrk_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20000254 	.word	0x20000254

08006dec <__malloc_lock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_lock+0x8>)
 8006dee:	f7ff bef3 	b.w	8006bd8 <__retarget_lock_acquire_recursive>
 8006df2:	bf00      	nop
 8006df4:	2000025c 	.word	0x2000025c

08006df8 <__malloc_unlock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_unlock+0x8>)
 8006dfa:	f7ff beee 	b.w	8006bda <__retarget_lock_release_recursive>
 8006dfe:	bf00      	nop
 8006e00:	2000025c 	.word	0x2000025c

08006e04 <_malloc_usable_size_r>:
 8006e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e08:	1f18      	subs	r0, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfbc      	itt	lt
 8006e0e:	580b      	ldrlt	r3, [r1, r0]
 8006e10:	18c0      	addlt	r0, r0, r3
 8006e12:	4770      	bx	lr

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
