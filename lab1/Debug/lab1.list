
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009200  08009200  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009200  08009200  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009204  08009204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08009208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          000007cc  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b8  200008b8  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c04  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326d  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0003af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  0003c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023861  00000000  00000000  0003d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a92b  00000000  00000000  00060971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d35  00000000  00000000  0007b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014dfd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000530c  00000000  00000000  0014e024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cb8 	.word	0x08008cb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08008cb8 	.word	0x08008cb8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d131      	bne.n	8000328 <splitNumber+0x78>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d039      	beq.n	800033e <splitNumber+0x8e>
             while(num > 0 ){
 80002ca:	e02d      	b.n	8000328 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	1c43      	adds	r3, r0, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <splitNumber+0x98>)
 80002d6:	fb83 2301 	smull	r2, r3, r3, r1
 80002da:	109a      	asrs	r2, r3, #2
 80002dc:	17cb      	asrs	r3, r1, #31
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1aca      	subs	r2, r1, r3
 80002ea:	0083      	lsls	r3, r0, #2
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440b      	add	r3, r1
 80002f2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <splitNumber+0x98>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	1092      	asrs	r2, r2, #2
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <splitNumber+0x70>
                  arr[i++] = 0;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	617a      	str	r2, [r7, #20]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	f107 0218 	add.w	r2, r7, #24
 8000318:	4413      	add	r3, r2
 800031a:	2200      	movs	r2, #0
 800031c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <splitNumber+0x9c>)
 8000324:	f006 fedc 	bl	80070e0 <iprintf>
             while(num > 0 ){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dcce      	bgt.n	80002cc <splitNumber+0x1c>


            }
        return arr[return_val];
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0218 	add.w	r2, r7, #24
 8000336:	4413      	add	r3, r2
 8000338:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800033c:	e000      	b.n	8000340 <splitNumber+0x90>
         } else {
             return 0;
 800033e:	2300      	movs	r3, #0
         }


}
 8000340:	4618      	mov	r0, r3
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	66666667 	.word	0x66666667
 800034c:	08008cd0 	.word	0x08008cd0

08000350 <convertToBinary>:

int convertToBinary(int num){
 8000350:	b480      	push	{r7}
 8000352:	b08f      	sub	sp, #60	; 0x3c
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000360:	e015      	b.n	800038e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000378:	440b      	add	r3, r1
 800037a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	0fda      	lsrs	r2, r3, #31
 8000382:	4413      	add	r3, r2
 8000384:	105b      	asrs	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
              i++;
 8000388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e6      	bne.n	8000362 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000396:	3b01      	subs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800039a:	e005      	b.n	80003a8 <convertToBinary+0x58>
              count++;
 800039c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800039e:	3301      	adds	r3, #1
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	daf6      	bge.n	800039c <convertToBinary+0x4c>

          }
          return count;
 80003ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	373c      	adds	r7, #60	; 0x3c
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <setTime>:



void setTime(RTC_TimeTypeDef sTime, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003bc:	b084      	sub	sp, #16
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	f107 0c08 	add.w	ip, r7, #8
 80003c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <setTime+0x48>)
 80003cc:	f004 fc7c 	bl	8004cc8 <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003d0:	7f3b      	ldrb	r3, [r7, #28]
 80003d2:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003d8:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003de:	72bb      	strb	r3, [r7, #10]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f107 0108 	add.w	r1, r7, #8
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <setTime+0x48>)
 80003e8:	f004 f8d4 	bl	8004594 <HAL_RTC_SetTime>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <setTime+0x48>)
 80003f4:	f004 fb92 	bl	8004b1c <HAL_RTCEx_SetWakeUpTimer_IT>



}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000400:	b004      	add	sp, #16
 8000402:	4770      	bx	lr
 8000404:	200003e0 	.word	0x200003e0

08000408 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	resetPins();
 800041a:	f000 f8d1 	bl	80005c0 <resetPins>

	int bits_count = convertToBinary(hour);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff95 	bl	8000350 <convertToBinary>
 8000426:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	2b05      	cmp	r3, #5
 800042c:	dd03      	ble.n	8000436 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800042e:	4858      	ldr	r0, [pc, #352]	; (8000590 <displayHour+0x188>)
 8000430:	f000 faf0 	bl	8000a14 <Send>
		hour_displayed = 1;

	}


}
 8000434:	e0a7      	b.n	8000586 <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
 800043a:	e016      	b.n	800046a <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	fa42 f303 	asr.w	r3, r2, r3
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00b      	beq.n	8000464 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 800044c:	4a51      	ldr	r2, [pc, #324]	; (8000594 <displayHour+0x18c>)
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000454:	4a50      	ldr	r2, [pc, #320]	; (8000598 <displayHour+0x190>)
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	f001 ffe4 	bl	800242c <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	3301      	adds	r3, #1
 8000468:	61fb      	str	r3, [r7, #28]
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	2b05      	cmp	r3, #5
 800046e:	dde5      	ble.n	800043c <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
 8000474:	e01b      	b.n	80004ae <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff18 	bl	80002b0 <splitNumber>
 8000480:	4602      	mov	r2, r0
 8000482:	69bb      	ldr	r3, [r7, #24]
 8000484:	fa42 f303 	asr.w	r3, r2, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00b      	beq.n	80004a8 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 8000490:	4a42      	ldr	r2, [pc, #264]	; (800059c <displayHour+0x194>)
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000498:	4a41      	ldr	r2, [pc, #260]	; (80005a0 <displayHour+0x198>)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	f001 ffc2 	bl	800242c <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	3301      	adds	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
 80004ae:	69bb      	ldr	r3, [r7, #24]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	dde0      	ble.n	8000476 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	e01b      	b.n	80004f2 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fef6 	bl	80002b0 <splitNumber>
 80004c4:	4602      	mov	r2, r0
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa42 f303 	asr.w	r3, r2, r3
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80004d4:	4a33      	ldr	r2, [pc, #204]	; (80005a4 <displayHour+0x19c>)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004dc:	4a32      	ldr	r2, [pc, #200]	; (80005a8 <displayHour+0x1a0>)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f001 ffa0 	bl	800242c <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	dde0      	ble.n	80004ba <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	e01b      	b.n	8000536 <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 80004fe:	797b      	ldrb	r3, [r7, #5]
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fed4 	bl	80002b0 <splitNumber>
 8000508:	4602      	mov	r2, r0
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	fa42 f303 	asr.w	r3, r2, r3
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000518:	4a24      	ldr	r2, [pc, #144]	; (80005ac <displayHour+0x1a4>)
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000520:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <displayHour+0x1a8>)
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	f001 ff7e 	bl	800242c <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b04      	cmp	r3, #4
 800053a:	dde0      	ble.n	80004fe <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e01b      	b.n	800057a <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff feb2 	bl	80002b0 <splitNumber>
 800054c:	4602      	mov	r2, r0
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	fa42 f303 	asr.w	r3, r2, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00b      	beq.n	8000574 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <displayHour+0x1ac>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <displayHour+0x1b0>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	f001 ff5c 	bl	800242c <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b03      	cmp	r3, #3
 800057e:	dde0      	ble.n	8000542 <displayHour+0x13a>
		hour_displayed = 1;
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <displayHour+0x1b4>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	08008cd4 	.word	0x08008cd4
 8000594:	20000000 	.word	0x20000000
 8000598:	20000014 	.word	0x20000014
 800059c:	20000020 	.word	0x20000020
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000038 	.word	0x20000038
 80005a8:	20000044 	.word	0x20000044
 80005ac:	20000060 	.word	0x20000060
 80005b0:	20000070 	.word	0x20000070
 80005b4:	2000004c 	.word	0x2000004c
 80005b8:	20000058 	.word	0x20000058
 80005bc:	2000011f 	.word	0x2000011f

080005c0 <resetPins>:

void resetPins(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00e      	b.n	80005ea <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80005cc:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <resetPins+0xc0>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <resetPins+0xc4>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	f001 ff24 	bl	800242c <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	dded      	ble.n	80005cc <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	e01a      	b.n	800062c <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 80005f6:	4a24      	ldr	r2, [pc, #144]	; (8000688 <resetPins+0xc8>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <resetPins+0xcc>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f001 ff0f 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <resetPins+0xd0>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000616:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <resetPins+0xd4>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	2200      	movs	r2, #0
 8000620:	4619      	mov	r1, r3
 8000622:	f001 ff03 	bl	800242c <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3301      	adds	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b02      	cmp	r3, #2
 8000630:	dde1      	ble.n	80005f6 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e01a      	b.n	800066e <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <resetPins+0xd8>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000640:	4a16      	ldr	r2, [pc, #88]	; (800069c <resetPins+0xdc>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	f001 feee 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <resetPins+0xe0>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <resetPins+0xe4>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	f001 fee2 	bl	800242c <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b03      	cmp	r3, #3
 8000672:	dde1      	ble.n	8000638 <resetPins+0x78>
	}



}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	20000014 	.word	0x20000014
 8000688:	20000038 	.word	0x20000038
 800068c:	20000044 	.word	0x20000044
 8000690:	2000004c 	.word	0x2000004c
 8000694:	20000058 	.word	0x20000058
 8000698:	20000020 	.word	0x20000020
 800069c:	20000030 	.word	0x20000030
 80006a0:	20000060 	.word	0x20000060
 80006a4:	20000070 	.word	0x20000070

080006a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b69      	ldr	r3, [pc, #420]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a68      	ldr	r2, [pc, #416]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a62      	ldr	r2, [pc, #392]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b60      	ldr	r3, [pc, #384]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a5c      	ldr	r2, [pc, #368]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b5a      	ldr	r3, [pc, #360]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b57      	ldr	r3, [pc, #348]	; (8000864 <MX_GPIO_Init+0x1bc>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a56      	ldr	r2, [pc, #344]	; (8000864 <MX_GPIO_Init+0x1bc>)
 800070c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b54      	ldr	r3, [pc, #336]	; (8000864 <MX_GPIO_Init+0x1bc>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b51      	ldr	r3, [pc, #324]	; (8000864 <MX_GPIO_Init+0x1bc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a50      	ldr	r2, [pc, #320]	; (8000864 <MX_GPIO_Init+0x1bc>)
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MX_GPIO_Init+0x1bc>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000736:	2200      	movs	r2, #0
 8000738:	f641 515f 	movw	r1, #7519	; 0x1d5f
 800073c:	484a      	ldr	r0, [pc, #296]	; (8000868 <MX_GPIO_Init+0x1c0>)
 800073e:	f001 fe75 	bl	800242c <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f001 fe6e 	bl	800242c <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000750:	2200      	movs	r2, #0
 8000752:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000756:	4845      	ldr	r0, [pc, #276]	; (800086c <MX_GPIO_Init+0x1c4>)
 8000758:	f001 fe68 	bl	800242c <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2104      	movs	r1, #4
 8000760:	4843      	ldr	r0, [pc, #268]	; (8000870 <MX_GPIO_Init+0x1c8>)
 8000762:	f001 fe63 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	483a      	ldr	r0, [pc, #232]	; (8000868 <MX_GPIO_Init+0x1c0>)
 800077e:	f001 fbc3 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000782:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000786:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4833      	ldr	r0, [pc, #204]	; (8000868 <MX_GPIO_Init+0x1c0>)
 800079c:	f001 fbb4 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 80007a0:	f248 2313 	movw	r3, #33299	; 0x8213
 80007a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 fba6 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 80007bc:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 80007c0:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f001 fb96 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 80007dc:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <MX_GPIO_Init+0x1c0>)
 80007f2:	f001 fb89 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 80007f6:	f24e 0307 	movw	r3, #57351	; 0xe007
 80007fa:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <MX_GPIO_Init+0x1c4>)
 8000810:	f001 fb7a 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000814:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8000818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081a:	2303      	movs	r3, #3
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <MX_GPIO_Init+0x1c4>)
 800082a:	f001 fb6d 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 800082e:	2304      	movs	r3, #4
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <MX_GPIO_Init+0x1c8>)
 8000846:	f001 fb5f 	bl	8001f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f001 fa92 	bl	8001d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f001 fabb 	bl	8001dd0 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800
 800086c:	48000400 	.word	0x48000400
 8000870:	48000c00 	.word	0x48000c00

08000874 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	x1hzTime++;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <delay_1hz+0x30>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <delay_1hz+0x30>)
 8000882:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <delay_1hz+0x30>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088c:	d305      	bcc.n	800089a <delay_1hz+0x26>
		x1hz = 1;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <delay_1hz+0x34>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <delay_1hz+0x30>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]
	}
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	20000108 	.word	0x20000108
 80008a8:	2000010c 	.word	0x2000010c

080008ac <delay_4hz>:

void delay_4hz(){
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	x4hzTime++;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <delay_4hz+0x30>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <delay_4hz+0x30>)
 80008ba:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <delay_4hz+0x30>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	2bf9      	cmp	r3, #249	; 0xf9
 80008c2:	d905      	bls.n	80008d0 <delay_4hz+0x24>
		x4hz = 1;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <delay_4hz+0x34>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <delay_4hz+0x30>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
	}

}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000010a 	.word	0x2000010a
 80008e0:	2000010d 	.word	0x2000010d

080008e4 <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <delayUs+0x30>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80008f6:	bf00      	nop
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <delayUs+0x34>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	429a      	cmp	r2, r3
 8000902:	d3f9      	bcc.n	80008f8 <delayUs+0x14>
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200007d4 	.word	0x200007d4
 8000918:	20000788 	.word	0x20000788

0800091c <delayMs>:

void delayMs(uint16_t ms){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 8000926:	2300      	movs	r3, #0
 8000928:	81fb      	strh	r3, [r7, #14]
 800092a:	e006      	b.n	800093a <delayMs+0x1e>
		delayUs(1000); //1ms delay
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f7ff ffd8 	bl	80008e4 <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	3301      	adds	r3, #1
 8000938:	81fb      	strh	r3, [r7, #14]
 800093a:	89fa      	ldrh	r2, [r7, #14]
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3f4      	bcc.n	800092c <delayMs+0x10>
	}
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <handleBlinkCommand+0x60>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <handleBlinkCommand+0x64>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	429a      	cmp	r2, r3
 800095c:	d805      	bhi.n	800096a <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <handleBlinkCommand+0x68>)
 8000964:	f001 fd62 	bl	800242c <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8000968:	e01e      	b.n	80009a8 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <handleBlinkCommand+0x60>)
 800096c:	881a      	ldrh	r2, [r3, #0]
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <handleBlinkCommand+0x6c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	b29b      	uxth	r3, r3
 8000974:	429a      	cmp	r2, r3
 8000976:	d805      	bhi.n	8000984 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <handleBlinkCommand+0x68>)
 800097e:	f001 fd55 	bl	800242c <HAL_GPIO_WritePin>
}
 8000982:	e011      	b.n	80009a8 <handleBlinkCommand+0x5c>
		led_delay = 0;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <handleBlinkCommand+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <handleBlinkCommand+0x70>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	3b01      	subs	r3, #1
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <handleBlinkCommand+0x70>)
 8000996:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <handleBlinkCommand+0x70>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <handleBlinkCommand+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000148 	.word	0x20000148
 80009b0:	2000007a 	.word	0x2000007a
 80009b4:	48000800 	.word	0x48000800
 80009b8:	2000013c 	.word	0x2000013c
 80009bc:	2000013e 	.word	0x2000013e
 80009c0:	2000013b 	.word	0x2000013b

080009c4 <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <UART_init+0x38>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <UART_init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <UART_init+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <UART_init+0x44>)
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 80009e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e4:	2100      	movs	r1, #0
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <UART_init+0x48>)
 80009e8:	f006 fb72 	bl	80070d0 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	2100      	movs	r1, #0
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <UART_init+0x4c>)
 80009f4:	f006 fb6c 	bl	80070d0 <memset>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000110 	.word	0x20000110
 8000a00:	20000112 	.word	0x20000112
 8000a04:	20000114 	.word	0x20000114
 8000a08:	20000116 	.word	0x20000116
 8000a0c:	20000584 	.word	0x20000584
 8000a10:	200001e0 	.word	0x200001e0

08000a14 <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 8000a14:	b40f      	push	{r0, r1, r2, r3}
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b0c4      	sub	sp, #272	; 0x110
 8000a1a:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 8000a1c:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <Send+0x110>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 8000a2a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	f107 000c 	add.w	r0, r7, #12
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000a3e:	f006 fbef 	bl	8007220 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000a48:	e020      	b.n	8000a8c <Send+0x78>
		Tx_buff[idx] = temp[i];
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f107 010c 	add.w	r1, r7, #12
 8000a54:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a58:	440a      	add	r2, r1
 8000a5a:	7811      	ldrb	r1, [r2, #0]
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <Send+0x114>)
 8000a5e:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a78:	db03      	blt.n	8000a82 <Send+0x6e>
			idx = 0;
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 8000a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a86:	3301      	adds	r3, #1
 8000a88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbaf 	bl	80001f4 <strlen>
 8000a96:	4602      	mov	r2, r0
 8000a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8d4      	bhi.n	8000a4a <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <Send+0x110>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <Send+0x118>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d127      	bne.n	8000b04 <Send+0xf0>
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <Send+0x11c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <Send+0x110>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <Send+0x118>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <Send+0x114>)
 8000ad0:	5c9a      	ldrb	r2, [r3, r2]
 8000ad2:	1cfb      	adds	r3, r7, #3
 8000ad4:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <Send+0x118>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	3301      	adds	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <Send+0x118>)
 8000ae2:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <Send+0x118>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aee:	d302      	bcc.n	8000af6 <Send+0xe2>
			Tx_busy = 0;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <Send+0x118>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000af6:	1cfb      	adds	r3, r7, #3
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <Send+0x11c>)
 8000afe:	f004 fedb 	bl	80058b8 <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8000b02:	e005      	b.n	8000b10 <Send+0xfc>

	} else {
		Tx_empty = idx;
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <Send+0x110>)
 8000b0e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b10:	b662      	cpsie	i
}
 8000b12:	bf00      	nop
	}
	__enable_irq();


}
 8000b14:	bf00      	nop
 8000b16:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr
 8000b24:	20000114 	.word	0x20000114
 8000b28:	200001e0 	.word	0x200001e0
 8000b2c:	20000116 	.word	0x20000116
 8000b30:	20000820 	.word	0x20000820

08000b34 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_TxCpltCallback+0x60>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d01d      	beq.n	8000b88 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_UART_TxCpltCallback+0x64>)
 8000b56:	5c9b      	ldrb	r3, [r3, r2]
 8000b58:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b66:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b72:	d302      	bcc.n	8000b7a <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_UART_TxCpltCallback+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8000b7a:	f107 030f 	add.w	r3, r7, #15
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_UART_TxCpltCallback+0x68>)
 8000b84:	f004 fe98 	bl	80058b8 <HAL_UART_Transmit_IT>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000116 	.word	0x20000116
 8000b94:	20000114 	.word	0x20000114
 8000b98:	200001e0 	.word	0x200001e0
 8000b9c:	20000820 	.word	0x20000820

08000ba0 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_UART_RxCpltCallback+0x50>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d11a      	bne.n	8000be8 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_UART_RxCpltCallback+0x54>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_UART_RxCpltCallback+0x54>)
 8000bbe:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_UART_RxCpltCallback+0x54>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bca:	d302      	bcc.n	8000bd2 <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_UART_RxCpltCallback+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_UART_RxCpltCallback+0x54>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_UART_RxCpltCallback+0x58>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	2201      	movs	r2, #1
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_UART_RxCpltCallback+0x5c>)
 8000be4:	f004 fed6 	bl	8005994 <HAL_UART_Receive_IT>


	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40004400 	.word	0x40004400
 8000bf4:	20000110 	.word	0x20000110
 8000bf8:	20000584 	.word	0x20000584
 8000bfc:	20000820 	.word	0x20000820

08000c00 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <uart_ready+0x24>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <uart_ready+0x28>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d101      	bne.n	8000c18 <uart_ready+0x18>
		return 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e000      	b.n	8000c1a <uart_ready+0x1a>
	} else {
		return 1;
 8000c18:	2301      	movs	r3, #1
	}
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000110 	.word	0x20000110
 8000c28:	20000112 	.word	0x20000112

08000c2c <HAL_RTCEx_WakeUpTimerEventCallback>:
void checkNextAlarm(){

}


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]





	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000c34:	2200      	movs	r2, #0
 8000c36:	4910      	ldr	r1, [pc, #64]	; (8000c78 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f003 fe17 	bl	800486c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	490e      	ldr	r1, [pc, #56]	; (8000c7c <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f003 fe7e 	bl	8004944 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	737b      	strb	r3, [r7, #13]


	 //int hour = splitNumber(seconds);
	 if(clock_mode == 1){
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	7bb9      	ldrb	r1, [r7, #14]
 8000c68:	7b7a      	ldrb	r2, [r7, #13]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbcc 	bl	8000408 <displayHour>


	 //hr = &hour;


}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000120 	.word	0x20000120
 8000c7c:	20000134 	.word	0x20000134
 8000c80:	20000078 	.word	0x20000078

08000c84 <parseCommand>:


/* ===== PARSERS ===== */


void parseCommand(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	uint8_t picked_command = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]

	if(strcmp("setMode", command) == 0){
 8000c8e:	493e      	ldr	r1, [pc, #248]	; (8000d88 <parseCommand+0x104>)
 8000c90:	483e      	ldr	r0, [pc, #248]	; (8000d8c <parseCommand+0x108>)
 8000c92:	f7ff faa5 	bl	80001e0 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d106      	bne.n	8000caa <parseCommand+0x26>
		int mode = parseIntData();
 8000c9c:	f000 f8c0 	bl	8000e20 <parseIntData>
 8000ca0:	6038      	str	r0, [r7, #0]
		handleSetClockMode(mode);
 8000ca2:	6838      	ldr	r0, [r7, #0]
 8000ca4:	f000 f8f8 	bl	8000e98 <handleSetClockMode>
 8000ca8:	e063      	b.n	8000d72 <parseCommand+0xee>


	} else if (strcmp("setTime", command) == 0){
 8000caa:	4937      	ldr	r1, [pc, #220]	; (8000d88 <parseCommand+0x104>)
 8000cac:	4838      	ldr	r0, [pc, #224]	; (8000d90 <parseCommand+0x10c>)
 8000cae:	f7ff fa97 	bl	80001e0 <strcmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d112      	bne.n	8000cde <parseCommand+0x5a>
		parseTime();
 8000cb8:	f000 f884 	bl	8000dc4 <parseTime>
		resetPins();
 8000cbc:	f7ff fc80 	bl	80005c0 <resetPins>

		setTime(hour_to_show, minute_to_show, second_to_show);
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <parseCommand+0x110>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <parseCommand+0x114>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <parseCommand+0x118>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f7ff fb70 	bl	80003bc <setTime>
 8000cdc:	e049      	b.n	8000d72 <parseCommand+0xee>


	} else if (strcmp("getTime", command) == 0) {
 8000cde:	492a      	ldr	r1, [pc, #168]	; (8000d88 <parseCommand+0x104>)
 8000ce0:	482f      	ldr	r0, [pc, #188]	; (8000da0 <parseCommand+0x11c>)
 8000ce2:	f7ff fa7d 	bl	80001e0 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10b      	bne.n	8000d04 <parseCommand+0x80>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <parseCommand+0x120>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <parseCommand+0x120>)
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <parseCommand+0x120>)
 8000cfa:	789b      	ldrb	r3, [r3, #2]
 8000cfc:	482a      	ldr	r0, [pc, #168]	; (8000da8 <parseCommand+0x124>)
 8000cfe:	f7ff fe89 	bl	8000a14 <Send>
 8000d02:	e036      	b.n	8000d72 <parseCommand+0xee>

	}else if(strcmp("setAlarm", command) == 0){
 8000d04:	4920      	ldr	r1, [pc, #128]	; (8000d88 <parseCommand+0x104>)
 8000d06:	4829      	ldr	r0, [pc, #164]	; (8000dac <parseCommand+0x128>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strcmp>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d02f      	beq.n	8000d72 <parseCommand+0xee>



	} else if(strcmp("getAlarms", command) == 0){
 8000d12:	491d      	ldr	r1, [pc, #116]	; (8000d88 <parseCommand+0x104>)
 8000d14:	4826      	ldr	r0, [pc, #152]	; (8000db0 <parseCommand+0x12c>)
 8000d16:	f7ff fa63 	bl	80001e0 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d028      	beq.n	8000d72 <parseCommand+0xee>



	} else if (strcmp("getAlarmsCount", command) == 0){
 8000d20:	4919      	ldr	r1, [pc, #100]	; (8000d88 <parseCommand+0x104>)
 8000d22:	4824      	ldr	r0, [pc, #144]	; (8000db4 <parseCommand+0x130>)
 8000d24:	f7ff fa5c 	bl	80001e0 <strcmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d021      	beq.n	8000d72 <parseCommand+0xee>



	} else if (strcmp("resetAlarms", command) == 0){
 8000d2e:	4916      	ldr	r1, [pc, #88]	; (8000d88 <parseCommand+0x104>)
 8000d30:	4821      	ldr	r0, [pc, #132]	; (8000db8 <parseCommand+0x134>)
 8000d32:	f7ff fa55 	bl	80001e0 <strcmp>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01a      	beq.n	8000d72 <parseCommand+0xee>



	} else if (strcmp("showHour", command) == 0){
 8000d3c:	4912      	ldr	r1, [pc, #72]	; (8000d88 <parseCommand+0x104>)
 8000d3e:	481f      	ldr	r0, [pc, #124]	; (8000dbc <parseCommand+0x138>)
 8000d40:	f7ff fa4e 	bl	80001e0 <strcmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d110      	bne.n	8000d6c <parseCommand+0xe8>
		parseTime();
 8000d4a:	f000 f83b 	bl	8000dc4 <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <parseCommand+0x110>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <parseCommand+0x114>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <parseCommand+0x118>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	f000 f8b5 	bl	8000ed4 <handleShowHour>
 8000d6a:	e002      	b.n	8000d72 <parseCommand+0xee>

	}
	else {
		sendFail(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fa57 	bl	8001220 <sendFail>
	}

	//handle picked command

	clearCommand();
 8000d72:	f000 f871 	bl	8000e58 <clearCommand>
	clearData();
 8000d76:	f000 f87f 	bl	8000e78 <clearData>
	Frame_busy = 0;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <parseCommand+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000015c 	.word	0x2000015c
 8000d8c:	08008cf4 	.word	0x08008cf4
 8000d90:	08008cfc 	.word	0x08008cfc
 8000d94:	20000138 	.word	0x20000138
 8000d98:	20000139 	.word	0x20000139
 8000d9c:	2000013a 	.word	0x2000013a
 8000da0:	08008d04 	.word	0x08008d04
 8000da4:	20000120 	.word	0x20000120
 8000da8:	08008d0c 	.word	0x08008d0c
 8000dac:	08008d2c 	.word	0x08008d2c
 8000db0:	08008d38 	.word	0x08008d38
 8000db4:	08008d44 	.word	0x08008d44
 8000db8:	08008d54 	.word	0x08008d54
 8000dbc:	08008d60 	.word	0x08008d60
 8000dc0:	20000118 	.word	0x20000118

08000dc4 <parseTime>:
void parseData(){


}

void parseTime(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <parseTime+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <parseTime+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <parseTime+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%2.2u:%2.2u:%2.2u", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <parseTime+0x4c>)
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <parseTime+0x48>)
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <parseTime+0x44>)
 8000de4:	490b      	ldr	r1, [pc, #44]	; (8000e14 <parseTime+0x50>)
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <parseTime+0x54>)
 8000de8:	f006 f992 	bl	8007110 <siscanf>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d103      	bne.n	8000dfa <parseTime+0x36>
		 Send("$Success=1#\r\n");
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <parseTime+0x58>)
 8000df4:	f7ff fe0e 	bl	8000a14 <Send>

	 } else {
		 sendFail(4);
	 }
}
 8000df8:	e002      	b.n	8000e00 <parseTime+0x3c>
		 sendFail(4);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f000 fa10 	bl	8001220 <sendFail>
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000138 	.word	0x20000138
 8000e0c:	20000139 	.word	0x20000139
 8000e10:	2000013a 	.word	0x2000013a
 8000e14:	08008d6c 	.word	0x08008d6c
 8000e18:	20000400 	.word	0x20000400
 8000e1c:	08008d80 	.word	0x08008d80

08000e20 <parseIntData>:



int parseIntData(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	int single_param = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <parseIntData+0x30>)
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <parseIntData+0x34>)
 8000e32:	f006 f96d 	bl	8007110 <siscanf>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d101      	bne.n	8000e40 <parseIntData+0x20>
		return single_param;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	e002      	b.n	8000e46 <parseIntData+0x26>
	}
	else {
		sendFail(2);
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 f9ed 	bl	8001220 <sendFail>
	}


}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08008d90 	.word	0x08008d90
 8000e54:	20000400 	.word	0x20000400

08000e58 <clearCommand>:


/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	command_busy = 0;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <clearCommand+0x18>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	2100      	movs	r1, #0
 8000e66:	4803      	ldr	r0, [pc, #12]	; (8000e74 <clearCommand+0x1c>)
 8000e68:	f006 f932 	bl	80070d0 <memset>

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000011d 	.word	0x2000011d
 8000e74:	2000015c 	.word	0x2000015c

08000e78 <clearData>:

void clearData(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	data_busy = 0;
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <clearData+0x18>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8000e82:	227d      	movs	r2, #125	; 0x7d
 8000e84:	2100      	movs	r1, #0
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <clearData+0x1c>)
 8000e88:	f006 f922 	bl	80070d0 <memset>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000011e 	.word	0x2000011e
 8000e94:	20000400 	.word	0x20000400

08000e98 <handleSetClockMode>:


/* ===== HANDLERS FOR SPECIFIC COMMANDS ====== */


void handleSetClockMode(int mode){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d002      	beq.n	8000eac <handleSetClockMode+0x14>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d107      	bne.n	8000ebc <handleSetClockMode+0x24>

			clock_mode = mode;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <handleSetClockMode+0x34>)
 8000eb2:	701a      	strb	r2, [r3, #0]
			Send("$Success=1#\r\n");
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <handleSetClockMode+0x38>)
 8000eb6:	f7ff fdad 	bl	8000a14 <Send>
 8000eba:	e003      	b.n	8000ec4 <handleSetClockMode+0x2c>

		}else {
				sendFail(4);
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f000 f9af 	bl	8001220 <sendFail>
		}


}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	08008d80 	.word	0x08008d80

08000ed4 <handleShowHour>:

void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000ee6:	f7ff fb6b 	bl	80005c0 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <handleShowHour+0x36>
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b16      	cmp	r3, #22
 8000ef4:	d809      	bhi.n	8000f0a <handleShowHour+0x36>
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	2b3b      	cmp	r3, #59	; 0x3b
 8000efa:	d806      	bhi.n	8000f0a <handleShowHour+0x36>
 8000efc:	797b      	ldrb	r3, [r7, #5]
 8000efe:	2b3b      	cmp	r3, #59	; 0x3b
 8000f00:	d803      	bhi.n	8000f0a <handleShowHour+0x36>

			 hour_displayed = 0;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <handleShowHour+0x48>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e003      	b.n	8000f12 <handleShowHour+0x3e>


			} else {
				sendFail(4);
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f000 f988 	bl	8001220 <sendFail>
			}




}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000011f 	.word	0x2000011f

08000f20 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 8000f32:	2300      	movs	r3, #0
 8000f34:	757b      	strb	r3, [r7, #21]


	//check if begining exists
	if(frame[0] == start_sign){
 8000f36:	4b50      	ldr	r3, [pc, #320]	; (8001078 <decodeFrame+0x158>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b24      	cmp	r3, #36	; 0x24
 8000f3c:	d105      	bne.n	8000f4a <decodeFrame+0x2a>
		required_pass++;
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	3301      	adds	r3, #1
 8000f42:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8000f44:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <decodeFrame+0x158>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <decodeFrame+0x15c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	4a49      	ldr	r2, [pc, #292]	; (8001078 <decodeFrame+0x158>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	2b23      	cmp	r3, #35	; 0x23
 8000f58:	d109      	bne.n	8000f6e <decodeFrame+0x4e>
		required_pass++;
 8000f5a:	7d7b      	ldrb	r3, [r7, #21]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <decodeFrame+0x15c>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a43      	ldr	r2, [pc, #268]	; (8001078 <decodeFrame+0x158>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	e013      	b.n	8000f9c <decodeFrame+0x7c>
		if(frame[i] == '='){
 8000f74:	4a40      	ldr	r2, [pc, #256]	; (8001078 <decodeFrame+0x158>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b3d      	cmp	r3, #61	; 0x3d
 8000f7e:	d10a      	bne.n	8000f96 <decodeFrame+0x76>
			required_pass++;
 8000f80:	7d7b      	ldrb	r3, [r7, #21]
 8000f82:	3301      	adds	r3, #1
 8000f84:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <decodeFrame+0x15c>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbe4      	blt.n	8000f74 <decodeFrame+0x54>


   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d12b      	bne.n	8001008 <decodeFrame+0xe8>
 8000fb0:	7dba      	ldrb	r2, [r7, #22]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d027      	beq.n	8001008 <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e020      	b.n	8001000 <decodeFrame+0xe0>
			//prevent memory leaks
			if(command_busy >= command_size){
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <decodeFrame+0x160>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da09      	bge.n	8000fde <decodeFrame+0xbe>
				command_busy = 0;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <decodeFrame+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	482b      	ldr	r0, [pc, #172]	; (8001084 <decodeFrame+0x164>)
 8000fd6:	f006 f87b 	bl	80070d0 <memset>
				i = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <decodeFrame+0x160>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	b2d1      	uxtb	r1, r2
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <decodeFrame+0x160>)
 8000fea:	7011      	strb	r1, [r2, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <decodeFrame+0x158>)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <decodeFrame+0x164>)
 8000ff8:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	7dbb      	ldrb	r3, [r7, #22]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	ddda      	ble.n	8000fbe <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d130      	bne.n	8001070 <decodeFrame+0x150>
 800100e:	7dfa      	ldrb	r2, [r7, #23]
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <decodeFrame+0x15c>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	429a      	cmp	r2, r3
 800101a:	d029      	beq.n	8001070 <decodeFrame+0x150>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	e01f      	b.n	8001062 <decodeFrame+0x142>
			//prevent memory leaks
			if(data_busy >= data_size){
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <decodeFrame+0x168>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b7c      	cmp	r3, #124	; 0x7c
 800102a:	d909      	bls.n	8001040 <decodeFrame+0x120>
				data_busy = 0;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <decodeFrame+0x168>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 8001032:	227d      	movs	r2, #125	; 0x7d
 8001034:	2100      	movs	r1, #0
 8001036:	4815      	ldr	r0, [pc, #84]	; (800108c <decodeFrame+0x16c>)
 8001038:	f006 f84a 	bl	80070d0 <memset>
				i = data_idx;
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <decodeFrame+0x168>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d1      	uxtb	r1, r2
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <decodeFrame+0x168>)
 800104c:	7011      	strb	r1, [r2, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <decodeFrame+0x158>)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <decodeFrame+0x16c>)
 800105a:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <decodeFrame+0x15c>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4293      	cmp	r3, r2
 800106e:	dbd8      	blt.n	8001022 <decodeFrame+0x102>
		}

	}


}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000480 	.word	0x20000480
 800107c:	2000011a 	.word	0x2000011a
 8001080:	2000011d 	.word	0x2000011d
 8001084:	2000015c 	.word	0x2000015c
 8001088:	2000011e 	.word	0x2000011e
 800108c:	20000400 	.word	0x20000400

08001090 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <downloadFrame+0xec>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <downloadFrame+0xf0>)
 80010a0:	5c9b      	ldrb	r3, [r3, r2]
 80010a2:	71fb      	strb	r3, [r7, #7]
	char temp_byte = Rx_buff[Rx_busy - 1];
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <downloadFrame+0xec>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <downloadFrame+0xf0>)
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
 80010b0:	71bb      	strb	r3, [r7, #6]

	//control ringbuffer
	Rx_busy++;
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <downloadFrame+0xec>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <downloadFrame+0xec>)
 80010be:	801a      	strh	r2, [r3, #0]

	if(Rx_busy >= RX_BUFF_SIZE){
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <downloadFrame+0xec>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ca:	d302      	bcc.n	80010d2 <downloadFrame+0x42>
		Rx_busy = 0;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <downloadFrame+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
	}


		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b24      	cmp	r3, #36	; 0x24
 80010d6:	d10b      	bne.n	80010f0 <downloadFrame+0x60>
			memset(frame, 0x00, FRAME_SIZE); //reset frame
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	2100      	movs	r1, #0
 80010de:	4829      	ldr	r0, [pc, #164]	; (8001184 <downloadFrame+0xf4>)
 80010e0:	f005 fff6 	bl	80070d0 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <downloadFrame+0xf8>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0x00;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <downloadFrame+0xfc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]

		}
		//if frame found start downloading frame
		if(frame_found == 1){
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <downloadFrame+0xf8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d111      	bne.n	800111c <downloadFrame+0x8c>
			frameLength++;
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <downloadFrame+0x100>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <downloadFrame+0x100>)
 8001104:	801a      	strh	r2, [r3, #0]


			}

			//copy a frame to analyze it
			frame[Frame_busy++] = byte; //download chars
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <downloadFrame+0xfc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	b291      	uxth	r1, r2
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <downloadFrame+0xfc>)
 8001112:	8011      	strh	r1, [r2, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <downloadFrame+0xf4>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	5453      	strb	r3, [r2, r1]



		//check if frame is not too long

		if(frameLength > FRAME_SIZE){
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <downloadFrame+0x100>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001126:	d911      	bls.n	800114c <downloadFrame+0xbc>
			memset(frame, 0x00, FRAME_SIZE);
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	2100      	movs	r1, #0
 800112e:	4815      	ldr	r0, [pc, #84]	; (8001184 <downloadFrame+0xf4>)
 8001130:	f005 ffce 	bl	80070d0 <memset>
			Frame_busy = 0;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <downloadFrame+0xfc>)
 8001136:	2200      	movs	r2, #0
 8001138:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <downloadFrame+0x100>)
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <downloadFrame+0xf8>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 8001146:	2004      	movs	r0, #4
 8001148:	f000 f86a 	bl	8001220 <sendFail>
		//check if its actually a frame
		//todo


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b23      	cmp	r3, #35	; 0x23
 8001150:	d110      	bne.n	8001174 <downloadFrame+0xe4>
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <downloadFrame+0xf8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10c      	bne.n	8001174 <downloadFrame+0xe4>
			frame_found = 0; //stop downloading chars
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <downloadFrame+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <downloadFrame+0xfc>)
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]


		  //if frame is received, analyze it
			decodeFrame();
 8001166:	f7ff fedb 	bl	8000f20 <decodeFrame>
			parseCommand();
 800116a:	f7ff fd8b 	bl	8000c84 <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <downloadFrame+0x100>)
 8001170:	2200      	movs	r2, #0
 8001172:	801a      	strh	r2, [r3, #0]





}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000112 	.word	0x20000112
 8001180:	20000584 	.word	0x20000584
 8001184:	20000480 	.word	0x20000480
 8001188:	2000011c 	.word	0x2000011c
 800118c:	20000118 	.word	0x20000118
 8001190:	2000011a 	.word	0x2000011a

08001194 <buttonHandler>:





void buttonHandler() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <buttonHandler+0x7c>)
 800119e:	f001 f91f 	bl	80023e0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d113      	bne.n	80011d0 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <buttonHandler+0x80>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <buttonHandler+0x80>)
 80011ba:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <buttonHandler+0x84>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <buttonHandler+0x88>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 80011c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011cc:	f000 fcc0 	bl	8001b50 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <buttonHandler+0x80>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10c      	bne.n	80011f2 <buttonHandler+0x5e>
			  if(x1hz == 1){
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <buttonHandler+0x84>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d114      	bne.n	800120a <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 80011e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <buttonHandler+0x7c>)
 80011e6:	f001 f951 	bl	800248c <HAL_GPIO_TogglePin>
				  x1hz = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <buttonHandler+0x84>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 80011f0:	e00b      	b.n	800120a <buttonHandler+0x76>
			  if(x4hz == 1){
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <buttonHandler+0x88>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <buttonHandler+0x7c>)
 8001200:	f001 f944 	bl	800248c <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <buttonHandler+0x88>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000800 	.word	0x48000800
 8001214:	2000010e 	.word	0x2000010e
 8001218:	2000010c 	.word	0x2000010c
 800121c:	2000010d 	.word	0x2000010d

08001220 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4619      	mov	r1, r3
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <sendFail+0x1c>)
 8001230:	f7ff fbf0 	bl	8000a14 <Send>



}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08008d94 	.word	0x08008d94

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 8001246:	f7ff fbbd 	bl	80009c4 <UART_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fc1b 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f89f 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f7ff fa29 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001256:	f000 fb71 	bl	800193c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800125a:	f000 fabf 	bl	80017dc <MX_TIM6_Init>
  MX_TIM7_Init();
 800125e:	f000 faf5 	bl	800184c <MX_TIM7_Init>
  MX_RTC_Init();
 8001262:	f000 f90b 	bl	800147c <MX_RTC_Init>
  /* ===== RTC set time ==== */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

//setTime(sTime, 17, 26, 0);
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001266:	4839      	ldr	r0, [pc, #228]	; (800134c <main+0x10c>)
 8001268:	f003 fd2e 	bl	8004cc8 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800126c:	2200      	movs	r2, #0
 800126e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001272:	4836      	ldr	r0, [pc, #216]	; (800134c <main+0x10c>)
 8001274:	f003 fc52 	bl	8004b1c <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <main+0x110>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <main+0x114>)
 8001282:	4413      	add	r3, r2
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	4833      	ldr	r0, [pc, #204]	; (8001358 <main+0x118>)
 800128a:	f004 fb83 	bl	8005994 <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <main+0x11c>)
 8001290:	f7ff fbc0 	bl	8000a14 <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001294:	4832      	ldr	r0, [pc, #200]	; (8001360 <main+0x120>)
 8001296:	f003 fe75 	bl	8004f84 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <main+0x120>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <main+0x124>)
 80012a2:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <main+0x128>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d116      	bne.n	80012dc <main+0x9c>
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <main+0x12c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d112      	bne.n	80012dc <main+0x9c>
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <main+0x130>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <main+0x9c>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <main+0x130>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <main+0x134>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <main+0x138>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	f7ff f896 	bl	8000408 <displayHour>
	   }


	 buttonHandler();
 80012dc:	f7ff ff5a 	bl	8001194 <buttonHandler>


	 while(uart_ready()){
 80012e0:	e001      	b.n	80012e6 <main+0xa6>
		 //downloadCmd();
		 downloadFrame();
 80012e2:	f7ff fed5 	bl	8001090 <downloadFrame>
	 while(uart_ready()){
 80012e6:	f7ff fc8b 	bl	8000c00 <uart_ready>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f8      	bne.n	80012e2 <main+0xa2>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <main+0x13c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <main+0xc0>
		 handleBlinkCommand();
 80012fa:	f7ff fb27 	bl	800094c <handleBlinkCommand>
 80012fe:	e018      	b.n	8001332 <main+0xf2>
	 } else if(blink_mode == 2){
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <main+0x13c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d113      	bne.n	8001332 <main+0xf2>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <main+0x120>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <main+0x124>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <main+0x140>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	b292      	uxth	r2, r2
 800131c:	4293      	cmp	r3, r2
 800131e:	d308      	bcc.n	8001332 <main+0xf2>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <main+0x144>)
 8001324:	f001 f8b2 	bl	800248c <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <main+0x120>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <main+0x124>)
 8001330:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <main+0x148>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d1b3      	bne.n	80012a4 <main+0x64>


		 delayMs(delayTime);
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <main+0x14c>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff faea 	bl	800091c <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001348:	e7ac      	b.n	80012a4 <main+0x64>
 800134a:	bf00      	nop
 800134c:	200003e0 	.word	0x200003e0
 8001350:	20000110 	.word	0x20000110
 8001354:	20000584 	.word	0x20000584
 8001358:	20000820 	.word	0x20000820
 800135c:	08008db8 	.word	0x08008db8
 8001360:	20000788 	.word	0x20000788
 8001364:	20000140 	.word	0x20000140
 8001368:	20000078 	.word	0x20000078
 800136c:	2000011f 	.word	0x2000011f
 8001370:	20000138 	.word	0x20000138
 8001374:	20000139 	.word	0x20000139
 8001378:	2000013a 	.word	0x2000013a
 800137c:	2000013b 	.word	0x2000013b
 8001380:	200001dc 	.word	0x200001dc
 8001384:	48000800 	.word	0x48000800
 8001388:	20000144 	.word	0x20000144
 800138c:	20000146 	.word	0x20000146

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0a6      	sub	sp, #152	; 0x98
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 fe96 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2258      	movs	r2, #88	; 0x58
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 fe88 	bl	80070d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013c0:	230a      	movs	r3, #10
 80013c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 f895 	bl	8002524 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001400:	f000 f82c 	bl	800145c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800141e:	2102      	movs	r1, #2
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f8f1 	bl	8003608 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800142c:	f000 f816 	bl	800145c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <SystemClock_Config+0xc8>)
 8001432:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fbbb 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800144c:	f000 f806 	bl	800145c <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3798      	adds	r7, #152	; 0x98
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	00010002 	.word	0x00010002

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>

08001466 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_RTC_Init+0x70>)
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <MX_RTC_Init+0x74>)
 8001498:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_RTC_Init+0x70>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_RTC_Init+0x70>)
 80014a2:	227f      	movs	r2, #127	; 0x7f
 80014a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_RTC_Init+0x70>)
 80014a8:	22ff      	movs	r2, #255	; 0xff
 80014aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_RTC_Init+0x70>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_RTC_Init+0x70>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_RTC_Init+0x70>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <MX_RTC_Init+0x70>)
 80014c0:	f002 ff74 	bl	80043ac <HAL_RTC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80014ca:	f7ff ffc7 	bl	800145c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_RTC_Init+0x70>)
 80014d6:	f003 f9c9 	bl	800486c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <MX_RTC_Init+0x70>)
 80014e2:	f003 fa2f 	bl	8004944 <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200003e0 	.word	0x200003e0
 80014f0:	40002800 	.word	0x40002800

080014f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_RTC_MspInit+0x50>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d119      	bne.n	800153a <HAL_RTC_MspInit+0x46>
 8001506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800150a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001514:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RTC_MspInit+0x54>)
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	2301      	movs	r3, #1
 8001528:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2003      	movs	r0, #3
 8001530:	f000 fc22 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 fc4b 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40002800 	.word	0x40002800
 8001548:	10908100 	.word	0x10908100

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x44>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x44>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f000 fbd8 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 80015e0:	f7ff f948 	bl	8000874 <delay_1hz>
	delay_4hz();
 80015e4:	f7ff f962 	bl	80008ac <delay_4hz>

	if(blink_mode == 1){
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <SysTick_Handler+0x2c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <SysTick_Handler+0x22>
		led_delay++;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SysTick_Handler+0x30>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Handler+0x30>)
 80015fc:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 fa87 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000013b 	.word	0x2000013b
 800160c:	20000148 	.word	0x20000148

08001610 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <RTC_WKUP_IRQHandler+0x10>)
 8001616:	f003 fbaf 	bl	8004d78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003e0 	.word	0x200003e0

08001624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <USART2_IRQHandler+0x10>)
 800162a:	f004 fa01 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000820 	.word	0x20000820

08001638 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800163c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001640:	f000 ff4c 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM6_DAC_IRQHandler+0x10>)
 800164e:	f003 fd45 	bl	80050dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000788 	.word	0x20000788

0800165c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM7_IRQHandler+0x10>)
 8001662:	f003 fd3b 	bl	80050dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200007d4 	.word	0x200007d4

08001670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00a      	b.n	8001698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001682:	f3af 8000 	nop.w
 8001686:	4601      	mov	r1, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf0      	blt.n	8001682 <_read+0x12>
	}

return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e009      	b.n	80016d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf1      	blt.n	80016bc <_write+0x12>
	}
	return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170a:	605a      	str	r2, [r3, #4]
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f005 fc7e 	bl	800707c <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20010000 	.word	0x20010000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	2000014c 	.word	0x2000014c
 80017b4:	200008b8 	.word	0x200008b8

080017b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM6_Init+0x68>)
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <MX_TIM6_Init+0x6c>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_TIM6_Init+0x68>)
 80017f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80017f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_TIM6_Init+0x68>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_TIM6_Init+0x68>)
 8001802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001806:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_TIM6_Init+0x68>)
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_TIM6_Init+0x68>)
 8001810:	f003 fad6 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800181a:	f7ff fe1f 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_TIM6_Init+0x68>)
 800182c:	f003 fe46 	bl	80054bc <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001836:	f7ff fe11 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000788 	.word	0x20000788
 8001848:	40001000 	.word	0x40001000

0800184c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_TIM7_Init+0x64>)
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_TIM7_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001864:	2247      	movs	r2, #71	; 0x47
 8001866:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_TIM7_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_TIM7_Init+0x64>)
 800187e:	f003 fa9f 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001888:	f7ff fde8 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_TIM7_Init+0x64>)
 800189a:	f003 fe0f 	bl	80054bc <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f7ff fdda 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200007d4 	.word	0x200007d4
 80018b4:	40001400 	.word	0x40001400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_TIM_Base_MspInit+0x78>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d114      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a19      	ldr	r2, [pc, #100]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2036      	movs	r0, #54	; 0x36
 80018e8:	f000 fa46 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ec:	2036      	movs	r0, #54	; 0x36
 80018ee:	f000 fa6f 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80018f2:	e018      	b.n	8001926 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_TIM_Base_MspInit+0x80>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d113      	bne.n	8001926 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_TIM_Base_MspInit+0x7c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2037      	movs	r0, #55	; 0x37
 800191c:	f000 fa2c 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001920:	2037      	movs	r0, #55	; 0x37
 8001922:	f000 fa55 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40001000 	.word	0x40001000
 8001934:	40021000 	.word	0x40021000
 8001938:	40001400 	.word	0x40001400

0800193c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <MX_USART2_UART_Init+0x5c>)
 8001944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART2_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART2_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART2_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART2_UART_Init+0x58>)
 8001980:	f003 ff08 	bl	8005794 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800198a:	f7ff fd67 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000820 	.word	0x20000820
 8001998:	40004400 	.word	0x40004400

0800199c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <HAL_UART_MspInit+0x8c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d130      	bne.n	8001a20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_UART_MspInit+0x90>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ee:	230c      	movs	r3, #12
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fe:	2307      	movs	r3, #7
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f000 fa7c 	bl	8001f08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2026      	movs	r0, #38	; 0x26
 8001a16:	f000 f9af 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a1a:	2026      	movs	r0, #38	; 0x26
 8001a1c:	f000 f9d8 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40004400 	.word	0x40004400
 8001a2c:	40021000 	.word	0x40021000

08001a30 <Reset_Handler>:
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopForever+0x2>
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopForever+0x6>)
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopForever+0xa>)
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopForever+0xe>)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:
 8001a3e:	58d4      	ldr	r4, [r2, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:
 8001a44:	18c4      	adds	r4, r0, r3
 8001a46:	428c      	cmp	r4, r1
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopForever+0x12>)
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopForever+0x16>)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:
 8001a56:	42a2      	cmp	r2, r4
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>
 8001a5a:	f7ff fead 	bl	80017b8 <SystemInit>
 8001a5e:	f005 fb13 	bl	8007088 <__libc_init_array>
 8001a62:	f7ff fbed 	bl	8001240 <main>

08001a66 <LoopForever>:
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
 8001a68:	20010000 	.word	0x20010000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200000ec 	.word	0x200000ec
 8001a74:	08009208 	.word	0x08009208
 8001a78:	200000ec 	.word	0x200000ec
 8001a7c:	200008b8 	.word	0x200008b8

08001a80 <ADC1_2_IRQHandler>:
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f94f 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fd54 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f996 	bl	8001e00 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aec:	f000 f944 	bl	8001d78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000007c 	.word	0x2000007c
 8001b08:	20000084 	.word	0x20000084
 8001b0c:	20000080 	.word	0x20000080

08001b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000084 	.word	0x20000084
 8001b34:	200008a4 	.word	0x200008a4

08001b38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200008a4 	.word	0x200008a4

08001b50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000084 	.word	0x20000084

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	d00f      	beq.n	8001d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d00c      	beq.n	8001d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d009      	beq.n	8001d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d006      	beq.n	8001d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d003      	beq.n	8001d66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d5e:	21ac      	movs	r1, #172	; 0xac
 8001d60:	4804      	ldr	r0, [pc, #16]	; (8001d74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d62:	f7ff fb80 	bl	8001466 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff16 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08008dd8 	.word	0x08008dd8

08001d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d903      	bls.n	8001d98 <HAL_NVIC_SetPriority+0x20>
 8001d90:	21c4      	movs	r1, #196	; 0xc4
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <HAL_NVIC_SetPriority+0x54>)
 8001d94:	f7ff fb67 	bl	8001466 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d903      	bls.n	8001da6 <HAL_NVIC_SetPriority+0x2e>
 8001d9e:	21c5      	movs	r1, #197	; 0xc5
 8001da0:	480a      	ldr	r0, [pc, #40]	; (8001dcc <HAL_NVIC_SetPriority+0x54>)
 8001da2:	f7ff fb60 	bl	8001466 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da6:	f7ff ff1b 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7ff ff6b 	bl	8001c8c <NVIC_EncodePriority>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff3a 	bl	8001c38 <__NVIC_SetPriority>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08008dd8 	.word	0x08008dd8

08001dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da03      	bge.n	8001dea <HAL_NVIC_EnableIRQ+0x1a>
 8001de2:	21d8      	movs	r1, #216	; 0xd8
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_NVIC_EnableIRQ+0x2c>)
 8001de6:	f7ff fb3e 	bl	8001466 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff04 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	08008dd8 	.word	0x08008dd8

08001e00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff73 	bl	8001cf4 <SysTick_Config>
 8001e0e:	4603      	mov	r3, r0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d008      	beq.n	8001e3c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e020      	b.n	8001e7e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 020e 	bic.w	r2, r2, #14
 8001e4a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d005      	beq.n	8001eac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e027      	b.n	8001efc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    } 
  }
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f1c:	d01f      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_GPIO_Init+0x104>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01b      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a39      	ldr	r2, [pc, #228]	; (8002010 <HAL_GPIO_Init+0x108>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d017      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_GPIO_Init+0x10c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_GPIO_Init+0x110>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a36      	ldr	r2, [pc, #216]	; (800201c <HAL_GPIO_Init+0x114>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a35      	ldr	r2, [pc, #212]	; (8002020 <HAL_GPIO_Init+0x118>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_GPIO_Init+0x11c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x56>
 8001f56:	21b2      	movs	r1, #178	; 0xb2
 8001f58:	4833      	ldr	r0, [pc, #204]	; (8002028 <HAL_GPIO_Init+0x120>)
 8001f5a:	f7ff fa84 	bl	8001466 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x6c>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0c1b      	lsrs	r3, r3, #16
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x74>
 8001f74:	21b3      	movs	r1, #179	; 0xb3
 8001f76:	482c      	ldr	r0, [pc, #176]	; (8002028 <HAL_GPIO_Init+0x120>)
 8001f78:	f7ff fa75 	bl	8001466 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 821c 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	f000 8217 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b11      	cmp	r3, #17
 8001f96:	f000 8212 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	f000 820d 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b12      	cmp	r3, #18
 8001faa:	f000 8208 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fb6:	f000 8202 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fc2:	f000 81fc 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fce:	f000 81f6 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fda:	f000 81f0 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001fe6:	f000 81ea 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001ff2:	f000 81e4 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	f000 81df 	beq.w	80023be <HAL_GPIO_Init+0x4b6>
 8002000:	21b4      	movs	r1, #180	; 0xb4
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <HAL_GPIO_Init+0x120>)
 8002004:	f7ff fa2f 	bl	8001466 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	e1d9      	b.n	80023be <HAL_GPIO_Init+0x4b6>
 800200a:	bf00      	nop
 800200c:	48000400 	.word	0x48000400
 8002010:	48000800 	.word	0x48000800
 8002014:	48000c00 	.word	0x48000c00
 8002018:	48001000 	.word	0x48001000
 800201c:	48001400 	.word	0x48001400
 8002020:	48001800 	.word	0x48001800
 8002024:	48001c00 	.word	0x48001c00
 8002028:	08008e14 	.word	0x08008e14
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 81ba 	beq.w	80023b8 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x154>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d140      	bne.n	80020de <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_GPIO_Init+0x174>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x174>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x174>
 8002074:	21c3      	movs	r1, #195	; 0xc3
 8002076:	4894      	ldr	r0, [pc, #592]	; (80022c8 <HAL_GPIO_Init+0x3c0>)
 8002078:	f7ff f9f5 	bl	8001466 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d027      	beq.n	800213a <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_GPIO_Init+0x202>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x202>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x202>
 8002102:	21d4      	movs	r1, #212	; 0xd4
 8002104:	4870      	ldr	r0, [pc, #448]	; (80022c8 <HAL_GPIO_Init+0x3c0>)
 8002106:	f7ff f9ae 	bl	8001466 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d157      	bne.n	80021f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x286>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_GPIO_Init+0x3c4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <HAL_GPIO_Init+0x286>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_GPIO_Init+0x3c8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d017      	beq.n	800218e <HAL_GPIO_Init+0x286>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <HAL_GPIO_Init+0x3cc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x286>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <HAL_GPIO_Init+0x3d0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <HAL_GPIO_Init+0x286>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a5a      	ldr	r2, [pc, #360]	; (80022dc <HAL_GPIO_Init+0x3d4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <HAL_GPIO_Init+0x286>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a59      	ldr	r2, [pc, #356]	; (80022e0 <HAL_GPIO_Init+0x3d8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x286>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_GPIO_Init+0x3dc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x286>
 8002186:	21e2      	movs	r1, #226	; 0xe2
 8002188:	484f      	ldr	r0, [pc, #316]	; (80022c8 <HAL_GPIO_Init+0x3c0>)
 800218a:	f7ff f96c 	bl	8001466 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d90b      	bls.n	80021ae <HAL_GPIO_Init+0x2a6>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b0e      	cmp	r3, #14
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x2a6>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2a6>
 80021a6:	21e3      	movs	r1, #227	; 0xe3
 80021a8:	4847      	ldr	r0, [pc, #284]	; (80022c8 <HAL_GPIO_Init+0x3c0>)
 80021aa:	f7ff f95c 	bl	8001466 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0203 	and.w	r2, r3, #3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80c0 	beq.w	80023b8 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_GPIO_Init+0x3e0>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_GPIO_Init+0x3e0>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x3e0>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x3e4>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800227a:	d039      	beq.n	80022f0 <HAL_GPIO_Init+0x3e8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_GPIO_Init+0x3c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01f      	beq.n	80022c4 <HAL_GPIO_Init+0x3bc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x3c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d019      	beq.n	80022c0 <HAL_GPIO_Init+0x3b8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_GPIO_Init+0x3cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_GPIO_Init+0x3b4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_GPIO_Init+0x3d0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00d      	beq.n	80022b8 <HAL_GPIO_Init+0x3b0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_GPIO_Init+0x3d4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0x3ac>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_GPIO_Init+0x3d8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_GPIO_Init+0x3a8>
 80022ac:	2306      	movs	r3, #6
 80022ae:	e020      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022b0:	2307      	movs	r3, #7
 80022b2:	e01e      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022b4:	2305      	movs	r3, #5
 80022b6:	e01c      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e01a      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022bc:	2303      	movs	r3, #3
 80022be:	e018      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e016      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e014      	b.n	80022f2 <HAL_GPIO_Init+0x3ea>
 80022c8:	08008e14 	.word	0x08008e14
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	48001000 	.word	0x48001000
 80022dc:	48001400 	.word	0x48001400
 80022e0:	48001800 	.word	0x48001800
 80022e4:	48001c00 	.word	0x48001c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	2300      	movs	r3, #0
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	f002 0203 	and.w	r2, r2, #3
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	4093      	lsls	r3, r2
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002302:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x4d0>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_GPIO_Init+0x4d4>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f ae2f 	bne.w	800202c <HAL_GPIO_Init+0x124>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_GPIO_ReadPin+0x1c>
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_GPIO_ReadPin+0x26>
 80023fc:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <HAL_GPIO_ReadPin+0x48>)
 8002402:	f7ff f830 	bl	8001466 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e001      	b.n	800241c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	08008e14 	.word	0x08008e14

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_GPIO_WritePin+0x20>
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <HAL_GPIO_WritePin+0x2a>
 800244c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <HAL_GPIO_WritePin+0x5c>)
 8002452:	f7ff f808 	bl	8001466 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002456:	787b      	ldrb	r3, [r7, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_GPIO_WritePin+0x40>
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d004      	beq.n	800246c <HAL_GPIO_WritePin+0x40>
 8002462:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002466:	4808      	ldr	r0, [pc, #32]	; (8002488 <HAL_GPIO_WritePin+0x5c>)
 8002468:	f7fe fffd 	bl	8001466 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002478:	e002      	b.n	8002480 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	08008e14 	.word	0x08008e14

0800248c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_GPIO_TogglePin+0x1c>
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_GPIO_TogglePin+0x26>
 80024a8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80024ac:	480a      	ldr	r0, [pc, #40]	; (80024d8 <HAL_GPIO_TogglePin+0x4c>)
 80024ae:	f7fe ffda 	bl	8001466 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b8:	887a      	ldrh	r2, [r7, #2]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	041a      	lsls	r2, r3, #16
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	400b      	ands	r3, r1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	08008e14 	.word	0x08008e14

080024dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f806 	bl	800250c <HAL_GPIO_EXTI_Callback>
  }
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800252a:	af00      	add	r7, sp, #0
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f001 b85e 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_OscConfig+0x66>
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_OscConfig+0x66>
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d112      	bne.n	800258a <HAL_RCC_OscConfig+0x66>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x66>
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_RCC_OscConfig+0x66>
 8002580:	f240 114b 	movw	r1, #331	; 0x14b
 8002584:	48be      	ldr	r0, [pc, #760]	; (8002880 <HAL_RCC_OscConfig+0x35c>)
 8002586:	f7fe ff6e 	bl	8001466 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8178 	beq.w	800288a <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_RCC_OscConfig+0xa2>
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCC_OscConfig+0xa2>
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ba:	d004      	beq.n	80025c6 <HAL_RCC_OscConfig+0xa2>
 80025bc:	f240 1151 	movw	r1, #337	; 0x151
 80025c0:	48af      	ldr	r0, [pc, #700]	; (8002880 <HAL_RCC_OscConfig+0x35c>)
 80025c2:	f7fe ff50 	bl	8001466 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025c6:	4baf      	ldr	r3, [pc, #700]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d00c      	beq.n	80025ec <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d2:	4bac      	ldr	r3, [pc, #688]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d159      	bne.n	8002692 <HAL_RCC_OscConfig+0x16e>
 80025de:	4ba9      	ldr	r3, [pc, #676]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d152      	bne.n	8002692 <HAL_RCC_OscConfig+0x16e>
 80025ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002600:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_RCC_OscConfig+0xfa>
 8002618:	4b9a      	ldr	r3, [pc, #616]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x126>
 800261e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002622:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002636:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800263a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002646:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002652:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002656:	fa92 f2a2 	rbit	r2, r2
 800265a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800265e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8104 	beq.w	8002888 <HAL_RCC_OscConfig+0x364>
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80fe 	bne.w	8002888 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f000 bfb4 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d106      	bne.n	80026ac <HAL_RCC_OscConfig+0x188>
 800269e:	4b79      	ldr	r3, [pc, #484]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a78      	ldr	r2, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e030      	b.n	800270e <HAL_RCC_OscConfig+0x1ea>
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1ac>
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6f      	ldr	r2, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01e      	b.n	800270e <HAL_RCC_OscConfig+0x1ea>
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x1d2>
 80026dc:	4b69      	ldr	r3, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a68      	ldr	r2, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a65      	ldr	r2, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e00b      	b.n	800270e <HAL_RCC_OscConfig+0x1ea>
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a62      	ldr	r2, [pc, #392]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5f      	ldr	r2, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d059      	beq.n	80027cc <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fa0e 	bl	8001b38 <HAL_GetTick>
 800271c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002722:	f7ff fa09 	bl	8001b38 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d902      	bls.n	8002738 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	f000 bf61 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800274c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d102      	bne.n	800276a <HAL_RCC_OscConfig+0x246>
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x272>
 800276a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800276e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800277e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002782:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002786:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800279a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800279e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80027aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ab      	beq.n	8002722 <HAL_RCC_OscConfig+0x1fe>
 80027ca:	e05e      	b.n	800288a <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f9b4 	bl	8001b38 <HAL_GetTick>
 80027d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d6:	f7ff f9af 	bl	8001b38 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d902      	bls.n	80027ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	f000 bf07 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 80027ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002800:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_RCC_OscConfig+0x2fa>
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x326>
 800281e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002822:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002836:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800283a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x360>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800284e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002852:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002856:	fa92 f2a2 	rbit	r2, r2
 800285a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800285e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002862:	fab2 f282 	clz	r2, r2
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f042 0220 	orr.w	r2, r2, #32
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f002 021f 	and.w	r2, r2, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f202 	lsl.w	r2, r1, r2
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ab      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2b2>
 800287e:	e004      	b.n	800288a <HAL_RCC_OscConfig+0x366>
 8002880:	08008e50 	.word	0x08008e50
 8002884:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 818e 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_RCC_OscConfig+0x394>
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d004      	beq.n	80028b8 <HAL_RCC_OscConfig+0x394>
 80028ae:	f240 1189 	movw	r1, #393	; 0x189
 80028b2:	48a8      	ldr	r0, [pc, #672]	; (8002b54 <HAL_RCC_OscConfig+0x630>)
 80028b4:	f7fe fdd7 	bl	8001466 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b1f      	cmp	r3, #31
 80028c0:	d904      	bls.n	80028cc <HAL_RCC_OscConfig+0x3a8>
 80028c2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80028c6:	48a3      	ldr	r0, [pc, #652]	; (8002b54 <HAL_RCC_OscConfig+0x630>)
 80028c8:	f7fe fdcd 	bl	8001466 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028cc:	4ba2      	ldr	r3, [pc, #648]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028d8:	4b9f      	ldr	r3, [pc, #636]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d16d      	bne.n	80029c0 <HAL_RCC_OscConfig+0x49c>
 80028e4:	4b9c      	ldr	r3, [pc, #624]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d166      	bne.n	80029c0 <HAL_RCC_OscConfig+0x49c>
 80028f2:	2302      	movs	r3, #2
 80028f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002904:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_RCC_OscConfig+0x3fe>
 800291c:	4b8e      	ldr	r3, [pc, #568]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e013      	b.n	800294a <HAL_RCC_OscConfig+0x426>
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002934:	2302      	movs	r3, #2
 8002936:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800293a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2202      	movs	r2, #2
 800294c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002950:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002954:	fa92 f2a2 	rbit	r2, r2
 8002958:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800295c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_RCC_OscConfig+0x468>
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f000 be37 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	21f8      	movs	r1, #248	; 0xf8
 800299c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80029a4:	fa91 f1a1 	rbit	r1, r1
 80029a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80029ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029b0:	fab1 f181 	clz	r1, r1
 80029b4:	b2c9      	uxtb	r1, r1
 80029b6:	408b      	lsls	r3, r1
 80029b8:	4967      	ldr	r1, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e0fa      	b.n	8002bb6 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8085 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x5b2>
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80029de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	461a      	mov	r2, r3
 80029f4:	2301      	movs	r3, #1
 80029f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff f89e 	bl	8001b38 <HAL_GetTick>
 80029fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff f899 	bl	8001b38 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f000 bdf1 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x524>
 8002a42:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x54c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2202      	movs	r2, #2
 8002a72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a76:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002a82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0af      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	21f8      	movs	r1, #248	; 0xf8
 8002ab2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002aba:	fa91 f1a1 	rbit	r1, r1
 8002abe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ac2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ac6:	fab1 f181 	clz	r1, r1
 8002aca:	b2c9      	uxtb	r1, r1
 8002acc:	408b      	lsls	r3, r1
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e06f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x692>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002ae8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7ff f819 	bl	8001b38 <HAL_GetTick>
 8002b06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f814 	bl	8001b38 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f000 bd6c 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x638>
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_RCC_OscConfig+0x634>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e018      	b.n	8002b84 <HAL_RCC_OscConfig+0x660>
 8002b52:	bf00      	nop
 8002b54:	08008e50 	.word	0x08008e50
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b80:	4bc0      	ldr	r3, [pc, #768]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2202      	movs	r2, #2
 8002b86:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b8a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002b96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1aa      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80e7 	beq.w	8002d94 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_RCC_OscConfig+0x6c0>
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d004      	beq.n	8002be4 <HAL_RCC_OscConfig+0x6c0>
 8002bda:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8002bde:	48aa      	ldr	r0, [pc, #680]	; (8002e88 <HAL_RCC_OscConfig+0x964>)
 8002be0:	f7fe fc41 	bl	8001466 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d066      	beq.n	8002cbc <HAL_RCC_OscConfig+0x798>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b9f      	ldr	r3, [pc, #636]	; (8002e8c <HAL_RCC_OscConfig+0x968>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	461a      	mov	r2, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fe ff8e 	bl	8001b38 <HAL_GetTick>
 8002c1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fe ff89 	bl	8001b38 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f000 bce1 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7c:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c84:	2102      	movs	r1, #2
 8002c86:	6019      	str	r1, [r3, #0]
 8002c88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f1a3 	rbit	r1, r3
 8002c92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c96:	6019      	str	r1, [r3, #0]
  return result;
 8002c98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0b3      	beq.n	8002c22 <HAL_RCC_OscConfig+0x6fe>
 8002cba:	e06b      	b.n	8002d94 <HAL_RCC_OscConfig+0x870>
 8002cbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cd2:	601a      	str	r2, [r3, #0]
  return result;
 8002cd4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cd8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x968>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7fe ff23 	bl	8001b38 <HAL_GetTick>
 8002cf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe ff1e 	bl	8001b38 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d902      	bls.n	8002d0e <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	f000 bc76 	b.w	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002d0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	fa93 f2a3 	rbit	r2, r3
 8002d38:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d5e:	2102      	movs	r1, #2
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f1a3 	rbit	r1, r3
 8002d6c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d70:	6019      	str	r1, [r3, #0]
  return result;
 8002d72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1b1      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8171 	beq.w	8003086 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8ae>
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8ae>
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d004      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8ae>
 8002dc8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8002dcc:	482e      	ldr	r0, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x964>)
 8002dce:	f7fe fb4a 	bl	8001466 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d112      	bne.n	8002e04 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCC_OscConfig+0x96c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11a      	bne.n	8002e46 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x96c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_RCC_OscConfig+0x96c>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fe8c 	bl	8001b38 <HAL_GetTick>
 8002e20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e009      	b.n	8002e3a <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe fe87 	bl	8001b38 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e3df      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCC_OscConfig+0x96c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0ef      	beq.n	8002e26 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x93a>
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	e038      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d115      	bne.n	8002e94 <HAL_RCC_OscConfig+0x970>
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a02      	ldr	r2, [pc, #8]	; (8002e84 <HAL_RCC_OscConfig+0x960>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	e026      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08008e50 	.word	0x08008e50
 8002e8c:	10908120 	.word	0x10908120
 8002e90:	40007000 	.word	0x40007000
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x994>
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a5d      	ldr	r2, [pc, #372]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002eb8:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a56      	ldr	r2, [pc, #344]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a53      	ldr	r2, [pc, #332]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d064      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fe2d 	bl	8001b38 <HAL_GetTick>
 8002ede:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fe28 	bl	8001b38 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e37e      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f2a:	601a      	str	r2, [r3, #0]
  return result;
 8002f2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_OscConfig+0xa28>
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	e00d      	b.n	8002f68 <HAL_RCC_OscConfig+0xa44>
 8002f4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f50:	2202      	movs	r2, #2
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	6011      	str	r1, [r2, #0]
 8002f70:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	fa92 f1a2 	rbit	r1, r2
 8002f7a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f7e:	6011      	str	r1, [r2, #0]
  return result;
 8002f80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f002 021f 	and.w	r2, r2, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0a0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x9c0>
 8002fa2:	e066      	b.n	8003072 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fdc8 	bl	8001b38 <HAL_GetTick>
 8002fa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fdc3 	bl	8001b38 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e319      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
 8002fc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ff4:	601a      	str	r2, [r3, #0]
  return result;
 8002ff6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ffa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0xaf8>
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <HAL_RCC_OscConfig+0xaf4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	e010      	b.n	8003038 <HAL_RCC_OscConfig+0xb14>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003020:	2202      	movs	r2, #2
 8003022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4bad      	ldr	r3, [pc, #692]	; (80032ec <HAL_RCC_OscConfig+0xdc8>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800303c:	2102      	movs	r1, #2
 800303e:	6011      	str	r1, [r2, #0]
 8003040:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	fa92 f1a2 	rbit	r1, r2
 800304a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800304e:	6011      	str	r1, [r2, #0]
  return result;
 8003050:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d19d      	bne.n	8002fae <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003072:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b9c      	ldr	r3, [pc, #624]	; (80032ec <HAL_RCC_OscConfig+0xdc8>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a9b      	ldr	r2, [pc, #620]	; (80032ec <HAL_RCC_OscConfig+0xdc8>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00e      	beq.n	80030ae <HAL_RCC_OscConfig+0xb8a>
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d009      	beq.n	80030ae <HAL_RCC_OscConfig+0xb8a>
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d004      	beq.n	80030ae <HAL_RCC_OscConfig+0xb8a>
 80030a4:	f240 213a 	movw	r1, #570	; 0x23a
 80030a8:	4891      	ldr	r0, [pc, #580]	; (80032f0 <HAL_RCC_OscConfig+0xdcc>)
 80030aa:	f7fe f9dc 	bl	8001466 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 829f 	beq.w	80035f8 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ba:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0xdc8>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	f000 826c 	beq.w	80035a0 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	f040 81e4 	bne.w	800349c <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d00a      	beq.n	80030f6 <HAL_RCC_OscConfig+0xbd2>
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d004      	beq.n	80030f6 <HAL_RCC_OscConfig+0xbd2>
 80030ec:	f240 2143 	movw	r1, #579	; 0x243
 80030f0:	487f      	ldr	r0, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0xdcc>)
 80030f2:	f7fe f9b8 	bl	8001466 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d058      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310a:	d052      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003116:	d04c      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003122:	d046      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312e:	d040      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800313a:	d03a      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003146:	d034      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003152:	d02e      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800315e:	d028      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800316a:	d022      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003176:	d01c      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003182:	d016      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800319a:	d00a      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80031a6:	d004      	beq.n	80031b2 <HAL_RCC_OscConfig+0xc8e>
 80031a8:	f44f 7111 	mov.w	r1, #580	; 0x244
 80031ac:	4850      	ldr	r0, [pc, #320]	; (80032f0 <HAL_RCC_OscConfig+0xdcc>)
 80031ae:	f7fe f95a 	bl	8001466 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d04f      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d04a      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d045      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d040      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d03b      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d036      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d031      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b07      	cmp	r3, #7
 8003200:	d02c      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b08      	cmp	r3, #8
 800320a:	d027      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b09      	cmp	r3, #9
 8003214:	d022      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b0a      	cmp	r3, #10
 800321e:	d01d      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b0b      	cmp	r3, #11
 8003228:	d018      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b0d      	cmp	r3, #13
 800323c:	d00e      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b0e      	cmp	r3, #14
 8003246:	d009      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2b0f      	cmp	r3, #15
 8003250:	d004      	beq.n	800325c <HAL_RCC_OscConfig+0xd38>
 8003252:	f240 2146 	movw	r1, #582	; 0x246
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <HAL_RCC_OscConfig+0xdcc>)
 8003258:	f7fe f905 	bl	8001466 <assert_failed>
 800325c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003274:	601a      	str	r2, [r3, #0]
  return result;
 8003276:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800327a:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fc51 	bl	8001b38 <HAL_GetTick>
 8003296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	e009      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fc4c 	bl	8001b38 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1a4      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
 80032b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032c8:	601a      	str	r2, [r3, #0]
  return result;
 80032ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0xdd0>
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <HAL_RCC_OscConfig+0xdc8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	e020      	b.n	800332c <HAL_RCC_OscConfig+0xe08>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	08008e50 	.word	0x08008e50
 80032f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4bb6      	ldr	r3, [pc, #728]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	fa92 f1a2 	rbit	r1, r2
 8003340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003344:	6011      	str	r1, [r2, #0]
  return result;
 8003346:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d199      	bne.n	800329c <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4ba6      	ldr	r3, [pc, #664]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f023 020f 	bic.w	r2, r3, #15
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	49a3      	ldr	r1, [pc, #652]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800337c:	4ba1      	ldr	r3, [pc, #644]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a19      	ldr	r1, [r3, #32]
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	430b      	orrs	r3, r1
 8003392:	499c      	ldr	r1, [pc, #624]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
 8003398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800339c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033b0:	601a      	str	r2, [r3, #0]
  return result;
 80033b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	2301      	movs	r3, #1
 80033cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fbb3 	bl	8001b38 <HAL_GetTick>
 80033d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d6:	e009      	b.n	80033ec <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fbae 	bl	8001b38 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e106      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
 80033ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003404:	601a      	str	r2, [r3, #0]
  return result;
 8003406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800340a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0xf02>
 8003420:	4b78      	ldr	r3, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e01b      	b.n	800345e <HAL_RCC_OscConfig+0xf3a>
 8003426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800342a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003462:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003466:	6011      	str	r1, [r2, #0]
 8003468:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	fa92 f1a2 	rbit	r1, r2
 8003472:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003476:	6011      	str	r1, [r2, #0]
  return result;
 8003478:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f002 021f 	and.w	r2, r2, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d09e      	beq.n	80033d8 <HAL_RCC_OscConfig+0xeb4>
 800349a:	e0ad      	b.n	80035f8 <HAL_RCC_OscConfig+0x10d4>
 800349c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fa93 f2a3 	rbit	r2, r3
 80034b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034b4:	601a      	str	r2, [r3, #0]
  return result;
 80034b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fb31 	bl	8001b38 <HAL_GetTick>
 80034d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	e009      	b.n	80034f0 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fb2c 	bl	8001b38 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e084      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
 80034f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003508:	601a      	str	r2, [r3, #0]
  return result;
 800350a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_RCC_OscConfig+0x1006>
 8003524:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	e01b      	b.n	8003562 <HAL_RCC_OscConfig+0x103e>
 800352a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f107 0320 	add.w	r3, r7, #32
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	fa93 f2a3 	rbit	r2, r3
 8003558:	f107 0318 	add.w	r3, r7, #24
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f107 0214 	add.w	r2, r7, #20
 8003566:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800356a:	6011      	str	r1, [r2, #0]
 800356c:	f107 0214 	add.w	r2, r7, #20
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	fa92 f1a2 	rbit	r1, r2
 8003576:	f107 0210 	add.w	r2, r7, #16
 800357a:	6011      	str	r1, [r2, #0]
  return result;
 800357c:	f107 0210 	add.w	r2, r7, #16
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19e      	bne.n	80034dc <HAL_RCC_OscConfig+0xfb8>
 800359e:	e02b      	b.n	80035f8 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e025      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_RCC_OscConfig+0x10e0>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80035c2:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d111      	bne.n	80035f4 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80035d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035de:	429a      	cmp	r2, r3
 80035e0:	d108      	bne.n	80035f4 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e6:	f003 020f 	and.w	r2, r3, #15
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b09e      	sub	sp, #120	; 0x78
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e203      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <HAL_RCC_ClockConfig+0x52>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d110      	bne.n	800365a <HAL_RCC_ClockConfig+0x52>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCC_ClockConfig+0x52>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <HAL_RCC_ClockConfig+0x52>
 8003650:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003654:	48a5      	ldr	r0, [pc, #660]	; (80038ec <HAL_RCC_ClockConfig+0x2e4>)
 8003656:	f7fd ff06 	bl	8001466 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCC_ClockConfig+0x6e>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d007      	beq.n	8003676 <HAL_RCC_ClockConfig+0x6e>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d004      	beq.n	8003676 <HAL_RCC_ClockConfig+0x6e>
 800366c:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8003670:	489e      	ldr	r0, [pc, #632]	; (80038ec <HAL_RCC_ClockConfig+0x2e4>)
 8003672:	f7fd fef8 	bl	8001466 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003676:	4b9e      	ldr	r3, [pc, #632]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d910      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003684:	4b9a      	ldr	r3, [pc, #616]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 0207 	bic.w	r2, r3, #7
 800368c:	4998      	ldr	r1, [pc, #608]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003694:	4b96      	ldr	r3, [pc, #600]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c0      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d031      	beq.n	8003716 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d024      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d020      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b90      	cmp	r3, #144	; 0x90
 80036c8:	d01c      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2ba0      	cmp	r3, #160	; 0xa0
 80036d0:	d018      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2bb0      	cmp	r3, #176	; 0xb0
 80036d8:	d014      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2bc0      	cmp	r3, #192	; 0xc0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2bd0      	cmp	r3, #208	; 0xd0
 80036e8:	d00c      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2be0      	cmp	r3, #224	; 0xe0
 80036f0:	d008      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2bf0      	cmp	r3, #240	; 0xf0
 80036f8:	d004      	beq.n	8003704 <HAL_RCC_ClockConfig+0xfc>
 80036fa:	f240 21db 	movw	r1, #731	; 0x2db
 80036fe:	487b      	ldr	r0, [pc, #492]	; (80038ec <HAL_RCC_ClockConfig+0x2e4>)
 8003700:	f7fd feb1 	bl	8001466 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4978      	ldr	r1, [pc, #480]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80f3 	beq.w	800390a <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_RCC_ClockConfig+0x13e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x13e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d004      	beq.n	8003746 <HAL_RCC_ClockConfig+0x13e>
 800373c:	f240 21e2 	movw	r1, #738	; 0x2e2
 8003740:	486a      	ldr	r0, [pc, #424]	; (80038ec <HAL_RCC_ClockConfig+0x2e4>)
 8003742:	f7fd fe90 	bl	8001466 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d13c      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x1c0>
 800374e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003752:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_RCC_ClockConfig+0x170>
 8003772:	4b60      	ldr	r3, [pc, #384]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e00f      	b.n	8003798 <HAL_RCC_ClockConfig+0x190>
 8003778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800377c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	667b      	str	r3, [r7, #100]	; 0x64
 8003786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378a:	663b      	str	r3, [r7, #96]	; 0x60
 800378c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003794:	4b57      	ldr	r3, [pc, #348]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800379c:	65ba      	str	r2, [r7, #88]	; 0x58
 800379e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f002 021f 	and.w	r2, r2, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d17b      	bne.n	80038bc <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e12f      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d13c      	bne.n	800384a <HAL_RCC_ClockConfig+0x242>
 80037d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_ClockConfig+0x1f2>
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	e00f      	b.n	800381a <HAL_RCC_ClockConfig+0x212>
 80037fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380c:	643b      	str	r3, [r7, #64]	; 0x40
 800380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13a      	bne.n	80038bc <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0ee      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
 800384a:	2302      	movs	r3, #2
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <HAL_RCC_ClockConfig+0x26a>
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	e00d      	b.n	800388e <HAL_RCC_ClockConfig+0x286>
 8003872:	2302      	movs	r3, #2
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2302      	movs	r3, #2
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2202      	movs	r2, #2
 8003890:	61ba      	str	r2, [r7, #24]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	fa92 f2a2 	rbit	r2, r2
 8003898:	617a      	str	r2, [r7, #20]
  return result;
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b5      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	490a      	ldr	r1, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fe f933 	bl	8001b38 <HAL_GetTick>
 80038d2:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d4:	e010      	b.n	80038f8 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d6:	f7fe f92f 	bl	8001b38 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d907      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e09d      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
 80038ec:	08008e50 	.word	0x08008e50
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 020c 	and.w	r2, r3, #12
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	429a      	cmp	r2, r3
 8003908:	d1e5      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390a:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <HAL_RCC_ClockConfig+0x42c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d210      	bcs.n	800393a <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003918:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_ClockConfig+0x42c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 0207 	bic.w	r2, r3, #7
 8003920:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_RCC_ClockConfig+0x42c>)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003928:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_RCC_ClockConfig+0x42c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e076      	b.n	8003a28 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d025      	beq.n	8003992 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <HAL_RCC_ClockConfig+0x378>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d013      	beq.n	8003980 <HAL_RCC_ClockConfig+0x378>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003960:	d00e      	beq.n	8003980 <HAL_RCC_ClockConfig+0x378>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800396a:	d009      	beq.n	8003980 <HAL_RCC_ClockConfig+0x378>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003974:	d004      	beq.n	8003980 <HAL_RCC_ClockConfig+0x378>
 8003976:	f240 311e 	movw	r1, #798	; 0x31e
 800397a:	482f      	ldr	r0, [pc, #188]	; (8003a38 <HAL_RCC_ClockConfig+0x430>)
 800397c:	f7fd fd73 	bl	8001466 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4928      	ldr	r1, [pc, #160]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d026      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d018      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3d0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3d0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80039b8:	d00e      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3d0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039c2:	d009      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3d0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039cc:	d004      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3d0>
 80039ce:	f240 3125 	movw	r1, #805	; 0x325
 80039d2:	4819      	ldr	r0, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x430>)
 80039d4:	f7fd fd47 	bl	8001466 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4912      	ldr	r1, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ec:	f000 f82c 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80039f0:	4601      	mov	r1, r0
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_RCC_ClockConfig+0x428>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fa:	22f0      	movs	r2, #240	; 0xf0
 80039fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	fa92 f2a2 	rbit	r2, r2
 8003a04:	60fa      	str	r2, [r7, #12]
  return result;
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	40d3      	lsrs	r3, r2
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x434>)
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	fa21 f303 	lsr.w	r3, r1, r3
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x438>)
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x43c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe f845 	bl	8001ab0 <HAL_InitTick>
  
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3778      	adds	r7, #120	; 0x78
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40022000 	.word	0x40022000
 8003a38:	08008e50 	.word	0x08008e50
 8003a3c:	08009014 	.word	0x08009014
 8003a40:	2000007c 	.word	0x2000007c
 8003a44:	20000080 	.word	0x20000080

08003a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b08b      	sub	sp, #44	; 0x2c
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x30>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x36>
 8003a76:	e03f      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a7a:	623b      	str	r3, [r7, #32]
      break;
 8003a7c:	e03f      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	fa92 f2a2 	rbit	r2, r2
 8003a90:	607a      	str	r2, [r7, #4]
  return result;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	40d3      	lsrs	r3, r2
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	220f      	movs	r2, #15
 8003aac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	40d3      	lsrs	r3, r2
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae0:	e007      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	623b      	str	r3, [r7, #32]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003afa:	623b      	str	r3, [r7, #32]
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	6a3b      	ldr	r3, [r7, #32]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	372c      	adds	r7, #44	; 0x2c
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	0800902c 	.word	0x0800902c
 8003b18:	0800903c 	.word	0x0800903c

08003b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	2000007c 	.word	0x2000007c

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b3a:	f7ff ffef 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	fa92 f2a2 	rbit	r2, r2
 8003b54:	603a      	str	r2, [r7, #0]
  return result;
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	fab2 f282 	clz	r2, r2
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	40d3      	lsrs	r3, r2
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08009024 	.word	0x08009024

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b7e:	f7ff ffcd 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b82:	4601      	mov	r1, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	fa92 f2a2 	rbit	r2, r2
 8003b98:	603a      	str	r2, [r7, #0]
  return result;
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	40d3      	lsrs	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	08009024 	.word	0x08009024

08003bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b092      	sub	sp, #72	; 0x48
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a62      	ldr	r2, [pc, #392]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d303      	bcc.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003bdc:	2172      	movs	r1, #114	; 0x72
 8003bde:	4861      	ldr	r0, [pc, #388]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003be0:	f7fd fc41 	bl	8001466 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80f1 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d00d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c16:	d003      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c18:	2178      	movs	r1, #120	; 0x78
 8003c1a:	4852      	ldr	r0, [pc, #328]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c1c:	f7fd fc23 	bl	8001466 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10e      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b4e      	ldr	r3, [pc, #312]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4a4d      	ldr	r2, [pc, #308]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c36:	61d3      	str	r3, [r2, #28]
 8003c38:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fd ff69 	bl	8001b38 <HAL_GetTick>
 8003c66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd ff65 	bl	8001b38 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	; 0x64
 8003c76:	d901      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e38f      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c88:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 808a 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f000 8082 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cfc:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d00:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d050      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd ff14 	bl	8001b38 <HAL_GetTick>
 8003d10:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd ff10 	bl	8001b38 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e338      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	2302      	movs	r3, #2
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	61fb      	str	r3, [r7, #28]
  return result;
 8003d42:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	e012      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003d5e:	bf00      	nop
 8003d60:	03f73400 	.word	0x03f73400
 8003d64:	08008e88 	.word	0x08008e88
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	10908100 	.word	0x10908100
 8003d74:	2302      	movs	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2202      	movs	r2, #2
 8003d86:	613a      	str	r2, [r7, #16]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	fa92 f2a2 	rbit	r2, r2
 8003d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	fab2 f282 	clz	r2, r2
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f202 	lsl.w	r2, r1, r2
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0b2      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dae:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4989      	ldr	r1, [pc, #548]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc8:	4b85      	ldr	r3, [pc, #532]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4a84      	ldr	r2, [pc, #528]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01c      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00f      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d00b      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d007      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003e00:	21be      	movs	r1, #190	; 0xbe
 8003e02:	4878      	ldr	r0, [pc, #480]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e04:	f7fd fb2f 	bl	8001466 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e08:	4b75      	ldr	r3, [pc, #468]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f023 0203 	bic.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4972      	ldr	r1, [pc, #456]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01f      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d00d      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e4c:	21c9      	movs	r1, #201	; 0xc9
 8003e4e:	4865      	ldr	r0, [pc, #404]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e50:	f7fd fb09 	bl	8001466 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e54:	4b62      	ldr	r3, [pc, #392]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	495f      	ldr	r1, [pc, #380]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01f      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e82:	d00d      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e98:	21d5      	movs	r1, #213	; 0xd5
 8003e9a:	4852      	ldr	r0, [pc, #328]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e9c:	f7fd fae3 	bl	8001466 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ea0:	4b4f      	ldr	r3, [pc, #316]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	494c      	ldr	r1, [pc, #304]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003ece:	21e0      	movs	r1, #224	; 0xe0
 8003ed0:	4844      	ldr	r0, [pc, #272]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003ed2:	f7fd fac8 	bl	8001466 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed6:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f023 0210 	bic.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	493f      	ldr	r1, [pc, #252]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d007      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003f06:	21ee      	movs	r1, #238	; 0xee
 8003f08:	4836      	ldr	r0, [pc, #216]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003f0a:	f7fd faac 	bl	8001466 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	4931      	ldr	r1, [pc, #196]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d004      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8003f3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003f40:	4828      	ldr	r0, [pc, #160]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003f42:	f7fd fa90 	bl	8001466 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f023 0220 	bic.w	r2, r3, #32
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4923      	ldr	r1, [pc, #140]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d004      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003f74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003f78:	481a      	ldr	r0, [pc, #104]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003f7a:	f7fd fa74 	bl	8001466 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	4915      	ldr	r1, [pc, #84]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d025      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fac:	d00e      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fc2:	f240 1123 	movw	r1, #291	; 0x123
 8003fc6:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003fc8:	f7fd fa4d 	bl	8001466 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	4901      	ldr	r1, [pc, #4]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	; 0x30
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08008e88 	.word	0x08008e88
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004004:	d00e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400e:	d009      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004018:	d004      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800401a:	f240 112d 	movw	r1, #301	; 0x12d
 800401e:	48a1      	ldr	r0, [pc, #644]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004020:	f7fd fa21 	bl	8001466 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004024:	4ba0      	ldr	r3, [pc, #640]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	499d      	ldr	r1, [pc, #628]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004052:	d004      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8004054:	f240 113d 	movw	r1, #317	; 0x13d
 8004058:	4892      	ldr	r0, [pc, #584]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800405a:	f7fd fa04 	bl	8001466 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800405e:	4b92      	ldr	r3, [pc, #584]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	498f      	ldr	r1, [pc, #572]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d04d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	d040      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408c:	d03b      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004096:	d036      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80040a0:	d031      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80040aa:	d02c      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80040b4:	d027      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 80040be:	d022      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80040d2:	d018      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80040dc:	d013      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040e6:	d00e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80040f0:	d009      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80040fa:	d004      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80040fc:	f240 115d 	movw	r1, #349	; 0x15d
 8004100:	4868      	ldr	r0, [pc, #416]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004102:	f7fd f9b0 	bl	8001466 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004106:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	4965      	ldr	r1, [pc, #404]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d04d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d040      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004134:	d03b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800413e:	d036      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8004148:	d031      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8004152:	d02c      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800415c:	d027      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8004166:	d022      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8004170:	d01d      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 800417a:	d018      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004184:	d013      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800418e:	d00e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8004198:	d009      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 80041a2:	d004      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80041a4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80041a8:	483e      	ldr	r0, [pc, #248]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041aa:	f7fd f95c 	bl	8001466 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	493b      	ldr	r1, [pc, #236]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d016      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d004      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80041de:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80041e2:	4830      	ldr	r0, [pc, #192]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041e4:	f7fd f93f 	bl	8001466 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041e8:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	492c      	ldr	r1, [pc, #176]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d004      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8004218:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800421c:	4821      	ldr	r0, [pc, #132]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800421e:	f7fd f922 	bl	8001466 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	491e      	ldr	r1, [pc, #120]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004250:	d004      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004252:	f240 11f7 	movw	r1, #503	; 0x1f7
 8004256:	4813      	ldr	r0, [pc, #76]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004258:	f7fd f905 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	490f      	ldr	r1, [pc, #60]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428a:	d004      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 800428c:	f240 2101 	movw	r1, #513	; 0x201
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004292:	f7fd f8e8 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004296:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	e003      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80042a4:	08008e88 	.word	0x08008e88
 80042a8:	40021000 	.word	0x40021000
 80042ac:	493d      	ldr	r1, [pc, #244]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d004      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80042d0:	f240 210b 	movw	r1, #523	; 0x20b
 80042d4:	4834      	ldr	r0, [pc, #208]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80042d6:	f7fd f8c6 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042da:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	492f      	ldr	r1, [pc, #188]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004308:	d004      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800430a:	f240 2115 	movw	r1, #533	; 0x215
 800430e:	4826      	ldr	r0, [pc, #152]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8004310:	f7fd f8a9 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	4920      	ldr	r1, [pc, #128]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004322:	4313      	orrs	r3, r2
 8004324:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x792>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004342:	d004      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x792>
 8004344:	f240 211f 	movw	r1, #543	; 0x21f
 8004348:	4817      	ldr	r0, [pc, #92]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800434a:	f7fd f88c 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	4912      	ldr	r1, [pc, #72]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800435c:	4313      	orrs	r3, r2
 800435e:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d004      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800437e:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8004382:	4809      	ldr	r0, [pc, #36]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8004384:	f7fd f86f 	bl	8001466 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3748      	adds	r7, #72	; 0x48
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08008e88 	.word	0x08008e88

080043ac <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0e1      	b.n	8004582 <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a72      	ldr	r2, [pc, #456]	; (800458c <HAL_RTC_Init+0x1e0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_RTC_Init+0x26>
 80043c8:	f240 1121 	movw	r1, #289	; 0x121
 80043cc:	4870      	ldr	r0, [pc, #448]	; (8004590 <HAL_RTC_Init+0x1e4>)
 80043ce:	f7fd f84a 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d008      	beq.n	80043ec <HAL_RTC_Init+0x40>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_RTC_Init+0x40>
 80043e2:	f44f 7191 	mov.w	r1, #290	; 0x122
 80043e6:	486a      	ldr	r0, [pc, #424]	; (8004590 <HAL_RTC_Init+0x1e4>)
 80043e8:	f7fd f83d 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b7f      	cmp	r3, #127	; 0x7f
 80043f2:	d904      	bls.n	80043fe <HAL_RTC_Init+0x52>
 80043f4:	f240 1123 	movw	r1, #291	; 0x123
 80043f8:	4865      	ldr	r0, [pc, #404]	; (8004590 <HAL_RTC_Init+0x1e4>)
 80043fa:	f7fd f834 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004406:	d304      	bcc.n	8004412 <HAL_RTC_Init+0x66>
 8004408:	f44f 7192 	mov.w	r1, #292	; 0x124
 800440c:	4860      	ldr	r0, [pc, #384]	; (8004590 <HAL_RTC_Init+0x1e4>)
 800440e:	f7fd f82a 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d013      	beq.n	8004442 <HAL_RTC_Init+0x96>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004422:	d00e      	beq.n	8004442 <HAL_RTC_Init+0x96>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442c:	d009      	beq.n	8004442 <HAL_RTC_Init+0x96>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004436:	d004      	beq.n	8004442 <HAL_RTC_Init+0x96>
 8004438:	f240 1125 	movw	r1, #293	; 0x125
 800443c:	4854      	ldr	r0, [pc, #336]	; (8004590 <HAL_RTC_Init+0x1e4>)
 800443e:	f7fd f812 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RTC_Init+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004452:	d004      	beq.n	800445e <HAL_RTC_Init+0xb2>
 8004454:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004458:	484d      	ldr	r0, [pc, #308]	; (8004590 <HAL_RTC_Init+0x1e4>)
 800445a:	f7fd f804 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RTC_Init+0xce>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800446e:	d004      	beq.n	800447a <HAL_RTC_Init+0xce>
 8004470:	f240 1127 	movw	r1, #295	; 0x127
 8004474:	4846      	ldr	r0, [pc, #280]	; (8004590 <HAL_RTC_Init+0x1e4>)
 8004476:	f7fc fff6 	bl	8001466 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7f5b      	ldrb	r3, [r3, #29]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd f832 	bl	80014f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	22ca      	movs	r2, #202	; 0xca
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2253      	movs	r2, #83	; 0x53
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fad0 	bl	8004a4c <RTC_EnterInitMode>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2204      	movs	r2, #4
 80044be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e05e      	b.n	8004582 <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6919      	ldr	r1, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	041a      	lsls	r2, r3, #16
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004522:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa62 	bl	80049fc <HAL_RTC_WaitForSynchro>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e018      	b.n	8004582 <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40002800 	.word	0x40002800
 8004590:	08008ee4 	.word	0x08008ee4

08004594 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_RTC_SetTime+0x26>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d004      	beq.n	80045ba <HAL_RTC_SetTime+0x26>
 80045b0:	f240 310f 	movw	r1, #783	; 0x30f
 80045b4:	48a4      	ldr	r0, [pc, #656]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 80045b6:	f7fc ff56 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c2:	d00d      	beq.n	80045e0 <HAL_RTC_SetTime+0x4c>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d008      	beq.n	80045e0 <HAL_RTC_SetTime+0x4c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_RTC_SetTime+0x4c>
 80045d6:	f44f 7144 	mov.w	r1, #784	; 0x310
 80045da:	489b      	ldr	r0, [pc, #620]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 80045dc:	f7fc ff43 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_RTC_SetTime+0x68>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045f0:	d004      	beq.n	80045fc <HAL_RTC_SetTime+0x68>
 80045f2:	f240 3111 	movw	r1, #785	; 0x311
 80045f6:	4894      	ldr	r0, [pc, #592]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 80045f8:	f7fc ff35 	bl	8001466 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	7f1b      	ldrb	r3, [r3, #28]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_RTC_SetTime+0x74>
 8004604:	2302      	movs	r3, #2
 8004606:	e12c      	b.n	8004862 <HAL_RTC_SetTime+0x2ce>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2202      	movs	r2, #2
 8004612:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d15c      	bne.n	80046d4 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_RTC_SetTime+0xa4>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d904      	bls.n	8004642 <HAL_RTC_SetTime+0xae>
 8004638:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800463c:	4882      	ldr	r0, [pc, #520]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 800463e:	f7fc ff12 	bl	8001466 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d015      	beq.n	8004676 <HAL_RTC_SetTime+0xe2>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	78db      	ldrb	r3, [r3, #3]
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d011      	beq.n	8004676 <HAL_RTC_SetTime+0xe2>
 8004652:	f240 311d 	movw	r1, #797	; 0x31d
 8004656:	487c      	ldr	r0, [pc, #496]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004658:	f7fc ff05 	bl	8001466 <assert_failed>
 800465c:	e00b      	b.n	8004676 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b17      	cmp	r3, #23
 800466a:	d904      	bls.n	8004676 <HAL_RTC_SetTime+0xe2>
 800466c:	f240 3122 	movw	r1, #802	; 0x322
 8004670:	4875      	ldr	r0, [pc, #468]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004672:	f7fc fef8 	bl	8001466 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b3b      	cmp	r3, #59	; 0x3b
 800467c:	d904      	bls.n	8004688 <HAL_RTC_SetTime+0xf4>
 800467e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8004682:	4871      	ldr	r0, [pc, #452]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004684:	f7fc feef 	bl	8001466 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	789b      	ldrb	r3, [r3, #2]
 800468c:	2b3b      	cmp	r3, #59	; 0x3b
 800468e:	d904      	bls.n	800469a <HAL_RTC_SetTime+0x106>
 8004690:	f240 3125 	movw	r1, #805	; 0x325
 8004694:	486c      	ldr	r0, [pc, #432]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004696:	f7fc fee6 	bl	8001466 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa00 	bl	8004aa4 <RTC_ByteToBcd2>
 80046a4:	4603      	mov	r3, r0
 80046a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f9f9 	bl	8004aa4 <RTC_ByteToBcd2>
 80046b2:	4603      	mov	r3, r0
 80046b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	789b      	ldrb	r3, [r3, #2]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f9f1 	bl	8004aa4 <RTC_ByteToBcd2>
 80046c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e062      	b.n	800479a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d022      	beq.n	8004728 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f9fa 	bl	8004ae0 <RTC_Bcd2ToByte>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_RTC_SetTime+0x16e>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f9f2 	bl	8004ae0 <RTC_Bcd2ToByte>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d904      	bls.n	800470c <HAL_RTC_SetTime+0x178>
 8004702:	f44f 714c 	mov.w	r1, #816	; 0x330
 8004706:	4850      	ldr	r0, [pc, #320]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004708:	f7fc fead 	bl	8001466 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d019      	beq.n	8004748 <HAL_RTC_SetTime+0x1b4>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d015      	beq.n	8004748 <HAL_RTC_SetTime+0x1b4>
 800471c:	f240 3131 	movw	r1, #817	; 0x331
 8004720:	4849      	ldr	r0, [pc, #292]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004722:	f7fc fea0 	bl	8001466 <assert_failed>
 8004726:	e00f      	b.n	8004748 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f9d4 	bl	8004ae0 <RTC_Bcd2ToByte>
 8004738:	4603      	mov	r3, r0
 800473a:	2b17      	cmp	r3, #23
 800473c:	d904      	bls.n	8004748 <HAL_RTC_SetTime+0x1b4>
 800473e:	f240 3136 	movw	r1, #822	; 0x336
 8004742:	4841      	ldr	r0, [pc, #260]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004744:	f7fc fe8f 	bl	8001466 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f9c7 	bl	8004ae0 <RTC_Bcd2ToByte>
 8004752:	4603      	mov	r3, r0
 8004754:	2b3b      	cmp	r3, #59	; 0x3b
 8004756:	d904      	bls.n	8004762 <HAL_RTC_SetTime+0x1ce>
 8004758:	f44f 714e 	mov.w	r1, #824	; 0x338
 800475c:	483a      	ldr	r0, [pc, #232]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 800475e:	f7fc fe82 	bl	8001466 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	789b      	ldrb	r3, [r3, #2]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f9ba 	bl	8004ae0 <RTC_Bcd2ToByte>
 800476c:	4603      	mov	r3, r0
 800476e:	2b3b      	cmp	r3, #59	; 0x3b
 8004770:	d904      	bls.n	800477c <HAL_RTC_SetTime+0x1e8>
 8004772:	f240 3139 	movw	r1, #825	; 0x339
 8004776:	4834      	ldr	r0, [pc, #208]	; (8004848 <HAL_RTC_SetTime+0x2b4>)
 8004778:	f7fc fe75 	bl	8001466 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004788:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800478e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	22ca      	movs	r2, #202	; 0xca
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2253      	movs	r2, #83	; 0x53
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f94e 	bl	8004a4c <RTC_EnterInitMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2204      	movs	r2, #4
 80047c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e049      	b.n	8004862 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047dc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004814:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d113      	bne.n	800484c <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f8e9 	bl	80049fc <HAL_RTC_WaitForSynchro>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2204      	movs	r2, #4
 800483c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e00c      	b.n	8004862 <HAL_RTC_SetTime+0x2ce>
 8004848:	08008ee4 	.word	0x08008ee4
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	bf00      	nop

0800486c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_RTC_GetTime+0x26>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d004      	beq.n	8004892 <HAL_RTC_GetTime+0x26>
 8004888:	f44f 7164 	mov.w	r1, #912	; 0x390
 800488c:	482c      	ldr	r0, [pc, #176]	; (8004940 <HAL_RTC_GetTime+0xd4>)
 800488e:	f7fc fdea 	bl	8001466 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11a      	bne.n	8004934 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f8ec 	bl	8004ae0 <RTC_Bcd2ToByte>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f8e3 	bl	8004ae0 <RTC_Bcd2ToByte>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f8da 	bl	8004ae0 <RTC_Bcd2ToByte>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	08008ee4 	.word	0x08008ee4

08004944 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_RTC_GetDate+0x26>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d004      	beq.n	800496a <HAL_RTC_GetDate+0x26>
 8004960:	f240 4126 	movw	r1, #1062	; 0x426
 8004964:	4824      	ldr	r0, [pc, #144]	; (80049f8 <HAL_RTC_GetDate+0xb4>)
 8004966:	f7fc fd7e 	bl	8001466 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004974:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004978:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	0b5b      	lsrs	r3, r3, #13
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11a      	bne.n	80049ee <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	78db      	ldrb	r3, [r3, #3]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f88f 	bl	8004ae0 <RTC_Bcd2ToByte>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f886 	bl	8004ae0 <RTC_Bcd2ToByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	789b      	ldrb	r3, [r3, #2]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f87d 	bl	8004ae0 <RTC_Bcd2ToByte>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08008ee4 	.word	0x08008ee4

080049fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a18:	f7fd f88e 	bl	8001b38 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a1e:	e009      	b.n	8004a34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a20:	f7fd f88a 	bl	8001b38 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2e:	d901      	bls.n	8004a34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e007      	b.n	8004a44 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a70:	f7fd f862 	bl	8001b38 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a76:	e009      	b.n	8004a8c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a78:	f7fd f85e 	bl	8001b38 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a86:	d901      	bls.n	8004a8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e007      	b.n	8004a9c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ee      	beq.n	8004a78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004ab2:	e005      	b.n	8004ac0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	3b0a      	subs	r3, #10
 8004abe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	2b09      	cmp	r3, #9
 8004ac4:	d8f6      	bhi.n	8004ab4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b2db      	uxtb	r3, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b2db      	uxtb	r3, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d010      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d00d      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d00a      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d007      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b06      	cmp	r3, #6
 8004b4e:	d004      	beq.n	8004b5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004b50:	f44f 7158 	mov.w	r1, #864	; 0x360
 8004b54:	485a      	ldr	r0, [pc, #360]	; (8004cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004b56:	f7fc fc86 	bl	8001466 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d304      	bcc.n	8004b6c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8004b62:	f240 3161 	movw	r1, #865	; 0x361
 8004b66:	4856      	ldr	r0, [pc, #344]	; (8004cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004b68:	f7fc fc7d 	bl	8001466 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	7f1b      	ldrb	r3, [r3, #28]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e09e      	b.n	8004cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	22ca      	movs	r2, #202	; 0xca
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2253      	movs	r2, #83	; 0x53
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01e      	beq.n	8004be0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8004ba2:	f7fc ffc9 	bl	8001b38 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004ba8:	e013      	b.n	8004bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004baa:	f7fc ffc5 	bl	8001b38 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d90b      	bls.n	8004bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	22ff      	movs	r2, #255	; 0xff
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e071      	b.n	8004cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e4      	bne.n	8004baa <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bee:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004c00:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c02:	f7fc ff99 	bl	8001b38 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004c08:	e013      	b.n	8004c32 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c0a:	f7fc ff95 	bl	8001b38 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c18:	d90b      	bls.n	8004c32 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	22ff      	movs	r2, #255	; 0xff
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2203      	movs	r2, #3
 8004c26:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e041      	b.n	8004cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0e4      	beq.n	8004c0a <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0207 	bic.w	r2, r2, #7
 8004c56:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6899      	ldr	r1, [r3, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004c68:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c72:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004c74:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a12      	ldr	r2, [pc, #72]	; (8004cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	08008f1c 	.word	0x08008f1c
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7f1b      	ldrb	r3, [r3, #28]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e047      	b.n	8004d70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	22ca      	movs	r2, #202	; 0xca
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2253      	movs	r2, #83	; 0x53
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d1a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004d1c:	f7fc ff0c 	bl	8001b38 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004d22:	e013      	b.n	8004d4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d24:	f7fc ff08 	bl	8001b38 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d32:	d90b      	bls.n	8004d4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2203      	movs	r2, #3
 8004d40:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e011      	b.n	8004d70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0e4      	beq.n	8004d24 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fb ff4c 	bl	8000c2c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004da4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dac:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	775a      	strb	r2, [r3, #29]
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0be      	b.n	8004f50 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a60      	ldr	r2, [pc, #384]	; (8004f58 <HAL_TIM_Base_Init+0x198>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d036      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de4:	d031      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5c      	ldr	r2, [pc, #368]	; (8004f5c <HAL_TIM_Base_Init+0x19c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d02c      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5a      	ldr	r2, [pc, #360]	; (8004f60 <HAL_TIM_Base_Init+0x1a0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d027      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a59      	ldr	r2, [pc, #356]	; (8004f64 <HAL_TIM_Base_Init+0x1a4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d022      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <HAL_TIM_Base_Init+0x1a8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01d      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a56      	ldr	r2, [pc, #344]	; (8004f6c <HAL_TIM_Base_Init+0x1ac>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d018      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a54      	ldr	r2, [pc, #336]	; (8004f70 <HAL_TIM_Base_Init+0x1b0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a53      	ldr	r2, [pc, #332]	; (8004f74 <HAL_TIM_Base_Init+0x1b4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a51      	ldr	r2, [pc, #324]	; (8004f78 <HAL_TIM_Base_Init+0x1b8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a50      	ldr	r2, [pc, #320]	; (8004f7c <HAL_TIM_Base_Init+0x1bc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIM_Base_Init+0x8a>
 8004e40:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004e44:	484e      	ldr	r0, [pc, #312]	; (8004f80 <HAL_TIM_Base_Init+0x1c0>)
 8004e46:	f7fc fb0e 	bl	8001466 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d014      	beq.n	8004e7c <HAL_TIM_Base_Init+0xbc>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d010      	beq.n	8004e7c <HAL_TIM_Base_Init+0xbc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d00c      	beq.n	8004e7c <HAL_TIM_Base_Init+0xbc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d008      	beq.n	8004e7c <HAL_TIM_Base_Init+0xbc>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b60      	cmp	r3, #96	; 0x60
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Init+0xbc>
 8004e72:	f240 111b 	movw	r1, #283	; 0x11b
 8004e76:	4842      	ldr	r0, [pc, #264]	; (8004f80 <HAL_TIM_Base_Init+0x1c0>)
 8004e78:	f7fc faf5 	bl	8001466 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <HAL_TIM_Base_Init+0xe2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8c:	d009      	beq.n	8004ea2 <HAL_TIM_Base_Init+0xe2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e96:	d004      	beq.n	8004ea2 <HAL_TIM_Base_Init+0xe2>
 8004e98:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004e9c:	4838      	ldr	r0, [pc, #224]	; (8004f80 <HAL_TIM_Base_Init+0x1c0>)
 8004e9e:	f7fc fae2 	bl	8001466 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_TIM_Base_Init+0xfc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Init+0xfc>
 8004eb2:	f240 111d 	movw	r1, #285	; 0x11d
 8004eb6:	4832      	ldr	r0, [pc, #200]	; (8004f80 <HAL_TIM_Base_Init+0x1c0>)
 8004eb8:	f7fc fad5 	bl	8001466 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fc fcf1 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 fa49 	bl	8005380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40001000 	.word	0x40001000
 8004f68:	40001400 	.word	0x40001400
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800
 8004f7c:	40015000 	.word	0x40015000
 8004f80:	08008f58 	.word	0x08008f58

08004f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a46      	ldr	r2, [pc, #280]	; (80050ac <HAL_TIM_Base_Start+0x128>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d031      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <HAL_TIM_Base_Start+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a41      	ldr	r2, [pc, #260]	; (80050b4 <HAL_TIM_Base_Start+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <HAL_TIM_Base_Start+0x134>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <HAL_TIM_Base_Start+0x138>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <HAL_TIM_Base_Start+0x13c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <HAL_TIM_Base_Start+0x140>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <HAL_TIM_Base_Start+0x144>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a38      	ldr	r2, [pc, #224]	; (80050cc <HAL_TIM_Base_Start+0x148>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a36      	ldr	r2, [pc, #216]	; (80050d0 <HAL_TIM_Base_Start+0x14c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_Base_Start+0x80>
 8004ffa:	f240 119b 	movw	r1, #411	; 0x19b
 8004ffe:	4835      	ldr	r0, [pc, #212]	; (80050d4 <HAL_TIM_Base_Start+0x150>)
 8005000:	f7fc fa31 	bl	8001466 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e047      	b.n	80050a4 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <HAL_TIM_Base_Start+0x128>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01d      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d018      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <HAL_TIM_Base_Start+0x12c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_TIM_Base_Start+0x130>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <HAL_TIM_Base_Start+0x13c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIM_Base_Start+0x140>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIM_Base_Start+0xde>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIM_Base_Start+0x14c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d115      	bne.n	800508e <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_TIM_Base_Start+0x154>)
 800506a:	4013      	ands	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b06      	cmp	r3, #6
 8005072:	d015      	beq.n	80050a0 <HAL_TIM_Base_Start+0x11c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507a:	d011      	beq.n	80050a0 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	e008      	b.n	80050a0 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e000      	b.n	80050a2 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40001000 	.word	0x40001000
 80050bc:	40001400 	.word	0x40001400
 80050c0:	40013400 	.word	0x40013400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800
 80050d0:	40015000 	.word	0x40015000
 80050d4:	08008f58 	.word	0x08008f58
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0202 	mvn.w	r2, #2
 8005108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f90f 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f901 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f912 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b04      	cmp	r3, #4
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0204 	mvn.w	r2, #4
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8e5 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8d7 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8e8 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b08      	cmp	r3, #8
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0208 	mvn.w	r2, #8
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2204      	movs	r2, #4
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8bb 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8ad 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8be 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f891 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f883 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f894 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0201 	mvn.w	r2, #1
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f85d 	bl	800531a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b80      	cmp	r3, #128	; 0x80
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa70 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529a:	d10e      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa63 	bl	8005780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f842 	bl	800536a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0220 	mvn.w	r2, #32
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa23 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a42      	ldr	r2, [pc, #264]	; (800549c <TIM_Base_SetConfig+0x11c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d00f      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <TIM_Base_SetConfig+0x120>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3e      	ldr	r2, [pc, #248]	; (80054a4 <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3d      	ldr	r2, [pc, #244]	; (80054a8 <TIM_Base_SetConfig+0x128>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <TIM_Base_SetConfig+0x12c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d108      	bne.n	80053d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a31      	ldr	r2, [pc, #196]	; (800549c <TIM_Base_SetConfig+0x11c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01f      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e0:	d01b      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2e      	ldr	r2, [pc, #184]	; (80054a0 <TIM_Base_SetConfig+0x120>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d017      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <TIM_Base_SetConfig+0x124>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <TIM_Base_SetConfig+0x128>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <TIM_Base_SetConfig+0x130>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <TIM_Base_SetConfig+0x134>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <TIM_Base_SetConfig+0x138>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_Base_SetConfig+0x9a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <TIM_Base_SetConfig+0x12c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d108      	bne.n	800542c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a12      	ldr	r2, [pc, #72]	; (800549c <TIM_Base_SetConfig+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <TIM_Base_SetConfig+0x100>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <TIM_Base_SetConfig+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00f      	beq.n	8005480 <TIM_Base_SetConfig+0x100>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <TIM_Base_SetConfig+0x130>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <TIM_Base_SetConfig+0x100>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <TIM_Base_SetConfig+0x134>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_Base_SetConfig+0x100>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <TIM_Base_SetConfig+0x138>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_Base_SetConfig+0x100>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <TIM_Base_SetConfig+0x12c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	615a      	str	r2, [r3, #20]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40015000 	.word	0x40015000
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a9a      	ldr	r2, [pc, #616]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d027      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a96      	ldr	r2, [pc, #600]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a94      	ldr	r2, [pc, #592]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a93      	ldr	r2, [pc, #588]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a91      	ldr	r2, [pc, #580]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a90      	ldr	r2, [pc, #576]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a8e      	ldr	r2, [pc, #568]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a8d      	ldr	r2, [pc, #564]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005520:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8005524:	488b      	ldr	r0, [pc, #556]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005526:	f7fb ff9e 	bl	8001466 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b10      	cmp	r3, #16
 8005538:	d01c      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b20      	cmp	r3, #32
 8005540:	d018      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b30      	cmp	r3, #48	; 0x30
 8005548:	d014      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d010      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b50      	cmp	r3, #80	; 0x50
 8005558:	d00c      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b60      	cmp	r3, #96	; 0x60
 8005560:	d008      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b70      	cmp	r3, #112	; 0x70
 8005568:	d004      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800556a:	f240 71b5 	movw	r1, #1973	; 0x7b5
 800556e:	4879      	ldr	r0, [pc, #484]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005570:	f7fb ff79 	bl	8001466 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d008      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005584:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8005588:	4872      	ldr	r0, [pc, #456]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800558a:	f7fb ff6c 	bl	8001466 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005598:	2302      	movs	r3, #2
 800559a:	e0c6      	b.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5f      	ldr	r2, [pc, #380]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5e      	ldr	r2, [pc, #376]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d161      	bne.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d054      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ea:	d04f      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f4:	d04a      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055fe:	d045      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005608:	d040      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005612:	d03b      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800561c:	d036      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005626:	d031      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8005630:	d02c      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800563a:	d027      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8005644:	d022      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800564e:	d01d      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8005658:	d018      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005662:	d013      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800566c:	d00e      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8005676:	d009      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8005680:	d004      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005682:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8005686:	4833      	ldr	r0, [pc, #204]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005688:	f7fb feed 	bl	8001466 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01d      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d018      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10c      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4313      	orrs	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40001000 	.word	0x40001000
 8005744:	40001400 	.word	0x40001400
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40015000 	.word	0x40015000
 8005754:	08008f90 	.word	0x08008f90

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e077      	b.n	8005896 <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d014      	beq.n	80057d8 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <HAL_UART_Init+0x10c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d02d      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <HAL_UART_Init+0x110>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d028      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <HAL_UART_Init+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d023      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80057d0:	4836      	ldr	r0, [pc, #216]	; (80058ac <HAL_UART_Init+0x118>)
 80057d2:	f7fb fe48 	bl	8001466 <assert_failed>
 80057d6:	e01d      	b.n	8005814 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a30      	ldr	r2, [pc, #192]	; (80058a0 <HAL_UART_Init+0x10c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <HAL_UART_Init+0x110>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2d      	ldr	r2, [pc, #180]	; (80058a8 <HAL_UART_Init+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_UART_Init+0x80>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <HAL_UART_Init+0x11c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_UART_Init+0x80>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <HAL_UART_Init+0x120>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_UART_Init+0x80>
 800580a:	f240 1131 	movw	r1, #305	; 0x131
 800580e:	4827      	ldr	r0, [pc, #156]	; (80058ac <HAL_UART_Init+0x118>)
 8005810:	f7fb fe29 	bl	8001466 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fc f8b9 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2224      	movs	r2, #36	; 0x24
 800582e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fbe9 	bl	8006018 <UART_SetConfig>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e022      	b.n	8005896 <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fe41 	bl	80064e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 ff74 	bl	800677c <UART_CheckIdleState>
 8005894:	4603      	mov	r3, r0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40013800 	.word	0x40013800
 80058a4:	40004400 	.word	0x40004400
 80058a8:	40004800 	.word	0x40004800
 80058ac:	08008fcc 	.word	0x08008fcc
 80058b0:	40004c00 	.word	0x40004c00
 80058b4:	40005000 	.word	0x40005000

080058b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b08b      	sub	sp, #44	; 0x2c
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d156      	bne.n	800597c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Transmit_IT+0x22>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e04f      	b.n	800597e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Transmit_IT+0x34>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e048      	b.n	800597e <HAL_UART_Transmit_IT+0xc6>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	; 0x21
 800591c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d107      	bne.n	8005938 <HAL_UART_Transmit_IT+0x80>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a16      	ldr	r2, [pc, #88]	; (800598c <HAL_UART_Transmit_IT+0xd4>)
 8005934:	669a      	str	r2, [r3, #104]	; 0x68
 8005936:	e002      	b.n	800593e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a15      	ldr	r2, [pc, #84]	; (8005990 <HAL_UART_Transmit_IT+0xd8>)
 800593c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	613b      	str	r3, [r7, #16]
   return(result);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	69f9      	ldr	r1, [r7, #28]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	61bb      	str	r3, [r7, #24]
   return(result);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e000      	b.n	800597e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	372c      	adds	r7, #44	; 0x2c
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	08006c9b 	.word	0x08006c9b
 8005990:	08006be3 	.word	0x08006be3

08005994 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d13d      	bne.n	8005a26 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_UART_Receive_IT+0x22>
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e036      	b.n	8005a28 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UART_Receive_IT+0x34>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e02f      	b.n	8005a28 <HAL_UART_Receive_IT+0x94>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d018      	beq.n	8005a16 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	613b      	str	r3, [r7, #16]
   return(result);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	69f9      	ldr	r1, [r7, #28]
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 ffbb 	bl	8006998 <UART_Start_Receive_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	e000      	b.n	8005a28 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b0ba      	sub	sp, #232	; 0xe8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a5e:	4013      	ands	r3, r2
 8005a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d115      	bne.n	8005a98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00f      	beq.n	8005a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 82a3 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
      }
      return;
 8005a96:	e29d      	b.n	8005fd4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8117 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ab2:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_UART_IRQHandler+0x298>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 810a 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d011      	beq.n	8005aec <HAL_UART_IRQHandler+0xbc>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d011      	beq.n	8005b1c <HAL_UART_IRQHandler+0xec>
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b12:	f043 0204 	orr.w	r2, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d011      	beq.n	8005b4c <HAL_UART_IRQHandler+0x11c>
 8005b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d017      	beq.n	8005b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2208      	movs	r2, #8
 8005b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7e:	f043 0208 	orr.w	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d012      	beq.n	8005bba <HAL_UART_IRQHandler+0x18a>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8209 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04f      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ff6c 	bl	8006af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d141      	bne.n	8005caa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1d9      	bne.n	8005c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <HAL_UART_IRQHandler+0x29c>)
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc f8ff 	bl	8001e8a <HAL_DMA_Abort_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d017      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e00f      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9a2 	bl	8005fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e00b      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f99e 	bl	8005fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	e007      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f99a 	bl	8005fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005cc0:	e18a      	b.n	8005fd8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc2:	bf00      	nop
    return;
 8005cc4:	e188      	b.n	8005fd8 <HAL_UART_IRQHandler+0x5a8>
 8005cc6:	bf00      	nop
 8005cc8:	04000120 	.word	0x04000120
 8005ccc:	08006bb7 	.word	0x08006bb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 8143 	bne.w	8005f60 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 813c 	beq.w	8005f60 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8135 	beq.w	8005f60 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	f040 80b1 	bne.w	8005e70 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 815c 	beq.w	8005fdc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f080 8154 	bcs.w	8005fdc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f000 8085 	beq.w	8005e54 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1da      	bne.n	8005d4a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005db8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e1      	bne.n	8005d94 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005df4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005df6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e3      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	f023 0310 	bic.w	r3, r3, #16
 8005e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e4      	bne.n	8005e14 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fb ffe2 	bl	8001e18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8c9 	bl	8006000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e6e:	e0b5      	b.n	8005fdc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80a7 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80a2 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e4      	bne.n	8005e9c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e3      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	69b9      	ldr	r1, [r7, #24]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f851 	bl	8006000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f5e:	e03f      	b.n	8005fe0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <HAL_UART_IRQHandler+0x55a>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f86f 	bl	8007066 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f88:	e02d      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01c      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
    }
    return;
 8005fb2:	e017      	b.n	8005fe4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fec4 	bl	8006d5a <UART_EndTransmit_IT>
    return;
 8005fd2:	e008      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005fd4:	bf00      	nop
 8005fd6:	e006      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005fd8:	bf00      	nop
 8005fda:	e004      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005fe4:	bf00      	nop
  }

}
 8005fe6:	37e8      	adds	r7, #232	; 0xe8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a9a      	ldr	r2, [pc, #616]	; (8006294 <UART_SetConfig+0x27c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d904      	bls.n	8006038 <UART_SetConfig+0x20>
 800602e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8006032:	4899      	ldr	r0, [pc, #612]	; (8006298 <UART_SetConfig+0x280>)
 8006034:	f7fb fa17 	bl	8001466 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006040:	d00d      	beq.n	800605e <UART_SetConfig+0x46>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <UART_SetConfig+0x46>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	d004      	beq.n	800605e <UART_SetConfig+0x46>
 8006054:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8006058:	488f      	ldr	r0, [pc, #572]	; (8006298 <UART_SetConfig+0x280>)
 800605a:	f7fb fa04 	bl	8001466 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d012      	beq.n	800608e <UART_SetConfig+0x76>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <UART_SetConfig+0x76>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006078:	d009      	beq.n	800608e <UART_SetConfig+0x76>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006082:	d004      	beq.n	800608e <UART_SetConfig+0x76>
 8006084:	f640 3141 	movw	r1, #2881	; 0xb41
 8006088:	4883      	ldr	r0, [pc, #524]	; (8006298 <UART_SetConfig+0x280>)
 800608a:	f7fb f9ec 	bl	8001466 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <UART_SetConfig+0x92>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609e:	d004      	beq.n	80060aa <UART_SetConfig+0x92>
 80060a0:	f640 3142 	movw	r1, #2882	; 0xb42
 80060a4:	487c      	ldr	r0, [pc, #496]	; (8006298 <UART_SetConfig+0x280>)
 80060a6:	f7fb f9de 	bl	8001466 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <UART_SetConfig+0xb8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ba:	d009      	beq.n	80060d0 <UART_SetConfig+0xb8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060c4:	d004      	beq.n	80060d0 <UART_SetConfig+0xb8>
 80060c6:	f640 3144 	movw	r1, #2884	; 0xb44
 80060ca:	4873      	ldr	r0, [pc, #460]	; (8006298 <UART_SetConfig+0x280>)
 80060cc:	f7fb f9cb 	bl	8001466 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f023 030c 	bic.w	r3, r3, #12
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <UART_SetConfig+0xcc>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <UART_SetConfig+0xd6>
 80060e4:	f640 3145 	movw	r1, #2885	; 0xb45
 80060e8:	486b      	ldr	r0, [pc, #428]	; (8006298 <UART_SetConfig+0x280>)
 80060ea:	f7fb f9bc 	bl	8001466 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <UART_SetConfig+0x106>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fe:	d00e      	beq.n	800611e <UART_SetConfig+0x106>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x106>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d004      	beq.n	800611e <UART_SetConfig+0x106>
 8006114:	f640 3146 	movw	r1, #2886	; 0xb46
 8006118:	485f      	ldr	r0, [pc, #380]	; (8006298 <UART_SetConfig+0x280>)
 800611a:	f7fb f9a4 	bl	8001466 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <UART_SetConfig+0x122>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612e:	d004      	beq.n	800613a <UART_SetConfig+0x122>
 8006130:	f640 3147 	movw	r1, #2887	; 0xb47
 8006134:	4858      	ldr	r0, [pc, #352]	; (8006298 <UART_SetConfig+0x280>)
 8006136:	f7fb f996 	bl	8001466 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b50      	ldr	r3, [pc, #320]	; (800629c <UART_SetConfig+0x284>)
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	430b      	orrs	r3, r1
 8006164:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	430a      	orrs	r2, r1
 800619e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3e      	ldr	r2, [pc, #248]	; (80062a0 <UART_SetConfig+0x288>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d11f      	bne.n	80061ea <UART_SetConfig+0x1d2>
 80061aa:	4b3e      	ldr	r3, [pc, #248]	; (80062a4 <UART_SetConfig+0x28c>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d816      	bhi.n	80061e4 <UART_SetConfig+0x1cc>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x1a4>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061df 	.word	0x080061df
 80061c8:	080061d3 	.word	0x080061d3
 80061cc:	2301      	movs	r3, #1
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e0c4      	b.n	800635c <UART_SetConfig+0x344>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e0c1      	b.n	800635c <UART_SetConfig+0x344>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e0be      	b.n	800635c <UART_SetConfig+0x344>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e0bb      	b.n	800635c <UART_SetConfig+0x344>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e0b8      	b.n	800635c <UART_SetConfig+0x344>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <UART_SetConfig+0x290>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d124      	bne.n	800623e <UART_SetConfig+0x226>
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <UART_SetConfig+0x28c>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006200:	d011      	beq.n	8006226 <UART_SetConfig+0x20e>
 8006202:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006206:	d817      	bhi.n	8006238 <UART_SetConfig+0x220>
 8006208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800620c:	d011      	beq.n	8006232 <UART_SetConfig+0x21a>
 800620e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006212:	d811      	bhi.n	8006238 <UART_SetConfig+0x220>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <UART_SetConfig+0x208>
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d006      	beq.n	800622c <UART_SetConfig+0x214>
 800621e:	e00b      	b.n	8006238 <UART_SetConfig+0x220>
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e09a      	b.n	800635c <UART_SetConfig+0x344>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e097      	b.n	800635c <UART_SetConfig+0x344>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e094      	b.n	800635c <UART_SetConfig+0x344>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e091      	b.n	800635c <UART_SetConfig+0x344>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e08e      	b.n	800635c <UART_SetConfig+0x344>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <UART_SetConfig+0x294>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d133      	bne.n	80062b0 <UART_SetConfig+0x298>
 8006248:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <UART_SetConfig+0x28c>)
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006250:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006254:	d011      	beq.n	800627a <UART_SetConfig+0x262>
 8006256:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800625a:	d817      	bhi.n	800628c <UART_SetConfig+0x274>
 800625c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006260:	d011      	beq.n	8006286 <UART_SetConfig+0x26e>
 8006262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006266:	d811      	bhi.n	800628c <UART_SetConfig+0x274>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <UART_SetConfig+0x25c>
 800626c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006270:	d006      	beq.n	8006280 <UART_SetConfig+0x268>
 8006272:	e00b      	b.n	800628c <UART_SetConfig+0x274>
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e070      	b.n	800635c <UART_SetConfig+0x344>
 800627a:	2302      	movs	r3, #2
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e06d      	b.n	800635c <UART_SetConfig+0x344>
 8006280:	2304      	movs	r3, #4
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e06a      	b.n	800635c <UART_SetConfig+0x344>
 8006286:	2308      	movs	r3, #8
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e067      	b.n	800635c <UART_SetConfig+0x344>
 800628c:	2310      	movs	r3, #16
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e064      	b.n	800635c <UART_SetConfig+0x344>
 8006292:	bf00      	nop
 8006294:	00895440 	.word	0x00895440
 8006298:	08008fcc 	.word	0x08008fcc
 800629c:	efff69f3 	.word	0xefff69f3
 80062a0:	40013800 	.word	0x40013800
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40004400 	.word	0x40004400
 80062ac:	40004800 	.word	0x40004800
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a86      	ldr	r2, [pc, #536]	; (80064d0 <UART_SetConfig+0x4b8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d124      	bne.n	8006304 <UART_SetConfig+0x2ec>
 80062ba:	4b86      	ldr	r3, [pc, #536]	; (80064d4 <UART_SetConfig+0x4bc>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062c6:	d011      	beq.n	80062ec <UART_SetConfig+0x2d4>
 80062c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062cc:	d817      	bhi.n	80062fe <UART_SetConfig+0x2e6>
 80062ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d2:	d011      	beq.n	80062f8 <UART_SetConfig+0x2e0>
 80062d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d8:	d811      	bhi.n	80062fe <UART_SetConfig+0x2e6>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <UART_SetConfig+0x2ce>
 80062de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e2:	d006      	beq.n	80062f2 <UART_SetConfig+0x2da>
 80062e4:	e00b      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062e6:	2300      	movs	r3, #0
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e037      	b.n	800635c <UART_SetConfig+0x344>
 80062ec:	2302      	movs	r3, #2
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e034      	b.n	800635c <UART_SetConfig+0x344>
 80062f2:	2304      	movs	r3, #4
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e031      	b.n	800635c <UART_SetConfig+0x344>
 80062f8:	2308      	movs	r3, #8
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e02e      	b.n	800635c <UART_SetConfig+0x344>
 80062fe:	2310      	movs	r3, #16
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e02b      	b.n	800635c <UART_SetConfig+0x344>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a73      	ldr	r2, [pc, #460]	; (80064d8 <UART_SetConfig+0x4c0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d124      	bne.n	8006358 <UART_SetConfig+0x340>
 800630e:	4b71      	ldr	r3, [pc, #452]	; (80064d4 <UART_SetConfig+0x4bc>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800631a:	d011      	beq.n	8006340 <UART_SetConfig+0x328>
 800631c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006320:	d817      	bhi.n	8006352 <UART_SetConfig+0x33a>
 8006322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006326:	d011      	beq.n	800634c <UART_SetConfig+0x334>
 8006328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800632c:	d811      	bhi.n	8006352 <UART_SetConfig+0x33a>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <UART_SetConfig+0x322>
 8006332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006336:	d006      	beq.n	8006346 <UART_SetConfig+0x32e>
 8006338:	e00b      	b.n	8006352 <UART_SetConfig+0x33a>
 800633a:	2300      	movs	r3, #0
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e00d      	b.n	800635c <UART_SetConfig+0x344>
 8006340:	2302      	movs	r3, #2
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e00a      	b.n	800635c <UART_SetConfig+0x344>
 8006346:	2304      	movs	r3, #4
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e007      	b.n	800635c <UART_SetConfig+0x344>
 800634c:	2308      	movs	r3, #8
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e004      	b.n	800635c <UART_SetConfig+0x344>
 8006352:	2310      	movs	r3, #16
 8006354:	77fb      	strb	r3, [r7, #31]
 8006356:	e001      	b.n	800635c <UART_SetConfig+0x344>
 8006358:	2310      	movs	r3, #16
 800635a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d15c      	bne.n	8006420 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d828      	bhi.n	80063be <UART_SetConfig+0x3a6>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x35c>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	080063bf 	.word	0x080063bf
 8006384:	080063af 	.word	0x080063af
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063bf 	.word	0x080063bf
 8006390:	080063bf 	.word	0x080063bf
 8006394:	080063b7 	.word	0x080063b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fd fbcc 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800639c:	61b8      	str	r0, [r7, #24]
        break;
 800639e:	e013      	b.n	80063c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7fd fbea 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 80063a4:	61b8      	str	r0, [r7, #24]
        break;
 80063a6:	e00f      	b.n	80063c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b4c      	ldr	r3, [pc, #304]	; (80064dc <UART_SetConfig+0x4c4>)
 80063aa:	61bb      	str	r3, [r7, #24]
        break;
 80063ac:	e00c      	b.n	80063c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fd fb4b 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80063b2:	61b8      	str	r0, [r7, #24]
        break;
 80063b4:	e008      	b.n	80063c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e004      	b.n	80063c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	77bb      	strb	r3, [r7, #30]
        break;
 80063c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d074      	beq.n	80064b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	005a      	lsls	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	441a      	add	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	d916      	bls.n	800641a <UART_SetConfig+0x402>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f2:	d212      	bcs.n	800641a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f023 030f 	bic.w	r3, r3, #15
 80063fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	b29a      	uxth	r2, r3
 800640a:	89fb      	ldrh	r3, [r7, #14]
 800640c:	4313      	orrs	r3, r2
 800640e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	89fa      	ldrh	r2, [r7, #14]
 8006416:	60da      	str	r2, [r3, #12]
 8006418:	e04e      	b.n	80064b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	77bb      	strb	r3, [r7, #30]
 800641e:	e04b      	b.n	80064b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	2b08      	cmp	r3, #8
 8006424:	d827      	bhi.n	8006476 <UART_SetConfig+0x45e>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x414>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	08006477 	.word	0x08006477
 800643c:	08006467 	.word	0x08006467
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477
 8006448:	08006477 	.word	0x08006477
 800644c:	0800646f 	.word	0x0800646f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7fd fb70 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8006454:	61b8      	str	r0, [r7, #24]
        break;
 8006456:	e013      	b.n	8006480 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7fd fb8e 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 800645c:	61b8      	str	r0, [r7, #24]
        break;
 800645e:	e00f      	b.n	8006480 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006460:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <UART_SetConfig+0x4c4>)
 8006462:	61bb      	str	r3, [r7, #24]
        break;
 8006464:	e00c      	b.n	8006480 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006466:	f7fd faef 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 800646a:	61b8      	str	r0, [r7, #24]
        break;
 800646c:	e008      	b.n	8006480 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	61bb      	str	r3, [r7, #24]
        break;
 8006474:	e004      	b.n	8006480 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	77bb      	strb	r3, [r7, #30]
        break;
 800647e:	bf00      	nop
    }

    if (pclk != 0U)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085a      	lsrs	r2, r3, #1
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	b29b      	uxth	r3, r3
 800649a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d908      	bls.n	80064b4 <UART_SetConfig+0x49c>
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d204      	bcs.n	80064b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e001      	b.n	80064b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40004c00 	.word	0x40004c00
 80064d4:	40021000 	.word	0x40021000
 80064d8:	40005000 	.word	0x40005000
 80064dc:	007a1200 	.word	0x007a1200

080064e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2bff      	cmp	r3, #255	; 0xff
 80064ee:	d904      	bls.n	80064fa <UART_AdvFeatureConfig+0x1a>
 80064f0:	f640 31c8 	movw	r1, #3016	; 0xbc8
 80064f4:	489d      	ldr	r0, [pc, #628]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 80064f6:	f7fa ffb6 	bl	8001466 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d018      	beq.n	8006538 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <UART_AdvFeatureConfig+0x42>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006516:	d004      	beq.n	8006522 <UART_AdvFeatureConfig+0x42>
 8006518:	f640 31cd 	movw	r1, #3021	; 0xbcd
 800651c:	4893      	ldr	r0, [pc, #588]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 800651e:	f7fa ffa2 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d018      	beq.n	8006576 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <UART_AdvFeatureConfig+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006554:	d004      	beq.n	8006560 <UART_AdvFeatureConfig+0x80>
 8006556:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800655a:	4884      	ldr	r0, [pc, #528]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 800655c:	f7fa ff83 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <UART_AdvFeatureConfig+0xbe>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006592:	d004      	beq.n	800659e <UART_AdvFeatureConfig+0xbe>
 8006594:	f640 31db 	movw	r1, #3035	; 0xbdb
 8006598:	4874      	ldr	r0, [pc, #464]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 800659a:	f7fa ff64 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d018      	beq.n	80065f2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <UART_AdvFeatureConfig+0xfc>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	d004      	beq.n	80065dc <UART_AdvFeatureConfig+0xfc>
 80065d2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 80065d6:	4865      	ldr	r0, [pc, #404]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 80065d8:	f7fa ff45 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <UART_AdvFeatureConfig+0x13a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d004      	beq.n	800661a <UART_AdvFeatureConfig+0x13a>
 8006610:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8006614:	4855      	ldr	r0, [pc, #340]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 8006616:	f7fa ff26 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d018      	beq.n	800666e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <UART_AdvFeatureConfig+0x178>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	d004      	beq.n	8006658 <UART_AdvFeatureConfig+0x178>
 800664e:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8006652:	4846      	ldr	r0, [pc, #280]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 8006654:	f7fa ff07 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d054      	beq.n	8006724 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <UART_AdvFeatureConfig+0x290>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00e      	beq.n	80066a2 <UART_AdvFeatureConfig+0x1c2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3a      	ldr	r2, [pc, #232]	; (8006774 <UART_AdvFeatureConfig+0x294>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <UART_AdvFeatureConfig+0x1c2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a39      	ldr	r2, [pc, #228]	; (8006778 <UART_AdvFeatureConfig+0x298>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <UART_AdvFeatureConfig+0x1c2>
 8006698:	f640 31f7 	movw	r1, #3063	; 0xbf7
 800669c:	4833      	ldr	r0, [pc, #204]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 800669e:	f7fa fee2 	bl	8001466 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <UART_AdvFeatureConfig+0x1de>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b2:	d004      	beq.n	80066be <UART_AdvFeatureConfig+0x1de>
 80066b4:	f640 31f8 	movw	r1, #3064	; 0xbf8
 80066b8:	482c      	ldr	r0, [pc, #176]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 80066ba:	f7fa fed4 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d122      	bne.n	8006724 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <UART_AdvFeatureConfig+0x22e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ee:	d00e      	beq.n	800670e <UART_AdvFeatureConfig+0x22e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f8:	d009      	beq.n	800670e <UART_AdvFeatureConfig+0x22e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006702:	d004      	beq.n	800670e <UART_AdvFeatureConfig+0x22e>
 8006704:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8006708:	4818      	ldr	r0, [pc, #96]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 800670a:	f7fa feac 	bl	8001466 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d018      	beq.n	8006762 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <UART_AdvFeatureConfig+0x26c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006740:	d004      	beq.n	800674c <UART_AdvFeatureConfig+0x26c>
 8006742:	f640 4105 	movw	r1, #3077	; 0xc05
 8006746:	4809      	ldr	r0, [pc, #36]	; (800676c <UART_AdvFeatureConfig+0x28c>)
 8006748:	f7fa fe8d 	bl	8001466 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
  }
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	08008fcc 	.word	0x08008fcc
 8006770:	40013800 	.word	0x40013800
 8006774:	40004400 	.word	0x40004400
 8006778:	40004800 	.word	0x40004800

0800677c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af02      	add	r7, sp, #8
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800678c:	f7fb f9d4 	bl	8001b38 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10e      	bne.n	80067be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f82d 	bl	800680e <UART_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e023      	b.n	8006806 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d10e      	bne.n	80067ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f817 	bl	800680e <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e00d      	b.n	8006806 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b09c      	sub	sp, #112	; 0x70
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	e0a5      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006826:	f000 80a1 	beq.w	800696c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fb f985 	bl	8001b38 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <UART_WaitOnFlagUntilTimeout+0x32>
 800683a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683c:	2b00      	cmp	r3, #0
 800683e:	d13e      	bne.n	80068be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006854:	667b      	str	r3, [r7, #100]	; 0x64
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006860:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800686c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	663b      	str	r3, [r7, #96]	; 0x60
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006892:	64ba      	str	r2, [r7, #72]	; 0x48
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e067      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d04f      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068da:	d147      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
 8006906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800690a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e6      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	613b      	str	r3, [r7, #16]
   return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006938:	623a      	str	r2, [r7, #32]
 800693a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	61bb      	str	r3, [r7, #24]
   return(result);
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e010      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	429a      	cmp	r2, r3
 8006988:	f43f af4a 	beq.w	8006820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3770      	adds	r7, #112	; 0x70
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006998:	b480      	push	{r7}
 800699a:	b091      	sub	sp, #68	; 0x44
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ca:	d10e      	bne.n	80069ea <UART_Start_Receive_IT+0x52>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <UART_Start_Receive_IT+0x48>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069de:	e02d      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e8:	e028      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <UART_Start_Receive_IT+0x76>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d104      	bne.n	8006a04 <UART_Start_Receive_IT+0x6c>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	22ff      	movs	r2, #255	; 0xff
 80069fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a02:	e01b      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	227f      	movs	r2, #127	; 0x7f
 8006a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a0c:	e016      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a16:	d10d      	bne.n	8006a34 <UART_Start_Receive_IT+0x9c>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <UART_Start_Receive_IT+0x92>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	227f      	movs	r2, #127	; 0x7f
 8006a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a28:	e008      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	223f      	movs	r2, #63	; 0x3f
 8006a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a32:	e003      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2222      	movs	r2, #34	; 0x22
 8006a48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3308      	adds	r3, #8
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a6c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e5      	bne.n	8006a4a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d107      	bne.n	8006a98 <UART_Start_Receive_IT+0x100>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <UART_Start_Receive_IT+0x150>)
 8006a94:	665a      	str	r2, [r3, #100]	; 0x64
 8006a96:	e002      	b.n	8006a9e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a14      	ldr	r2, [pc, #80]	; (8006aec <UART_Start_Receive_IT+0x154>)
 8006a9c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3744      	adds	r7, #68	; 0x44
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	08006f0b 	.word	0x08006f0b
 8006aec:	08006daf 	.word	0x08006daf

08006af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b095      	sub	sp, #84	; 0x54
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
 8006b18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e6      	bne.n	8006af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e5      	bne.n	8006b2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d118      	bne.n	8006b98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f023 0310 	bic.w	r3, r3, #16
 8006b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	613b      	str	r3, [r7, #16]
   return(result);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e6      	bne.n	8006b66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006baa:	bf00      	nop
 8006bac:	3754      	adds	r7, #84	; 0x54
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff fa09 	bl	8005fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b08f      	sub	sp, #60	; 0x3c
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bee:	2b21      	cmp	r3, #33	; 0x21
 8006bf0:	d14d      	bne.n	8006c8e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d132      	bne.n	8006c64 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e6      	bne.n	8006c30 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c62:	e014      	b.n	8006c8e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c8e:	bf00      	nop
 8006c90:	373c      	adds	r7, #60	; 0x3c
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b091      	sub	sp, #68	; 0x44
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca6:	2b21      	cmp	r3, #33	; 0x21
 8006ca8:	d151      	bne.n	8006d4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d132      	bne.n	8006d1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	69b9      	ldr	r1, [r7, #24]
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	617b      	str	r3, [r7, #20]
   return(result);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d1a:	e018      	b.n	8006d4e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	881a      	ldrh	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	1c9a      	adds	r2, r3, #2
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d4e:	bf00      	nop
 8006d50:	3744      	adds	r7, #68	; 0x44
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b088      	sub	sp, #32
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7f9 fec7 	bl	8000b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bf00      	nop
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b096      	sub	sp, #88	; 0x58
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc4:	2b22      	cmp	r3, #34	; 0x22
 8006dc6:	f040 8094 	bne.w	8006ef2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dd0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dd4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006dd8:	b2d9      	uxtb	r1, r3
 8006dda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	400a      	ands	r2, r1
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d177      	bne.n	8006f02 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e30:	647b      	str	r3, [r7, #68]	; 0x44
 8006e32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	623b      	str	r3, [r7, #32]
   return(result);
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e64:	633a      	str	r2, [r7, #48]	; 0x30
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d12e      	bne.n	8006eea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d103      	bne.n	8006eda <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff f88c 	bl	8006000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ee8:	e00b      	b.n	8006f02 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7f9 fe58 	bl	8000ba0 <HAL_UART_RxCpltCallback>
}
 8006ef0:	e007      	b.n	8006f02 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0208 	orr.w	r2, r2, #8
 8006f00:	619a      	str	r2, [r3, #24]
}
 8006f02:	bf00      	nop
 8006f04:	3758      	adds	r7, #88	; 0x58
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b096      	sub	sp, #88	; 0x58
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f20:	2b22      	cmp	r3, #34	; 0x22
 8006f22:	f040 8094 	bne.w	800704e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f36:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f3e:	4013      	ands	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	1c9a      	adds	r2, r3, #2
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d177      	bne.n	800705e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e6      	bne.n	8006f6e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d12e      	bne.n	8007046 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0310 	bic.w	r3, r3, #16
 8007002:	647b      	str	r3, [r7, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6979      	ldr	r1, [r7, #20]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	613b      	str	r3, [r7, #16]
   return(result);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e6      	bne.n	8006fee <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b10      	cmp	r3, #16
 800702c:	d103      	bne.n	8007036 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2210      	movs	r2, #16
 8007034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fe ffde 	bl	8006000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007044:	e00b      	b.n	800705e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7f9 fdaa 	bl	8000ba0 <HAL_UART_RxCpltCallback>
}
 800704c:	e007      	b.n	800705e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699a      	ldr	r2, [r3, #24]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0208 	orr.w	r2, r2, #8
 800705c:	619a      	str	r2, [r3, #24]
}
 800705e:	bf00      	nop
 8007060:	3758      	adds	r7, #88	; 0x58
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <__errno>:
 800707c:	4b01      	ldr	r3, [pc, #4]	; (8007084 <__errno+0x8>)
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000088 	.word	0x20000088

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4d0d      	ldr	r5, [pc, #52]	; (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	; (80070c4 <__libc_init_array+0x3c>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2600      	movs	r6, #0
 8007094:	42a6      	cmp	r6, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4d0b      	ldr	r5, [pc, #44]	; (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	; (80070cc <__libc_init_array+0x44>)
 800709c:	f001 fe0c 	bl	8008cb8 <_init>
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2600      	movs	r6, #0
 80070a6:	42a6      	cmp	r6, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ba:	4798      	blx	r3
 80070bc:	3601      	adds	r6, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	08009200 	.word	0x08009200
 80070c4:	08009200 	.word	0x08009200
 80070c8:	08009200 	.word	0x08009200
 80070cc:	08009204 	.word	0x08009204

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <iprintf>:
 80070e0:	b40f      	push	{r0, r1, r2, r3}
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <iprintf+0x2c>)
 80070e4:	b513      	push	{r0, r1, r4, lr}
 80070e6:	681c      	ldr	r4, [r3, #0]
 80070e8:	b124      	cbz	r4, 80070f4 <iprintf+0x14>
 80070ea:	69a3      	ldr	r3, [r4, #24]
 80070ec:	b913      	cbnz	r3, 80070f4 <iprintf+0x14>
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f91a 	bl	8007328 <__sinit>
 80070f4:	ab05      	add	r3, sp, #20
 80070f6:	9a04      	ldr	r2, [sp, #16]
 80070f8:	68a1      	ldr	r1, [r4, #8]
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fd77 	bl	8007bf0 <_vfiprintf_r>
 8007102:	b002      	add	sp, #8
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	b004      	add	sp, #16
 800710a:	4770      	bx	lr
 800710c:	20000088 	.word	0x20000088

08007110 <siscanf>:
 8007110:	b40e      	push	{r1, r2, r3}
 8007112:	b510      	push	{r4, lr}
 8007114:	b09f      	sub	sp, #124	; 0x7c
 8007116:	ac21      	add	r4, sp, #132	; 0x84
 8007118:	f44f 7101 	mov.w	r1, #516	; 0x204
 800711c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007120:	9201      	str	r2, [sp, #4]
 8007122:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007126:	9004      	str	r0, [sp, #16]
 8007128:	9008      	str	r0, [sp, #32]
 800712a:	f7f9 f863 	bl	80001f4 <strlen>
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <siscanf+0x50>)
 8007130:	9005      	str	r0, [sp, #20]
 8007132:	9009      	str	r0, [sp, #36]	; 0x24
 8007134:	930d      	str	r3, [sp, #52]	; 0x34
 8007136:	480b      	ldr	r0, [pc, #44]	; (8007164 <siscanf+0x54>)
 8007138:	9a01      	ldr	r2, [sp, #4]
 800713a:	6800      	ldr	r0, [r0, #0]
 800713c:	9403      	str	r4, [sp, #12]
 800713e:	2300      	movs	r3, #0
 8007140:	9311      	str	r3, [sp, #68]	; 0x44
 8007142:	9316      	str	r3, [sp, #88]	; 0x58
 8007144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007148:	f8ad 301e 	strh.w	r3, [sp, #30]
 800714c:	a904      	add	r1, sp, #16
 800714e:	4623      	mov	r3, r4
 8007150:	f000 fbac 	bl	80078ac <__ssvfiscanf_r>
 8007154:	b01f      	add	sp, #124	; 0x7c
 8007156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715a:	b003      	add	sp, #12
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	0800718b 	.word	0x0800718b
 8007164:	20000088 	.word	0x20000088

08007168 <__sread>:
 8007168:	b510      	push	{r4, lr}
 800716a:	460c      	mov	r4, r1
 800716c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007170:	f001 f94e 	bl	8008410 <_read_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	bfab      	itete	ge
 8007178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800717a:	89a3      	ldrhlt	r3, [r4, #12]
 800717c:	181b      	addge	r3, r3, r0
 800717e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007182:	bfac      	ite	ge
 8007184:	6563      	strge	r3, [r4, #84]	; 0x54
 8007186:	81a3      	strhlt	r3, [r4, #12]
 8007188:	bd10      	pop	{r4, pc}

0800718a <__seofread>:
 800718a:	2000      	movs	r0, #0
 800718c:	4770      	bx	lr

0800718e <__swrite>:
 800718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007192:	461f      	mov	r7, r3
 8007194:	898b      	ldrh	r3, [r1, #12]
 8007196:	05db      	lsls	r3, r3, #23
 8007198:	4605      	mov	r5, r0
 800719a:	460c      	mov	r4, r1
 800719c:	4616      	mov	r6, r2
 800719e:	d505      	bpl.n	80071ac <__swrite+0x1e>
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	2302      	movs	r3, #2
 80071a6:	2200      	movs	r2, #0
 80071a8:	f000 f95e 	bl	8007468 <_lseek_r>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	4632      	mov	r2, r6
 80071ba:	463b      	mov	r3, r7
 80071bc:	4628      	mov	r0, r5
 80071be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	f000 b837 	b.w	8007234 <_write_r>

080071c6 <__sseek>:
 80071c6:	b510      	push	{r4, lr}
 80071c8:	460c      	mov	r4, r1
 80071ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ce:	f000 f94b 	bl	8007468 <_lseek_r>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	bf15      	itete	ne
 80071d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071e2:	81a3      	strheq	r3, [r4, #12]
 80071e4:	bf18      	it	ne
 80071e6:	81a3      	strhne	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__sclose>:
 80071ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ee:	f000 b833 	b.w	8007258 <_close_r>
	...

080071f4 <_vsiprintf_r>:
 80071f4:	b500      	push	{lr}
 80071f6:	b09b      	sub	sp, #108	; 0x6c
 80071f8:	9100      	str	r1, [sp, #0]
 80071fa:	9104      	str	r1, [sp, #16]
 80071fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007200:	9105      	str	r1, [sp, #20]
 8007202:	9102      	str	r1, [sp, #8]
 8007204:	4905      	ldr	r1, [pc, #20]	; (800721c <_vsiprintf_r+0x28>)
 8007206:	9103      	str	r1, [sp, #12]
 8007208:	4669      	mov	r1, sp
 800720a:	f000 f9f5 	bl	80075f8 <_svfiprintf_r>
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	b01b      	add	sp, #108	; 0x6c
 8007216:	f85d fb04 	ldr.w	pc, [sp], #4
 800721a:	bf00      	nop
 800721c:	ffff0208 	.word	0xffff0208

08007220 <vsiprintf>:
 8007220:	4613      	mov	r3, r2
 8007222:	460a      	mov	r2, r1
 8007224:	4601      	mov	r1, r0
 8007226:	4802      	ldr	r0, [pc, #8]	; (8007230 <vsiprintf+0x10>)
 8007228:	6800      	ldr	r0, [r0, #0]
 800722a:	f7ff bfe3 	b.w	80071f4 <_vsiprintf_r>
 800722e:	bf00      	nop
 8007230:	20000088 	.word	0x20000088

08007234 <_write_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	; (8007254 <_write_r+0x20>)
 8007238:	4604      	mov	r4, r0
 800723a:	4608      	mov	r0, r1
 800723c:	4611      	mov	r1, r2
 800723e:	2200      	movs	r2, #0
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f7fa fa31 	bl	80016aa <_write>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_write_r+0x1e>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_write_r+0x1e>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	200008b4 	.word	0x200008b4

08007258 <_close_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d06      	ldr	r5, [pc, #24]	; (8007274 <_close_r+0x1c>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7fa fa3d 	bl	80016e2 <_close>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_close_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_close_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	200008b4 	.word	0x200008b4

08007278 <std>:
 8007278:	2300      	movs	r3, #0
 800727a:	b510      	push	{r4, lr}
 800727c:	4604      	mov	r4, r0
 800727e:	e9c0 3300 	strd	r3, r3, [r0]
 8007282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007286:	6083      	str	r3, [r0, #8]
 8007288:	8181      	strh	r1, [r0, #12]
 800728a:	6643      	str	r3, [r0, #100]	; 0x64
 800728c:	81c2      	strh	r2, [r0, #14]
 800728e:	6183      	str	r3, [r0, #24]
 8007290:	4619      	mov	r1, r3
 8007292:	2208      	movs	r2, #8
 8007294:	305c      	adds	r0, #92	; 0x5c
 8007296:	f7ff ff1b 	bl	80070d0 <memset>
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <std+0x38>)
 800729c:	6263      	str	r3, [r4, #36]	; 0x24
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <std+0x3c>)
 80072a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <std+0x40>)
 80072a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <std+0x44>)
 80072a8:	6224      	str	r4, [r4, #32]
 80072aa:	6323      	str	r3, [r4, #48]	; 0x30
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	08007169 	.word	0x08007169
 80072b4:	0800718f 	.word	0x0800718f
 80072b8:	080071c7 	.word	0x080071c7
 80072bc:	080071eb 	.word	0x080071eb

080072c0 <_cleanup_r>:
 80072c0:	4901      	ldr	r1, [pc, #4]	; (80072c8 <_cleanup_r+0x8>)
 80072c2:	f000 b8af 	b.w	8007424 <_fwalk_reent>
 80072c6:	bf00      	nop
 80072c8:	080089d1 	.word	0x080089d1

080072cc <__sfmoreglue>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	1e4a      	subs	r2, r1, #1
 80072d0:	2568      	movs	r5, #104	; 0x68
 80072d2:	4355      	muls	r5, r2
 80072d4:	460e      	mov	r6, r1
 80072d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072da:	f000 f8d7 	bl	800748c <_malloc_r>
 80072de:	4604      	mov	r4, r0
 80072e0:	b140      	cbz	r0, 80072f4 <__sfmoreglue+0x28>
 80072e2:	2100      	movs	r1, #0
 80072e4:	e9c0 1600 	strd	r1, r6, [r0]
 80072e8:	300c      	adds	r0, #12
 80072ea:	60a0      	str	r0, [r4, #8]
 80072ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072f0:	f7ff feee 	bl	80070d0 <memset>
 80072f4:	4620      	mov	r0, r4
 80072f6:	bd70      	pop	{r4, r5, r6, pc}

080072f8 <__sfp_lock_acquire>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_acquire+0x8>)
 80072fa:	f000 b8b3 	b.w	8007464 <__retarget_lock_acquire_recursive>
 80072fe:	bf00      	nop
 8007300:	200008b0 	.word	0x200008b0

08007304 <__sfp_lock_release>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sfp_lock_release+0x8>)
 8007306:	f000 b8ae 	b.w	8007466 <__retarget_lock_release_recursive>
 800730a:	bf00      	nop
 800730c:	200008b0 	.word	0x200008b0

08007310 <__sinit_lock_acquire>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__sinit_lock_acquire+0x8>)
 8007312:	f000 b8a7 	b.w	8007464 <__retarget_lock_acquire_recursive>
 8007316:	bf00      	nop
 8007318:	200008ab 	.word	0x200008ab

0800731c <__sinit_lock_release>:
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <__sinit_lock_release+0x8>)
 800731e:	f000 b8a2 	b.w	8007466 <__retarget_lock_release_recursive>
 8007322:	bf00      	nop
 8007324:	200008ab 	.word	0x200008ab

08007328 <__sinit>:
 8007328:	b510      	push	{r4, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	f7ff fff0 	bl	8007310 <__sinit_lock_acquire>
 8007330:	69a3      	ldr	r3, [r4, #24]
 8007332:	b11b      	cbz	r3, 800733c <__sinit+0x14>
 8007334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007338:	f7ff bff0 	b.w	800731c <__sinit_lock_release>
 800733c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007340:	6523      	str	r3, [r4, #80]	; 0x50
 8007342:	4b13      	ldr	r3, [pc, #76]	; (8007390 <__sinit+0x68>)
 8007344:	4a13      	ldr	r2, [pc, #76]	; (8007394 <__sinit+0x6c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	62a2      	str	r2, [r4, #40]	; 0x28
 800734a:	42a3      	cmp	r3, r4
 800734c:	bf04      	itt	eq
 800734e:	2301      	moveq	r3, #1
 8007350:	61a3      	streq	r3, [r4, #24]
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f820 	bl	8007398 <__sfp>
 8007358:	6060      	str	r0, [r4, #4]
 800735a:	4620      	mov	r0, r4
 800735c:	f000 f81c 	bl	8007398 <__sfp>
 8007360:	60a0      	str	r0, [r4, #8]
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f818 	bl	8007398 <__sfp>
 8007368:	2200      	movs	r2, #0
 800736a:	60e0      	str	r0, [r4, #12]
 800736c:	2104      	movs	r1, #4
 800736e:	6860      	ldr	r0, [r4, #4]
 8007370:	f7ff ff82 	bl	8007278 <std>
 8007374:	68a0      	ldr	r0, [r4, #8]
 8007376:	2201      	movs	r2, #1
 8007378:	2109      	movs	r1, #9
 800737a:	f7ff ff7d 	bl	8007278 <std>
 800737e:	68e0      	ldr	r0, [r4, #12]
 8007380:	2202      	movs	r2, #2
 8007382:	2112      	movs	r1, #18
 8007384:	f7ff ff78 	bl	8007278 <std>
 8007388:	2301      	movs	r3, #1
 800738a:	61a3      	str	r3, [r4, #24]
 800738c:	e7d2      	b.n	8007334 <__sinit+0xc>
 800738e:	bf00      	nop
 8007390:	0800904c 	.word	0x0800904c
 8007394:	080072c1 	.word	0x080072c1

08007398 <__sfp>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	4607      	mov	r7, r0
 800739c:	f7ff ffac 	bl	80072f8 <__sfp_lock_acquire>
 80073a0:	4b1e      	ldr	r3, [pc, #120]	; (800741c <__sfp+0x84>)
 80073a2:	681e      	ldr	r6, [r3, #0]
 80073a4:	69b3      	ldr	r3, [r6, #24]
 80073a6:	b913      	cbnz	r3, 80073ae <__sfp+0x16>
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7ff ffbd 	bl	8007328 <__sinit>
 80073ae:	3648      	adds	r6, #72	; 0x48
 80073b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	d503      	bpl.n	80073c0 <__sfp+0x28>
 80073b8:	6833      	ldr	r3, [r6, #0]
 80073ba:	b30b      	cbz	r3, 8007400 <__sfp+0x68>
 80073bc:	6836      	ldr	r6, [r6, #0]
 80073be:	e7f7      	b.n	80073b0 <__sfp+0x18>
 80073c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073c4:	b9d5      	cbnz	r5, 80073fc <__sfp+0x64>
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <__sfp+0x88>)
 80073c8:	60e3      	str	r3, [r4, #12]
 80073ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073ce:	6665      	str	r5, [r4, #100]	; 0x64
 80073d0:	f000 f847 	bl	8007462 <__retarget_lock_init_recursive>
 80073d4:	f7ff ff96 	bl	8007304 <__sfp_lock_release>
 80073d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073e0:	6025      	str	r5, [r4, #0]
 80073e2:	61a5      	str	r5, [r4, #24]
 80073e4:	2208      	movs	r2, #8
 80073e6:	4629      	mov	r1, r5
 80073e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073ec:	f7ff fe70 	bl	80070d0 <memset>
 80073f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073f8:	4620      	mov	r0, r4
 80073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fc:	3468      	adds	r4, #104	; 0x68
 80073fe:	e7d9      	b.n	80073b4 <__sfp+0x1c>
 8007400:	2104      	movs	r1, #4
 8007402:	4638      	mov	r0, r7
 8007404:	f7ff ff62 	bl	80072cc <__sfmoreglue>
 8007408:	4604      	mov	r4, r0
 800740a:	6030      	str	r0, [r6, #0]
 800740c:	2800      	cmp	r0, #0
 800740e:	d1d5      	bne.n	80073bc <__sfp+0x24>
 8007410:	f7ff ff78 	bl	8007304 <__sfp_lock_release>
 8007414:	230c      	movs	r3, #12
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	e7ee      	b.n	80073f8 <__sfp+0x60>
 800741a:	bf00      	nop
 800741c:	0800904c 	.word	0x0800904c
 8007420:	ffff0001 	.word	0xffff0001

08007424 <_fwalk_reent>:
 8007424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007428:	4606      	mov	r6, r0
 800742a:	4688      	mov	r8, r1
 800742c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007430:	2700      	movs	r7, #0
 8007432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007436:	f1b9 0901 	subs.w	r9, r9, #1
 800743a:	d505      	bpl.n	8007448 <_fwalk_reent+0x24>
 800743c:	6824      	ldr	r4, [r4, #0]
 800743e:	2c00      	cmp	r4, #0
 8007440:	d1f7      	bne.n	8007432 <_fwalk_reent+0xe>
 8007442:	4638      	mov	r0, r7
 8007444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007448:	89ab      	ldrh	r3, [r5, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d907      	bls.n	800745e <_fwalk_reent+0x3a>
 800744e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007452:	3301      	adds	r3, #1
 8007454:	d003      	beq.n	800745e <_fwalk_reent+0x3a>
 8007456:	4629      	mov	r1, r5
 8007458:	4630      	mov	r0, r6
 800745a:	47c0      	blx	r8
 800745c:	4307      	orrs	r7, r0
 800745e:	3568      	adds	r5, #104	; 0x68
 8007460:	e7e9      	b.n	8007436 <_fwalk_reent+0x12>

08007462 <__retarget_lock_init_recursive>:
 8007462:	4770      	bx	lr

08007464 <__retarget_lock_acquire_recursive>:
 8007464:	4770      	bx	lr

08007466 <__retarget_lock_release_recursive>:
 8007466:	4770      	bx	lr

08007468 <_lseek_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_lseek_r+0x20>)
 800746c:	4604      	mov	r4, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	2200      	movs	r2, #0
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f7fa f95a 	bl	8001730 <_lseek>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_lseek_r+0x1e>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_lseek_r+0x1e>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	200008b4 	.word	0x200008b4

0800748c <_malloc_r>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	1ccd      	adds	r5, r1, #3
 8007490:	f025 0503 	bic.w	r5, r5, #3
 8007494:	3508      	adds	r5, #8
 8007496:	2d0c      	cmp	r5, #12
 8007498:	bf38      	it	cc
 800749a:	250c      	movcc	r5, #12
 800749c:	2d00      	cmp	r5, #0
 800749e:	4606      	mov	r6, r0
 80074a0:	db01      	blt.n	80074a6 <_malloc_r+0x1a>
 80074a2:	42a9      	cmp	r1, r5
 80074a4:	d903      	bls.n	80074ae <_malloc_r+0x22>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	2000      	movs	r0, #0
 80074ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ae:	f001 fb57 	bl	8008b60 <__malloc_lock>
 80074b2:	4921      	ldr	r1, [pc, #132]	; (8007538 <_malloc_r+0xac>)
 80074b4:	680a      	ldr	r2, [r1, #0]
 80074b6:	4614      	mov	r4, r2
 80074b8:	b99c      	cbnz	r4, 80074e2 <_malloc_r+0x56>
 80074ba:	4f20      	ldr	r7, [pc, #128]	; (800753c <_malloc_r+0xb0>)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	b923      	cbnz	r3, 80074ca <_malloc_r+0x3e>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 ffb6 	bl	8008434 <_sbrk_r>
 80074c8:	6038      	str	r0, [r7, #0]
 80074ca:	4629      	mov	r1, r5
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 ffb1 	bl	8008434 <_sbrk_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d123      	bne.n	800751e <_malloc_r+0x92>
 80074d6:	230c      	movs	r3, #12
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	4630      	mov	r0, r6
 80074dc:	f001 fb46 	bl	8008b6c <__malloc_unlock>
 80074e0:	e7e3      	b.n	80074aa <_malloc_r+0x1e>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	1b5b      	subs	r3, r3, r5
 80074e6:	d417      	bmi.n	8007518 <_malloc_r+0x8c>
 80074e8:	2b0b      	cmp	r3, #11
 80074ea:	d903      	bls.n	80074f4 <_malloc_r+0x68>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	441c      	add	r4, r3
 80074f0:	6025      	str	r5, [r4, #0]
 80074f2:	e004      	b.n	80074fe <_malloc_r+0x72>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	42a2      	cmp	r2, r4
 80074f8:	bf0c      	ite	eq
 80074fa:	600b      	streq	r3, [r1, #0]
 80074fc:	6053      	strne	r3, [r2, #4]
 80074fe:	4630      	mov	r0, r6
 8007500:	f001 fb34 	bl	8008b6c <__malloc_unlock>
 8007504:	f104 000b 	add.w	r0, r4, #11
 8007508:	1d23      	adds	r3, r4, #4
 800750a:	f020 0007 	bic.w	r0, r0, #7
 800750e:	1ac2      	subs	r2, r0, r3
 8007510:	d0cc      	beq.n	80074ac <_malloc_r+0x20>
 8007512:	1a1b      	subs	r3, r3, r0
 8007514:	50a3      	str	r3, [r4, r2]
 8007516:	e7c9      	b.n	80074ac <_malloc_r+0x20>
 8007518:	4622      	mov	r2, r4
 800751a:	6864      	ldr	r4, [r4, #4]
 800751c:	e7cc      	b.n	80074b8 <_malloc_r+0x2c>
 800751e:	1cc4      	adds	r4, r0, #3
 8007520:	f024 0403 	bic.w	r4, r4, #3
 8007524:	42a0      	cmp	r0, r4
 8007526:	d0e3      	beq.n	80074f0 <_malloc_r+0x64>
 8007528:	1a21      	subs	r1, r4, r0
 800752a:	4630      	mov	r0, r6
 800752c:	f000 ff82 	bl	8008434 <_sbrk_r>
 8007530:	3001      	adds	r0, #1
 8007532:	d1dd      	bne.n	80074f0 <_malloc_r+0x64>
 8007534:	e7cf      	b.n	80074d6 <_malloc_r+0x4a>
 8007536:	bf00      	nop
 8007538:	20000150 	.word	0x20000150
 800753c:	20000154 	.word	0x20000154

08007540 <__ssputs_r>:
 8007540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	688e      	ldr	r6, [r1, #8]
 8007546:	429e      	cmp	r6, r3
 8007548:	4682      	mov	sl, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4690      	mov	r8, r2
 800754e:	461f      	mov	r7, r3
 8007550:	d838      	bhi.n	80075c4 <__ssputs_r+0x84>
 8007552:	898a      	ldrh	r2, [r1, #12]
 8007554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007558:	d032      	beq.n	80075c0 <__ssputs_r+0x80>
 800755a:	6825      	ldr	r5, [r4, #0]
 800755c:	6909      	ldr	r1, [r1, #16]
 800755e:	eba5 0901 	sub.w	r9, r5, r1
 8007562:	6965      	ldr	r5, [r4, #20]
 8007564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800756c:	3301      	adds	r3, #1
 800756e:	444b      	add	r3, r9
 8007570:	106d      	asrs	r5, r5, #1
 8007572:	429d      	cmp	r5, r3
 8007574:	bf38      	it	cc
 8007576:	461d      	movcc	r5, r3
 8007578:	0553      	lsls	r3, r2, #21
 800757a:	d531      	bpl.n	80075e0 <__ssputs_r+0xa0>
 800757c:	4629      	mov	r1, r5
 800757e:	f7ff ff85 	bl	800748c <_malloc_r>
 8007582:	4606      	mov	r6, r0
 8007584:	b950      	cbnz	r0, 800759c <__ssputs_r+0x5c>
 8007586:	230c      	movs	r3, #12
 8007588:	f8ca 3000 	str.w	r3, [sl]
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007592:	81a3      	strh	r3, [r4, #12]
 8007594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759c:	6921      	ldr	r1, [r4, #16]
 800759e:	464a      	mov	r2, r9
 80075a0:	f001 fab6 	bl	8008b10 <memcpy>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	6126      	str	r6, [r4, #16]
 80075b2:	6165      	str	r5, [r4, #20]
 80075b4:	444e      	add	r6, r9
 80075b6:	eba5 0509 	sub.w	r5, r5, r9
 80075ba:	6026      	str	r6, [r4, #0]
 80075bc:	60a5      	str	r5, [r4, #8]
 80075be:	463e      	mov	r6, r7
 80075c0:	42be      	cmp	r6, r7
 80075c2:	d900      	bls.n	80075c6 <__ssputs_r+0x86>
 80075c4:	463e      	mov	r6, r7
 80075c6:	4632      	mov	r2, r6
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	4641      	mov	r1, r8
 80075cc:	f001 faae 	bl	8008b2c <memmove>
 80075d0:	68a3      	ldr	r3, [r4, #8]
 80075d2:	6822      	ldr	r2, [r4, #0]
 80075d4:	1b9b      	subs	r3, r3, r6
 80075d6:	4432      	add	r2, r6
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	2000      	movs	r0, #0
 80075de:	e7db      	b.n	8007598 <__ssputs_r+0x58>
 80075e0:	462a      	mov	r2, r5
 80075e2:	f001 fb19 	bl	8008c18 <_realloc_r>
 80075e6:	4606      	mov	r6, r0
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d1e1      	bne.n	80075b0 <__ssputs_r+0x70>
 80075ec:	6921      	ldr	r1, [r4, #16]
 80075ee:	4650      	mov	r0, sl
 80075f0:	f001 fac2 	bl	8008b78 <_free_r>
 80075f4:	e7c7      	b.n	8007586 <__ssputs_r+0x46>
	...

080075f8 <_svfiprintf_r>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	4698      	mov	r8, r3
 80075fe:	898b      	ldrh	r3, [r1, #12]
 8007600:	061b      	lsls	r3, r3, #24
 8007602:	b09d      	sub	sp, #116	; 0x74
 8007604:	4607      	mov	r7, r0
 8007606:	460d      	mov	r5, r1
 8007608:	4614      	mov	r4, r2
 800760a:	d50e      	bpl.n	800762a <_svfiprintf_r+0x32>
 800760c:	690b      	ldr	r3, [r1, #16]
 800760e:	b963      	cbnz	r3, 800762a <_svfiprintf_r+0x32>
 8007610:	2140      	movs	r1, #64	; 0x40
 8007612:	f7ff ff3b 	bl	800748c <_malloc_r>
 8007616:	6028      	str	r0, [r5, #0]
 8007618:	6128      	str	r0, [r5, #16]
 800761a:	b920      	cbnz	r0, 8007626 <_svfiprintf_r+0x2e>
 800761c:	230c      	movs	r3, #12
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007624:	e0d1      	b.n	80077ca <_svfiprintf_r+0x1d2>
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	616b      	str	r3, [r5, #20]
 800762a:	2300      	movs	r3, #0
 800762c:	9309      	str	r3, [sp, #36]	; 0x24
 800762e:	2320      	movs	r3, #32
 8007630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007634:	f8cd 800c 	str.w	r8, [sp, #12]
 8007638:	2330      	movs	r3, #48	; 0x30
 800763a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077e4 <_svfiprintf_r+0x1ec>
 800763e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007642:	f04f 0901 	mov.w	r9, #1
 8007646:	4623      	mov	r3, r4
 8007648:	469a      	mov	sl, r3
 800764a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764e:	b10a      	cbz	r2, 8007654 <_svfiprintf_r+0x5c>
 8007650:	2a25      	cmp	r2, #37	; 0x25
 8007652:	d1f9      	bne.n	8007648 <_svfiprintf_r+0x50>
 8007654:	ebba 0b04 	subs.w	fp, sl, r4
 8007658:	d00b      	beq.n	8007672 <_svfiprintf_r+0x7a>
 800765a:	465b      	mov	r3, fp
 800765c:	4622      	mov	r2, r4
 800765e:	4629      	mov	r1, r5
 8007660:	4638      	mov	r0, r7
 8007662:	f7ff ff6d 	bl	8007540 <__ssputs_r>
 8007666:	3001      	adds	r0, #1
 8007668:	f000 80aa 	beq.w	80077c0 <_svfiprintf_r+0x1c8>
 800766c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800766e:	445a      	add	r2, fp
 8007670:	9209      	str	r2, [sp, #36]	; 0x24
 8007672:	f89a 3000 	ldrb.w	r3, [sl]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80a2 	beq.w	80077c0 <_svfiprintf_r+0x1c8>
 800767c:	2300      	movs	r3, #0
 800767e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007686:	f10a 0a01 	add.w	sl, sl, #1
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	9307      	str	r3, [sp, #28]
 800768e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007692:	931a      	str	r3, [sp, #104]	; 0x68
 8007694:	4654      	mov	r4, sl
 8007696:	2205      	movs	r2, #5
 8007698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769c:	4851      	ldr	r0, [pc, #324]	; (80077e4 <_svfiprintf_r+0x1ec>)
 800769e:	f7f8 fdb7 	bl	8000210 <memchr>
 80076a2:	9a04      	ldr	r2, [sp, #16]
 80076a4:	b9d8      	cbnz	r0, 80076de <_svfiprintf_r+0xe6>
 80076a6:	06d0      	lsls	r0, r2, #27
 80076a8:	bf44      	itt	mi
 80076aa:	2320      	movmi	r3, #32
 80076ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b0:	0711      	lsls	r1, r2, #28
 80076b2:	bf44      	itt	mi
 80076b4:	232b      	movmi	r3, #43	; 0x2b
 80076b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ba:	f89a 3000 	ldrb.w	r3, [sl]
 80076be:	2b2a      	cmp	r3, #42	; 0x2a
 80076c0:	d015      	beq.n	80076ee <_svfiprintf_r+0xf6>
 80076c2:	9a07      	ldr	r2, [sp, #28]
 80076c4:	4654      	mov	r4, sl
 80076c6:	2000      	movs	r0, #0
 80076c8:	f04f 0c0a 	mov.w	ip, #10
 80076cc:	4621      	mov	r1, r4
 80076ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d2:	3b30      	subs	r3, #48	; 0x30
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d94e      	bls.n	8007776 <_svfiprintf_r+0x17e>
 80076d8:	b1b0      	cbz	r0, 8007708 <_svfiprintf_r+0x110>
 80076da:	9207      	str	r2, [sp, #28]
 80076dc:	e014      	b.n	8007708 <_svfiprintf_r+0x110>
 80076de:	eba0 0308 	sub.w	r3, r0, r8
 80076e2:	fa09 f303 	lsl.w	r3, r9, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	46a2      	mov	sl, r4
 80076ec:	e7d2      	b.n	8007694 <_svfiprintf_r+0x9c>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	9103      	str	r1, [sp, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bfbb      	ittet	lt
 80076fa:	425b      	neglt	r3, r3
 80076fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007700:	9307      	strge	r3, [sp, #28]
 8007702:	9307      	strlt	r3, [sp, #28]
 8007704:	bfb8      	it	lt
 8007706:	9204      	strlt	r2, [sp, #16]
 8007708:	7823      	ldrb	r3, [r4, #0]
 800770a:	2b2e      	cmp	r3, #46	; 0x2e
 800770c:	d10c      	bne.n	8007728 <_svfiprintf_r+0x130>
 800770e:	7863      	ldrb	r3, [r4, #1]
 8007710:	2b2a      	cmp	r3, #42	; 0x2a
 8007712:	d135      	bne.n	8007780 <_svfiprintf_r+0x188>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	1d1a      	adds	r2, r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	9203      	str	r2, [sp, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfb8      	it	lt
 8007720:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007724:	3402      	adds	r4, #2
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077f4 <_svfiprintf_r+0x1fc>
 800772c:	7821      	ldrb	r1, [r4, #0]
 800772e:	2203      	movs	r2, #3
 8007730:	4650      	mov	r0, sl
 8007732:	f7f8 fd6d 	bl	8000210 <memchr>
 8007736:	b140      	cbz	r0, 800774a <_svfiprintf_r+0x152>
 8007738:	2340      	movs	r3, #64	; 0x40
 800773a:	eba0 000a 	sub.w	r0, r0, sl
 800773e:	fa03 f000 	lsl.w	r0, r3, r0
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	4303      	orrs	r3, r0
 8007746:	3401      	adds	r4, #1
 8007748:	9304      	str	r3, [sp, #16]
 800774a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774e:	4826      	ldr	r0, [pc, #152]	; (80077e8 <_svfiprintf_r+0x1f0>)
 8007750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007754:	2206      	movs	r2, #6
 8007756:	f7f8 fd5b 	bl	8000210 <memchr>
 800775a:	2800      	cmp	r0, #0
 800775c:	d038      	beq.n	80077d0 <_svfiprintf_r+0x1d8>
 800775e:	4b23      	ldr	r3, [pc, #140]	; (80077ec <_svfiprintf_r+0x1f4>)
 8007760:	bb1b      	cbnz	r3, 80077aa <_svfiprintf_r+0x1b2>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	3307      	adds	r3, #7
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	3308      	adds	r3, #8
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	4433      	add	r3, r6
 8007772:	9309      	str	r3, [sp, #36]	; 0x24
 8007774:	e767      	b.n	8007646 <_svfiprintf_r+0x4e>
 8007776:	fb0c 3202 	mla	r2, ip, r2, r3
 800777a:	460c      	mov	r4, r1
 800777c:	2001      	movs	r0, #1
 800777e:	e7a5      	b.n	80076cc <_svfiprintf_r+0xd4>
 8007780:	2300      	movs	r3, #0
 8007782:	3401      	adds	r4, #1
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	4619      	mov	r1, r3
 8007788:	f04f 0c0a 	mov.w	ip, #10
 800778c:	4620      	mov	r0, r4
 800778e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007792:	3a30      	subs	r2, #48	; 0x30
 8007794:	2a09      	cmp	r2, #9
 8007796:	d903      	bls.n	80077a0 <_svfiprintf_r+0x1a8>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0c5      	beq.n	8007728 <_svfiprintf_r+0x130>
 800779c:	9105      	str	r1, [sp, #20]
 800779e:	e7c3      	b.n	8007728 <_svfiprintf_r+0x130>
 80077a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a4:	4604      	mov	r4, r0
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7f0      	b.n	800778c <_svfiprintf_r+0x194>
 80077aa:	ab03      	add	r3, sp, #12
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	462a      	mov	r2, r5
 80077b0:	4b0f      	ldr	r3, [pc, #60]	; (80077f0 <_svfiprintf_r+0x1f8>)
 80077b2:	a904      	add	r1, sp, #16
 80077b4:	4638      	mov	r0, r7
 80077b6:	f3af 8000 	nop.w
 80077ba:	1c42      	adds	r2, r0, #1
 80077bc:	4606      	mov	r6, r0
 80077be:	d1d6      	bne.n	800776e <_svfiprintf_r+0x176>
 80077c0:	89ab      	ldrh	r3, [r5, #12]
 80077c2:	065b      	lsls	r3, r3, #25
 80077c4:	f53f af2c 	bmi.w	8007620 <_svfiprintf_r+0x28>
 80077c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ca:	b01d      	add	sp, #116	; 0x74
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	ab03      	add	r3, sp, #12
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	462a      	mov	r2, r5
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <_svfiprintf_r+0x1f8>)
 80077d8:	a904      	add	r1, sp, #16
 80077da:	4638      	mov	r0, r7
 80077dc:	f000 fba6 	bl	8007f2c <_printf_i>
 80077e0:	e7eb      	b.n	80077ba <_svfiprintf_r+0x1c2>
 80077e2:	bf00      	nop
 80077e4:	080090b0 	.word	0x080090b0
 80077e8:	080090ba 	.word	0x080090ba
 80077ec:	00000000 	.word	0x00000000
 80077f0:	08007541 	.word	0x08007541
 80077f4:	080090b6 	.word	0x080090b6

080077f8 <_sungetc_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	1c4b      	adds	r3, r1, #1
 80077fc:	4614      	mov	r4, r2
 80077fe:	d103      	bne.n	8007808 <_sungetc_r+0x10>
 8007800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007804:	4628      	mov	r0, r5
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	8993      	ldrh	r3, [r2, #12]
 800780a:	f023 0320 	bic.w	r3, r3, #32
 800780e:	8193      	strh	r3, [r2, #12]
 8007810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	b2cd      	uxtb	r5, r1
 8007816:	b18b      	cbz	r3, 800783c <_sungetc_r+0x44>
 8007818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800781a:	4293      	cmp	r3, r2
 800781c:	dd08      	ble.n	8007830 <_sungetc_r+0x38>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	3301      	adds	r3, #1
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	e7e9      	b.n	8007804 <_sungetc_r+0xc>
 8007830:	4621      	mov	r1, r4
 8007832:	f000 ff4d 	bl	80086d0 <__submore>
 8007836:	2800      	cmp	r0, #0
 8007838:	d0f1      	beq.n	800781e <_sungetc_r+0x26>
 800783a:	e7e1      	b.n	8007800 <_sungetc_r+0x8>
 800783c:	6921      	ldr	r1, [r4, #16]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	b151      	cbz	r1, 8007858 <_sungetc_r+0x60>
 8007842:	4299      	cmp	r1, r3
 8007844:	d208      	bcs.n	8007858 <_sungetc_r+0x60>
 8007846:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800784a:	42a9      	cmp	r1, r5
 800784c:	d104      	bne.n	8007858 <_sungetc_r+0x60>
 800784e:	3b01      	subs	r3, #1
 8007850:	3201      	adds	r2, #1
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	6062      	str	r2, [r4, #4]
 8007856:	e7d5      	b.n	8007804 <_sungetc_r+0xc>
 8007858:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800785c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007860:	6363      	str	r3, [r4, #52]	; 0x34
 8007862:	2303      	movs	r3, #3
 8007864:	63a3      	str	r3, [r4, #56]	; 0x38
 8007866:	4623      	mov	r3, r4
 8007868:	f803 5f46 	strb.w	r5, [r3, #70]!
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	2301      	movs	r3, #1
 8007870:	e7dc      	b.n	800782c <_sungetc_r+0x34>

08007872 <__ssrefill_r>:
 8007872:	b510      	push	{r4, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007878:	b169      	cbz	r1, 8007896 <__ssrefill_r+0x24>
 800787a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800787e:	4299      	cmp	r1, r3
 8007880:	d001      	beq.n	8007886 <__ssrefill_r+0x14>
 8007882:	f001 f979 	bl	8008b78 <_free_r>
 8007886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	2000      	movs	r0, #0
 800788c:	6360      	str	r0, [r4, #52]	; 0x34
 800788e:	b113      	cbz	r3, 8007896 <__ssrefill_r+0x24>
 8007890:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	bd10      	pop	{r4, pc}
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	2300      	movs	r3, #0
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f043 0320 	orr.w	r3, r3, #32
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078aa:	e7f3      	b.n	8007894 <__ssrefill_r+0x22>

080078ac <__ssvfiscanf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	460c      	mov	r4, r1
 80078b2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80078b6:	2100      	movs	r1, #0
 80078b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80078bc:	49b2      	ldr	r1, [pc, #712]	; (8007b88 <__ssvfiscanf_r+0x2dc>)
 80078be:	91a0      	str	r1, [sp, #640]	; 0x280
 80078c0:	f10d 0804 	add.w	r8, sp, #4
 80078c4:	49b1      	ldr	r1, [pc, #708]	; (8007b8c <__ssvfiscanf_r+0x2e0>)
 80078c6:	4fb2      	ldr	r7, [pc, #712]	; (8007b90 <__ssvfiscanf_r+0x2e4>)
 80078c8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8007b94 <__ssvfiscanf_r+0x2e8>
 80078cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80078d0:	4606      	mov	r6, r0
 80078d2:	91a1      	str	r1, [sp, #644]	; 0x284
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f892 a000 	ldrb.w	sl, [r2]
 80078da:	f1ba 0f00 	cmp.w	sl, #0
 80078de:	f000 8151 	beq.w	8007b84 <__ssvfiscanf_r+0x2d8>
 80078e2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80078e6:	f013 0308 	ands.w	r3, r3, #8
 80078ea:	f102 0501 	add.w	r5, r2, #1
 80078ee:	d019      	beq.n	8007924 <__ssvfiscanf_r+0x78>
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd0f      	ble.n	8007916 <__ssvfiscanf_r+0x6a>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	5cba      	ldrb	r2, [r7, r2]
 80078fc:	0712      	lsls	r2, r2, #28
 80078fe:	d401      	bmi.n	8007904 <__ssvfiscanf_r+0x58>
 8007900:	462a      	mov	r2, r5
 8007902:	e7e8      	b.n	80078d6 <__ssvfiscanf_r+0x2a>
 8007904:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007906:	3201      	adds	r2, #1
 8007908:	9245      	str	r2, [sp, #276]	; 0x114
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	3301      	adds	r3, #1
 800790e:	3a01      	subs	r2, #1
 8007910:	6062      	str	r2, [r4, #4]
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	e7ec      	b.n	80078f0 <__ssvfiscanf_r+0x44>
 8007916:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007918:	4621      	mov	r1, r4
 800791a:	4630      	mov	r0, r6
 800791c:	4798      	blx	r3
 800791e:	2800      	cmp	r0, #0
 8007920:	d0e9      	beq.n	80078f6 <__ssvfiscanf_r+0x4a>
 8007922:	e7ed      	b.n	8007900 <__ssvfiscanf_r+0x54>
 8007924:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007928:	f040 8083 	bne.w	8007a32 <__ssvfiscanf_r+0x186>
 800792c:	9341      	str	r3, [sp, #260]	; 0x104
 800792e:	9343      	str	r3, [sp, #268]	; 0x10c
 8007930:	7853      	ldrb	r3, [r2, #1]
 8007932:	2b2a      	cmp	r3, #42	; 0x2a
 8007934:	bf02      	ittt	eq
 8007936:	2310      	moveq	r3, #16
 8007938:	1c95      	addeq	r5, r2, #2
 800793a:	9341      	streq	r3, [sp, #260]	; 0x104
 800793c:	220a      	movs	r2, #10
 800793e:	46ab      	mov	fp, r5
 8007940:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007944:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007948:	2b09      	cmp	r3, #9
 800794a:	d91d      	bls.n	8007988 <__ssvfiscanf_r+0xdc>
 800794c:	4891      	ldr	r0, [pc, #580]	; (8007b94 <__ssvfiscanf_r+0x2e8>)
 800794e:	2203      	movs	r2, #3
 8007950:	f7f8 fc5e 	bl	8000210 <memchr>
 8007954:	b140      	cbz	r0, 8007968 <__ssvfiscanf_r+0xbc>
 8007956:	2301      	movs	r3, #1
 8007958:	eba0 0009 	sub.w	r0, r0, r9
 800795c:	fa03 f000 	lsl.w	r0, r3, r0
 8007960:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007962:	4318      	orrs	r0, r3
 8007964:	9041      	str	r0, [sp, #260]	; 0x104
 8007966:	465d      	mov	r5, fp
 8007968:	f815 3b01 	ldrb.w	r3, [r5], #1
 800796c:	2b78      	cmp	r3, #120	; 0x78
 800796e:	d806      	bhi.n	800797e <__ssvfiscanf_r+0xd2>
 8007970:	2b57      	cmp	r3, #87	; 0x57
 8007972:	d810      	bhi.n	8007996 <__ssvfiscanf_r+0xea>
 8007974:	2b25      	cmp	r3, #37	; 0x25
 8007976:	d05c      	beq.n	8007a32 <__ssvfiscanf_r+0x186>
 8007978:	d856      	bhi.n	8007a28 <__ssvfiscanf_r+0x17c>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d074      	beq.n	8007a68 <__ssvfiscanf_r+0x1bc>
 800797e:	2303      	movs	r3, #3
 8007980:	9347      	str	r3, [sp, #284]	; 0x11c
 8007982:	230a      	movs	r3, #10
 8007984:	9342      	str	r3, [sp, #264]	; 0x108
 8007986:	e081      	b.n	8007a8c <__ssvfiscanf_r+0x1e0>
 8007988:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800798a:	fb02 1303 	mla	r3, r2, r3, r1
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	9343      	str	r3, [sp, #268]	; 0x10c
 8007992:	465d      	mov	r5, fp
 8007994:	e7d3      	b.n	800793e <__ssvfiscanf_r+0x92>
 8007996:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800799a:	2a20      	cmp	r2, #32
 800799c:	d8ef      	bhi.n	800797e <__ssvfiscanf_r+0xd2>
 800799e:	a101      	add	r1, pc, #4	; (adr r1, 80079a4 <__ssvfiscanf_r+0xf8>)
 80079a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079a4:	08007a77 	.word	0x08007a77
 80079a8:	0800797f 	.word	0x0800797f
 80079ac:	0800797f 	.word	0x0800797f
 80079b0:	08007ad5 	.word	0x08007ad5
 80079b4:	0800797f 	.word	0x0800797f
 80079b8:	0800797f 	.word	0x0800797f
 80079bc:	0800797f 	.word	0x0800797f
 80079c0:	0800797f 	.word	0x0800797f
 80079c4:	0800797f 	.word	0x0800797f
 80079c8:	0800797f 	.word	0x0800797f
 80079cc:	0800797f 	.word	0x0800797f
 80079d0:	08007aeb 	.word	0x08007aeb
 80079d4:	08007ac1 	.word	0x08007ac1
 80079d8:	08007a2f 	.word	0x08007a2f
 80079dc:	08007a2f 	.word	0x08007a2f
 80079e0:	08007a2f 	.word	0x08007a2f
 80079e4:	0800797f 	.word	0x0800797f
 80079e8:	08007ac5 	.word	0x08007ac5
 80079ec:	0800797f 	.word	0x0800797f
 80079f0:	0800797f 	.word	0x0800797f
 80079f4:	0800797f 	.word	0x0800797f
 80079f8:	0800797f 	.word	0x0800797f
 80079fc:	08007afb 	.word	0x08007afb
 8007a00:	08007acd 	.word	0x08007acd
 8007a04:	08007a6f 	.word	0x08007a6f
 8007a08:	0800797f 	.word	0x0800797f
 8007a0c:	0800797f 	.word	0x0800797f
 8007a10:	08007af7 	.word	0x08007af7
 8007a14:	0800797f 	.word	0x0800797f
 8007a18:	08007ac1 	.word	0x08007ac1
 8007a1c:	0800797f 	.word	0x0800797f
 8007a20:	0800797f 	.word	0x0800797f
 8007a24:	08007a77 	.word	0x08007a77
 8007a28:	3b45      	subs	r3, #69	; 0x45
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d8a7      	bhi.n	800797e <__ssvfiscanf_r+0xd2>
 8007a2e:	2305      	movs	r3, #5
 8007a30:	e02b      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd0d      	ble.n	8007a54 <__ssvfiscanf_r+0x1a8>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	4552      	cmp	r2, sl
 8007a3e:	f040 80a1 	bne.w	8007b84 <__ssvfiscanf_r+0x2d8>
 8007a42:	3301      	adds	r3, #1
 8007a44:	6862      	ldr	r2, [r4, #4]
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	6062      	str	r2, [r4, #4]
 8007a50:	9345      	str	r3, [sp, #276]	; 0x114
 8007a52:	e755      	b.n	8007900 <__ssvfiscanf_r+0x54>
 8007a54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a56:	4621      	mov	r1, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4798      	blx	r3
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d0eb      	beq.n	8007a38 <__ssvfiscanf_r+0x18c>
 8007a60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f040 8084 	bne.w	8007b70 <__ssvfiscanf_r+0x2c4>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6c:	e086      	b.n	8007b7c <__ssvfiscanf_r+0x2d0>
 8007a6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007a70:	f042 0220 	orr.w	r2, r2, #32
 8007a74:	9241      	str	r2, [sp, #260]	; 0x104
 8007a76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a7c:	9241      	str	r2, [sp, #260]	; 0x104
 8007a7e:	2210      	movs	r2, #16
 8007a80:	2b6f      	cmp	r3, #111	; 0x6f
 8007a82:	9242      	str	r2, [sp, #264]	; 0x108
 8007a84:	bf34      	ite	cc
 8007a86:	2303      	movcc	r3, #3
 8007a88:	2304      	movcs	r3, #4
 8007a8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd41      	ble.n	8007b16 <__ssvfiscanf_r+0x26a>
 8007a92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007a94:	0659      	lsls	r1, r3, #25
 8007a96:	d404      	bmi.n	8007aa2 <__ssvfiscanf_r+0x1f6>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	5cba      	ldrb	r2, [r7, r2]
 8007a9e:	0712      	lsls	r2, r2, #28
 8007aa0:	d440      	bmi.n	8007b24 <__ssvfiscanf_r+0x278>
 8007aa2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	dc4f      	bgt.n	8007b48 <__ssvfiscanf_r+0x29c>
 8007aa8:	466b      	mov	r3, sp
 8007aaa:	4622      	mov	r2, r4
 8007aac:	a941      	add	r1, sp, #260	; 0x104
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f000 fb62 	bl	8008178 <_scanf_chars>
 8007ab4:	2801      	cmp	r0, #1
 8007ab6:	d065      	beq.n	8007b84 <__ssvfiscanf_r+0x2d8>
 8007ab8:	2802      	cmp	r0, #2
 8007aba:	f47f af21 	bne.w	8007900 <__ssvfiscanf_r+0x54>
 8007abe:	e7cf      	b.n	8007a60 <__ssvfiscanf_r+0x1b4>
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	e7dd      	b.n	8007a80 <__ssvfiscanf_r+0x1d4>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9342      	str	r3, [sp, #264]	; 0x108
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e7de      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007acc:	2308      	movs	r3, #8
 8007ace:	9342      	str	r3, [sp, #264]	; 0x108
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	e7da      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f000 fcbc 	bl	8008454 <__sccl>
 8007adc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	9341      	str	r3, [sp, #260]	; 0x104
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7cf      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007aea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	9341      	str	r3, [sp, #260]	; 0x104
 8007af2:	2300      	movs	r3, #0
 8007af4:	e7c9      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e7c7      	b.n	8007a8a <__ssvfiscanf_r+0x1de>
 8007afa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007afc:	06c3      	lsls	r3, r0, #27
 8007afe:	f53f aeff 	bmi.w	8007900 <__ssvfiscanf_r+0x54>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b06:	1d19      	adds	r1, r3, #4
 8007b08:	9100      	str	r1, [sp, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	07c0      	lsls	r0, r0, #31
 8007b0e:	bf4c      	ite	mi
 8007b10:	801a      	strhmi	r2, [r3, #0]
 8007b12:	601a      	strpl	r2, [r3, #0]
 8007b14:	e6f4      	b.n	8007900 <__ssvfiscanf_r+0x54>
 8007b16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4798      	blx	r3
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0b7      	beq.n	8007a92 <__ssvfiscanf_r+0x1e6>
 8007b22:	e79d      	b.n	8007a60 <__ssvfiscanf_r+0x1b4>
 8007b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b26:	3201      	adds	r2, #1
 8007b28:	9245      	str	r2, [sp, #276]	; 0x114
 8007b2a:	6862      	ldr	r2, [r4, #4]
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	6062      	str	r2, [r4, #4]
 8007b32:	dd02      	ble.n	8007b3a <__ssvfiscanf_r+0x28e>
 8007b34:	3301      	adds	r3, #1
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	e7ae      	b.n	8007a98 <__ssvfiscanf_r+0x1ec>
 8007b3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4630      	mov	r0, r6
 8007b40:	4798      	blx	r3
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0a8      	beq.n	8007a98 <__ssvfiscanf_r+0x1ec>
 8007b46:	e78b      	b.n	8007a60 <__ssvfiscanf_r+0x1b4>
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	dc06      	bgt.n	8007b5a <__ssvfiscanf_r+0x2ae>
 8007b4c:	466b      	mov	r3, sp
 8007b4e:	4622      	mov	r2, r4
 8007b50:	a941      	add	r1, sp, #260	; 0x104
 8007b52:	4630      	mov	r0, r6
 8007b54:	f000 fb68 	bl	8008228 <_scanf_i>
 8007b58:	e7ac      	b.n	8007ab4 <__ssvfiscanf_r+0x208>
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <__ssvfiscanf_r+0x2ec>)
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f43f aecf 	beq.w	8007900 <__ssvfiscanf_r+0x54>
 8007b62:	466b      	mov	r3, sp
 8007b64:	4622      	mov	r2, r4
 8007b66:	a941      	add	r1, sp, #260	; 0x104
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f3af 8000 	nop.w
 8007b6e:	e7a1      	b.n	8007ab4 <__ssvfiscanf_r+0x208>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b76:	bf18      	it	ne
 8007b78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007b7c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007b86:	e7f9      	b.n	8007b7c <__ssvfiscanf_r+0x2d0>
 8007b88:	080077f9 	.word	0x080077f9
 8007b8c:	08007873 	.word	0x08007873
 8007b90:	080090ff 	.word	0x080090ff
 8007b94:	080090b6 	.word	0x080090b6
 8007b98:	00000000 	.word	0x00000000

08007b9c <__sfputc_r>:
 8007b9c:	6893      	ldr	r3, [r2, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	b410      	push	{r4}
 8007ba4:	6093      	str	r3, [r2, #8]
 8007ba6:	da08      	bge.n	8007bba <__sfputc_r+0x1e>
 8007ba8:	6994      	ldr	r4, [r2, #24]
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	db01      	blt.n	8007bb2 <__sfputc_r+0x16>
 8007bae:	290a      	cmp	r1, #10
 8007bb0:	d103      	bne.n	8007bba <__sfputc_r+0x1e>
 8007bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bb6:	f000 bdc5 	b.w	8008744 <__swbuf_r>
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	1c58      	adds	r0, r3, #1
 8007bbe:	6010      	str	r0, [r2, #0]
 8007bc0:	7019      	strb	r1, [r3, #0]
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <__sfputs_r>:
 8007bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	18d5      	adds	r5, r2, r3
 8007bd4:	42ac      	cmp	r4, r5
 8007bd6:	d101      	bne.n	8007bdc <__sfputs_r+0x12>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e007      	b.n	8007bec <__sfputs_r+0x22>
 8007bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be0:	463a      	mov	r2, r7
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff ffda 	bl	8007b9c <__sfputc_r>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d1f3      	bne.n	8007bd4 <__sfputs_r+0xa>
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf0 <_vfiprintf_r>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	b09d      	sub	sp, #116	; 0x74
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	4698      	mov	r8, r3
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	b118      	cbz	r0, 8007c08 <_vfiprintf_r+0x18>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	b90b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x18>
 8007c04:	f7ff fb90 	bl	8007328 <__sinit>
 8007c08:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <_vfiprintf_r+0x240>)
 8007c0a:	429d      	cmp	r5, r3
 8007c0c:	d11b      	bne.n	8007c46 <_vfiprintf_r+0x56>
 8007c0e:	6875      	ldr	r5, [r6, #4]
 8007c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c12:	07d9      	lsls	r1, r3, #31
 8007c14:	d405      	bmi.n	8007c22 <_vfiprintf_r+0x32>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	059a      	lsls	r2, r3, #22
 8007c1a:	d402      	bmi.n	8007c22 <_vfiprintf_r+0x32>
 8007c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c1e:	f7ff fc21 	bl	8007464 <__retarget_lock_acquire_recursive>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	071b      	lsls	r3, r3, #28
 8007c26:	d501      	bpl.n	8007c2c <_vfiprintf_r+0x3c>
 8007c28:	692b      	ldr	r3, [r5, #16]
 8007c2a:	b9eb      	cbnz	r3, 8007c68 <_vfiprintf_r+0x78>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 fdda 	bl	80087e8 <__swsetup_r>
 8007c34:	b1c0      	cbz	r0, 8007c68 <_vfiprintf_r+0x78>
 8007c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c38:	07dc      	lsls	r4, r3, #31
 8007c3a:	d50e      	bpl.n	8007c5a <_vfiprintf_r+0x6a>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c40:	b01d      	add	sp, #116	; 0x74
 8007c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c46:	4b7b      	ldr	r3, [pc, #492]	; (8007e34 <_vfiprintf_r+0x244>)
 8007c48:	429d      	cmp	r5, r3
 8007c4a:	d101      	bne.n	8007c50 <_vfiprintf_r+0x60>
 8007c4c:	68b5      	ldr	r5, [r6, #8]
 8007c4e:	e7df      	b.n	8007c10 <_vfiprintf_r+0x20>
 8007c50:	4b79      	ldr	r3, [pc, #484]	; (8007e38 <_vfiprintf_r+0x248>)
 8007c52:	429d      	cmp	r5, r3
 8007c54:	bf08      	it	eq
 8007c56:	68f5      	ldreq	r5, [r6, #12]
 8007c58:	e7da      	b.n	8007c10 <_vfiprintf_r+0x20>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	0598      	lsls	r0, r3, #22
 8007c5e:	d4ed      	bmi.n	8007c3c <_vfiprintf_r+0x4c>
 8007c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c62:	f7ff fc00 	bl	8007466 <__retarget_lock_release_recursive>
 8007c66:	e7e9      	b.n	8007c3c <_vfiprintf_r+0x4c>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c76:	2330      	movs	r3, #48	; 0x30
 8007c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e3c <_vfiprintf_r+0x24c>
 8007c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c80:	f04f 0901 	mov.w	r9, #1
 8007c84:	4623      	mov	r3, r4
 8007c86:	469a      	mov	sl, r3
 8007c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8c:	b10a      	cbz	r2, 8007c92 <_vfiprintf_r+0xa2>
 8007c8e:	2a25      	cmp	r2, #37	; 0x25
 8007c90:	d1f9      	bne.n	8007c86 <_vfiprintf_r+0x96>
 8007c92:	ebba 0b04 	subs.w	fp, sl, r4
 8007c96:	d00b      	beq.n	8007cb0 <_vfiprintf_r+0xc0>
 8007c98:	465b      	mov	r3, fp
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ff93 	bl	8007bca <__sfputs_r>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f000 80aa 	beq.w	8007dfe <_vfiprintf_r+0x20e>
 8007caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cac:	445a      	add	r2, fp
 8007cae:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80a2 	beq.w	8007dfe <_vfiprintf_r+0x20e>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4858      	ldr	r0, [pc, #352]	; (8007e3c <_vfiprintf_r+0x24c>)
 8007cdc:	f7f8 fa98 	bl	8000210 <memchr>
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	b9d8      	cbnz	r0, 8007d1c <_vfiprintf_r+0x12c>
 8007ce4:	06d1      	lsls	r1, r2, #27
 8007ce6:	bf44      	itt	mi
 8007ce8:	2320      	movmi	r3, #32
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	0713      	lsls	r3, r2, #28
 8007cf0:	bf44      	itt	mi
 8007cf2:	232b      	movmi	r3, #43	; 0x2b
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cfe:	d015      	beq.n	8007d2c <_vfiprintf_r+0x13c>
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	4654      	mov	r4, sl
 8007d04:	2000      	movs	r0, #0
 8007d06:	f04f 0c0a 	mov.w	ip, #10
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d10:	3b30      	subs	r3, #48	; 0x30
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	d94e      	bls.n	8007db4 <_vfiprintf_r+0x1c4>
 8007d16:	b1b0      	cbz	r0, 8007d46 <_vfiprintf_r+0x156>
 8007d18:	9207      	str	r2, [sp, #28]
 8007d1a:	e014      	b.n	8007d46 <_vfiprintf_r+0x156>
 8007d1c:	eba0 0308 	sub.w	r3, r0, r8
 8007d20:	fa09 f303 	lsl.w	r3, r9, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	46a2      	mov	sl, r4
 8007d2a:	e7d2      	b.n	8007cd2 <_vfiprintf_r+0xe2>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9103      	str	r1, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbb      	ittet	lt
 8007d38:	425b      	neglt	r3, r3
 8007d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d3e:	9307      	strge	r3, [sp, #28]
 8007d40:	9307      	strlt	r3, [sp, #28]
 8007d42:	bfb8      	it	lt
 8007d44:	9204      	strlt	r2, [sp, #16]
 8007d46:	7823      	ldrb	r3, [r4, #0]
 8007d48:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4a:	d10c      	bne.n	8007d66 <_vfiprintf_r+0x176>
 8007d4c:	7863      	ldrb	r3, [r4, #1]
 8007d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d50:	d135      	bne.n	8007dbe <_vfiprintf_r+0x1ce>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9203      	str	r2, [sp, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfb8      	it	lt
 8007d5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d62:	3402      	adds	r4, #2
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e4c <_vfiprintf_r+0x25c>
 8007d6a:	7821      	ldrb	r1, [r4, #0]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f7f8 fa4e 	bl	8000210 <memchr>
 8007d74:	b140      	cbz	r0, 8007d88 <_vfiprintf_r+0x198>
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	eba0 000a 	sub.w	r0, r0, sl
 8007d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	4303      	orrs	r3, r0
 8007d84:	3401      	adds	r4, #1
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8c:	482c      	ldr	r0, [pc, #176]	; (8007e40 <_vfiprintf_r+0x250>)
 8007d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d92:	2206      	movs	r2, #6
 8007d94:	f7f8 fa3c 	bl	8000210 <memchr>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d03f      	beq.n	8007e1c <_vfiprintf_r+0x22c>
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <_vfiprintf_r+0x254>)
 8007d9e:	bb1b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x1f8>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	3307      	adds	r3, #7
 8007da4:	f023 0307 	bic.w	r3, r3, #7
 8007da8:	3308      	adds	r3, #8
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dae:	443b      	add	r3, r7
 8007db0:	9309      	str	r3, [sp, #36]	; 0x24
 8007db2:	e767      	b.n	8007c84 <_vfiprintf_r+0x94>
 8007db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db8:	460c      	mov	r4, r1
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e7a5      	b.n	8007d0a <_vfiprintf_r+0x11a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f04f 0c0a 	mov.w	ip, #10
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd0:	3a30      	subs	r2, #48	; 0x30
 8007dd2:	2a09      	cmp	r2, #9
 8007dd4:	d903      	bls.n	8007dde <_vfiprintf_r+0x1ee>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0c5      	beq.n	8007d66 <_vfiprintf_r+0x176>
 8007dda:	9105      	str	r1, [sp, #20]
 8007ddc:	e7c3      	b.n	8007d66 <_vfiprintf_r+0x176>
 8007dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de2:	4604      	mov	r4, r0
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7f0      	b.n	8007dca <_vfiprintf_r+0x1da>
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b16      	ldr	r3, [pc, #88]	; (8007e48 <_vfiprintf_r+0x258>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4630      	mov	r0, r6
 8007df4:	f3af 8000 	nop.w
 8007df8:	4607      	mov	r7, r0
 8007dfa:	1c78      	adds	r0, r7, #1
 8007dfc:	d1d6      	bne.n	8007dac <_vfiprintf_r+0x1bc>
 8007dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e00:	07d9      	lsls	r1, r3, #31
 8007e02:	d405      	bmi.n	8007e10 <_vfiprintf_r+0x220>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	059a      	lsls	r2, r3, #22
 8007e08:	d402      	bmi.n	8007e10 <_vfiprintf_r+0x220>
 8007e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0c:	f7ff fb2b 	bl	8007466 <__retarget_lock_release_recursive>
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	065b      	lsls	r3, r3, #25
 8007e14:	f53f af12 	bmi.w	8007c3c <_vfiprintf_r+0x4c>
 8007e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1a:	e711      	b.n	8007c40 <_vfiprintf_r+0x50>
 8007e1c:	ab03      	add	r3, sp, #12
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	462a      	mov	r2, r5
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <_vfiprintf_r+0x258>)
 8007e24:	a904      	add	r1, sp, #16
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f880 	bl	8007f2c <_printf_i>
 8007e2c:	e7e4      	b.n	8007df8 <_vfiprintf_r+0x208>
 8007e2e:	bf00      	nop
 8007e30:	08009070 	.word	0x08009070
 8007e34:	08009090 	.word	0x08009090
 8007e38:	08009050 	.word	0x08009050
 8007e3c:	080090b0 	.word	0x080090b0
 8007e40:	080090ba 	.word	0x080090ba
 8007e44:	00000000 	.word	0x00000000
 8007e48:	08007bcb 	.word	0x08007bcb
 8007e4c:	080090b6 	.word	0x080090b6

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4699      	mov	r9, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bfb8      	it	lt
 8007e64:	4613      	movlt	r3, r2
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc26      	bgt.n	8007ee6 <_printf_common+0x96>
 8007e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e9c:	1e13      	subs	r3, r2, #0
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d42b      	bmi.n	8007f00 <_printf_common+0xb0>
 8007ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eac:	4649      	mov	r1, r9
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c0      	blx	r8
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d01e      	beq.n	8007ef4 <_printf_common+0xa4>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	68e5      	ldr	r5, [r4, #12]
 8007eba:	6832      	ldr	r2, [r6, #0]
 8007ebc:	f003 0306 	and.w	r3, r3, #6
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	bf08      	it	eq
 8007ec4:	1aad      	subeq	r5, r5, r2
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	bf0c      	ite	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	2500      	movne	r5, #0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bfc4      	itt	gt
 8007ed6:	1a9b      	subgt	r3, r3, r2
 8007ed8:	18ed      	addgt	r5, r5, r3
 8007eda:	2600      	movs	r6, #0
 8007edc:	341a      	adds	r4, #26
 8007ede:	42b5      	cmp	r5, r6
 8007ee0:	d11a      	bne.n	8007f18 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e008      	b.n	8007ef8 <_printf_common+0xa8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4649      	mov	r1, r9
 8007eec:	4638      	mov	r0, r7
 8007eee:	47c0      	blx	r8
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d103      	bne.n	8007efc <_printf_common+0xac>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7c6      	b.n	8007e8e <_printf_common+0x3e>
 8007f00:	18e1      	adds	r1, r4, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	2030      	movs	r0, #48	; 0x30
 8007f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f0a:	4422      	add	r2, r4
 8007f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f14:	3302      	adds	r3, #2
 8007f16:	e7c7      	b.n	8007ea8 <_printf_common+0x58>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0e6      	beq.n	8007ef4 <_printf_common+0xa4>
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7d9      	b.n	8007ede <_printf_common+0x8e>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	4691      	mov	r9, r2
 8007f34:	7e27      	ldrb	r7, [r4, #24]
 8007f36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f38:	2f78      	cmp	r7, #120	; 0x78
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	469a      	mov	sl, r3
 8007f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f42:	d807      	bhi.n	8007f54 <_printf_i+0x28>
 8007f44:	2f62      	cmp	r7, #98	; 0x62
 8007f46:	d80a      	bhi.n	8007f5e <_printf_i+0x32>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	f000 80d8 	beq.w	80080fe <_printf_i+0x1d2>
 8007f4e:	2f58      	cmp	r7, #88	; 0x58
 8007f50:	f000 80a3 	beq.w	800809a <_printf_i+0x16e>
 8007f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f5c:	e03a      	b.n	8007fd4 <_printf_i+0xa8>
 8007f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f62:	2b15      	cmp	r3, #21
 8007f64:	d8f6      	bhi.n	8007f54 <_printf_i+0x28>
 8007f66:	a001      	add	r0, pc, #4	; (adr r0, 8007f6c <_printf_i+0x40>)
 8007f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007f55 	.word	0x08007f55
 8007f78:	08007f55 	.word	0x08007f55
 8007f7c:	08007f55 	.word	0x08007f55
 8007f80:	08007f55 	.word	0x08007f55
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007f55 	.word	0x08007f55
 8007f8c:	08007f55 	.word	0x08007f55
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	080080e5 	.word	0x080080e5
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	080080c7 	.word	0x080080c7
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	08008107 	.word	0x08008107
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	080080cf 	.word	0x080080cf
 8007fc4:	680b      	ldr	r3, [r1, #0]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	600a      	str	r2, [r1, #0]
 8007fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0a3      	b.n	8008120 <_printf_i+0x1f4>
 8007fd8:	6825      	ldr	r5, [r4, #0]
 8007fda:	6808      	ldr	r0, [r1, #0]
 8007fdc:	062e      	lsls	r6, r5, #24
 8007fde:	f100 0304 	add.w	r3, r0, #4
 8007fe2:	d50a      	bpl.n	8007ffa <_printf_i+0xce>
 8007fe4:	6805      	ldr	r5, [r0, #0]
 8007fe6:	600b      	str	r3, [r1, #0]
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	da03      	bge.n	8007ff4 <_printf_i+0xc8>
 8007fec:	232d      	movs	r3, #45	; 0x2d
 8007fee:	426d      	negs	r5, r5
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff4:	485e      	ldr	r0, [pc, #376]	; (8008170 <_printf_i+0x244>)
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	e019      	b.n	800802e <_printf_i+0x102>
 8007ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ffe:	6805      	ldr	r5, [r0, #0]
 8008000:	600b      	str	r3, [r1, #0]
 8008002:	bf18      	it	ne
 8008004:	b22d      	sxthne	r5, r5
 8008006:	e7ef      	b.n	8007fe8 <_printf_i+0xbc>
 8008008:	680b      	ldr	r3, [r1, #0]
 800800a:	6825      	ldr	r5, [r4, #0]
 800800c:	1d18      	adds	r0, r3, #4
 800800e:	6008      	str	r0, [r1, #0]
 8008010:	0628      	lsls	r0, r5, #24
 8008012:	d501      	bpl.n	8008018 <_printf_i+0xec>
 8008014:	681d      	ldr	r5, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0xf2>
 8008018:	0669      	lsls	r1, r5, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0xe8>
 800801c:	881d      	ldrh	r5, [r3, #0]
 800801e:	4854      	ldr	r0, [pc, #336]	; (8008170 <_printf_i+0x244>)
 8008020:	2f6f      	cmp	r7, #111	; 0x6f
 8008022:	bf0c      	ite	eq
 8008024:	2308      	moveq	r3, #8
 8008026:	230a      	movne	r3, #10
 8008028:	2100      	movs	r1, #0
 800802a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800802e:	6866      	ldr	r6, [r4, #4]
 8008030:	60a6      	str	r6, [r4, #8]
 8008032:	2e00      	cmp	r6, #0
 8008034:	bfa2      	ittt	ge
 8008036:	6821      	ldrge	r1, [r4, #0]
 8008038:	f021 0104 	bicge.w	r1, r1, #4
 800803c:	6021      	strge	r1, [r4, #0]
 800803e:	b90d      	cbnz	r5, 8008044 <_printf_i+0x118>
 8008040:	2e00      	cmp	r6, #0
 8008042:	d04d      	beq.n	80080e0 <_printf_i+0x1b4>
 8008044:	4616      	mov	r6, r2
 8008046:	fbb5 f1f3 	udiv	r1, r5, r3
 800804a:	fb03 5711 	mls	r7, r3, r1, r5
 800804e:	5dc7      	ldrb	r7, [r0, r7]
 8008050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008054:	462f      	mov	r7, r5
 8008056:	42bb      	cmp	r3, r7
 8008058:	460d      	mov	r5, r1
 800805a:	d9f4      	bls.n	8008046 <_printf_i+0x11a>
 800805c:	2b08      	cmp	r3, #8
 800805e:	d10b      	bne.n	8008078 <_printf_i+0x14c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07df      	lsls	r7, r3, #31
 8008064:	d508      	bpl.n	8008078 <_printf_i+0x14c>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	6861      	ldr	r1, [r4, #4]
 800806a:	4299      	cmp	r1, r3
 800806c:	bfde      	ittt	le
 800806e:	2330      	movle	r3, #48	; 0x30
 8008070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008074:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008078:	1b92      	subs	r2, r2, r6
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	f8cd a000 	str.w	sl, [sp]
 8008080:	464b      	mov	r3, r9
 8008082:	aa03      	add	r2, sp, #12
 8008084:	4621      	mov	r1, r4
 8008086:	4640      	mov	r0, r8
 8008088:	f7ff fee2 	bl	8007e50 <_printf_common>
 800808c:	3001      	adds	r0, #1
 800808e:	d14c      	bne.n	800812a <_printf_i+0x1fe>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008094:	b004      	add	sp, #16
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	4835      	ldr	r0, [pc, #212]	; (8008170 <_printf_i+0x244>)
 800809c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	680e      	ldr	r6, [r1, #0]
 80080a4:	061f      	lsls	r7, r3, #24
 80080a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80080aa:	600e      	str	r6, [r1, #0]
 80080ac:	d514      	bpl.n	80080d8 <_printf_i+0x1ac>
 80080ae:	07d9      	lsls	r1, r3, #31
 80080b0:	bf44      	itt	mi
 80080b2:	f043 0320 	orrmi.w	r3, r3, #32
 80080b6:	6023      	strmi	r3, [r4, #0]
 80080b8:	b91d      	cbnz	r5, 80080c2 <_printf_i+0x196>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f023 0320 	bic.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	2310      	movs	r3, #16
 80080c4:	e7b0      	b.n	8008028 <_printf_i+0xfc>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f043 0320 	orr.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	2378      	movs	r3, #120	; 0x78
 80080d0:	4828      	ldr	r0, [pc, #160]	; (8008174 <_printf_i+0x248>)
 80080d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080d6:	e7e3      	b.n	80080a0 <_printf_i+0x174>
 80080d8:	065e      	lsls	r6, r3, #25
 80080da:	bf48      	it	mi
 80080dc:	b2ad      	uxthmi	r5, r5
 80080de:	e7e6      	b.n	80080ae <_printf_i+0x182>
 80080e0:	4616      	mov	r6, r2
 80080e2:	e7bb      	b.n	800805c <_printf_i+0x130>
 80080e4:	680b      	ldr	r3, [r1, #0]
 80080e6:	6826      	ldr	r6, [r4, #0]
 80080e8:	6960      	ldr	r0, [r4, #20]
 80080ea:	1d1d      	adds	r5, r3, #4
 80080ec:	600d      	str	r5, [r1, #0]
 80080ee:	0635      	lsls	r5, r6, #24
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0x1cc>
 80080f4:	6018      	str	r0, [r3, #0]
 80080f6:	e002      	b.n	80080fe <_printf_i+0x1d2>
 80080f8:	0671      	lsls	r1, r6, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0x1c8>
 80080fc:	8018      	strh	r0, [r3, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	4616      	mov	r6, r2
 8008104:	e7ba      	b.n	800807c <_printf_i+0x150>
 8008106:	680b      	ldr	r3, [r1, #0]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	600a      	str	r2, [r1, #0]
 800810c:	681e      	ldr	r6, [r3, #0]
 800810e:	6862      	ldr	r2, [r4, #4]
 8008110:	2100      	movs	r1, #0
 8008112:	4630      	mov	r0, r6
 8008114:	f7f8 f87c 	bl	8000210 <memchr>
 8008118:	b108      	cbz	r0, 800811e <_printf_i+0x1f2>
 800811a:	1b80      	subs	r0, r0, r6
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	2300      	movs	r3, #0
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008128:	e7a8      	b.n	800807c <_printf_i+0x150>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d0ab      	beq.n	8008090 <_printf_i+0x164>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	079b      	lsls	r3, r3, #30
 800813c:	d413      	bmi.n	8008166 <_printf_i+0x23a>
 800813e:	68e0      	ldr	r0, [r4, #12]
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	4298      	cmp	r0, r3
 8008144:	bfb8      	it	lt
 8008146:	4618      	movlt	r0, r3
 8008148:	e7a4      	b.n	8008094 <_printf_i+0x168>
 800814a:	2301      	movs	r3, #1
 800814c:	4632      	mov	r2, r6
 800814e:	4649      	mov	r1, r9
 8008150:	4640      	mov	r0, r8
 8008152:	47d0      	blx	sl
 8008154:	3001      	adds	r0, #1
 8008156:	d09b      	beq.n	8008090 <_printf_i+0x164>
 8008158:	3501      	adds	r5, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	9903      	ldr	r1, [sp, #12]
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	42ab      	cmp	r3, r5
 8008162:	dcf2      	bgt.n	800814a <_printf_i+0x21e>
 8008164:	e7eb      	b.n	800813e <_printf_i+0x212>
 8008166:	2500      	movs	r5, #0
 8008168:	f104 0619 	add.w	r6, r4, #25
 800816c:	e7f5      	b.n	800815a <_printf_i+0x22e>
 800816e:	bf00      	nop
 8008170:	080090c1 	.word	0x080090c1
 8008174:	080090d2 	.word	0x080090d2

08008178 <_scanf_chars>:
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817c:	4615      	mov	r5, r2
 800817e:	688a      	ldr	r2, [r1, #8]
 8008180:	4680      	mov	r8, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b932      	cbnz	r2, 8008194 <_scanf_chars+0x1c>
 8008186:	698a      	ldr	r2, [r1, #24]
 8008188:	2a00      	cmp	r2, #0
 800818a:	bf0c      	ite	eq
 800818c:	2201      	moveq	r2, #1
 800818e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008192:	608a      	str	r2, [r1, #8]
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008224 <_scanf_chars+0xac>
 800819a:	06d1      	lsls	r1, r2, #27
 800819c:	bf5f      	itttt	pl
 800819e:	681a      	ldrpl	r2, [r3, #0]
 80081a0:	1d11      	addpl	r1, r2, #4
 80081a2:	6019      	strpl	r1, [r3, #0]
 80081a4:	6816      	ldrpl	r6, [r2, #0]
 80081a6:	2700      	movs	r7, #0
 80081a8:	69a0      	ldr	r0, [r4, #24]
 80081aa:	b188      	cbz	r0, 80081d0 <_scanf_chars+0x58>
 80081ac:	2801      	cmp	r0, #1
 80081ae:	d107      	bne.n	80081c0 <_scanf_chars+0x48>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	6963      	ldr	r3, [r4, #20]
 80081b6:	5c9b      	ldrb	r3, [r3, r2]
 80081b8:	b953      	cbnz	r3, 80081d0 <_scanf_chars+0x58>
 80081ba:	bb27      	cbnz	r7, 8008206 <_scanf_chars+0x8e>
 80081bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c0:	2802      	cmp	r0, #2
 80081c2:	d120      	bne.n	8008206 <_scanf_chars+0x8e>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80081cc:	071b      	lsls	r3, r3, #28
 80081ce:	d41a      	bmi.n	8008206 <_scanf_chars+0x8e>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	06da      	lsls	r2, r3, #27
 80081d4:	bf5e      	ittt	pl
 80081d6:	682b      	ldrpl	r3, [r5, #0]
 80081d8:	781b      	ldrbpl	r3, [r3, #0]
 80081da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80081de:	682a      	ldr	r2, [r5, #0]
 80081e0:	686b      	ldr	r3, [r5, #4]
 80081e2:	3201      	adds	r2, #1
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	68a2      	ldr	r2, [r4, #8]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	3a01      	subs	r2, #1
 80081ec:	606b      	str	r3, [r5, #4]
 80081ee:	3701      	adds	r7, #1
 80081f0:	60a2      	str	r2, [r4, #8]
 80081f2:	b142      	cbz	r2, 8008206 <_scanf_chars+0x8e>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dcd7      	bgt.n	80081a8 <_scanf_chars+0x30>
 80081f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081fc:	4629      	mov	r1, r5
 80081fe:	4640      	mov	r0, r8
 8008200:	4798      	blx	r3
 8008202:	2800      	cmp	r0, #0
 8008204:	d0d0      	beq.n	80081a8 <_scanf_chars+0x30>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	f013 0310 	ands.w	r3, r3, #16
 800820c:	d105      	bne.n	800821a <_scanf_chars+0xa2>
 800820e:	68e2      	ldr	r2, [r4, #12]
 8008210:	3201      	adds	r2, #1
 8008212:	60e2      	str	r2, [r4, #12]
 8008214:	69a2      	ldr	r2, [r4, #24]
 8008216:	b102      	cbz	r2, 800821a <_scanf_chars+0xa2>
 8008218:	7033      	strb	r3, [r6, #0]
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	441f      	add	r7, r3
 800821e:	6127      	str	r7, [r4, #16]
 8008220:	2000      	movs	r0, #0
 8008222:	e7cb      	b.n	80081bc <_scanf_chars+0x44>
 8008224:	080090ff 	.word	0x080090ff

08008228 <_scanf_i>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	4698      	mov	r8, r3
 800822e:	4b74      	ldr	r3, [pc, #464]	; (8008400 <_scanf_i+0x1d8>)
 8008230:	460c      	mov	r4, r1
 8008232:	4682      	mov	sl, r0
 8008234:	4616      	mov	r6, r2
 8008236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800823a:	b087      	sub	sp, #28
 800823c:	ab03      	add	r3, sp, #12
 800823e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008242:	4b70      	ldr	r3, [pc, #448]	; (8008404 <_scanf_i+0x1dc>)
 8008244:	69a1      	ldr	r1, [r4, #24]
 8008246:	4a70      	ldr	r2, [pc, #448]	; (8008408 <_scanf_i+0x1e0>)
 8008248:	2903      	cmp	r1, #3
 800824a:	bf18      	it	ne
 800824c:	461a      	movne	r2, r3
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	9201      	str	r2, [sp, #4]
 8008252:	1e5a      	subs	r2, r3, #1
 8008254:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008258:	bf88      	it	hi
 800825a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800825e:	4627      	mov	r7, r4
 8008260:	bf82      	ittt	hi
 8008262:	eb03 0905 	addhi.w	r9, r3, r5
 8008266:	f240 135d 	movwhi	r3, #349	; 0x15d
 800826a:	60a3      	strhi	r3, [r4, #8]
 800826c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008270:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008274:	bf98      	it	ls
 8008276:	f04f 0900 	movls.w	r9, #0
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	463d      	mov	r5, r7
 800827e:	f04f 0b00 	mov.w	fp, #0
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	ab03      	add	r3, sp, #12
 8008286:	7809      	ldrb	r1, [r1, #0]
 8008288:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800828c:	2202      	movs	r2, #2
 800828e:	f7f7 ffbf 	bl	8000210 <memchr>
 8008292:	b328      	cbz	r0, 80082e0 <_scanf_i+0xb8>
 8008294:	f1bb 0f01 	cmp.w	fp, #1
 8008298:	d159      	bne.n	800834e <_scanf_i+0x126>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	b92a      	cbnz	r2, 80082aa <_scanf_i+0x82>
 800829e:	6822      	ldr	r2, [r4, #0]
 80082a0:	2308      	movs	r3, #8
 80082a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80082b0:	6022      	str	r2, [r4, #0]
 80082b2:	68a2      	ldr	r2, [r4, #8]
 80082b4:	1e51      	subs	r1, r2, #1
 80082b6:	60a1      	str	r1, [r4, #8]
 80082b8:	b192      	cbz	r2, 80082e0 <_scanf_i+0xb8>
 80082ba:	6832      	ldr	r2, [r6, #0]
 80082bc:	1c51      	adds	r1, r2, #1
 80082be:	6031      	str	r1, [r6, #0]
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	f805 2b01 	strb.w	r2, [r5], #1
 80082c6:	6872      	ldr	r2, [r6, #4]
 80082c8:	3a01      	subs	r2, #1
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	6072      	str	r2, [r6, #4]
 80082ce:	dc07      	bgt.n	80082e0 <_scanf_i+0xb8>
 80082d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80082d4:	4631      	mov	r1, r6
 80082d6:	4650      	mov	r0, sl
 80082d8:	4790      	blx	r2
 80082da:	2800      	cmp	r0, #0
 80082dc:	f040 8085 	bne.w	80083ea <_scanf_i+0x1c2>
 80082e0:	f10b 0b01 	add.w	fp, fp, #1
 80082e4:	f1bb 0f03 	cmp.w	fp, #3
 80082e8:	d1cb      	bne.n	8008282 <_scanf_i+0x5a>
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	b90b      	cbnz	r3, 80082f2 <_scanf_i+0xca>
 80082ee:	230a      	movs	r3, #10
 80082f0:	6063      	str	r3, [r4, #4]
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	4945      	ldr	r1, [pc, #276]	; (800840c <_scanf_i+0x1e4>)
 80082f6:	6960      	ldr	r0, [r4, #20]
 80082f8:	1ac9      	subs	r1, r1, r3
 80082fa:	f000 f8ab 	bl	8008454 <__sccl>
 80082fe:	f04f 0b00 	mov.w	fp, #0
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	6822      	ldr	r2, [r4, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d03d      	beq.n	8008386 <_scanf_i+0x15e>
 800830a:	6831      	ldr	r1, [r6, #0]
 800830c:	6960      	ldr	r0, [r4, #20]
 800830e:	f891 c000 	ldrb.w	ip, [r1]
 8008312:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008316:	2800      	cmp	r0, #0
 8008318:	d035      	beq.n	8008386 <_scanf_i+0x15e>
 800831a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800831e:	d124      	bne.n	800836a <_scanf_i+0x142>
 8008320:	0510      	lsls	r0, r2, #20
 8008322:	d522      	bpl.n	800836a <_scanf_i+0x142>
 8008324:	f10b 0b01 	add.w	fp, fp, #1
 8008328:	f1b9 0f00 	cmp.w	r9, #0
 800832c:	d003      	beq.n	8008336 <_scanf_i+0x10e>
 800832e:	3301      	adds	r3, #1
 8008330:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	6873      	ldr	r3, [r6, #4]
 8008338:	3b01      	subs	r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	6073      	str	r3, [r6, #4]
 800833e:	dd1b      	ble.n	8008378 <_scanf_i+0x150>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	6033      	str	r3, [r6, #0]
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	3b01      	subs	r3, #1
 800834a:	60a3      	str	r3, [r4, #8]
 800834c:	e7d9      	b.n	8008302 <_scanf_i+0xda>
 800834e:	f1bb 0f02 	cmp.w	fp, #2
 8008352:	d1ae      	bne.n	80082b2 <_scanf_i+0x8a>
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800835a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800835e:	d1bf      	bne.n	80082e0 <_scanf_i+0xb8>
 8008360:	2310      	movs	r3, #16
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008368:	e7a2      	b.n	80082b0 <_scanf_i+0x88>
 800836a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	780b      	ldrb	r3, [r1, #0]
 8008372:	f805 3b01 	strb.w	r3, [r5], #1
 8008376:	e7de      	b.n	8008336 <_scanf_i+0x10e>
 8008378:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800837c:	4631      	mov	r1, r6
 800837e:	4650      	mov	r0, sl
 8008380:	4798      	blx	r3
 8008382:	2800      	cmp	r0, #0
 8008384:	d0df      	beq.n	8008346 <_scanf_i+0x11e>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	05d9      	lsls	r1, r3, #23
 800838a:	d50d      	bpl.n	80083a8 <_scanf_i+0x180>
 800838c:	42bd      	cmp	r5, r7
 800838e:	d909      	bls.n	80083a4 <_scanf_i+0x17c>
 8008390:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008398:	4632      	mov	r2, r6
 800839a:	4650      	mov	r0, sl
 800839c:	4798      	blx	r3
 800839e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80083a2:	464d      	mov	r5, r9
 80083a4:	42bd      	cmp	r5, r7
 80083a6:	d028      	beq.n	80083fa <_scanf_i+0x1d2>
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	f012 0210 	ands.w	r2, r2, #16
 80083ae:	d113      	bne.n	80083d8 <_scanf_i+0x1b0>
 80083b0:	702a      	strb	r2, [r5, #0]
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	9e01      	ldr	r6, [sp, #4]
 80083b6:	4639      	mov	r1, r7
 80083b8:	4650      	mov	r0, sl
 80083ba:	47b0      	blx	r6
 80083bc:	f8d8 3000 	ldr.w	r3, [r8]
 80083c0:	6821      	ldr	r1, [r4, #0]
 80083c2:	1d1a      	adds	r2, r3, #4
 80083c4:	f8c8 2000 	str.w	r2, [r8]
 80083c8:	f011 0f20 	tst.w	r1, #32
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	d00f      	beq.n	80083f0 <_scanf_i+0x1c8>
 80083d0:	6018      	str	r0, [r3, #0]
 80083d2:	68e3      	ldr	r3, [r4, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60e3      	str	r3, [r4, #12]
 80083d8:	1bed      	subs	r5, r5, r7
 80083da:	44ab      	add	fp, r5
 80083dc:	6925      	ldr	r5, [r4, #16]
 80083de:	445d      	add	r5, fp
 80083e0:	6125      	str	r5, [r4, #16]
 80083e2:	2000      	movs	r0, #0
 80083e4:	b007      	add	sp, #28
 80083e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ea:	f04f 0b00 	mov.w	fp, #0
 80083ee:	e7ca      	b.n	8008386 <_scanf_i+0x15e>
 80083f0:	07ca      	lsls	r2, r1, #31
 80083f2:	bf4c      	ite	mi
 80083f4:	8018      	strhmi	r0, [r3, #0]
 80083f6:	6018      	strpl	r0, [r3, #0]
 80083f8:	e7eb      	b.n	80083d2 <_scanf_i+0x1aa>
 80083fa:	2001      	movs	r0, #1
 80083fc:	e7f2      	b.n	80083e4 <_scanf_i+0x1bc>
 80083fe:	bf00      	nop
 8008400:	08009008 	.word	0x08009008
 8008404:	080086cd 	.word	0x080086cd
 8008408:	080085d1 	.word	0x080085d1
 800840c:	080090fc 	.word	0x080090fc

08008410 <_read_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	; (8008430 <_read_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f9 f926 	bl	8001670 <_read>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_read_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_read_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200008b4 	.word	0x200008b4

08008434 <_sbrk_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_sbrk_r+0x1c>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	f7f9 f984 	bl	800174c <_sbrk>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_sbrk_r+0x1a>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_sbrk_r+0x1a>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	200008b4 	.word	0x200008b4

08008454 <__sccl>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	780b      	ldrb	r3, [r1, #0]
 8008458:	4604      	mov	r4, r0
 800845a:	2b5e      	cmp	r3, #94	; 0x5e
 800845c:	bf0b      	itete	eq
 800845e:	784b      	ldrbeq	r3, [r1, #1]
 8008460:	1c48      	addne	r0, r1, #1
 8008462:	1c88      	addeq	r0, r1, #2
 8008464:	2200      	movne	r2, #0
 8008466:	bf08      	it	eq
 8008468:	2201      	moveq	r2, #1
 800846a:	1e61      	subs	r1, r4, #1
 800846c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008470:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008474:	42a9      	cmp	r1, r5
 8008476:	d1fb      	bne.n	8008470 <__sccl+0x1c>
 8008478:	b90b      	cbnz	r3, 800847e <__sccl+0x2a>
 800847a:	3801      	subs	r0, #1
 800847c:	bd70      	pop	{r4, r5, r6, pc}
 800847e:	f082 0101 	eor.w	r1, r2, #1
 8008482:	54e1      	strb	r1, [r4, r3]
 8008484:	1c42      	adds	r2, r0, #1
 8008486:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800848a:	2d2d      	cmp	r5, #45	; 0x2d
 800848c:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8008490:	4610      	mov	r0, r2
 8008492:	d006      	beq.n	80084a2 <__sccl+0x4e>
 8008494:	2d5d      	cmp	r5, #93	; 0x5d
 8008496:	d0f1      	beq.n	800847c <__sccl+0x28>
 8008498:	b90d      	cbnz	r5, 800849e <__sccl+0x4a>
 800849a:	4630      	mov	r0, r6
 800849c:	e7ee      	b.n	800847c <__sccl+0x28>
 800849e:	462b      	mov	r3, r5
 80084a0:	e7ef      	b.n	8008482 <__sccl+0x2e>
 80084a2:	7816      	ldrb	r6, [r2, #0]
 80084a4:	2e5d      	cmp	r6, #93	; 0x5d
 80084a6:	d0fa      	beq.n	800849e <__sccl+0x4a>
 80084a8:	42b3      	cmp	r3, r6
 80084aa:	dcf8      	bgt.n	800849e <__sccl+0x4a>
 80084ac:	4618      	mov	r0, r3
 80084ae:	3001      	adds	r0, #1
 80084b0:	4286      	cmp	r6, r0
 80084b2:	5421      	strb	r1, [r4, r0]
 80084b4:	dcfb      	bgt.n	80084ae <__sccl+0x5a>
 80084b6:	43d8      	mvns	r0, r3
 80084b8:	4430      	add	r0, r6
 80084ba:	1c5d      	adds	r5, r3, #1
 80084bc:	42b3      	cmp	r3, r6
 80084be:	bfa8      	it	ge
 80084c0:	2000      	movge	r0, #0
 80084c2:	182b      	adds	r3, r5, r0
 80084c4:	3202      	adds	r2, #2
 80084c6:	e7de      	b.n	8008486 <__sccl+0x32>

080084c8 <_strtol_l.isra.0>:
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ce:	d001      	beq.n	80084d4 <_strtol_l.isra.0+0xc>
 80084d0:	2b24      	cmp	r3, #36	; 0x24
 80084d2:	d906      	bls.n	80084e2 <_strtol_l.isra.0+0x1a>
 80084d4:	f7fe fdd2 	bl	800707c <__errno>
 80084d8:	2316      	movs	r3, #22
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	2000      	movs	r0, #0
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	4f3a      	ldr	r7, [pc, #232]	; (80085cc <_strtol_l.isra.0+0x104>)
 80084e4:	468e      	mov	lr, r1
 80084e6:	4676      	mov	r6, lr
 80084e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084ec:	5de5      	ldrb	r5, [r4, r7]
 80084ee:	f015 0508 	ands.w	r5, r5, #8
 80084f2:	d1f8      	bne.n	80084e6 <_strtol_l.isra.0+0x1e>
 80084f4:	2c2d      	cmp	r4, #45	; 0x2d
 80084f6:	d134      	bne.n	8008562 <_strtol_l.isra.0+0x9a>
 80084f8:	f89e 4000 	ldrb.w	r4, [lr]
 80084fc:	f04f 0801 	mov.w	r8, #1
 8008500:	f106 0e02 	add.w	lr, r6, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d05c      	beq.n	80085c2 <_strtol_l.isra.0+0xfa>
 8008508:	2b10      	cmp	r3, #16
 800850a:	d10c      	bne.n	8008526 <_strtol_l.isra.0+0x5e>
 800850c:	2c30      	cmp	r4, #48	; 0x30
 800850e:	d10a      	bne.n	8008526 <_strtol_l.isra.0+0x5e>
 8008510:	f89e 4000 	ldrb.w	r4, [lr]
 8008514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008518:	2c58      	cmp	r4, #88	; 0x58
 800851a:	d14d      	bne.n	80085b8 <_strtol_l.isra.0+0xf0>
 800851c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008520:	2310      	movs	r3, #16
 8008522:	f10e 0e02 	add.w	lr, lr, #2
 8008526:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800852a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800852e:	2600      	movs	r6, #0
 8008530:	fbbc f9f3 	udiv	r9, ip, r3
 8008534:	4635      	mov	r5, r6
 8008536:	fb03 ca19 	mls	sl, r3, r9, ip
 800853a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800853e:	2f09      	cmp	r7, #9
 8008540:	d818      	bhi.n	8008574 <_strtol_l.isra.0+0xac>
 8008542:	463c      	mov	r4, r7
 8008544:	42a3      	cmp	r3, r4
 8008546:	dd24      	ble.n	8008592 <_strtol_l.isra.0+0xca>
 8008548:	2e00      	cmp	r6, #0
 800854a:	db1f      	blt.n	800858c <_strtol_l.isra.0+0xc4>
 800854c:	45a9      	cmp	r9, r5
 800854e:	d31d      	bcc.n	800858c <_strtol_l.isra.0+0xc4>
 8008550:	d101      	bne.n	8008556 <_strtol_l.isra.0+0x8e>
 8008552:	45a2      	cmp	sl, r4
 8008554:	db1a      	blt.n	800858c <_strtol_l.isra.0+0xc4>
 8008556:	fb05 4503 	mla	r5, r5, r3, r4
 800855a:	2601      	movs	r6, #1
 800855c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008560:	e7eb      	b.n	800853a <_strtol_l.isra.0+0x72>
 8008562:	2c2b      	cmp	r4, #43	; 0x2b
 8008564:	bf08      	it	eq
 8008566:	f89e 4000 	ldrbeq.w	r4, [lr]
 800856a:	46a8      	mov	r8, r5
 800856c:	bf08      	it	eq
 800856e:	f106 0e02 	addeq.w	lr, r6, #2
 8008572:	e7c7      	b.n	8008504 <_strtol_l.isra.0+0x3c>
 8008574:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008578:	2f19      	cmp	r7, #25
 800857a:	d801      	bhi.n	8008580 <_strtol_l.isra.0+0xb8>
 800857c:	3c37      	subs	r4, #55	; 0x37
 800857e:	e7e1      	b.n	8008544 <_strtol_l.isra.0+0x7c>
 8008580:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008584:	2f19      	cmp	r7, #25
 8008586:	d804      	bhi.n	8008592 <_strtol_l.isra.0+0xca>
 8008588:	3c57      	subs	r4, #87	; 0x57
 800858a:	e7db      	b.n	8008544 <_strtol_l.isra.0+0x7c>
 800858c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008590:	e7e4      	b.n	800855c <_strtol_l.isra.0+0x94>
 8008592:	2e00      	cmp	r6, #0
 8008594:	da05      	bge.n	80085a2 <_strtol_l.isra.0+0xda>
 8008596:	2322      	movs	r3, #34	; 0x22
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	4665      	mov	r5, ip
 800859c:	b942      	cbnz	r2, 80085b0 <_strtol_l.isra.0+0xe8>
 800859e:	4628      	mov	r0, r5
 80085a0:	e79d      	b.n	80084de <_strtol_l.isra.0+0x16>
 80085a2:	f1b8 0f00 	cmp.w	r8, #0
 80085a6:	d000      	beq.n	80085aa <_strtol_l.isra.0+0xe2>
 80085a8:	426d      	negs	r5, r5
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	d0f7      	beq.n	800859e <_strtol_l.isra.0+0xd6>
 80085ae:	b10e      	cbz	r6, 80085b4 <_strtol_l.isra.0+0xec>
 80085b0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	e7f2      	b.n	800859e <_strtol_l.isra.0+0xd6>
 80085b8:	2430      	movs	r4, #48	; 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1b3      	bne.n	8008526 <_strtol_l.isra.0+0x5e>
 80085be:	2308      	movs	r3, #8
 80085c0:	e7b1      	b.n	8008526 <_strtol_l.isra.0+0x5e>
 80085c2:	2c30      	cmp	r4, #48	; 0x30
 80085c4:	d0a4      	beq.n	8008510 <_strtol_l.isra.0+0x48>
 80085c6:	230a      	movs	r3, #10
 80085c8:	e7ad      	b.n	8008526 <_strtol_l.isra.0+0x5e>
 80085ca:	bf00      	nop
 80085cc:	080090ff 	.word	0x080090ff

080085d0 <_strtol_r>:
 80085d0:	f7ff bf7a 	b.w	80084c8 <_strtol_l.isra.0>

080085d4 <_strtoul_l.isra.0>:
 80085d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085d8:	4e3b      	ldr	r6, [pc, #236]	; (80086c8 <_strtoul_l.isra.0+0xf4>)
 80085da:	4686      	mov	lr, r0
 80085dc:	468c      	mov	ip, r1
 80085de:	4660      	mov	r0, ip
 80085e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80085e4:	5da5      	ldrb	r5, [r4, r6]
 80085e6:	f015 0508 	ands.w	r5, r5, #8
 80085ea:	d1f8      	bne.n	80085de <_strtoul_l.isra.0+0xa>
 80085ec:	2c2d      	cmp	r4, #45	; 0x2d
 80085ee:	d134      	bne.n	800865a <_strtoul_l.isra.0+0x86>
 80085f0:	f89c 4000 	ldrb.w	r4, [ip]
 80085f4:	f04f 0801 	mov.w	r8, #1
 80085f8:	f100 0c02 	add.w	ip, r0, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05e      	beq.n	80086be <_strtoul_l.isra.0+0xea>
 8008600:	2b10      	cmp	r3, #16
 8008602:	d10c      	bne.n	800861e <_strtoul_l.isra.0+0x4a>
 8008604:	2c30      	cmp	r4, #48	; 0x30
 8008606:	d10a      	bne.n	800861e <_strtoul_l.isra.0+0x4a>
 8008608:	f89c 0000 	ldrb.w	r0, [ip]
 800860c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008610:	2858      	cmp	r0, #88	; 0x58
 8008612:	d14f      	bne.n	80086b4 <_strtoul_l.isra.0+0xe0>
 8008614:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008618:	2310      	movs	r3, #16
 800861a:	f10c 0c02 	add.w	ip, ip, #2
 800861e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008622:	2500      	movs	r5, #0
 8008624:	fbb7 f7f3 	udiv	r7, r7, r3
 8008628:	fb03 f907 	mul.w	r9, r3, r7
 800862c:	ea6f 0909 	mvn.w	r9, r9
 8008630:	4628      	mov	r0, r5
 8008632:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008636:	2e09      	cmp	r6, #9
 8008638:	d818      	bhi.n	800866c <_strtoul_l.isra.0+0x98>
 800863a:	4634      	mov	r4, r6
 800863c:	42a3      	cmp	r3, r4
 800863e:	dd24      	ble.n	800868a <_strtoul_l.isra.0+0xb6>
 8008640:	2d00      	cmp	r5, #0
 8008642:	db1f      	blt.n	8008684 <_strtoul_l.isra.0+0xb0>
 8008644:	4287      	cmp	r7, r0
 8008646:	d31d      	bcc.n	8008684 <_strtoul_l.isra.0+0xb0>
 8008648:	d101      	bne.n	800864e <_strtoul_l.isra.0+0x7a>
 800864a:	45a1      	cmp	r9, r4
 800864c:	db1a      	blt.n	8008684 <_strtoul_l.isra.0+0xb0>
 800864e:	fb00 4003 	mla	r0, r0, r3, r4
 8008652:	2501      	movs	r5, #1
 8008654:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008658:	e7eb      	b.n	8008632 <_strtoul_l.isra.0+0x5e>
 800865a:	2c2b      	cmp	r4, #43	; 0x2b
 800865c:	bf08      	it	eq
 800865e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008662:	46a8      	mov	r8, r5
 8008664:	bf08      	it	eq
 8008666:	f100 0c02 	addeq.w	ip, r0, #2
 800866a:	e7c7      	b.n	80085fc <_strtoul_l.isra.0+0x28>
 800866c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008670:	2e19      	cmp	r6, #25
 8008672:	d801      	bhi.n	8008678 <_strtoul_l.isra.0+0xa4>
 8008674:	3c37      	subs	r4, #55	; 0x37
 8008676:	e7e1      	b.n	800863c <_strtoul_l.isra.0+0x68>
 8008678:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800867c:	2e19      	cmp	r6, #25
 800867e:	d804      	bhi.n	800868a <_strtoul_l.isra.0+0xb6>
 8008680:	3c57      	subs	r4, #87	; 0x57
 8008682:	e7db      	b.n	800863c <_strtoul_l.isra.0+0x68>
 8008684:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008688:	e7e4      	b.n	8008654 <_strtoul_l.isra.0+0x80>
 800868a:	2d00      	cmp	r5, #0
 800868c:	da07      	bge.n	800869e <_strtoul_l.isra.0+0xca>
 800868e:	2322      	movs	r3, #34	; 0x22
 8008690:	f8ce 3000 	str.w	r3, [lr]
 8008694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008698:	b942      	cbnz	r2, 80086ac <_strtoul_l.isra.0+0xd8>
 800869a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800869e:	f1b8 0f00 	cmp.w	r8, #0
 80086a2:	d000      	beq.n	80086a6 <_strtoul_l.isra.0+0xd2>
 80086a4:	4240      	negs	r0, r0
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d0f7      	beq.n	800869a <_strtoul_l.isra.0+0xc6>
 80086aa:	b10d      	cbz	r5, 80086b0 <_strtoul_l.isra.0+0xdc>
 80086ac:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80086b0:	6011      	str	r1, [r2, #0]
 80086b2:	e7f2      	b.n	800869a <_strtoul_l.isra.0+0xc6>
 80086b4:	2430      	movs	r4, #48	; 0x30
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1b1      	bne.n	800861e <_strtoul_l.isra.0+0x4a>
 80086ba:	2308      	movs	r3, #8
 80086bc:	e7af      	b.n	800861e <_strtoul_l.isra.0+0x4a>
 80086be:	2c30      	cmp	r4, #48	; 0x30
 80086c0:	d0a2      	beq.n	8008608 <_strtoul_l.isra.0+0x34>
 80086c2:	230a      	movs	r3, #10
 80086c4:	e7ab      	b.n	800861e <_strtoul_l.isra.0+0x4a>
 80086c6:	bf00      	nop
 80086c8:	080090ff 	.word	0x080090ff

080086cc <_strtoul_r>:
 80086cc:	f7ff bf82 	b.w	80085d4 <_strtoul_l.isra.0>

080086d0 <__submore>:
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80086d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086dc:	4299      	cmp	r1, r3
 80086de:	d11d      	bne.n	800871c <__submore+0x4c>
 80086e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086e4:	f7fe fed2 	bl	800748c <_malloc_r>
 80086e8:	b918      	cbnz	r0, 80086f2 <__submore+0x22>
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80086f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80086fc:	6360      	str	r0, [r4, #52]	; 0x34
 80086fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008702:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008706:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800870a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800870e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008712:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	2000      	movs	r0, #0
 800871a:	e7e8      	b.n	80086ee <__submore+0x1e>
 800871c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800871e:	0077      	lsls	r7, r6, #1
 8008720:	463a      	mov	r2, r7
 8008722:	f000 fa79 	bl	8008c18 <_realloc_r>
 8008726:	4605      	mov	r5, r0
 8008728:	2800      	cmp	r0, #0
 800872a:	d0de      	beq.n	80086ea <__submore+0x1a>
 800872c:	eb00 0806 	add.w	r8, r0, r6
 8008730:	4601      	mov	r1, r0
 8008732:	4632      	mov	r2, r6
 8008734:	4640      	mov	r0, r8
 8008736:	f000 f9eb 	bl	8008b10 <memcpy>
 800873a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800873e:	f8c4 8000 	str.w	r8, [r4]
 8008742:	e7e9      	b.n	8008718 <__submore+0x48>

08008744 <__swbuf_r>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	460e      	mov	r6, r1
 8008748:	4614      	mov	r4, r2
 800874a:	4605      	mov	r5, r0
 800874c:	b118      	cbz	r0, 8008756 <__swbuf_r+0x12>
 800874e:	6983      	ldr	r3, [r0, #24]
 8008750:	b90b      	cbnz	r3, 8008756 <__swbuf_r+0x12>
 8008752:	f7fe fde9 	bl	8007328 <__sinit>
 8008756:	4b21      	ldr	r3, [pc, #132]	; (80087dc <__swbuf_r+0x98>)
 8008758:	429c      	cmp	r4, r3
 800875a:	d12b      	bne.n	80087b4 <__swbuf_r+0x70>
 800875c:	686c      	ldr	r4, [r5, #4]
 800875e:	69a3      	ldr	r3, [r4, #24]
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	071a      	lsls	r2, r3, #28
 8008766:	d52f      	bpl.n	80087c8 <__swbuf_r+0x84>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	b36b      	cbz	r3, 80087c8 <__swbuf_r+0x84>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	1ac0      	subs	r0, r0, r3
 8008772:	6963      	ldr	r3, [r4, #20]
 8008774:	b2f6      	uxtb	r6, r6
 8008776:	4283      	cmp	r3, r0
 8008778:	4637      	mov	r7, r6
 800877a:	dc04      	bgt.n	8008786 <__swbuf_r+0x42>
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 f926 	bl	80089d0 <_fflush_r>
 8008784:	bb30      	cbnz	r0, 80087d4 <__swbuf_r+0x90>
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	3b01      	subs	r3, #1
 800878a:	60a3      	str	r3, [r4, #8]
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	701e      	strb	r6, [r3, #0]
 8008794:	6963      	ldr	r3, [r4, #20]
 8008796:	3001      	adds	r0, #1
 8008798:	4283      	cmp	r3, r0
 800879a:	d004      	beq.n	80087a6 <__swbuf_r+0x62>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	07db      	lsls	r3, r3, #31
 80087a0:	d506      	bpl.n	80087b0 <__swbuf_r+0x6c>
 80087a2:	2e0a      	cmp	r6, #10
 80087a4:	d104      	bne.n	80087b0 <__swbuf_r+0x6c>
 80087a6:	4621      	mov	r1, r4
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 f911 	bl	80089d0 <_fflush_r>
 80087ae:	b988      	cbnz	r0, 80087d4 <__swbuf_r+0x90>
 80087b0:	4638      	mov	r0, r7
 80087b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <__swbuf_r+0x9c>)
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d101      	bne.n	80087be <__swbuf_r+0x7a>
 80087ba:	68ac      	ldr	r4, [r5, #8]
 80087bc:	e7cf      	b.n	800875e <__swbuf_r+0x1a>
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <__swbuf_r+0xa0>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	bf08      	it	eq
 80087c4:	68ec      	ldreq	r4, [r5, #12]
 80087c6:	e7ca      	b.n	800875e <__swbuf_r+0x1a>
 80087c8:	4621      	mov	r1, r4
 80087ca:	4628      	mov	r0, r5
 80087cc:	f000 f80c 	bl	80087e8 <__swsetup_r>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0cb      	beq.n	800876c <__swbuf_r+0x28>
 80087d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087d8:	e7ea      	b.n	80087b0 <__swbuf_r+0x6c>
 80087da:	bf00      	nop
 80087dc:	08009070 	.word	0x08009070
 80087e0:	08009090 	.word	0x08009090
 80087e4:	08009050 	.word	0x08009050

080087e8 <__swsetup_r>:
 80087e8:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <__swsetup_r+0xcc>)
 80087ea:	b570      	push	{r4, r5, r6, lr}
 80087ec:	681d      	ldr	r5, [r3, #0]
 80087ee:	4606      	mov	r6, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	b125      	cbz	r5, 80087fe <__swsetup_r+0x16>
 80087f4:	69ab      	ldr	r3, [r5, #24]
 80087f6:	b913      	cbnz	r3, 80087fe <__swsetup_r+0x16>
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7fe fd95 	bl	8007328 <__sinit>
 80087fe:	4b2e      	ldr	r3, [pc, #184]	; (80088b8 <__swsetup_r+0xd0>)
 8008800:	429c      	cmp	r4, r3
 8008802:	d10f      	bne.n	8008824 <__swsetup_r+0x3c>
 8008804:	686c      	ldr	r4, [r5, #4]
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880c:	0719      	lsls	r1, r3, #28
 800880e:	d42c      	bmi.n	800886a <__swsetup_r+0x82>
 8008810:	06dd      	lsls	r5, r3, #27
 8008812:	d411      	bmi.n	8008838 <__swsetup_r+0x50>
 8008814:	2309      	movs	r3, #9
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008822:	e03e      	b.n	80088a2 <__swsetup_r+0xba>
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <__swsetup_r+0xd4>)
 8008826:	429c      	cmp	r4, r3
 8008828:	d101      	bne.n	800882e <__swsetup_r+0x46>
 800882a:	68ac      	ldr	r4, [r5, #8]
 800882c:	e7eb      	b.n	8008806 <__swsetup_r+0x1e>
 800882e:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <__swsetup_r+0xd8>)
 8008830:	429c      	cmp	r4, r3
 8008832:	bf08      	it	eq
 8008834:	68ec      	ldreq	r4, [r5, #12]
 8008836:	e7e6      	b.n	8008806 <__swsetup_r+0x1e>
 8008838:	0758      	lsls	r0, r3, #29
 800883a:	d512      	bpl.n	8008862 <__swsetup_r+0x7a>
 800883c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883e:	b141      	cbz	r1, 8008852 <__swsetup_r+0x6a>
 8008840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008844:	4299      	cmp	r1, r3
 8008846:	d002      	beq.n	800884e <__swsetup_r+0x66>
 8008848:	4630      	mov	r0, r6
 800884a:	f000 f995 	bl	8008b78 <_free_r>
 800884e:	2300      	movs	r3, #0
 8008850:	6363      	str	r3, [r4, #52]	; 0x34
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	2300      	movs	r3, #0
 800885c:	6063      	str	r3, [r4, #4]
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0308 	orr.w	r3, r3, #8
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	b94b      	cbnz	r3, 8008882 <__swsetup_r+0x9a>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008878:	d003      	beq.n	8008882 <__swsetup_r+0x9a>
 800887a:	4621      	mov	r1, r4
 800887c:	4630      	mov	r0, r6
 800887e:	f000 f907 	bl	8008a90 <__smakebuf_r>
 8008882:	89a0      	ldrh	r0, [r4, #12]
 8008884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008888:	f010 0301 	ands.w	r3, r0, #1
 800888c:	d00a      	beq.n	80088a4 <__swsetup_r+0xbc>
 800888e:	2300      	movs	r3, #0
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	6963      	ldr	r3, [r4, #20]
 8008894:	425b      	negs	r3, r3
 8008896:	61a3      	str	r3, [r4, #24]
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	b943      	cbnz	r3, 80088ae <__swsetup_r+0xc6>
 800889c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088a0:	d1ba      	bne.n	8008818 <__swsetup_r+0x30>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	0781      	lsls	r1, r0, #30
 80088a6:	bf58      	it	pl
 80088a8:	6963      	ldrpl	r3, [r4, #20]
 80088aa:	60a3      	str	r3, [r4, #8]
 80088ac:	e7f4      	b.n	8008898 <__swsetup_r+0xb0>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e7f7      	b.n	80088a2 <__swsetup_r+0xba>
 80088b2:	bf00      	nop
 80088b4:	20000088 	.word	0x20000088
 80088b8:	08009070 	.word	0x08009070
 80088bc:	08009090 	.word	0x08009090
 80088c0:	08009050 	.word	0x08009050

080088c4 <__sflush_r>:
 80088c4:	898a      	ldrh	r2, [r1, #12]
 80088c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ca:	4605      	mov	r5, r0
 80088cc:	0710      	lsls	r0, r2, #28
 80088ce:	460c      	mov	r4, r1
 80088d0:	d458      	bmi.n	8008984 <__sflush_r+0xc0>
 80088d2:	684b      	ldr	r3, [r1, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc05      	bgt.n	80088e4 <__sflush_r+0x20>
 80088d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dc02      	bgt.n	80088e4 <__sflush_r+0x20>
 80088de:	2000      	movs	r0, #0
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d0f9      	beq.n	80088de <__sflush_r+0x1a>
 80088ea:	2300      	movs	r3, #0
 80088ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088f0:	682f      	ldr	r7, [r5, #0]
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	d032      	beq.n	800895c <__sflush_r+0x98>
 80088f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	075a      	lsls	r2, r3, #29
 80088fc:	d505      	bpl.n	800890a <__sflush_r+0x46>
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	1ac0      	subs	r0, r0, r3
 8008902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008904:	b10b      	cbz	r3, 800890a <__sflush_r+0x46>
 8008906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008908:	1ac0      	subs	r0, r0, r3
 800890a:	2300      	movs	r3, #0
 800890c:	4602      	mov	r2, r0
 800890e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008910:	6a21      	ldr	r1, [r4, #32]
 8008912:	4628      	mov	r0, r5
 8008914:	47b0      	blx	r6
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	d106      	bne.n	800892a <__sflush_r+0x66>
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	291d      	cmp	r1, #29
 8008920:	d82c      	bhi.n	800897c <__sflush_r+0xb8>
 8008922:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <__sflush_r+0x108>)
 8008924:	40ca      	lsrs	r2, r1
 8008926:	07d6      	lsls	r6, r2, #31
 8008928:	d528      	bpl.n	800897c <__sflush_r+0xb8>
 800892a:	2200      	movs	r2, #0
 800892c:	6062      	str	r2, [r4, #4]
 800892e:	04d9      	lsls	r1, r3, #19
 8008930:	6922      	ldr	r2, [r4, #16]
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	d504      	bpl.n	8008940 <__sflush_r+0x7c>
 8008936:	1c42      	adds	r2, r0, #1
 8008938:	d101      	bne.n	800893e <__sflush_r+0x7a>
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	b903      	cbnz	r3, 8008940 <__sflush_r+0x7c>
 800893e:	6560      	str	r0, [r4, #84]	; 0x54
 8008940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008942:	602f      	str	r7, [r5, #0]
 8008944:	2900      	cmp	r1, #0
 8008946:	d0ca      	beq.n	80088de <__sflush_r+0x1a>
 8008948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894c:	4299      	cmp	r1, r3
 800894e:	d002      	beq.n	8008956 <__sflush_r+0x92>
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f911 	bl	8008b78 <_free_r>
 8008956:	2000      	movs	r0, #0
 8008958:	6360      	str	r0, [r4, #52]	; 0x34
 800895a:	e7c1      	b.n	80088e0 <__sflush_r+0x1c>
 800895c:	6a21      	ldr	r1, [r4, #32]
 800895e:	2301      	movs	r3, #1
 8008960:	4628      	mov	r0, r5
 8008962:	47b0      	blx	r6
 8008964:	1c41      	adds	r1, r0, #1
 8008966:	d1c7      	bne.n	80088f8 <__sflush_r+0x34>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c4      	beq.n	80088f8 <__sflush_r+0x34>
 800896e:	2b1d      	cmp	r3, #29
 8008970:	d001      	beq.n	8008976 <__sflush_r+0xb2>
 8008972:	2b16      	cmp	r3, #22
 8008974:	d101      	bne.n	800897a <__sflush_r+0xb6>
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	e7b1      	b.n	80088de <__sflush_r+0x1a>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	e7ad      	b.n	80088e0 <__sflush_r+0x1c>
 8008984:	690f      	ldr	r7, [r1, #16]
 8008986:	2f00      	cmp	r7, #0
 8008988:	d0a9      	beq.n	80088de <__sflush_r+0x1a>
 800898a:	0793      	lsls	r3, r2, #30
 800898c:	680e      	ldr	r6, [r1, #0]
 800898e:	bf08      	it	eq
 8008990:	694b      	ldreq	r3, [r1, #20]
 8008992:	600f      	str	r7, [r1, #0]
 8008994:	bf18      	it	ne
 8008996:	2300      	movne	r3, #0
 8008998:	eba6 0807 	sub.w	r8, r6, r7
 800899c:	608b      	str	r3, [r1, #8]
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	dd9c      	ble.n	80088de <__sflush_r+0x1a>
 80089a4:	6a21      	ldr	r1, [r4, #32]
 80089a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089a8:	4643      	mov	r3, r8
 80089aa:	463a      	mov	r2, r7
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b0      	blx	r6
 80089b0:	2800      	cmp	r0, #0
 80089b2:	dc06      	bgt.n	80089c2 <__sflush_r+0xfe>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c0:	e78e      	b.n	80088e0 <__sflush_r+0x1c>
 80089c2:	4407      	add	r7, r0
 80089c4:	eba8 0800 	sub.w	r8, r8, r0
 80089c8:	e7e9      	b.n	800899e <__sflush_r+0xda>
 80089ca:	bf00      	nop
 80089cc:	20400001 	.word	0x20400001

080089d0 <_fflush_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	b913      	cbnz	r3, 80089e0 <_fflush_r+0x10>
 80089da:	2500      	movs	r5, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	b118      	cbz	r0, 80089ea <_fflush_r+0x1a>
 80089e2:	6983      	ldr	r3, [r0, #24]
 80089e4:	b90b      	cbnz	r3, 80089ea <_fflush_r+0x1a>
 80089e6:	f7fe fc9f 	bl	8007328 <__sinit>
 80089ea:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <_fflush_r+0x6c>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d11b      	bne.n	8008a28 <_fflush_r+0x58>
 80089f0:	686c      	ldr	r4, [r5, #4]
 80089f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ef      	beq.n	80089da <_fflush_r+0xa>
 80089fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089fc:	07d0      	lsls	r0, r2, #31
 80089fe:	d404      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a00:	0599      	lsls	r1, r3, #22
 8008a02:	d402      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f7fe fd2d 	bl	8007464 <__retarget_lock_acquire_recursive>
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f7ff ff59 	bl	80088c4 <__sflush_r>
 8008a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a14:	07da      	lsls	r2, r3, #31
 8008a16:	4605      	mov	r5, r0
 8008a18:	d4e0      	bmi.n	80089dc <_fflush_r+0xc>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d4dd      	bmi.n	80089dc <_fflush_r+0xc>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f7fe fd20 	bl	8007466 <__retarget_lock_release_recursive>
 8008a26:	e7d9      	b.n	80089dc <_fflush_r+0xc>
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <_fflush_r+0x70>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d101      	bne.n	8008a32 <_fflush_r+0x62>
 8008a2e:	68ac      	ldr	r4, [r5, #8]
 8008a30:	e7df      	b.n	80089f2 <_fflush_r+0x22>
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <_fflush_r+0x74>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	bf08      	it	eq
 8008a38:	68ec      	ldreq	r4, [r5, #12]
 8008a3a:	e7da      	b.n	80089f2 <_fflush_r+0x22>
 8008a3c:	08009070 	.word	0x08009070
 8008a40:	08009090 	.word	0x08009090
 8008a44:	08009050 	.word	0x08009050

08008a48 <__swhatbuf_r>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460e      	mov	r6, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	b096      	sub	sp, #88	; 0x58
 8008a54:	4614      	mov	r4, r2
 8008a56:	461d      	mov	r5, r3
 8008a58:	da07      	bge.n	8008a6a <__swhatbuf_r+0x22>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	89b3      	ldrh	r3, [r6, #12]
 8008a60:	061a      	lsls	r2, r3, #24
 8008a62:	d410      	bmi.n	8008a86 <__swhatbuf_r+0x3e>
 8008a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a68:	e00e      	b.n	8008a88 <__swhatbuf_r+0x40>
 8008a6a:	466a      	mov	r2, sp
 8008a6c:	f000 f8fa 	bl	8008c64 <_fstat_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dbf2      	blt.n	8008a5a <__swhatbuf_r+0x12>
 8008a74:	9a01      	ldr	r2, [sp, #4]
 8008a76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a7e:	425a      	negs	r2, r3
 8008a80:	415a      	adcs	r2, r3
 8008a82:	602a      	str	r2, [r5, #0]
 8008a84:	e7ee      	b.n	8008a64 <__swhatbuf_r+0x1c>
 8008a86:	2340      	movs	r3, #64	; 0x40
 8008a88:	2000      	movs	r0, #0
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	b016      	add	sp, #88	; 0x58
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}

08008a90 <__smakebuf_r>:
 8008a90:	898b      	ldrh	r3, [r1, #12]
 8008a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a94:	079d      	lsls	r5, r3, #30
 8008a96:	4606      	mov	r6, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	d507      	bpl.n	8008aac <__smakebuf_r+0x1c>
 8008a9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	b002      	add	sp, #8
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	ab01      	add	r3, sp, #4
 8008aae:	466a      	mov	r2, sp
 8008ab0:	f7ff ffca 	bl	8008a48 <__swhatbuf_r>
 8008ab4:	9900      	ldr	r1, [sp, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7fe fce7 	bl	800748c <_malloc_r>
 8008abe:	b948      	cbnz	r0, 8008ad4 <__smakebuf_r+0x44>
 8008ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac4:	059a      	lsls	r2, r3, #22
 8008ac6:	d4ef      	bmi.n	8008aa8 <__smakebuf_r+0x18>
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	f043 0302 	orr.w	r3, r3, #2
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e7e3      	b.n	8008a9c <__smakebuf_r+0xc>
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <__smakebuf_r+0x7c>)
 8008ad6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	6163      	str	r3, [r4, #20]
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	6120      	str	r0, [r4, #16]
 8008aea:	b15b      	cbz	r3, 8008b04 <__smakebuf_r+0x74>
 8008aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f8c9 	bl	8008c88 <_isatty_r>
 8008af6:	b128      	cbz	r0, 8008b04 <__smakebuf_r+0x74>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	89a0      	ldrh	r0, [r4, #12]
 8008b06:	4305      	orrs	r5, r0
 8008b08:	81a5      	strh	r5, [r4, #12]
 8008b0a:	e7cd      	b.n	8008aa8 <__smakebuf_r+0x18>
 8008b0c:	080072c1 	.word	0x080072c1

08008b10 <memcpy>:
 8008b10:	440a      	add	r2, r1
 8008b12:	4291      	cmp	r1, r2
 8008b14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b18:	d100      	bne.n	8008b1c <memcpy+0xc>
 8008b1a:	4770      	bx	lr
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b26:	4291      	cmp	r1, r2
 8008b28:	d1f9      	bne.n	8008b1e <memcpy+0xe>
 8008b2a:	bd10      	pop	{r4, pc}

08008b2c <memmove>:
 8008b2c:	4288      	cmp	r0, r1
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	eb01 0402 	add.w	r4, r1, r2
 8008b34:	d902      	bls.n	8008b3c <memmove+0x10>
 8008b36:	4284      	cmp	r4, r0
 8008b38:	4623      	mov	r3, r4
 8008b3a:	d807      	bhi.n	8008b4c <memmove+0x20>
 8008b3c:	1e43      	subs	r3, r0, #1
 8008b3e:	42a1      	cmp	r1, r4
 8008b40:	d008      	beq.n	8008b54 <memmove+0x28>
 8008b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b4a:	e7f8      	b.n	8008b3e <memmove+0x12>
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4601      	mov	r1, r0
 8008b50:	428a      	cmp	r2, r1
 8008b52:	d100      	bne.n	8008b56 <memmove+0x2a>
 8008b54:	bd10      	pop	{r4, pc}
 8008b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b5e:	e7f7      	b.n	8008b50 <memmove+0x24>

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_lock+0x8>)
 8008b62:	f7fe bc7f 	b.w	8007464 <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	200008ac 	.word	0x200008ac

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f7fe bc7a 	b.w	8007466 <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	200008ac 	.word	0x200008ac

08008b78 <_free_r>:
 8008b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d048      	beq.n	8008c10 <_free_r+0x98>
 8008b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b82:	9001      	str	r0, [sp, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f1a1 0404 	sub.w	r4, r1, #4
 8008b8a:	bfb8      	it	lt
 8008b8c:	18e4      	addlt	r4, r4, r3
 8008b8e:	f7ff ffe7 	bl	8008b60 <__malloc_lock>
 8008b92:	4a20      	ldr	r2, [pc, #128]	; (8008c14 <_free_r+0x9c>)
 8008b94:	9801      	ldr	r0, [sp, #4]
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	4615      	mov	r5, r2
 8008b9a:	b933      	cbnz	r3, 8008baa <_free_r+0x32>
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6014      	str	r4, [r2, #0]
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ba6:	f7ff bfe1 	b.w	8008b6c <__malloc_unlock>
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	d90b      	bls.n	8008bc6 <_free_r+0x4e>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	1862      	adds	r2, r4, r1
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bf04      	itt	eq
 8008bb6:	681a      	ldreq	r2, [r3, #0]
 8008bb8:	685b      	ldreq	r3, [r3, #4]
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	bf04      	itt	eq
 8008bbe:	1852      	addeq	r2, r2, r1
 8008bc0:	6022      	streq	r2, [r4, #0]
 8008bc2:	602c      	str	r4, [r5, #0]
 8008bc4:	e7ec      	b.n	8008ba0 <_free_r+0x28>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b10b      	cbz	r3, 8008bd0 <_free_r+0x58>
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x4e>
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	1855      	adds	r5, r2, r1
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x78>
 8008bd8:	6824      	ldr	r4, [r4, #0]
 8008bda:	4421      	add	r1, r4
 8008bdc:	1854      	adds	r4, r2, r1
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	d1dd      	bne.n	8008ba0 <_free_r+0x28>
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6053      	str	r3, [r2, #4]
 8008bea:	4421      	add	r1, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	e7d7      	b.n	8008ba0 <_free_r+0x28>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x80>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e7d3      	b.n	8008ba0 <_free_r+0x28>
 8008bf8:	6825      	ldr	r5, [r4, #0]
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	6054      	str	r4, [r2, #4]
 8008c0e:	e7c7      	b.n	8008ba0 <_free_r+0x28>
 8008c10:	b003      	add	sp, #12
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	20000150 	.word	0x20000150

08008c18 <_realloc_r>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	460e      	mov	r6, r1
 8008c20:	b921      	cbnz	r1, 8008c2c <_realloc_r+0x14>
 8008c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c26:	4611      	mov	r1, r2
 8008c28:	f7fe bc30 	b.w	800748c <_malloc_r>
 8008c2c:	b922      	cbnz	r2, 8008c38 <_realloc_r+0x20>
 8008c2e:	f7ff ffa3 	bl	8008b78 <_free_r>
 8008c32:	4625      	mov	r5, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	f000 f836 	bl	8008ca8 <_malloc_usable_size_r>
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d20f      	bcs.n	8008c60 <_realloc_r+0x48>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7fe fc22 	bl	800748c <_malloc_r>
 8008c48:	4605      	mov	r5, r0
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d0f2      	beq.n	8008c34 <_realloc_r+0x1c>
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4622      	mov	r2, r4
 8008c52:	f7ff ff5d 	bl	8008b10 <memcpy>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ff8d 	bl	8008b78 <_free_r>
 8008c5e:	e7e9      	b.n	8008c34 <_realloc_r+0x1c>
 8008c60:	4635      	mov	r5, r6
 8008c62:	e7e7      	b.n	8008c34 <_realloc_r+0x1c>

08008c64 <_fstat_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	; (8008c84 <_fstat_r+0x20>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f7f8 fd42 	bl	80016fa <_fstat>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d102      	bne.n	8008c80 <_fstat_r+0x1c>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	b103      	cbz	r3, 8008c80 <_fstat_r+0x1c>
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	bd38      	pop	{r3, r4, r5, pc}
 8008c82:	bf00      	nop
 8008c84:	200008b4 	.word	0x200008b4

08008c88 <_isatty_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d06      	ldr	r5, [pc, #24]	; (8008ca4 <_isatty_r+0x1c>)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7f8 fd41 	bl	800171a <_isatty>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_isatty_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_isatty_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	200008b4 	.word	0x200008b4

08008ca8 <_malloc_usable_size_r>:
 8008ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cac:	1f18      	subs	r0, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfbc      	itt	lt
 8008cb2:	580b      	ldrlt	r3, [r1, r0]
 8008cb4:	18c0      	addlt	r0, r0, r3
 8008cb6:	4770      	bx	lr

08008cb8 <_init>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	bf00      	nop
 8008cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cbe:	bc08      	pop	{r3}
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	4770      	bx	lr

08008cc4 <_fini>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr
