
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c664  0800c664  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c664  0800c664  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c664  0800c664  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c664  0800c664  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c668  0800c668  0001c668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800c66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000950  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a3c  20000a3c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d830  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db9  00000000  00000000  0003d94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00041708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00042c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024637  00000000  00000000  00043f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238c4  00000000  00000000  000685a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d486c  00000000  00000000  0008be6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001606d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006284  00000000  00000000  0016072c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c028 	.word	0x0800c028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800c028 	.word	0x0800c028

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d131      	bne.n	8000328 <splitNumber+0x78>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d039      	beq.n	800033e <splitNumber+0x8e>
             while(num > 0 ){
 80002ca:	e02d      	b.n	8000328 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	1c43      	adds	r3, r0, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <splitNumber+0x98>)
 80002d6:	fb83 2301 	smull	r2, r3, r3, r1
 80002da:	109a      	asrs	r2, r3, #2
 80002dc:	17cb      	asrs	r3, r1, #31
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1aca      	subs	r2, r1, r3
 80002ea:	0083      	lsls	r3, r0, #2
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440b      	add	r3, r1
 80002f2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <splitNumber+0x98>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	1092      	asrs	r2, r2, #2
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <splitNumber+0x70>
                  arr[i++] = 0;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	617a      	str	r2, [r7, #20]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	f107 0218 	add.w	r2, r7, #24
 8000318:	4413      	add	r3, r2
 800031a:	2200      	movs	r2, #0
 800031c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <splitNumber+0x9c>)
 8000324:	f00a f894 	bl	800a450 <iprintf>
             while(num > 0 ){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dcce      	bgt.n	80002cc <splitNumber+0x1c>


            }
        return arr[return_val];
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0218 	add.w	r2, r7, #24
 8000336:	4413      	add	r3, r2
 8000338:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800033c:	e000      	b.n	8000340 <splitNumber+0x90>
         } else {
             return 0;
 800033e:	2300      	movs	r3, #0
         }


}
 8000340:	4618      	mov	r0, r3
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	66666667 	.word	0x66666667
 800034c:	0800c040 	.word	0x0800c040

08000350 <convertToBinary>:

int convertToBinary(int num){
 8000350:	b480      	push	{r7}
 8000352:	b08f      	sub	sp, #60	; 0x3c
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000360:	e015      	b.n	800038e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000378:	440b      	add	r3, r1
 800037a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	0fda      	lsrs	r2, r3, #31
 8000382:	4413      	add	r3, r2
 8000384:	105b      	asrs	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
              i++;
 8000388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e6      	bne.n	8000362 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000396:	3b01      	subs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800039a:	e005      	b.n	80003a8 <convertToBinary+0x58>
              count++;
 800039c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800039e:	3301      	adds	r3, #1
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	daf6      	bge.n	800039c <convertToBinary+0x4c>

          }
          return count;
 80003ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	373c      	adds	r7, #60	; 0x3c
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <setTime>:



void setTime(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003bc:	b084      	sub	sp, #16
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	f107 0c08 	add.w	ip, r7, #8
 80003c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <setTime+0x68>)
 80003cc:	f007 fe2a 	bl	8008024 <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003d4:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003da:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003e0:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f107 0108 	add.w	r1, r7, #8
 80003e8:	480e      	ldr	r0, [pc, #56]	; (8000424 <setTime+0x68>)
 80003ea:	f006 fd75 	bl	8006ed8 <HAL_RTC_SetTime>

	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80003ee:	2307      	movs	r3, #7
 80003f0:	773b      	strb	r3, [r7, #28]
	sDate.Date = 30;
 80003f2:	231e      	movs	r3, #30
 80003f4:	77bb      	strb	r3, [r7, #30]
	sDate.Month = 1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	777b      	strb	r3, [r7, #29]
	sDate.Year = 22;
 80003fa:	2316      	movs	r3, #22
 80003fc:	77fb      	strb	r3, [r7, #31]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003fe:	f107 031c 	add.w	r3, r7, #28
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <setTime+0x68>)
 8000408:	f006 ff3e 	bl	8007288 <HAL_RTC_SetDate>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800040c:	2200      	movs	r2, #0
 800040e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <setTime+0x68>)
 8000414:	f007 fd30 	bl	8007e78 <HAL_RTCEx_SetWakeUpTimer_IT>



}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr
 8000424:	20000564 	.word	0x20000564

08000428 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	460b      	mov	r3, r1
 8000434:	71bb      	strb	r3, [r7, #6]
 8000436:	4613      	mov	r3, r2
 8000438:	717b      	strb	r3, [r7, #5]
	resetPins();
 800043a:	f000 f8d1 	bl	80005e0 <resetPins>

	int bits_count = convertToBinary(hour);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff85 	bl	8000350 <convertToBinary>
 8000446:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b05      	cmp	r3, #5
 800044c:	dd03      	ble.n	8000456 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800044e:	4858      	ldr	r0, [pc, #352]	; (80005b0 <displayHour+0x188>)
 8000450:	f000 ff3c 	bl	80012cc <Send>
		hour_displayed = 1;

	}


}
 8000454:	e0a7      	b.n	80005a6 <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e016      	b.n	800048a <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	fa42 f303 	asr.w	r3, r2, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00b      	beq.n	8000484 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 800046c:	4a51      	ldr	r2, [pc, #324]	; (80005b4 <displayHour+0x18c>)
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000474:	4a50      	ldr	r2, [pc, #320]	; (80005b8 <displayHour+0x190>)
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	f002 fcb0 	bl	8002de4 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2b05      	cmp	r3, #5
 800048e:	dde5      	ble.n	800045c <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e01b      	b.n	80004ce <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff08 	bl	80002b0 <splitNumber>
 80004a0:	4602      	mov	r2, r0
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	fa42 f303 	asr.w	r3, r2, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00b      	beq.n	80004c8 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 80004b0:	4a42      	ldr	r2, [pc, #264]	; (80005bc <displayHour+0x194>)
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004b8:	4a41      	ldr	r2, [pc, #260]	; (80005c0 <displayHour+0x198>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	f002 fc8e 	bl	8002de4 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	3301      	adds	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	dde0      	ble.n	8000496 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e01b      	b.n	8000512 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fee6 	bl	80002b0 <splitNumber>
 80004e4:	4602      	mov	r2, r0
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	fa42 f303 	asr.w	r3, r2, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00b      	beq.n	800050c <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80004f4:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <displayHour+0x19c>)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004fc:	4a32      	ldr	r2, [pc, #200]	; (80005c8 <displayHour+0x1a0>)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	f002 fc6c 	bl	8002de4 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b03      	cmp	r3, #3
 8000516:	dde0      	ble.n	80004da <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	e01b      	b.n	8000556 <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fec4 	bl	80002b0 <splitNumber>
 8000528:	4602      	mov	r2, r0
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	fa42 f303 	asr.w	r3, r2, r3
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00b      	beq.n	8000550 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <displayHour+0x1a4>)
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000540:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <displayHour+0x1a8>)
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f002 fc4a 	bl	8002de4 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	3301      	adds	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2b04      	cmp	r3, #4
 800055a:	dde0      	ble.n	800051e <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e01b      	b.n	800059a <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fea2 	bl	80002b0 <splitNumber>
 800056c:	4602      	mov	r2, r0
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	fa42 f303 	asr.w	r3, r2, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <displayHour+0x1ac>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <displayHour+0x1b0>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	f002 fc28 	bl	8002de4 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b03      	cmp	r3, #3
 800059e:	dde0      	ble.n	8000562 <displayHour+0x13a>
		hour_displayed = 1;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <displayHour+0x1b4>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800c044 	.word	0x0800c044
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000014 	.word	0x20000014
 80005bc:	20000020 	.word	0x20000020
 80005c0:	20000030 	.word	0x20000030
 80005c4:	20000038 	.word	0x20000038
 80005c8:	20000044 	.word	0x20000044
 80005cc:	20000060 	.word	0x20000060
 80005d0:	20000070 	.word	0x20000070
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	20000058 	.word	0x20000058
 80005dc:	20000125 	.word	0x20000125

080005e0 <resetPins>:

void resetPins(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e00e      	b.n	800060a <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80005ec:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <resetPins+0xc0>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f4:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <resetPins+0xc4>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	f002 fbf0 	bl	8002de4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b04      	cmp	r3, #4
 800060e:	dded      	ble.n	80005ec <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e01a      	b.n	800064c <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 8000616:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <resetPins+0xc8>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061e:	4a23      	ldr	r2, [pc, #140]	; (80006ac <resetPins+0xcc>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f002 fbdb 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <resetPins+0xd0>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <resetPins+0xd4>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f002 fbcf 	bl	8002de4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3301      	adds	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b02      	cmp	r3, #2
 8000650:	dde1      	ble.n	8000616 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e01a      	b.n	800068e <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <resetPins+0xd8>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <resetPins+0xdc>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fbba 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <resetPins+0xe0>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <resetPins+0xe4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f002 fbae 	bl	8002de4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b03      	cmp	r3, #3
 8000692:	dde1      	ble.n	8000658 <resetPins+0x78>
	}



}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000014 	.word	0x20000014
 80006a8:	20000038 	.word	0x20000038
 80006ac:	20000044 	.word	0x20000044
 80006b0:	2000004c 	.word	0x2000004c
 80006b4:	20000058 	.word	0x20000058
 80006b8:	20000020 	.word	0x20000020
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000060 	.word	0x20000060
 80006c4:	20000070 	.word	0x20000070

080006c8 <getNumOfDaysInMonth>:





uint8_t getNumOfDaysInMonth(uint8_t N){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d011      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d00e      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d00b      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d008      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d005      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	d002      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b0c      	cmp	r3, #12
 80006fa:	d101      	bne.n	8000700 <getNumOfDaysInMonth+0x38>
	        return 31;
 80006fc:	231f      	movs	r3, #31
 80006fe:	e013      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d008      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d005      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d002      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b0b      	cmp	r3, #11
 8000716:	d101      	bne.n	800071c <getNumOfDaysInMonth+0x54>
	        return 30;
 8000718:	231e      	movs	r3, #30
 800071a:	e005      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d101      	bne.n	8000726 <getNumOfDaysInMonth+0x5e>
	        return 28;
 8000722:	231c      	movs	r3, #28
 8000724:	e000      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 8000726:	2300      	movs	r3, #0
	    }

}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <FLASH_init>:


/* ===== FLASH INIT ===== */


void FLASH_init(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <FLASH_init+0x20>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <FLASH_init+0x24>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 0x255, FLASHTX_BUFF_SIZE);
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	f240 2155 	movw	r1, #597	; 0x255
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <FLASH_init+0x28>)
 800074c:	f009 fe78 	bl	800a440 <memset>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000010c 	.word	0x2000010c
 8000758:	2000010d 	.word	0x2000010d
 800075c:	20000168 	.word	0x20000168

08000760 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <Flash_flush>:





void Flash_flush(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e010      	b.n	80007a6 <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	1cfb      	adds	r3, r7, #3
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	21a0      	movs	r1, #160	; 0xa0
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <Flash_flush+0x44>)
 8000796:	f002 fde3 	bl	8003360 <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f001 fea8 	bl	80024f0 <HAL_Delay>
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b80      	cmp	r3, #128	; 0x80
 80007aa:	ddeb      	ble.n	8000784 <Flash_flush+0x10>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000268 	.word	0x20000268

080007bc <Flash_write>:



uint8_t bt = 0;

void Flash_write(int data[], int start_idx){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <Flash_write+0x88>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	6013      	str	r3, [r2, #0]


		uint8_t arr_idx = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	72fb      	strb	r3, [r7, #11]
		uint8_t arr_size = 6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	72bb      	strb	r3, [r7, #10]

		//control memory
		if(counter >= FLASHTX_BUFF_SIZE - arr_size - 1){
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <Flash_write+0x88>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dc02      	bgt.n	80007e8 <Flash_write+0x2c>
			counter = 0;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <Flash_write+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		}

		Send("Counter at: %d\r\n", counter);
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <Flash_write+0x88>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <Flash_write+0x8c>)
 80007f0:	f000 fd6c 	bl	80012cc <Send>

		for(int i = 0; i < arr_size; i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e01a      	b.n	8000830 <Flash_write+0x74>
			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <Flash_write+0x88>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	b299      	uxth	r1, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	2204      	movs	r2, #4
 800080a:	9201      	str	r2, [sp, #4]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	460a      	mov	r2, r1
 8000812:	21a0      	movs	r1, #160	; 0xa0
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <Flash_write+0x90>)
 8000816:	f002 fda3 	bl	8003360 <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];
			counter++;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <Flash_write+0x88>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <Flash_write+0x88>)
 8000822:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 8000824:	2005      	movs	r0, #5
 8000826:	f001 fe63 	bl	80024f0 <HAL_Delay>
		for(int i = 0; i < arr_size; i++){
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3301      	adds	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbe0      	blt.n	80007fa <Flash_write+0x3e>





}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000108 	.word	0x20000108
 8000848:	0800c064 	.word	0x0800c064
 800084c:	20000268 	.word	0x20000268

08000850 <Flash_read>:


int *Flash_read(){
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af04      	add	r7, sp, #16
	FLASH_init();
 8000856:	f7ff ff6d 	bl	8000734 <FLASH_init>
	uint8_t byte = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	717b      	strb	r3, [r7, #5]
	uint8_t data_found = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]


	uint8_t page = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	71bb      	strb	r3, [r7, #6]
	for(page = 0; page <= 128; page++){
 8000866:	2300      	movs	r3, #0
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	e031      	b.n	80008d0 <Flash_read+0x80>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, page, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2301      	movs	r3, #1
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	1d7b      	adds	r3, r7, #5
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	21a1      	movs	r1, #161	; 0xa1
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Flash_read+0x90>)
 8000884:	f002 fc44 	bl	8003110 <HAL_I2C_Mem_Read>

		//if byte is found then start downloading bytes to buffer
		if(byte != 0x00 && byte != 0x255){
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <Flash_read+0x42>
			//FlashTx_buff[Tx_busy++] = byte;
			data_found = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]

		}

		if(data_found == 1){
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d118      	bne.n	80008ca <Flash_read+0x7a>
				FlashTx_buff[FlashTx_busy++] = byte;
 8000898:	7979      	ldrb	r1, [r7, #5]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <Flash_read+0x94>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	b2d0      	uxtb	r0, r2
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <Flash_read+0x94>)
 80008a4:	7010      	strb	r0, [r2, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	b289      	uxth	r1, r1
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Flash_read+0x98>)
 80008ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(FlashTx_busy >= FLASHTX_BUFF_SIZE){
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <Flash_read+0x94>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da02      	bge.n	80008c0 <Flash_read+0x70>
					FlashTx_busy = 0;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <Flash_read+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
				}
				//if too many zeros found stop downlaoding to save only data
				if(byte == 0x00 || byte == 0x255){
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <Flash_read+0x7a>
					data_found = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
	for(page = 0; page <= 128; page++){
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	3301      	adds	r3, #1
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b80      	cmp	r3, #128	; 0x80
 80008d4:	d9ca      	bls.n	800086c <Flash_read+0x1c>
				}
		}

}

	return FlashTx_buff;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <Flash_read+0x98>)

}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000268 	.word	0x20000268
 80008e4:	2000010d 	.word	0x2000010d
 80008e8:	20000168 	.word	0x20000168

080008ec <Flash_getFreeSpace>:

// function to get first free address to write to
int Flash_getFreeSpace(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 80008fa:	e010      	b.n	800091e <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	21a1      	movs	r1, #161	; 0xa1
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <Flash_getFreeSpace+0x44>)
 8000914:	f002 fbfc 	bl	8003110 <HAL_I2C_Mem_Read>
		i++;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3301      	adds	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2bff      	cmp	r3, #255	; 0xff
 8000922:	d1eb      	bne.n	80008fc <Flash_getFreeSpace+0x10>

	}
	return i;
 8000924:	687b      	ldr	r3, [r7, #4]


}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000268 	.word	0x20000268

08000934 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a68      	ldr	r2, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b63      	ldr	r3, [pc, #396]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a62      	ldr	r2, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a5c      	ldr	r2, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b57      	ldr	r3, [pc, #348]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f641 515f 	movw	r1, #7519	; 0x1d5f
 80009c8:	484a      	ldr	r0, [pc, #296]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 80009ca:	f002 fa0b 	bl	8002de4 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f002 fa04 	bl	8002de4 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 80009dc:	2200      	movs	r2, #0
 80009de:	f24e 0107 	movw	r1, #57351	; 0xe007
 80009e2:	4845      	ldr	r0, [pc, #276]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 80009e4:	f002 f9fe 	bl	8002de4 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2104      	movs	r1, #4
 80009ec:	4843      	ldr	r0, [pc, #268]	; (8000afc <MX_GPIO_Init+0x1c8>)
 80009ee:	f002 f9f9 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	483a      	ldr	r0, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f001 ff59 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000a0e:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000a12:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a28:	f001 ff4a 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 8000a2c:	f248 2313 	movw	r3, #33299	; 0x8213
 8000a30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f001 ff3c 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000a48:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 8000a4c:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 ff2c 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000a68:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a7e:	f001 ff1f 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000a82:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000a86:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 8000a9c:	f001 ff10 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000aa0:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000aa4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 8000ab6:	f001 ff03 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000aba:	2304      	movs	r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_GPIO_Init+0x1c8>)
 8000ad2:	f001 fef5 	bl	80028c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f001 fe1c 	bl	8002718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f001 fe45 	bl	8002770 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000c00 	.word	0x48000c00

08000b00 <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000b06:	f000 fe6d 	bl	80017e4 <parseIntData>
 8000b0a:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d002      	beq.n	8000b18 <handleSetClockMode+0x18>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d117      	bne.n	8000b48 <handleSetClockMode+0x48>

			clock_mode = mode;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <handleSetClockMode+0x58>)
 8000b1e:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d10c      	bne.n	8000b40 <handleSetClockMode+0x40>
				resetPins();
 8000b26:	f7ff fd5b 	bl	80005e0 <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <handleSetClockMode+0x5c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <handleSetClockMode+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <handleSetClockMode+0x64>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f7ff fc74 	bl	8000428 <displayHour>
			}

			Send("$Success=1#\r\n");
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <handleSetClockMode+0x68>)
 8000b42:	f000 fbc3 	bl	80012cc <Send>
		if(mode == 1 || mode == 2){
 8000b46:	e003      	b.n	8000b50 <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f001 f80d 	bl	8001b68 <sendFail>
		}


}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000078 	.word	0x20000078
 8000b5c:	20000140 	.word	0x20000140
 8000b60:	20000141 	.word	0x20000141
 8000b64:	20000142 	.word	0x20000142
 8000b68:	0800c078 	.word	0x0800c078

08000b6c <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000b7e:	f7ff fd2f 	bl	80005e0 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <handleShowHour+0x36>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b16      	cmp	r3, #22
 8000b8c:	d809      	bhi.n	8000ba2 <handleShowHour+0x36>
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b3b      	cmp	r3, #59	; 0x3b
 8000b92:	d806      	bhi.n	8000ba2 <handleShowHour+0x36>
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	2b3b      	cmp	r3, #59	; 0x3b
 8000b98:	d803      	bhi.n	8000ba2 <handleShowHour+0x36>

			 hour_displayed = 0;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <handleShowHour+0x48>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e003      	b.n	8000baa <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f000 ffe0 	bl	8001b68 <sendFail>
	        }


}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000125 	.word	0x20000125

08000bb8 <compareAlarms>:

//compare alarms that are set
/**
 * @returns earlier alarm in form of 1/2
 */
uint8_t compareAlarms(RTC_AlarmTypeDef alarmA, RTC_AlarmTypeDef alarmB){
 8000bb8:	b084      	sub	sp, #16
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	f107 0c10 	add.w	ip, r7, #16
 8000bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			//todo
			//add month checking
			uint8_t alarmA_day = alarmA.AlarmDateWeekDay;
 8000bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bcc:	71fb      	strb	r3, [r7, #7]
			uint8_t alarmA_hours = alarmA.AlarmTime.Hours;
 8000bce:	7c3b      	ldrb	r3, [r7, #16]
 8000bd0:	71bb      	strb	r3, [r7, #6]
			uint8_t alarmA_minutes = alarmA.AlarmTime.Minutes;
 8000bd2:	7c7b      	ldrb	r3, [r7, #17]
 8000bd4:	717b      	strb	r3, [r7, #5]
			uint8_t alarmA_seconds = alarmA.AlarmTime.Seconds;
 8000bd6:	7cbb      	ldrb	r3, [r7, #18]
 8000bd8:	713b      	strb	r3, [r7, #4]

			uint8_t alarmB_day = alarmB.AlarmDateWeekDay;
 8000bda:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000bde:	70fb      	strb	r3, [r7, #3]
			uint8_t alarmB_hours = alarmB.AlarmTime.Hours;
 8000be0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000be4:	70bb      	strb	r3, [r7, #2]
			uint8_t alarmB_minutes = alarmB.AlarmTime.Minutes;
 8000be6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000bea:	707b      	strb	r3, [r7, #1]
			uint8_t alarmB_seconds = alarmB.AlarmTime.Seconds;
 8000bec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000bf0:	703b      	strb	r3, [r7, #0]

			if(alarmA_day == alarmB_day){ //check if day is same if yes - check if hour is the same
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d125      	bne.n	8000c46 <compareAlarms+0x8e>

				if(alarmA_hours == alarmB_hours){
 8000bfa:	79ba      	ldrb	r2, [r7, #6]
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d119      	bne.n	8000c36 <compareAlarms+0x7e>

					if(alarmA_minutes == alarmB_minutes){
 8000c02:	797a      	ldrb	r2, [r7, #5]
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d10d      	bne.n	8000c26 <compareAlarms+0x6e>


						if(alarmA_seconds == alarmB_seconds){
 8000c0a:	793a      	ldrb	r2, [r7, #4]
 8000c0c:	783b      	ldrb	r3, [r7, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d101      	bne.n	8000c16 <compareAlarms+0x5e>
							return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e01e      	b.n	8000c54 <compareAlarms+0x9c>
						} else {
							if(alarmA_seconds < alarmB_seconds){
 8000c16:	793a      	ldrb	r2, [r7, #4]
 8000c18:	783b      	ldrb	r3, [r7, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d201      	bcs.n	8000c22 <compareAlarms+0x6a>
								return 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e018      	b.n	8000c54 <compareAlarms+0x9c>
							} else {
								return 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	e016      	b.n	8000c54 <compareAlarms+0x9c>



					}else {

						if(alarmA_minutes < alarmB_minutes){
 8000c26:	797a      	ldrb	r2, [r7, #5]
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d201      	bcs.n	8000c32 <compareAlarms+0x7a>
							return 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e010      	b.n	8000c54 <compareAlarms+0x9c>
						} else {
							return 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	e00e      	b.n	8000c54 <compareAlarms+0x9c>
						}
					}

				} else {

					if(alarmA_hours < alarmB_hours){
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	78bb      	ldrb	r3, [r7, #2]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d201      	bcs.n	8000c42 <compareAlarms+0x8a>

						return 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e008      	b.n	8000c54 <compareAlarms+0x9c>
					} else {
						return 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	e006      	b.n	8000c54 <compareAlarms+0x9c>
					}

				}
			} else {
				if(alarmA_day < alarmB_day){
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d201      	bcs.n	8000c52 <compareAlarms+0x9a>
					return 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <compareAlarms+0x9c>
				} else {
					return 2;
 8000c52:	2302      	movs	r3, #2
				}

			}


}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	b004      	add	sp, #16
 8000c60:	4770      	bx	lr
	...

08000c64 <getAlarm>:


/**
 * @param INT {alarm} 1 for alarm A 2 for alarmB
 */
RTC_AlarmTypeDef getAlarm(uint8_t whichAlarm){
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef alarm;

	switch(whichAlarm){
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <getAlarm+0x18>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d009      	beq.n	8000c8e <getAlarm+0x2a>
 8000c7a:	e011      	b.n	8000ca0 <getAlarm+0x3c>
	case 1:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000c7c:	f107 0108 	add.w	r1, r7, #8
 8000c80:	2300      	movs	r3, #0
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <getAlarm+0x5c>)
 8000c88:	f006 ff76 	bl	8007b78 <HAL_RTC_GetAlarm>
		break;
 8000c8c:	e008      	b.n	8000ca0 <getAlarm+0x3c>
	case 2:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8000c8e:	f107 0108 	add.w	r1, r7, #8
 8000c92:	2300      	movs	r3, #0
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <getAlarm+0x5c>)
 8000c9a:	f006 ff6d 	bl	8007b78 <HAL_RTC_GetAlarm>
		break;
 8000c9e:	bf00      	nop
	}



	return alarm;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	f107 0408 	add.w	r4, r7, #8
 8000ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb4:	e885 0003 	stmia.w	r5, {r0, r1}




}
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc0:	20000564 	.word	0x20000564

08000cc4 <handleSetAlarm>:

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second){
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	b0d9      	sub	sp, #356	; 0x164
 8000cc8:	af10      	add	r7, sp, #64	; 0x40
 8000cca:	1d3c      	adds	r4, r7, #4
 8000ccc:	6020      	str	r0, [r4, #0]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	1cfb      	adds	r3, r7, #3
 8000cd6:	4622      	mov	r2, r4
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	1cbb      	adds	r3, r7, #2
 8000cdc:	4602      	mov	r2, r0
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	801a      	strh	r2, [r3, #0]

	uint8_t max_days = getNumOfDaysInMonth(month); //get maximum days in a month
 8000ce6:	1cbb      	adds	r3, r7, #2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcec 	bl	80006c8 <getNumOfDaysInMonth>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	//Send("Encoded: %d\r\n", encoded);




	if(year >= 22 && (day > 0 && day <= max_days) && (month > 0 && month <= 12)){
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b15      	cmp	r3, #21
 8000cfc:	f240 813b 	bls.w	8000f76 <handleSetAlarm+0x2b2>
 8000d00:	1cfb      	adds	r3, r7, #3
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8136 	beq.w	8000f76 <handleSetAlarm+0x2b2>
 8000d0a:	1cfb      	adds	r3, r7, #3
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f200 812f 	bhi.w	8000f76 <handleSetAlarm+0x2b2>
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 812a 	beq.w	8000f76 <handleSetAlarm+0x2b2>
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b0c      	cmp	r3, #12
 8000d28:	f200 8125 	bhi.w	8000f76 <handleSetAlarm+0x2b2>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000d2c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 811c 	beq.w	8000f6e <handleSetAlarm+0x2aa>
 8000d36:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d3a:	2b16      	cmp	r3, #22
 8000d3c:	f200 8117 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
 8000d40:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d44:	2b3b      	cmp	r3, #59	; 0x3b
 8000d46:	f200 8112 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
 8000d4a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000d4e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d50:	f200 810d 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
				alarm_to_set[0] = day;
 8000d54:	1cfb      	adds	r3, r7, #3
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				alarm_to_set[1] = month;
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				alarm_to_set[2] = year;
 8000d64:	463b      	mov	r3, r7
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				alarm_to_set[3] = hour;
 8000d6c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				alarm_to_set[4] = minute;
 8000d74:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				alarm_to_set[5] = second;
 8000d7c:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			Send("$Success=1#\r\n");
 8000d84:	4880      	ldr	r0, [pc, #512]	; (8000f88 <handleSetAlarm+0x2c4>)
 8000d86:	f000 faa1 	bl	80012cc <Send>



			sAlarm.AlarmTime.Hours = hour;
 8000d8a:	4a80      	ldr	r2, [pc, #512]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d8c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d90:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 8000d92:	4a7e      	ldr	r2, [pc, #504]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d94:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d98:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = second;
 8000d9a:	4a7c      	ldr	r2, [pc, #496]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d9c:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000da0:	7093      	strb	r3, [r2, #2]
			sAlarm.AlarmDateWeekDay = day;
 8000da2:	4a7a      	ldr	r2, [pc, #488]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000da4:	1cfb      	adds	r3, r7, #3
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f882 3020 	strb.w	r3, [r2, #32]


			int start_idx = Flash_getFreeSpace() - 1;
 8000dac:	f7ff fd9e 	bl	80008ec <Flash_getFreeSpace>
 8000db0:	4603      	mov	r3, r0
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			Send("Start idx: %d\r\n", start_idx);
 8000db8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000dbc:	4874      	ldr	r0, [pc, #464]	; (8000f90 <handleSetAlarm+0x2cc>)
 8000dbe:	f000 fa85 	bl	80012cc <Send>

			//Flash_write(alarm_to_set, start_idx);

			//=========get alarms from eeprom to check whether to set new alarm or not===========

			int *alarms = Flash_read();
 8000dc2:	f7ff fd45 	bl	8000850 <Flash_read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114


			//get two already defined alarms
			RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff46 	bl	8000c64 <getAlarm>
			RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff40 	bl	8000c64 <getAlarm>
//			Send("AlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//					alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);


			//check which of the two is earlier
			uint8_t earlierAlarm = compareAlarms(alarmA, alarmB);
 8000de4:	f107 0608 	add.w	r6, r7, #8
 8000de8:	ad06      	add	r5, sp, #24
 8000dea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dfe:	466d      	mov	r5, sp
 8000e00:	f106 0410 	add.w	r4, r6, #16
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e14:	f7ff fed0 	bl	8000bb8 <compareAlarms>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

			//if alarm is earlier set that alarm instead and set the other alarm to oposite of next alarm


			//check alarm to set with earlier alarm
			uint8_t alarmToRecheck = compareAlarms(getAlarm(earlierAlarm)/* wczesniejszy z dwoch zdefiniowanych*/ , sAlarm); //will return 1 if earlier is earlier
 8000e1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e22:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff1b 	bl	8000c64 <getAlarm>
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000e30:	ac06      	add	r4, sp, #24
 8000e32:	461d      	mov	r5, r3
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e40:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e44:	466d      	mov	r5, sp
 8000e46:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5c:	f7ff feac 	bl	8000bb8 <compareAlarms>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112



			//if alarm to set is earlier than earlier alarm - zastąp
			if(alarmToRecheck == 2){
 8000e66:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d116      	bne.n	8000e9c <handleSetAlarm+0x1d8>

				//set earlier alarm to alarm b - SET ALARM A TO BE B
				RTC_AlarmTypeDef swapAlarmAtoB = getAlarm(earlierAlarm);
 8000e6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e72:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fef3 	bl	8000c64 <getAlarm>
				swapAlarmAtoB.Alarm = RTC_ALARM_B;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	67fb      	str	r3, [r7, #124]	; 0x7c

				HAL_RTC_SetAlarm_IT(&hrtc, &swapAlarmAtoB, RTC_FORMAT_BIN);
 8000e84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4841      	ldr	r0, [pc, #260]	; (8000f94 <handleSetAlarm+0x2d0>)
 8000e8e:	f006 fb87 	bl	80075a0 <HAL_RTC_SetAlarm_IT>

				//set alarm to set to primary ALARM
				sAlarm.Alarm = RTC_ALARM_A;
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
 8000e9a:	e059      	b.n	8000f50 <handleSetAlarm+0x28c>


			} else {	//else check second  // later alarm
				if(compareAlarms(getAlarm(1), sAlarm) == 2){
 8000e9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fede 	bl	8000c64 <getAlarm>
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000eaa:	ac06      	add	r4, sp, #24
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eba:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ebe:	466d      	mov	r5, sp
 8000ec0:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ecc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed6:	f7ff fe6f 	bl	8000bb8 <compareAlarms>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d104      	bne.n	8000eea <handleSetAlarm+0x226>
					sAlarm.Alarm = RTC_ALARM_A;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ee8:	e032      	b.n	8000f50 <handleSetAlarm+0x28c>



				} else {
					//compare if alarm to set is later than alarm B
					if(compareAlarms(getAlarm(2), sAlarm) == 1){
 8000eea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feb7 	bl	8000c64 <getAlarm>
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000ef8:	ac06      	add	r4, sp, #24
 8000efa:	461d      	mov	r5, r3
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f08:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f0c:	466d      	mov	r5, sp
 8000f0e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	f7ff fe48 	bl	8000bb8 <compareAlarms>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <handleSetAlarm+0x278>
						//if alarm is later than alarm B, store it in flash
						Flash_write(alarm_to_set, start_idx);
 8000f2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f32:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc40 	bl	80007bc <Flash_write>
					}

					sAlarm.Alarm = RTC_ALARM_B;				// jesli jest wczesniejszy to 1 przechodzi na 2 a on jest 1
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

			}



			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f44:	e004      	b.n	8000f50 <handleSetAlarm+0x28c>
				Error_Handler();
 8000f46:	f000 ff33 	bl	8001db0 <Error_Handler>
				sendFail(4);
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f000 fe0c 	bl	8001b68 <sendFail>
			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f50:	2200      	movs	r2, #0
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <handleSetAlarm+0x2d0>)
 8000f56:	f006 fb23 	bl	80075a0 <HAL_RTC_SetAlarm_IT>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f2      	bne.n	8000f46 <handleSetAlarm+0x282>
			};

			HAL_Delay(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f001 fac5 	bl	80024f0 <HAL_Delay>
//
//			Send("\r\nAlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//				alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);

			//get alarms to display it
			handleGetAlarms();
 8000f66:	f000 f825 	bl	8000fb4 <handleGetAlarms>
		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f6a:	bf00      	nop
 8000f6c:	e007      	b.n	8000f7e <handleSetAlarm+0x2ba>

			} else { //send fail if data not correct
				sendFail(2);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 fdfa 	bl	8001b68 <sendFail>
		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f74:	e003      	b.n	8000f7e <handleSetAlarm+0x2ba>
			}

	} else {
		sendFail(2);
 8000f76:	2002      	movs	r0, #2
 8000f78:	f000 fdf6 	bl	8001b68 <sendFail>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f88:	0800c078 	.word	0x0800c078
 8000f8c:	20000338 	.word	0x20000338
 8000f90:	0800c088 	.word	0x0800c088
 8000f94:	20000564 	.word	0x20000564

08000f98 <handleResetAlarms>:


void handleResetAlarms(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	Flash_flush();
 8000f9c:	f7ff fbea 	bl	8000774 <Flash_flush>
	FLASH_init();
 8000fa0:	f7ff fbc8 	bl	8000734 <FLASH_init>
	Send("$Success=1#\r\n");
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <handleResetAlarms+0x18>)
 8000fa6:	f000 f991 	bl	80012cc <Send>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800c078 	.word	0x0800c078

08000fb4 <handleGetAlarms>:



void handleGetAlarms(){
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b09b      	sub	sp, #108	; 0x6c
 8000fb8:	af06      	add	r7, sp, #24

	RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe4f 	bl	8000c64 <getAlarm>
	RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe4a 	bl	8000c64 <getAlarm>


		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000fd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fda:	461e      	mov	r6, r3
 8000fdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
							alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes, alarmA.AlarmTime.Seconds);
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	7839      	ldrb	r1, [r7, #0]
 8000fec:	7878      	ldrb	r0, [r7, #1]
 8000fee:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000ff2:	9404      	str	r4, [sp, #16]
 8000ff4:	9003      	str	r0, [sp, #12]
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9201      	str	r2, [sp, #4]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	4632      	mov	r2, r6
 8001000:	4629      	mov	r1, r5
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <handleGetAlarms+0x5c>)
 8001004:	f000 f962 	bl	80012cc <Send>




}
 8001008:	bf00      	nop
 800100a:	3754      	adds	r7, #84	; 0x54
 800100c:	46bd      	mov	sp, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	0800c098 	.word	0x0800c098

08001014 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	f001 ff44 	bl	8002edc <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 fea9 	bl	8001db0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001062:	f003 fe25 	bl	8004cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 fea0 	bl	8001db0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001074:	f003 fe8c 	bl	8004d90 <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 fe97 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000268 	.word	0x20000268
 800108c:	40005400 	.word	0x40005400
 8001090:	2000090e 	.word	0x2000090e

08001094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_I2C_MspInit+0x8c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12f      	bne.n	8001116 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ce:	23c0      	movs	r3, #192	; 0xc0
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010de:	2304      	movs	r3, #4
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <HAL_I2C_MspInit+0x94>)
 80010ea:	f001 fbe9 	bl	80028c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201f      	movs	r0, #31
 800110c:	f001 fb04 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001110:	201f      	movs	r0, #31
 8001112:	f001 fb2d 	bl	8002770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	x1hzTime++;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <delay_1hz+0x30>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <delay_1hz+0x30>)
 800113a:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <delay_1hz+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001144:	d305      	bcc.n	8001152 <delay_1hz+0x26>
		x1hz = 1;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <delay_1hz+0x34>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <delay_1hz+0x30>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
	}
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000010e 	.word	0x2000010e
 8001160:	20000112 	.word	0x20000112

08001164 <delay_4hz>:

void delay_4hz(){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	x4hzTime++;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <delay_4hz+0x30>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <delay_4hz+0x30>)
 8001172:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <delay_4hz+0x30>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2bf9      	cmp	r3, #249	; 0xf9
 800117a:	d905      	bls.n	8001188 <delay_4hz+0x24>
		x4hz = 1;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <delay_4hz+0x34>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <delay_4hz+0x30>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
	}

}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000110 	.word	0x20000110
 8001198:	20000113 	.word	0x20000113

0800119c <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <delayUs+0x30>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80011ae:	bf00      	nop
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <delayUs+0x34>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3f9      	bcc.n	80011b0 <delayUs+0x14>
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000958 	.word	0x20000958
 80011d0:	2000090c 	.word	0x2000090c

080011d4 <delayMs>:

void delayMs(uint16_t ms){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	81fb      	strh	r3, [r7, #14]
 80011e2:	e006      	b.n	80011f2 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 80011e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e8:	f7ff ffd8 	bl	800119c <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	3301      	adds	r3, #1
 80011f0:	81fb      	strh	r3, [r7, #14]
 80011f2:	89fa      	ldrh	r2, [r7, #14]
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3f4      	bcc.n	80011e4 <delayMs+0x10>
	}
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <handleBlinkCommand+0x60>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <handleBlinkCommand+0x64>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	429a      	cmp	r2, r3
 8001214:	d805      	bhi.n	8001222 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <handleBlinkCommand+0x68>)
 800121c:	f001 fde2 	bl	8002de4 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8001220:	e01e      	b.n	8001260 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <handleBlinkCommand+0x60>)
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <handleBlinkCommand+0x6c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	429a      	cmp	r2, r3
 800122e:	d805      	bhi.n	800123c <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <handleBlinkCommand+0x68>)
 8001236:	f001 fdd5 	bl	8002de4 <HAL_GPIO_WritePin>
}
 800123a:	e011      	b.n	8001260 <handleBlinkCommand+0x5c>
		led_delay = 0;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <handleBlinkCommand+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <handleBlinkCommand+0x70>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <handleBlinkCommand+0x70>)
 800124e:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <handleBlinkCommand+0x70>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <handleBlinkCommand+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000158 	.word	0x20000158
 8001268:	2000007a 	.word	0x2000007a
 800126c:	48000800 	.word	0x48000800
 8001270:	2000014c 	.word	0x2000014c
 8001274:	2000014e 	.word	0x2000014e
 8001278:	2000014b 	.word	0x2000014b

0800127c <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <UART_init+0x38>)
 8001282:	2200      	movs	r2, #0
 8001284:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <UART_init+0x3c>)
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <UART_init+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <UART_init+0x44>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <UART_init+0x48>)
 80012a0:	f009 f8ce 	bl	800a440 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80012a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a8:	2100      	movs	r1, #0
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <UART_init+0x4c>)
 80012ac:	f009 f8c8 	bl	800a440 <memset>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000116 	.word	0x20000116
 80012b8:	20000118 	.word	0x20000118
 80012bc:	2000011a 	.word	0x2000011a
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	20000708 	.word	0x20000708
 80012c8:	20000364 	.word	0x20000364

080012cc <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 80012cc:	b40f      	push	{r0, r1, r2, r3}
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b0c4      	sub	sp, #272	; 0x110
 80012d2:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 80012d4:	4b41      	ldr	r3, [pc, #260]	; (80013dc <Send+0x110>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 80012e2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	f107 000c 	add.w	r0, r7, #12
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80012f6:	f009 f94b 	bl	800a590 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001300:	e020      	b.n	8001344 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f107 010c 	add.w	r1, r7, #12
 800130c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001310:	440a      	add	r2, r1
 8001312:	7811      	ldrb	r1, [r2, #0]
 8001314:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <Send+0x114>)
 8001316:	54d1      	strb	r1, [r2, r3]
		idx++;
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	db03      	blt.n	800133a <Send+0x6e>
			idx = 0;
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 800133a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133e:	3301      	adds	r3, #1
 8001340:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff53 	bl	80001f4 <strlen>
 800134e:	4602      	mov	r2, r0
 8001350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001354:	429a      	cmp	r2, r3
 8001356:	d8d4      	bhi.n	8001302 <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <Send+0x110>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Send+0x118>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	429a      	cmp	r2, r3
 800136a:	d127      	bne.n	80013bc <Send+0xf0>
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <Send+0x11c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <Send+0x110>)
 800137c:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <Send+0x118>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <Send+0x114>)
 8001388:	5c9a      	ldrb	r2, [r3, r2]
 800138a:	1cfb      	adds	r3, r7, #3
 800138c:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <Send+0x118>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <Send+0x118>)
 800139a:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <Send+0x118>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a6:	d302      	bcc.n	80013ae <Send+0xe2>
			Tx_busy = 0;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <Send+0x118>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80013ae:	1cfb      	adds	r3, r7, #3
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <Send+0x11c>)
 80013b6:	f007 fc37 	bl	8008c28 <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 80013ba:	e005      	b.n	80013c8 <Send+0xfc>

	} else {
		Tx_empty = idx;
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <Send+0x110>)
 80013c6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c8:	b662      	cpsie	i
}
 80013ca:	bf00      	nop
	}
	__enable_irq();


}
 80013cc:	bf00      	nop
 80013ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80013d2:	46bd      	mov	sp, r7
 80013d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d8:	b004      	add	sp, #16
 80013da:	4770      	bx	lr
 80013dc:	2000011a 	.word	0x2000011a
 80013e0:	20000364 	.word	0x20000364
 80013e4:	2000011c 	.word	0x2000011c
 80013e8:	200009a4 	.word	0x200009a4

080013ec <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_TxCpltCallback+0x60>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	429a      	cmp	r2, r3
 8001402:	d01d      	beq.n	8001440 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_TxCpltCallback+0x64>)
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 800141e:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d302      	bcc.n	8001432 <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001432:	f107 030f 	add.w	r3, r7, #15
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_UART_TxCpltCallback+0x68>)
 800143c:	f007 fbf4 	bl	8008c28 <HAL_UART_Transmit_IT>
	}
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000011c 	.word	0x2000011c
 800144c:	2000011a 	.word	0x2000011a
 8001450:	20000364 	.word	0x20000364
 8001454:	200009a4 	.word	0x200009a4

08001458 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_UART_RxCpltCallback+0x50>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11a      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 8001476:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001482:	d302      	bcc.n	800148a <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_UART_RxCpltCallback+0x58>)
 8001494:	4413      	add	r3, r2
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_UART_RxCpltCallback+0x5c>)
 800149c:	f007 fc32 	bl	8008d04 <HAL_UART_Receive_IT>


	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004400 	.word	0x40004400
 80014ac:	20000116 	.word	0x20000116
 80014b0:	20000708 	.word	0x20000708
 80014b4:	200009a4 	.word	0x200009a4

080014b8 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <uart_ready+0x24>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <uart_ready+0x28>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d101      	bne.n	80014d0 <uart_ready+0x18>
		return 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <uart_ready+0x1a>
	} else {
		return 1;
 80014d0:	2301      	movs	r3, #1
	}
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000116 	.word	0x20000116
 80014e0:	20000118 	.word	0x20000118

080014e4 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ======== RTC =========== */



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f005 fe5d 	bl	80071b0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80014f6:	2200      	movs	r2, #0
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f005 fff4 	bl	80074e8 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	737b      	strb	r3, [r7, #13]


	 if(clock_mode == 1){
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	7bb9      	ldrb	r1, [r7, #14]
 8001520:	7b7a      	ldrb	r2, [r7, #13]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ff80 	bl	8000428 <displayHour>





}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000128 	.word	0x20000128
 8001534:	2000013c 	.word	0x2000013c
 8001538:	20000078 	.word	0x20000078

0800153c <HAL_RTC_AlarmAEventCallback>:
/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800154a:	f001 fc4b 	bl	8002de4 <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	48000800 	.word	0x48000800

0800155c <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af06      	add	r7, sp, #24
	uint8_t picked_command = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 8001566:	495c      	ldr	r1, [pc, #368]	; (80016d8 <parseCommand+0x17c>)
 8001568:	485c      	ldr	r0, [pc, #368]	; (80016dc <parseCommand+0x180>)
 800156a:	f7fe fe39 	bl	80001e0 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <parseCommand+0x1e>

		handleSetClockMode();
 8001574:	f7ff fac4 	bl	8000b00 <handleSetClockMode>
 8001578:	e0a2      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("setTime", command) == 0){
 800157a:	4957      	ldr	r1, [pc, #348]	; (80016d8 <parseCommand+0x17c>)
 800157c:	4858      	ldr	r0, [pc, #352]	; (80016e0 <parseCommand+0x184>)
 800157e:	f7fe fe2f 	bl	80001e0 <strcmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11c      	bne.n	80015c2 <parseCommand+0x66>
		parseTime();
 8001588:	f000 f8d4 	bl	8001734 <parseTime>
		resetPins();
 800158c:	f7ff f828 	bl	80005e0 <resetPins>

		setTime(sTime, sDate, hour_to_show, minute_to_show, second_to_show);
 8001590:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <parseCommand+0x188>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <parseCommand+0x18c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	4b52      	ldr	r3, [pc, #328]	; (80016ec <parseCommand+0x190>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <parseCommand+0x194>)
 80015aa:	9004      	str	r0, [sp, #16]
 80015ac:	9103      	str	r1, [sp, #12]
 80015ae:	9202      	str	r2, [sp, #8]
 80015b0:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <parseCommand+0x198>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	f7fe fefe 	bl	80003bc <setTime>
 80015c0:	e07e      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("getTime", command) == 0) {
 80015c2:	4945      	ldr	r1, [pc, #276]	; (80016d8 <parseCommand+0x17c>)
 80015c4:	484c      	ldr	r0, [pc, #304]	; (80016f8 <parseCommand+0x19c>)
 80015c6:	f7fe fe0b 	bl	80001e0 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d116      	bne.n	80015fe <parseCommand+0xa2>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <parseCommand+0x194>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <parseCommand+0x194>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <parseCommand+0x194>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	4846      	ldr	r0, [pc, #280]	; (80016fc <parseCommand+0x1a0>)
 80015e2:	f7ff fe73 	bl	80012cc <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <parseCommand+0x198>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <parseCommand+0x198>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <parseCommand+0x198>)
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	4842      	ldr	r0, [pc, #264]	; (8001700 <parseCommand+0x1a4>)
 80015f8:	f7ff fe68 	bl	80012cc <Send>
 80015fc:	e060      	b.n	80016c0 <parseCommand+0x164>


	}else if(strcmp("setAlarm", command) == 0){
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <parseCommand+0x17c>)
 8001600:	4840      	ldr	r0, [pc, #256]	; (8001704 <parseCommand+0x1a8>)
 8001602:	f7fe fded 	bl	80001e0 <strcmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d123      	bne.n	8001654 <parseCommand+0xf8>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 800160c:	f000 f8c0 	bl	8001790 <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set, second_to_set);
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <parseCommand+0x1ac>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461c      	mov	r4, r3
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <parseCommand+0x1b0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461d      	mov	r5, r3
 8001620:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <parseCommand+0x1b4>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	461e      	mov	r6, r3
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <parseCommand+0x1b8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <parseCommand+0x1bc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <parseCommand+0x1c0>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <parseCommand+0x198>)
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	9200      	str	r2, [sp, #0]
 8001646:	4633      	mov	r3, r6
 8001648:	462a      	mov	r2, r5
 800164a:	4621      	mov	r1, r4
 800164c:	6800      	ldr	r0, [r0, #0]
 800164e:	f7ff fb39 	bl	8000cc4 <handleSetAlarm>
 8001652:	e035      	b.n	80016c0 <parseCommand+0x164>


	} else if(strcmp("getAlarms", command) == 0){
 8001654:	4920      	ldr	r1, [pc, #128]	; (80016d8 <parseCommand+0x17c>)
 8001656:	4832      	ldr	r0, [pc, #200]	; (8001720 <parseCommand+0x1c4>)
 8001658:	f7fe fdc2 	bl	80001e0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <parseCommand+0x10c>
		handleGetAlarms();
 8001662:	f7ff fca7 	bl	8000fb4 <handleGetAlarms>
 8001666:	e02b      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("getAlarmsCount", command) == 0){
 8001668:	491b      	ldr	r1, [pc, #108]	; (80016d8 <parseCommand+0x17c>)
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <parseCommand+0x1c8>)
 800166c:	f7fe fdb8 	bl	80001e0 <strcmp>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <parseCommand+0x164>



	} else if (strcmp("resetAlarms", command) == 0){
 8001676:	4918      	ldr	r1, [pc, #96]	; (80016d8 <parseCommand+0x17c>)
 8001678:	482b      	ldr	r0, [pc, #172]	; (8001728 <parseCommand+0x1cc>)
 800167a:	f7fe fdb1 	bl	80001e0 <strcmp>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <parseCommand+0x12e>
		handleResetAlarms();
 8001684:	f7ff fc88 	bl	8000f98 <handleResetAlarms>
 8001688:	e01a      	b.n	80016c0 <parseCommand+0x164>

	} else if (strcmp("showHour", command) == 0){
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <parseCommand+0x17c>)
 800168c:	4827      	ldr	r0, [pc, #156]	; (800172c <parseCommand+0x1d0>)
 800168e:	f7fe fda7 	bl	80001e0 <strcmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d110      	bne.n	80016ba <parseCommand+0x15e>

		parseTime();
 8001698:	f000 f84c 	bl	8001734 <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <parseCommand+0x188>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <parseCommand+0x18c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <parseCommand+0x190>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	f7ff fa5a 	bl	8000b6c <handleShowHour>
 80016b8:	e002      	b.n	80016c0 <parseCommand+0x164>

	}
	else {
		sendFail(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 fa54 	bl	8001b68 <sendFail>
	}

	//handle picked command

	clearCommand();
 80016c0:	f000 f8ac 	bl	800181c <clearCommand>
	clearData();
 80016c4:	f000 f8ba 	bl	800183c <clearData>
	Frame_busy = 0;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <parseCommand+0x1d4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002b8 	.word	0x200002b8
 80016dc:	0800c0d0 	.word	0x0800c0d0
 80016e0:	0800c0d8 	.word	0x0800c0d8
 80016e4:	20000140 	.word	0x20000140
 80016e8:	20000141 	.word	0x20000141
 80016ec:	20000142 	.word	0x20000142
 80016f0:	20000128 	.word	0x20000128
 80016f4:	2000013c 	.word	0x2000013c
 80016f8:	0800c0e0 	.word	0x0800c0e0
 80016fc:	0800c0e8 	.word	0x0800c0e8
 8001700:	0800c108 	.word	0x0800c108
 8001704:	0800c128 	.word	0x0800c128
 8001708:	20000143 	.word	0x20000143
 800170c:	20000144 	.word	0x20000144
 8001710:	20000146 	.word	0x20000146
 8001714:	20000148 	.word	0x20000148
 8001718:	20000149 	.word	0x20000149
 800171c:	2000014a 	.word	0x2000014a
 8001720:	0800c134 	.word	0x0800c134
 8001724:	0800c140 	.word	0x0800c140
 8001728:	0800c150 	.word	0x0800c150
 800172c:	0800c15c 	.word	0x0800c15c
 8001730:	2000011e 	.word	0x2000011e

08001734 <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <parseTime+0x44>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <parseTime+0x48>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <parseTime+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <parseTime+0x4c>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <parseTime+0x48>)
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <parseTime+0x44>)
 8001754:	490b      	ldr	r1, [pc, #44]	; (8001784 <parseTime+0x50>)
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <parseTime+0x54>)
 8001758:	f008 fe92 	bl	800a480 <siscanf>
 800175c:	4603      	mov	r3, r0
 800175e:	2b03      	cmp	r3, #3
 8001760:	d103      	bne.n	800176a <parseTime+0x36>

		 Send("$Success=1#\r\n");
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <parseTime+0x58>)
 8001764:	f7ff fdb2 	bl	80012cc <Send>

	 } else {

		 sendFail(2);
	 }
}
 8001768:	e002      	b.n	8001770 <parseTime+0x3c>
		 sendFail(2);
 800176a:	2002      	movs	r0, #2
 800176c:	f000 f9fc 	bl	8001b68 <sendFail>
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000140 	.word	0x20000140
 800177c:	20000141 	.word	0x20000141
 8001780:	20000142 	.word	0x20000142
 8001784:	0800c168 	.word	0x0800c168
 8001788:	20000584 	.word	0x20000584
 800178c:	0800c174 	.word	0x0800c174

08001790 <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set, &second_to_set) == 6){
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <parseDateTime+0x34>)
 8001798:	9303      	str	r3, [sp, #12]
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <parseDateTime+0x38>)
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <parseDateTime+0x3c>)
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <parseDateTime+0x40>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <parseDateTime+0x44>)
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <parseDateTime+0x48>)
 80017aa:	490c      	ldr	r1, [pc, #48]	; (80017dc <parseDateTime+0x4c>)
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <parseDateTime+0x50>)
 80017ae:	f008 fe67 	bl	800a480 <siscanf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d002      	beq.n	80017be <parseDateTime+0x2e>


	} else {
		sendFail(2);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f000 f9d5 	bl	8001b68 <sendFail>
	}
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000014a 	.word	0x2000014a
 80017c8:	20000149 	.word	0x20000149
 80017cc:	20000148 	.word	0x20000148
 80017d0:	20000146 	.word	0x20000146
 80017d4:	20000144 	.word	0x20000144
 80017d8:	20000143 	.word	0x20000143
 80017dc:	0800c184 	.word	0x0800c184
 80017e0:	20000584 	.word	0x20000584

080017e4 <parseIntData>:



int parseIntData(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	int single_param = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	461a      	mov	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <parseIntData+0x30>)
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <parseIntData+0x34>)
 80017f6:	f008 fe43 	bl	800a480 <siscanf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <parseIntData+0x20>
		return single_param;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	e002      	b.n	800180a <parseIntData+0x26>
	}
	else {
		sendFail(2);
 8001804:	2002      	movs	r0, #2
 8001806:	f000 f9af 	bl	8001b68 <sendFail>
	}


}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800c198 	.word	0x0800c198
 8001818:	20000584 	.word	0x20000584

0800181c <clearCommand>:


/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <clearCommand+0x18>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	2100      	movs	r1, #0
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <clearCommand+0x1c>)
 800182c:	f008 fe08 	bl	800a440 <memset>

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000123 	.word	0x20000123
 8001838:	200002b8 	.word	0x200002b8

0800183c <clearData>:

void clearData(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	data_busy = 0;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <clearData+0x18>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8001846:	227d      	movs	r2, #125	; 0x7d
 8001848:	2100      	movs	r1, #0
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <clearData+0x1c>)
 800184c:	f008 fdf8 	bl	800a440 <memset>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000124 	.word	0x20000124
 8001858:	20000584 	.word	0x20000584

0800185c <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 800186e:	2300      	movs	r3, #0
 8001870:	757b      	strb	r3, [r7, #21]


	//check if begining exists
	if(frame[0] == start_sign){
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <decodeFrame+0x168>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b24      	cmp	r3, #36	; 0x24
 8001878:	d10c      	bne.n	8001894 <decodeFrame+0x38>
		required_pass++;
 800187a:	7d7b      	ldrb	r3, [r7, #21]
 800187c:	3301      	adds	r3, #1
 800187e:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <decodeFrame+0x168>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		frameLength++;
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <decodeFrame+0x16c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <decodeFrame+0x16c>)
 8001892:	801a      	strh	r2, [r3, #0]
	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <decodeFrame+0x16c>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <decodeFrame+0x168>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	2b23      	cmp	r3, #35	; 0x23
 80018a2:	d109      	bne.n	80018b8 <decodeFrame+0x5c>
		required_pass++;
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	3301      	adds	r3, #1
 80018a8:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <decodeFrame+0x16c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <decodeFrame+0x168>)
 80018b4:	2100      	movs	r1, #0
 80018b6:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e013      	b.n	80018e6 <decodeFrame+0x8a>
		if(frame[i] == '='){
 80018be:	4a41      	ldr	r2, [pc, #260]	; (80019c4 <decodeFrame+0x168>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b3d      	cmp	r3, #61	; 0x3d
 80018c8:	d10a      	bne.n	80018e0 <decodeFrame+0x84>
			required_pass++;
 80018ca:	7d7b      	ldrb	r3, [r7, #21]
 80018cc:	3301      	adds	r3, #1
 80018ce:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <decodeFrame+0x16c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	dbe4      	blt.n	80018be <decodeFrame+0x62>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d12b      	bne.n	8001952 <decodeFrame+0xf6>
 80018fa:	7dba      	ldrb	r2, [r7, #22]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d027      	beq.n	8001952 <decodeFrame+0xf6>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8001902:	2301      	movs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e020      	b.n	800194a <decodeFrame+0xee>
			//prevent memory leaks
			if(command_busy >= command_size){
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <decodeFrame+0x170>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b25b      	sxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	da09      	bge.n	8001928 <decodeFrame+0xcc>
				command_busy = 0;
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <decodeFrame+0x170>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	2100      	movs	r1, #0
 800191e:	482c      	ldr	r0, [pc, #176]	; (80019d0 <decodeFrame+0x174>)
 8001920:	f008 fd8e 	bl	800a440 <memset>
				i = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <decodeFrame+0x170>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	b2d1      	uxtb	r1, r2
 8001932:	4a26      	ldr	r2, [pc, #152]	; (80019cc <decodeFrame+0x170>)
 8001934:	7011      	strb	r1, [r2, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <decodeFrame+0x168>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <decodeFrame+0x174>)
 8001942:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	7dbb      	ldrb	r3, [r7, #22]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	ddda      	ble.n	8001908 <decodeFrame+0xac>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8001952:	7d7b      	ldrb	r3, [r7, #21]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d130      	bne.n	80019ba <decodeFrame+0x15e>
 8001958:	7dfa      	ldrb	r2, [r7, #23]
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <decodeFrame+0x16c>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	429a      	cmp	r2, r3
 8001964:	d029      	beq.n	80019ba <decodeFrame+0x15e>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	e01f      	b.n	80019ac <decodeFrame+0x150>
			//prevent memory leaks
			if(data_busy >= data_size){
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <decodeFrame+0x178>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b7c      	cmp	r3, #124	; 0x7c
 8001974:	d909      	bls.n	800198a <decodeFrame+0x12e>
				data_busy = 0;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <decodeFrame+0x178>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 800197c:	227d      	movs	r2, #125	; 0x7d
 800197e:	2100      	movs	r1, #0
 8001980:	4815      	ldr	r0, [pc, #84]	; (80019d8 <decodeFrame+0x17c>)
 8001982:	f008 fd5d 	bl	800a440 <memset>
				i = data_idx;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <decodeFrame+0x178>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	b2d1      	uxtb	r1, r2
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <decodeFrame+0x178>)
 8001996:	7011      	strb	r1, [r2, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <decodeFrame+0x168>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4413      	add	r3, r2
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <decodeFrame+0x17c>)
 80019a4:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <decodeFrame+0x16c>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dbd8      	blt.n	800196c <decodeFrame+0x110>
		}

	}


}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000604 	.word	0x20000604
 80019c8:	20000120 	.word	0x20000120
 80019cc:	20000123 	.word	0x20000123
 80019d0:	200002b8 	.word	0x200002b8
 80019d4:	20000124 	.word	0x20000124
 80019d8:	20000584 	.word	0x20000584

080019dc <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <downloadFrame+0xe8>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <downloadFrame+0xec>)
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <downloadFrame+0xe8>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <downloadFrame+0xe8>)
 80019fc:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <downloadFrame+0xe8>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d302      	bcc.n	8001a10 <downloadFrame+0x34>
		Rx_busy = 0;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <downloadFrame+0xe8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b24      	cmp	r3, #36	; 0x24
 8001a14:	d10c      	bne.n	8001a30 <downloadFrame+0x54>
			memset(frame, 0x00, FRAME_SIZE); //reset frame2#
 8001a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	482b      	ldr	r0, [pc, #172]	; (8001acc <downloadFrame+0xf0>)
 8001a1e:	f008 fd0f 	bl	800a440 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <downloadFrame+0xf4>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0x00;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <downloadFrame+0xf8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	e00a      	b.n	8001a46 <downloadFrame+0x6a>

		} else if(frame_found == 1){ //frame length if more than one start sign is found
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <downloadFrame+0xf4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <downloadFrame+0x6a>
			frameLength++;
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <downloadFrame+0xfc>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <downloadFrame+0xfc>)
 8001a44:	801a      	strh	r2, [r3, #0]
		}

		if(frame_found == 1)
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <downloadFrame+0xf4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10a      	bne.n	8001a64 <downloadFrame+0x88>
			{



						//copy a frame to analyze it
						frame[Frame_busy++] = byte; //download chars
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <downloadFrame+0xf8>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	b291      	uxth	r1, r2
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <downloadFrame+0xf8>)
 8001a5a:	8011      	strh	r1, [r2, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <downloadFrame+0xf0>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	5453      	strb	r3, [r2, r1]


			}

		//check if frame is not too long
		if(frameLength > FRAME_SIZE){
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <downloadFrame+0xfc>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6e:	d911      	bls.n	8001a94 <downloadFrame+0xb8>
			memset(frame, 0x00, FRAME_SIZE);
 8001a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a74:	2100      	movs	r1, #0
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <downloadFrame+0xf0>)
 8001a78:	f008 fce2 	bl	800a440 <memset>
			Frame_busy = 0;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <downloadFrame+0xf8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <downloadFrame+0xfc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <downloadFrame+0xf4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 8001a8e:	2004      	movs	r0, #4
 8001a90:	f000 f86a 	bl	8001b68 <sendFail>
		//check if its actually a frame
		//todo


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b23      	cmp	r3, #35	; 0x23
 8001a98:	d110      	bne.n	8001abc <downloadFrame+0xe0>
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <downloadFrame+0xf4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10c      	bne.n	8001abc <downloadFrame+0xe0>
			frame_found = 0; //stop downloading chars
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <downloadFrame+0xf4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <downloadFrame+0xf8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	801a      	strh	r2, [r3, #0]



		  //if frame is received, analyze it
			decodeFrame();
 8001aae:	f7ff fed5 	bl	800185c <decodeFrame>
			parseCommand();
 8001ab2:	f7ff fd53 	bl	800155c <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <downloadFrame+0xfc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	801a      	strh	r2, [r3, #0]

		 }



}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000118 	.word	0x20000118
 8001ac8:	20000708 	.word	0x20000708
 8001acc:	20000604 	.word	0x20000604
 8001ad0:	20000122 	.word	0x20000122
 8001ad4:	2000011e 	.word	0x2000011e
 8001ad8:	20000120 	.word	0x20000120

08001adc <buttonHandler>:





void buttonHandler() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae4:	481c      	ldr	r0, [pc, #112]	; (8001b58 <buttonHandler+0x7c>)
 8001ae6:	f001 f957 	bl	8002d98 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d113      	bne.n	8001b18 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <buttonHandler+0x80>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <buttonHandler+0x80>)
 8001b02:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <buttonHandler+0x84>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <buttonHandler+0x88>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8001b10:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b14:	f000 fcec 	bl	80024f0 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <buttonHandler+0x80>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10c      	bne.n	8001b3a <buttonHandler+0x5e>
			  if(x1hz == 1){
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <buttonHandler+0x84>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d114      	bne.n	8001b52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2c:	480a      	ldr	r0, [pc, #40]	; (8001b58 <buttonHandler+0x7c>)
 8001b2e:	f001 f989 	bl	8002e44 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <buttonHandler+0x84>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001b38:	e00b      	b.n	8001b52 <buttonHandler+0x76>
			  if(x4hz == 1){
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <buttonHandler+0x88>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b46:	4804      	ldr	r0, [pc, #16]	; (8001b58 <buttonHandler+0x7c>)
 8001b48:	f001 f97c 	bl	8002e44 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <buttonHandler+0x88>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	20000114 	.word	0x20000114
 8001b60:	20000112 	.word	0x20000112
 8001b64:	20000113 	.word	0x20000113

08001b68 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <sendFail+0x1c>)
 8001b78:	f7ff fba8 	bl	80012cc <Send>

}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800c19c 	.word	0x0800c19c

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 8001b8e:	f7ff fb75 	bl	800127c <UART_init>
	FLASH_init();
 8001b92:	f7fe fdcf 	bl	8000734 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b96:	f000 fc45 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9a:	f000 f8a1 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9e:	f7fe fec9 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ba2:	f000 fb9b 	bl	80022dc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001ba6:	f000 fae9 	bl	800217c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001baa:	f000 fb1f 	bl	80021ec <MX_TIM7_Init>
  MX_RTC_Init();
 8001bae:	f000 f90f 	bl	8001dd0 <MX_RTC_Init>
  MX_I2C1_Init();
 8001bb2:	f7ff fa2f 	bl	8001014 <MX_I2C1_Init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001bb6:	4839      	ldr	r0, [pc, #228]	; (8001c9c <main+0x114>)
 8001bb8:	f006 fa34 	bl	8008024 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001bc2:	4836      	ldr	r0, [pc, #216]	; (8001c9c <main+0x114>)
 8001bc4:	f006 f958 	bl	8007e78 <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <main+0x118>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <main+0x11c>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <main+0x120>)
 8001bda:	f007 f893 	bl	8008d04 <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 8001bde:	4833      	ldr	r0, [pc, #204]	; (8001cac <main+0x124>)
 8001be0:	f7ff fb74 	bl	80012cc <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001be4:	4832      	ldr	r0, [pc, #200]	; (8001cb0 <main+0x128>)
 8001be6:	f006 fb85 	bl	80082f4 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <main+0x128>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <main+0x12c>)
 8001bf2:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <main+0x130>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d116      	bne.n	8001c2c <main+0xa4>
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <main+0x134>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d112      	bne.n	8001c2c <main+0xa4>
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <main+0x138>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <main+0xa4>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <main+0x138>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <main+0x13c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <main+0x140>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	f7fe fbfe 	bl	8000428 <displayHour>
	   }


	 buttonHandler();
 8001c2c:	f7ff ff56 	bl	8001adc <buttonHandler>


	 while(uart_ready()){
 8001c30:	e001      	b.n	8001c36 <main+0xae>
		 //downloadCmd();
		 downloadFrame();
 8001c32:	f7ff fed3 	bl	80019dc <downloadFrame>
	 while(uart_ready()){
 8001c36:	f7ff fc3f 	bl	80014b8 <uart_ready>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f8      	bne.n	8001c32 <main+0xaa>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <main+0x144>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <main+0xc8>
		 handleBlinkCommand();
 8001c4a:	f7ff fadb 	bl	8001204 <handleBlinkCommand>
 8001c4e:	e018      	b.n	8001c82 <main+0xfa>
	 } else if(blink_mode == 2){
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <main+0x144>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d113      	bne.n	8001c82 <main+0xfa>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <main+0x128>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <main+0x12c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <main+0x148>)
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d308      	bcc.n	8001c82 <main+0xfa>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <main+0x14c>)
 8001c74:	f001 f8e6 	bl	8002e44 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <main+0x128>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <main+0x12c>)
 8001c80:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <main+0x150>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d1b3      	bne.n	8001bf4 <main+0x6c>


		 delayMs(delayTime);
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <main+0x154>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fa9e 	bl	80011d4 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001c98:	e7ac      	b.n	8001bf4 <main+0x6c>
 8001c9a:	bf00      	nop
 8001c9c:	20000564 	.word	0x20000564
 8001ca0:	20000116 	.word	0x20000116
 8001ca4:	20000708 	.word	0x20000708
 8001ca8:	200009a4 	.word	0x200009a4
 8001cac:	0800c1a8 	.word	0x0800c1a8
 8001cb0:	2000090c 	.word	0x2000090c
 8001cb4:	20000150 	.word	0x20000150
 8001cb8:	20000078 	.word	0x20000078
 8001cbc:	20000125 	.word	0x20000125
 8001cc0:	20000140 	.word	0x20000140
 8001cc4:	20000141 	.word	0x20000141
 8001cc8:	20000142 	.word	0x20000142
 8001ccc:	2000014b 	.word	0x2000014b
 8001cd0:	20000360 	.word	0x20000360
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	20000154 	.word	0x20000154
 8001cdc:	20000156 	.word	0x20000156

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0a6      	sub	sp, #152	; 0x98
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cea:	2228      	movs	r2, #40	; 0x28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f008 fba6 	bl	800a440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2258      	movs	r2, #88	; 0x58
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f008 fb98 	bl	800a440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d10:	230a      	movs	r3, #10
 8001d12:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d14:	2301      	movs	r3, #1
 8001d16:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f88f 	bl	8004e68 <HAL_RCC_OscConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d50:	f000 f82e 	bl	8001db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d54:	230f      	movs	r3, #15
 8001d56:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f8eb 	bl	8005f4c <HAL_RCC_ClockConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001d7c:	f000 f818 	bl	8001db0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <SystemClock_Config+0xcc>)
 8001d82:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 fbb3 	bl	8006500 <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001da0:	f000 f806 	bl	8001db0 <Error_Handler>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3798      	adds	r7, #152	; 0x98
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	00010022 	.word	0x00010022

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>

08001dba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2228      	movs	r2, #40	; 0x28
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f008 fb25 	bl	800a440 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_RTC_Init+0x84>)
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <MX_RTC_Init+0x88>)
 8001dfa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_RTC_Init+0x84>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e04:	227f      	movs	r2, #127	; 0x7f
 8001e06:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e0a:	22ff      	movs	r2, #255	; 0xff
 8001e0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e22:	f004 ff65 	bl	8006cf0 <HAL_RTC_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f7ff ffc0 	bl	8001db0 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e3a:	f005 f9b9 	bl	80071b0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_RTC_Init+0x84>)
 8001e48:	f005 fb4e 	bl	80074e8 <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e4c:	3740      	adds	r7, #64	; 0x40
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000564 	.word	0x20000564
 8001e58:	40002800 	.word	0x40002800

08001e5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_RTC_MspInit+0x60>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RTC_MspInit+0x56>
 8001e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RTC_MspInit+0x64>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2003      	movs	r0, #3
 8001e98:	f000 fc3e 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 fc67 	bl	8002770 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2029      	movs	r0, #41	; 0x29
 8001ea8:	f000 fc36 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001eac:	2029      	movs	r0, #41	; 0x29
 8001eae:	f000 fc5f 	bl	8002770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40002800 	.word	0x40002800
 8001ec0:	10908100 	.word	0x10908100

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_MspInit+0x44>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_MspInit+0x44>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001efa:	2007      	movs	r0, #7
 8001efc:	f000 fbec 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 8001f58:	f7ff f8e8 	bl	800112c <delay_1hz>
	delay_4hz();
 8001f5c:	f7ff f902 	bl	8001164 <delay_4hz>

	if(blink_mode == 1){
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <SysTick_Handler+0x2c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <SysTick_Handler+0x22>
		led_delay++;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SysTick_Handler+0x30>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Handler+0x30>)
 8001f74:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f000 fa9b 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000014b 	.word	0x2000014b
 8001f84:	20000158 	.word	0x20000158

08001f88 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <RTC_WKUP_IRQHandler+0x10>)
 8001f8e:	f006 f8a1 	bl	80080d4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000564 	.word	0x20000564

08001f9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <I2C1_EV_IRQHandler+0x10>)
 8001fa2:	f001 fa7d 	bl	80034a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000268 	.word	0x20000268

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f006 fef3 	bl	8008da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200009a4 	.word	0x200009a4

08001fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fcc:	f000 ff62 	bl	8002e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <RTC_Alarm_IRQHandler+0x10>)
 8001fda:	f005 fe77 	bl	8007ccc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000564 	.word	0x20000564

08001fe8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM6_DAC_IRQHandler+0x10>)
 8001fee:	f006 fa2d 	bl	800844c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000090c 	.word	0x2000090c

08001ffc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <TIM7_IRQHandler+0x10>)
 8002002:	f006 fa23 	bl	800844c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000958 	.word	0x20000958

08002010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f008 f966 	bl	800a3ec <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20010000 	.word	0x20010000
 800214c:	00000400 	.word	0x00000400
 8002150:	2000015c 	.word	0x2000015c
 8002154:	20000a40 	.word	0x20000a40

08002158 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_TIM6_Init+0x68>)
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <MX_TIM6_Init+0x6c>)
 8002190:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_TIM6_Init+0x68>)
 8002194:	f242 720f 	movw	r2, #9999	; 0x270f
 8002198:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_TIM6_Init+0x68>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <MX_TIM6_Init+0x68>)
 80021a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_TIM6_Init+0x68>)
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <MX_TIM6_Init+0x68>)
 80021b0:	f005 ffbe 	bl	8008130 <HAL_TIM_Base_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021ba:	f7ff fdf9 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <MX_TIM6_Init+0x68>)
 80021cc:	f006 fb2e 	bl	800882c <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021d6:	f7ff fdeb 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000090c 	.word	0x2000090c
 80021e8:	40001000 	.word	0x40001000

080021ec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_TIM7_Init+0x64>)
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <MX_TIM7_Init+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_TIM7_Init+0x64>)
 8002204:	2247      	movs	r2, #71	; 0x47
 8002206:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_TIM7_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_TIM7_Init+0x64>)
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_TIM7_Init+0x64>)
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_TIM7_Init+0x64>)
 800221e:	f005 ff87 	bl	8008130 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002228:	f7ff fdc2 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_TIM7_Init+0x64>)
 800223a:	f006 faf7 	bl	800882c <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002244:	f7ff fdb4 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000958 	.word	0x20000958
 8002254:	40001400 	.word	0x40001400

08002258 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_TIM_Base_MspInit+0x78>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d114      	bne.n	8002294 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2036      	movs	r0, #54	; 0x36
 8002288:	f000 fa46 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800228c:	2036      	movs	r0, #54	; 0x36
 800228e:	f000 fa6f 	bl	8002770 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002292:	e018      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_TIM_Base_MspInit+0x80>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d113      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 80022a4:	f043 0320 	orr.w	r3, r3, #32
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_TIM_Base_MspInit+0x7c>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2037      	movs	r0, #55	; 0x37
 80022bc:	f000 fa2c 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c0:	2037      	movs	r0, #55	; 0x37
 80022c2:	f000 fa55 	bl	8002770 <HAL_NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40001000 	.word	0x40001000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40001400 	.word	0x40001400

080022dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <MX_USART2_UART_Init+0x5c>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART2_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART2_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002320:	f006 fbf0 	bl	8008b04 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800232a:	f7ff fd41 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200009a4 	.word	0x200009a4
 8002338:	40004400 	.word	0x40004400

0800233c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0x8c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d130      	bne.n	80023c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_UART_MspInit+0x90>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_UART_MspInit+0x90>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	6153      	str	r3, [r2, #20]
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800238e:	230c      	movs	r3, #12
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239e:	2307      	movs	r3, #7
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ac:	f000 fa88 	bl	80028c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2026      	movs	r0, #38	; 0x26
 80023b6:	f000 f9af 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023ba:	2026      	movs	r0, #38	; 0x26
 80023bc:	f000 f9d8 	bl	8002770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40004400 	.word	0x40004400
 80023cc:	40021000 	.word	0x40021000

080023d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002408 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490e      	ldr	r1, [pc, #56]	; (8002410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fa:	f7ff fead 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f007 fffb 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002402:	f7ff fbc1 	bl	8001b88 <main>

08002406 <LoopForever>:

LoopForever:
    b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002408:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002414:	0800c66c 	.word	0x0800c66c
  ldr r2, =_sbss
 8002418:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 800241c:	20000a3c 	.word	0x20000a3c

08002420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_2_IRQHandler>
	...

08002424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_Init+0x28>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_Init+0x28>)
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f94f 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fd40 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f996 	bl	80027a0 <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f944 	bl	8002718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000007c 	.word	0x2000007c
 80024a8:	20000084 	.word	0x20000084
 80024ac:	20000080 	.word	0x20000080

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000084 	.word	0x20000084
 80024d4:	20000a28 	.word	0x20000a28

080024d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;  
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000a28 	.word	0x20000a28

080024f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d005      	beq.n	8002516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_Delay+0x44>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002516:	bf00      	nop
 8002518:	f7ff ffde 	bl	80024d8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d8f7      	bhi.n	8002518 <HAL_Delay+0x28>
  {
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000084 	.word	0x20000084

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b07      	cmp	r3, #7
 80026e4:	d00f      	beq.n	8002706 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d00c      	beq.n	8002706 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d009      	beq.n	8002706 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d006      	beq.n	8002706 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d003      	beq.n	8002706 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026fe:	21ac      	movs	r1, #172	; 0xac
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002702:	f7ff fb5a 	bl	8001dba <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff16 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0800c1c8 	.word	0x0800c1c8

08002718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d903      	bls.n	8002738 <HAL_NVIC_SetPriority+0x20>
 8002730:	21c4      	movs	r1, #196	; 0xc4
 8002732:	480e      	ldr	r0, [pc, #56]	; (800276c <HAL_NVIC_SetPriority+0x54>)
 8002734:	f7ff fb41 	bl	8001dba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	d903      	bls.n	8002746 <HAL_NVIC_SetPriority+0x2e>
 800273e:	21c5      	movs	r1, #197	; 0xc5
 8002740:	480a      	ldr	r0, [pc, #40]	; (800276c <HAL_NVIC_SetPriority+0x54>)
 8002742:	f7ff fb3a 	bl	8001dba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002746:	f7ff ff1b 	bl	8002580 <__NVIC_GetPriorityGrouping>
 800274a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7ff ff6b 	bl	800262c <NVIC_EncodePriority>
 8002756:	4602      	mov	r2, r0
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff3a 	bl	80025d8 <__NVIC_SetPriority>
}
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	0800c1c8 	.word	0x0800c1c8

08002770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da03      	bge.n	800278a <HAL_NVIC_EnableIRQ+0x1a>
 8002782:	21d8      	movs	r1, #216	; 0xd8
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <HAL_NVIC_EnableIRQ+0x2c>)
 8002786:	f7ff fb18 	bl	8001dba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff04 	bl	800259c <__NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	0800c1c8 	.word	0x0800c1c8

080027a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff73 	bl	8002694 <SysTick_Config>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d008      	beq.n	80027dc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2204      	movs	r2, #4
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e020      	b.n	800281e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 020e 	bic.w	r2, r2, #14
 80027ea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800283c:	2b02      	cmp	r3, #2
 800283e:	d005      	beq.n	800284c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2204      	movs	r2, #4
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e027      	b.n	800289c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
    } 
  }
  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d4:	d01f      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_GPIO_Init+0x104>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01b      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <HAL_GPIO_Init+0x108>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d017      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_GPIO_Init+0x10c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_GPIO_Init+0x110>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <HAL_GPIO_Init+0x114>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a35      	ldr	r2, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x118>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_GPIO_Init+0x11c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x56>
 800290e:	21b2      	movs	r1, #178	; 0xb2
 8002910:	4833      	ldr	r0, [pc, #204]	; (80029e0 <HAL_GPIO_Init+0x120>)
 8002912:	f7ff fa52 	bl	8001dba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_GPIO_Init+0x6c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x74>
 800292c:	21b3      	movs	r1, #179	; 0xb3
 800292e:	482c      	ldr	r0, [pc, #176]	; (80029e0 <HAL_GPIO_Init+0x120>)
 8002930:	f7ff fa43 	bl	8001dba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 821c 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	f000 8217 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b11      	cmp	r3, #17
 800294e:	f000 8212 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	f000 820d 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b12      	cmp	r3, #18
 8002962:	f000 8208 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800296e:	f000 8202 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800297a:	f000 81fc 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002986:	f000 81f6 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002992:	f000 81f0 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800299e:	f000 81ea 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80029aa:	f000 81e4 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	f000 81df 	beq.w	8002d76 <HAL_GPIO_Init+0x4b6>
 80029b8:	21b4      	movs	r1, #180	; 0xb4
 80029ba:	4809      	ldr	r0, [pc, #36]	; (80029e0 <HAL_GPIO_Init+0x120>)
 80029bc:	f7ff f9fd 	bl	8001dba <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	e1d9      	b.n	8002d76 <HAL_GPIO_Init+0x4b6>
 80029c2:	bf00      	nop
 80029c4:	48000400 	.word	0x48000400
 80029c8:	48000800 	.word	0x48000800
 80029cc:	48000c00 	.word	0x48000c00
 80029d0:	48001000 	.word	0x48001000
 80029d4:	48001400 	.word	0x48001400
 80029d8:	48001800 	.word	0x48001800
 80029dc:	48001c00 	.word	0x48001c00
 80029e0:	0800c204 	.word	0x0800c204
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 81ba 	beq.w	8002d70 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d005      	beq.n	8002a14 <HAL_GPIO_Init+0x154>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d140      	bne.n	8002a96 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_GPIO_Init+0x174>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x174>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x174>
 8002a2c:	21c3      	movs	r1, #195	; 0xc3
 8002a2e:	4894      	ldr	r0, [pc, #592]	; (8002c80 <HAL_GPIO_Init+0x3c0>)
 8002a30:	f7ff f9c3 	bl	8001dba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0201 	and.w	r2, r3, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d027      	beq.n	8002af2 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_GPIO_Init+0x202>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x202>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x202>
 8002aba:	21d4      	movs	r1, #212	; 0xd4
 8002abc:	4870      	ldr	r0, [pc, #448]	; (8002c80 <HAL_GPIO_Init+0x3c0>)
 8002abe:	f7ff f97c 	bl	8001dba <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d157      	bne.n	8002bae <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b04:	d01f      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_GPIO_Init+0x3c4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01b      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_GPIO_Init+0x3c8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d017      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_GPIO_Init+0x3cc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_GPIO_Init+0x3d0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00f      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5a      	ldr	r2, [pc, #360]	; (8002c94 <HAL_GPIO_Init+0x3d4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a59      	ldr	r2, [pc, #356]	; (8002c98 <HAL_GPIO_Init+0x3d8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_GPIO_Init+0x3dc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
 8002b3e:	21e2      	movs	r1, #226	; 0xe2
 8002b40:	484f      	ldr	r0, [pc, #316]	; (8002c80 <HAL_GPIO_Init+0x3c0>)
 8002b42:	f7ff f93a 	bl	8001dba <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d90b      	bls.n	8002b66 <HAL_GPIO_Init+0x2a6>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b0e      	cmp	r3, #14
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x2a6>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2a6>
 8002b5e:	21e3      	movs	r1, #227	; 0xe3
 8002b60:	4847      	ldr	r0, [pc, #284]	; (8002c80 <HAL_GPIO_Init+0x3c0>)
 8002b62:	f7ff f92a 	bl	8001dba <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	6939      	ldr	r1, [r7, #16]
 8002baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80c0 	beq.w	8002d70 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_GPIO_Init+0x3e0>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <HAL_GPIO_Init+0x3e0>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_GPIO_Init+0x3e0>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_GPIO_Init+0x3e4>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c32:	d039      	beq.n	8002ca8 <HAL_GPIO_Init+0x3e8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_GPIO_Init+0x3c4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01f      	beq.n	8002c7c <HAL_GPIO_Init+0x3bc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <HAL_GPIO_Init+0x3c8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d019      	beq.n	8002c78 <HAL_GPIO_Init+0x3b8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_GPIO_Init+0x3cc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <HAL_GPIO_Init+0x3b4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_GPIO_Init+0x3d0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00d      	beq.n	8002c70 <HAL_GPIO_Init+0x3b0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_GPIO_Init+0x3d4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <HAL_GPIO_Init+0x3ac>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_GPIO_Init+0x3d8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_GPIO_Init+0x3a8>
 8002c64:	2306      	movs	r3, #6
 8002c66:	e020      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c68:	2307      	movs	r3, #7
 8002c6a:	e01e      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c6c:	2305      	movs	r3, #5
 8002c6e:	e01c      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c70:	2304      	movs	r3, #4
 8002c72:	e01a      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c74:	2303      	movs	r3, #3
 8002c76:	e018      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e016      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e014      	b.n	8002caa <HAL_GPIO_Init+0x3ea>
 8002c80:	0800c204 	.word	0x0800c204
 8002c84:	48000400 	.word	0x48000400
 8002c88:	48000800 	.word	0x48000800
 8002c8c:	48000c00 	.word	0x48000c00
 8002c90:	48001000 	.word	0x48001000
 8002c94:	48001400 	.word	0x48001400
 8002c98:	48001800 	.word	0x48001800
 8002c9c:	48001c00 	.word	0x48001c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	2300      	movs	r3, #0
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	f002 0203 	and.w	r2, r2, #3
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	4093      	lsls	r3, r2
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cba:	4935      	ldr	r1, [pc, #212]	; (8002d90 <HAL_GPIO_Init+0x4d0>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_GPIO_Init+0x4d4>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f ae2f 	bne.w	80029e4 <HAL_GPIO_Init+0x124>
  }
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_GPIO_ReadPin+0x1c>
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_GPIO_ReadPin+0x26>
 8002db4:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002db8:	4809      	ldr	r0, [pc, #36]	; (8002de0 <HAL_GPIO_ReadPin+0x48>)
 8002dba:	f7fe fffe 	bl	8001dba <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e001      	b.n	8002dd4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	0800c204 	.word	0x0800c204

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_GPIO_WritePin+0x20>
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_GPIO_WritePin+0x2a>
 8002e04:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002e08:	480d      	ldr	r0, [pc, #52]	; (8002e40 <HAL_GPIO_WritePin+0x5c>)
 8002e0a:	f7fe ffd6 	bl	8001dba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_WritePin+0x40>
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d004      	beq.n	8002e24 <HAL_GPIO_WritePin+0x40>
 8002e1a:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002e1e:	4808      	ldr	r0, [pc, #32]	; (8002e40 <HAL_GPIO_WritePin+0x5c>)
 8002e20:	f7fe ffcb 	bl	8001dba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	0800c204 	.word	0x0800c204

08002e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_GPIO_TogglePin+0x1c>
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_GPIO_TogglePin+0x26>
 8002e60:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <HAL_GPIO_TogglePin+0x4c>)
 8002e66:	f7fe ffa8 	bl	8001dba <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	041a      	lsls	r2, r3, #16
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	400b      	ands	r3, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	0800c204 	.word	0x0800c204

08002e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f806 	bl	8002ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e104      	b.n	80030f8 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a83      	ldr	r2, [pc, #524]	; (8003100 <HAL_I2C_Init+0x224>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_I2C_Init+0x3a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a81      	ldr	r2, [pc, #516]	; (8003104 <HAL_I2C_Init+0x228>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_I2C_Init+0x3a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a80      	ldr	r2, [pc, #512]	; (8003108 <HAL_I2C_Init+0x22c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_I2C_Init+0x3a>
 8002f0c:	f240 2113 	movw	r1, #531	; 0x213
 8002f10:	487e      	ldr	r0, [pc, #504]	; (800310c <HAL_I2C_Init+0x230>)
 8002f12:	f7fe ff52 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d304      	bcc.n	8002f2a <HAL_I2C_Init+0x4e>
 8002f20:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002f24:	4879      	ldr	r0, [pc, #484]	; (800310c <HAL_I2C_Init+0x230>)
 8002f26:	f7fe ff48 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d008      	beq.n	8002f44 <HAL_I2C_Init+0x68>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d004      	beq.n	8002f44 <HAL_I2C_Init+0x68>
 8002f3a:	f240 2115 	movw	r1, #533	; 0x215
 8002f3e:	4873      	ldr	r0, [pc, #460]	; (800310c <HAL_I2C_Init+0x230>)
 8002f40:	f7fe ff3b 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_I2C_Init+0x84>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f54:	d004      	beq.n	8002f60 <HAL_I2C_Init+0x84>
 8002f56:	f240 2116 	movw	r1, #534	; 0x216
 8002f5a:	486c      	ldr	r0, [pc, #432]	; (800310c <HAL_I2C_Init+0x230>)
 8002f5c:	f7fe ff2d 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2bff      	cmp	r3, #255	; 0xff
 8002f66:	d904      	bls.n	8002f72 <HAL_I2C_Init+0x96>
 8002f68:	f240 2117 	movw	r1, #535	; 0x217
 8002f6c:	4867      	ldr	r0, [pc, #412]	; (800310c <HAL_I2C_Init+0x230>)
 8002f6e:	f7fe ff24 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d020      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d01c      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d018      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d014      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d010      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d00c      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d008      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d004      	beq.n	8002fbc <HAL_I2C_Init+0xe0>
 8002fb2:	f44f 7106 	mov.w	r1, #536	; 0x218
 8002fb6:	4855      	ldr	r0, [pc, #340]	; (800310c <HAL_I2C_Init+0x230>)
 8002fb8:	f7fe feff 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_I2C_Init+0xfc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_I2C_Init+0xfc>
 8002fce:	f240 2119 	movw	r1, #537	; 0x219
 8002fd2:	484e      	ldr	r0, [pc, #312]	; (800310c <HAL_I2C_Init+0x230>)
 8002fd4:	f7fe fef1 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_I2C_Init+0x118>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d004      	beq.n	8002ff4 <HAL_I2C_Init+0x118>
 8002fea:	f240 211a 	movw	r1, #538	; 0x21a
 8002fee:	4847      	ldr	r0, [pc, #284]	; (800310c <HAL_I2C_Init+0x230>)
 8002ff0:	f7fe fee3 	bl	8001dba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fe f843 	bl	8001094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2224      	movs	r2, #36	; 0x24
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003032:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003042:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	e006      	b.n	800306a <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003068:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d104      	bne.n	800307c <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69d9      	ldr	r1, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40005400 	.word	0x40005400
 8003104:	40005800 	.word	0x40005800
 8003108:	40007800 	.word	0x40007800
 800310c:	0800c240 	.word	0x0800c240

08003110 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d007      	beq.n	8003140 <HAL_I2C_Mem_Read+0x30>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d004      	beq.n	8003140 <HAL_I2C_Mem_Read+0x30>
 8003136:	f640 11ca 	movw	r1, #2506	; 0x9ca
 800313a:	4886      	ldr	r0, [pc, #536]	; (8003354 <HAL_I2C_Mem_Read+0x244>)
 800313c:	f7fe fe3d 	bl	8001dba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 80fd 	bne.w	8003348 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_I2C_Mem_Read+0x4a>
 8003154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0f1      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_I2C_Mem_Read+0x64>
 8003170:	2302      	movs	r3, #2
 8003172:	e0ea      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800317c:	f7ff f9ac 	bl	80024d8 <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f001 fb27 	bl	80047e2 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0d5      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2222      	movs	r2, #34	; 0x22
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2240      	movs	r2, #64	; 0x40
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c6:	88f8      	ldrh	r0, [r7, #6]
 80031c8:	893a      	ldrh	r2, [r7, #8]
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4603      	mov	r3, r0
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fe2c 	bl	8003e34 <I2C_RequestMemoryRead>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0ad      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2bff      	cmp	r3, #255	; 0xff
 80031f6:	d90e      	bls.n	8003216 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	b2da      	uxtb	r2, r3
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_I2C_Mem_Read+0x248>)
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f001 fc1a 	bl	8004a48 <I2C_TransferConfig>
 8003214:	e00f      	b.n	8003236 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	b2da      	uxtb	r2, r3
 8003226:	8979      	ldrh	r1, [r7, #10]
 8003228:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_I2C_Mem_Read+0x248>)
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f001 fc09 	bl	8004a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	2200      	movs	r2, #0
 800323e:	2104      	movs	r1, #4
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f001 face 	bl	80047e2 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e07c      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d034      	beq.n	80032f6 <HAL_I2C_Mem_Read+0x1e6>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d130      	bne.n	80032f6 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f001 fa9f 	bl	80047e2 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e04d      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d90e      	bls.n	80032d6 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	2300      	movs	r3, #0
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f001 fbba 	bl	8004a48 <I2C_TransferConfig>
 80032d4:	e00f      	b.n	80032f6 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	2300      	movs	r3, #0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f001 fba9 	bl	8004a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d19a      	bne.n	8003236 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f001 faec 	bl	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e01a      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_I2C_Mem_Read+0x24c>)
 8003328:	400b      	ands	r3, r1
 800332a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	0800c240 	.word	0x0800c240
 8003358:	80002400 	.word	0x80002400
 800335c:	fe00e800 	.word	0xfe00e800

08003360 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d007      	beq.n	8003390 <HAL_I2C_Mem_Write_IT+0x30>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d004      	beq.n	8003390 <HAL_I2C_Mem_Write_IT+0x30>
 8003386:	f640 2154 	movw	r1, #2644	; 0xa54
 800338a:	4842      	ldr	r0, [pc, #264]	; (8003494 <HAL_I2C_Mem_Write_IT+0x134>)
 800338c:	f7fe fd15 	bl	8001dba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	d176      	bne.n	800348a <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_I2C_Mem_Write_IT+0x48>
 80033a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e06b      	b.n	800348c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d101      	bne.n	80033c8 <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
 80033c6:	e061      	b.n	800348c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Mem_Write_IT+0x76>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e05a      	b.n	800348c <HAL_I2C_Mem_Write_IT+0x12c>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033de:	f7ff f87b 	bl	80024d8 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2221      	movs	r2, #33	; 0x21
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <HAL_I2C_Mem_Write_IT+0x138>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a23      	ldr	r2, [pc, #140]	; (800349c <HAL_I2C_Mem_Write_IT+0x13c>)
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	2bff      	cmp	r3, #255	; 0xff
 800341a:	d906      	bls.n	800342a <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e007      	b.n	800343a <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003438:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800343a:	88f8      	ldrh	r0, [r7, #6]
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2319      	movs	r3, #25
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4603      	mov	r3, r0
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fc9e 	bl	8003d8c <I2C_RequestMemoryWrite>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e014      	b.n	800348c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	b2da      	uxtb	r2, r3
 8003468:	8979      	ldrh	r1, [r7, #10]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f001 fae9 	bl	8004a48 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800347e:	2101      	movs	r1, #1
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f001 fb53 	bl	8004b2c <I2C_Enable_IRQ>

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0800c240 	.word	0x0800c240
 8003498:	ffff0000 	.word	0xffff0000
 800349c:	08003591 	.word	0x08003591

080034a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
  }
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
 8003530:	4613      	mov	r3, r2
 8003532:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <I2C_Master_ISR_IT+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e114      	b.n	80037d8 <I2C_Master_ISR_IT+0x248>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d013      	beq.n	80035ea <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f001 f8bb 	bl	800475e <I2C_Flush_TXDR>
 80035e8:	e0e1      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d023      	beq.n	800363e <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01d      	beq.n	800363e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800363c:	e0b7      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01e      	beq.n	8003688 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003686:	e092      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	09db      	lsrs	r3, r3, #7
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05d      	beq.n	8003750 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800369c:	2b00      	cmp	r3, #0
 800369e:	d057      	beq.n	8003750 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d040      	beq.n	800372c <I2C_Master_ISR_IT+0x19c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d13c      	bne.n	800372c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036be:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2bff      	cmp	r3, #255	; 0xff
 80036c8:	d90e      	bls.n	80036e8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8a79      	ldrh	r1, [r7, #18]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 f9b1 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e6:	e032      	b.n	800374e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036fa:	d00b      	beq.n	8003714 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	8a79      	ldrh	r1, [r7, #18]
 8003708:	2000      	movs	r0, #0
 800370a:	9000      	str	r0, [sp, #0]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f001 f99b 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003712:	e01c      	b.n	800374e <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	b2da      	uxtb	r2, r3
 800371a:	8a79      	ldrh	r1, [r7, #18]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f001 f98f 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372a:	e010      	b.n	800374e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373a:	d003      	beq.n	8003744 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fc51 	bl	8003fe4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003742:	e034      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 ff12 	bl	8004570 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800374c:	e02f      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
 800374e:	e02e      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003764:	2b00      	cmp	r3, #0
 8003766:	d022      	beq.n	80037ae <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d119      	bne.n	80037a6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003780:	d015      	beq.n	80037ae <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800378a:	d108      	bne.n	800379e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	e007      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fc20 	bl	8003fe4 <I2C_ITMasterSeqCplt>
 80037a4:	e003      	b.n	80037ae <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fee1 	bl	8004570 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fca7 	bl	800411c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <I2C_Slave_ISR_IT+0x24>
 8003800:	2302      	movs	r3, #2
 8003802:	e0ec      	b.n	80039de <I2C_Slave_ISR_IT+0x1fe>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003824:	6939      	ldr	r1, [r7, #16]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fd42 	bl	80042b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d04d      	beq.n	80038d4 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003840:	2b00      	cmp	r3, #0
 8003842:	d047      	beq.n	80038d4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d128      	bne.n	80038a0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b28      	cmp	r3, #40	; 0x28
 8003858:	d108      	bne.n	800386c <I2C_Slave_ISR_IT+0x8c>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003860:	d104      	bne.n	800386c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fe2d 	bl	80044c4 <I2C_ITListenCplt>
 800386a:	e032      	b.n	80038d2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b29      	cmp	r3, #41	; 0x29
 8003876:	d10e      	bne.n	8003896 <I2C_Slave_ISR_IT+0xb6>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387e:	d00a      	beq.n	8003896 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2210      	movs	r2, #16
 8003886:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 ff68 	bl	800475e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fbe5 	bl	800405e <I2C_ITSlaveSeqCplt>
 8003894:	e01d      	b.n	80038d2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800389e:	e096      	b.n	80039ce <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <I2C_Slave_ISR_IT+0xe4>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	f040 8085 	bne.w	80039ce <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	4619      	mov	r1, r3
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fe50 	bl	8004570 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038d0:	e07d      	b.n	80039ce <I2C_Slave_ISR_IT+0x1ee>
 80038d2:	e07c      	b.n	80039ce <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d030      	beq.n	8003942 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02a      	beq.n	8003942 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d018      	beq.n	8003928 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d14f      	bne.n	80039d2 <I2C_Slave_ISR_IT+0x1f2>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003938:	d04b      	beq.n	80039d2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fb8f 	bl	800405e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003940:	e047      	b.n	80039d2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800395a:	6939      	ldr	r1, [r7, #16]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fabd 	bl	8003edc <I2C_ITAddrCplt>
 8003962:	e037      	b.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d031      	beq.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02b      	beq.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80039b6:	e00d      	b.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039be:	d002      	beq.n	80039c6 <I2C_Slave_ISR_IT+0x1e6>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fb49 	bl	800405e <I2C_ITSlaveSeqCplt>
 80039cc:	e002      	b.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80039d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b088      	sub	sp, #32
 80039ea:	af02      	add	r7, sp, #8
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <I2C_Master_ISR_DMA+0x1a>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0e1      	b.n	8003bc4 <I2C_Master_ISR_DMA+0x1de>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2210      	movs	r2, #16
 8003a26:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f043 0204 	orr.w	r2, r3, #4
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a34:	2120      	movs	r1, #32
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f001 f878 	bl	8004b2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fe8e 	bl	800475e <I2C_Flush_TXDR>
 8003a42:	e0ba      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d072      	beq.n	8003b36 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d06c      	beq.n	8003b36 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04e      	beq.n	8003b14 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a82:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2bff      	cmp	r3, #255	; 0xff
 8003a8c:	d906      	bls.n	8003a9c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e010      	b.n	8003abe <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aae:	d003      	beq.n	8003ab8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e002      	b.n	8003abe <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	8a79      	ldrh	r1, [r7, #18]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 ffbb 	bl	8004a48 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b22      	cmp	r3, #34	; 0x22
 8003aee:	d108      	bne.n	8003b02 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b00:	e05b      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b12:	e052      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b22:	d003      	beq.n	8003b2c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fa5d 	bl	8003fe4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b2a:	e046      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fd1e 	bl	8004570 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b34:	e041      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d029      	beq.n	8003b96 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d119      	bne.n	8003b8c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b66:	d027      	beq.n	8003bb8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b70:	d108      	bne.n	8003b84 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b80:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003b82:	e019      	b.n	8003bb8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa2d 	bl	8003fe4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003b8a:	e015      	b.n	8003bb8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fcee 	bl	8004570 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b94:	e010      	b.n	8003bb8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fab3 	bl	800411c <I2C_ITMasterCplt>
 8003bb6:	e000      	b.n	8003bba <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003bb8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <I2C_Slave_ISR_DMA+0x24>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0c9      	b.n	8003d84 <I2C_Slave_ISR_DMA+0x1b8>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fb4c 	bl	80042b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 809a 	beq.w	8003d5a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8093 	beq.w	8003d5a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	0b9b      	lsrs	r3, r3, #14
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0bdb      	lsrs	r3, r3, #15
 8003c44:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d07f      	beq.n	8003d4c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0bdb      	lsrs	r3, r3, #15
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0b9b      	lsrs	r3, r3, #14
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003c90:	2301      	movs	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d128      	bne.n	8003cec <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b28      	cmp	r3, #40	; 0x28
 8003ca4:	d108      	bne.n	8003cb8 <I2C_Slave_ISR_DMA+0xec>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cac:	d104      	bne.n	8003cb8 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fc07 	bl	80044c4 <I2C_ITListenCplt>
 8003cb6:	e048      	b.n	8003d4a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b29      	cmp	r3, #41	; 0x29
 8003cc2:	d10e      	bne.n	8003ce2 <I2C_Slave_ISR_DMA+0x116>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cca:	d00a      	beq.n	8003ce2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fd42 	bl	800475e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f9bf 	bl	800405e <I2C_ITSlaveSeqCplt>
 8003ce0:	e033      	b.n	8003d4a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003cea:	e034      	b.n	8003d56 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <I2C_Slave_ISR_DMA+0x14a>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d14:	d11f      	bne.n	8003d56 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d002      	beq.n	8003d22 <I2C_Slave_ISR_DMA+0x156>
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b29      	cmp	r3, #41	; 0x29
 8003d20:	d103      	bne.n	8003d2a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2221      	movs	r2, #33	; 0x21
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
 8003d28:	e008      	b.n	8003d3c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b22      	cmp	r3, #34	; 0x22
 8003d2e:	d002      	beq.n	8003d36 <I2C_Slave_ISR_DMA+0x16a>
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b2a      	cmp	r3, #42	; 0x2a
 8003d34:	d102      	bne.n	8003d3c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2222      	movs	r2, #34	; 0x22
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	4619      	mov	r1, r3
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fc14 	bl	8004570 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d48:	e005      	b.n	8003d56 <I2C_Slave_ISR_DMA+0x18a>
 8003d4a:	e004      	b.n	8003d56 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d54:	e011      	b.n	8003d7a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d56:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d58:	e00f      	b.n	8003d7a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8b1 	bl	8003edc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	813b      	strh	r3, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <I2C_RequestMemoryWrite+0xa4>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fe47 	bl	8004a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fd4f 	bl	8004862 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02c      	b.n	8003e28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8003dde:	e015      	b.n	8003e0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	69b9      	ldr	r1, [r7, #24]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fd35 	bl	8004862 <I2C_WaitOnTXISFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e012      	b.n	8003e28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e02:	893b      	ldrh	r3, [r7, #8]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fce3 	bl	80047e2 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	80002000 	.word	0x80002000

08003e34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <I2C_RequestMemoryRead+0xa4>)
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fdf4 	bl	8004a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fcfc 	bl	8004862 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e02c      	b.n	8003ece <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
 8003e84:	e015      	b.n	8003eb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e86:	893b      	ldrh	r3, [r7, #8]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fce2 	bl	8004862 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e012      	b.n	8003ece <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc90 	bl	80047e2 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	80002000 	.word	0x80002000

08003edc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef2:	2b28      	cmp	r3, #40	; 0x28
 8003ef4:	d16a      	bne.n	8003fcc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d138      	bne.n	8003fac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	09db      	lsrs	r3, r3, #7
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	89bb      	ldrh	r3, [r7, #12]
 8003f42:	4053      	eors	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11c      	bne.n	8003f88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d13b      	bne.n	8003fdc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f7a:	89ba      	ldrh	r2, [r7, #12]
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff facf 	bl	8003524 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f86:	e029      	b.n	8003fdc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fe2f 	bl	8004bf4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f9e:	89ba      	ldrh	r2, [r7, #12]
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fabd 	bl	8003524 <HAL_I2C_AddrCallback>
}
 8003faa:	e017      	b.n	8003fdc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fe1f 	bl	8004bf4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fbe:	89ba      	ldrh	r2, [r7, #12]
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff faad 	bl	8003524 <HAL_I2C_AddrCallback>
}
 8003fca:	e007      	b.n	8003fdc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b21      	cmp	r3, #33	; 0x21
 8003ffe:	d115      	bne.n	800402c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2211      	movs	r2, #17
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004014:	2101      	movs	r1, #1
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fdec 	bl	8004bf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fa55 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800402a:	e014      	b.n	8004056 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2212      	movs	r2, #18
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004040:	2102      	movs	r1, #2
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fdd6 	bl	8004bf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fa49 	bl	80034e8 <HAL_I2C_MasterRxCpltCallback>
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	0b9b      	lsrs	r3, r3, #14
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00d      	b.n	80040b0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	0bdb      	lsrs	r3, r3, #15
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ae:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b29      	cmp	r3, #41	; 0x29
 80040ba:	d112      	bne.n	80040e2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2228      	movs	r2, #40	; 0x28
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2221      	movs	r2, #33	; 0x21
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040ca:	2101      	movs	r1, #1
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fd91 	bl	8004bf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fa0e 	bl	80034fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040e0:	e017      	b.n	8004112 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b2a      	cmp	r3, #42	; 0x2a
 80040ec:	d111      	bne.n	8004112 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2228      	movs	r2, #40	; 0x28
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2222      	movs	r2, #34	; 0x22
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040fc:	2102      	movs	r1, #2
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fd78 	bl	8004bf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff f9ff 	bl	8003510 <HAL_I2C_SlaveRxCpltCallback>
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2220      	movs	r2, #32
 8004130:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b21      	cmp	r3, #33	; 0x21
 800413c:	d107      	bne.n	800414e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800413e:	2101      	movs	r1, #1
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fd57 	bl	8004bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2211      	movs	r2, #17
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
 800414c:	e00c      	b.n	8004168 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b22      	cmp	r3, #34	; 0x22
 8004158:	d106      	bne.n	8004168 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800415a:	2102      	movs	r1, #2
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd49 	bl	8004bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2212      	movs	r2, #18
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <I2C_ITMasterCplt+0x18c>)
 8004174:	400b      	ands	r3, r1
 8004176:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <I2C_ITMasterCplt+0x190>)
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b60      	cmp	r3, #96	; 0x60
 80041ae:	d10b      	bne.n	80041c8 <I2C_ITMasterCplt+0xac>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041c6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fac8 	bl	800475e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d002      	beq.n	80041e6 <I2C_ITMasterCplt+0xca>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f9bf 	bl	8004570 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041f2:	e054      	b.n	800429e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b21      	cmp	r3, #33	; 0x21
 80041fe:	d124      	bne.n	800424a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d10b      	bne.n	8004232 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fa98 	bl	8000760 <HAL_I2C_MemTxCpltCallback>
}
 8004230:	e035      	b.n	800429e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff f946 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004248:	e029      	b.n	800429e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b22      	cmp	r3, #34	; 0x22
 8004254:	d123      	bne.n	800429e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d10b      	bne.n	8004288 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff f967 	bl	8003554 <HAL_I2C_MemRxCpltCallback>
}
 8004286:	e00a      	b.n	800429e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff f925 	bl	80034e8 <HAL_I2C_MasterRxCpltCallback>
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	fe00e800 	.word	0xfe00e800
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042cc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b21      	cmp	r3, #33	; 0x21
 80042da:	d002      	beq.n	80042e2 <I2C_ITSlaveCplt+0x32>
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b29      	cmp	r3, #41	; 0x29
 80042e0:	d108      	bne.n	80042f4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042e2:	f248 0101 	movw	r1, #32769	; 0x8001
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fc84 	bl	8004bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2221      	movs	r2, #33	; 0x21
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
 80042f2:	e00d      	b.n	8004310 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	d002      	beq.n	8004300 <I2C_ITSlaveCplt+0x50>
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b2a      	cmp	r3, #42	; 0x2a
 80042fe:	d107      	bne.n	8004310 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004300:	f248 0102 	movw	r1, #32770	; 0x8002
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fc75 	bl	8004bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2222      	movs	r2, #34	; 0x22
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b64      	ldr	r3, [pc, #400]	; (80044bc <I2C_ITSlaveCplt+0x20c>)
 800432c:	400b      	ands	r3, r1
 800432e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa14 	bl	800475e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	0b9b      	lsrs	r3, r3, #14
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d013      	beq.n	800436a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004350:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b29a      	uxth	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004368:	e018      	b.n	800439c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	0bdb      	lsrs	r3, r3, #15
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d012      	beq.n	800439c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004384:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00c      	beq.n	80043ea <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f043 0204 	orr.w	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8a7 	bl	8004570 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b28      	cmp	r3, #40	; 0x28
 800442c:	d141      	bne.n	80044b2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f847 	bl	80044c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004436:	e03c      	b.n	80044b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004440:	d014      	beq.n	800446c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fe0b 	bl	800405e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <I2C_ITSlaveCplt+0x210>)
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff f86b 	bl	8003540 <HAL_I2C_ListenCpltCallback>
}
 800446a:	e022      	b.n	80044b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b22      	cmp	r3, #34	; 0x22
 8004476:	d10e      	bne.n	8004496 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f83e 	bl	8003510 <HAL_I2C_SlaveRxCpltCallback>
}
 8004494:	e00d      	b.n	80044b2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff f825 	bl	80034fc <HAL_I2C_SlaveTxCpltCallback>
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	fe00e800 	.word	0xfe00e800
 80044c0:	ffff0000 	.word	0xffff0000

080044c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <I2C_ITListenCplt+0xa8>)
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004542:	f248 0103 	movw	r1, #32771	; 0x8003
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb54 	bl	8004bf4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2210      	movs	r2, #16
 8004552:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fe ffef 	bl	8003540 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	ffff0000 	.word	0xffff0000

08004570 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <I2C_ITError+0x194>)
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d005      	beq.n	80045b4 <I2C_ITError+0x44>
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b29      	cmp	r3, #41	; 0x29
 80045ac:	d002      	beq.n	80045b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b2a      	cmp	r3, #42	; 0x2a
 80045b2:	d10b      	bne.n	80045cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045b4:	2103      	movs	r1, #3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fb1c 	bl	8004bf4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2228      	movs	r2, #40	; 0x28
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a50      	ldr	r2, [pc, #320]	; (8004708 <I2C_ITError+0x198>)
 80045c8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ca:	e011      	b.n	80045f0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fb0f 	bl	8004bf4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b60      	cmp	r3, #96	; 0x60
 80045e0:	d003      	beq.n	80045ea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d039      	beq.n	8004672 <I2C_ITError+0x102>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b11      	cmp	r3, #17
 8004602:	d002      	beq.n	800460a <I2C_ITError+0x9a>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b21      	cmp	r3, #33	; 0x21
 8004608:	d133      	bne.n	8004672 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004618:	d107      	bne.n	800462a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004628:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe f939 	bl	80028a6 <HAL_DMA_GetState>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d017      	beq.n	800466a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	4a33      	ldr	r2, [pc, #204]	; (800470c <I2C_ITError+0x19c>)
 8004640:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe f8eb 	bl	800282a <HAL_DMA_Abort_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04d      	beq.n	80046f6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004668:	e045      	b.n	80046f6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f850 	bl	8004710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004670:	e041      	b.n	80046f6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d039      	beq.n	80046ee <I2C_ITError+0x17e>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b12      	cmp	r3, #18
 800467e:	d002      	beq.n	8004686 <I2C_ITError+0x116>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d133      	bne.n	80046ee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004694:	d107      	bne.n	80046a6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe f8fb 	bl	80028a6 <HAL_DMA_GetState>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d017      	beq.n	80046e6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	4a14      	ldr	r2, [pc, #80]	; (800470c <I2C_ITError+0x19c>)
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe f8ad 	bl	800282a <HAL_DMA_Abort_IT>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046e4:	e009      	b.n	80046fa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f812 	bl	8004710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ec:	e005      	b.n	80046fa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f80e 	bl	8004710 <I2C_TreatErrorCallback>
  }
}
 80046f4:	e002      	b.n	80046fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046fa:	bf00      	nop
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	ffff0000 	.word	0xffff0000
 8004708:	080037e1 	.word	0x080037e1
 800470c:	080047a7 	.word	0x080047a7

08004710 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b60      	cmp	r3, #96	; 0x60
 8004722:	d10e      	bne.n	8004742 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe ff1e 	bl	800357c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004740:	e009      	b.n	8004756 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fe ff09 	bl	8003568 <HAL_I2C_ErrorCallback>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d103      	bne.n	800477c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d007      	beq.n	800479a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	619a      	str	r2, [r3, #24]
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	2200      	movs	r2, #0
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	2200      	movs	r2, #0
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ff9b 	bl	8004710 <I2C_TreatErrorCallback>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f2:	e022      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d01e      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fc:	f7fd fe6c 	bl	80024d8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <I2C_WaitOnFlagUntilTimeout+0x30>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e00f      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	429a      	cmp	r2, r3
 8004856:	d0cd      	beq.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800486e:	e02c      	b.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f871 	bl	800495c <I2C_IsAcknowledgeFailed>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e02a      	b.n	80048da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d01e      	beq.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488c:	f7fd fe24 	bl	80024d8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d1cb      	bne.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ee:	e028      	b.n	8004942 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f831 	bl	800495c <I2C_IsAcknowledgeFailed>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e026      	b.n	8004952 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fd fde8 	bl	80024d8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d113      	bne.n	8004942 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e007      	b.n	8004952 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b20      	cmp	r3, #32
 800494e:	d1cf      	bne.n	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b10      	cmp	r3, #16
 8004974:	d161      	bne.n	8004a3a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004984:	d02b      	beq.n	80049de <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004994:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004996:	e022      	b.n	80049de <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d01e      	beq.n	80049de <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fd fd9a 	bl	80024d8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <I2C_IsAcknowledgeFailed+0x5a>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d113      	bne.n	80049de <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e02e      	b.n	8004a3c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d1d5      	bne.n	8004998 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2210      	movs	r2, #16
 80049f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff feae 	bl	800475e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <I2C_IsAcknowledgeFailed+0xe8>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f043 0204 	orr.w	r2, r3, #4
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	fe00e800 	.word	0xfe00e800

08004a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	4613      	mov	r3, r2
 8004a58:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <I2C_TransferConfig+0xc4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <I2C_TransferConfig+0x3a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <I2C_TransferConfig+0xc8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <I2C_TransferConfig+0x3a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <I2C_TransferConfig+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <I2C_TransferConfig+0x3a>
 8004a78:	f641 11cb 	movw	r1, #6603	; 0x19cb
 8004a7c:	4826      	ldr	r0, [pc, #152]	; (8004b18 <I2C_TransferConfig+0xd0>)
 8004a7e:	f7fd f99c 	bl	8001dba <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a88:	d00b      	beq.n	8004aa2 <I2C_TransferConfig+0x5a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a90:	d007      	beq.n	8004aa2 <I2C_TransferConfig+0x5a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <I2C_TransferConfig+0x5a>
 8004a98:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8004a9c:	481e      	ldr	r0, [pc, #120]	; (8004b18 <I2C_TransferConfig+0xd0>)
 8004a9e:	f7fd f98c 	bl	8001dba <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <I2C_TransferConfig+0xd4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <I2C_TransferConfig+0x82>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <I2C_TransferConfig+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <I2C_TransferConfig+0x82>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <I2C_TransferConfig+0xdc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <I2C_TransferConfig+0x82>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <I2C_TransferConfig+0x82>
 8004ac0:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8004ac4:	4814      	ldr	r0, [pc, #80]	; (8004b18 <I2C_TransferConfig+0xd0>)
 8004ac6:	f7fd f978 	bl	8001dba <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	0d5b      	lsrs	r3, r3, #21
 8004ad4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <I2C_TransferConfig+0xe0>)
 8004ada:	430b      	orrs	r3, r1
 8004adc:	43db      	mvns	r3, r3
 8004ade:	ea02 0103 	and.w	r1, r2, r3
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ae8:	7a7b      	ldrb	r3, [r7, #9]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40005400 	.word	0x40005400
 8004b10:	40005800 	.word	0x40005800
 8004b14:	40007800 	.word	0x40007800
 8004b18:	0800c240 	.word	0x0800c240
 8004b1c:	80004000 	.word	0x80004000
 8004b20:	80002400 	.word	0x80002400
 8004b24:	80002000 	.word	0x80002000
 8004b28:	03ff63ff 	.word	0x03ff63ff

08004b2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	4a2a      	ldr	r2, [pc, #168]	; (8004bec <I2C_Enable_IRQ+0xc0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b4a:	4a29      	ldr	r2, [pc, #164]	; (8004bf0 <I2C_Enable_IRQ+0xc4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d11d      	bne.n	8004b8c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da03      	bge.n	8004b60 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b5e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b60:	887b      	ldrh	r3, [r7, #2]
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d103      	bne.n	8004b6e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d103      	bne.n	8004b7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d125      	bne.n	8004bce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b8a:	e020      	b.n	8004bce <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da03      	bge.n	8004b9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004bac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004bbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d103      	bne.n	8004bce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f043 0320 	orr.w	r3, r3, #32
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	080039e7 	.word	0x080039e7
 8004bf0:	08003bcd 	.word	0x08003bcd

08004bf4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00f      	beq.n	8004c2e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c14:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c22:	2b28      	cmp	r3, #40	; 0x28
 8004c24:	d003      	beq.n	8004c2e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c2e:	887b      	ldrh	r3, [r7, #2]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00f      	beq.n	8004c58 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c4c:	2b28      	cmp	r3, #40	; 0x28
 8004c4e:	d003      	beq.n	8004c58 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c56:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da03      	bge.n	8004c68 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d103      	bne.n	8004c76 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d103      	bne.n	8004c84 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f043 0320 	orr.w	r3, r3, #32
 8004c82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d103      	bne.n	8004c92 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d008      	beq.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cd8:	2164      	movs	r1, #100	; 0x64
 8004cda:	482c      	ldr	r0, [pc, #176]	; (8004d8c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004cdc:	f7fd f86d 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d003      	beq.n	8004cf6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004cee:	2165      	movs	r1, #101	; 0x65
 8004cf0:	4826      	ldr	r0, [pc, #152]	; (8004d8c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004cf2:	f7fd f862 	bl	8001dba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d138      	bne.n	8004d74 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e032      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40005400 	.word	0x40005400
 8004d84:	40005800 	.word	0x40005800
 8004d88:	40007800 	.word	0x40007800
 8004d8c:	0800c278 	.word	0x0800c278

08004d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00d      	beq.n	8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d008      	beq.n	8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004db8:	2192      	movs	r1, #146	; 0x92
 8004dba:	482a      	ldr	r0, [pc, #168]	; (8004e64 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dbc:	f7fc fffd 	bl	8001dba <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	d903      	bls.n	8004dce <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8004dc6:	2193      	movs	r1, #147	; 0x93
 8004dc8:	4826      	ldr	r0, [pc, #152]	; (8004e64 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dca:	f7fc fff6 	bl	8001dba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d139      	bne.n	8004e4e <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e033      	b.n	8004e50 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40005400 	.word	0x40005400
 8004e5c:	40005800 	.word	0x40005800
 8004e60:	40007800 	.word	0x40007800
 8004e64:	0800c278 	.word	0x0800c278

08004e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f001 b85e 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <HAL_RCC_OscConfig+0x66>
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <HAL_RCC_OscConfig+0x66>
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d112      	bne.n	8004ece <HAL_RCC_OscConfig+0x66>
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <HAL_RCC_OscConfig+0x66>
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_RCC_OscConfig+0x66>
 8004ec4:	f240 114b 	movw	r1, #331	; 0x14b
 8004ec8:	48be      	ldr	r0, [pc, #760]	; (80051c4 <HAL_RCC_OscConfig+0x35c>)
 8004eca:	f7fc ff76 	bl	8001dba <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8178 	beq.w	80051ce <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCC_OscConfig+0xa2>
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCC_OscConfig+0xa2>
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efe:	d004      	beq.n	8004f0a <HAL_RCC_OscConfig+0xa2>
 8004f00:	f240 1151 	movw	r1, #337	; 0x151
 8004f04:	48af      	ldr	r0, [pc, #700]	; (80051c4 <HAL_RCC_OscConfig+0x35c>)
 8004f06:	f7fc ff58 	bl	8001dba <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f0a:	4baf      	ldr	r3, [pc, #700]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d00c      	beq.n	8004f30 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f16:	4bac      	ldr	r3, [pc, #688]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d159      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x16e>
 8004f22:	4ba9      	ldr	r3, [pc, #676]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	d152      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x16e>
 8004f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f34:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8004f44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	fab3 f383 	clz	r3, r3
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_OscConfig+0xfa>
 8004f5c:	4b9a      	ldr	r3, [pc, #616]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	e015      	b.n	8004f8e <HAL_RCC_OscConfig+0x126>
 8004f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004f6e:	fa93 f3a3 	rbit	r3, r3
 8004f72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f7a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f7e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f92:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004f96:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004f9a:	fa92 f2a2 	rbit	r2, r2
 8004f9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004fa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fa6:	fab2 f282 	clz	r2, r2
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	f042 0220 	orr.w	r2, r2, #32
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	f002 021f 	and.w	r2, r2, #31
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8104 	beq.w	80051cc <HAL_RCC_OscConfig+0x364>
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 80fe 	bne.w	80051cc <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f000 bfb4 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x188>
 8004fe2:	4b79      	ldr	r3, [pc, #484]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a78      	ldr	r2, [pc, #480]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e030      	b.n	8005052 <HAL_RCC_OscConfig+0x1ea>
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x1ac>
 8004ffa:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a72      	ldr	r2, [pc, #456]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b70      	ldr	r3, [pc, #448]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6f      	ldr	r2, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800500c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e01e      	b.n	8005052 <HAL_RCC_OscConfig+0x1ea>
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800501e:	d10c      	bne.n	800503a <HAL_RCC_OscConfig+0x1d2>
 8005020:	4b69      	ldr	r3, [pc, #420]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a68      	ldr	r2, [pc, #416]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b66      	ldr	r3, [pc, #408]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a65      	ldr	r2, [pc, #404]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e00b      	b.n	8005052 <HAL_RCC_OscConfig+0x1ea>
 800503a:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a62      	ldr	r2, [pc, #392]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b60      	ldr	r3, [pc, #384]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5f      	ldr	r2, [pc, #380]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800504c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d059      	beq.n	8005110 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd fa3c 	bl	80024d8 <HAL_GetTick>
 8005060:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005066:	f7fd fa37 	bl	80024d8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d902      	bls.n	800507c <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	f000 bf61 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 800507c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005080:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005090:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	b2db      	uxtb	r3, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_OscConfig+0x246>
 80050a8:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	e015      	b.n	80050da <HAL_RCC_OscConfig+0x272>
 80050ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80050c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80050ce:	fa93 f3a3 	rbit	r3, r3
 80050d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050d6:	4b3c      	ldr	r3, [pc, #240]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050de:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80050e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80050e6:	fa92 f2a2 	rbit	r2, r2
 80050ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80050ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80050f2:	fab2 f282 	clz	r2, r2
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	f002 021f 	and.w	r2, r2, #31
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f202 	lsl.w	r2, r1, r2
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ab      	beq.n	8005066 <HAL_RCC_OscConfig+0x1fe>
 800510e:	e05e      	b.n	80051ce <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fd f9e2 	bl	80024d8 <HAL_GetTick>
 8005114:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7fd f9dd 	bl	80024d8 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d902      	bls.n	8005130 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	f000 bf07 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005134:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005144:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <HAL_RCC_OscConfig+0x2fa>
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	e015      	b.n	800518e <HAL_RCC_OscConfig+0x326>
 8005162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005166:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800517a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800517e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_RCC_OscConfig+0x360>)
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005192:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005196:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800519a:	fa92 f2a2 	rbit	r2, r2
 800519e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80051a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051a6:	fab2 f282 	clz	r2, r2
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f042 0220 	orr.w	r2, r2, #32
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	f002 021f 	and.w	r2, r2, #31
 80051b6:	2101      	movs	r1, #1
 80051b8:	fa01 f202 	lsl.w	r2, r1, r2
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ab      	bne.n	800511a <HAL_RCC_OscConfig+0x2b2>
 80051c2:	e004      	b.n	80051ce <HAL_RCC_OscConfig+0x366>
 80051c4:	0800c2b4 	.word	0x0800c2b4
 80051c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 818e 	beq.w	80054fa <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_RCC_OscConfig+0x394>
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d004      	beq.n	80051fc <HAL_RCC_OscConfig+0x394>
 80051f2:	f240 1189 	movw	r1, #393	; 0x189
 80051f6:	48a8      	ldr	r0, [pc, #672]	; (8005498 <HAL_RCC_OscConfig+0x630>)
 80051f8:	f7fc fddf 	bl	8001dba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b1f      	cmp	r3, #31
 8005204:	d904      	bls.n	8005210 <HAL_RCC_OscConfig+0x3a8>
 8005206:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800520a:	48a3      	ldr	r0, [pc, #652]	; (8005498 <HAL_RCC_OscConfig+0x630>)
 800520c:	f7fc fdd5 	bl	8001dba <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005210:	4ba2      	ldr	r3, [pc, #648]	; (800549c <HAL_RCC_OscConfig+0x634>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800521c:	4b9f      	ldr	r3, [pc, #636]	; (800549c <HAL_RCC_OscConfig+0x634>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d16d      	bne.n	8005304 <HAL_RCC_OscConfig+0x49c>
 8005228:	4b9c      	ldr	r3, [pc, #624]	; (800549c <HAL_RCC_OscConfig+0x634>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	d166      	bne.n	8005304 <HAL_RCC_OscConfig+0x49c>
 8005236:	2302      	movs	r3, #2
 8005238:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005240:	fa93 f3a3 	rbit	r3, r3
 8005244:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005248:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	b2db      	uxtb	r3, r3
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d102      	bne.n	8005266 <HAL_RCC_OscConfig+0x3fe>
 8005260:	4b8e      	ldr	r3, [pc, #568]	; (800549c <HAL_RCC_OscConfig+0x634>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	e013      	b.n	800528e <HAL_RCC_OscConfig+0x426>
 8005266:	2302      	movs	r3, #2
 8005268:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005278:	2302      	movs	r3, #2
 800527a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800527e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800528a:	4b84      	ldr	r3, [pc, #528]	; (800549c <HAL_RCC_OscConfig+0x634>)
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2202      	movs	r2, #2
 8005290:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005294:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005298:	fa92 f2a2 	rbit	r2, r2
 800529c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80052a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052a4:	fab2 f282 	clz	r2, r2
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	f042 0220 	orr.w	r2, r2, #32
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f002 021f 	and.w	r2, r2, #31
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_RCC_OscConfig+0x468>
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f000 be37 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b72      	ldr	r3, [pc, #456]	; (800549c <HAL_RCC_OscConfig+0x634>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	21f8      	movs	r1, #248	; 0xf8
 80052e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80052e8:	fa91 f1a1 	rbit	r1, r1
 80052ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80052f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052f4:	fab1 f181 	clz	r1, r1
 80052f8:	b2c9      	uxtb	r1, r1
 80052fa:	408b      	lsls	r3, r1
 80052fc:	4967      	ldr	r1, [pc, #412]	; (800549c <HAL_RCC_OscConfig+0x634>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	e0fa      	b.n	80054fa <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8085 	beq.w	800541a <HAL_RCC_OscConfig+0x5b2>
 8005310:	2301      	movs	r3, #1
 8005312:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005322:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	2301      	movs	r3, #1
 800533a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd f8cc 	bl	80024d8 <HAL_GetTick>
 8005340:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7fd f8c7 	bl	80024d8 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d902      	bls.n	800535c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	f000 bdf1 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 800535c:	2302      	movs	r3, #2
 800535e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800536e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d102      	bne.n	800538c <HAL_RCC_OscConfig+0x524>
 8005386:	4b45      	ldr	r3, [pc, #276]	; (800549c <HAL_RCC_OscConfig+0x634>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	e013      	b.n	80053b4 <HAL_RCC_OscConfig+0x54c>
 800538c:	2302      	movs	r3, #2
 800538e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800539e:	2302      	movs	r3, #2
 80053a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053b0:	4b3a      	ldr	r3, [pc, #232]	; (800549c <HAL_RCC_OscConfig+0x634>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2202      	movs	r2, #2
 80053b6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80053ba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80053be:	fa92 f2a2 	rbit	r2, r2
 80053c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80053c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053ca:	fab2 f282 	clz	r2, r2
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	f042 0220 	orr.w	r2, r2, #32
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	f002 021f 	and.w	r2, r2, #31
 80053da:	2101      	movs	r1, #1
 80053dc:	fa01 f202 	lsl.w	r2, r1, r2
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0af      	beq.n	8005346 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b2d      	ldr	r3, [pc, #180]	; (800549c <HAL_RCC_OscConfig+0x634>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	21f8      	movs	r1, #248	; 0xf8
 80053f6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80053fe:	fa91 f1a1 	rbit	r1, r1
 8005402:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005406:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800540a:	fab1 f181 	clz	r1, r1
 800540e:	b2c9      	uxtb	r1, r1
 8005410:	408b      	lsls	r3, r1
 8005412:	4922      	ldr	r1, [pc, #136]	; (800549c <HAL_RCC_OscConfig+0x634>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	e06f      	b.n	80054fa <HAL_RCC_OscConfig+0x692>
 800541a:	2301      	movs	r3, #1
 800541c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005424:	fa93 f3a3 	rbit	r3, r3
 8005428:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800542c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800543a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fd f847 	bl	80024d8 <HAL_GetTick>
 800544a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7fd f842 	bl	80024d8 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d902      	bls.n	8005466 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	f000 bd6c 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005466:	2302      	movs	r3, #2
 8005468:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005478:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x638>
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_RCC_OscConfig+0x634>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	e018      	b.n	80054c8 <HAL_RCC_OscConfig+0x660>
 8005496:	bf00      	nop
 8005498:	0800c2b4 	.word	0x0800c2b4
 800549c:	40021000 	.word	0x40021000
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054b2:	2302      	movs	r3, #2
 80054b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054c4:	4bc0      	ldr	r3, [pc, #768]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2202      	movs	r2, #2
 80054ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80054ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80054d2:	fa92 f2a2 	rbit	r2, r2
 80054d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80054da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1aa      	bne.n	8005450 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80e7 	beq.w	80056d8 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_RCC_OscConfig+0x6c0>
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d004      	beq.n	8005528 <HAL_RCC_OscConfig+0x6c0>
 800551e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8005522:	48aa      	ldr	r0, [pc, #680]	; (80057cc <HAL_RCC_OscConfig+0x964>)
 8005524:	f7fc fc49 	bl	8001dba <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d066      	beq.n	8005600 <HAL_RCC_OscConfig+0x798>
 8005532:	2301      	movs	r3, #1
 8005534:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005544:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	4b9f      	ldr	r3, [pc, #636]	; (80057d0 <HAL_RCC_OscConfig+0x968>)
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	461a      	mov	r2, r3
 8005558:	2301      	movs	r3, #1
 800555a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555c:	f7fc ffbc 	bl	80024d8 <HAL_GetTick>
 8005560:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005564:	e00a      	b.n	800557c <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005566:	f7fc ffb7 	bl	80024d8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d902      	bls.n	800557c <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	f000 bce1 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 800557c:	2302      	movs	r3, #2
 800557e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	fa93 f2a3 	rbit	r2, r3
 800558a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005594:	2202      	movs	r2, #2
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	fa93 f2a3 	rbit	r2, r3
 80055a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055ac:	2202      	movs	r2, #2
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80055be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c0:	4b81      	ldr	r3, [pc, #516]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055c8:	2102      	movs	r1, #2
 80055ca:	6019      	str	r1, [r3, #0]
 80055cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	fa93 f1a3 	rbit	r1, r3
 80055d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055da:	6019      	str	r1, [r3, #0]
  return result;
 80055dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0b3      	beq.n	8005566 <HAL_RCC_OscConfig+0x6fe>
 80055fe:	e06b      	b.n	80056d8 <HAL_RCC_OscConfig+0x870>
 8005600:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005616:	601a      	str	r2, [r3, #0]
  return result;
 8005618:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800561c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <HAL_RCC_OscConfig+0x968>)
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005632:	f7fc ff51 	bl	80024d8 <HAL_GetTick>
 8005636:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563a:	e00a      	b.n	8005652 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fc ff4c 	bl	80024d8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d902      	bls.n	8005652 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	f000 bc76 	b.w	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005652:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005656:	2202      	movs	r2, #2
 8005658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	fa93 f2a3 	rbit	r2, r3
 8005664:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800566e:	2202      	movs	r2, #2
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	fa93 f2a3 	rbit	r2, r3
 800567c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005686:	2202      	movs	r2, #2
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	fa93 f2a3 	rbit	r2, r3
 8005694:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005698:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569a:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 800569c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800569e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056a2:	2102      	movs	r1, #2
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	fa93 f1a3 	rbit	r1, r3
 80056b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056b4:	6019      	str	r1, [r3, #0]
  return result;
 80056b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	fab3 f383 	clz	r3, r3
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1b1      	bne.n	800563c <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8171 	beq.w	80059ca <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <HAL_RCC_OscConfig+0x8ae>
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d009      	beq.n	8005716 <HAL_RCC_OscConfig+0x8ae>
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b05      	cmp	r3, #5
 800570a:	d004      	beq.n	8005716 <HAL_RCC_OscConfig+0x8ae>
 800570c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005710:	482e      	ldr	r0, [pc, #184]	; (80057cc <HAL_RCC_OscConfig+0x964>)
 8005712:	f7fc fb52 	bl	8001dba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005716:	4b2c      	ldr	r3, [pc, #176]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d112      	bne.n	8005748 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b29      	ldr	r3, [pc, #164]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	61d3      	str	r3, [r2, #28]
 800572e:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCC_OscConfig+0x96c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d11a      	bne.n	800578a <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005754:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <HAL_RCC_OscConfig+0x96c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HAL_RCC_OscConfig+0x96c>)
 800575a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005760:	f7fc feba 	bl	80024d8 <HAL_GetTick>
 8005764:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005768:	e009      	b.n	800577e <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fc feb5 	bl	80024d8 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	; 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e3df      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <HAL_RCC_OscConfig+0x96c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ef      	beq.n	800576a <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x93a>
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4a0b      	ldr	r2, [pc, #44]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6213      	str	r3, [r2, #32]
 80057a0:	e038      	b.n	8005814 <HAL_RCC_OscConfig+0x9ac>
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d115      	bne.n	80057d8 <HAL_RCC_OscConfig+0x970>
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	6213      	str	r3, [r2, #32]
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	4a02      	ldr	r2, [pc, #8]	; (80057c8 <HAL_RCC_OscConfig+0x960>)
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	6213      	str	r3, [r2, #32]
 80057c4:	e026      	b.n	8005814 <HAL_RCC_OscConfig+0x9ac>
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	0800c2b4 	.word	0x0800c2b4
 80057d0:	10908120 	.word	0x10908120
 80057d4:	40007000 	.word	0x40007000
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x994>
 80057e2:	4b5e      	ldr	r3, [pc, #376]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	4a5d      	ldr	r2, [pc, #372]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	6213      	str	r3, [r2, #32]
 80057ee:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4a5a      	ldr	r2, [pc, #360]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6213      	str	r3, [r2, #32]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0x9ac>
 80057fc:	4b57      	ldr	r3, [pc, #348]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	4a56      	ldr	r2, [pc, #344]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	6213      	str	r3, [r2, #32]
 8005808:	4b54      	ldr	r3, [pc, #336]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4a53      	ldr	r2, [pc, #332]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 800580e:	f023 0304 	bic.w	r3, r3, #4
 8005812:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d064      	beq.n	80058e8 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581e:	f7fc fe5b 	bl	80024d8 <HAL_GetTick>
 8005822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	e00b      	b.n	8005840 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fc fe56 	bl	80024d8 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e37e      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005840:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005844:	2202      	movs	r2, #2
 8005846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	fa93 f2a3 	rbit	r2, r3
 8005852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800585c:	2202      	movs	r2, #2
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	fa93 f2a3 	rbit	r2, r3
 800586a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800586e:	601a      	str	r2, [r3, #0]
  return result;
 8005870:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005874:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005876:	fab3 f383 	clz	r3, r3
 800587a:	b2db      	uxtb	r3, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f043 0302 	orr.w	r3, r3, #2
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d102      	bne.n	8005890 <HAL_RCC_OscConfig+0xa28>
 800588a:	4b34      	ldr	r3, [pc, #208]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	e00d      	b.n	80058ac <HAL_RCC_OscConfig+0xa44>
 8005890:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005894:	2202      	movs	r2, #2
 8005896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	fa93 f2a3 	rbit	r2, r3
 80058a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	4b2c      	ldr	r3, [pc, #176]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058b0:	2102      	movs	r1, #2
 80058b2:	6011      	str	r1, [r2, #0]
 80058b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	fa92 f1a2 	rbit	r1, r2
 80058be:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058c2:	6011      	str	r1, [r2, #0]
  return result;
 80058c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	fab2 f282 	clz	r2, r2
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	f002 021f 	and.w	r2, r2, #31
 80058da:	2101      	movs	r1, #1
 80058dc:	fa01 f202 	lsl.w	r2, r1, r2
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0a0      	beq.n	8005828 <HAL_RCC_OscConfig+0x9c0>
 80058e6:	e066      	b.n	80059b6 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e8:	f7fc fdf6 	bl	80024d8 <HAL_GetTick>
 80058ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	e00b      	b.n	800590a <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fc fdf1 	bl	80024d8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e319      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
 800590a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800590e:	2202      	movs	r2, #2
 8005910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	fa93 f2a3 	rbit	r2, r3
 800591c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005926:	2202      	movs	r2, #2
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005938:	601a      	str	r2, [r3, #0]
  return result;
 800593a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800593e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0xaf8>
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <HAL_RCC_OscConfig+0xaf4>)
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	e010      	b.n	800597c <HAL_RCC_OscConfig+0xb14>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005964:	2202      	movs	r2, #2
 8005966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	fa93 f2a3 	rbit	r2, r3
 8005972:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	4bad      	ldr	r3, [pc, #692]	; (8005c30 <HAL_RCC_OscConfig+0xdc8>)
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005980:	2102      	movs	r1, #2
 8005982:	6011      	str	r1, [r2, #0]
 8005984:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	fa92 f1a2 	rbit	r1, r2
 800598e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005992:	6011      	str	r1, [r2, #0]
  return result;
 8005994:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	fab2 f282 	clz	r2, r2
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	f002 021f 	and.w	r2, r2, #31
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f202 	lsl.w	r2, r1, r2
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d19d      	bne.n	80058f2 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059b6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059be:	4b9c      	ldr	r3, [pc, #624]	; (8005c30 <HAL_RCC_OscConfig+0xdc8>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4a9b      	ldr	r2, [pc, #620]	; (8005c30 <HAL_RCC_OscConfig+0xdc8>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <HAL_RCC_OscConfig+0xb8a>
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_OscConfig+0xb8a>
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d004      	beq.n	80059f2 <HAL_RCC_OscConfig+0xb8a>
 80059e8:	f240 213a 	movw	r1, #570	; 0x23a
 80059ec:	4891      	ldr	r0, [pc, #580]	; (8005c34 <HAL_RCC_OscConfig+0xdcc>)
 80059ee:	f7fc f9e4 	bl	8001dba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 829f 	beq.w	8005f3c <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <HAL_RCC_OscConfig+0xdc8>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	f000 826c 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	f040 81e4 	bne.w	8005de0 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCC_OscConfig+0xbd2>
 8005a24:	1d3b      	adds	r3, r7, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2e:	d004      	beq.n	8005a3a <HAL_RCC_OscConfig+0xbd2>
 8005a30:	f240 2143 	movw	r1, #579	; 0x243
 8005a34:	487f      	ldr	r0, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0xdcc>)
 8005a36:	f7fc f9c0 	bl	8001dba <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d058      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a44:	1d3b      	adds	r3, r7, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a4e:	d052      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a5a:	d04c      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a66:	d046      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a68:	1d3b      	adds	r3, r7, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a72:	d040      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a7e:	d03a      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a8a:	d034      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a96:	d02e      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005a98:	1d3b      	adds	r3, r7, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aa2:	d028      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005aae:	d022      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005aba:	d01c      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005abc:	1d3b      	adds	r3, r7, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ac6:	d016      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005ae0:	1d3b      	adds	r3, r7, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005aea:	d004      	beq.n	8005af6 <HAL_RCC_OscConfig+0xc8e>
 8005aec:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005af0:	4850      	ldr	r0, [pc, #320]	; (8005c34 <HAL_RCC_OscConfig+0xdcc>)
 8005af2:	f7fc f962 	bl	8001dba <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d04f      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d04a      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d045      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d040      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d03b      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d036      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b06      	cmp	r3, #6
 8005b3a:	d031      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b07      	cmp	r3, #7
 8005b44:	d02c      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d027      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b50:	1d3b      	adds	r3, r7, #4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d022      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b0a      	cmp	r3, #10
 8005b62:	d01d      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b0b      	cmp	r3, #11
 8005b6c:	d018      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d013      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b78:	1d3b      	adds	r3, r7, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b0d      	cmp	r3, #13
 8005b80:	d00e      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b82:	1d3b      	adds	r3, r7, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b0e      	cmp	r3, #14
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d004      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xd38>
 8005b96:	f240 2146 	movw	r1, #582	; 0x246
 8005b9a:	4826      	ldr	r0, [pc, #152]	; (8005c34 <HAL_RCC_OscConfig+0xdcc>)
 8005b9c:	f7fc f90d 	bl	8001dba <assert_failed>
 8005ba0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	fa93 f2a3 	rbit	r2, r3
 8005bb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bb8:	601a      	str	r2, [r3, #0]
  return result;
 8005bba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bbe:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fc fc7f 	bl	80024d8 <HAL_GetTick>
 8005bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bde:	e009      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fc fc7a 	bl	80024d8 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e1a4      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005bf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fa93 f2a3 	rbit	r2, r3
 8005c08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c0c:	601a      	str	r2, [r3, #0]
  return result;
 8005c0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c14:	fab3 f383 	clz	r3, r3
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_OscConfig+0xdd0>
 8005c28:	4b01      	ldr	r3, [pc, #4]	; (8005c30 <HAL_RCC_OscConfig+0xdc8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	e020      	b.n	8005c70 <HAL_RCC_OscConfig+0xe08>
 8005c2e:	bf00      	nop
 8005c30:	40021000 	.word	0x40021000
 8005c34:	0800c2b4 	.word	0x0800c2b4
 8005c38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	fa93 f2a3 	rbit	r2, r3
 8005c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	fa93 f2a3 	rbit	r2, r3
 8005c66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	4bb6      	ldr	r3, [pc, #728]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	fa92 f1a2 	rbit	r1, r2
 8005c84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c88:	6011      	str	r1, [r2, #0]
  return result;
 8005c8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	fab2 f282 	clz	r2, r2
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	f042 0220 	orr.w	r2, r2, #32
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f002 021f 	and.w	r2, r2, #31
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d199      	bne.n	8005be0 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cac:	4ba6      	ldr	r3, [pc, #664]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	f023 020f 	bic.w	r2, r3, #15
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	49a3      	ldr	r1, [pc, #652]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005cc0:	4ba1      	ldr	r3, [pc, #644]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a19      	ldr	r1, [r3, #32]
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	499c      	ldr	r1, [pc, #624]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	fa93 f2a3 	rbit	r2, r3
 8005cf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cf4:	601a      	str	r2, [r3, #0]
  return result;
 8005cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cfa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cfc:	fab3 f383 	clz	r3, r3
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2301      	movs	r3, #1
 8005d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fc fbe1 	bl	80024d8 <HAL_GetTick>
 8005d16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d1a:	e009      	b.n	8005d30 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fc fbdc 	bl	80024d8 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e106      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005d30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	fa93 f2a3 	rbit	r2, r3
 8005d44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d48:	601a      	str	r2, [r3, #0]
  return result;
 8005d4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d50:	fab3 f383 	clz	r3, r3
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d102      	bne.n	8005d6a <HAL_RCC_OscConfig+0xf02>
 8005d64:	4b78      	ldr	r3, [pc, #480]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_OscConfig+0xf3a>
 8005d6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	fa93 f2a3 	rbit	r2, r3
 8005d7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	fa93 f2a3 	rbit	r2, r3
 8005d98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005da6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005daa:	6011      	str	r1, [r2, #0]
 8005dac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	fa92 f1a2 	rbit	r1, r2
 8005db6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dba:	6011      	str	r1, [r2, #0]
  return result;
 8005dbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	fab2 f282 	clz	r2, r2
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	f042 0220 	orr.w	r2, r2, #32
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	f002 021f 	and.w	r2, r2, #31
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d09e      	beq.n	8005d1c <HAL_RCC_OscConfig+0xeb4>
 8005dde:	e0ad      	b.n	8005f3c <HAL_RCC_OscConfig+0x10d4>
 8005de0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	fa93 f2a3 	rbit	r2, r3
 8005df4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005df8:	601a      	str	r2, [r3, #0]
  return result;
 8005dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005dfe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	fab3 f383 	clz	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	461a      	mov	r2, r3
 8005e12:	2300      	movs	r3, #0
 8005e14:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fc fb5f 	bl	80024d8 <HAL_GetTick>
 8005e1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e1e:	e009      	b.n	8005e34 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e20:	f7fc fb5a 	bl	80024d8 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e084      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
 8005e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	fa93 f2a3 	rbit	r2, r3
 8005e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e4c:	601a      	str	r2, [r3, #0]
  return result;
 8005e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d102      	bne.n	8005e6e <HAL_RCC_OscConfig+0x1006>
 8005e68:	4b37      	ldr	r3, [pc, #220]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	e01b      	b.n	8005ea6 <HAL_RCC_OscConfig+0x103e>
 8005e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	fa93 f2a3 	rbit	r2, r3
 8005e82:	f107 0320 	add.w	r3, r7, #32
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f107 031c 	add.w	r3, r7, #28
 8005e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f107 031c 	add.w	r3, r7, #28
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	fa93 f2a3 	rbit	r2, r3
 8005e9c:	f107 0318 	add.w	r3, r7, #24
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	f107 0214 	add.w	r2, r7, #20
 8005eaa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005eae:	6011      	str	r1, [r2, #0]
 8005eb0:	f107 0214 	add.w	r2, r7, #20
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	fa92 f1a2 	rbit	r1, r2
 8005eba:	f107 0210 	add.w	r2, r7, #16
 8005ebe:	6011      	str	r1, [r2, #0]
  return result;
 8005ec0:	f107 0210 	add.w	r2, r7, #16
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	fab2 f282 	clz	r2, r2
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	f002 021f 	and.w	r2, r2, #31
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d19e      	bne.n	8005e20 <HAL_RCC_OscConfig+0xfb8>
 8005ee2:	e02b      	b.n	8005f3c <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e025      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005efa:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <HAL_RCC_OscConfig+0x10e0>)
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f06:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d111      	bne.n	8005f38 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f18:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d108      	bne.n	8005f38 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000

08005f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b09e      	sub	sp, #120	; 0x78
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e203      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d116      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x52>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d110      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x52>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x52>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x52>
 8005f94:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005f98:	48a5      	ldr	r0, [pc, #660]	; (8006230 <HAL_RCC_ClockConfig+0x2e4>)
 8005f9a:	f7fb ff0e 	bl	8001dba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCC_ClockConfig+0x6e>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d007      	beq.n	8005fba <HAL_RCC_ClockConfig+0x6e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d004      	beq.n	8005fba <HAL_RCC_ClockConfig+0x6e>
 8005fb0:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8005fb4:	489e      	ldr	r0, [pc, #632]	; (8006230 <HAL_RCC_ClockConfig+0x2e4>)
 8005fb6:	f7fb ff00 	bl	8001dba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fba:	4b9e      	ldr	r3, [pc, #632]	; (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d910      	bls.n	8005fea <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc8:	4b9a      	ldr	r3, [pc, #616]	; (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 0207 	bic.w	r2, r3, #7
 8005fd0:	4998      	ldr	r1, [pc, #608]	; (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd8:	4b96      	ldr	r3, [pc, #600]	; (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d001      	beq.n	8005fea <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e1c0      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d031      	beq.n	800605a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d024      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d020      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b90      	cmp	r3, #144	; 0x90
 800600c:	d01c      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2ba0      	cmp	r3, #160	; 0xa0
 8006014:	d018      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2bb0      	cmp	r3, #176	; 0xb0
 800601c:	d014      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2bc0      	cmp	r3, #192	; 0xc0
 8006024:	d010      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2bd0      	cmp	r3, #208	; 0xd0
 800602c:	d00c      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2be0      	cmp	r3, #224	; 0xe0
 8006034:	d008      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2bf0      	cmp	r3, #240	; 0xf0
 800603c:	d004      	beq.n	8006048 <HAL_RCC_ClockConfig+0xfc>
 800603e:	f240 21db 	movw	r1, #731	; 0x2db
 8006042:	487b      	ldr	r0, [pc, #492]	; (8006230 <HAL_RCC_ClockConfig+0x2e4>)
 8006044:	f7fb feb9 	bl	8001dba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006048:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4978      	ldr	r1, [pc, #480]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 8006056:	4313      	orrs	r3, r2
 8006058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80f3 	beq.w	800624e <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_RCC_ClockConfig+0x13e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d008      	beq.n	800608a <HAL_RCC_ClockConfig+0x13e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d004      	beq.n	800608a <HAL_RCC_ClockConfig+0x13e>
 8006080:	f240 21e2 	movw	r1, #738	; 0x2e2
 8006084:	486a      	ldr	r0, [pc, #424]	; (8006230 <HAL_RCC_ClockConfig+0x2e4>)
 8006086:	f7fb fe98 	bl	8001dba <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d13c      	bne.n	800610c <HAL_RCC_ClockConfig+0x1c0>
 8006092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006096:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	fab3 f383 	clz	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d102      	bne.n	80060bc <HAL_RCC_ClockConfig+0x170>
 80060b6:	4b60      	ldr	r3, [pc, #384]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	e00f      	b.n	80060dc <HAL_RCC_ClockConfig+0x190>
 80060bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	667b      	str	r3, [r7, #100]	; 0x64
 80060ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ce:	663b      	str	r3, [r7, #96]	; 0x60
 80060d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d2:	fa93 f3a3 	rbit	r3, r3
 80060d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d8:	4b57      	ldr	r3, [pc, #348]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80060e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060e4:	fa92 f2a2 	rbit	r2, r2
 80060e8:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80060ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060ec:	fab2 f282 	clz	r2, r2
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	f042 0220 	orr.w	r2, r2, #32
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	f002 021f 	and.w	r2, r2, #31
 80060fc:	2101      	movs	r1, #1
 80060fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d17b      	bne.n	8006200 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e12f      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d13c      	bne.n	800618e <HAL_RCC_ClockConfig+0x242>
 8006114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	fa93 f3a3 	rbit	r3, r3
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006124:	fab3 f383 	clz	r3, r3
 8006128:	b2db      	uxtb	r3, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d102      	bne.n	800613e <HAL_RCC_ClockConfig+0x1f2>
 8006138:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	e00f      	b.n	800615e <HAL_RCC_ClockConfig+0x212>
 800613e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006146:	fa93 f3a3 	rbit	r3, r3
 800614a:	647b      	str	r3, [r7, #68]	; 0x44
 800614c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006150:	643b      	str	r3, [r7, #64]	; 0x40
 8006152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006154:	fa93 f3a3 	rbit	r3, r3
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006162:	63ba      	str	r2, [r7, #56]	; 0x38
 8006164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006166:	fa92 f2a2 	rbit	r2, r2
 800616a:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800616c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616e:	fab2 f282 	clz	r2, r2
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	f042 0220 	orr.w	r2, r2, #32
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	f002 021f 	and.w	r2, r2, #31
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f202 	lsl.w	r2, r1, r2
 8006184:	4013      	ands	r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d13a      	bne.n	8006200 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e0ee      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
 800618e:	2302      	movs	r3, #2
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	fa93 f3a3 	rbit	r3, r3
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619c:	fab3 f383 	clz	r3, r3
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d102      	bne.n	80061b6 <HAL_RCC_ClockConfig+0x26a>
 80061b0:	4b21      	ldr	r3, [pc, #132]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	e00d      	b.n	80061d2 <HAL_RCC_ClockConfig+0x286>
 80061b6:	2302      	movs	r3, #2
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	fa93 f3a3 	rbit	r3, r3
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	2302      	movs	r3, #2
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2202      	movs	r2, #2
 80061d4:	61ba      	str	r2, [r7, #24]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	fa92 f2a2 	rbit	r2, r2
 80061dc:	617a      	str	r2, [r7, #20]
  return result;
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	fab2 f282 	clz	r2, r2
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	f042 0220 	orr.w	r2, r2, #32
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	f002 021f 	and.w	r2, r2, #31
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0b5      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 0203 	bic.w	r2, r3, #3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	490a      	ldr	r1, [pc, #40]	; (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 800620e:	4313      	orrs	r3, r2
 8006210:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006212:	f7fc f961 	bl	80024d8 <HAL_GetTick>
 8006216:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006218:	e010      	b.n	800623c <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800621a:	f7fc f95d 	bl	80024d8 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	; 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d907      	bls.n	800623c <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e09d      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
 8006230:	0800c2b4 	.word	0x0800c2b4
 8006234:	40022000 	.word	0x40022000
 8006238:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623c:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f003 020c 	and.w	r2, r3, #12
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	429a      	cmp	r2, r3
 800624c:	d1e5      	bne.n	800621a <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800624e:	4b4a      	ldr	r3, [pc, #296]	; (8006378 <HAL_RCC_ClockConfig+0x42c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d210      	bcs.n	800627e <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625c:	4b46      	ldr	r3, [pc, #280]	; (8006378 <HAL_RCC_ClockConfig+0x42c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f023 0207 	bic.w	r2, r3, #7
 8006264:	4944      	ldr	r1, [pc, #272]	; (8006378 <HAL_RCC_ClockConfig+0x42c>)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <HAL_RCC_ClockConfig+0x42c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d001      	beq.n	800627e <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e076      	b.n	800636c <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d025      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x378>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d013      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x378>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80062a4:	d00e      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x378>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062ae:	d009      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x378>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b8:	d004      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x378>
 80062ba:	f240 311e 	movw	r1, #798	; 0x31e
 80062be:	482f      	ldr	r0, [pc, #188]	; (800637c <HAL_RCC_ClockConfig+0x430>)
 80062c0:	f7fb fd7b 	bl	8001dba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4928      	ldr	r1, [pc, #160]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d026      	beq.n	8006330 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <HAL_RCC_ClockConfig+0x3d0>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d013      	beq.n	800631c <HAL_RCC_ClockConfig+0x3d0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80062fc:	d00e      	beq.n	800631c <HAL_RCC_ClockConfig+0x3d0>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006306:	d009      	beq.n	800631c <HAL_RCC_ClockConfig+0x3d0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006310:	d004      	beq.n	800631c <HAL_RCC_ClockConfig+0x3d0>
 8006312:	f240 3125 	movw	r1, #805	; 0x325
 8006316:	4819      	ldr	r0, [pc, #100]	; (800637c <HAL_RCC_ClockConfig+0x430>)
 8006318:	f7fb fd4f 	bl	8001dba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4912      	ldr	r1, [pc, #72]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 800632c:	4313      	orrs	r3, r2
 800632e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006330:	f000 f82c 	bl	800638c <HAL_RCC_GetSysClockFreq>
 8006334:	4601      	mov	r1, r0
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <HAL_RCC_ClockConfig+0x428>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800633e:	22f0      	movs	r2, #240	; 0xf0
 8006340:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	fa92 f2a2 	rbit	r2, r2
 8006348:	60fa      	str	r2, [r7, #12]
  return result;
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	fab2 f282 	clz	r2, r2
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	40d3      	lsrs	r3, r2
 8006354:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <HAL_RCC_ClockConfig+0x434>)
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	fa21 f303 	lsr.w	r3, r1, r3
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <HAL_RCC_ClockConfig+0x438>)
 800635e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006360:	4b09      	ldr	r3, [pc, #36]	; (8006388 <HAL_RCC_ClockConfig+0x43c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fc f873 	bl	8002450 <HAL_InitTick>
  
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3778      	adds	r7, #120	; 0x78
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40021000 	.word	0x40021000
 8006378:	40022000 	.word	0x40022000
 800637c:	0800c2b4 	.word	0x0800c2b4
 8006380:	0800c478 	.word	0x0800c478
 8006384:	2000007c 	.word	0x2000007c
 8006388:	20000080 	.word	0x20000080

0800638c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800638c:	b480      	push	{r7}
 800638e:	b08b      	sub	sp, #44	; 0x2c
 8006390:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80063a6:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d002      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x30>
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d003      	beq.n	80063c2 <HAL_RCC_GetSysClockFreq+0x36>
 80063ba:	e03f      	b.n	800643c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <HAL_RCC_GetSysClockFreq+0xc8>)
 80063be:	623b      	str	r3, [r7, #32]
      break;
 80063c0:	e03f      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	fa92 f2a2 	rbit	r2, r2
 80063d4:	607a      	str	r2, [r7, #4]
  return result;
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	fab2 f282 	clz	r2, r2
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	40d3      	lsrs	r3, r2
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063e2:	5cd3      	ldrb	r3, [r2, r3]
 80063e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	220f      	movs	r2, #15
 80063f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	fa92 f2a2 	rbit	r2, r2
 80063f8:	60fa      	str	r2, [r7, #12]
  return result;
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	fab2 f282 	clz	r2, r2
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	40d3      	lsrs	r3, r2
 8006404:	4a15      	ldr	r2, [pc, #84]	; (800645c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006406:	5cd3      	ldrb	r3, [r2, r3]
 8006408:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006414:	4a0f      	ldr	r2, [pc, #60]	; (8006454 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	fbb2 f2f3 	udiv	r2, r2, r3
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
 8006424:	e007      	b.n	8006436 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006426:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	fbb2 f2f3 	udiv	r2, r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	623b      	str	r3, [r7, #32]
      break;
 800643a:	e002      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <HAL_RCC_GetSysClockFreq+0xc8>)
 800643e:	623b      	str	r3, [r7, #32]
      break;
 8006440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006442:	6a3b      	ldr	r3, [r7, #32]
}
 8006444:	4618      	mov	r0, r3
 8006446:	372c      	adds	r7, #44	; 0x2c
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40021000 	.word	0x40021000
 8006454:	007a1200 	.word	0x007a1200
 8006458:	0800c490 	.word	0x0800c490
 800645c:	0800c4a0 	.word	0x0800c4a0

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_RCC_GetHCLKFreq+0x14>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000007c 	.word	0x2000007c

08006478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800647e:	f7ff ffef 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8006482:	4601      	mov	r1, r0
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800648c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006490:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	fa92 f2a2 	rbit	r2, r2
 8006498:	603a      	str	r2, [r7, #0]
  return result;
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	fab2 f282 	clz	r2, r2
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	40d3      	lsrs	r3, r2
 80064a4:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80064a6:	5cd3      	ldrb	r3, [r2, r3]
 80064a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800c488 	.word	0x0800c488

080064bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064c2:	f7ff ffcd 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064c6:	4601      	mov	r1, r0
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80064d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	fa92 f2a2 	rbit	r2, r2
 80064dc:	603a      	str	r2, [r7, #0]
  return result;
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	fab2 f282 	clz	r2, r2
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	40d3      	lsrs	r3, r2
 80064e8:	4a04      	ldr	r2, [pc, #16]	; (80064fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80064ea:	5cd3      	ldrb	r3, [r2, r3]
 80064ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40021000 	.word	0x40021000
 80064fc:	0800c488 	.word	0x0800c488

08006500 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b092      	sub	sp, #72	; 0x48
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a62      	ldr	r2, [pc, #392]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d303      	bcc.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006520:	2172      	movs	r1, #114	; 0x72
 8006522:	4861      	ldr	r0, [pc, #388]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006524:	f7fb fc49 	bl	8001dba <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80f1 	beq.w	8006718 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d012      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006546:	d00d      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006550:	d008      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655a:	d003      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800655c:	2178      	movs	r1, #120	; 0x78
 800655e:	4852      	ldr	r0, [pc, #328]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006560:	f7fb fc2b 	bl	8001dba <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006564:	4b51      	ldr	r3, [pc, #324]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10e      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006570:	4b4e      	ldr	r3, [pc, #312]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4a4d      	ldr	r2, [pc, #308]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657a:	61d3      	str	r3, [r2, #28]
 800657c:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	4b48      	ldr	r3, [pc, #288]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d118      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659a:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a44      	ldr	r2, [pc, #272]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a6:	f7fb ff97 	bl	80024d8 <HAL_GetTick>
 80065aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ac:	e008      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ae:	f7fb ff93 	bl	80024d8 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b64      	cmp	r3, #100	; 0x64
 80065ba:	d901      	bls.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e38f      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 808a 	beq.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	f000 8082 	beq.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ee:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	fa93 f3a3 	rbit	r3, r3
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	461a      	mov	r2, r3
 8006618:	2301      	movs	r3, #1
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	fa93 f3a3 	rbit	r3, r3
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800662c:	fab3 f383 	clz	r3, r3
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	461a      	mov	r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006640:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d050      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fb ff42 	bl	80024d8 <HAL_GetTick>
 8006654:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006656:	e00a      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006658:	f7fb ff3e 	bl	80024d8 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	f241 3288 	movw	r2, #5000	; 0x1388
 8006666:	4293      	cmp	r3, r2
 8006668:	d901      	bls.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e338      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 800666e:	2302      	movs	r3, #2
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	fa93 f3a3 	rbit	r3, r3
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
 800667a:	2302      	movs	r3, #2
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	fa93 f3a3 	rbit	r3, r3
 8006684:	61fb      	str	r3, [r7, #28]
  return result;
 8006686:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006688:	fab3 f383 	clz	r3, r3
 800668c:	b2db      	uxtb	r3, r3
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d10d      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	e012      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80066a2:	bf00      	nop
 80066a4:	03f73400 	.word	0x03f73400
 80066a8:	0800c2ec 	.word	0x0800c2ec
 80066ac:	40021000 	.word	0x40021000
 80066b0:	40007000 	.word	0x40007000
 80066b4:	10908100 	.word	0x10908100
 80066b8:	2302      	movs	r3, #2
 80066ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	fa93 f3a3 	rbit	r3, r3
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	4b97      	ldr	r3, [pc, #604]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2202      	movs	r2, #2
 80066ca:	613a      	str	r2, [r7, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	fa92 f2a2 	rbit	r2, r2
 80066d2:	60fa      	str	r2, [r7, #12]
  return result;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	fab2 f282 	clz	r2, r2
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	f002 021f 	and.w	r2, r2, #31
 80066e6:	2101      	movs	r1, #1
 80066e8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0b2      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80066f2:	4b8c      	ldr	r3, [pc, #560]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4989      	ldr	r1, [pc, #548]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006700:	4313      	orrs	r3, r2
 8006702:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006708:	2b01      	cmp	r3, #1
 800670a:	d105      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670c:	4b85      	ldr	r3, [pc, #532]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	4a84      	ldr	r2, [pc, #528]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00f      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d00b      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d007      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d003      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006744:	21be      	movs	r1, #190	; 0xbe
 8006746:	4878      	ldr	r0, [pc, #480]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006748:	f7fb fb37 	bl	8001dba <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800674c:	4b75      	ldr	r3, [pc, #468]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f023 0203 	bic.w	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4972      	ldr	r1, [pc, #456]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800675a:	4313      	orrs	r3, r2
 800675c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d012      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677a:	d00d      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006784:	d008      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006790:	21c9      	movs	r1, #201	; 0xc9
 8006792:	4865      	ldr	r0, [pc, #404]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006794:	f7fb fb11 	bl	8001dba <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006798:	4b62      	ldr	r3, [pc, #392]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	495f      	ldr	r1, [pc, #380]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01f      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d0:	d008      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067da:	d003      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067dc:	21d5      	movs	r1, #213	; 0xd5
 80067de:	4852      	ldr	r0, [pc, #328]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80067e0:	f7fb faeb 	bl	8001dba <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067e4:	4b4f      	ldr	r3, [pc, #316]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	494c      	ldr	r1, [pc, #304]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d014      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b10      	cmp	r3, #16
 8006810:	d003      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006812:	21e0      	movs	r1, #224	; 0xe0
 8006814:	4844      	ldr	r0, [pc, #272]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006816:	f7fb fad0 	bl	8001dba <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800681a:	4b42      	ldr	r3, [pc, #264]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	493f      	ldr	r1, [pc, #252]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006828:	4313      	orrs	r3, r2
 800682a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006840:	d007      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800684a:	21ee      	movs	r1, #238	; 0xee
 800684c:	4836      	ldr	r0, [pc, #216]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800684e:	f7fb fab4 	bl	8001dba <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006852:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	4931      	ldr	r1, [pc, #196]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006860:	4313      	orrs	r3, r2
 8006862:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	2b20      	cmp	r3, #32
 800687e:	d004      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006880:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006884:	4828      	ldr	r0, [pc, #160]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006886:	f7fb fa98 	bl	8001dba <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800688a:	4b26      	ldr	r3, [pc, #152]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f023 0220 	bic.w	r2, r3, #32
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	4923      	ldr	r1, [pc, #140]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006898:	4313      	orrs	r3, r2
 800689a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d004      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068b8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80068bc:	481a      	ldr	r0, [pc, #104]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80068be:	f7fb fa7c 	bl	8001dba <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068c2:	4b18      	ldr	r3, [pc, #96]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	4915      	ldr	r1, [pc, #84]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d025      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f0:	d00e      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d009      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006904:	d004      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006906:	f240 1123 	movw	r1, #291	; 0x123
 800690a:	4807      	ldr	r0, [pc, #28]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800690c:	f7fb fa55 	bl	8001dba <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006910:	4b04      	ldr	r3, [pc, #16]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	4901      	ldr	r1, [pc, #4]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800691e:	4313      	orrs	r3, r2
 8006920:	630b      	str	r3, [r1, #48]	; 0x30
 8006922:	e003      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006924:	40021000 	.word	0x40021000
 8006928:	0800c2ec 	.word	0x0800c2ec
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	d020      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d013      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006948:	d00e      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006952:	d009      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800695c:	d004      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800695e:	f240 112d 	movw	r1, #301	; 0x12d
 8006962:	48a1      	ldr	r0, [pc, #644]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006964:	f7fb fa29 	bl	8001dba <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006968:	4ba0      	ldr	r3, [pc, #640]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	499d      	ldr	r1, [pc, #628]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006976:	4313      	orrs	r3, r2
 8006978:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006982:	2b00      	cmp	r3, #0
 8006984:	d016      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006996:	d004      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8006998:	f240 113d 	movw	r1, #317	; 0x13d
 800699c:	4892      	ldr	r0, [pc, #584]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800699e:	f7fb fa0c 	bl	8001dba <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069a2:	4b92      	ldr	r3, [pc, #584]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	498f      	ldr	r1, [pc, #572]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d04d      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d040      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d0:	d03b      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80069da:	d036      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80069e4:	d031      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80069ee:	d02c      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80069f8:	d027      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8006a02:	d022      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006a0c:	d01d      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a12:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006a16:	d018      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006a20:	d013      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006a2a:	d00e      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006a3e:	d004      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a40:	f240 115d 	movw	r1, #349	; 0x15d
 8006a44:	4868      	ldr	r0, [pc, #416]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006a46:	f7fb f9b8 	bl	8001dba <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a4a:	4b68      	ldr	r3, [pc, #416]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	4965      	ldr	r1, [pc, #404]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d04d      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d040      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a78:	d03b      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8006a82:	d036      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8006a8c:	d031      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8006a96:	d02c      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006aa0:	d027      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8006aaa:	d022      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8006ab4:	d01d      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8006abe:	d018      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ac8:	d013      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8006ad2:	d00e      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8006adc:	d009      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006ae6:	d004      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ae8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006aec:	483e      	ldr	r0, [pc, #248]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006aee:	f7fb f964 	bl	8001dba <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006af2:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	493b      	ldr	r1, [pc, #236]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d016      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b20:	d004      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b22:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006b26:	4830      	ldr	r0, [pc, #192]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b28:	f7fb f947 	bl	8001dba <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b2c:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b38:	492c      	ldr	r1, [pc, #176]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d004      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b5c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006b60:	4821      	ldr	r0, [pc, #132]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b62:	f7fb f92a 	bl	8001dba <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b66:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	491e      	ldr	r1, [pc, #120]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b94:	d004      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006b96:	f240 11f7 	movw	r1, #503	; 0x1f7
 8006b9a:	4813      	ldr	r0, [pc, #76]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b9c:	f7fb f90d 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006ba0:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	490f      	ldr	r1, [pc, #60]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01b      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bce:	d004      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006bd0:	f240 2101 	movw	r1, #513	; 0x201
 8006bd4:	4804      	ldr	r0, [pc, #16]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006bd6:	f7fb f8f0 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006bda:	4b04      	ldr	r3, [pc, #16]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	e003      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006be8:	0800c2ec 	.word	0x0800c2ec
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	493d      	ldr	r1, [pc, #244]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d009      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c14:	f240 210b 	movw	r1, #523	; 0x20b
 8006c18:	4834      	ldr	r0, [pc, #208]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c1a:	f7fb f8ce 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c1e:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	492f      	ldr	r1, [pc, #188]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c4e:	f240 2115 	movw	r1, #533	; 0x215
 8006c52:	4826      	ldr	r0, [pc, #152]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c54:	f7fb f8b1 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	4920      	ldr	r1, [pc, #128]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d004      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c88:	f240 211f 	movw	r1, #543	; 0x21f
 8006c8c:	4817      	ldr	r0, [pc, #92]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c8e:	f7fb f894 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	4912      	ldr	r1, [pc, #72]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d016      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cc2:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8006cc6:	4809      	ldr	r0, [pc, #36]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006cc8:	f7fb f877 	bl	8001dba <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	4903      	ldr	r1, [pc, #12]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3748      	adds	r7, #72	; 0x48
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	0800c2ec 	.word	0x0800c2ec

08006cf0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e0e1      	b.n	8006ec6 <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a72      	ldr	r2, [pc, #456]	; (8006ed0 <HAL_RTC_Init+0x1e0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_RTC_Init+0x26>
 8006d0c:	f240 1121 	movw	r1, #289	; 0x121
 8006d10:	4870      	ldr	r0, [pc, #448]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d12:	f7fb f852 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d008      	beq.n	8006d30 <HAL_RTC_Init+0x40>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <HAL_RTC_Init+0x40>
 8006d26:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006d2a:	486a      	ldr	r0, [pc, #424]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d2c:	f7fb f845 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b7f      	cmp	r3, #127	; 0x7f
 8006d36:	d904      	bls.n	8006d42 <HAL_RTC_Init+0x52>
 8006d38:	f240 1123 	movw	r1, #291	; 0x123
 8006d3c:	4865      	ldr	r0, [pc, #404]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d3e:	f7fb f83c 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4a:	d304      	bcc.n	8006d56 <HAL_RTC_Init+0x66>
 8006d4c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8006d50:	4860      	ldr	r0, [pc, #384]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d52:	f7fb f832 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d013      	beq.n	8006d86 <HAL_RTC_Init+0x96>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d66:	d00e      	beq.n	8006d86 <HAL_RTC_Init+0x96>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d70:	d009      	beq.n	8006d86 <HAL_RTC_Init+0x96>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d7a:	d004      	beq.n	8006d86 <HAL_RTC_Init+0x96>
 8006d7c:	f240 1125 	movw	r1, #293	; 0x125
 8006d80:	4854      	ldr	r0, [pc, #336]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d82:	f7fb f81a 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_RTC_Init+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d96:	d004      	beq.n	8006da2 <HAL_RTC_Init+0xb2>
 8006d98:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006d9c:	484d      	ldr	r0, [pc, #308]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006d9e:	f7fb f80c 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_RTC_Init+0xce>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006db2:	d004      	beq.n	8006dbe <HAL_RTC_Init+0xce>
 8006db4:	f240 1127 	movw	r1, #295	; 0x127
 8006db8:	4846      	ldr	r0, [pc, #280]	; (8006ed4 <HAL_RTC_Init+0x1e4>)
 8006dba:	f7fa fffe 	bl	8001dba <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7f5b      	ldrb	r3, [r3, #29]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fb f844 	bl	8001e5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	22ca      	movs	r2, #202	; 0xca
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2253      	movs	r2, #83	; 0x53
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ffdc 	bl	8007da8 <RTC_EnterInitMode>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	22ff      	movs	r2, #255	; 0xff
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2204      	movs	r2, #4
 8006e02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e05e      	b.n	8006ec6 <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6899      	ldr	r1, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68d2      	ldr	r2, [r2, #12]
 8006e42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6919      	ldr	r1, [r3, #16]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	041a      	lsls	r2, r3, #16
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10e      	bne.n	8006e94 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 ff6e 	bl	8007d58 <HAL_RTC_WaitForSynchro>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	22ff      	movs	r2, #255	; 0xff
 8006e88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e018      	b.n	8006ec6 <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	22ff      	movs	r2, #255	; 0xff
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
  }
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40002800 	.word	0x40002800
 8006ed4:	0800c348 	.word	0x0800c348

08006ed8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <HAL_RTC_SetTime+0x26>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d004      	beq.n	8006efe <HAL_RTC_SetTime+0x26>
 8006ef4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ef8:	48a4      	ldr	r0, [pc, #656]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006efa:	f7fa ff5e 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f06:	d00d      	beq.n	8006f24 <HAL_RTC_SetTime+0x4c>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d008      	beq.n	8006f24 <HAL_RTC_SetTime+0x4c>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <HAL_RTC_SetTime+0x4c>
 8006f1a:	f44f 7144 	mov.w	r1, #784	; 0x310
 8006f1e:	489b      	ldr	r0, [pc, #620]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006f20:	f7fa ff4b 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <HAL_RTC_SetTime+0x68>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f34:	d004      	beq.n	8006f40 <HAL_RTC_SetTime+0x68>
 8006f36:	f240 3111 	movw	r1, #785	; 0x311
 8006f3a:	4894      	ldr	r0, [pc, #592]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006f3c:	f7fa ff3d 	bl	8001dba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	7f1b      	ldrb	r3, [r3, #28]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_RTC_SetTime+0x74>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e12c      	b.n	80071a6 <HAL_RTC_SetTime+0x2ce>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d15c      	bne.n	8007018 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_RTC_SetTime+0xa4>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d904      	bls.n	8006f86 <HAL_RTC_SetTime+0xae>
 8006f7c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8006f80:	4882      	ldr	r0, [pc, #520]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006f82:	f7fa ff1a 	bl	8001dba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d015      	beq.n	8006fba <HAL_RTC_SetTime+0xe2>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d011      	beq.n	8006fba <HAL_RTC_SetTime+0xe2>
 8006f96:	f240 311d 	movw	r1, #797	; 0x31d
 8006f9a:	487c      	ldr	r0, [pc, #496]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006f9c:	f7fa ff0d 	bl	8001dba <assert_failed>
 8006fa0:	e00b      	b.n	8006fba <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b17      	cmp	r3, #23
 8006fae:	d904      	bls.n	8006fba <HAL_RTC_SetTime+0xe2>
 8006fb0:	f240 3122 	movw	r1, #802	; 0x322
 8006fb4:	4875      	ldr	r0, [pc, #468]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006fb6:	f7fa ff00 	bl	8001dba <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b3b      	cmp	r3, #59	; 0x3b
 8006fc0:	d904      	bls.n	8006fcc <HAL_RTC_SetTime+0xf4>
 8006fc2:	f44f 7149 	mov.w	r1, #804	; 0x324
 8006fc6:	4871      	ldr	r0, [pc, #452]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006fc8:	f7fa fef7 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	789b      	ldrb	r3, [r3, #2]
 8006fd0:	2b3b      	cmp	r3, #59	; 0x3b
 8006fd2:	d904      	bls.n	8006fde <HAL_RTC_SetTime+0x106>
 8006fd4:	f240 3125 	movw	r1, #805	; 0x325
 8006fd8:	486c      	ldr	r0, [pc, #432]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8006fda:	f7fa feee 	bl	8001dba <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 ff0c 	bl	8007e00 <RTC_ByteToBcd2>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 ff05 	bl	8007e00 <RTC_ByteToBcd2>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006ffa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	789b      	ldrb	r3, [r3, #2]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fefd 	bl	8007e00 <RTC_ByteToBcd2>
 8007006:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007008:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	78db      	ldrb	r3, [r3, #3]
 8007010:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e062      	b.n	80070de <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d022      	beq.n	800706c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 ff06 	bl	8007e3c <RTC_Bcd2ToByte>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_RTC_SetTime+0x16e>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fefe 	bl	8007e3c <RTC_Bcd2ToByte>
 8007040:	4603      	mov	r3, r0
 8007042:	2b0c      	cmp	r3, #12
 8007044:	d904      	bls.n	8007050 <HAL_RTC_SetTime+0x178>
 8007046:	f44f 714c 	mov.w	r1, #816	; 0x330
 800704a:	4850      	ldr	r0, [pc, #320]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 800704c:	f7fa feb5 	bl	8001dba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d019      	beq.n	800708c <HAL_RTC_SetTime+0x1b4>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	78db      	ldrb	r3, [r3, #3]
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d015      	beq.n	800708c <HAL_RTC_SetTime+0x1b4>
 8007060:	f240 3131 	movw	r1, #817	; 0x331
 8007064:	4849      	ldr	r0, [pc, #292]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8007066:	f7fa fea8 	bl	8001dba <assert_failed>
 800706a:	e00f      	b.n	800708c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fee0 	bl	8007e3c <RTC_Bcd2ToByte>
 800707c:	4603      	mov	r3, r0
 800707e:	2b17      	cmp	r3, #23
 8007080:	d904      	bls.n	800708c <HAL_RTC_SetTime+0x1b4>
 8007082:	f240 3136 	movw	r1, #822	; 0x336
 8007086:	4841      	ldr	r0, [pc, #260]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 8007088:	f7fa fe97 	bl	8001dba <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fed3 	bl	8007e3c <RTC_Bcd2ToByte>
 8007096:	4603      	mov	r3, r0
 8007098:	2b3b      	cmp	r3, #59	; 0x3b
 800709a:	d904      	bls.n	80070a6 <HAL_RTC_SetTime+0x1ce>
 800709c:	f44f 714e 	mov.w	r1, #824	; 0x338
 80070a0:	483a      	ldr	r0, [pc, #232]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 80070a2:	f7fa fe8a 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fec6 	bl	8007e3c <RTC_Bcd2ToByte>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b3b      	cmp	r3, #59	; 0x3b
 80070b4:	d904      	bls.n	80070c0 <HAL_RTC_SetTime+0x1e8>
 80070b6:	f240 3139 	movw	r1, #825	; 0x339
 80070ba:	4834      	ldr	r0, [pc, #208]	; (800718c <HAL_RTC_SetTime+0x2b4>)
 80070bc:	f7fa fe7d 	bl	8001dba <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	78db      	ldrb	r3, [r3, #3]
 80070d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	22ca      	movs	r2, #202	; 0xca
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2253      	movs	r2, #83	; 0x53
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fe5a 	bl	8007da8 <RTC_EnterInitMode>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	22ff      	movs	r2, #255	; 0xff
 8007100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2204      	movs	r2, #4
 8007106:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e049      	b.n	80071a6 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800711c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007120:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007130:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6899      	ldr	r1, [r3, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007158:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d113      	bne.n	8007190 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fdf5 	bl	8007d58 <HAL_RTC_WaitForSynchro>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2204      	movs	r2, #4
 8007180:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e00c      	b.n	80071a6 <HAL_RTC_SetTime+0x2ce>
 800718c:	0800c348 	.word	0x0800c348
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	22ff      	movs	r2, #255	; 0xff
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}
 80071ae:	bf00      	nop

080071b0 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <HAL_RTC_GetTime+0x26>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d004      	beq.n	80071d6 <HAL_RTC_GetTime+0x26>
 80071cc:	f44f 7164 	mov.w	r1, #912	; 0x390
 80071d0:	482c      	ldr	r0, [pc, #176]	; (8007284 <HAL_RTC_GetTime+0xd4>)
 80071d2:	f7fa fdf2 	bl	8001dba <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007208:	b2da      	uxtb	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007218:	b2da      	uxtb	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d11a      	bne.n	8007278 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fdf8 	bl	8007e3c <RTC_Bcd2ToByte>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fdef 	bl	8007e3c <RTC_Bcd2ToByte>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fde6 	bl	8007e3c <RTC_Bcd2ToByte>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	0800c348 	.word	0x0800c348

08007288 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <HAL_RTC_SetDate+0x26>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d004      	beq.n	80072ae <HAL_RTC_SetDate+0x26>
 80072a4:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80072a8:	488e      	ldr	r0, [pc, #568]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 80072aa:	f7fa fd86 	bl	8001dba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	7f1b      	ldrb	r3, [r3, #28]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_RTC_SetDate+0x32>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e10f      	b.n	80074da <HAL_RTC_SetDate+0x252>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2202      	movs	r2, #2
 80072c4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10e      	bne.n	80072ea <HAL_RTC_SetDate+0x62>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	f023 0310 	bic.w	r3, r3, #16
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	330a      	adds	r3, #10
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d01c      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d018      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d014      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b04      	cmp	r3, #4
 8007308:	d010      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b05      	cmp	r3, #5
 8007310:	d00c      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b06      	cmp	r3, #6
 8007318:	d008      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b07      	cmp	r3, #7
 8007320:	d004      	beq.n	800732c <HAL_RTC_SetDate+0xa4>
 8007322:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8007326:	486f      	ldr	r0, [pc, #444]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 8007328:	f7fa fd47 	bl	8001dba <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d13f      	bne.n	80073b2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	78db      	ldrb	r3, [r3, #3]
 8007336:	2b63      	cmp	r3, #99	; 0x63
 8007338:	d904      	bls.n	8007344 <HAL_RTC_SetDate+0xbc>
 800733a:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 800733e:	4869      	ldr	r0, [pc, #420]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 8007340:	f7fa fd3b 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_RTC_SetDate+0xcc>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b0c      	cmp	r3, #12
 8007352:	d904      	bls.n	800735e <HAL_RTC_SetDate+0xd6>
 8007354:	f240 31cd 	movw	r1, #973	; 0x3cd
 8007358:	4862      	ldr	r0, [pc, #392]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 800735a:	f7fa fd2e 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	789b      	ldrb	r3, [r3, #2]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_RTC_SetDate+0xe6>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	789b      	ldrb	r3, [r3, #2]
 800736a:	2b1f      	cmp	r3, #31
 800736c:	d904      	bls.n	8007378 <HAL_RTC_SetDate+0xf0>
 800736e:	f240 31ce 	movw	r1, #974	; 0x3ce
 8007372:	485c      	ldr	r0, [pc, #368]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 8007374:	f7fa fd21 	bl	8001dba <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fd3f 	bl	8007e00 <RTC_ByteToBcd2>
 8007382:	4603      	mov	r3, r0
 8007384:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fd38 	bl	8007e00 <RTC_ByteToBcd2>
 8007390:	4603      	mov	r3, r0
 8007392:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007394:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	789b      	ldrb	r3, [r3, #2]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fd30 	bl	8007e00 <RTC_ByteToBcd2>
 80073a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80073a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e045      	b.n	800743e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	78db      	ldrb	r3, [r3, #3]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fd40 	bl	8007e3c <RTC_Bcd2ToByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b63      	cmp	r3, #99	; 0x63
 80073c0:	d904      	bls.n	80073cc <HAL_RTC_SetDate+0x144>
 80073c2:	f240 31d7 	movw	r1, #983	; 0x3d7
 80073c6:	4847      	ldr	r0, [pc, #284]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 80073c8:	f7fa fcf7 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fd33 	bl	8007e3c <RTC_Bcd2ToByte>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <HAL_RTC_SetDate+0x164>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fd2b 	bl	8007e3c <RTC_Bcd2ToByte>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d904      	bls.n	80073f6 <HAL_RTC_SetDate+0x16e>
 80073ec:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 80073f0:	483c      	ldr	r0, [pc, #240]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 80073f2:	f7fa fce2 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	789b      	ldrb	r3, [r3, #2]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fd1e 	bl	8007e3c <RTC_Bcd2ToByte>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_RTC_SetDate+0x18e>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	789b      	ldrb	r3, [r3, #2]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fd16 	bl	8007e3c <RTC_Bcd2ToByte>
 8007410:	4603      	mov	r3, r0
 8007412:	2b1f      	cmp	r3, #31
 8007414:	d904      	bls.n	8007420 <HAL_RTC_SetDate+0x198>
 8007416:	f240 31d9 	movw	r1, #985	; 0x3d9
 800741a:	4832      	ldr	r0, [pc, #200]	; (80074e4 <HAL_RTC_SetDate+0x25c>)
 800741c:	f7fa fccd 	bl	8001dba <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	78db      	ldrb	r3, [r3, #3]
 8007424:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800742c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007432:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	22ca      	movs	r2, #202	; 0xca
 8007444:	625a      	str	r2, [r3, #36]	; 0x24
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2253      	movs	r2, #83	; 0x53
 800744c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fcaa 	bl	8007da8 <RTC_EnterInitMode>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00b      	beq.n	8007472 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	22ff      	movs	r2, #255	; 0xff
 8007460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2204      	movs	r2, #4
 8007466:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e033      	b.n	80074da <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800747c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007480:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007490:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fc59 	bl	8007d58 <HAL_RTC_WaitForSynchro>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	22ff      	movs	r2, #255	; 0xff
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2204      	movs	r2, #4
 80074b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e00a      	b.n	80074da <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd90      	pop	{r4, r7, pc}
 80074e2:	bf00      	nop
 80074e4:	0800c348 	.word	0x0800c348

080074e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_RTC_GetDate+0x26>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d004      	beq.n	800750e <HAL_RTC_GetDate+0x26>
 8007504:	f240 4126 	movw	r1, #1062	; 0x426
 8007508:	4824      	ldr	r0, [pc, #144]	; (800759c <HAL_RTC_GetDate+0xb4>)
 800750a:	f7fa fc56 	bl	8001dba <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007518:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800751c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	b2da      	uxtb	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	0b5b      	lsrs	r3, r3, #13
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d11a      	bne.n	8007592 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	78db      	ldrb	r3, [r3, #3]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fc6b 	bl	8007e3c <RTC_Bcd2ToByte>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fc62 	bl	8007e3c <RTC_Bcd2ToByte>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	789b      	ldrb	r3, [r3, #2]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fc59 	bl	8007e3c <RTC_Bcd2ToByte>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	0800c348 	.word	0x0800c348

080075a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075a0:	b590      	push	{r4, r7, lr}
 80075a2:	b089      	sub	sp, #36	; 0x24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_RTC_SetAlarm_IT+0x2e>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d004      	beq.n	80075ce <HAL_RTC_SetAlarm_IT+0x2e>
 80075c4:	f240 5153 	movw	r1, #1363	; 0x553
 80075c8:	48a1      	ldr	r0, [pc, #644]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075ca:	f7fa fbf6 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d6:	d009      	beq.n	80075ec <HAL_RTC_SetAlarm_IT+0x4c>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e0:	d004      	beq.n	80075ec <HAL_RTC_SetAlarm_IT+0x4c>
 80075e2:	f240 5154 	movw	r1, #1364	; 0x554
 80075e6:	489a      	ldr	r0, [pc, #616]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075e8:	f7fa fbe7 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <HAL_RTC_SetAlarm_IT+0x62>
 80075f8:	f240 5155 	movw	r1, #1365	; 0x555
 80075fc:	4894      	ldr	r0, [pc, #592]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075fe:	f7fa fbdc 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <HAL_RTC_SetAlarm_IT+0x7e>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007612:	d004      	beq.n	800761e <HAL_RTC_SetAlarm_IT+0x7e>
 8007614:	f240 5156 	movw	r1, #1366	; 0x556
 8007618:	488d      	ldr	r0, [pc, #564]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800761a:	f7fa fbce 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007626:	d304      	bcc.n	8007632 <HAL_RTC_SetAlarm_IT+0x92>
 8007628:	f240 5157 	movw	r1, #1367	; 0x557
 800762c:	4888      	ldr	r0, [pc, #544]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800762e:	f7fa fbc4 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d04f      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007642:	d04a      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800764c:	d045      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007656:	d040      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007660:	d03b      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800766a:	d036      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007674:	d031      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800767e:	d02c      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007688:	d027      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8007692:	d022      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800769c:	d01d      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80076a6:	d018      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076b0:	d013      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80076ba:	d00e      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80076c4:	d009      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076ce:	d004      	beq.n	80076da <HAL_RTC_SetAlarm_IT+0x13a>
 80076d0:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 80076d4:	485e      	ldr	r0, [pc, #376]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80076d6:	f7fa fb70 	bl	8001dba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7f1b      	ldrb	r3, [r3, #28]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_RTC_SetAlarm_IT+0x146>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e242      	b.n	8007b6c <HAL_RTC_SetAlarm_IT+0x5cc>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2202      	movs	r2, #2
 80076f0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 80ad 	bne.w	8007854 <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01a      	beq.n	800773e <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_RTC_SetAlarm_IT+0x178>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b0c      	cmp	r3, #12
 8007716:	d904      	bls.n	8007722 <HAL_RTC_SetAlarm_IT+0x182>
 8007718:	f240 5163 	movw	r1, #1379	; 0x563
 800771c:	484c      	ldr	r0, [pc, #304]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800771e:	f7fa fb4c 	bl	8001dba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d015      	beq.n	8007756 <HAL_RTC_SetAlarm_IT+0x1b6>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	78db      	ldrb	r3, [r3, #3]
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d011      	beq.n	8007756 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007732:	f240 5164 	movw	r1, #1380	; 0x564
 8007736:	4846      	ldr	r0, [pc, #280]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007738:	f7fa fb3f 	bl	8001dba <assert_failed>
 800773c:	e00b      	b.n	8007756 <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b17      	cmp	r3, #23
 800774a:	d904      	bls.n	8007756 <HAL_RTC_SetAlarm_IT+0x1b6>
 800774c:	f240 5169 	movw	r1, #1385	; 0x569
 8007750:	483f      	ldr	r0, [pc, #252]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007752:	f7fa fb32 	bl	8001dba <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b3b      	cmp	r3, #59	; 0x3b
 800775c:	d904      	bls.n	8007768 <HAL_RTC_SetAlarm_IT+0x1c8>
 800775e:	f240 516b 	movw	r1, #1387	; 0x56b
 8007762:	483b      	ldr	r0, [pc, #236]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007764:	f7fa fb29 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	789b      	ldrb	r3, [r3, #2]
 800776c:	2b3b      	cmp	r3, #59	; 0x3b
 800776e:	d904      	bls.n	800777a <HAL_RTC_SetAlarm_IT+0x1da>
 8007770:	f240 516c 	movw	r1, #1388	; 0x56c
 8007774:	4836      	ldr	r0, [pc, #216]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007776:	f7fa fb20 	bl	8001dba <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10f      	bne.n	80077a2 <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <HAL_RTC_SetAlarm_IT+0x1f6>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007792:	2b1f      	cmp	r3, #31
 8007794:	d92d      	bls.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 8007796:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 800779a:	482d      	ldr	r0, [pc, #180]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800779c:	f7fa fb0d 	bl	8001dba <assert_failed>
 80077a0:	e027      	b.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d022      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d01d      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d018      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d013      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	d00e      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077da:	2b06      	cmp	r3, #6
 80077dc:	d009      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	d004      	beq.n	80077f2 <HAL_RTC_SetAlarm_IT+0x252>
 80077e8:	f240 5174 	movw	r1, #1396	; 0x574
 80077ec:	4818      	ldr	r0, [pc, #96]	; (8007850 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80077ee:	f7fa fae4 	bl	8001dba <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fb02 	bl	8007e00 <RTC_ByteToBcd2>
 80077fc:	4603      	mov	r3, r0
 80077fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fafb 	bl	8007e00 <RTC_ByteToBcd2>
 800780a:	4603      	mov	r3, r0
 800780c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800780e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	789b      	ldrb	r3, [r3, #2]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 faf3 	bl	8007e00 <RTC_ByteToBcd2>
 800781a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800781c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	78db      	ldrb	r3, [r3, #3]
 8007824:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007826:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fae5 	bl	8007e00 <RTC_ByteToBcd2>
 8007836:	4603      	mov	r3, r0
 8007838:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800783a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007842:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007848:	4313      	orrs	r3, r2
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	e0d0      	b.n	80079f0 <HAL_RTC_SetAlarm_IT+0x450>
 800784e:	bf00      	nop
 8007850:	0800c348 	.word	0x0800c348
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d022      	beq.n	80078a8 <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fae8 	bl	8007e3c <RTC_Bcd2ToByte>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_RTC_SetAlarm_IT+0x2e2>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fae0 	bl	8007e3c <RTC_Bcd2ToByte>
 800787c:	4603      	mov	r3, r0
 800787e:	2b0c      	cmp	r3, #12
 8007880:	d904      	bls.n	800788c <HAL_RTC_SetAlarm_IT+0x2ec>
 8007882:	f240 5182 	movw	r1, #1410	; 0x582
 8007886:	489d      	ldr	r0, [pc, #628]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007888:	f7fa fa97 	bl	8001dba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	78db      	ldrb	r3, [r3, #3]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <HAL_RTC_SetAlarm_IT+0x328>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	78db      	ldrb	r3, [r3, #3]
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d015      	beq.n	80078c8 <HAL_RTC_SetAlarm_IT+0x328>
 800789c:	f240 5183 	movw	r1, #1411	; 0x583
 80078a0:	4896      	ldr	r0, [pc, #600]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 80078a2:	f7fa fa8a 	bl	8001dba <assert_failed>
 80078a6:	e00f      	b.n	80078c8 <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fac2 	bl	8007e3c <RTC_Bcd2ToByte>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b17      	cmp	r3, #23
 80078bc:	d904      	bls.n	80078c8 <HAL_RTC_SetAlarm_IT+0x328>
 80078be:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 80078c2:	488e      	ldr	r0, [pc, #568]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 80078c4:	f7fa fa79 	bl	8001dba <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fab5 	bl	8007e3c <RTC_Bcd2ToByte>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b3b      	cmp	r3, #59	; 0x3b
 80078d6:	d904      	bls.n	80078e2 <HAL_RTC_SetAlarm_IT+0x342>
 80078d8:	f240 518b 	movw	r1, #1419	; 0x58b
 80078dc:	4887      	ldr	r0, [pc, #540]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 80078de:	f7fa fa6c 	bl	8001dba <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 faa8 	bl	8007e3c <RTC_Bcd2ToByte>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b3b      	cmp	r3, #59	; 0x3b
 80078f0:	d904      	bls.n	80078fc <HAL_RTC_SetAlarm_IT+0x35c>
 80078f2:	f240 518c 	movw	r1, #1420	; 0x58c
 80078f6:	4881      	ldr	r0, [pc, #516]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 80078f8:	f7fa fa5f 	bl	8001dba <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d117      	bne.n	8007934 <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fa96 	bl	8007e3c <RTC_Bcd2ToByte>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <HAL_RTC_SetAlarm_IT+0x388>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fa8d 	bl	8007e3c <RTC_Bcd2ToByte>
 8007922:	4603      	mov	r3, r0
 8007924:	2b1f      	cmp	r3, #31
 8007926:	d949      	bls.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 8007928:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800792c:	4873      	ldr	r0, [pc, #460]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 800792e:	f7fa fa44 	bl	8001dba <assert_failed>
 8007932:	e043      	b.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fa7e 	bl	8007e3c <RTC_Bcd2ToByte>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d03a      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fa75 	bl	8007e3c <RTC_Bcd2ToByte>
 8007952:	4603      	mov	r3, r0
 8007954:	2b02      	cmp	r3, #2
 8007956:	d031      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fa6c 	bl	8007e3c <RTC_Bcd2ToByte>
 8007964:	4603      	mov	r3, r0
 8007966:	2b03      	cmp	r3, #3
 8007968:	d028      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fa63 	bl	8007e3c <RTC_Bcd2ToByte>
 8007976:	4603      	mov	r3, r0
 8007978:	2b04      	cmp	r3, #4
 800797a:	d01f      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fa5a 	bl	8007e3c <RTC_Bcd2ToByte>
 8007988:	4603      	mov	r3, r0
 800798a:	2b05      	cmp	r3, #5
 800798c:	d016      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fa51 	bl	8007e3c <RTC_Bcd2ToByte>
 800799a:	4603      	mov	r3, r0
 800799c:	2b06      	cmp	r3, #6
 800799e:	d00d      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa48 	bl	8007e3c <RTC_Bcd2ToByte>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b07      	cmp	r3, #7
 80079b0:	d004      	beq.n	80079bc <HAL_RTC_SetAlarm_IT+0x41c>
 80079b2:	f240 5194 	movw	r1, #1428	; 0x594
 80079b6:	4851      	ldr	r0, [pc, #324]	; (8007afc <HAL_RTC_SetAlarm_IT+0x55c>)
 80079b8:	f7fa f9ff 	bl	8001dba <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079c8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	22ca      	movs	r2, #202	; 0xca
 8007a02:	625a      	str	r2, [r3, #36]	; 0x24
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2253      	movs	r2, #83	; 0x53
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a14:	d148      	bne.n	8007aa8 <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a24:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007a36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a38:	f7fa fd4e 	bl	80024d8 <HAL_GetTick>
 8007a3c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a3e:	e013      	b.n	8007a68 <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a40:	f7fa fd4a 	bl	80024d8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a4e:	d90b      	bls.n	8007a68 <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e081      	b.n	8007b6c <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0e4      	beq.n	8007a40 <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a94:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa4:	609a      	str	r2, [r3, #8]
 8007aa6:	e04a      	b.n	8007b3e <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ab6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007ac8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007aca:	f7fa fd05 	bl	80024d8 <HAL_GetTick>
 8007ace:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ad0:	e016      	b.n	8007b00 <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ad2:	f7fa fd01 	bl	80024d8 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae0:	d90e      	bls.n	8007b00 <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	22ff      	movs	r2, #255	; 0xff
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2203      	movs	r2, #3
 8007aee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e038      	b.n	8007b6c <HAL_RTC_SetAlarm_IT+0x5cc>
 8007afa:	bf00      	nop
 8007afc:	0800c348 	.word	0x0800c348
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0e1      	beq.n	8007ad2 <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b3c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a0c      	ldr	r2, [pc, #48]	; (8007b74 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b48:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	22ff      	movs	r2, #255	; 0xff
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3724      	adds	r7, #36	; 0x24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}
 8007b74:	40010400 	.word	0x40010400

08007b78 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <HAL_RTC_GetAlarm+0x2c>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d004      	beq.n	8007ba4 <HAL_RTC_GetAlarm+0x2c>
 8007b9a:	f240 6166 	movw	r1, #1638	; 0x666
 8007b9e:	484a      	ldr	r0, [pc, #296]	; (8007cc8 <HAL_RTC_GetAlarm+0x150>)
 8007ba0:	f7fa f90b 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_ALARM(Alarm));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007baa:	d008      	beq.n	8007bbe <HAL_RTC_GetAlarm+0x46>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb2:	d004      	beq.n	8007bbe <HAL_RTC_GetAlarm+0x46>
 8007bb4:	f240 6167 	movw	r1, #1639	; 0x667
 8007bb8:	4843      	ldr	r0, [pc, #268]	; (8007cc8 <HAL_RTC_GetAlarm+0x150>)
 8007bba:	f7fa f8fe 	bl	8001dba <assert_failed>

  if (Alarm == RTC_ALARM_A)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc4:	d10e      	bne.n	8007be4 <HAL_RTC_GetAlarm+0x6c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	e00d      	b.n	8007c00 <HAL_RTC_GetAlarm+0x88>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bfe:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	0c1b      	lsrs	r3, r3, #16
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	0e1b      	lsrs	r3, r3, #24
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d125      	bne.n	8007cbc <HAL_RTC_GetAlarm+0x144>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f8e1 	bl	8007e3c <RTC_Bcd2ToByte>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f8d8 	bl	8007e3c <RTC_Bcd2ToByte>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	789b      	ldrb	r3, [r3, #2]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 f8cf 	bl	8007e3c <RTC_Bcd2ToByte>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 f8c5 	bl	8007e3c <RTC_Bcd2ToByte>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	0800c348 	.word	0x0800c348

08007ccc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d012      	beq.n	8007d08 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 fc23 	bl	800153c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d012      	beq.n	8007d3c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9f9 	bl	800811c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007d3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007d3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d42:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	775a      	strb	r2, [r3, #29]
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40010400 	.word	0x40010400

08007d58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d74:	f7fa fbb0 	bl	80024d8 <HAL_GetTick>
 8007d78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d7a:	e009      	b.n	8007d90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d7c:	f7fa fbac 	bl	80024d8 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d8a:	d901      	bls.n	8007d90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e007      	b.n	8007da0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0ee      	beq.n	8007d7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d119      	bne.n	8007df6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007dcc:	f7fa fb84 	bl	80024d8 <HAL_GetTick>
 8007dd0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dd2:	e009      	b.n	8007de8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dd4:	f7fa fb80 	bl	80024d8 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007de2:	d901      	bls.n	8007de8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e007      	b.n	8007df8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ee      	beq.n	8007dd4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007e0e:	e005      	b.n	8007e1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	3b0a      	subs	r3, #10
 8007e1a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d8f6      	bhi.n	8007e10 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b2db      	uxtb	r3, r3
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	091b      	lsrs	r3, r3, #4
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	b2db      	uxtb	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d010      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d00d      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d00a      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d007      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	d004      	beq.n	8007eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eac:	f44f 7158 	mov.w	r1, #864	; 0x360
 8007eb0:	485a      	ldr	r0, [pc, #360]	; (800801c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007eb2:	f7f9 ff82 	bl	8001dba <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ebc:	d304      	bcc.n	8007ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8007ebe:	f240 3161 	movw	r1, #865	; 0x361
 8007ec2:	4856      	ldr	r0, [pc, #344]	; (800801c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007ec4:	f7f9 ff79 	bl	8001dba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	7f1b      	ldrb	r3, [r3, #28]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e09e      	b.n	8008012 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	22ca      	movs	r2, #202	; 0xca
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2253      	movs	r2, #83	; 0x53
 8007eee:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01e      	beq.n	8007f3c <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8007efe:	f7fa faeb 	bl	80024d8 <HAL_GetTick>
 8007f02:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f04:	e013      	b.n	8007f2e <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f06:	f7fa fae7 	bl	80024d8 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f14:	d90b      	bls.n	8007f2e <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	22ff      	movs	r2, #255	; 0xff
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2203      	movs	r2, #3
 8007f22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e071      	b.n	8008012 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e4      	bne.n	8007f06 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007f5c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f5e:	f7fa fabb 	bl	80024d8 <HAL_GetTick>
 8007f62:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f64:	e013      	b.n	8007f8e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f66:	f7fa fab7 	bl	80024d8 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f74:	d90b      	bls.n	8007f8e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	22ff      	movs	r2, #255	; 0xff
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2203      	movs	r2, #3
 8007f82:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e041      	b.n	8008012 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0e4      	beq.n	8007f66 <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0207 	bic.w	r2, r2, #7
 8007fb2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6899      	ldr	r1, [r3, #8]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007fc4:	4b16      	ldr	r3, [pc, #88]	; (8008020 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fce:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007fd0:	4b13      	ldr	r3, [pc, #76]	; (8008020 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4a12      	ldr	r2, [pc, #72]	; (8008020 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fda:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fea:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	0800c380 	.word	0x0800c380
 8008020:	40010400 	.word	0x40010400

08008024 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7f1b      	ldrb	r3, [r3, #28]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e047      	b.n	80080cc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	22ca      	movs	r2, #202	; 0xca
 800804e:	625a      	str	r2, [r3, #36]	; 0x24
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2253      	movs	r2, #83	; 0x53
 8008056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008066:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008076:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008078:	f7fa fa2e 	bl	80024d8 <HAL_GetTick>
 800807c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800807e:	e013      	b.n	80080a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008080:	f7fa fa2a 	bl	80024d8 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800808e:	d90b      	bls.n	80080a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2203      	movs	r2, #3
 800809c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e011      	b.n	80080cc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0e4      	beq.n	8008080 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	22ff      	movs	r2, #255	; 0xff
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00b      	beq.n	8008102 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7f9 f9fa 	bl	80014e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008100:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8008104:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008108:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	775a      	strb	r2, [r3, #29]
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40010400 	.word	0x40010400

0800811c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e0be      	b.n	80082c0 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a60      	ldr	r2, [pc, #384]	; (80082c8 <HAL_TIM_Base_Init+0x198>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d036      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008154:	d031      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a5c      	ldr	r2, [pc, #368]	; (80082cc <HAL_TIM_Base_Init+0x19c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d02c      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a5a      	ldr	r2, [pc, #360]	; (80082d0 <HAL_TIM_Base_Init+0x1a0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d027      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a59      	ldr	r2, [pc, #356]	; (80082d4 <HAL_TIM_Base_Init+0x1a4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d022      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a57      	ldr	r2, [pc, #348]	; (80082d8 <HAL_TIM_Base_Init+0x1a8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01d      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a56      	ldr	r2, [pc, #344]	; (80082dc <HAL_TIM_Base_Init+0x1ac>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d018      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a54      	ldr	r2, [pc, #336]	; (80082e0 <HAL_TIM_Base_Init+0x1b0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a53      	ldr	r2, [pc, #332]	; (80082e4 <HAL_TIM_Base_Init+0x1b4>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00e      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a51      	ldr	r2, [pc, #324]	; (80082e8 <HAL_TIM_Base_Init+0x1b8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d009      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a50      	ldr	r2, [pc, #320]	; (80082ec <HAL_TIM_Base_Init+0x1bc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <HAL_TIM_Base_Init+0x8a>
 80081b0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80081b4:	484e      	ldr	r0, [pc, #312]	; (80082f0 <HAL_TIM_Base_Init+0x1c0>)
 80081b6:	f7f9 fe00 	bl	8001dba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <HAL_TIM_Base_Init+0xbc>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b10      	cmp	r3, #16
 80081c8:	d010      	beq.n	80081ec <HAL_TIM_Base_Init+0xbc>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d00c      	beq.n	80081ec <HAL_TIM_Base_Init+0xbc>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d008      	beq.n	80081ec <HAL_TIM_Base_Init+0xbc>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b60      	cmp	r3, #96	; 0x60
 80081e0:	d004      	beq.n	80081ec <HAL_TIM_Base_Init+0xbc>
 80081e2:	f240 111b 	movw	r1, #283	; 0x11b
 80081e6:	4842      	ldr	r0, [pc, #264]	; (80082f0 <HAL_TIM_Base_Init+0x1c0>)
 80081e8:	f7f9 fde7 	bl	8001dba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <HAL_TIM_Base_Init+0xe2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fc:	d009      	beq.n	8008212 <HAL_TIM_Base_Init+0xe2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008206:	d004      	beq.n	8008212 <HAL_TIM_Base_Init+0xe2>
 8008208:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800820c:	4838      	ldr	r0, [pc, #224]	; (80082f0 <HAL_TIM_Base_Init+0x1c0>)
 800820e:	f7f9 fdd4 	bl	8001dba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <HAL_TIM_Base_Init+0xfc>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b80      	cmp	r3, #128	; 0x80
 8008220:	d004      	beq.n	800822c <HAL_TIM_Base_Init+0xfc>
 8008222:	f240 111d 	movw	r1, #285	; 0x11d
 8008226:	4832      	ldr	r0, [pc, #200]	; (80082f0 <HAL_TIM_Base_Init+0x1c0>)
 8008228:	f7f9 fdc7 	bl	8001dba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fa f809 	bl	8002258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3304      	adds	r3, #4
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f000 fa49 	bl	80086f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40000400 	.word	0x40000400
 80082d0:	40000800 	.word	0x40000800
 80082d4:	40001000 	.word	0x40001000
 80082d8:	40001400 	.word	0x40001400
 80082dc:	40013400 	.word	0x40013400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40014400 	.word	0x40014400
 80082e8:	40014800 	.word	0x40014800
 80082ec:	40015000 	.word	0x40015000
 80082f0:	0800c3bc 	.word	0x0800c3bc

080082f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a46      	ldr	r2, [pc, #280]	; (800841c <HAL_TIM_Base_Start+0x128>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d036      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830e:	d031      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a42      	ldr	r2, [pc, #264]	; (8008420 <HAL_TIM_Base_Start+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d02c      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a41      	ldr	r2, [pc, #260]	; (8008424 <HAL_TIM_Base_Start+0x130>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d027      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a3f      	ldr	r2, [pc, #252]	; (8008428 <HAL_TIM_Base_Start+0x134>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d022      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a3e      	ldr	r2, [pc, #248]	; (800842c <HAL_TIM_Base_Start+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d01d      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a3c      	ldr	r2, [pc, #240]	; (8008430 <HAL_TIM_Base_Start+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d018      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a3b      	ldr	r2, [pc, #236]	; (8008434 <HAL_TIM_Base_Start+0x140>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d013      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a39      	ldr	r2, [pc, #228]	; (8008438 <HAL_TIM_Base_Start+0x144>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00e      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a38      	ldr	r2, [pc, #224]	; (800843c <HAL_TIM_Base_Start+0x148>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d009      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a36      	ldr	r2, [pc, #216]	; (8008440 <HAL_TIM_Base_Start+0x14c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d004      	beq.n	8008374 <HAL_TIM_Base_Start+0x80>
 800836a:	f240 119b 	movw	r1, #411	; 0x19b
 800836e:	4835      	ldr	r0, [pc, #212]	; (8008444 <HAL_TIM_Base_Start+0x150>)
 8008370:	f7f9 fd23 	bl	8001dba <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b01      	cmp	r3, #1
 800837e:	d001      	beq.n	8008384 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e047      	b.n	8008414 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a22      	ldr	r2, [pc, #136]	; (800841c <HAL_TIM_Base_Start+0x128>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01d      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d018      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <HAL_TIM_Base_Start+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <HAL_TIM_Base_Start+0x130>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1d      	ldr	r2, [pc, #116]	; (8008430 <HAL_TIM_Base_Start+0x13c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1c      	ldr	r2, [pc, #112]	; (8008434 <HAL_TIM_Base_Start+0x140>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIM_Base_Start+0xde>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1c      	ldr	r2, [pc, #112]	; (8008440 <HAL_TIM_Base_Start+0x14c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d115      	bne.n	80083fe <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <HAL_TIM_Base_Start+0x154>)
 80083da:	4013      	ands	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b06      	cmp	r3, #6
 80083e2:	d015      	beq.n	8008410 <HAL_TIM_Base_Start+0x11c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ea:	d011      	beq.n	8008410 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fc:	e008      	b.n	8008410 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0201 	orr.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e000      	b.n	8008412 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40001000 	.word	0x40001000
 800842c:	40001400 	.word	0x40001400
 8008430:	40013400 	.word	0x40013400
 8008434:	40014000 	.word	0x40014000
 8008438:	40014400 	.word	0x40014400
 800843c:	40014800 	.word	0x40014800
 8008440:	40015000 	.word	0x40015000
 8008444:	0800c3bc 	.word	0x0800c3bc
 8008448:	00010007 	.word	0x00010007

0800844c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d122      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b02      	cmp	r3, #2
 800846e:	d11b      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0202 	mvn.w	r2, #2
 8008478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f90f 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f901 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f912 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0204 	mvn.w	r2, #4
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8e5 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f8d7 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8e8 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b08      	cmp	r3, #8
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0208 	mvn.w	r2, #8
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2204      	movs	r2, #4
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8bb 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8ad 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8be 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b10      	cmp	r3, #16
 800855c:	d122      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b10      	cmp	r3, #16
 800856a:	d11b      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0210 	mvn.w	r2, #16
 8008574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2208      	movs	r2, #8
 800857a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f891 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f883 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f894 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10e      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d107      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0201 	mvn.w	r2, #1
 80085c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f85d 	bl	800868a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d10e      	bne.n	80085fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d107      	bne.n	80085fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa70 	bl	8008adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860a:	d10e      	bne.n	800862a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008616:	2b80      	cmp	r3, #128	; 0x80
 8008618:	d107      	bne.n	800862a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fa63 	bl	8008af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d10e      	bne.n	8008656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d107      	bne.n	8008656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800864e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f842 	bl	80086da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b20      	cmp	r3, #32
 8008662:	d10e      	bne.n	8008682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b20      	cmp	r3, #32
 8008670:	d107      	bne.n	8008682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f06f 0220 	mvn.w	r2, #32
 800867a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa23 	bl	8008ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a42      	ldr	r2, [pc, #264]	; (800880c <TIM_Base_SetConfig+0x11c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d013      	beq.n	8008730 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870e:	d00f      	beq.n	8008730 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a3f      	ldr	r2, [pc, #252]	; (8008810 <TIM_Base_SetConfig+0x120>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00b      	beq.n	8008730 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a3e      	ldr	r2, [pc, #248]	; (8008814 <TIM_Base_SetConfig+0x124>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d007      	beq.n	8008730 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <TIM_Base_SetConfig+0x128>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3c      	ldr	r2, [pc, #240]	; (800881c <TIM_Base_SetConfig+0x12c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d108      	bne.n	8008742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a31      	ldr	r2, [pc, #196]	; (800880c <TIM_Base_SetConfig+0x11c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d01f      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008750:	d01b      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2e      	ldr	r2, [pc, #184]	; (8008810 <TIM_Base_SetConfig+0x120>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d017      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <TIM_Base_SetConfig+0x124>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <TIM_Base_SetConfig+0x128>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00f      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2c      	ldr	r2, [pc, #176]	; (8008820 <TIM_Base_SetConfig+0x130>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00b      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2b      	ldr	r2, [pc, #172]	; (8008824 <TIM_Base_SetConfig+0x134>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d007      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2a      	ldr	r2, [pc, #168]	; (8008828 <TIM_Base_SetConfig+0x138>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d003      	beq.n	800878a <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <TIM_Base_SetConfig+0x12c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d108      	bne.n	800879c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a12      	ldr	r2, [pc, #72]	; (800880c <TIM_Base_SetConfig+0x11c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <TIM_Base_SetConfig+0x100>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a13      	ldr	r2, [pc, #76]	; (8008818 <TIM_Base_SetConfig+0x128>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <TIM_Base_SetConfig+0x100>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a13      	ldr	r2, [pc, #76]	; (8008820 <TIM_Base_SetConfig+0x130>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0x100>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a12      	ldr	r2, [pc, #72]	; (8008824 <TIM_Base_SetConfig+0x134>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0x100>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <TIM_Base_SetConfig+0x138>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0x100>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a0c      	ldr	r2, [pc, #48]	; (800881c <TIM_Base_SetConfig+0x12c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d103      	bne.n	80087f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	615a      	str	r2, [r3, #20]
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40013400 	.word	0x40013400
 800881c:	40015000 	.word	0x40015000
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800

0800882c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a9a      	ldr	r2, [pc, #616]	; (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d02c      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008848:	d027      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a96      	ldr	r2, [pc, #600]	; (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d022      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a94      	ldr	r2, [pc, #592]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d01d      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a93      	ldr	r2, [pc, #588]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d018      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a91      	ldr	r2, [pc, #580]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d013      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a90      	ldr	r2, [pc, #576]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00e      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a8e      	ldr	r2, [pc, #568]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d009      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a8d      	ldr	r2, [pc, #564]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d004      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008890:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8008894:	488b      	ldr	r0, [pc, #556]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008896:	f7f9 fa90 	bl	8001dba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d020      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	d01c      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d018      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b30      	cmp	r3, #48	; 0x30
 80088b8:	d014      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d010      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b50      	cmp	r3, #80	; 0x50
 80088c8:	d00c      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b60      	cmp	r3, #96	; 0x60
 80088d0:	d008      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b70      	cmp	r3, #112	; 0x70
 80088d8:	d004      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088da:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80088de:	4879      	ldr	r0, [pc, #484]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80088e0:	f7f9 fa6b 	bl	8001dba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d008      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80088f4:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80088f8:	4872      	ldr	r0, [pc, #456]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80088fa:	f7f9 fa5e 	bl	8001dba <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008908:	2302      	movs	r3, #2
 800890a:	e0c6      	b.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a5c      	ldr	r2, [pc, #368]	; (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a5f      	ldr	r2, [pc, #380]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a5e      	ldr	r2, [pc, #376]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d161      	bne.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d054      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800895a:	d04f      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008964:	d04a      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800896e:	d045      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008978:	d040      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008982:	d03b      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800898c:	d036      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008996:	d031      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80089a0:	d02c      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089aa:	d027      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80089b4:	d022      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80089be:	d01d      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80089c8:	d018      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80089d2:	d013      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80089dc:	d00e      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80089e6:	d009      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80089f0:	d004      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089f2:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80089f6:	4833      	ldr	r0, [pc, #204]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80089f8:	f7f9 f9df 	bl	8001dba <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3a:	d018      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a18      	ldr	r2, [pc, #96]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a17      	ldr	r2, [pc, #92]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d10c      	bne.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40000400 	.word	0x40000400
 8008aac:	40000800 	.word	0x40000800
 8008ab0:	40001000 	.word	0x40001000
 8008ab4:	40001400 	.word	0x40001400
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40015000 	.word	0x40015000
 8008ac4:	0800c3f4 	.word	0x0800c3f4

08008ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e077      	b.n	8008c06 <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d014      	beq.n	8008b48 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a3b      	ldr	r2, [pc, #236]	; (8008c10 <HAL_UART_Init+0x10c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d02d      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a39      	ldr	r2, [pc, #228]	; (8008c14 <HAL_UART_Init+0x110>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d028      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a38      	ldr	r2, [pc, #224]	; (8008c18 <HAL_UART_Init+0x114>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d023      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b3c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008b40:	4836      	ldr	r0, [pc, #216]	; (8008c1c <HAL_UART_Init+0x118>)
 8008b42:	f7f9 f93a 	bl	8001dba <assert_failed>
 8008b46:	e01d      	b.n	8008b84 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a30      	ldr	r2, [pc, #192]	; (8008c10 <HAL_UART_Init+0x10c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d018      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a2f      	ldr	r2, [pc, #188]	; (8008c14 <HAL_UART_Init+0x110>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2d      	ldr	r2, [pc, #180]	; (8008c18 <HAL_UART_Init+0x114>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a2d      	ldr	r2, [pc, #180]	; (8008c20 <HAL_UART_Init+0x11c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a2b      	ldr	r2, [pc, #172]	; (8008c24 <HAL_UART_Init+0x120>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_UART_Init+0x80>
 8008b7a:	f240 1131 	movw	r1, #305	; 0x131
 8008b7e:	4827      	ldr	r0, [pc, #156]	; (8008c1c <HAL_UART_Init+0x118>)
 8008b80:	f7f9 f91b 	bl	8001dba <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f9 fbd1 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2224      	movs	r2, #36	; 0x24
 8008b9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fbe9 	bl	8009388 <UART_SetConfig>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e022      	b.n	8008c06 <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fe41 	bl	8009850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0201 	orr.w	r2, r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 ff74 	bl	8009aec <UART_CheckIdleState>
 8008c04:	4603      	mov	r3, r0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40013800 	.word	0x40013800
 8008c14:	40004400 	.word	0x40004400
 8008c18:	40004800 	.word	0x40004800
 8008c1c:	0800c430 	.word	0x0800c430
 8008c20:	40004c00 	.word	0x40004c00
 8008c24:	40005000 	.word	0x40005000

08008c28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b08b      	sub	sp, #44	; 0x2c
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d156      	bne.n	8008cec <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_UART_Transmit_IT+0x22>
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04f      	b.n	8008cee <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_UART_Transmit_IT+0x34>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e048      	b.n	8008cee <HAL_UART_Transmit_IT+0xc6>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2221      	movs	r2, #33	; 0x21
 8008c8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d107      	bne.n	8008ca8 <HAL_UART_Transmit_IT+0x80>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <HAL_UART_Transmit_IT+0xd4>)
 8008ca4:	669a      	str	r2, [r3, #104]	; 0x68
 8008ca6:	e002      	b.n	8008cae <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a15      	ldr	r2, [pc, #84]	; (8008d00 <HAL_UART_Transmit_IT+0xd8>)
 8008cac:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	623b      	str	r3, [r7, #32]
 8008cd6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	69f9      	ldr	r1, [r7, #28]
 8008cda:	6a3a      	ldr	r2, [r7, #32]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	372c      	adds	r7, #44	; 0x2c
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	0800a00b 	.word	0x0800a00b
 8008d00:	08009f53 	.word	0x08009f53

08008d04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d13d      	bne.n	8008d96 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <HAL_UART_Receive_IT+0x22>
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e036      	b.n	8008d98 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d101      	bne.n	8008d38 <HAL_UART_Receive_IT+0x34>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e02f      	b.n	8008d98 <HAL_UART_Receive_IT+0x94>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d018      	beq.n	8008d86 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	613b      	str	r3, [r7, #16]
   return(result);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	623b      	str	r3, [r7, #32]
 8008d74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	69f9      	ldr	r1, [r7, #28]
 8008d78:	6a3a      	ldr	r2, [r7, #32]
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e6      	bne.n	8008d54 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 ffbb 	bl	8009d08 <UART_Start_Receive_IT>
 8008d92:	4603      	mov	r3, r0
 8008d94:	e000      	b.n	8008d98 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3728      	adds	r7, #40	; 0x28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b0ba      	sub	sp, #232	; 0xe8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008dca:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dce:	4013      	ands	r3, r2
 8008dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d115      	bne.n	8008e08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00f      	beq.n	8008e08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 82a3 	beq.w	8009344 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
      }
      return;
 8008e06:	e29d      	b.n	8009344 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8117 	beq.w	8009040 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e22:	4b85      	ldr	r3, [pc, #532]	; (8009038 <HAL_UART_IRQHandler+0x298>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 810a 	beq.w	8009040 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d011      	beq.n	8008e5c <HAL_UART_IRQHandler+0xbc>
 8008e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d011      	beq.n	8008e8c <HAL_UART_IRQHandler+0xec>
 8008e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e82:	f043 0204 	orr.w	r2, r3, #4
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d011      	beq.n	8008ebc <HAL_UART_IRQHandler+0x11c>
 8008e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb2:	f043 0202 	orr.w	r2, r3, #2
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d017      	beq.n	8008ef8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eee:	f043 0208 	orr.w	r2, r3, #8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d012      	beq.n	8008f2a <HAL_UART_IRQHandler+0x18a>
 8008f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f20:	f043 0220 	orr.w	r2, r3, #32
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8209 	beq.w	8009348 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d005      	beq.n	8008f82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d04f      	beq.n	8009022 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 ff6c 	bl	8009e60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f92:	2b40      	cmp	r3, #64	; 0x40
 8008f94:	d141      	bne.n	800901a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1d9      	bne.n	8008f96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d013      	beq.n	8009012 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fee:	4a13      	ldr	r2, [pc, #76]	; (800903c <HAL_UART_IRQHandler+0x29c>)
 8008ff0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f9 fc17 	bl	800282a <HAL_DMA_Abort_IT>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d017      	beq.n	8009032 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009010:	e00f      	b.n	8009032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f9a2 	bl	800935c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	e00b      	b.n	8009032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f99e 	bl	800935c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009020:	e007      	b.n	8009032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f99a 	bl	800935c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009030:	e18a      	b.n	8009348 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009032:	bf00      	nop
    return;
 8009034:	e188      	b.n	8009348 <HAL_UART_IRQHandler+0x5a8>
 8009036:	bf00      	nop
 8009038:	04000120 	.word	0x04000120
 800903c:	08009f27 	.word	0x08009f27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009044:	2b01      	cmp	r3, #1
 8009046:	f040 8143 	bne.w	80092d0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800904a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 813c 	beq.w	80092d0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8135 	beq.w	80092d0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2210      	movs	r2, #16
 800906c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009078:	2b40      	cmp	r3, #64	; 0x40
 800907a:	f040 80b1 	bne.w	80091e0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800908a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 815c 	beq.w	800934c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800909a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800909e:	429a      	cmp	r2, r3
 80090a0:	f080 8154 	bcs.w	800934c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	f000 8085 	beq.w	80091c4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1da      	bne.n	80090ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009116:	f023 0301 	bic.w	r3, r3, #1
 800911a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009128:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800912c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009130:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800913a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e1      	bne.n	8009104 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3308      	adds	r3, #8
 8009146:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009164:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009166:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800916a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e3      	bne.n	8009140 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2220      	movs	r2, #32
 800917c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009194:	f023 0310 	bic.w	r3, r3, #16
 8009198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80091a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e4      	bne.n	8009184 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091be:	4618      	mov	r0, r3
 80091c0:	f7f9 fafa 	bl	80027b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8c9 	bl	8009370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091de:	e0b5      	b.n	800934c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80a7 	beq.w	8009350 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 80a2 	beq.w	8009350 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800922e:	647b      	str	r3, [r7, #68]	; 0x44
 8009230:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800923c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e4      	bne.n	800920c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	623b      	str	r3, [r7, #32]
   return(result);
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009266:	633a      	str	r2, [r7, #48]	; 0x30
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800926c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	60fb      	str	r3, [r7, #12]
   return(result);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f023 0310 	bic.w	r3, r3, #16
 80092a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092ae:	61fb      	str	r3, [r7, #28]
 80092b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	69b9      	ldr	r1, [r7, #24]
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	617b      	str	r3, [r7, #20]
   return(result);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e4      	bne.n	800928c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f851 	bl	8009370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092ce:	e03f      	b.n	8009350 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <HAL_UART_IRQHandler+0x55a>
 80092dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f86f 	bl	800a3d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092f8:	e02d      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00e      	beq.n	8009324 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b00      	cmp	r3, #0
 8009310:	d008      	beq.n	8009324 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01c      	beq.n	8009354 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
    }
    return;
 8009322:	e017      	b.n	8009354 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	d012      	beq.n	8009356 <HAL_UART_IRQHandler+0x5b6>
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fec4 	bl	800a0ca <UART_EndTransmit_IT>
    return;
 8009342:	e008      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009344:	bf00      	nop
 8009346:	e006      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009348:	bf00      	nop
 800934a:	e004      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
      return;
 800934c:	bf00      	nop
 800934e:	e002      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009354:	bf00      	nop
  }

}
 8009356:	37e8      	adds	r7, #232	; 0xe8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a9a      	ldr	r2, [pc, #616]	; (8009604 <UART_SetConfig+0x27c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d904      	bls.n	80093a8 <UART_SetConfig+0x20>
 800939e:	f640 313f 	movw	r1, #2879	; 0xb3f
 80093a2:	4899      	ldr	r0, [pc, #612]	; (8009608 <UART_SetConfig+0x280>)
 80093a4:	f7f8 fd09 	bl	8001dba <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b0:	d00d      	beq.n	80093ce <UART_SetConfig+0x46>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <UART_SetConfig+0x46>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c2:	d004      	beq.n	80093ce <UART_SetConfig+0x46>
 80093c4:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80093c8:	488f      	ldr	r0, [pc, #572]	; (8009608 <UART_SetConfig+0x280>)
 80093ca:	f7f8 fcf6 	bl	8001dba <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d6:	d012      	beq.n	80093fe <UART_SetConfig+0x76>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00e      	beq.n	80093fe <UART_SetConfig+0x76>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093e8:	d009      	beq.n	80093fe <UART_SetConfig+0x76>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f2:	d004      	beq.n	80093fe <UART_SetConfig+0x76>
 80093f4:	f640 3141 	movw	r1, #2881	; 0xb41
 80093f8:	4883      	ldr	r0, [pc, #524]	; (8009608 <UART_SetConfig+0x280>)
 80093fa:	f7f8 fcde 	bl	8001dba <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <UART_SetConfig+0x92>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800940e:	d004      	beq.n	800941a <UART_SetConfig+0x92>
 8009410:	f640 3142 	movw	r1, #2882	; 0xb42
 8009414:	487c      	ldr	r0, [pc, #496]	; (8009608 <UART_SetConfig+0x280>)
 8009416:	f7f8 fcd0 	bl	8001dba <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <UART_SetConfig+0xb8>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942a:	d009      	beq.n	8009440 <UART_SetConfig+0xb8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009434:	d004      	beq.n	8009440 <UART_SetConfig+0xb8>
 8009436:	f640 3144 	movw	r1, #2884	; 0xb44
 800943a:	4873      	ldr	r0, [pc, #460]	; (8009608 <UART_SetConfig+0x280>)
 800943c:	f7f8 fcbd 	bl	8001dba <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f023 030c 	bic.w	r3, r3, #12
 8009448:	2b00      	cmp	r3, #0
 800944a:	d103      	bne.n	8009454 <UART_SetConfig+0xcc>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <UART_SetConfig+0xd6>
 8009454:	f640 3145 	movw	r1, #2885	; 0xb45
 8009458:	486b      	ldr	r0, [pc, #428]	; (8009608 <UART_SetConfig+0x280>)
 800945a:	f7f8 fcae 	bl	8001dba <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d013      	beq.n	800948e <UART_SetConfig+0x106>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946e:	d00e      	beq.n	800948e <UART_SetConfig+0x106>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009478:	d009      	beq.n	800948e <UART_SetConfig+0x106>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009482:	d004      	beq.n	800948e <UART_SetConfig+0x106>
 8009484:	f640 3146 	movw	r1, #2886	; 0xb46
 8009488:	485f      	ldr	r0, [pc, #380]	; (8009608 <UART_SetConfig+0x280>)
 800948a:	f7f8 fc96 	bl	8001dba <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <UART_SetConfig+0x122>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800949e:	d004      	beq.n	80094aa <UART_SetConfig+0x122>
 80094a0:	f640 3147 	movw	r1, #2887	; 0xb47
 80094a4:	4858      	ldr	r0, [pc, #352]	; (8009608 <UART_SetConfig+0x280>)
 80094a6:	f7f8 fc88 	bl	8001dba <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	4313      	orrs	r3, r2
 80094c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b50      	ldr	r3, [pc, #320]	; (800960c <UART_SetConfig+0x284>)
 80094ca:	4013      	ands	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	6812      	ldr	r2, [r2, #0]
 80094d0:	6979      	ldr	r1, [r7, #20]
 80094d2:	430b      	orrs	r3, r1
 80094d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	430a      	orrs	r2, r1
 800950e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a3e      	ldr	r2, [pc, #248]	; (8009610 <UART_SetConfig+0x288>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d11f      	bne.n	800955a <UART_SetConfig+0x1d2>
 800951a:	4b3e      	ldr	r3, [pc, #248]	; (8009614 <UART_SetConfig+0x28c>)
 800951c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d816      	bhi.n	8009554 <UART_SetConfig+0x1cc>
 8009526:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x1a4>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	0800953d 	.word	0x0800953d
 8009530:	08009549 	.word	0x08009549
 8009534:	0800954f 	.word	0x0800954f
 8009538:	08009543 	.word	0x08009543
 800953c:	2301      	movs	r3, #1
 800953e:	77fb      	strb	r3, [r7, #31]
 8009540:	e0c4      	b.n	80096cc <UART_SetConfig+0x344>
 8009542:	2302      	movs	r3, #2
 8009544:	77fb      	strb	r3, [r7, #31]
 8009546:	e0c1      	b.n	80096cc <UART_SetConfig+0x344>
 8009548:	2304      	movs	r3, #4
 800954a:	77fb      	strb	r3, [r7, #31]
 800954c:	e0be      	b.n	80096cc <UART_SetConfig+0x344>
 800954e:	2308      	movs	r3, #8
 8009550:	77fb      	strb	r3, [r7, #31]
 8009552:	e0bb      	b.n	80096cc <UART_SetConfig+0x344>
 8009554:	2310      	movs	r3, #16
 8009556:	77fb      	strb	r3, [r7, #31]
 8009558:	e0b8      	b.n	80096cc <UART_SetConfig+0x344>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a2e      	ldr	r2, [pc, #184]	; (8009618 <UART_SetConfig+0x290>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d124      	bne.n	80095ae <UART_SetConfig+0x226>
 8009564:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <UART_SetConfig+0x28c>)
 8009566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800956c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009570:	d011      	beq.n	8009596 <UART_SetConfig+0x20e>
 8009572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009576:	d817      	bhi.n	80095a8 <UART_SetConfig+0x220>
 8009578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957c:	d011      	beq.n	80095a2 <UART_SetConfig+0x21a>
 800957e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009582:	d811      	bhi.n	80095a8 <UART_SetConfig+0x220>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <UART_SetConfig+0x208>
 8009588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800958c:	d006      	beq.n	800959c <UART_SetConfig+0x214>
 800958e:	e00b      	b.n	80095a8 <UART_SetConfig+0x220>
 8009590:	2300      	movs	r3, #0
 8009592:	77fb      	strb	r3, [r7, #31]
 8009594:	e09a      	b.n	80096cc <UART_SetConfig+0x344>
 8009596:	2302      	movs	r3, #2
 8009598:	77fb      	strb	r3, [r7, #31]
 800959a:	e097      	b.n	80096cc <UART_SetConfig+0x344>
 800959c:	2304      	movs	r3, #4
 800959e:	77fb      	strb	r3, [r7, #31]
 80095a0:	e094      	b.n	80096cc <UART_SetConfig+0x344>
 80095a2:	2308      	movs	r3, #8
 80095a4:	77fb      	strb	r3, [r7, #31]
 80095a6:	e091      	b.n	80096cc <UART_SetConfig+0x344>
 80095a8:	2310      	movs	r3, #16
 80095aa:	77fb      	strb	r3, [r7, #31]
 80095ac:	e08e      	b.n	80096cc <UART_SetConfig+0x344>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a1a      	ldr	r2, [pc, #104]	; (800961c <UART_SetConfig+0x294>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d133      	bne.n	8009620 <UART_SetConfig+0x298>
 80095b8:	4b16      	ldr	r3, [pc, #88]	; (8009614 <UART_SetConfig+0x28c>)
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80095c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80095c4:	d011      	beq.n	80095ea <UART_SetConfig+0x262>
 80095c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80095ca:	d817      	bhi.n	80095fc <UART_SetConfig+0x274>
 80095cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095d0:	d011      	beq.n	80095f6 <UART_SetConfig+0x26e>
 80095d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095d6:	d811      	bhi.n	80095fc <UART_SetConfig+0x274>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <UART_SetConfig+0x25c>
 80095dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e0:	d006      	beq.n	80095f0 <UART_SetConfig+0x268>
 80095e2:	e00b      	b.n	80095fc <UART_SetConfig+0x274>
 80095e4:	2300      	movs	r3, #0
 80095e6:	77fb      	strb	r3, [r7, #31]
 80095e8:	e070      	b.n	80096cc <UART_SetConfig+0x344>
 80095ea:	2302      	movs	r3, #2
 80095ec:	77fb      	strb	r3, [r7, #31]
 80095ee:	e06d      	b.n	80096cc <UART_SetConfig+0x344>
 80095f0:	2304      	movs	r3, #4
 80095f2:	77fb      	strb	r3, [r7, #31]
 80095f4:	e06a      	b.n	80096cc <UART_SetConfig+0x344>
 80095f6:	2308      	movs	r3, #8
 80095f8:	77fb      	strb	r3, [r7, #31]
 80095fa:	e067      	b.n	80096cc <UART_SetConfig+0x344>
 80095fc:	2310      	movs	r3, #16
 80095fe:	77fb      	strb	r3, [r7, #31]
 8009600:	e064      	b.n	80096cc <UART_SetConfig+0x344>
 8009602:	bf00      	nop
 8009604:	00895440 	.word	0x00895440
 8009608:	0800c430 	.word	0x0800c430
 800960c:	efff69f3 	.word	0xefff69f3
 8009610:	40013800 	.word	0x40013800
 8009614:	40021000 	.word	0x40021000
 8009618:	40004400 	.word	0x40004400
 800961c:	40004800 	.word	0x40004800
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a86      	ldr	r2, [pc, #536]	; (8009840 <UART_SetConfig+0x4b8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d124      	bne.n	8009674 <UART_SetConfig+0x2ec>
 800962a:	4b86      	ldr	r3, [pc, #536]	; (8009844 <UART_SetConfig+0x4bc>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009636:	d011      	beq.n	800965c <UART_SetConfig+0x2d4>
 8009638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800963c:	d817      	bhi.n	800966e <UART_SetConfig+0x2e6>
 800963e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009642:	d011      	beq.n	8009668 <UART_SetConfig+0x2e0>
 8009644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009648:	d811      	bhi.n	800966e <UART_SetConfig+0x2e6>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <UART_SetConfig+0x2ce>
 800964e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009652:	d006      	beq.n	8009662 <UART_SetConfig+0x2da>
 8009654:	e00b      	b.n	800966e <UART_SetConfig+0x2e6>
 8009656:	2300      	movs	r3, #0
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e037      	b.n	80096cc <UART_SetConfig+0x344>
 800965c:	2302      	movs	r3, #2
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e034      	b.n	80096cc <UART_SetConfig+0x344>
 8009662:	2304      	movs	r3, #4
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	e031      	b.n	80096cc <UART_SetConfig+0x344>
 8009668:	2308      	movs	r3, #8
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	e02e      	b.n	80096cc <UART_SetConfig+0x344>
 800966e:	2310      	movs	r3, #16
 8009670:	77fb      	strb	r3, [r7, #31]
 8009672:	e02b      	b.n	80096cc <UART_SetConfig+0x344>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a73      	ldr	r2, [pc, #460]	; (8009848 <UART_SetConfig+0x4c0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d124      	bne.n	80096c8 <UART_SetConfig+0x340>
 800967e:	4b71      	ldr	r3, [pc, #452]	; (8009844 <UART_SetConfig+0x4bc>)
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800968a:	d011      	beq.n	80096b0 <UART_SetConfig+0x328>
 800968c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009690:	d817      	bhi.n	80096c2 <UART_SetConfig+0x33a>
 8009692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009696:	d011      	beq.n	80096bc <UART_SetConfig+0x334>
 8009698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800969c:	d811      	bhi.n	80096c2 <UART_SetConfig+0x33a>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <UART_SetConfig+0x322>
 80096a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096a6:	d006      	beq.n	80096b6 <UART_SetConfig+0x32e>
 80096a8:	e00b      	b.n	80096c2 <UART_SetConfig+0x33a>
 80096aa:	2300      	movs	r3, #0
 80096ac:	77fb      	strb	r3, [r7, #31]
 80096ae:	e00d      	b.n	80096cc <UART_SetConfig+0x344>
 80096b0:	2302      	movs	r3, #2
 80096b2:	77fb      	strb	r3, [r7, #31]
 80096b4:	e00a      	b.n	80096cc <UART_SetConfig+0x344>
 80096b6:	2304      	movs	r3, #4
 80096b8:	77fb      	strb	r3, [r7, #31]
 80096ba:	e007      	b.n	80096cc <UART_SetConfig+0x344>
 80096bc:	2308      	movs	r3, #8
 80096be:	77fb      	strb	r3, [r7, #31]
 80096c0:	e004      	b.n	80096cc <UART_SetConfig+0x344>
 80096c2:	2310      	movs	r3, #16
 80096c4:	77fb      	strb	r3, [r7, #31]
 80096c6:	e001      	b.n	80096cc <UART_SetConfig+0x344>
 80096c8:	2310      	movs	r3, #16
 80096ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096d4:	d15c      	bne.n	8009790 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80096d6:	7ffb      	ldrb	r3, [r7, #31]
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d828      	bhi.n	800972e <UART_SetConfig+0x3a6>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <UART_SetConfig+0x35c>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	08009709 	.word	0x08009709
 80096e8:	08009711 	.word	0x08009711
 80096ec:	08009719 	.word	0x08009719
 80096f0:	0800972f 	.word	0x0800972f
 80096f4:	0800971f 	.word	0x0800971f
 80096f8:	0800972f 	.word	0x0800972f
 80096fc:	0800972f 	.word	0x0800972f
 8009700:	0800972f 	.word	0x0800972f
 8009704:	08009727 	.word	0x08009727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009708:	f7fc feb6 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 800970c:	61b8      	str	r0, [r7, #24]
        break;
 800970e:	e013      	b.n	8009738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009710:	f7fc fed4 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8009714:	61b8      	str	r0, [r7, #24]
        break;
 8009716:	e00f      	b.n	8009738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009718:	4b4c      	ldr	r3, [pc, #304]	; (800984c <UART_SetConfig+0x4c4>)
 800971a:	61bb      	str	r3, [r7, #24]
        break;
 800971c:	e00c      	b.n	8009738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800971e:	f7fc fe35 	bl	800638c <HAL_RCC_GetSysClockFreq>
 8009722:	61b8      	str	r0, [r7, #24]
        break;
 8009724:	e008      	b.n	8009738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972a:	61bb      	str	r3, [r7, #24]
        break;
 800972c:	e004      	b.n	8009738 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	77bb      	strb	r3, [r7, #30]
        break;
 8009736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d074      	beq.n	8009828 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	005a      	lsls	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	441a      	add	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009752:	b29b      	uxth	r3, r3
 8009754:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2b0f      	cmp	r3, #15
 800975a:	d916      	bls.n	800978a <UART_SetConfig+0x402>
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009762:	d212      	bcs.n	800978a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	b29b      	uxth	r3, r3
 8009768:	f023 030f 	bic.w	r3, r3, #15
 800976c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	b29b      	uxth	r3, r3
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	b29a      	uxth	r2, r3
 800977a:	89fb      	ldrh	r3, [r7, #14]
 800977c:	4313      	orrs	r3, r2
 800977e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	89fa      	ldrh	r2, [r7, #14]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	e04e      	b.n	8009828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	77bb      	strb	r3, [r7, #30]
 800978e:	e04b      	b.n	8009828 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009790:	7ffb      	ldrb	r3, [r7, #31]
 8009792:	2b08      	cmp	r3, #8
 8009794:	d827      	bhi.n	80097e6 <UART_SetConfig+0x45e>
 8009796:	a201      	add	r2, pc, #4	; (adr r2, 800979c <UART_SetConfig+0x414>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097c9 	.word	0x080097c9
 80097a4:	080097d1 	.word	0x080097d1
 80097a8:	080097e7 	.word	0x080097e7
 80097ac:	080097d7 	.word	0x080097d7
 80097b0:	080097e7 	.word	0x080097e7
 80097b4:	080097e7 	.word	0x080097e7
 80097b8:	080097e7 	.word	0x080097e7
 80097bc:	080097df 	.word	0x080097df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c0:	f7fc fe5a 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 80097c4:	61b8      	str	r0, [r7, #24]
        break;
 80097c6:	e013      	b.n	80097f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097c8:	f7fc fe78 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 80097cc:	61b8      	str	r0, [r7, #24]
        break;
 80097ce:	e00f      	b.n	80097f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097d0:	4b1e      	ldr	r3, [pc, #120]	; (800984c <UART_SetConfig+0x4c4>)
 80097d2:	61bb      	str	r3, [r7, #24]
        break;
 80097d4:	e00c      	b.n	80097f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097d6:	f7fc fdd9 	bl	800638c <HAL_RCC_GetSysClockFreq>
 80097da:	61b8      	str	r0, [r7, #24]
        break;
 80097dc:	e008      	b.n	80097f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e2:	61bb      	str	r3, [r7, #24]
        break;
 80097e4:	e004      	b.n	80097f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	77bb      	strb	r3, [r7, #30]
        break;
 80097ee:	bf00      	nop
    }

    if (pclk != 0U)
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d018      	beq.n	8009828 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	085a      	lsrs	r2, r3, #1
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	441a      	add	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	fbb2 f3f3 	udiv	r3, r2, r3
 8009808:	b29b      	uxth	r3, r3
 800980a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b0f      	cmp	r3, #15
 8009810:	d908      	bls.n	8009824 <UART_SetConfig+0x49c>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009818:	d204      	bcs.n	8009824 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	e001      	b.n	8009828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009834:	7fbb      	ldrb	r3, [r7, #30]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	40004c00 	.word	0x40004c00
 8009844:	40021000 	.word	0x40021000
 8009848:	40005000 	.word	0x40005000
 800984c:	007a1200 	.word	0x007a1200

08009850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2bff      	cmp	r3, #255	; 0xff
 800985e:	d904      	bls.n	800986a <UART_AdvFeatureConfig+0x1a>
 8009860:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8009864:	489d      	ldr	r0, [pc, #628]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009866:	f7f8 faa8 	bl	8001dba <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d018      	beq.n	80098a8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <UART_AdvFeatureConfig+0x42>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009886:	d004      	beq.n	8009892 <UART_AdvFeatureConfig+0x42>
 8009888:	f640 31cd 	movw	r1, #3021	; 0xbcd
 800988c:	4893      	ldr	r0, [pc, #588]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 800988e:	f7f8 fa94 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	f003 0302 	and.w	r3, r3, #2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d018      	beq.n	80098e6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d009      	beq.n	80098d0 <UART_AdvFeatureConfig+0x80>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c4:	d004      	beq.n	80098d0 <UART_AdvFeatureConfig+0x80>
 80098c6:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80098ca:	4884      	ldr	r0, [pc, #528]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 80098cc:	f7f8 fa75 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d018      	beq.n	8009924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <UART_AdvFeatureConfig+0xbe>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009902:	d004      	beq.n	800990e <UART_AdvFeatureConfig+0xbe>
 8009904:	f640 31db 	movw	r1, #3035	; 0xbdb
 8009908:	4874      	ldr	r0, [pc, #464]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 800990a:	f7f8 fa56 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b00      	cmp	r3, #0
 800992e:	d018      	beq.n	8009962 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <UART_AdvFeatureConfig+0xfc>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009940:	d004      	beq.n	800994c <UART_AdvFeatureConfig+0xfc>
 8009942:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8009946:	4865      	ldr	r0, [pc, #404]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009948:	f7f8 fa37 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f003 0310 	and.w	r3, r3, #16
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <UART_AdvFeatureConfig+0x13a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800997e:	d004      	beq.n	800998a <UART_AdvFeatureConfig+0x13a>
 8009980:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8009984:	4855      	ldr	r0, [pc, #340]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009986:	f7f8 fa18 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d018      	beq.n	80099de <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d009      	beq.n	80099c8 <UART_AdvFeatureConfig+0x178>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099bc:	d004      	beq.n	80099c8 <UART_AdvFeatureConfig+0x178>
 80099be:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 80099c2:	4846      	ldr	r0, [pc, #280]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 80099c4:	f7f8 f9f9 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d054      	beq.n	8009a94 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a3c      	ldr	r2, [pc, #240]	; (8009ae0 <UART_AdvFeatureConfig+0x290>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00e      	beq.n	8009a12 <UART_AdvFeatureConfig+0x1c2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a3a      	ldr	r2, [pc, #232]	; (8009ae4 <UART_AdvFeatureConfig+0x294>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d009      	beq.n	8009a12 <UART_AdvFeatureConfig+0x1c2>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a39      	ldr	r2, [pc, #228]	; (8009ae8 <UART_AdvFeatureConfig+0x298>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d004      	beq.n	8009a12 <UART_AdvFeatureConfig+0x1c2>
 8009a08:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009a0c:	4833      	ldr	r0, [pc, #204]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009a0e:	f7f8 f9d4 	bl	8001dba <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <UART_AdvFeatureConfig+0x1de>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a22:	d004      	beq.n	8009a2e <UART_AdvFeatureConfig+0x1de>
 8009a24:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8009a28:	482c      	ldr	r0, [pc, #176]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009a2a:	f7f8 f9c6 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4c:	d122      	bne.n	8009a94 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d013      	beq.n	8009a7e <UART_AdvFeatureConfig+0x22e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a5e:	d00e      	beq.n	8009a7e <UART_AdvFeatureConfig+0x22e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a68:	d009      	beq.n	8009a7e <UART_AdvFeatureConfig+0x22e>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a72:	d004      	beq.n	8009a7e <UART_AdvFeatureConfig+0x22e>
 8009a74:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009a78:	4818      	ldr	r0, [pc, #96]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009a7a:	f7f8 f99e 	bl	8001dba <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	430a      	orrs	r2, r1
 8009a92:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d018      	beq.n	8009ad2 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d009      	beq.n	8009abc <UART_AdvFeatureConfig+0x26c>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ab0:	d004      	beq.n	8009abc <UART_AdvFeatureConfig+0x26c>
 8009ab2:	f640 4105 	movw	r1, #3077	; 0xc05
 8009ab6:	4809      	ldr	r0, [pc, #36]	; (8009adc <UART_AdvFeatureConfig+0x28c>)
 8009ab8:	f7f8 f97f 	bl	8001dba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	605a      	str	r2, [r3, #4]
  }
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	0800c430 	.word	0x0800c430
 8009ae0:	40013800 	.word	0x40013800
 8009ae4:	40004400 	.word	0x40004400
 8009ae8:	40004800 	.word	0x40004800

08009aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009afc:	f7f8 fcec 	bl	80024d8 <HAL_GetTick>
 8009b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0308 	and.w	r3, r3, #8
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d10e      	bne.n	8009b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f82d 	bl	8009b7e <UART_WaitOnFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e023      	b.n	8009b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d10e      	bne.n	8009b5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f817 	bl	8009b7e <UART_WaitOnFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e00d      	b.n	8009b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b09c      	sub	sp, #112	; 0x70
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	603b      	str	r3, [r7, #0]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b8e:	e0a5      	b.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	f000 80a1 	beq.w	8009cdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9a:	f7f8 fc9d 	bl	80024d8 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d302      	bcc.n	8009bb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d13e      	bne.n	8009c2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	f023 0301 	bic.w	r3, r3, #1
 8009bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c02:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e5      	bne.n	8009be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e067      	b.n	8009cfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d04f      	beq.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c4a:	d147      	bne.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
 8009c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e6      	bne.n	8009c56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	613b      	str	r3, [r7, #16]
   return(result);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f023 0301 	bic.w	r3, r3, #1
 8009c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ca8:	623a      	str	r2, [r7, #32]
 8009caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	69f9      	ldr	r1, [r7, #28]
 8009cae:	6a3a      	ldr	r2, [r7, #32]
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e5      	bne.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e010      	b.n	8009cfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	69da      	ldr	r2, [r3, #28]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	bf0c      	ite	eq
 8009cec:	2301      	moveq	r3, #1
 8009cee:	2300      	movne	r3, #0
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	f43f af4a 	beq.w	8009b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3770      	adds	r7, #112	; 0x70
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b091      	sub	sp, #68	; 0x44
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	88fa      	ldrh	r2, [r7, #6]
 8009d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3a:	d10e      	bne.n	8009d5a <UART_Start_Receive_IT+0x52>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <UART_Start_Receive_IT+0x48>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d4e:	e02d      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	22ff      	movs	r2, #255	; 0xff
 8009d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d58:	e028      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10d      	bne.n	8009d7e <UART_Start_Receive_IT+0x76>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d104      	bne.n	8009d74 <UART_Start_Receive_IT+0x6c>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	22ff      	movs	r2, #255	; 0xff
 8009d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d72:	e01b      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	227f      	movs	r2, #127	; 0x7f
 8009d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d7c:	e016      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d86:	d10d      	bne.n	8009da4 <UART_Start_Receive_IT+0x9c>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <UART_Start_Receive_IT+0x92>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	227f      	movs	r2, #127	; 0x7f
 8009d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d98:	e008      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	223f      	movs	r2, #63	; 0x3f
 8009d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009da2:	e003      	b.n	8009dac <UART_Start_Receive_IT+0xa4>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2222      	movs	r2, #34	; 0x22
 8009db8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	f043 0301 	orr.w	r3, r3, #1
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dda:	637a      	str	r2, [r7, #52]	; 0x34
 8009ddc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e5      	bne.n	8009dba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df6:	d107      	bne.n	8009e08 <UART_Start_Receive_IT+0x100>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <UART_Start_Receive_IT+0x150>)
 8009e04:	665a      	str	r2, [r3, #100]	; 0x64
 8009e06:	e002      	b.n	8009e0e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4a14      	ldr	r2, [pc, #80]	; (8009e5c <UART_Start_Receive_IT+0x154>)
 8009e0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	613b      	str	r3, [r7, #16]
   return(result);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	623b      	str	r3, [r7, #32]
 8009e36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	69f9      	ldr	r1, [r7, #28]
 8009e3a:	6a3a      	ldr	r2, [r7, #32]
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e6      	bne.n	8009e16 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3744      	adds	r7, #68	; 0x44
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	0800a27b 	.word	0x0800a27b
 8009e5c:	0800a11f 	.word	0x0800a11f

08009e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b095      	sub	sp, #84	; 0x54
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e86:	643b      	str	r3, [r7, #64]	; 0x40
 8009e88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e6      	bne.n	8009e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e5      	bne.n	8009e9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d118      	bne.n	8009f08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f023 0310 	bic.w	r3, r3, #16
 8009eea:	647b      	str	r3, [r7, #68]	; 0x44
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef4:	61bb      	str	r3, [r7, #24]
 8009ef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6979      	ldr	r1, [r7, #20]
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	613b      	str	r3, [r7, #16]
   return(result);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e6      	bne.n	8009ed6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009f1a:	bf00      	nop
 8009f1c:	3754      	adds	r7, #84	; 0x54
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff fa09 	bl	800935c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b08f      	sub	sp, #60	; 0x3c
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f5e:	2b21      	cmp	r3, #33	; 0x21
 8009f60:	d14d      	bne.n	8009ffe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d132      	bne.n	8009fd4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	e853 3f00 	ldrex	r3, [r3]
 8009f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e6      	bne.n	8009f6e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	61bb      	str	r3, [r7, #24]
 8009fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6979      	ldr	r1, [r7, #20]
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	613b      	str	r3, [r7, #16]
   return(result);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e6      	bne.n	8009fa0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009fd2:	e014      	b.n	8009ffe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	b292      	uxth	r2, r2
 8009fe0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009ffe:	bf00      	nop
 800a000:	373c      	adds	r7, #60	; 0x3c
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b091      	sub	sp, #68	; 0x44
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a016:	2b21      	cmp	r3, #33	; 0x21
 800a018:	d151      	bne.n	800a0be <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d132      	bne.n	800a08c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	623b      	str	r3, [r7, #32]
   return(result);
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	633b      	str	r3, [r7, #48]	; 0x30
 800a046:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a04a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e6      	bne.n	800a026 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	60fb      	str	r3, [r7, #12]
   return(result);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	461a      	mov	r2, r3
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	69b9      	ldr	r1, [r7, #24]
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	617b      	str	r3, [r7, #20]
   return(result);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e6      	bne.n	800a058 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a08a:	e018      	b.n	800a0be <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a094:	881a      	ldrh	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a09e:	b292      	uxth	r2, r2
 800a0a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a6:	1c9a      	adds	r2, r3, #2
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a0be:	bf00      	nop
 800a0c0:	3744      	adds	r7, #68	; 0x44
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b088      	sub	sp, #32
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6979      	ldr	r1, [r7, #20]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e6      	bne.n	800a0d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2220      	movs	r2, #32
 800a108:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7f7 f96b 	bl	80013ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a116:	bf00      	nop
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b096      	sub	sp, #88	; 0x58
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a12c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a134:	2b22      	cmp	r3, #34	; 0x22
 800a136:	f040 8094 	bne.w	800a262 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a140:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a144:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a148:	b2d9      	uxtb	r1, r3
 800a14a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a154:	400a      	ands	r2, r1
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d177      	bne.n	800a272 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a196:	653b      	str	r3, [r7, #80]	; 0x50
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1d4:	633a      	str	r2, [r7, #48]	; 0x30
 800a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d12e      	bne.n	800a25a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0310 	bic.w	r3, r3, #16
 800a216:	64bb      	str	r3, [r7, #72]	; 0x48
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	69b9      	ldr	r1, [r7, #24]
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	617b      	str	r3, [r7, #20]
   return(result);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e6      	bne.n	800a202 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f003 0310 	and.w	r3, r3, #16
 800a23e:	2b10      	cmp	r3, #16
 800a240:	d103      	bne.n	800a24a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2210      	movs	r2, #16
 800a248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff f88c 	bl	8009370 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a258:	e00b      	b.n	800a272 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7f7 f8fc 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 800a260:	e007      	b.n	800a272 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f042 0208 	orr.w	r2, r2, #8
 800a270:	619a      	str	r2, [r3, #24]
}
 800a272:	bf00      	nop
 800a274:	3758      	adds	r7, #88	; 0x58
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b096      	sub	sp, #88	; 0x58
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a290:	2b22      	cmp	r3, #34	; 0x22
 800a292:	f040 8094 	bne.w	800a3be <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a29c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2a6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a2aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ba:	1c9a      	adds	r2, r3, #2
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d177      	bne.n	800a3ce <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e6      	bne.n	800a2de <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3308      	adds	r3, #8
 800a316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	f023 0301 	bic.w	r3, r3, #1
 800a326:	64bb      	str	r3, [r7, #72]	; 0x48
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3308      	adds	r3, #8
 800a32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a330:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e5      	bne.n	800a310 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a354:	2b01      	cmp	r3, #1
 800a356:	d12e      	bne.n	800a3b6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	647b      	str	r3, [r7, #68]	; 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	613b      	str	r3, [r7, #16]
   return(result);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d103      	bne.n	800a3a6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7fe ffde 	bl	8009370 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3b4:	e00b      	b.n	800a3ce <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7f7 f84e 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 800a3bc:	e007      	b.n	800a3ce <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0208 	orr.w	r2, r2, #8
 800a3cc:	619a      	str	r2, [r3, #24]
}
 800a3ce:	bf00      	nop
 800a3d0:	3758      	adds	r7, #88	; 0x58
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3de:	bf00      	nop
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
	...

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	; (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000088 	.word	0x20000088

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	; (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	; (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	; (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	; (800a43c <__libc_init_array+0x44>)
 800a40c:	f001 fe0c 	bl	800c028 <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	0800c664 	.word	0x0800c664
 800a434:	0800c664 	.word	0x0800c664
 800a438:	0800c664 	.word	0x0800c664
 800a43c:	0800c668 	.word	0x0800c668

0800a440 <memset>:
 800a440:	4402      	add	r2, r0
 800a442:	4603      	mov	r3, r0
 800a444:	4293      	cmp	r3, r2
 800a446:	d100      	bne.n	800a44a <memset+0xa>
 800a448:	4770      	bx	lr
 800a44a:	f803 1b01 	strb.w	r1, [r3], #1
 800a44e:	e7f9      	b.n	800a444 <memset+0x4>

0800a450 <iprintf>:
 800a450:	b40f      	push	{r0, r1, r2, r3}
 800a452:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <iprintf+0x2c>)
 800a454:	b513      	push	{r0, r1, r4, lr}
 800a456:	681c      	ldr	r4, [r3, #0]
 800a458:	b124      	cbz	r4, 800a464 <iprintf+0x14>
 800a45a:	69a3      	ldr	r3, [r4, #24]
 800a45c:	b913      	cbnz	r3, 800a464 <iprintf+0x14>
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 f91a 	bl	800a698 <__sinit>
 800a464:	ab05      	add	r3, sp, #20
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	68a1      	ldr	r1, [r4, #8]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	4620      	mov	r0, r4
 800a46e:	f000 fd77 	bl	800af60 <_vfiprintf_r>
 800a472:	b002      	add	sp, #8
 800a474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a478:	b004      	add	sp, #16
 800a47a:	4770      	bx	lr
 800a47c:	20000088 	.word	0x20000088

0800a480 <siscanf>:
 800a480:	b40e      	push	{r1, r2, r3}
 800a482:	b510      	push	{r4, lr}
 800a484:	b09f      	sub	sp, #124	; 0x7c
 800a486:	ac21      	add	r4, sp, #132	; 0x84
 800a488:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a48c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a490:	9201      	str	r2, [sp, #4]
 800a492:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a496:	9004      	str	r0, [sp, #16]
 800a498:	9008      	str	r0, [sp, #32]
 800a49a:	f7f5 feab 	bl	80001f4 <strlen>
 800a49e:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <siscanf+0x50>)
 800a4a0:	9005      	str	r0, [sp, #20]
 800a4a2:	9009      	str	r0, [sp, #36]	; 0x24
 800a4a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a4a6:	480b      	ldr	r0, [pc, #44]	; (800a4d4 <siscanf+0x54>)
 800a4a8:	9a01      	ldr	r2, [sp, #4]
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	9403      	str	r4, [sp, #12]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9311      	str	r3, [sp, #68]	; 0x44
 800a4b2:	9316      	str	r3, [sp, #88]	; 0x58
 800a4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4623      	mov	r3, r4
 800a4c0:	f000 fbac 	bl	800ac1c <__ssvfiscanf_r>
 800a4c4:	b01f      	add	sp, #124	; 0x7c
 800a4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ca:	b003      	add	sp, #12
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	0800a4fb 	.word	0x0800a4fb
 800a4d4:	20000088 	.word	0x20000088

0800a4d8 <__sread>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	f001 f94e 	bl	800b780 <_read_r>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	bfab      	itete	ge
 800a4e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a4ec:	181b      	addge	r3, r3, r0
 800a4ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4f2:	bfac      	ite	ge
 800a4f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4f6:	81a3      	strhlt	r3, [r4, #12]
 800a4f8:	bd10      	pop	{r4, pc}

0800a4fa <__seofread>:
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4770      	bx	lr

0800a4fe <__swrite>:
 800a4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	461f      	mov	r7, r3
 800a504:	898b      	ldrh	r3, [r1, #12]
 800a506:	05db      	lsls	r3, r3, #23
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	4616      	mov	r6, r2
 800a50e:	d505      	bpl.n	800a51c <__swrite+0x1e>
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	2302      	movs	r3, #2
 800a516:	2200      	movs	r2, #0
 800a518:	f000 f95e 	bl	800a7d8 <_lseek_r>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	4628      	mov	r0, r5
 800a52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	f000 b837 	b.w	800a5a4 <_write_r>

0800a536 <__sseek>:
 800a536:	b510      	push	{r4, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53e:	f000 f94b 	bl	800a7d8 <_lseek_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	bf15      	itete	ne
 800a548:	6560      	strne	r0, [r4, #84]	; 0x54
 800a54a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a54e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a552:	81a3      	strheq	r3, [r4, #12]
 800a554:	bf18      	it	ne
 800a556:	81a3      	strhne	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__sclose>:
 800a55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55e:	f000 b833 	b.w	800a5c8 <_close_r>
	...

0800a564 <_vsiprintf_r>:
 800a564:	b500      	push	{lr}
 800a566:	b09b      	sub	sp, #108	; 0x6c
 800a568:	9100      	str	r1, [sp, #0]
 800a56a:	9104      	str	r1, [sp, #16]
 800a56c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	9102      	str	r1, [sp, #8]
 800a574:	4905      	ldr	r1, [pc, #20]	; (800a58c <_vsiprintf_r+0x28>)
 800a576:	9103      	str	r1, [sp, #12]
 800a578:	4669      	mov	r1, sp
 800a57a:	f000 f9f5 	bl	800a968 <_svfiprintf_r>
 800a57e:	9b00      	ldr	r3, [sp, #0]
 800a580:	2200      	movs	r2, #0
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	b01b      	add	sp, #108	; 0x6c
 800a586:	f85d fb04 	ldr.w	pc, [sp], #4
 800a58a:	bf00      	nop
 800a58c:	ffff0208 	.word	0xffff0208

0800a590 <vsiprintf>:
 800a590:	4613      	mov	r3, r2
 800a592:	460a      	mov	r2, r1
 800a594:	4601      	mov	r1, r0
 800a596:	4802      	ldr	r0, [pc, #8]	; (800a5a0 <vsiprintf+0x10>)
 800a598:	6800      	ldr	r0, [r0, #0]
 800a59a:	f7ff bfe3 	b.w	800a564 <_vsiprintf_r>
 800a59e:	bf00      	nop
 800a5a0:	20000088 	.word	0x20000088

0800a5a4 <_write_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_write_r+0x20>)
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f7 fd49 	bl	800204a <_write>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_write_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_write_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20000a38 	.word	0x20000a38

0800a5c8 <_close_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_close_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f7 fd55 	bl	8002082 <_close>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_close_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_close_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000a38 	.word	0x20000a38

0800a5e8 <std>:
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f6:	6083      	str	r3, [r0, #8]
 800a5f8:	8181      	strh	r1, [r0, #12]
 800a5fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a5fc:	81c2      	strh	r2, [r0, #14]
 800a5fe:	6183      	str	r3, [r0, #24]
 800a600:	4619      	mov	r1, r3
 800a602:	2208      	movs	r2, #8
 800a604:	305c      	adds	r0, #92	; 0x5c
 800a606:	f7ff ff1b 	bl	800a440 <memset>
 800a60a:	4b05      	ldr	r3, [pc, #20]	; (800a620 <std+0x38>)
 800a60c:	6263      	str	r3, [r4, #36]	; 0x24
 800a60e:	4b05      	ldr	r3, [pc, #20]	; (800a624 <std+0x3c>)
 800a610:	62a3      	str	r3, [r4, #40]	; 0x28
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <std+0x40>)
 800a614:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <std+0x44>)
 800a618:	6224      	str	r4, [r4, #32]
 800a61a:	6323      	str	r3, [r4, #48]	; 0x30
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	0800a4d9 	.word	0x0800a4d9
 800a624:	0800a4ff 	.word	0x0800a4ff
 800a628:	0800a537 	.word	0x0800a537
 800a62c:	0800a55b 	.word	0x0800a55b

0800a630 <_cleanup_r>:
 800a630:	4901      	ldr	r1, [pc, #4]	; (800a638 <_cleanup_r+0x8>)
 800a632:	f000 b8af 	b.w	800a794 <_fwalk_reent>
 800a636:	bf00      	nop
 800a638:	0800bd41 	.word	0x0800bd41

0800a63c <__sfmoreglue>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	1e4a      	subs	r2, r1, #1
 800a640:	2568      	movs	r5, #104	; 0x68
 800a642:	4355      	muls	r5, r2
 800a644:	460e      	mov	r6, r1
 800a646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a64a:	f000 f8d7 	bl	800a7fc <_malloc_r>
 800a64e:	4604      	mov	r4, r0
 800a650:	b140      	cbz	r0, 800a664 <__sfmoreglue+0x28>
 800a652:	2100      	movs	r1, #0
 800a654:	e9c0 1600 	strd	r1, r6, [r0]
 800a658:	300c      	adds	r0, #12
 800a65a:	60a0      	str	r0, [r4, #8]
 800a65c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a660:	f7ff feee 	bl	800a440 <memset>
 800a664:	4620      	mov	r0, r4
 800a666:	bd70      	pop	{r4, r5, r6, pc}

0800a668 <__sfp_lock_acquire>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__sfp_lock_acquire+0x8>)
 800a66a:	f000 b8b3 	b.w	800a7d4 <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	20000a34 	.word	0x20000a34

0800a674 <__sfp_lock_release>:
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <__sfp_lock_release+0x8>)
 800a676:	f000 b8ae 	b.w	800a7d6 <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	20000a34 	.word	0x20000a34

0800a680 <__sinit_lock_acquire>:
 800a680:	4801      	ldr	r0, [pc, #4]	; (800a688 <__sinit_lock_acquire+0x8>)
 800a682:	f000 b8a7 	b.w	800a7d4 <__retarget_lock_acquire_recursive>
 800a686:	bf00      	nop
 800a688:	20000a2f 	.word	0x20000a2f

0800a68c <__sinit_lock_release>:
 800a68c:	4801      	ldr	r0, [pc, #4]	; (800a694 <__sinit_lock_release+0x8>)
 800a68e:	f000 b8a2 	b.w	800a7d6 <__retarget_lock_release_recursive>
 800a692:	bf00      	nop
 800a694:	20000a2f 	.word	0x20000a2f

0800a698 <__sinit>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	4604      	mov	r4, r0
 800a69c:	f7ff fff0 	bl	800a680 <__sinit_lock_acquire>
 800a6a0:	69a3      	ldr	r3, [r4, #24]
 800a6a2:	b11b      	cbz	r3, 800a6ac <__sinit+0x14>
 800a6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a8:	f7ff bff0 	b.w	800a68c <__sinit_lock_release>
 800a6ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a6b2:	4b13      	ldr	r3, [pc, #76]	; (800a700 <__sinit+0x68>)
 800a6b4:	4a13      	ldr	r2, [pc, #76]	; (800a704 <__sinit+0x6c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6ba:	42a3      	cmp	r3, r4
 800a6bc:	bf04      	itt	eq
 800a6be:	2301      	moveq	r3, #1
 800a6c0:	61a3      	streq	r3, [r4, #24]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f820 	bl	800a708 <__sfp>
 800a6c8:	6060      	str	r0, [r4, #4]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 f81c 	bl	800a708 <__sfp>
 800a6d0:	60a0      	str	r0, [r4, #8]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 f818 	bl	800a708 <__sfp>
 800a6d8:	2200      	movs	r2, #0
 800a6da:	60e0      	str	r0, [r4, #12]
 800a6dc:	2104      	movs	r1, #4
 800a6de:	6860      	ldr	r0, [r4, #4]
 800a6e0:	f7ff ff82 	bl	800a5e8 <std>
 800a6e4:	68a0      	ldr	r0, [r4, #8]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	2109      	movs	r1, #9
 800a6ea:	f7ff ff7d 	bl	800a5e8 <std>
 800a6ee:	68e0      	ldr	r0, [r4, #12]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	2112      	movs	r1, #18
 800a6f4:	f7ff ff78 	bl	800a5e8 <std>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	61a3      	str	r3, [r4, #24]
 800a6fc:	e7d2      	b.n	800a6a4 <__sinit+0xc>
 800a6fe:	bf00      	nop
 800a700:	0800c4b0 	.word	0x0800c4b0
 800a704:	0800a631 	.word	0x0800a631

0800a708 <__sfp>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	4607      	mov	r7, r0
 800a70c:	f7ff ffac 	bl	800a668 <__sfp_lock_acquire>
 800a710:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <__sfp+0x84>)
 800a712:	681e      	ldr	r6, [r3, #0]
 800a714:	69b3      	ldr	r3, [r6, #24]
 800a716:	b913      	cbnz	r3, 800a71e <__sfp+0x16>
 800a718:	4630      	mov	r0, r6
 800a71a:	f7ff ffbd 	bl	800a698 <__sinit>
 800a71e:	3648      	adds	r6, #72	; 0x48
 800a720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a724:	3b01      	subs	r3, #1
 800a726:	d503      	bpl.n	800a730 <__sfp+0x28>
 800a728:	6833      	ldr	r3, [r6, #0]
 800a72a:	b30b      	cbz	r3, 800a770 <__sfp+0x68>
 800a72c:	6836      	ldr	r6, [r6, #0]
 800a72e:	e7f7      	b.n	800a720 <__sfp+0x18>
 800a730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a734:	b9d5      	cbnz	r5, 800a76c <__sfp+0x64>
 800a736:	4b16      	ldr	r3, [pc, #88]	; (800a790 <__sfp+0x88>)
 800a738:	60e3      	str	r3, [r4, #12]
 800a73a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a73e:	6665      	str	r5, [r4, #100]	; 0x64
 800a740:	f000 f847 	bl	800a7d2 <__retarget_lock_init_recursive>
 800a744:	f7ff ff96 	bl	800a674 <__sfp_lock_release>
 800a748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a74c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a750:	6025      	str	r5, [r4, #0]
 800a752:	61a5      	str	r5, [r4, #24]
 800a754:	2208      	movs	r2, #8
 800a756:	4629      	mov	r1, r5
 800a758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a75c:	f7ff fe70 	bl	800a440 <memset>
 800a760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a768:	4620      	mov	r0, r4
 800a76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76c:	3468      	adds	r4, #104	; 0x68
 800a76e:	e7d9      	b.n	800a724 <__sfp+0x1c>
 800a770:	2104      	movs	r1, #4
 800a772:	4638      	mov	r0, r7
 800a774:	f7ff ff62 	bl	800a63c <__sfmoreglue>
 800a778:	4604      	mov	r4, r0
 800a77a:	6030      	str	r0, [r6, #0]
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d1d5      	bne.n	800a72c <__sfp+0x24>
 800a780:	f7ff ff78 	bl	800a674 <__sfp_lock_release>
 800a784:	230c      	movs	r3, #12
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	e7ee      	b.n	800a768 <__sfp+0x60>
 800a78a:	bf00      	nop
 800a78c:	0800c4b0 	.word	0x0800c4b0
 800a790:	ffff0001 	.word	0xffff0001

0800a794 <_fwalk_reent>:
 800a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a798:	4606      	mov	r6, r0
 800a79a:	4688      	mov	r8, r1
 800a79c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7a0:	2700      	movs	r7, #0
 800a7a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a7aa:	d505      	bpl.n	800a7b8 <_fwalk_reent+0x24>
 800a7ac:	6824      	ldr	r4, [r4, #0]
 800a7ae:	2c00      	cmp	r4, #0
 800a7b0:	d1f7      	bne.n	800a7a2 <_fwalk_reent+0xe>
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b8:	89ab      	ldrh	r3, [r5, #12]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d907      	bls.n	800a7ce <_fwalk_reent+0x3a>
 800a7be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	d003      	beq.n	800a7ce <_fwalk_reent+0x3a>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	47c0      	blx	r8
 800a7cc:	4307      	orrs	r7, r0
 800a7ce:	3568      	adds	r5, #104	; 0x68
 800a7d0:	e7e9      	b.n	800a7a6 <_fwalk_reent+0x12>

0800a7d2 <__retarget_lock_init_recursive>:
 800a7d2:	4770      	bx	lr

0800a7d4 <__retarget_lock_acquire_recursive>:
 800a7d4:	4770      	bx	lr

0800a7d6 <__retarget_lock_release_recursive>:
 800a7d6:	4770      	bx	lr

0800a7d8 <_lseek_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d07      	ldr	r5, [pc, #28]	; (800a7f8 <_lseek_r+0x20>)
 800a7dc:	4604      	mov	r4, r0
 800a7de:	4608      	mov	r0, r1
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	602a      	str	r2, [r5, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f7f7 fc72 	bl	80020d0 <_lseek>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_lseek_r+0x1e>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_lseek_r+0x1e>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	20000a38 	.word	0x20000a38

0800a7fc <_malloc_r>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	1ccd      	adds	r5, r1, #3
 800a800:	f025 0503 	bic.w	r5, r5, #3
 800a804:	3508      	adds	r5, #8
 800a806:	2d0c      	cmp	r5, #12
 800a808:	bf38      	it	cc
 800a80a:	250c      	movcc	r5, #12
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	4606      	mov	r6, r0
 800a810:	db01      	blt.n	800a816 <_malloc_r+0x1a>
 800a812:	42a9      	cmp	r1, r5
 800a814:	d903      	bls.n	800a81e <_malloc_r+0x22>
 800a816:	230c      	movs	r3, #12
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	2000      	movs	r0, #0
 800a81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81e:	f001 fb57 	bl	800bed0 <__malloc_lock>
 800a822:	4921      	ldr	r1, [pc, #132]	; (800a8a8 <_malloc_r+0xac>)
 800a824:	680a      	ldr	r2, [r1, #0]
 800a826:	4614      	mov	r4, r2
 800a828:	b99c      	cbnz	r4, 800a852 <_malloc_r+0x56>
 800a82a:	4f20      	ldr	r7, [pc, #128]	; (800a8ac <_malloc_r+0xb0>)
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	b923      	cbnz	r3, 800a83a <_malloc_r+0x3e>
 800a830:	4621      	mov	r1, r4
 800a832:	4630      	mov	r0, r6
 800a834:	f000 ffb6 	bl	800b7a4 <_sbrk_r>
 800a838:	6038      	str	r0, [r7, #0]
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	f000 ffb1 	bl	800b7a4 <_sbrk_r>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	d123      	bne.n	800a88e <_malloc_r+0x92>
 800a846:	230c      	movs	r3, #12
 800a848:	6033      	str	r3, [r6, #0]
 800a84a:	4630      	mov	r0, r6
 800a84c:	f001 fb46 	bl	800bedc <__malloc_unlock>
 800a850:	e7e3      	b.n	800a81a <_malloc_r+0x1e>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	1b5b      	subs	r3, r3, r5
 800a856:	d417      	bmi.n	800a888 <_malloc_r+0x8c>
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d903      	bls.n	800a864 <_malloc_r+0x68>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	441c      	add	r4, r3
 800a860:	6025      	str	r5, [r4, #0]
 800a862:	e004      	b.n	800a86e <_malloc_r+0x72>
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	42a2      	cmp	r2, r4
 800a868:	bf0c      	ite	eq
 800a86a:	600b      	streq	r3, [r1, #0]
 800a86c:	6053      	strne	r3, [r2, #4]
 800a86e:	4630      	mov	r0, r6
 800a870:	f001 fb34 	bl	800bedc <__malloc_unlock>
 800a874:	f104 000b 	add.w	r0, r4, #11
 800a878:	1d23      	adds	r3, r4, #4
 800a87a:	f020 0007 	bic.w	r0, r0, #7
 800a87e:	1ac2      	subs	r2, r0, r3
 800a880:	d0cc      	beq.n	800a81c <_malloc_r+0x20>
 800a882:	1a1b      	subs	r3, r3, r0
 800a884:	50a3      	str	r3, [r4, r2]
 800a886:	e7c9      	b.n	800a81c <_malloc_r+0x20>
 800a888:	4622      	mov	r2, r4
 800a88a:	6864      	ldr	r4, [r4, #4]
 800a88c:	e7cc      	b.n	800a828 <_malloc_r+0x2c>
 800a88e:	1cc4      	adds	r4, r0, #3
 800a890:	f024 0403 	bic.w	r4, r4, #3
 800a894:	42a0      	cmp	r0, r4
 800a896:	d0e3      	beq.n	800a860 <_malloc_r+0x64>
 800a898:	1a21      	subs	r1, r4, r0
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 ff82 	bl	800b7a4 <_sbrk_r>
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d1dd      	bne.n	800a860 <_malloc_r+0x64>
 800a8a4:	e7cf      	b.n	800a846 <_malloc_r+0x4a>
 800a8a6:	bf00      	nop
 800a8a8:	20000160 	.word	0x20000160
 800a8ac:	20000164 	.word	0x20000164

0800a8b0 <__ssputs_r>:
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	688e      	ldr	r6, [r1, #8]
 800a8b6:	429e      	cmp	r6, r3
 800a8b8:	4682      	mov	sl, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	4690      	mov	r8, r2
 800a8be:	461f      	mov	r7, r3
 800a8c0:	d838      	bhi.n	800a934 <__ssputs_r+0x84>
 800a8c2:	898a      	ldrh	r2, [r1, #12]
 800a8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8c8:	d032      	beq.n	800a930 <__ssputs_r+0x80>
 800a8ca:	6825      	ldr	r5, [r4, #0]
 800a8cc:	6909      	ldr	r1, [r1, #16]
 800a8ce:	eba5 0901 	sub.w	r9, r5, r1
 800a8d2:	6965      	ldr	r5, [r4, #20]
 800a8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8dc:	3301      	adds	r3, #1
 800a8de:	444b      	add	r3, r9
 800a8e0:	106d      	asrs	r5, r5, #1
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	bf38      	it	cc
 800a8e6:	461d      	movcc	r5, r3
 800a8e8:	0553      	lsls	r3, r2, #21
 800a8ea:	d531      	bpl.n	800a950 <__ssputs_r+0xa0>
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7ff ff85 	bl	800a7fc <_malloc_r>
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	b950      	cbnz	r0, 800a90c <__ssputs_r+0x5c>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	f8ca 3000 	str.w	r3, [sl]
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90c:	6921      	ldr	r1, [r4, #16]
 800a90e:	464a      	mov	r2, r9
 800a910:	f001 fab6 	bl	800be80 <memcpy>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	6126      	str	r6, [r4, #16]
 800a922:	6165      	str	r5, [r4, #20]
 800a924:	444e      	add	r6, r9
 800a926:	eba5 0509 	sub.w	r5, r5, r9
 800a92a:	6026      	str	r6, [r4, #0]
 800a92c:	60a5      	str	r5, [r4, #8]
 800a92e:	463e      	mov	r6, r7
 800a930:	42be      	cmp	r6, r7
 800a932:	d900      	bls.n	800a936 <__ssputs_r+0x86>
 800a934:	463e      	mov	r6, r7
 800a936:	4632      	mov	r2, r6
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	4641      	mov	r1, r8
 800a93c:	f001 faae 	bl	800be9c <memmove>
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	1b9b      	subs	r3, r3, r6
 800a946:	4432      	add	r2, r6
 800a948:	60a3      	str	r3, [r4, #8]
 800a94a:	6022      	str	r2, [r4, #0]
 800a94c:	2000      	movs	r0, #0
 800a94e:	e7db      	b.n	800a908 <__ssputs_r+0x58>
 800a950:	462a      	mov	r2, r5
 800a952:	f001 fb19 	bl	800bf88 <_realloc_r>
 800a956:	4606      	mov	r6, r0
 800a958:	2800      	cmp	r0, #0
 800a95a:	d1e1      	bne.n	800a920 <__ssputs_r+0x70>
 800a95c:	6921      	ldr	r1, [r4, #16]
 800a95e:	4650      	mov	r0, sl
 800a960:	f001 fac2 	bl	800bee8 <_free_r>
 800a964:	e7c7      	b.n	800a8f6 <__ssputs_r+0x46>
	...

0800a968 <_svfiprintf_r>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	4698      	mov	r8, r3
 800a96e:	898b      	ldrh	r3, [r1, #12]
 800a970:	061b      	lsls	r3, r3, #24
 800a972:	b09d      	sub	sp, #116	; 0x74
 800a974:	4607      	mov	r7, r0
 800a976:	460d      	mov	r5, r1
 800a978:	4614      	mov	r4, r2
 800a97a:	d50e      	bpl.n	800a99a <_svfiprintf_r+0x32>
 800a97c:	690b      	ldr	r3, [r1, #16]
 800a97e:	b963      	cbnz	r3, 800a99a <_svfiprintf_r+0x32>
 800a980:	2140      	movs	r1, #64	; 0x40
 800a982:	f7ff ff3b 	bl	800a7fc <_malloc_r>
 800a986:	6028      	str	r0, [r5, #0]
 800a988:	6128      	str	r0, [r5, #16]
 800a98a:	b920      	cbnz	r0, 800a996 <_svfiprintf_r+0x2e>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	e0d1      	b.n	800ab3a <_svfiprintf_r+0x1d2>
 800a996:	2340      	movs	r3, #64	; 0x40
 800a998:	616b      	str	r3, [r5, #20]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	2320      	movs	r3, #32
 800a9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9a8:	2330      	movs	r3, #48	; 0x30
 800a9aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab54 <_svfiprintf_r+0x1ec>
 800a9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	4623      	mov	r3, r4
 800a9b8:	469a      	mov	sl, r3
 800a9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9be:	b10a      	cbz	r2, 800a9c4 <_svfiprintf_r+0x5c>
 800a9c0:	2a25      	cmp	r2, #37	; 0x25
 800a9c2:	d1f9      	bne.n	800a9b8 <_svfiprintf_r+0x50>
 800a9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9c8:	d00b      	beq.n	800a9e2 <_svfiprintf_r+0x7a>
 800a9ca:	465b      	mov	r3, fp
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f7ff ff6d 	bl	800a8b0 <__ssputs_r>
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f000 80aa 	beq.w	800ab30 <_svfiprintf_r+0x1c8>
 800a9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9de:	445a      	add	r2, fp
 800a9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80a2 	beq.w	800ab30 <_svfiprintf_r+0x1c8>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9f6:	f10a 0a01 	add.w	sl, sl, #1
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa02:	931a      	str	r3, [sp, #104]	; 0x68
 800aa04:	4654      	mov	r4, sl
 800aa06:	2205      	movs	r2, #5
 800aa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0c:	4851      	ldr	r0, [pc, #324]	; (800ab54 <_svfiprintf_r+0x1ec>)
 800aa0e:	f7f5 fbff 	bl	8000210 <memchr>
 800aa12:	9a04      	ldr	r2, [sp, #16]
 800aa14:	b9d8      	cbnz	r0, 800aa4e <_svfiprintf_r+0xe6>
 800aa16:	06d0      	lsls	r0, r2, #27
 800aa18:	bf44      	itt	mi
 800aa1a:	2320      	movmi	r3, #32
 800aa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa20:	0711      	lsls	r1, r2, #28
 800aa22:	bf44      	itt	mi
 800aa24:	232b      	movmi	r3, #43	; 0x2b
 800aa26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa30:	d015      	beq.n	800aa5e <_svfiprintf_r+0xf6>
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	4654      	mov	r4, sl
 800aa36:	2000      	movs	r0, #0
 800aa38:	f04f 0c0a 	mov.w	ip, #10
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa42:	3b30      	subs	r3, #48	; 0x30
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d94e      	bls.n	800aae6 <_svfiprintf_r+0x17e>
 800aa48:	b1b0      	cbz	r0, 800aa78 <_svfiprintf_r+0x110>
 800aa4a:	9207      	str	r2, [sp, #28]
 800aa4c:	e014      	b.n	800aa78 <_svfiprintf_r+0x110>
 800aa4e:	eba0 0308 	sub.w	r3, r0, r8
 800aa52:	fa09 f303 	lsl.w	r3, r9, r3
 800aa56:	4313      	orrs	r3, r2
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	46a2      	mov	sl, r4
 800aa5c:	e7d2      	b.n	800aa04 <_svfiprintf_r+0x9c>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	1d19      	adds	r1, r3, #4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	9103      	str	r1, [sp, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfbb      	ittet	lt
 800aa6a:	425b      	neglt	r3, r3
 800aa6c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa70:	9307      	strge	r3, [sp, #28]
 800aa72:	9307      	strlt	r3, [sp, #28]
 800aa74:	bfb8      	it	lt
 800aa76:	9204      	strlt	r2, [sp, #16]
 800aa78:	7823      	ldrb	r3, [r4, #0]
 800aa7a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa7c:	d10c      	bne.n	800aa98 <_svfiprintf_r+0x130>
 800aa7e:	7863      	ldrb	r3, [r4, #1]
 800aa80:	2b2a      	cmp	r3, #42	; 0x2a
 800aa82:	d135      	bne.n	800aaf0 <_svfiprintf_r+0x188>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	1d1a      	adds	r2, r3, #4
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	9203      	str	r2, [sp, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfb8      	it	lt
 800aa90:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa94:	3402      	adds	r4, #2
 800aa96:	9305      	str	r3, [sp, #20]
 800aa98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab64 <_svfiprintf_r+0x1fc>
 800aa9c:	7821      	ldrb	r1, [r4, #0]
 800aa9e:	2203      	movs	r2, #3
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	f7f5 fbb5 	bl	8000210 <memchr>
 800aaa6:	b140      	cbz	r0, 800aaba <_svfiprintf_r+0x152>
 800aaa8:	2340      	movs	r3, #64	; 0x40
 800aaaa:	eba0 000a 	sub.w	r0, r0, sl
 800aaae:	fa03 f000 	lsl.w	r0, r3, r0
 800aab2:	9b04      	ldr	r3, [sp, #16]
 800aab4:	4303      	orrs	r3, r0
 800aab6:	3401      	adds	r4, #1
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabe:	4826      	ldr	r0, [pc, #152]	; (800ab58 <_svfiprintf_r+0x1f0>)
 800aac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aac4:	2206      	movs	r2, #6
 800aac6:	f7f5 fba3 	bl	8000210 <memchr>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d038      	beq.n	800ab40 <_svfiprintf_r+0x1d8>
 800aace:	4b23      	ldr	r3, [pc, #140]	; (800ab5c <_svfiprintf_r+0x1f4>)
 800aad0:	bb1b      	cbnz	r3, 800ab1a <_svfiprintf_r+0x1b2>
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	3307      	adds	r3, #7
 800aad6:	f023 0307 	bic.w	r3, r3, #7
 800aada:	3308      	adds	r3, #8
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae0:	4433      	add	r3, r6
 800aae2:	9309      	str	r3, [sp, #36]	; 0x24
 800aae4:	e767      	b.n	800a9b6 <_svfiprintf_r+0x4e>
 800aae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaea:	460c      	mov	r4, r1
 800aaec:	2001      	movs	r0, #1
 800aaee:	e7a5      	b.n	800aa3c <_svfiprintf_r+0xd4>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4620      	mov	r0, r4
 800aafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab02:	3a30      	subs	r2, #48	; 0x30
 800ab04:	2a09      	cmp	r2, #9
 800ab06:	d903      	bls.n	800ab10 <_svfiprintf_r+0x1a8>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0c5      	beq.n	800aa98 <_svfiprintf_r+0x130>
 800ab0c:	9105      	str	r1, [sp, #20]
 800ab0e:	e7c3      	b.n	800aa98 <_svfiprintf_r+0x130>
 800ab10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab14:	4604      	mov	r4, r0
 800ab16:	2301      	movs	r3, #1
 800ab18:	e7f0      	b.n	800aafc <_svfiprintf_r+0x194>
 800ab1a:	ab03      	add	r3, sp, #12
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	462a      	mov	r2, r5
 800ab20:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <_svfiprintf_r+0x1f8>)
 800ab22:	a904      	add	r1, sp, #16
 800ab24:	4638      	mov	r0, r7
 800ab26:	f3af 8000 	nop.w
 800ab2a:	1c42      	adds	r2, r0, #1
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	d1d6      	bne.n	800aade <_svfiprintf_r+0x176>
 800ab30:	89ab      	ldrh	r3, [r5, #12]
 800ab32:	065b      	lsls	r3, r3, #25
 800ab34:	f53f af2c 	bmi.w	800a990 <_svfiprintf_r+0x28>
 800ab38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3a:	b01d      	add	sp, #116	; 0x74
 800ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab40:	ab03      	add	r3, sp, #12
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	462a      	mov	r2, r5
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <_svfiprintf_r+0x1f8>)
 800ab48:	a904      	add	r1, sp, #16
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f000 fba6 	bl	800b29c <_printf_i>
 800ab50:	e7eb      	b.n	800ab2a <_svfiprintf_r+0x1c2>
 800ab52:	bf00      	nop
 800ab54:	0800c514 	.word	0x0800c514
 800ab58:	0800c51e 	.word	0x0800c51e
 800ab5c:	00000000 	.word	0x00000000
 800ab60:	0800a8b1 	.word	0x0800a8b1
 800ab64:	0800c51a 	.word	0x0800c51a

0800ab68 <_sungetc_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	1c4b      	adds	r3, r1, #1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	d103      	bne.n	800ab78 <_sungetc_r+0x10>
 800ab70:	f04f 35ff 	mov.w	r5, #4294967295
 800ab74:	4628      	mov	r0, r5
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	8993      	ldrh	r3, [r2, #12]
 800ab7a:	f023 0320 	bic.w	r3, r3, #32
 800ab7e:	8193      	strh	r3, [r2, #12]
 800ab80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab82:	6852      	ldr	r2, [r2, #4]
 800ab84:	b2cd      	uxtb	r5, r1
 800ab86:	b18b      	cbz	r3, 800abac <_sungetc_r+0x44>
 800ab88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	dd08      	ble.n	800aba0 <_sungetc_r+0x38>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	1e5a      	subs	r2, r3, #1
 800ab92:	6022      	str	r2, [r4, #0]
 800ab94:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	6063      	str	r3, [r4, #4]
 800ab9e:	e7e9      	b.n	800ab74 <_sungetc_r+0xc>
 800aba0:	4621      	mov	r1, r4
 800aba2:	f000 ff4d 	bl	800ba40 <__submore>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d0f1      	beq.n	800ab8e <_sungetc_r+0x26>
 800abaa:	e7e1      	b.n	800ab70 <_sungetc_r+0x8>
 800abac:	6921      	ldr	r1, [r4, #16]
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	b151      	cbz	r1, 800abc8 <_sungetc_r+0x60>
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d208      	bcs.n	800abc8 <_sungetc_r+0x60>
 800abb6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800abba:	42a9      	cmp	r1, r5
 800abbc:	d104      	bne.n	800abc8 <_sungetc_r+0x60>
 800abbe:	3b01      	subs	r3, #1
 800abc0:	3201      	adds	r2, #1
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	6062      	str	r2, [r4, #4]
 800abc6:	e7d5      	b.n	800ab74 <_sungetc_r+0xc>
 800abc8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800abcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd0:	6363      	str	r3, [r4, #52]	; 0x34
 800abd2:	2303      	movs	r3, #3
 800abd4:	63a3      	str	r3, [r4, #56]	; 0x38
 800abd6:	4623      	mov	r3, r4
 800abd8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	2301      	movs	r3, #1
 800abe0:	e7dc      	b.n	800ab9c <_sungetc_r+0x34>

0800abe2 <__ssrefill_r>:
 800abe2:	b510      	push	{r4, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800abe8:	b169      	cbz	r1, 800ac06 <__ssrefill_r+0x24>
 800abea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abee:	4299      	cmp	r1, r3
 800abf0:	d001      	beq.n	800abf6 <__ssrefill_r+0x14>
 800abf2:	f001 f979 	bl	800bee8 <_free_r>
 800abf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abf8:	6063      	str	r3, [r4, #4]
 800abfa:	2000      	movs	r0, #0
 800abfc:	6360      	str	r0, [r4, #52]	; 0x34
 800abfe:	b113      	cbz	r3, 800ac06 <__ssrefill_r+0x24>
 800ac00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	f043 0320 	orr.w	r3, r3, #32
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	e7f3      	b.n	800ac04 <__ssrefill_r+0x22>

0800ac1c <__ssvfiscanf_r>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	460c      	mov	r4, r1
 800ac22:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800ac26:	2100      	movs	r1, #0
 800ac28:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ac2c:	49b2      	ldr	r1, [pc, #712]	; (800aef8 <__ssvfiscanf_r+0x2dc>)
 800ac2e:	91a0      	str	r1, [sp, #640]	; 0x280
 800ac30:	f10d 0804 	add.w	r8, sp, #4
 800ac34:	49b1      	ldr	r1, [pc, #708]	; (800aefc <__ssvfiscanf_r+0x2e0>)
 800ac36:	4fb2      	ldr	r7, [pc, #712]	; (800af00 <__ssvfiscanf_r+0x2e4>)
 800ac38:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800af04 <__ssvfiscanf_r+0x2e8>
 800ac3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ac40:	4606      	mov	r6, r0
 800ac42:	91a1      	str	r1, [sp, #644]	; 0x284
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	f892 a000 	ldrb.w	sl, [r2]
 800ac4a:	f1ba 0f00 	cmp.w	sl, #0
 800ac4e:	f000 8151 	beq.w	800aef4 <__ssvfiscanf_r+0x2d8>
 800ac52:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800ac56:	f013 0308 	ands.w	r3, r3, #8
 800ac5a:	f102 0501 	add.w	r5, r2, #1
 800ac5e:	d019      	beq.n	800ac94 <__ssvfiscanf_r+0x78>
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd0f      	ble.n	800ac86 <__ssvfiscanf_r+0x6a>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	5cba      	ldrb	r2, [r7, r2]
 800ac6c:	0712      	lsls	r2, r2, #28
 800ac6e:	d401      	bmi.n	800ac74 <__ssvfiscanf_r+0x58>
 800ac70:	462a      	mov	r2, r5
 800ac72:	e7e8      	b.n	800ac46 <__ssvfiscanf_r+0x2a>
 800ac74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac76:	3201      	adds	r2, #1
 800ac78:	9245      	str	r2, [sp, #276]	; 0x114
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	6062      	str	r2, [r4, #4]
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	e7ec      	b.n	800ac60 <__ssvfiscanf_r+0x44>
 800ac86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	4798      	blx	r3
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d0e9      	beq.n	800ac66 <__ssvfiscanf_r+0x4a>
 800ac92:	e7ed      	b.n	800ac70 <__ssvfiscanf_r+0x54>
 800ac94:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ac98:	f040 8083 	bne.w	800ada2 <__ssvfiscanf_r+0x186>
 800ac9c:	9341      	str	r3, [sp, #260]	; 0x104
 800ac9e:	9343      	str	r3, [sp, #268]	; 0x10c
 800aca0:	7853      	ldrb	r3, [r2, #1]
 800aca2:	2b2a      	cmp	r3, #42	; 0x2a
 800aca4:	bf02      	ittt	eq
 800aca6:	2310      	moveq	r3, #16
 800aca8:	1c95      	addeq	r5, r2, #2
 800acaa:	9341      	streq	r3, [sp, #260]	; 0x104
 800acac:	220a      	movs	r2, #10
 800acae:	46ab      	mov	fp, r5
 800acb0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800acb4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800acb8:	2b09      	cmp	r3, #9
 800acba:	d91d      	bls.n	800acf8 <__ssvfiscanf_r+0xdc>
 800acbc:	4891      	ldr	r0, [pc, #580]	; (800af04 <__ssvfiscanf_r+0x2e8>)
 800acbe:	2203      	movs	r2, #3
 800acc0:	f7f5 faa6 	bl	8000210 <memchr>
 800acc4:	b140      	cbz	r0, 800acd8 <__ssvfiscanf_r+0xbc>
 800acc6:	2301      	movs	r3, #1
 800acc8:	eba0 0009 	sub.w	r0, r0, r9
 800accc:	fa03 f000 	lsl.w	r0, r3, r0
 800acd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acd2:	4318      	orrs	r0, r3
 800acd4:	9041      	str	r0, [sp, #260]	; 0x104
 800acd6:	465d      	mov	r5, fp
 800acd8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800acdc:	2b78      	cmp	r3, #120	; 0x78
 800acde:	d806      	bhi.n	800acee <__ssvfiscanf_r+0xd2>
 800ace0:	2b57      	cmp	r3, #87	; 0x57
 800ace2:	d810      	bhi.n	800ad06 <__ssvfiscanf_r+0xea>
 800ace4:	2b25      	cmp	r3, #37	; 0x25
 800ace6:	d05c      	beq.n	800ada2 <__ssvfiscanf_r+0x186>
 800ace8:	d856      	bhi.n	800ad98 <__ssvfiscanf_r+0x17c>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d074      	beq.n	800add8 <__ssvfiscanf_r+0x1bc>
 800acee:	2303      	movs	r3, #3
 800acf0:	9347      	str	r3, [sp, #284]	; 0x11c
 800acf2:	230a      	movs	r3, #10
 800acf4:	9342      	str	r3, [sp, #264]	; 0x108
 800acf6:	e081      	b.n	800adfc <__ssvfiscanf_r+0x1e0>
 800acf8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800acfa:	fb02 1303 	mla	r3, r2, r3, r1
 800acfe:	3b30      	subs	r3, #48	; 0x30
 800ad00:	9343      	str	r3, [sp, #268]	; 0x10c
 800ad02:	465d      	mov	r5, fp
 800ad04:	e7d3      	b.n	800acae <__ssvfiscanf_r+0x92>
 800ad06:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ad0a:	2a20      	cmp	r2, #32
 800ad0c:	d8ef      	bhi.n	800acee <__ssvfiscanf_r+0xd2>
 800ad0e:	a101      	add	r1, pc, #4	; (adr r1, 800ad14 <__ssvfiscanf_r+0xf8>)
 800ad10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad14:	0800ade7 	.word	0x0800ade7
 800ad18:	0800acef 	.word	0x0800acef
 800ad1c:	0800acef 	.word	0x0800acef
 800ad20:	0800ae45 	.word	0x0800ae45
 800ad24:	0800acef 	.word	0x0800acef
 800ad28:	0800acef 	.word	0x0800acef
 800ad2c:	0800acef 	.word	0x0800acef
 800ad30:	0800acef 	.word	0x0800acef
 800ad34:	0800acef 	.word	0x0800acef
 800ad38:	0800acef 	.word	0x0800acef
 800ad3c:	0800acef 	.word	0x0800acef
 800ad40:	0800ae5b 	.word	0x0800ae5b
 800ad44:	0800ae31 	.word	0x0800ae31
 800ad48:	0800ad9f 	.word	0x0800ad9f
 800ad4c:	0800ad9f 	.word	0x0800ad9f
 800ad50:	0800ad9f 	.word	0x0800ad9f
 800ad54:	0800acef 	.word	0x0800acef
 800ad58:	0800ae35 	.word	0x0800ae35
 800ad5c:	0800acef 	.word	0x0800acef
 800ad60:	0800acef 	.word	0x0800acef
 800ad64:	0800acef 	.word	0x0800acef
 800ad68:	0800acef 	.word	0x0800acef
 800ad6c:	0800ae6b 	.word	0x0800ae6b
 800ad70:	0800ae3d 	.word	0x0800ae3d
 800ad74:	0800addf 	.word	0x0800addf
 800ad78:	0800acef 	.word	0x0800acef
 800ad7c:	0800acef 	.word	0x0800acef
 800ad80:	0800ae67 	.word	0x0800ae67
 800ad84:	0800acef 	.word	0x0800acef
 800ad88:	0800ae31 	.word	0x0800ae31
 800ad8c:	0800acef 	.word	0x0800acef
 800ad90:	0800acef 	.word	0x0800acef
 800ad94:	0800ade7 	.word	0x0800ade7
 800ad98:	3b45      	subs	r3, #69	; 0x45
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d8a7      	bhi.n	800acee <__ssvfiscanf_r+0xd2>
 800ad9e:	2305      	movs	r3, #5
 800ada0:	e02b      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd0d      	ble.n	800adc4 <__ssvfiscanf_r+0x1a8>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	781a      	ldrb	r2, [r3, #0]
 800adac:	4552      	cmp	r2, sl
 800adae:	f040 80a1 	bne.w	800aef4 <__ssvfiscanf_r+0x2d8>
 800adb2:	3301      	adds	r3, #1
 800adb4:	6862      	ldr	r2, [r4, #4]
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800adba:	3a01      	subs	r2, #1
 800adbc:	3301      	adds	r3, #1
 800adbe:	6062      	str	r2, [r4, #4]
 800adc0:	9345      	str	r3, [sp, #276]	; 0x114
 800adc2:	e755      	b.n	800ac70 <__ssvfiscanf_r+0x54>
 800adc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800adc6:	4621      	mov	r1, r4
 800adc8:	4630      	mov	r0, r6
 800adca:	4798      	blx	r3
 800adcc:	2800      	cmp	r0, #0
 800adce:	d0eb      	beq.n	800ada8 <__ssvfiscanf_r+0x18c>
 800add0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800add2:	2800      	cmp	r0, #0
 800add4:	f040 8084 	bne.w	800aee0 <__ssvfiscanf_r+0x2c4>
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	e086      	b.n	800aeec <__ssvfiscanf_r+0x2d0>
 800adde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ade0:	f042 0220 	orr.w	r2, r2, #32
 800ade4:	9241      	str	r2, [sp, #260]	; 0x104
 800ade6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ade8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adec:	9241      	str	r2, [sp, #260]	; 0x104
 800adee:	2210      	movs	r2, #16
 800adf0:	2b6f      	cmp	r3, #111	; 0x6f
 800adf2:	9242      	str	r2, [sp, #264]	; 0x108
 800adf4:	bf34      	ite	cc
 800adf6:	2303      	movcc	r3, #3
 800adf8:	2304      	movcs	r3, #4
 800adfa:	9347      	str	r3, [sp, #284]	; 0x11c
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	dd41      	ble.n	800ae86 <__ssvfiscanf_r+0x26a>
 800ae02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae04:	0659      	lsls	r1, r3, #25
 800ae06:	d404      	bmi.n	800ae12 <__ssvfiscanf_r+0x1f6>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	5cba      	ldrb	r2, [r7, r2]
 800ae0e:	0712      	lsls	r2, r2, #28
 800ae10:	d440      	bmi.n	800ae94 <__ssvfiscanf_r+0x278>
 800ae12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	dc4f      	bgt.n	800aeb8 <__ssvfiscanf_r+0x29c>
 800ae18:	466b      	mov	r3, sp
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	a941      	add	r1, sp, #260	; 0x104
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 fb62 	bl	800b4e8 <_scanf_chars>
 800ae24:	2801      	cmp	r0, #1
 800ae26:	d065      	beq.n	800aef4 <__ssvfiscanf_r+0x2d8>
 800ae28:	2802      	cmp	r0, #2
 800ae2a:	f47f af21 	bne.w	800ac70 <__ssvfiscanf_r+0x54>
 800ae2e:	e7cf      	b.n	800add0 <__ssvfiscanf_r+0x1b4>
 800ae30:	220a      	movs	r2, #10
 800ae32:	e7dd      	b.n	800adf0 <__ssvfiscanf_r+0x1d4>
 800ae34:	2300      	movs	r3, #0
 800ae36:	9342      	str	r3, [sp, #264]	; 0x108
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e7de      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ae3c:	2308      	movs	r3, #8
 800ae3e:	9342      	str	r3, [sp, #264]	; 0x108
 800ae40:	2304      	movs	r3, #4
 800ae42:	e7da      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ae44:	4629      	mov	r1, r5
 800ae46:	4640      	mov	r0, r8
 800ae48:	f000 fcbc 	bl	800b7c4 <__sccl>
 800ae4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	9341      	str	r3, [sp, #260]	; 0x104
 800ae54:	4605      	mov	r5, r0
 800ae56:	2301      	movs	r3, #1
 800ae58:	e7cf      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ae5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae60:	9341      	str	r3, [sp, #260]	; 0x104
 800ae62:	2300      	movs	r3, #0
 800ae64:	e7c9      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ae66:	2302      	movs	r3, #2
 800ae68:	e7c7      	b.n	800adfa <__ssvfiscanf_r+0x1de>
 800ae6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae6c:	06c3      	lsls	r3, r0, #27
 800ae6e:	f53f aeff 	bmi.w	800ac70 <__ssvfiscanf_r+0x54>
 800ae72:	9b00      	ldr	r3, [sp, #0]
 800ae74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae76:	1d19      	adds	r1, r3, #4
 800ae78:	9100      	str	r1, [sp, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	07c0      	lsls	r0, r0, #31
 800ae7e:	bf4c      	ite	mi
 800ae80:	801a      	strhmi	r2, [r3, #0]
 800ae82:	601a      	strpl	r2, [r3, #0]
 800ae84:	e6f4      	b.n	800ac70 <__ssvfiscanf_r+0x54>
 800ae86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	4798      	blx	r3
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d0b7      	beq.n	800ae02 <__ssvfiscanf_r+0x1e6>
 800ae92:	e79d      	b.n	800add0 <__ssvfiscanf_r+0x1b4>
 800ae94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae96:	3201      	adds	r2, #1
 800ae98:	9245      	str	r2, [sp, #276]	; 0x114
 800ae9a:	6862      	ldr	r2, [r4, #4]
 800ae9c:	3a01      	subs	r2, #1
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	6062      	str	r2, [r4, #4]
 800aea2:	dd02      	ble.n	800aeaa <__ssvfiscanf_r+0x28e>
 800aea4:	3301      	adds	r3, #1
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	e7ae      	b.n	800ae08 <__ssvfiscanf_r+0x1ec>
 800aeaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aeac:	4621      	mov	r1, r4
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4798      	blx	r3
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0a8      	beq.n	800ae08 <__ssvfiscanf_r+0x1ec>
 800aeb6:	e78b      	b.n	800add0 <__ssvfiscanf_r+0x1b4>
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	dc06      	bgt.n	800aeca <__ssvfiscanf_r+0x2ae>
 800aebc:	466b      	mov	r3, sp
 800aebe:	4622      	mov	r2, r4
 800aec0:	a941      	add	r1, sp, #260	; 0x104
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 fb68 	bl	800b598 <_scanf_i>
 800aec8:	e7ac      	b.n	800ae24 <__ssvfiscanf_r+0x208>
 800aeca:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <__ssvfiscanf_r+0x2ec>)
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f43f aecf 	beq.w	800ac70 <__ssvfiscanf_r+0x54>
 800aed2:	466b      	mov	r3, sp
 800aed4:	4622      	mov	r2, r4
 800aed6:	a941      	add	r1, sp, #260	; 0x104
 800aed8:	4630      	mov	r0, r6
 800aeda:	f3af 8000 	nop.w
 800aede:	e7a1      	b.n	800ae24 <__ssvfiscanf_r+0x208>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aee6:	bf18      	it	ne
 800aee8:	f04f 30ff 	movne.w	r0, #4294967295
 800aeec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aef6:	e7f9      	b.n	800aeec <__ssvfiscanf_r+0x2d0>
 800aef8:	0800ab69 	.word	0x0800ab69
 800aefc:	0800abe3 	.word	0x0800abe3
 800af00:	0800c563 	.word	0x0800c563
 800af04:	0800c51a 	.word	0x0800c51a
 800af08:	00000000 	.word	0x00000000

0800af0c <__sfputc_r>:
 800af0c:	6893      	ldr	r3, [r2, #8]
 800af0e:	3b01      	subs	r3, #1
 800af10:	2b00      	cmp	r3, #0
 800af12:	b410      	push	{r4}
 800af14:	6093      	str	r3, [r2, #8]
 800af16:	da08      	bge.n	800af2a <__sfputc_r+0x1e>
 800af18:	6994      	ldr	r4, [r2, #24]
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	db01      	blt.n	800af22 <__sfputc_r+0x16>
 800af1e:	290a      	cmp	r1, #10
 800af20:	d103      	bne.n	800af2a <__sfputc_r+0x1e>
 800af22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af26:	f000 bdc5 	b.w	800bab4 <__swbuf_r>
 800af2a:	6813      	ldr	r3, [r2, #0]
 800af2c:	1c58      	adds	r0, r3, #1
 800af2e:	6010      	str	r0, [r2, #0]
 800af30:	7019      	strb	r1, [r3, #0]
 800af32:	4608      	mov	r0, r1
 800af34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <__sfputs_r>:
 800af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	4614      	mov	r4, r2
 800af42:	18d5      	adds	r5, r2, r3
 800af44:	42ac      	cmp	r4, r5
 800af46:	d101      	bne.n	800af4c <__sfputs_r+0x12>
 800af48:	2000      	movs	r0, #0
 800af4a:	e007      	b.n	800af5c <__sfputs_r+0x22>
 800af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af50:	463a      	mov	r2, r7
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ffda 	bl	800af0c <__sfputc_r>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d1f3      	bne.n	800af44 <__sfputs_r+0xa>
 800af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	b09d      	sub	sp, #116	; 0x74
 800af68:	4614      	mov	r4, r2
 800af6a:	4698      	mov	r8, r3
 800af6c:	4606      	mov	r6, r0
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6983      	ldr	r3, [r0, #24]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f7ff fb90 	bl	800a698 <__sinit>
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <_vfiprintf_r+0x240>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	d11b      	bne.n	800afb6 <_vfiprintf_r+0x56>
 800af7e:	6875      	ldr	r5, [r6, #4]
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f7ff fc21 	bl	800a7d4 <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x3c>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b9eb      	cbnz	r3, 800afd8 <_vfiprintf_r+0x78>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 fdda 	bl	800bb58 <__swsetup_r>
 800afa4:	b1c0      	cbz	r0, 800afd8 <_vfiprintf_r+0x78>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d50e      	bpl.n	800afca <_vfiprintf_r+0x6a>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <_vfiprintf_r+0x244>)
 800afb8:	429d      	cmp	r5, r3
 800afba:	d101      	bne.n	800afc0 <_vfiprintf_r+0x60>
 800afbc:	68b5      	ldr	r5, [r6, #8]
 800afbe:	e7df      	b.n	800af80 <_vfiprintf_r+0x20>
 800afc0:	4b79      	ldr	r3, [pc, #484]	; (800b1a8 <_vfiprintf_r+0x248>)
 800afc2:	429d      	cmp	r5, r3
 800afc4:	bf08      	it	eq
 800afc6:	68f5      	ldreq	r5, [r6, #12]
 800afc8:	e7da      	b.n	800af80 <_vfiprintf_r+0x20>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d4ed      	bmi.n	800afac <_vfiprintf_r+0x4c>
 800afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd2:	f7ff fc00 	bl	800a7d6 <__retarget_lock_release_recursive>
 800afd6:	e7e9      	b.n	800afac <_vfiprintf_r+0x4c>
 800afd8:	2300      	movs	r3, #0
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	2320      	movs	r3, #32
 800afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe6:	2330      	movs	r3, #48	; 0x30
 800afe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1ac <_vfiprintf_r+0x24c>
 800afec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff0:	f04f 0901 	mov.w	r9, #1
 800aff4:	4623      	mov	r3, r4
 800aff6:	469a      	mov	sl, r3
 800aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affc:	b10a      	cbz	r2, 800b002 <_vfiprintf_r+0xa2>
 800affe:	2a25      	cmp	r2, #37	; 0x25
 800b000:	d1f9      	bne.n	800aff6 <_vfiprintf_r+0x96>
 800b002:	ebba 0b04 	subs.w	fp, sl, r4
 800b006:	d00b      	beq.n	800b020 <_vfiprintf_r+0xc0>
 800b008:	465b      	mov	r3, fp
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff93 	bl	800af3a <__sfputs_r>
 800b014:	3001      	adds	r0, #1
 800b016:	f000 80aa 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01c:	445a      	add	r2, fp
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b034:	f10a 0a01 	add.w	sl, sl, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b040:	931a      	str	r3, [sp, #104]	; 0x68
 800b042:	4654      	mov	r4, sl
 800b044:	2205      	movs	r2, #5
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4858      	ldr	r0, [pc, #352]	; (800b1ac <_vfiprintf_r+0x24c>)
 800b04c:	f7f5 f8e0 	bl	8000210 <memchr>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	b9d8      	cbnz	r0, 800b08c <_vfiprintf_r+0x12c>
 800b054:	06d1      	lsls	r1, r2, #27
 800b056:	bf44      	itt	mi
 800b058:	2320      	movmi	r3, #32
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	0713      	lsls	r3, r2, #28
 800b060:	bf44      	itt	mi
 800b062:	232b      	movmi	r3, #43	; 0x2b
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d015      	beq.n	800b09c <_vfiprintf_r+0x13c>
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	4654      	mov	r4, sl
 800b074:	2000      	movs	r0, #0
 800b076:	f04f 0c0a 	mov.w	ip, #10
 800b07a:	4621      	mov	r1, r4
 800b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b080:	3b30      	subs	r3, #48	; 0x30
 800b082:	2b09      	cmp	r3, #9
 800b084:	d94e      	bls.n	800b124 <_vfiprintf_r+0x1c4>
 800b086:	b1b0      	cbz	r0, 800b0b6 <_vfiprintf_r+0x156>
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	e014      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b08c:	eba0 0308 	sub.w	r3, r0, r8
 800b090:	fa09 f303 	lsl.w	r3, r9, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	46a2      	mov	sl, r4
 800b09a:	e7d2      	b.n	800b042 <_vfiprintf_r+0xe2>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9103      	str	r1, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbb      	ittet	lt
 800b0a8:	425b      	neglt	r3, r3
 800b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ae:	9307      	strge	r3, [sp, #28]
 800b0b0:	9307      	strlt	r3, [sp, #28]
 800b0b2:	bfb8      	it	lt
 800b0b4:	9204      	strlt	r2, [sp, #16]
 800b0b6:	7823      	ldrb	r3, [r4, #0]
 800b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ba:	d10c      	bne.n	800b0d6 <_vfiprintf_r+0x176>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d135      	bne.n	800b12e <_vfiprintf_r+0x1ce>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	9203      	str	r2, [sp, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfb8      	it	lt
 800b0ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0d2:	3402      	adds	r4, #2
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1bc <_vfiprintf_r+0x25c>
 800b0da:	7821      	ldrb	r1, [r4, #0]
 800b0dc:	2203      	movs	r2, #3
 800b0de:	4650      	mov	r0, sl
 800b0e0:	f7f5 f896 	bl	8000210 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_vfiprintf_r+0x198>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	4303      	orrs	r3, r0
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fc:	482c      	ldr	r0, [pc, #176]	; (800b1b0 <_vfiprintf_r+0x250>)
 800b0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b102:	2206      	movs	r2, #6
 800b104:	f7f5 f884 	bl	8000210 <memchr>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d03f      	beq.n	800b18c <_vfiprintf_r+0x22c>
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <_vfiprintf_r+0x254>)
 800b10e:	bb1b      	cbnz	r3, 800b158 <_vfiprintf_r+0x1f8>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	3307      	adds	r3, #7
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	443b      	add	r3, r7
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	e767      	b.n	800aff4 <_vfiprintf_r+0x94>
 800b124:	fb0c 3202 	mla	r2, ip, r2, r3
 800b128:	460c      	mov	r4, r1
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7a5      	b.n	800b07a <_vfiprintf_r+0x11a>
 800b12e:	2300      	movs	r3, #0
 800b130:	3401      	adds	r4, #1
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	4619      	mov	r1, r3
 800b136:	f04f 0c0a 	mov.w	ip, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	3a30      	subs	r2, #48	; 0x30
 800b142:	2a09      	cmp	r2, #9
 800b144:	d903      	bls.n	800b14e <_vfiprintf_r+0x1ee>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <_vfiprintf_r+0x176>
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	e7c3      	b.n	800b0d6 <_vfiprintf_r+0x176>
 800b14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b152:	4604      	mov	r4, r0
 800b154:	2301      	movs	r3, #1
 800b156:	e7f0      	b.n	800b13a <_vfiprintf_r+0x1da>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f3af 8000 	nop.w
 800b168:	4607      	mov	r7, r0
 800b16a:	1c78      	adds	r0, r7, #1
 800b16c:	d1d6      	bne.n	800b11c <_vfiprintf_r+0x1bc>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d405      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b174:	89ab      	ldrh	r3, [r5, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d402      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17c:	f7ff fb2b 	bl	800a7d6 <__retarget_lock_release_recursive>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af12 	bmi.w	800afac <_vfiprintf_r+0x4c>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	e711      	b.n	800afb0 <_vfiprintf_r+0x50>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	462a      	mov	r2, r5
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	4630      	mov	r0, r6
 800b198:	f000 f880 	bl	800b29c <_printf_i>
 800b19c:	e7e4      	b.n	800b168 <_vfiprintf_r+0x208>
 800b19e:	bf00      	nop
 800b1a0:	0800c4d4 	.word	0x0800c4d4
 800b1a4:	0800c4f4 	.word	0x0800c4f4
 800b1a8:	0800c4b4 	.word	0x0800c4b4
 800b1ac:	0800c514 	.word	0x0800c514
 800b1b0:	0800c51e 	.word	0x0800c51e
 800b1b4:	00000000 	.word	0x00000000
 800b1b8:	0800af3b 	.word	0x0800af3b
 800b1bc:	0800c51a 	.word	0x0800c51a

0800b1c0 <_printf_common>:
 800b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	4699      	mov	r9, r3
 800b1c8:	688a      	ldr	r2, [r1, #8]
 800b1ca:	690b      	ldr	r3, [r1, #16]
 800b1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	bfb8      	it	lt
 800b1d4:	4613      	movlt	r3, r2
 800b1d6:	6033      	str	r3, [r6, #0]
 800b1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1dc:	4607      	mov	r7, r0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	b10a      	cbz	r2, 800b1e6 <_printf_common+0x26>
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	6033      	str	r3, [r6, #0]
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	0699      	lsls	r1, r3, #26
 800b1ea:	bf42      	ittt	mi
 800b1ec:	6833      	ldrmi	r3, [r6, #0]
 800b1ee:	3302      	addmi	r3, #2
 800b1f0:	6033      	strmi	r3, [r6, #0]
 800b1f2:	6825      	ldr	r5, [r4, #0]
 800b1f4:	f015 0506 	ands.w	r5, r5, #6
 800b1f8:	d106      	bne.n	800b208 <_printf_common+0x48>
 800b1fa:	f104 0a19 	add.w	sl, r4, #25
 800b1fe:	68e3      	ldr	r3, [r4, #12]
 800b200:	6832      	ldr	r2, [r6, #0]
 800b202:	1a9b      	subs	r3, r3, r2
 800b204:	42ab      	cmp	r3, r5
 800b206:	dc26      	bgt.n	800b256 <_printf_common+0x96>
 800b208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b20c:	1e13      	subs	r3, r2, #0
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	bf18      	it	ne
 800b212:	2301      	movne	r3, #1
 800b214:	0692      	lsls	r2, r2, #26
 800b216:	d42b      	bmi.n	800b270 <_printf_common+0xb0>
 800b218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b21c:	4649      	mov	r1, r9
 800b21e:	4638      	mov	r0, r7
 800b220:	47c0      	blx	r8
 800b222:	3001      	adds	r0, #1
 800b224:	d01e      	beq.n	800b264 <_printf_common+0xa4>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	68e5      	ldr	r5, [r4, #12]
 800b22a:	6832      	ldr	r2, [r6, #0]
 800b22c:	f003 0306 	and.w	r3, r3, #6
 800b230:	2b04      	cmp	r3, #4
 800b232:	bf08      	it	eq
 800b234:	1aad      	subeq	r5, r5, r2
 800b236:	68a3      	ldr	r3, [r4, #8]
 800b238:	6922      	ldr	r2, [r4, #16]
 800b23a:	bf0c      	ite	eq
 800b23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b240:	2500      	movne	r5, #0
 800b242:	4293      	cmp	r3, r2
 800b244:	bfc4      	itt	gt
 800b246:	1a9b      	subgt	r3, r3, r2
 800b248:	18ed      	addgt	r5, r5, r3
 800b24a:	2600      	movs	r6, #0
 800b24c:	341a      	adds	r4, #26
 800b24e:	42b5      	cmp	r5, r6
 800b250:	d11a      	bne.n	800b288 <_printf_common+0xc8>
 800b252:	2000      	movs	r0, #0
 800b254:	e008      	b.n	800b268 <_printf_common+0xa8>
 800b256:	2301      	movs	r3, #1
 800b258:	4652      	mov	r2, sl
 800b25a:	4649      	mov	r1, r9
 800b25c:	4638      	mov	r0, r7
 800b25e:	47c0      	blx	r8
 800b260:	3001      	adds	r0, #1
 800b262:	d103      	bne.n	800b26c <_printf_common+0xac>
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26c:	3501      	adds	r5, #1
 800b26e:	e7c6      	b.n	800b1fe <_printf_common+0x3e>
 800b270:	18e1      	adds	r1, r4, r3
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	2030      	movs	r0, #48	; 0x30
 800b276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b27a:	4422      	add	r2, r4
 800b27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b284:	3302      	adds	r3, #2
 800b286:	e7c7      	b.n	800b218 <_printf_common+0x58>
 800b288:	2301      	movs	r3, #1
 800b28a:	4622      	mov	r2, r4
 800b28c:	4649      	mov	r1, r9
 800b28e:	4638      	mov	r0, r7
 800b290:	47c0      	blx	r8
 800b292:	3001      	adds	r0, #1
 800b294:	d0e6      	beq.n	800b264 <_printf_common+0xa4>
 800b296:	3601      	adds	r6, #1
 800b298:	e7d9      	b.n	800b24e <_printf_common+0x8e>
	...

0800b29c <_printf_i>:
 800b29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	7e27      	ldrb	r7, [r4, #24]
 800b2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2a8:	2f78      	cmp	r7, #120	; 0x78
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	469a      	mov	sl, r3
 800b2ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2b2:	d807      	bhi.n	800b2c4 <_printf_i+0x28>
 800b2b4:	2f62      	cmp	r7, #98	; 0x62
 800b2b6:	d80a      	bhi.n	800b2ce <_printf_i+0x32>
 800b2b8:	2f00      	cmp	r7, #0
 800b2ba:	f000 80d8 	beq.w	800b46e <_printf_i+0x1d2>
 800b2be:	2f58      	cmp	r7, #88	; 0x58
 800b2c0:	f000 80a3 	beq.w	800b40a <_printf_i+0x16e>
 800b2c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2cc:	e03a      	b.n	800b344 <_printf_i+0xa8>
 800b2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2d2:	2b15      	cmp	r3, #21
 800b2d4:	d8f6      	bhi.n	800b2c4 <_printf_i+0x28>
 800b2d6:	a001      	add	r0, pc, #4	; (adr r0, 800b2dc <_printf_i+0x40>)
 800b2d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b2dc:	0800b335 	.word	0x0800b335
 800b2e0:	0800b349 	.word	0x0800b349
 800b2e4:	0800b2c5 	.word	0x0800b2c5
 800b2e8:	0800b2c5 	.word	0x0800b2c5
 800b2ec:	0800b2c5 	.word	0x0800b2c5
 800b2f0:	0800b2c5 	.word	0x0800b2c5
 800b2f4:	0800b349 	.word	0x0800b349
 800b2f8:	0800b2c5 	.word	0x0800b2c5
 800b2fc:	0800b2c5 	.word	0x0800b2c5
 800b300:	0800b2c5 	.word	0x0800b2c5
 800b304:	0800b2c5 	.word	0x0800b2c5
 800b308:	0800b455 	.word	0x0800b455
 800b30c:	0800b379 	.word	0x0800b379
 800b310:	0800b437 	.word	0x0800b437
 800b314:	0800b2c5 	.word	0x0800b2c5
 800b318:	0800b2c5 	.word	0x0800b2c5
 800b31c:	0800b477 	.word	0x0800b477
 800b320:	0800b2c5 	.word	0x0800b2c5
 800b324:	0800b379 	.word	0x0800b379
 800b328:	0800b2c5 	.word	0x0800b2c5
 800b32c:	0800b2c5 	.word	0x0800b2c5
 800b330:	0800b43f 	.word	0x0800b43f
 800b334:	680b      	ldr	r3, [r1, #0]
 800b336:	1d1a      	adds	r2, r3, #4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	600a      	str	r2, [r1, #0]
 800b33c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b344:	2301      	movs	r3, #1
 800b346:	e0a3      	b.n	800b490 <_printf_i+0x1f4>
 800b348:	6825      	ldr	r5, [r4, #0]
 800b34a:	6808      	ldr	r0, [r1, #0]
 800b34c:	062e      	lsls	r6, r5, #24
 800b34e:	f100 0304 	add.w	r3, r0, #4
 800b352:	d50a      	bpl.n	800b36a <_printf_i+0xce>
 800b354:	6805      	ldr	r5, [r0, #0]
 800b356:	600b      	str	r3, [r1, #0]
 800b358:	2d00      	cmp	r5, #0
 800b35a:	da03      	bge.n	800b364 <_printf_i+0xc8>
 800b35c:	232d      	movs	r3, #45	; 0x2d
 800b35e:	426d      	negs	r5, r5
 800b360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b364:	485e      	ldr	r0, [pc, #376]	; (800b4e0 <_printf_i+0x244>)
 800b366:	230a      	movs	r3, #10
 800b368:	e019      	b.n	800b39e <_printf_i+0x102>
 800b36a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b36e:	6805      	ldr	r5, [r0, #0]
 800b370:	600b      	str	r3, [r1, #0]
 800b372:	bf18      	it	ne
 800b374:	b22d      	sxthne	r5, r5
 800b376:	e7ef      	b.n	800b358 <_printf_i+0xbc>
 800b378:	680b      	ldr	r3, [r1, #0]
 800b37a:	6825      	ldr	r5, [r4, #0]
 800b37c:	1d18      	adds	r0, r3, #4
 800b37e:	6008      	str	r0, [r1, #0]
 800b380:	0628      	lsls	r0, r5, #24
 800b382:	d501      	bpl.n	800b388 <_printf_i+0xec>
 800b384:	681d      	ldr	r5, [r3, #0]
 800b386:	e002      	b.n	800b38e <_printf_i+0xf2>
 800b388:	0669      	lsls	r1, r5, #25
 800b38a:	d5fb      	bpl.n	800b384 <_printf_i+0xe8>
 800b38c:	881d      	ldrh	r5, [r3, #0]
 800b38e:	4854      	ldr	r0, [pc, #336]	; (800b4e0 <_printf_i+0x244>)
 800b390:	2f6f      	cmp	r7, #111	; 0x6f
 800b392:	bf0c      	ite	eq
 800b394:	2308      	moveq	r3, #8
 800b396:	230a      	movne	r3, #10
 800b398:	2100      	movs	r1, #0
 800b39a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b39e:	6866      	ldr	r6, [r4, #4]
 800b3a0:	60a6      	str	r6, [r4, #8]
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	bfa2      	ittt	ge
 800b3a6:	6821      	ldrge	r1, [r4, #0]
 800b3a8:	f021 0104 	bicge.w	r1, r1, #4
 800b3ac:	6021      	strge	r1, [r4, #0]
 800b3ae:	b90d      	cbnz	r5, 800b3b4 <_printf_i+0x118>
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	d04d      	beq.n	800b450 <_printf_i+0x1b4>
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3ba:	fb03 5711 	mls	r7, r3, r1, r5
 800b3be:	5dc7      	ldrb	r7, [r0, r7]
 800b3c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3c4:	462f      	mov	r7, r5
 800b3c6:	42bb      	cmp	r3, r7
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	d9f4      	bls.n	800b3b6 <_printf_i+0x11a>
 800b3cc:	2b08      	cmp	r3, #8
 800b3ce:	d10b      	bne.n	800b3e8 <_printf_i+0x14c>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	07df      	lsls	r7, r3, #31
 800b3d4:	d508      	bpl.n	800b3e8 <_printf_i+0x14c>
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	6861      	ldr	r1, [r4, #4]
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	bfde      	ittt	le
 800b3de:	2330      	movle	r3, #48	; 0x30
 800b3e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3e8:	1b92      	subs	r2, r2, r6
 800b3ea:	6122      	str	r2, [r4, #16]
 800b3ec:	f8cd a000 	str.w	sl, [sp]
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	aa03      	add	r2, sp, #12
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f7ff fee2 	bl	800b1c0 <_printf_common>
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d14c      	bne.n	800b49a <_printf_i+0x1fe>
 800b400:	f04f 30ff 	mov.w	r0, #4294967295
 800b404:	b004      	add	sp, #16
 800b406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40a:	4835      	ldr	r0, [pc, #212]	; (800b4e0 <_printf_i+0x244>)
 800b40c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	680e      	ldr	r6, [r1, #0]
 800b414:	061f      	lsls	r7, r3, #24
 800b416:	f856 5b04 	ldr.w	r5, [r6], #4
 800b41a:	600e      	str	r6, [r1, #0]
 800b41c:	d514      	bpl.n	800b448 <_printf_i+0x1ac>
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	bf44      	itt	mi
 800b422:	f043 0320 	orrmi.w	r3, r3, #32
 800b426:	6023      	strmi	r3, [r4, #0]
 800b428:	b91d      	cbnz	r5, 800b432 <_printf_i+0x196>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	f023 0320 	bic.w	r3, r3, #32
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	2310      	movs	r3, #16
 800b434:	e7b0      	b.n	800b398 <_printf_i+0xfc>
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	f043 0320 	orr.w	r3, r3, #32
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	2378      	movs	r3, #120	; 0x78
 800b440:	4828      	ldr	r0, [pc, #160]	; (800b4e4 <_printf_i+0x248>)
 800b442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b446:	e7e3      	b.n	800b410 <_printf_i+0x174>
 800b448:	065e      	lsls	r6, r3, #25
 800b44a:	bf48      	it	mi
 800b44c:	b2ad      	uxthmi	r5, r5
 800b44e:	e7e6      	b.n	800b41e <_printf_i+0x182>
 800b450:	4616      	mov	r6, r2
 800b452:	e7bb      	b.n	800b3cc <_printf_i+0x130>
 800b454:	680b      	ldr	r3, [r1, #0]
 800b456:	6826      	ldr	r6, [r4, #0]
 800b458:	6960      	ldr	r0, [r4, #20]
 800b45a:	1d1d      	adds	r5, r3, #4
 800b45c:	600d      	str	r5, [r1, #0]
 800b45e:	0635      	lsls	r5, r6, #24
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	d501      	bpl.n	800b468 <_printf_i+0x1cc>
 800b464:	6018      	str	r0, [r3, #0]
 800b466:	e002      	b.n	800b46e <_printf_i+0x1d2>
 800b468:	0671      	lsls	r1, r6, #25
 800b46a:	d5fb      	bpl.n	800b464 <_printf_i+0x1c8>
 800b46c:	8018      	strh	r0, [r3, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	4616      	mov	r6, r2
 800b474:	e7ba      	b.n	800b3ec <_printf_i+0x150>
 800b476:	680b      	ldr	r3, [r1, #0]
 800b478:	1d1a      	adds	r2, r3, #4
 800b47a:	600a      	str	r2, [r1, #0]
 800b47c:	681e      	ldr	r6, [r3, #0]
 800b47e:	6862      	ldr	r2, [r4, #4]
 800b480:	2100      	movs	r1, #0
 800b482:	4630      	mov	r0, r6
 800b484:	f7f4 fec4 	bl	8000210 <memchr>
 800b488:	b108      	cbz	r0, 800b48e <_printf_i+0x1f2>
 800b48a:	1b80      	subs	r0, r0, r6
 800b48c:	6060      	str	r0, [r4, #4]
 800b48e:	6863      	ldr	r3, [r4, #4]
 800b490:	6123      	str	r3, [r4, #16]
 800b492:	2300      	movs	r3, #0
 800b494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b498:	e7a8      	b.n	800b3ec <_printf_i+0x150>
 800b49a:	6923      	ldr	r3, [r4, #16]
 800b49c:	4632      	mov	r2, r6
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	47d0      	blx	sl
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d0ab      	beq.n	800b400 <_printf_i+0x164>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	079b      	lsls	r3, r3, #30
 800b4ac:	d413      	bmi.n	800b4d6 <_printf_i+0x23a>
 800b4ae:	68e0      	ldr	r0, [r4, #12]
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	4298      	cmp	r0, r3
 800b4b4:	bfb8      	it	lt
 800b4b6:	4618      	movlt	r0, r3
 800b4b8:	e7a4      	b.n	800b404 <_printf_i+0x168>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4632      	mov	r2, r6
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	47d0      	blx	sl
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d09b      	beq.n	800b400 <_printf_i+0x164>
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	9903      	ldr	r1, [sp, #12]
 800b4ce:	1a5b      	subs	r3, r3, r1
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	dcf2      	bgt.n	800b4ba <_printf_i+0x21e>
 800b4d4:	e7eb      	b.n	800b4ae <_printf_i+0x212>
 800b4d6:	2500      	movs	r5, #0
 800b4d8:	f104 0619 	add.w	r6, r4, #25
 800b4dc:	e7f5      	b.n	800b4ca <_printf_i+0x22e>
 800b4de:	bf00      	nop
 800b4e0:	0800c525 	.word	0x0800c525
 800b4e4:	0800c536 	.word	0x0800c536

0800b4e8 <_scanf_chars>:
 800b4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	4615      	mov	r5, r2
 800b4ee:	688a      	ldr	r2, [r1, #8]
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	b932      	cbnz	r2, 800b504 <_scanf_chars+0x1c>
 800b4f6:	698a      	ldr	r2, [r1, #24]
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	bf0c      	ite	eq
 800b4fc:	2201      	moveq	r2, #1
 800b4fe:	f04f 32ff 	movne.w	r2, #4294967295
 800b502:	608a      	str	r2, [r1, #8]
 800b504:	6822      	ldr	r2, [r4, #0]
 800b506:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b594 <_scanf_chars+0xac>
 800b50a:	06d1      	lsls	r1, r2, #27
 800b50c:	bf5f      	itttt	pl
 800b50e:	681a      	ldrpl	r2, [r3, #0]
 800b510:	1d11      	addpl	r1, r2, #4
 800b512:	6019      	strpl	r1, [r3, #0]
 800b514:	6816      	ldrpl	r6, [r2, #0]
 800b516:	2700      	movs	r7, #0
 800b518:	69a0      	ldr	r0, [r4, #24]
 800b51a:	b188      	cbz	r0, 800b540 <_scanf_chars+0x58>
 800b51c:	2801      	cmp	r0, #1
 800b51e:	d107      	bne.n	800b530 <_scanf_chars+0x48>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	5c9b      	ldrb	r3, [r3, r2]
 800b528:	b953      	cbnz	r3, 800b540 <_scanf_chars+0x58>
 800b52a:	bb27      	cbnz	r7, 800b576 <_scanf_chars+0x8e>
 800b52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b530:	2802      	cmp	r0, #2
 800b532:	d120      	bne.n	800b576 <_scanf_chars+0x8e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b53c:	071b      	lsls	r3, r3, #28
 800b53e:	d41a      	bmi.n	800b576 <_scanf_chars+0x8e>
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	06da      	lsls	r2, r3, #27
 800b544:	bf5e      	ittt	pl
 800b546:	682b      	ldrpl	r3, [r5, #0]
 800b548:	781b      	ldrbpl	r3, [r3, #0]
 800b54a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b54e:	682a      	ldr	r2, [r5, #0]
 800b550:	686b      	ldr	r3, [r5, #4]
 800b552:	3201      	adds	r2, #1
 800b554:	602a      	str	r2, [r5, #0]
 800b556:	68a2      	ldr	r2, [r4, #8]
 800b558:	3b01      	subs	r3, #1
 800b55a:	3a01      	subs	r2, #1
 800b55c:	606b      	str	r3, [r5, #4]
 800b55e:	3701      	adds	r7, #1
 800b560:	60a2      	str	r2, [r4, #8]
 800b562:	b142      	cbz	r2, 800b576 <_scanf_chars+0x8e>
 800b564:	2b00      	cmp	r3, #0
 800b566:	dcd7      	bgt.n	800b518 <_scanf_chars+0x30>
 800b568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b56c:	4629      	mov	r1, r5
 800b56e:	4640      	mov	r0, r8
 800b570:	4798      	blx	r3
 800b572:	2800      	cmp	r0, #0
 800b574:	d0d0      	beq.n	800b518 <_scanf_chars+0x30>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	f013 0310 	ands.w	r3, r3, #16
 800b57c:	d105      	bne.n	800b58a <_scanf_chars+0xa2>
 800b57e:	68e2      	ldr	r2, [r4, #12]
 800b580:	3201      	adds	r2, #1
 800b582:	60e2      	str	r2, [r4, #12]
 800b584:	69a2      	ldr	r2, [r4, #24]
 800b586:	b102      	cbz	r2, 800b58a <_scanf_chars+0xa2>
 800b588:	7033      	strb	r3, [r6, #0]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	441f      	add	r7, r3
 800b58e:	6127      	str	r7, [r4, #16]
 800b590:	2000      	movs	r0, #0
 800b592:	e7cb      	b.n	800b52c <_scanf_chars+0x44>
 800b594:	0800c563 	.word	0x0800c563

0800b598 <_scanf_i>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	4698      	mov	r8, r3
 800b59e:	4b74      	ldr	r3, [pc, #464]	; (800b770 <_scanf_i+0x1d8>)
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	4682      	mov	sl, r0
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	ab03      	add	r3, sp, #12
 800b5ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b5b2:	4b70      	ldr	r3, [pc, #448]	; (800b774 <_scanf_i+0x1dc>)
 800b5b4:	69a1      	ldr	r1, [r4, #24]
 800b5b6:	4a70      	ldr	r2, [pc, #448]	; (800b778 <_scanf_i+0x1e0>)
 800b5b8:	2903      	cmp	r1, #3
 800b5ba:	bf18      	it	ne
 800b5bc:	461a      	movne	r2, r3
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	1e5a      	subs	r2, r3, #1
 800b5c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5c8:	bf88      	it	hi
 800b5ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5ce:	4627      	mov	r7, r4
 800b5d0:	bf82      	ittt	hi
 800b5d2:	eb03 0905 	addhi.w	r9, r3, r5
 800b5d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5da:	60a3      	strhi	r3, [r4, #8]
 800b5dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b5e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b5e4:	bf98      	it	ls
 800b5e6:	f04f 0900 	movls.w	r9, #0
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	463d      	mov	r5, r7
 800b5ee:	f04f 0b00 	mov.w	fp, #0
 800b5f2:	6831      	ldr	r1, [r6, #0]
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	7809      	ldrb	r1, [r1, #0]
 800b5f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	f7f4 fe07 	bl	8000210 <memchr>
 800b602:	b328      	cbz	r0, 800b650 <_scanf_i+0xb8>
 800b604:	f1bb 0f01 	cmp.w	fp, #1
 800b608:	d159      	bne.n	800b6be <_scanf_i+0x126>
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	b92a      	cbnz	r2, 800b61a <_scanf_i+0x82>
 800b60e:	6822      	ldr	r2, [r4, #0]
 800b610:	2308      	movs	r3, #8
 800b612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b616:	6063      	str	r3, [r4, #4]
 800b618:	6022      	str	r2, [r4, #0]
 800b61a:	6822      	ldr	r2, [r4, #0]
 800b61c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b620:	6022      	str	r2, [r4, #0]
 800b622:	68a2      	ldr	r2, [r4, #8]
 800b624:	1e51      	subs	r1, r2, #1
 800b626:	60a1      	str	r1, [r4, #8]
 800b628:	b192      	cbz	r2, 800b650 <_scanf_i+0xb8>
 800b62a:	6832      	ldr	r2, [r6, #0]
 800b62c:	1c51      	adds	r1, r2, #1
 800b62e:	6031      	str	r1, [r6, #0]
 800b630:	7812      	ldrb	r2, [r2, #0]
 800b632:	f805 2b01 	strb.w	r2, [r5], #1
 800b636:	6872      	ldr	r2, [r6, #4]
 800b638:	3a01      	subs	r2, #1
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	6072      	str	r2, [r6, #4]
 800b63e:	dc07      	bgt.n	800b650 <_scanf_i+0xb8>
 800b640:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b644:	4631      	mov	r1, r6
 800b646:	4650      	mov	r0, sl
 800b648:	4790      	blx	r2
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f040 8085 	bne.w	800b75a <_scanf_i+0x1c2>
 800b650:	f10b 0b01 	add.w	fp, fp, #1
 800b654:	f1bb 0f03 	cmp.w	fp, #3
 800b658:	d1cb      	bne.n	800b5f2 <_scanf_i+0x5a>
 800b65a:	6863      	ldr	r3, [r4, #4]
 800b65c:	b90b      	cbnz	r3, 800b662 <_scanf_i+0xca>
 800b65e:	230a      	movs	r3, #10
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	4945      	ldr	r1, [pc, #276]	; (800b77c <_scanf_i+0x1e4>)
 800b666:	6960      	ldr	r0, [r4, #20]
 800b668:	1ac9      	subs	r1, r1, r3
 800b66a:	f000 f8ab 	bl	800b7c4 <__sccl>
 800b66e:	f04f 0b00 	mov.w	fp, #0
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	6822      	ldr	r2, [r4, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d03d      	beq.n	800b6f6 <_scanf_i+0x15e>
 800b67a:	6831      	ldr	r1, [r6, #0]
 800b67c:	6960      	ldr	r0, [r4, #20]
 800b67e:	f891 c000 	ldrb.w	ip, [r1]
 800b682:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b686:	2800      	cmp	r0, #0
 800b688:	d035      	beq.n	800b6f6 <_scanf_i+0x15e>
 800b68a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b68e:	d124      	bne.n	800b6da <_scanf_i+0x142>
 800b690:	0510      	lsls	r0, r2, #20
 800b692:	d522      	bpl.n	800b6da <_scanf_i+0x142>
 800b694:	f10b 0b01 	add.w	fp, fp, #1
 800b698:	f1b9 0f00 	cmp.w	r9, #0
 800b69c:	d003      	beq.n	800b6a6 <_scanf_i+0x10e>
 800b69e:	3301      	adds	r3, #1
 800b6a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6873      	ldr	r3, [r6, #4]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	6073      	str	r3, [r6, #4]
 800b6ae:	dd1b      	ble.n	800b6e8 <_scanf_i+0x150>
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	e7d9      	b.n	800b672 <_scanf_i+0xda>
 800b6be:	f1bb 0f02 	cmp.w	fp, #2
 800b6c2:	d1ae      	bne.n	800b622 <_scanf_i+0x8a>
 800b6c4:	6822      	ldr	r2, [r4, #0]
 800b6c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b6ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b6ce:	d1bf      	bne.n	800b650 <_scanf_i+0xb8>
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	6063      	str	r3, [r4, #4]
 800b6d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6d8:	e7a2      	b.n	800b620 <_scanf_i+0x88>
 800b6da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b6de:	6022      	str	r2, [r4, #0]
 800b6e0:	780b      	ldrb	r3, [r1, #0]
 800b6e2:	f805 3b01 	strb.w	r3, [r5], #1
 800b6e6:	e7de      	b.n	800b6a6 <_scanf_i+0x10e>
 800b6e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	4798      	blx	r3
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0df      	beq.n	800b6b6 <_scanf_i+0x11e>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	05d9      	lsls	r1, r3, #23
 800b6fa:	d50d      	bpl.n	800b718 <_scanf_i+0x180>
 800b6fc:	42bd      	cmp	r5, r7
 800b6fe:	d909      	bls.n	800b714 <_scanf_i+0x17c>
 800b700:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b708:	4632      	mov	r2, r6
 800b70a:	4650      	mov	r0, sl
 800b70c:	4798      	blx	r3
 800b70e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b712:	464d      	mov	r5, r9
 800b714:	42bd      	cmp	r5, r7
 800b716:	d028      	beq.n	800b76a <_scanf_i+0x1d2>
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	f012 0210 	ands.w	r2, r2, #16
 800b71e:	d113      	bne.n	800b748 <_scanf_i+0x1b0>
 800b720:	702a      	strb	r2, [r5, #0]
 800b722:	6863      	ldr	r3, [r4, #4]
 800b724:	9e01      	ldr	r6, [sp, #4]
 800b726:	4639      	mov	r1, r7
 800b728:	4650      	mov	r0, sl
 800b72a:	47b0      	blx	r6
 800b72c:	f8d8 3000 	ldr.w	r3, [r8]
 800b730:	6821      	ldr	r1, [r4, #0]
 800b732:	1d1a      	adds	r2, r3, #4
 800b734:	f8c8 2000 	str.w	r2, [r8]
 800b738:	f011 0f20 	tst.w	r1, #32
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	d00f      	beq.n	800b760 <_scanf_i+0x1c8>
 800b740:	6018      	str	r0, [r3, #0]
 800b742:	68e3      	ldr	r3, [r4, #12]
 800b744:	3301      	adds	r3, #1
 800b746:	60e3      	str	r3, [r4, #12]
 800b748:	1bed      	subs	r5, r5, r7
 800b74a:	44ab      	add	fp, r5
 800b74c:	6925      	ldr	r5, [r4, #16]
 800b74e:	445d      	add	r5, fp
 800b750:	6125      	str	r5, [r4, #16]
 800b752:	2000      	movs	r0, #0
 800b754:	b007      	add	sp, #28
 800b756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75a:	f04f 0b00 	mov.w	fp, #0
 800b75e:	e7ca      	b.n	800b6f6 <_scanf_i+0x15e>
 800b760:	07ca      	lsls	r2, r1, #31
 800b762:	bf4c      	ite	mi
 800b764:	8018      	strhmi	r0, [r3, #0]
 800b766:	6018      	strpl	r0, [r3, #0]
 800b768:	e7eb      	b.n	800b742 <_scanf_i+0x1aa>
 800b76a:	2001      	movs	r0, #1
 800b76c:	e7f2      	b.n	800b754 <_scanf_i+0x1bc>
 800b76e:	bf00      	nop
 800b770:	0800c46c 	.word	0x0800c46c
 800b774:	0800ba3d 	.word	0x0800ba3d
 800b778:	0800b941 	.word	0x0800b941
 800b77c:	0800c560 	.word	0x0800c560

0800b780 <_read_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d07      	ldr	r5, [pc, #28]	; (800b7a0 <_read_r+0x20>)
 800b784:	4604      	mov	r4, r0
 800b786:	4608      	mov	r0, r1
 800b788:	4611      	mov	r1, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	602a      	str	r2, [r5, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	f7f6 fc3e 	bl	8002010 <_read>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_read_r+0x1e>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_read_r+0x1e>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000a38 	.word	0x20000a38

0800b7a4 <_sbrk_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d06      	ldr	r5, [pc, #24]	; (800b7c0 <_sbrk_r+0x1c>)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	602b      	str	r3, [r5, #0]
 800b7b0:	f7f6 fc9c 	bl	80020ec <_sbrk>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_sbrk_r+0x1a>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_sbrk_r+0x1a>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	20000a38 	.word	0x20000a38

0800b7c4 <__sccl>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	780b      	ldrb	r3, [r1, #0]
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2b5e      	cmp	r3, #94	; 0x5e
 800b7cc:	bf0b      	itete	eq
 800b7ce:	784b      	ldrbeq	r3, [r1, #1]
 800b7d0:	1c48      	addne	r0, r1, #1
 800b7d2:	1c88      	addeq	r0, r1, #2
 800b7d4:	2200      	movne	r2, #0
 800b7d6:	bf08      	it	eq
 800b7d8:	2201      	moveq	r2, #1
 800b7da:	1e61      	subs	r1, r4, #1
 800b7dc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b7e0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b7e4:	42a9      	cmp	r1, r5
 800b7e6:	d1fb      	bne.n	800b7e0 <__sccl+0x1c>
 800b7e8:	b90b      	cbnz	r3, 800b7ee <__sccl+0x2a>
 800b7ea:	3801      	subs	r0, #1
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	f082 0101 	eor.w	r1, r2, #1
 800b7f2:	54e1      	strb	r1, [r4, r3]
 800b7f4:	1c42      	adds	r2, r0, #1
 800b7f6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b7fa:	2d2d      	cmp	r5, #45	; 0x2d
 800b7fc:	f102 36ff 	add.w	r6, r2, #4294967295
 800b800:	4610      	mov	r0, r2
 800b802:	d006      	beq.n	800b812 <__sccl+0x4e>
 800b804:	2d5d      	cmp	r5, #93	; 0x5d
 800b806:	d0f1      	beq.n	800b7ec <__sccl+0x28>
 800b808:	b90d      	cbnz	r5, 800b80e <__sccl+0x4a>
 800b80a:	4630      	mov	r0, r6
 800b80c:	e7ee      	b.n	800b7ec <__sccl+0x28>
 800b80e:	462b      	mov	r3, r5
 800b810:	e7ef      	b.n	800b7f2 <__sccl+0x2e>
 800b812:	7816      	ldrb	r6, [r2, #0]
 800b814:	2e5d      	cmp	r6, #93	; 0x5d
 800b816:	d0fa      	beq.n	800b80e <__sccl+0x4a>
 800b818:	42b3      	cmp	r3, r6
 800b81a:	dcf8      	bgt.n	800b80e <__sccl+0x4a>
 800b81c:	4618      	mov	r0, r3
 800b81e:	3001      	adds	r0, #1
 800b820:	4286      	cmp	r6, r0
 800b822:	5421      	strb	r1, [r4, r0]
 800b824:	dcfb      	bgt.n	800b81e <__sccl+0x5a>
 800b826:	43d8      	mvns	r0, r3
 800b828:	4430      	add	r0, r6
 800b82a:	1c5d      	adds	r5, r3, #1
 800b82c:	42b3      	cmp	r3, r6
 800b82e:	bfa8      	it	ge
 800b830:	2000      	movge	r0, #0
 800b832:	182b      	adds	r3, r5, r0
 800b834:	3202      	adds	r2, #2
 800b836:	e7de      	b.n	800b7f6 <__sccl+0x32>

0800b838 <_strtol_l.isra.0>:
 800b838:	2b01      	cmp	r3, #1
 800b83a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b83e:	d001      	beq.n	800b844 <_strtol_l.isra.0+0xc>
 800b840:	2b24      	cmp	r3, #36	; 0x24
 800b842:	d906      	bls.n	800b852 <_strtol_l.isra.0+0x1a>
 800b844:	f7fe fdd2 	bl	800a3ec <__errno>
 800b848:	2316      	movs	r3, #22
 800b84a:	6003      	str	r3, [r0, #0]
 800b84c:	2000      	movs	r0, #0
 800b84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b852:	4f3a      	ldr	r7, [pc, #232]	; (800b93c <_strtol_l.isra.0+0x104>)
 800b854:	468e      	mov	lr, r1
 800b856:	4676      	mov	r6, lr
 800b858:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b85c:	5de5      	ldrb	r5, [r4, r7]
 800b85e:	f015 0508 	ands.w	r5, r5, #8
 800b862:	d1f8      	bne.n	800b856 <_strtol_l.isra.0+0x1e>
 800b864:	2c2d      	cmp	r4, #45	; 0x2d
 800b866:	d134      	bne.n	800b8d2 <_strtol_l.isra.0+0x9a>
 800b868:	f89e 4000 	ldrb.w	r4, [lr]
 800b86c:	f04f 0801 	mov.w	r8, #1
 800b870:	f106 0e02 	add.w	lr, r6, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d05c      	beq.n	800b932 <_strtol_l.isra.0+0xfa>
 800b878:	2b10      	cmp	r3, #16
 800b87a:	d10c      	bne.n	800b896 <_strtol_l.isra.0+0x5e>
 800b87c:	2c30      	cmp	r4, #48	; 0x30
 800b87e:	d10a      	bne.n	800b896 <_strtol_l.isra.0+0x5e>
 800b880:	f89e 4000 	ldrb.w	r4, [lr]
 800b884:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b888:	2c58      	cmp	r4, #88	; 0x58
 800b88a:	d14d      	bne.n	800b928 <_strtol_l.isra.0+0xf0>
 800b88c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b890:	2310      	movs	r3, #16
 800b892:	f10e 0e02 	add.w	lr, lr, #2
 800b896:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b89a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b89e:	2600      	movs	r6, #0
 800b8a0:	fbbc f9f3 	udiv	r9, ip, r3
 800b8a4:	4635      	mov	r5, r6
 800b8a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b8ae:	2f09      	cmp	r7, #9
 800b8b0:	d818      	bhi.n	800b8e4 <_strtol_l.isra.0+0xac>
 800b8b2:	463c      	mov	r4, r7
 800b8b4:	42a3      	cmp	r3, r4
 800b8b6:	dd24      	ble.n	800b902 <_strtol_l.isra.0+0xca>
 800b8b8:	2e00      	cmp	r6, #0
 800b8ba:	db1f      	blt.n	800b8fc <_strtol_l.isra.0+0xc4>
 800b8bc:	45a9      	cmp	r9, r5
 800b8be:	d31d      	bcc.n	800b8fc <_strtol_l.isra.0+0xc4>
 800b8c0:	d101      	bne.n	800b8c6 <_strtol_l.isra.0+0x8e>
 800b8c2:	45a2      	cmp	sl, r4
 800b8c4:	db1a      	blt.n	800b8fc <_strtol_l.isra.0+0xc4>
 800b8c6:	fb05 4503 	mla	r5, r5, r3, r4
 800b8ca:	2601      	movs	r6, #1
 800b8cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b8d0:	e7eb      	b.n	800b8aa <_strtol_l.isra.0+0x72>
 800b8d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b8d4:	bf08      	it	eq
 800b8d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b8da:	46a8      	mov	r8, r5
 800b8dc:	bf08      	it	eq
 800b8de:	f106 0e02 	addeq.w	lr, r6, #2
 800b8e2:	e7c7      	b.n	800b874 <_strtol_l.isra.0+0x3c>
 800b8e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8e8:	2f19      	cmp	r7, #25
 800b8ea:	d801      	bhi.n	800b8f0 <_strtol_l.isra.0+0xb8>
 800b8ec:	3c37      	subs	r4, #55	; 0x37
 800b8ee:	e7e1      	b.n	800b8b4 <_strtol_l.isra.0+0x7c>
 800b8f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8f4:	2f19      	cmp	r7, #25
 800b8f6:	d804      	bhi.n	800b902 <_strtol_l.isra.0+0xca>
 800b8f8:	3c57      	subs	r4, #87	; 0x57
 800b8fa:	e7db      	b.n	800b8b4 <_strtol_l.isra.0+0x7c>
 800b8fc:	f04f 36ff 	mov.w	r6, #4294967295
 800b900:	e7e4      	b.n	800b8cc <_strtol_l.isra.0+0x94>
 800b902:	2e00      	cmp	r6, #0
 800b904:	da05      	bge.n	800b912 <_strtol_l.isra.0+0xda>
 800b906:	2322      	movs	r3, #34	; 0x22
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	4665      	mov	r5, ip
 800b90c:	b942      	cbnz	r2, 800b920 <_strtol_l.isra.0+0xe8>
 800b90e:	4628      	mov	r0, r5
 800b910:	e79d      	b.n	800b84e <_strtol_l.isra.0+0x16>
 800b912:	f1b8 0f00 	cmp.w	r8, #0
 800b916:	d000      	beq.n	800b91a <_strtol_l.isra.0+0xe2>
 800b918:	426d      	negs	r5, r5
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d0f7      	beq.n	800b90e <_strtol_l.isra.0+0xd6>
 800b91e:	b10e      	cbz	r6, 800b924 <_strtol_l.isra.0+0xec>
 800b920:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b924:	6011      	str	r1, [r2, #0]
 800b926:	e7f2      	b.n	800b90e <_strtol_l.isra.0+0xd6>
 800b928:	2430      	movs	r4, #48	; 0x30
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1b3      	bne.n	800b896 <_strtol_l.isra.0+0x5e>
 800b92e:	2308      	movs	r3, #8
 800b930:	e7b1      	b.n	800b896 <_strtol_l.isra.0+0x5e>
 800b932:	2c30      	cmp	r4, #48	; 0x30
 800b934:	d0a4      	beq.n	800b880 <_strtol_l.isra.0+0x48>
 800b936:	230a      	movs	r3, #10
 800b938:	e7ad      	b.n	800b896 <_strtol_l.isra.0+0x5e>
 800b93a:	bf00      	nop
 800b93c:	0800c563 	.word	0x0800c563

0800b940 <_strtol_r>:
 800b940:	f7ff bf7a 	b.w	800b838 <_strtol_l.isra.0>

0800b944 <_strtoul_l.isra.0>:
 800b944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b948:	4e3b      	ldr	r6, [pc, #236]	; (800ba38 <_strtoul_l.isra.0+0xf4>)
 800b94a:	4686      	mov	lr, r0
 800b94c:	468c      	mov	ip, r1
 800b94e:	4660      	mov	r0, ip
 800b950:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b954:	5da5      	ldrb	r5, [r4, r6]
 800b956:	f015 0508 	ands.w	r5, r5, #8
 800b95a:	d1f8      	bne.n	800b94e <_strtoul_l.isra.0+0xa>
 800b95c:	2c2d      	cmp	r4, #45	; 0x2d
 800b95e:	d134      	bne.n	800b9ca <_strtoul_l.isra.0+0x86>
 800b960:	f89c 4000 	ldrb.w	r4, [ip]
 800b964:	f04f 0801 	mov.w	r8, #1
 800b968:	f100 0c02 	add.w	ip, r0, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d05e      	beq.n	800ba2e <_strtoul_l.isra.0+0xea>
 800b970:	2b10      	cmp	r3, #16
 800b972:	d10c      	bne.n	800b98e <_strtoul_l.isra.0+0x4a>
 800b974:	2c30      	cmp	r4, #48	; 0x30
 800b976:	d10a      	bne.n	800b98e <_strtoul_l.isra.0+0x4a>
 800b978:	f89c 0000 	ldrb.w	r0, [ip]
 800b97c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b980:	2858      	cmp	r0, #88	; 0x58
 800b982:	d14f      	bne.n	800ba24 <_strtoul_l.isra.0+0xe0>
 800b984:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b988:	2310      	movs	r3, #16
 800b98a:	f10c 0c02 	add.w	ip, ip, #2
 800b98e:	f04f 37ff 	mov.w	r7, #4294967295
 800b992:	2500      	movs	r5, #0
 800b994:	fbb7 f7f3 	udiv	r7, r7, r3
 800b998:	fb03 f907 	mul.w	r9, r3, r7
 800b99c:	ea6f 0909 	mvn.w	r9, r9
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b9a6:	2e09      	cmp	r6, #9
 800b9a8:	d818      	bhi.n	800b9dc <_strtoul_l.isra.0+0x98>
 800b9aa:	4634      	mov	r4, r6
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	dd24      	ble.n	800b9fa <_strtoul_l.isra.0+0xb6>
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	db1f      	blt.n	800b9f4 <_strtoul_l.isra.0+0xb0>
 800b9b4:	4287      	cmp	r7, r0
 800b9b6:	d31d      	bcc.n	800b9f4 <_strtoul_l.isra.0+0xb0>
 800b9b8:	d101      	bne.n	800b9be <_strtoul_l.isra.0+0x7a>
 800b9ba:	45a1      	cmp	r9, r4
 800b9bc:	db1a      	blt.n	800b9f4 <_strtoul_l.isra.0+0xb0>
 800b9be:	fb00 4003 	mla	r0, r0, r3, r4
 800b9c2:	2501      	movs	r5, #1
 800b9c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b9c8:	e7eb      	b.n	800b9a2 <_strtoul_l.isra.0+0x5e>
 800b9ca:	2c2b      	cmp	r4, #43	; 0x2b
 800b9cc:	bf08      	it	eq
 800b9ce:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b9d2:	46a8      	mov	r8, r5
 800b9d4:	bf08      	it	eq
 800b9d6:	f100 0c02 	addeq.w	ip, r0, #2
 800b9da:	e7c7      	b.n	800b96c <_strtoul_l.isra.0+0x28>
 800b9dc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b9e0:	2e19      	cmp	r6, #25
 800b9e2:	d801      	bhi.n	800b9e8 <_strtoul_l.isra.0+0xa4>
 800b9e4:	3c37      	subs	r4, #55	; 0x37
 800b9e6:	e7e1      	b.n	800b9ac <_strtoul_l.isra.0+0x68>
 800b9e8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b9ec:	2e19      	cmp	r6, #25
 800b9ee:	d804      	bhi.n	800b9fa <_strtoul_l.isra.0+0xb6>
 800b9f0:	3c57      	subs	r4, #87	; 0x57
 800b9f2:	e7db      	b.n	800b9ac <_strtoul_l.isra.0+0x68>
 800b9f4:	f04f 35ff 	mov.w	r5, #4294967295
 800b9f8:	e7e4      	b.n	800b9c4 <_strtoul_l.isra.0+0x80>
 800b9fa:	2d00      	cmp	r5, #0
 800b9fc:	da07      	bge.n	800ba0e <_strtoul_l.isra.0+0xca>
 800b9fe:	2322      	movs	r3, #34	; 0x22
 800ba00:	f8ce 3000 	str.w	r3, [lr]
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	b942      	cbnz	r2, 800ba1c <_strtoul_l.isra.0+0xd8>
 800ba0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	d000      	beq.n	800ba16 <_strtoul_l.isra.0+0xd2>
 800ba14:	4240      	negs	r0, r0
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	d0f7      	beq.n	800ba0a <_strtoul_l.isra.0+0xc6>
 800ba1a:	b10d      	cbz	r5, 800ba20 <_strtoul_l.isra.0+0xdc>
 800ba1c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ba20:	6011      	str	r1, [r2, #0]
 800ba22:	e7f2      	b.n	800ba0a <_strtoul_l.isra.0+0xc6>
 800ba24:	2430      	movs	r4, #48	; 0x30
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1b1      	bne.n	800b98e <_strtoul_l.isra.0+0x4a>
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	e7af      	b.n	800b98e <_strtoul_l.isra.0+0x4a>
 800ba2e:	2c30      	cmp	r4, #48	; 0x30
 800ba30:	d0a2      	beq.n	800b978 <_strtoul_l.isra.0+0x34>
 800ba32:	230a      	movs	r3, #10
 800ba34:	e7ab      	b.n	800b98e <_strtoul_l.isra.0+0x4a>
 800ba36:	bf00      	nop
 800ba38:	0800c563 	.word	0x0800c563

0800ba3c <_strtoul_r>:
 800ba3c:	f7ff bf82 	b.w	800b944 <_strtoul_l.isra.0>

0800ba40 <__submore>:
 800ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba44:	460c      	mov	r4, r1
 800ba46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba4c:	4299      	cmp	r1, r3
 800ba4e:	d11d      	bne.n	800ba8c <__submore+0x4c>
 800ba50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba54:	f7fe fed2 	bl	800a7fc <_malloc_r>
 800ba58:	b918      	cbnz	r0, 800ba62 <__submore+0x22>
 800ba5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba66:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ba7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ba82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e7e8      	b.n	800ba5e <__submore+0x1e>
 800ba8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba8e:	0077      	lsls	r7, r6, #1
 800ba90:	463a      	mov	r2, r7
 800ba92:	f000 fa79 	bl	800bf88 <_realloc_r>
 800ba96:	4605      	mov	r5, r0
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d0de      	beq.n	800ba5a <__submore+0x1a>
 800ba9c:	eb00 0806 	add.w	r8, r0, r6
 800baa0:	4601      	mov	r1, r0
 800baa2:	4632      	mov	r2, r6
 800baa4:	4640      	mov	r0, r8
 800baa6:	f000 f9eb 	bl	800be80 <memcpy>
 800baaa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800baae:	f8c4 8000 	str.w	r8, [r4]
 800bab2:	e7e9      	b.n	800ba88 <__submore+0x48>

0800bab4 <__swbuf_r>:
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	460e      	mov	r6, r1
 800bab8:	4614      	mov	r4, r2
 800baba:	4605      	mov	r5, r0
 800babc:	b118      	cbz	r0, 800bac6 <__swbuf_r+0x12>
 800babe:	6983      	ldr	r3, [r0, #24]
 800bac0:	b90b      	cbnz	r3, 800bac6 <__swbuf_r+0x12>
 800bac2:	f7fe fde9 	bl	800a698 <__sinit>
 800bac6:	4b21      	ldr	r3, [pc, #132]	; (800bb4c <__swbuf_r+0x98>)
 800bac8:	429c      	cmp	r4, r3
 800baca:	d12b      	bne.n	800bb24 <__swbuf_r+0x70>
 800bacc:	686c      	ldr	r4, [r5, #4]
 800bace:	69a3      	ldr	r3, [r4, #24]
 800bad0:	60a3      	str	r3, [r4, #8]
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	071a      	lsls	r2, r3, #28
 800bad6:	d52f      	bpl.n	800bb38 <__swbuf_r+0x84>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	b36b      	cbz	r3, 800bb38 <__swbuf_r+0x84>
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	6820      	ldr	r0, [r4, #0]
 800bae0:	1ac0      	subs	r0, r0, r3
 800bae2:	6963      	ldr	r3, [r4, #20]
 800bae4:	b2f6      	uxtb	r6, r6
 800bae6:	4283      	cmp	r3, r0
 800bae8:	4637      	mov	r7, r6
 800baea:	dc04      	bgt.n	800baf6 <__swbuf_r+0x42>
 800baec:	4621      	mov	r1, r4
 800baee:	4628      	mov	r0, r5
 800baf0:	f000 f926 	bl	800bd40 <_fflush_r>
 800baf4:	bb30      	cbnz	r0, 800bb44 <__swbuf_r+0x90>
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	60a3      	str	r3, [r4, #8]
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	6022      	str	r2, [r4, #0]
 800bb02:	701e      	strb	r6, [r3, #0]
 800bb04:	6963      	ldr	r3, [r4, #20]
 800bb06:	3001      	adds	r0, #1
 800bb08:	4283      	cmp	r3, r0
 800bb0a:	d004      	beq.n	800bb16 <__swbuf_r+0x62>
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	07db      	lsls	r3, r3, #31
 800bb10:	d506      	bpl.n	800bb20 <__swbuf_r+0x6c>
 800bb12:	2e0a      	cmp	r6, #10
 800bb14:	d104      	bne.n	800bb20 <__swbuf_r+0x6c>
 800bb16:	4621      	mov	r1, r4
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f000 f911 	bl	800bd40 <_fflush_r>
 800bb1e:	b988      	cbnz	r0, 800bb44 <__swbuf_r+0x90>
 800bb20:	4638      	mov	r0, r7
 800bb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb24:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <__swbuf_r+0x9c>)
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d101      	bne.n	800bb2e <__swbuf_r+0x7a>
 800bb2a:	68ac      	ldr	r4, [r5, #8]
 800bb2c:	e7cf      	b.n	800bace <__swbuf_r+0x1a>
 800bb2e:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <__swbuf_r+0xa0>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	bf08      	it	eq
 800bb34:	68ec      	ldreq	r4, [r5, #12]
 800bb36:	e7ca      	b.n	800bace <__swbuf_r+0x1a>
 800bb38:	4621      	mov	r1, r4
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f000 f80c 	bl	800bb58 <__swsetup_r>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d0cb      	beq.n	800badc <__swbuf_r+0x28>
 800bb44:	f04f 37ff 	mov.w	r7, #4294967295
 800bb48:	e7ea      	b.n	800bb20 <__swbuf_r+0x6c>
 800bb4a:	bf00      	nop
 800bb4c:	0800c4d4 	.word	0x0800c4d4
 800bb50:	0800c4f4 	.word	0x0800c4f4
 800bb54:	0800c4b4 	.word	0x0800c4b4

0800bb58 <__swsetup_r>:
 800bb58:	4b32      	ldr	r3, [pc, #200]	; (800bc24 <__swsetup_r+0xcc>)
 800bb5a:	b570      	push	{r4, r5, r6, lr}
 800bb5c:	681d      	ldr	r5, [r3, #0]
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460c      	mov	r4, r1
 800bb62:	b125      	cbz	r5, 800bb6e <__swsetup_r+0x16>
 800bb64:	69ab      	ldr	r3, [r5, #24]
 800bb66:	b913      	cbnz	r3, 800bb6e <__swsetup_r+0x16>
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f7fe fd95 	bl	800a698 <__sinit>
 800bb6e:	4b2e      	ldr	r3, [pc, #184]	; (800bc28 <__swsetup_r+0xd0>)
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d10f      	bne.n	800bb94 <__swsetup_r+0x3c>
 800bb74:	686c      	ldr	r4, [r5, #4]
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb7c:	0719      	lsls	r1, r3, #28
 800bb7e:	d42c      	bmi.n	800bbda <__swsetup_r+0x82>
 800bb80:	06dd      	lsls	r5, r3, #27
 800bb82:	d411      	bmi.n	800bba8 <__swsetup_r+0x50>
 800bb84:	2309      	movs	r3, #9
 800bb86:	6033      	str	r3, [r6, #0]
 800bb88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	e03e      	b.n	800bc12 <__swsetup_r+0xba>
 800bb94:	4b25      	ldr	r3, [pc, #148]	; (800bc2c <__swsetup_r+0xd4>)
 800bb96:	429c      	cmp	r4, r3
 800bb98:	d101      	bne.n	800bb9e <__swsetup_r+0x46>
 800bb9a:	68ac      	ldr	r4, [r5, #8]
 800bb9c:	e7eb      	b.n	800bb76 <__swsetup_r+0x1e>
 800bb9e:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <__swsetup_r+0xd8>)
 800bba0:	429c      	cmp	r4, r3
 800bba2:	bf08      	it	eq
 800bba4:	68ec      	ldreq	r4, [r5, #12]
 800bba6:	e7e6      	b.n	800bb76 <__swsetup_r+0x1e>
 800bba8:	0758      	lsls	r0, r3, #29
 800bbaa:	d512      	bpl.n	800bbd2 <__swsetup_r+0x7a>
 800bbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbae:	b141      	cbz	r1, 800bbc2 <__swsetup_r+0x6a>
 800bbb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	d002      	beq.n	800bbbe <__swsetup_r+0x66>
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f000 f995 	bl	800bee8 <_free_r>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6063      	str	r3, [r4, #4]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f043 0308 	orr.w	r3, r3, #8
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	b94b      	cbnz	r3, 800bbf2 <__swsetup_r+0x9a>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe8:	d003      	beq.n	800bbf2 <__swsetup_r+0x9a>
 800bbea:	4621      	mov	r1, r4
 800bbec:	4630      	mov	r0, r6
 800bbee:	f000 f907 	bl	800be00 <__smakebuf_r>
 800bbf2:	89a0      	ldrh	r0, [r4, #12]
 800bbf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf8:	f010 0301 	ands.w	r3, r0, #1
 800bbfc:	d00a      	beq.n	800bc14 <__swsetup_r+0xbc>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60a3      	str	r3, [r4, #8]
 800bc02:	6963      	ldr	r3, [r4, #20]
 800bc04:	425b      	negs	r3, r3
 800bc06:	61a3      	str	r3, [r4, #24]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	b943      	cbnz	r3, 800bc1e <__swsetup_r+0xc6>
 800bc0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc10:	d1ba      	bne.n	800bb88 <__swsetup_r+0x30>
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	0781      	lsls	r1, r0, #30
 800bc16:	bf58      	it	pl
 800bc18:	6963      	ldrpl	r3, [r4, #20]
 800bc1a:	60a3      	str	r3, [r4, #8]
 800bc1c:	e7f4      	b.n	800bc08 <__swsetup_r+0xb0>
 800bc1e:	2000      	movs	r0, #0
 800bc20:	e7f7      	b.n	800bc12 <__swsetup_r+0xba>
 800bc22:	bf00      	nop
 800bc24:	20000088 	.word	0x20000088
 800bc28:	0800c4d4 	.word	0x0800c4d4
 800bc2c:	0800c4f4 	.word	0x0800c4f4
 800bc30:	0800c4b4 	.word	0x0800c4b4

0800bc34 <__sflush_r>:
 800bc34:	898a      	ldrh	r2, [r1, #12]
 800bc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	0710      	lsls	r0, r2, #28
 800bc3e:	460c      	mov	r4, r1
 800bc40:	d458      	bmi.n	800bcf4 <__sflush_r+0xc0>
 800bc42:	684b      	ldr	r3, [r1, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc05      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dc02      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d0f9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc60:	682f      	ldr	r7, [r5, #0]
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	d032      	beq.n	800bccc <__sflush_r+0x98>
 800bc66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	075a      	lsls	r2, r3, #29
 800bc6c:	d505      	bpl.n	800bc7a <__sflush_r+0x46>
 800bc6e:	6863      	ldr	r3, [r4, #4]
 800bc70:	1ac0      	subs	r0, r0, r3
 800bc72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc74:	b10b      	cbz	r3, 800bc7a <__sflush_r+0x46>
 800bc76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc78:	1ac0      	subs	r0, r0, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc80:	6a21      	ldr	r1, [r4, #32]
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b0      	blx	r6
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	d106      	bne.n	800bc9a <__sflush_r+0x66>
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	291d      	cmp	r1, #29
 800bc90:	d82c      	bhi.n	800bcec <__sflush_r+0xb8>
 800bc92:	4a2a      	ldr	r2, [pc, #168]	; (800bd3c <__sflush_r+0x108>)
 800bc94:	40ca      	lsrs	r2, r1
 800bc96:	07d6      	lsls	r6, r2, #31
 800bc98:	d528      	bpl.n	800bcec <__sflush_r+0xb8>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	6062      	str	r2, [r4, #4]
 800bc9e:	04d9      	lsls	r1, r3, #19
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	d504      	bpl.n	800bcb0 <__sflush_r+0x7c>
 800bca6:	1c42      	adds	r2, r0, #1
 800bca8:	d101      	bne.n	800bcae <__sflush_r+0x7a>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	b903      	cbnz	r3, 800bcb0 <__sflush_r+0x7c>
 800bcae:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb2:	602f      	str	r7, [r5, #0]
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	d0ca      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcbc:	4299      	cmp	r1, r3
 800bcbe:	d002      	beq.n	800bcc6 <__sflush_r+0x92>
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f000 f911 	bl	800bee8 <_free_r>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	6360      	str	r0, [r4, #52]	; 0x34
 800bcca:	e7c1      	b.n	800bc50 <__sflush_r+0x1c>
 800bccc:	6a21      	ldr	r1, [r4, #32]
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	1c41      	adds	r1, r0, #1
 800bcd6:	d1c7      	bne.n	800bc68 <__sflush_r+0x34>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0c4      	beq.n	800bc68 <__sflush_r+0x34>
 800bcde:	2b1d      	cmp	r3, #29
 800bce0:	d001      	beq.n	800bce6 <__sflush_r+0xb2>
 800bce2:	2b16      	cmp	r3, #22
 800bce4:	d101      	bne.n	800bcea <__sflush_r+0xb6>
 800bce6:	602f      	str	r7, [r5, #0]
 800bce8:	e7b1      	b.n	800bc4e <__sflush_r+0x1a>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	e7ad      	b.n	800bc50 <__sflush_r+0x1c>
 800bcf4:	690f      	ldr	r7, [r1, #16]
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d0a9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcfa:	0793      	lsls	r3, r2, #30
 800bcfc:	680e      	ldr	r6, [r1, #0]
 800bcfe:	bf08      	it	eq
 800bd00:	694b      	ldreq	r3, [r1, #20]
 800bd02:	600f      	str	r7, [r1, #0]
 800bd04:	bf18      	it	ne
 800bd06:	2300      	movne	r3, #0
 800bd08:	eba6 0807 	sub.w	r8, r6, r7
 800bd0c:	608b      	str	r3, [r1, #8]
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	dd9c      	ble.n	800bc4e <__sflush_r+0x1a>
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd18:	4643      	mov	r3, r8
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dc06      	bgt.n	800bd32 <__sflush_r+0xfe>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e78e      	b.n	800bc50 <__sflush_r+0x1c>
 800bd32:	4407      	add	r7, r0
 800bd34:	eba8 0800 	sub.w	r8, r8, r0
 800bd38:	e7e9      	b.n	800bd0e <__sflush_r+0xda>
 800bd3a:	bf00      	nop
 800bd3c:	20400001 	.word	0x20400001

0800bd40 <_fflush_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	4605      	mov	r5, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b913      	cbnz	r3, 800bd50 <_fflush_r+0x10>
 800bd4a:	2500      	movs	r5, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	b118      	cbz	r0, 800bd5a <_fflush_r+0x1a>
 800bd52:	6983      	ldr	r3, [r0, #24]
 800bd54:	b90b      	cbnz	r3, 800bd5a <_fflush_r+0x1a>
 800bd56:	f7fe fc9f 	bl	800a698 <__sinit>
 800bd5a:	4b14      	ldr	r3, [pc, #80]	; (800bdac <_fflush_r+0x6c>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d11b      	bne.n	800bd98 <_fflush_r+0x58>
 800bd60:	686c      	ldr	r4, [r5, #4]
 800bd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0ef      	beq.n	800bd4a <_fflush_r+0xa>
 800bd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd6c:	07d0      	lsls	r0, r2, #31
 800bd6e:	d404      	bmi.n	800bd7a <_fflush_r+0x3a>
 800bd70:	0599      	lsls	r1, r3, #22
 800bd72:	d402      	bmi.n	800bd7a <_fflush_r+0x3a>
 800bd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd76:	f7fe fd2d 	bl	800a7d4 <__retarget_lock_acquire_recursive>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	f7ff ff59 	bl	800bc34 <__sflush_r>
 800bd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd84:	07da      	lsls	r2, r3, #31
 800bd86:	4605      	mov	r5, r0
 800bd88:	d4e0      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	059b      	lsls	r3, r3, #22
 800bd8e:	d4dd      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd92:	f7fe fd20 	bl	800a7d6 <__retarget_lock_release_recursive>
 800bd96:	e7d9      	b.n	800bd4c <_fflush_r+0xc>
 800bd98:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <_fflush_r+0x70>)
 800bd9a:	429c      	cmp	r4, r3
 800bd9c:	d101      	bne.n	800bda2 <_fflush_r+0x62>
 800bd9e:	68ac      	ldr	r4, [r5, #8]
 800bda0:	e7df      	b.n	800bd62 <_fflush_r+0x22>
 800bda2:	4b04      	ldr	r3, [pc, #16]	; (800bdb4 <_fflush_r+0x74>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	bf08      	it	eq
 800bda8:	68ec      	ldreq	r4, [r5, #12]
 800bdaa:	e7da      	b.n	800bd62 <_fflush_r+0x22>
 800bdac:	0800c4d4 	.word	0x0800c4d4
 800bdb0:	0800c4f4 	.word	0x0800c4f4
 800bdb4:	0800c4b4 	.word	0x0800c4b4

0800bdb8 <__swhatbuf_r>:
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	460e      	mov	r6, r1
 800bdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	b096      	sub	sp, #88	; 0x58
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	da07      	bge.n	800bdda <__swhatbuf_r+0x22>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	89b3      	ldrh	r3, [r6, #12]
 800bdd0:	061a      	lsls	r2, r3, #24
 800bdd2:	d410      	bmi.n	800bdf6 <__swhatbuf_r+0x3e>
 800bdd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd8:	e00e      	b.n	800bdf8 <__swhatbuf_r+0x40>
 800bdda:	466a      	mov	r2, sp
 800bddc:	f000 f8fa 	bl	800bfd4 <_fstat_r>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	dbf2      	blt.n	800bdca <__swhatbuf_r+0x12>
 800bde4:	9a01      	ldr	r2, [sp, #4]
 800bde6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdee:	425a      	negs	r2, r3
 800bdf0:	415a      	adcs	r2, r3
 800bdf2:	602a      	str	r2, [r5, #0]
 800bdf4:	e7ee      	b.n	800bdd4 <__swhatbuf_r+0x1c>
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	b016      	add	sp, #88	; 0x58
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}

0800be00 <__smakebuf_r>:
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be04:	079d      	lsls	r5, r3, #30
 800be06:	4606      	mov	r6, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	d507      	bpl.n	800be1c <__smakebuf_r+0x1c>
 800be0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	6123      	str	r3, [r4, #16]
 800be14:	2301      	movs	r3, #1
 800be16:	6163      	str	r3, [r4, #20]
 800be18:	b002      	add	sp, #8
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	ab01      	add	r3, sp, #4
 800be1e:	466a      	mov	r2, sp
 800be20:	f7ff ffca 	bl	800bdb8 <__swhatbuf_r>
 800be24:	9900      	ldr	r1, [sp, #0]
 800be26:	4605      	mov	r5, r0
 800be28:	4630      	mov	r0, r6
 800be2a:	f7fe fce7 	bl	800a7fc <_malloc_r>
 800be2e:	b948      	cbnz	r0, 800be44 <__smakebuf_r+0x44>
 800be30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be34:	059a      	lsls	r2, r3, #22
 800be36:	d4ef      	bmi.n	800be18 <__smakebuf_r+0x18>
 800be38:	f023 0303 	bic.w	r3, r3, #3
 800be3c:	f043 0302 	orr.w	r3, r3, #2
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	e7e3      	b.n	800be0c <__smakebuf_r+0xc>
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <__smakebuf_r+0x7c>)
 800be46:	62b3      	str	r3, [r6, #40]	; 0x28
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	6020      	str	r0, [r4, #0]
 800be4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	9b00      	ldr	r3, [sp, #0]
 800be54:	6163      	str	r3, [r4, #20]
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	6120      	str	r0, [r4, #16]
 800be5a:	b15b      	cbz	r3, 800be74 <__smakebuf_r+0x74>
 800be5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be60:	4630      	mov	r0, r6
 800be62:	f000 f8c9 	bl	800bff8 <_isatty_r>
 800be66:	b128      	cbz	r0, 800be74 <__smakebuf_r+0x74>
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f023 0303 	bic.w	r3, r3, #3
 800be6e:	f043 0301 	orr.w	r3, r3, #1
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	89a0      	ldrh	r0, [r4, #12]
 800be76:	4305      	orrs	r5, r0
 800be78:	81a5      	strh	r5, [r4, #12]
 800be7a:	e7cd      	b.n	800be18 <__smakebuf_r+0x18>
 800be7c:	0800a631 	.word	0x0800a631

0800be80 <memcpy>:
 800be80:	440a      	add	r2, r1
 800be82:	4291      	cmp	r1, r2
 800be84:	f100 33ff 	add.w	r3, r0, #4294967295
 800be88:	d100      	bne.n	800be8c <memcpy+0xc>
 800be8a:	4770      	bx	lr
 800be8c:	b510      	push	{r4, lr}
 800be8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be96:	4291      	cmp	r1, r2
 800be98:	d1f9      	bne.n	800be8e <memcpy+0xe>
 800be9a:	bd10      	pop	{r4, pc}

0800be9c <memmove>:
 800be9c:	4288      	cmp	r0, r1
 800be9e:	b510      	push	{r4, lr}
 800bea0:	eb01 0402 	add.w	r4, r1, r2
 800bea4:	d902      	bls.n	800beac <memmove+0x10>
 800bea6:	4284      	cmp	r4, r0
 800bea8:	4623      	mov	r3, r4
 800beaa:	d807      	bhi.n	800bebc <memmove+0x20>
 800beac:	1e43      	subs	r3, r0, #1
 800beae:	42a1      	cmp	r1, r4
 800beb0:	d008      	beq.n	800bec4 <memmove+0x28>
 800beb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beba:	e7f8      	b.n	800beae <memmove+0x12>
 800bebc:	4402      	add	r2, r0
 800bebe:	4601      	mov	r1, r0
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d100      	bne.n	800bec6 <memmove+0x2a>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bece:	e7f7      	b.n	800bec0 <memmove+0x24>

0800bed0 <__malloc_lock>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__malloc_lock+0x8>)
 800bed2:	f7fe bc7f 	b.w	800a7d4 <__retarget_lock_acquire_recursive>
 800bed6:	bf00      	nop
 800bed8:	20000a30 	.word	0x20000a30

0800bedc <__malloc_unlock>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__malloc_unlock+0x8>)
 800bede:	f7fe bc7a 	b.w	800a7d6 <__retarget_lock_release_recursive>
 800bee2:	bf00      	nop
 800bee4:	20000a30 	.word	0x20000a30

0800bee8 <_free_r>:
 800bee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beea:	2900      	cmp	r1, #0
 800beec:	d048      	beq.n	800bf80 <_free_r+0x98>
 800beee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef2:	9001      	str	r0, [sp, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f1a1 0404 	sub.w	r4, r1, #4
 800befa:	bfb8      	it	lt
 800befc:	18e4      	addlt	r4, r4, r3
 800befe:	f7ff ffe7 	bl	800bed0 <__malloc_lock>
 800bf02:	4a20      	ldr	r2, [pc, #128]	; (800bf84 <_free_r+0x9c>)
 800bf04:	9801      	ldr	r0, [sp, #4]
 800bf06:	6813      	ldr	r3, [r2, #0]
 800bf08:	4615      	mov	r5, r2
 800bf0a:	b933      	cbnz	r3, 800bf1a <_free_r+0x32>
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	6014      	str	r4, [r2, #0]
 800bf10:	b003      	add	sp, #12
 800bf12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf16:	f7ff bfe1 	b.w	800bedc <__malloc_unlock>
 800bf1a:	42a3      	cmp	r3, r4
 800bf1c:	d90b      	bls.n	800bf36 <_free_r+0x4e>
 800bf1e:	6821      	ldr	r1, [r4, #0]
 800bf20:	1862      	adds	r2, r4, r1
 800bf22:	4293      	cmp	r3, r2
 800bf24:	bf04      	itt	eq
 800bf26:	681a      	ldreq	r2, [r3, #0]
 800bf28:	685b      	ldreq	r3, [r3, #4]
 800bf2a:	6063      	str	r3, [r4, #4]
 800bf2c:	bf04      	itt	eq
 800bf2e:	1852      	addeq	r2, r2, r1
 800bf30:	6022      	streq	r2, [r4, #0]
 800bf32:	602c      	str	r4, [r5, #0]
 800bf34:	e7ec      	b.n	800bf10 <_free_r+0x28>
 800bf36:	461a      	mov	r2, r3
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	b10b      	cbz	r3, 800bf40 <_free_r+0x58>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d9fa      	bls.n	800bf36 <_free_r+0x4e>
 800bf40:	6811      	ldr	r1, [r2, #0]
 800bf42:	1855      	adds	r5, r2, r1
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	d10b      	bne.n	800bf60 <_free_r+0x78>
 800bf48:	6824      	ldr	r4, [r4, #0]
 800bf4a:	4421      	add	r1, r4
 800bf4c:	1854      	adds	r4, r2, r1
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	d1dd      	bne.n	800bf10 <_free_r+0x28>
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	6053      	str	r3, [r2, #4]
 800bf5a:	4421      	add	r1, r4
 800bf5c:	6011      	str	r1, [r2, #0]
 800bf5e:	e7d7      	b.n	800bf10 <_free_r+0x28>
 800bf60:	d902      	bls.n	800bf68 <_free_r+0x80>
 800bf62:	230c      	movs	r3, #12
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	e7d3      	b.n	800bf10 <_free_r+0x28>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1961      	adds	r1, r4, r5
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf04      	itt	eq
 800bf70:	6819      	ldreq	r1, [r3, #0]
 800bf72:	685b      	ldreq	r3, [r3, #4]
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	bf04      	itt	eq
 800bf78:	1949      	addeq	r1, r1, r5
 800bf7a:	6021      	streq	r1, [r4, #0]
 800bf7c:	6054      	str	r4, [r2, #4]
 800bf7e:	e7c7      	b.n	800bf10 <_free_r+0x28>
 800bf80:	b003      	add	sp, #12
 800bf82:	bd30      	pop	{r4, r5, pc}
 800bf84:	20000160 	.word	0x20000160

0800bf88 <_realloc_r>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	4607      	mov	r7, r0
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	460e      	mov	r6, r1
 800bf90:	b921      	cbnz	r1, 800bf9c <_realloc_r+0x14>
 800bf92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf96:	4611      	mov	r1, r2
 800bf98:	f7fe bc30 	b.w	800a7fc <_malloc_r>
 800bf9c:	b922      	cbnz	r2, 800bfa8 <_realloc_r+0x20>
 800bf9e:	f7ff ffa3 	bl	800bee8 <_free_r>
 800bfa2:	4625      	mov	r5, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa8:	f000 f836 	bl	800c018 <_malloc_usable_size_r>
 800bfac:	42a0      	cmp	r0, r4
 800bfae:	d20f      	bcs.n	800bfd0 <_realloc_r+0x48>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	f7fe fc22 	bl	800a7fc <_malloc_r>
 800bfb8:	4605      	mov	r5, r0
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0f2      	beq.n	800bfa4 <_realloc_r+0x1c>
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	f7ff ff5d 	bl	800be80 <memcpy>
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f7ff ff8d 	bl	800bee8 <_free_r>
 800bfce:	e7e9      	b.n	800bfa4 <_realloc_r+0x1c>
 800bfd0:	4635      	mov	r5, r6
 800bfd2:	e7e7      	b.n	800bfa4 <_realloc_r+0x1c>

0800bfd4 <_fstat_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d07      	ldr	r5, [pc, #28]	; (800bff4 <_fstat_r+0x20>)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	f7f6 f85a 	bl	800209a <_fstat>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	d102      	bne.n	800bff0 <_fstat_r+0x1c>
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	b103      	cbz	r3, 800bff0 <_fstat_r+0x1c>
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	bd38      	pop	{r3, r4, r5, pc}
 800bff2:	bf00      	nop
 800bff4:	20000a38 	.word	0x20000a38

0800bff8 <_isatty_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d06      	ldr	r5, [pc, #24]	; (800c014 <_isatty_r+0x1c>)
 800bffc:	2300      	movs	r3, #0
 800bffe:	4604      	mov	r4, r0
 800c000:	4608      	mov	r0, r1
 800c002:	602b      	str	r3, [r5, #0]
 800c004:	f7f6 f859 	bl	80020ba <_isatty>
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d102      	bne.n	800c012 <_isatty_r+0x1a>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	b103      	cbz	r3, 800c012 <_isatty_r+0x1a>
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	20000a38 	.word	0x20000a38

0800c018 <_malloc_usable_size_r>:
 800c018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c01c:	1f18      	subs	r0, r3, #4
 800c01e:	2b00      	cmp	r3, #0
 800c020:	bfbc      	itt	lt
 800c022:	580b      	ldrlt	r3, [r1, r0]
 800c024:	18c0      	addlt	r0, r0, r3
 800c026:	4770      	bx	lr

0800c028 <_init>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	bf00      	nop
 800c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02e:	bc08      	pop	{r3}
 800c030:	469e      	mov	lr, r3
 800c032:	4770      	bx	lr

0800c034 <_fini>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	bf00      	nop
 800c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03a:	bc08      	pop	{r3}
 800c03c:	469e      	mov	lr, r3
 800c03e:	4770      	bx	lr
