
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b998  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c12c  0800c12c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c12c  0800c12c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c12c  0800c12c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800c134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000950  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a3c  20000a3c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d651  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8d  00000000  00000000  0003d76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00041500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001378  00000000  00000000  00042a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024637  00000000  00000000  00043d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000237ed  00000000  00000000  000683bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4779  00000000  00000000  0008bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00160325  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062a4  00000000  00000000  00160378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb20 	.word	0x0800bb20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800bb20 	.word	0x0800bb20

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d131      	bne.n	8000328 <splitNumber+0x78>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d039      	beq.n	800033e <splitNumber+0x8e>
             while(num > 0 ){
 80002ca:	e02d      	b.n	8000328 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	1c43      	adds	r3, r0, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <splitNumber+0x98>)
 80002d6:	fb83 2301 	smull	r2, r3, r3, r1
 80002da:	109a      	asrs	r2, r3, #2
 80002dc:	17cb      	asrs	r3, r1, #31
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1aca      	subs	r2, r1, r3
 80002ea:	0083      	lsls	r3, r0, #2
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440b      	add	r3, r1
 80002f2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <splitNumber+0x98>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	1092      	asrs	r2, r2, #2
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <splitNumber+0x70>
                  arr[i++] = 0;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	617a      	str	r2, [r7, #20]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	f107 0218 	add.w	r2, r7, #24
 8000318:	4413      	add	r3, r2
 800031a:	2200      	movs	r2, #0
 800031c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <splitNumber+0x9c>)
 8000324:	f009 fe10 	bl	8009f48 <iprintf>
             while(num > 0 ){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dcce      	bgt.n	80002cc <splitNumber+0x1c>


            }
        return arr[return_val];
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0218 	add.w	r2, r7, #24
 8000336:	4413      	add	r3, r2
 8000338:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800033c:	e000      	b.n	8000340 <splitNumber+0x90>
         } else {
             return 0;
 800033e:	2300      	movs	r3, #0
         }


}
 8000340:	4618      	mov	r0, r3
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	66666667 	.word	0x66666667
 800034c:	0800bb38 	.word	0x0800bb38

08000350 <convertToBinary>:

int convertToBinary(int num){
 8000350:	b480      	push	{r7}
 8000352:	b08f      	sub	sp, #60	; 0x3c
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000360:	e015      	b.n	800038e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000378:	440b      	add	r3, r1
 800037a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	0fda      	lsrs	r2, r3, #31
 8000382:	4413      	add	r3, r2
 8000384:	105b      	asrs	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
              i++;
 8000388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e6      	bne.n	8000362 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000396:	3b01      	subs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800039a:	e005      	b.n	80003a8 <convertToBinary+0x58>
              count++;
 800039c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800039e:	3301      	adds	r3, #1
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	daf6      	bge.n	800039c <convertToBinary+0x4c>

          }
          return count;
 80003ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	373c      	adds	r7, #60	; 0x3c
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <setTime>:



void setTime(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003bc:	b084      	sub	sp, #16
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	f107 0c08 	add.w	ip, r7, #8
 80003c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <setTime+0x68>)
 80003cc:	f007 fba6 	bl	8007b1c <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003d4:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003da:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003e0:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f107 0108 	add.w	r1, r7, #8
 80003e8:	480e      	ldr	r0, [pc, #56]	; (8000424 <setTime+0x68>)
 80003ea:	f006 fb9b 	bl	8006b24 <HAL_RTC_SetTime>

	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80003ee:	2307      	movs	r3, #7
 80003f0:	773b      	strb	r3, [r7, #28]
	sDate.Date = 30;
 80003f2:	231e      	movs	r3, #30
 80003f4:	77bb      	strb	r3, [r7, #30]
	sDate.Month = 1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	777b      	strb	r3, [r7, #29]
	sDate.Year = 22;
 80003fa:	2316      	movs	r3, #22
 80003fc:	77fb      	strb	r3, [r7, #31]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003fe:	f107 031c 	add.w	r3, r7, #28
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <setTime+0x68>)
 8000408:	f006 fd64 	bl	8006ed4 <HAL_RTC_SetDate>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800040c:	2200      	movs	r2, #0
 800040e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <setTime+0x68>)
 8000414:	f007 faac 	bl	8007970 <HAL_RTCEx_SetWakeUpTimer_IT>



}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr
 8000424:	20000564 	.word	0x20000564

08000428 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	460b      	mov	r3, r1
 8000434:	71bb      	strb	r3, [r7, #6]
 8000436:	4613      	mov	r3, r2
 8000438:	717b      	strb	r3, [r7, #5]
	resetPins();
 800043a:	f000 f8d1 	bl	80005e0 <resetPins>

	int bits_count = convertToBinary(hour);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff85 	bl	8000350 <convertToBinary>
 8000446:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b05      	cmp	r3, #5
 800044c:	dd03      	ble.n	8000456 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800044e:	4858      	ldr	r0, [pc, #352]	; (80005b0 <displayHour+0x188>)
 8000450:	f000 fd7a 	bl	8000f48 <Send>
		hour_displayed = 1;

	}


}
 8000454:	e0a7      	b.n	80005a6 <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e016      	b.n	800048a <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	fa42 f303 	asr.w	r3, r2, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00b      	beq.n	8000484 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 800046c:	4a51      	ldr	r2, [pc, #324]	; (80005b4 <displayHour+0x18c>)
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000474:	4a50      	ldr	r2, [pc, #320]	; (80005b8 <displayHour+0x190>)
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	f002 fad6 	bl	8002a30 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2b05      	cmp	r3, #5
 800048e:	dde5      	ble.n	800045c <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e01b      	b.n	80004ce <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff08 	bl	80002b0 <splitNumber>
 80004a0:	4602      	mov	r2, r0
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	fa42 f303 	asr.w	r3, r2, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00b      	beq.n	80004c8 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 80004b0:	4a42      	ldr	r2, [pc, #264]	; (80005bc <displayHour+0x194>)
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004b8:	4a41      	ldr	r2, [pc, #260]	; (80005c0 <displayHour+0x198>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	f002 fab4 	bl	8002a30 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	3301      	adds	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	dde0      	ble.n	8000496 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e01b      	b.n	8000512 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fee6 	bl	80002b0 <splitNumber>
 80004e4:	4602      	mov	r2, r0
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	fa42 f303 	asr.w	r3, r2, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00b      	beq.n	800050c <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80004f4:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <displayHour+0x19c>)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004fc:	4a32      	ldr	r2, [pc, #200]	; (80005c8 <displayHour+0x1a0>)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	f002 fa92 	bl	8002a30 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b03      	cmp	r3, #3
 8000516:	dde0      	ble.n	80004da <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	e01b      	b.n	8000556 <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fec4 	bl	80002b0 <splitNumber>
 8000528:	4602      	mov	r2, r0
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	fa42 f303 	asr.w	r3, r2, r3
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00b      	beq.n	8000550 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <displayHour+0x1a4>)
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000540:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <displayHour+0x1a8>)
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f002 fa70 	bl	8002a30 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	3301      	adds	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2b04      	cmp	r3, #4
 800055a:	dde0      	ble.n	800051e <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e01b      	b.n	800059a <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fea2 	bl	80002b0 <splitNumber>
 800056c:	4602      	mov	r2, r0
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	fa42 f303 	asr.w	r3, r2, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <displayHour+0x1ac>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <displayHour+0x1b0>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	f002 fa4e 	bl	8002a30 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b03      	cmp	r3, #3
 800059e:	dde0      	ble.n	8000562 <displayHour+0x13a>
		hour_displayed = 1;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <displayHour+0x1b4>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800bb3c 	.word	0x0800bb3c
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000014 	.word	0x20000014
 80005bc:	20000020 	.word	0x20000020
 80005c0:	20000030 	.word	0x20000030
 80005c4:	20000038 	.word	0x20000038
 80005c8:	20000044 	.word	0x20000044
 80005cc:	20000060 	.word	0x20000060
 80005d0:	20000070 	.word	0x20000070
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	20000058 	.word	0x20000058
 80005dc:	20000125 	.word	0x20000125

080005e0 <resetPins>:

void resetPins(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e00e      	b.n	800060a <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80005ec:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <resetPins+0xc0>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f4:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <resetPins+0xc4>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	f002 fa16 	bl	8002a30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b04      	cmp	r3, #4
 800060e:	dded      	ble.n	80005ec <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e01a      	b.n	800064c <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 8000616:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <resetPins+0xc8>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061e:	4a23      	ldr	r2, [pc, #140]	; (80006ac <resetPins+0xcc>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f002 fa01 	bl	8002a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <resetPins+0xd0>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <resetPins+0xd4>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f002 f9f5 	bl	8002a30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3301      	adds	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b02      	cmp	r3, #2
 8000650:	dde1      	ble.n	8000616 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e01a      	b.n	800068e <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <resetPins+0xd8>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <resetPins+0xdc>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 f9e0 	bl	8002a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <resetPins+0xe0>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <resetPins+0xe4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f002 f9d4 	bl	8002a30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b03      	cmp	r3, #3
 8000692:	dde1      	ble.n	8000658 <resetPins+0x78>
	}



}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000014 	.word	0x20000014
 80006a8:	20000038 	.word	0x20000038
 80006ac:	20000044 	.word	0x20000044
 80006b0:	2000004c 	.word	0x2000004c
 80006b4:	20000058 	.word	0x20000058
 80006b8:	20000020 	.word	0x20000020
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000060 	.word	0x20000060
 80006c4:	20000070 	.word	0x20000070

080006c8 <getNumOfDaysInMonth>:

uint8_t getNumOfDaysInMonth(uint8_t N){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d011      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d00e      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d00b      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d008      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d005      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	d002      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b0c      	cmp	r3, #12
 80006fa:	d101      	bne.n	8000700 <getNumOfDaysInMonth+0x38>
	        return 31;
 80006fc:	231f      	movs	r3, #31
 80006fe:	e013      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d008      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d005      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d002      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b0b      	cmp	r3, #11
 8000716:	d101      	bne.n	800071c <getNumOfDaysInMonth+0x54>
	        return 30;
 8000718:	231e      	movs	r3, #30
 800071a:	e005      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d101      	bne.n	8000726 <getNumOfDaysInMonth+0x5e>
	        return 28;
 8000722:	231c      	movs	r3, #28
 8000724:	e000      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 8000726:	2300      	movs	r3, #0
	    }

}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <FLASH_init>:


/* ===== FLASH INIT ===== */


void FLASH_init(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <FLASH_init+0x20>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <FLASH_init+0x24>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 0, FLASHTX_BUFF_SIZE);
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	2100      	movs	r1, #0
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <FLASH_init+0x28>)
 800074a:	f009 fbf5 	bl	8009f38 <memset>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000010c 	.word	0x2000010c
 8000758:	2000010d 	.word	0x2000010d
 800075c:	20000168 	.word	0x20000168

08000760 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <Flash_flush>:
	HAL_I2C_Mem_Write(&hi2c1, 0xa0, COUNTER_ADDR, 1, (uint8_t*)&zero, sizeof(zero), HAL_MAX_DELAY);

}


void Flash_flush(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= 100; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e010      	b.n	80007a6 <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	1cfb      	adds	r3, r7, #3
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	21a0      	movs	r1, #160	; 0xa0
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <Flash_flush+0x44>)
 8000796:	f002 fc09 	bl	8002fac <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f001 fcce 	bl	800213c <HAL_Delay>
	for(int i = 0; i <= 100; i++){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b64      	cmp	r3, #100	; 0x64
 80007aa:	ddeb      	ble.n	8000784 <Flash_flush+0x10>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000268 	.word	0x20000268

080007bc <Flash_write>:



uint8_t bt = 0;

void Flash_write(int data[], int start_idx){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <Flash_write+0x74>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	6013      	str	r3, [r2, #0]

		uint8_t arr_idx = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	72fb      	strb	r3, [r7, #11]
		uint8_t arr_size = 5;
 80007d0:	2305      	movs	r3, #5
 80007d2:	72bb      	strb	r3, [r7, #10]


		Send("Counter at: %d\r\n", counter);
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <Flash_write+0x74>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4816      	ldr	r0, [pc, #88]	; (8000834 <Flash_write+0x78>)
 80007dc:	f000 fbb4 	bl	8000f48 <Send>

		for(int i = 0; i < arr_size; i++){
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e01a      	b.n	800081c <Flash_write+0x60>
			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <Flash_write+0x74>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b299      	uxth	r1, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	2204      	movs	r2, #4
 80007f6:	9201      	str	r2, [sp, #4]
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	460a      	mov	r2, r1
 80007fe:	21a0      	movs	r1, #160	; 0xa0
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <Flash_write+0x7c>)
 8000802:	f002 fbd3 	bl	8002fac <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];
			counter++;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <Flash_write+0x74>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a08      	ldr	r2, [pc, #32]	; (8000830 <Flash_write+0x74>)
 800080e:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 8000810:	2005      	movs	r0, #5
 8000812:	f001 fc93 	bl	800213c <HAL_Delay>
		for(int i = 0; i < arr_size; i++){
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbe0      	blt.n	80007e6 <Flash_write+0x2a>





}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000108 	.word	0x20000108
 8000834:	0800bb5c 	.word	0x0800bb5c
 8000838:	20000268 	.word	0x20000268

0800083c <Flash_read>:


void Flash_read(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	70fb      	strb	r3, [r7, #3]
		for(int i = 0; i < 10; i++){
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e015      	b.n	8000878 <Flash_read+0x3c>
			HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	b29a      	uxth	r2, r3
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	2301      	movs	r3, #1
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	1cfb      	adds	r3, r7, #3
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	21a1      	movs	r1, #161	; 0xa1
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <Flash_read+0x4c>)
 8000864:	f002 fa7a 	bl	8002d5c <HAL_I2C_Mem_Read>
			Send("byte: %d\r\n", byte);
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <Flash_read+0x50>)
 800086e:	f000 fb6b 	bl	8000f48 <Send>
		for(int i = 0; i < 10; i++){
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b09      	cmp	r3, #9
 800087c:	dde6      	ble.n	800084c <Flash_read+0x10>
//					Flash_rx = 0;
//				}
//			}
//	}

}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000268 	.word	0x20000268
 800088c:	0800bb70 	.word	0x0800bb70

08000890 <Flash_getFreeSpace>:
int Flash_getFreeSpace(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 800089e:	e010      	b.n	80008c2 <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2301      	movs	r3, #1
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	1cfb      	adds	r3, r7, #3
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2301      	movs	r3, #1
 80008b4:	21a1      	movs	r1, #161	; 0xa1
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <Flash_getFreeSpace+0x44>)
 80008b8:	f002 fa50 	bl	8002d5c <HAL_I2C_Mem_Read>
		i++;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2bff      	cmp	r3, #255	; 0xff
 80008c6:	d1eb      	bne.n	80008a0 <Flash_getFreeSpace+0x10>

	}
	return i;
 80008c8:	687b      	ldr	r3, [r7, #4]
//	for(int i = 0; i < 10; i++){
//		HAL_I2C_Mem_Read(&hi2c1, 0xa0, i, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
//		Send("byte: %d\r\n", byte);
//	}

}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000268 	.word	0x20000268

080008d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a68      	ldr	r2, [pc, #416]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 80008f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a62      	ldr	r2, [pc, #392]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b5d      	ldr	r3, [pc, #372]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a5c      	ldr	r2, [pc, #368]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b5a      	ldr	r3, [pc, #360]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b57      	ldr	r3, [pc, #348]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a56      	ldr	r2, [pc, #344]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a50      	ldr	r2, [pc, #320]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <MX_GPIO_Init+0x1bc>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f641 515f 	movw	r1, #7519	; 0x1d5f
 800096c:	484a      	ldr	r0, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x1c0>)
 800096e:	f002 f85f 	bl	8002a30 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 f858 	bl	8002a30 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000980:	2200      	movs	r2, #0
 8000982:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000986:	4845      	ldr	r0, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x1c4>)
 8000988:	f002 f852 	bl	8002a30 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4843      	ldr	r0, [pc, #268]	; (8000aa0 <MX_GPIO_Init+0x1c8>)
 8000992:	f002 f84d 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	483a      	ldr	r0, [pc, #232]	; (8000a98 <MX_GPIO_Init+0x1c0>)
 80009ae:	f001 fdad 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 80009b2:	f641 535f 	movw	r3, #7519	; 0x1d5f
 80009b6:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4833      	ldr	r0, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x1c0>)
 80009cc:	f001 fd9e 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 80009d0:	f248 2313 	movw	r3, #33299	; 0x8213
 80009d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 fd90 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 80009ec:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 80009f0:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f001 fd80 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000a0c:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x1c0>)
 8000a22:	f001 fd73 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000a26:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000a2a:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <MX_GPIO_Init+0x1c4>)
 8000a40:	f001 fd64 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000a44:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000a48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4810      	ldr	r0, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x1c4>)
 8000a5a:	f001 fd57 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <MX_GPIO_Init+0x1c8>)
 8000a76:	f001 fd49 	bl	800250c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	; 0x28
 8000a80:	f001 fc70 	bl	8002364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f001 fc99 	bl	80023bc <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000c00 	.word	0x48000c00

08000aa4 <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000aaa:	f000 fccd 	bl	8001448 <parseIntData>
 8000aae:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d002      	beq.n	8000abc <handleSetClockMode+0x18>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d117      	bne.n	8000aec <handleSetClockMode+0x48>

			clock_mode = mode;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <handleSetClockMode+0x58>)
 8000ac2:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10c      	bne.n	8000ae4 <handleSetClockMode+0x40>
				resetPins();
 8000aca:	f7ff fd89 	bl	80005e0 <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <handleSetClockMode+0x5c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <handleSetClockMode+0x60>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <handleSetClockMode+0x64>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f7ff fca2 	bl	8000428 <displayHour>
			}

			Send("$Success=1#\r\n");
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <handleSetClockMode+0x68>)
 8000ae6:	f000 fa2f 	bl	8000f48 <Send>
		if(mode == 1 || mode == 2){
 8000aea:	e003      	b.n	8000af4 <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000aec:	2004      	movs	r0, #4
 8000aee:	f000 fe61 	bl	80017b4 <sendFail>
		}


}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000078 	.word	0x20000078
 8000b00:	20000140 	.word	0x20000140
 8000b04:	20000141 	.word	0x20000141
 8000b08:	20000142 	.word	0x20000142
 8000b0c:	0800bb7c 	.word	0x0800bb7c

08000b10 <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000b22:	f7ff fd5d 	bl	80005e0 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00c      	beq.n	8000b46 <handleShowHour+0x36>
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b16      	cmp	r3, #22
 8000b30:	d809      	bhi.n	8000b46 <handleShowHour+0x36>
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	2b3b      	cmp	r3, #59	; 0x3b
 8000b36:	d806      	bhi.n	8000b46 <handleShowHour+0x36>
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8000b3c:	d803      	bhi.n	8000b46 <handleShowHour+0x36>

			 hour_displayed = 0;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <handleShowHour+0x48>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e003      	b.n	8000b4e <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000b46:	2004      	movs	r0, #4
 8000b48:	f000 fe34 	bl	80017b4 <sendFail>
	        }


}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000125 	.word	0x20000125

08000b5c <handleSetAlarm>:

	return result;
}

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	70fb      	strb	r3, [r7, #3]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	70bb      	strb	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]

	uint8_t max_days = getNumOfDaysInMonth(month);
 8000b76:	78bb      	ldrb	r3, [r7, #2]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fda5 	bl	80006c8 <getNumOfDaysInMonth>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//fill array to encode it and save to flash
	int to_encode[5];

	to_encode[0] = day;
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	60fb      	str	r3, [r7, #12]
	to_encode[1] = month;
 8000b88:	78bb      	ldrb	r3, [r7, #2]
 8000b8a:	613b      	str	r3, [r7, #16]
	to_encode[2] = year;
 8000b8c:	883b      	ldrh	r3, [r7, #0]
 8000b8e:	617b      	str	r3, [r7, #20]
	to_encode[3] = hour;
 8000b90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b94:	61bb      	str	r3, [r7, #24]
	to_encode[4] = minute;
 8000b96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b9a:	61fb      	str	r3, [r7, #28]
	//Send("Encoded: %d\r\n", encoded);




	if(year >= 22 && (month > 0 && month <= max_days)){
 8000b9c:	883b      	ldrh	r3, [r7, #0]
 8000b9e:	2b15      	cmp	r3, #21
 8000ba0:	d959      	bls.n	8000c56 <handleSetAlarm+0xfa>
 8000ba2:	78bb      	ldrb	r3, [r7, #2]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d056      	beq.n	8000c56 <handleSetAlarm+0xfa>
 8000ba8:	78ba      	ldrb	r2, [r7, #2]
 8000baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d851      	bhi.n	8000c56 <handleSetAlarm+0xfa>

		if((month > 0 && month <= 12) && (hour > 0 && hour < 23) && (minute >= 0 && minute <= 59)){
 8000bb2:	78bb      	ldrb	r3, [r7, #2]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d049      	beq.n	8000c4c <handleSetAlarm+0xf0>
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	2b0c      	cmp	r3, #12
 8000bbc:	d846      	bhi.n	8000c4c <handleSetAlarm+0xf0>
 8000bbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d042      	beq.n	8000c4c <handleSetAlarm+0xf0>
 8000bc6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bca:	2b16      	cmp	r3, #22
 8000bcc:	d83e      	bhi.n	8000c4c <handleSetAlarm+0xf0>
 8000bce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bd2:	2b3b      	cmp	r3, #59	; 0x3b
 8000bd4:	d83a      	bhi.n	8000c4c <handleSetAlarm+0xf0>


			Send("$Success=1#\r\n");
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <handleSetAlarm+0x10c>)
 8000bd8:	f000 f9b6 	bl	8000f48 <Send>



			sAlarm.AlarmTime.Hours = hour;
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <handleSetAlarm+0x110>)
 8000bde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000be2:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <handleSetAlarm+0x110>)
 8000be6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bea:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = 0;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <handleSetAlarm+0x110>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	709a      	strb	r2, [r3, #2]
			sAlarm.AlarmDateWeekDay = sDate.Date;
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <handleSetAlarm+0x110>)
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
			sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <handleSetAlarm+0x110>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
			sAlarm.Alarm = RTC_ALARM_A;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <handleSetAlarm+0x110>)
 8000c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24

			int start_idx = Flash_getFreeSpace();
 8000c08:	f7ff fe42 	bl	8000890 <Flash_getFreeSpace>
 8000c0c:	6278      	str	r0, [r7, #36]	; 0x24
			if(start_idx > 2){
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	dd02      	ble.n	8000c1a <handleSetAlarm+0xbe>
				start_idx = start_idx - 2;
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3b02      	subs	r3, #2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
			}

			Send("Start idx: %d\r\n", start_idx);
 8000c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <handleSetAlarm+0x114>)
 8000c1e:	f000 f993 	bl	8000f48 <Send>

			Flash_write(to_encode, start_idx);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdc7 	bl	80007bc <Flash_write>





			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000c2e:	e004      	b.n	8000c3a <handleSetAlarm+0xde>
				Error_Handler();
 8000c30:	f000 fee4 	bl	80019fc <Error_Handler>
				sendFail(4);
 8000c34:	2004      	movs	r0, #4
 8000c36:	f000 fdbd 	bl	80017b4 <sendFail>
			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	490b      	ldr	r1, [pc, #44]	; (8000c6c <handleSetAlarm+0x110>)
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <handleSetAlarm+0x118>)
 8000c40:	f006 fad4 	bl	80071ec <HAL_RTC_SetAlarm_IT>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f2      	bne.n	8000c30 <handleSetAlarm+0xd4>
		if((month > 0 && month <= 12) && (hour > 0 && hour < 23) && (minute >= 0 && minute <= 59)){
 8000c4a:	e003      	b.n	8000c54 <handleSetAlarm+0xf8>
			};



			} else {
				sendFail(2);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 fdb1 	bl	80017b4 <sendFail>
		if((month > 0 && month <= 12) && (hour > 0 && hour < 23) && (minute >= 0 && minute <= 59)){
 8000c52:	e004      	b.n	8000c5e <handleSetAlarm+0x102>
 8000c54:	e003      	b.n	8000c5e <handleSetAlarm+0x102>
			}

	} else {
		sendFail(2);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 fdac 	bl	80017b4 <sendFail>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	0800bb7c 	.word	0x0800bb7c
 8000c6c:	20000338 	.word	0x20000338
 8000c70:	0800bb8c 	.word	0x0800bb8c
 8000c74:	20000564 	.word	0x20000564

08000c78 <handleResetAlarms>:


void handleResetAlarms(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	Flash_flush();
 8000c7c:	f7ff fd7a 	bl	8000774 <Flash_flush>
	Send("$Success=1#\r\n");
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <handleResetAlarms+0x14>)
 8000c82:	f000 f961 	bl	8000f48 <Send>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	0800bb7c 	.word	0x0800bb7c

08000c90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C1_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ccc:	f001 ff2c 	bl	8002b28 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fe91 	bl	80019fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cde:	f003 fe0d 	bl	80048fc <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fe88 	bl	80019fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cf0:	f003 fe74 	bl	80049dc <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 fe7f 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000268 	.word	0x20000268
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	2000090e 	.word	0x2000090e

08000d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_I2C_MspInit+0x8c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12f      	bne.n	8000d92 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_I2C_MspInit+0x94>)
 8000d66:	f001 fbd1 	bl	800250c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_I2C_MspInit+0x90>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	201f      	movs	r0, #31
 8000d88:	f001 faec 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d8c:	201f      	movs	r0, #31
 8000d8e:	f001 fb15 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	x1hzTime++;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <delay_1hz+0x30>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <delay_1hz+0x30>)
 8000db6:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <delay_1hz+0x30>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dc0:	d305      	bcc.n	8000dce <delay_1hz+0x26>
		x1hz = 1;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <delay_1hz+0x34>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <delay_1hz+0x30>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
	}
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	2000010e 	.word	0x2000010e
 8000ddc:	20000112 	.word	0x20000112

08000de0 <delay_4hz>:

void delay_4hz(){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	x4hzTime++;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <delay_4hz+0x30>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <delay_4hz+0x30>)
 8000dee:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <delay_4hz+0x30>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2bf9      	cmp	r3, #249	; 0xf9
 8000df6:	d905      	bls.n	8000e04 <delay_4hz+0x24>
		x4hz = 1;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <delay_4hz+0x34>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <delay_4hz+0x30>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	801a      	strh	r2, [r3, #0]
	}

}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000110 	.word	0x20000110
 8000e14:	20000113 	.word	0x20000113

08000e18 <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <delayUs+0x30>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 8000e2a:	bf00      	nop
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <delayUs+0x34>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3f9      	bcc.n	8000e2c <delayUs+0x14>
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000958 	.word	0x20000958
 8000e4c:	2000090c 	.word	0x2000090c

08000e50 <delayMs>:

void delayMs(uint16_t ms){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81fb      	strh	r3, [r7, #14]
 8000e5e:	e006      	b.n	8000e6e <delayMs+0x1e>
		delayUs(1000); //1ms delay
 8000e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e64:	f7ff ffd8 	bl	8000e18 <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	81fb      	strh	r3, [r7, #14]
 8000e6e:	89fa      	ldrh	r2, [r7, #14]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3f4      	bcc.n	8000e60 <delayMs+0x10>
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <handleBlinkCommand+0x60>)
 8000e86:	881a      	ldrh	r2, [r3, #0]
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <handleBlinkCommand+0x64>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d805      	bhi.n	8000e9e <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <handleBlinkCommand+0x68>)
 8000e98:	f001 fdca 	bl	8002a30 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8000e9c:	e01e      	b.n	8000edc <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <handleBlinkCommand+0x60>)
 8000ea0:	881a      	ldrh	r2, [r3, #0]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <handleBlinkCommand+0x6c>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d805      	bhi.n	8000eb8 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <handleBlinkCommand+0x68>)
 8000eb2:	f001 fdbd 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8000eb6:	e011      	b.n	8000edc <handleBlinkCommand+0x5c>
		led_delay = 0;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <handleBlinkCommand+0x60>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <handleBlinkCommand+0x70>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <handleBlinkCommand+0x70>)
 8000eca:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <handleBlinkCommand+0x70>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <handleBlinkCommand+0x5c>
			blink_mode = 0;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <handleBlinkCommand+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000158 	.word	0x20000158
 8000ee4:	2000007a 	.word	0x2000007a
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	2000014e 	.word	0x2000014e
 8000ef4:	2000014a 	.word	0x2000014a

08000ef8 <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <UART_init+0x38>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <UART_init+0x3c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <UART_init+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <UART_init+0x44>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <UART_init+0x48>)
 8000f1c:	f009 f80c 	bl	8009f38 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	2100      	movs	r1, #0
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <UART_init+0x4c>)
 8000f28:	f009 f806 	bl	8009f38 <memset>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000116 	.word	0x20000116
 8000f34:	20000118 	.word	0x20000118
 8000f38:	2000011a 	.word	0x2000011a
 8000f3c:	2000011c 	.word	0x2000011c
 8000f40:	20000708 	.word	0x20000708
 8000f44:	20000364 	.word	0x20000364

08000f48 <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 8000f48:	b40f      	push	{r0, r1, r2, r3}
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b0c4      	sub	sp, #272	; 0x110
 8000f4e:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 8000f50:	4b41      	ldr	r3, [pc, #260]	; (8001058 <Send+0x110>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 8000f5e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	f107 000c 	add.w	r0, r7, #12
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000f72:	f009 f889 	bl	800a088 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000f7c:	e020      	b.n	8000fc0 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f107 010c 	add.w	r1, r7, #12
 8000f88:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000f8c:	440a      	add	r2, r1
 8000f8e:	7811      	ldrb	r1, [r2, #0]
 8000f90:	4a32      	ldr	r2, [pc, #200]	; (800105c <Send+0x114>)
 8000f92:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fac:	db03      	blt.n	8000fb6 <Send+0x6e>
			idx = 0;
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 8000fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f915 	bl	80001f4 <strlen>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8d4      	bhi.n	8000f7e <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <Send+0x110>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Send+0x118>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d127      	bne.n	8001038 <Send+0xf0>
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <Send+0x11c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <Send+0x110>)
 8000ff8:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <Send+0x118>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <Send+0x114>)
 8001004:	5c9a      	ldrb	r2, [r3, r2]
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <Send+0x118>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Send+0x118>)
 8001016:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Send+0x118>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001022:	d302      	bcc.n	800102a <Send+0xe2>
			Tx_busy = 0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <Send+0x118>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800102a:	1cfb      	adds	r3, r7, #3
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <Send+0x11c>)
 8001032:	f007 fb75 	bl	8008720 <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8001036:	e005      	b.n	8001044 <Send+0xfc>

	} else {
		Tx_empty = idx;
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <Send+0x110>)
 8001042:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001044:	b662      	cpsie	i
}
 8001046:	bf00      	nop
	}
	__enable_irq();


}
 8001048:	bf00      	nop
 800104a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr
 8001058:	2000011a 	.word	0x2000011a
 800105c:	20000364 	.word	0x20000364
 8001060:	2000011c 	.word	0x2000011c
 8001064:	200009a4 	.word	0x200009a4

08001068 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_UART_TxCpltCallback+0x60>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	429a      	cmp	r2, r3
 800107e:	d01d      	beq.n	80010bc <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_UART_TxCpltCallback+0x64>)
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 800109a:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a6:	d302      	bcc.n	80010ae <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_UART_TxCpltCallback+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <HAL_UART_TxCpltCallback+0x68>)
 80010b8:	f007 fb32 	bl	8008720 <HAL_UART_Transmit_IT>
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	2000011a 	.word	0x2000011a
 80010cc:	20000364 	.word	0x20000364
 80010d0:	200009a4 	.word	0x200009a4

080010d4 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_RxCpltCallback+0x50>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d11a      	bne.n	800111c <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_UART_RxCpltCallback+0x54>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_UART_RxCpltCallback+0x54>)
 80010f2:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_UART_RxCpltCallback+0x54>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fe:	d302      	bcc.n	8001106 <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_UART_RxCpltCallback+0x54>)
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_UART_RxCpltCallback+0x54>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_UART_RxCpltCallback+0x58>)
 8001110:	4413      	add	r3, r2
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_UART_RxCpltCallback+0x5c>)
 8001118:	f007 fb70 	bl	80087fc <HAL_UART_Receive_IT>


	}
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004400 	.word	0x40004400
 8001128:	20000116 	.word	0x20000116
 800112c:	20000708 	.word	0x20000708
 8001130:	200009a4 	.word	0x200009a4

08001134 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <uart_ready+0x24>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <uart_ready+0x28>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d101      	bne.n	800114c <uart_ready+0x18>
		return 0;
 8001148:	2300      	movs	r3, #0
 800114a:	e000      	b.n	800114e <uart_ready+0x1a>
	} else {
		return 1;
 800114c:	2301      	movs	r3, #1
	}
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000116 	.word	0x20000116
 800115c:	20000118 	.word	0x20000118

08001160 <HAL_RTCEx_WakeUpTimerEventCallback>:
void checkNextAlarm(){

}


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001168:	2200      	movs	r2, #0
 800116a:	4910      	ldr	r1, [pc, #64]	; (80011ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f005 fe45 	bl	8006dfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8001172:	2200      	movs	r2, #0
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f005 ffdc 	bl	8007134 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	737b      	strb	r3, [r7, #13]


	 //int hour = splitNumber(seconds);
	 if(clock_mode == 1){
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	7bb9      	ldrb	r1, [r7, #14]
 800119c:	7b7a      	ldrb	r2, [r7, #13]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f942 	bl	8000428 <displayHour>


	 //hr = &hour;


}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000128 	.word	0x20000128
 80011b0:	2000013c 	.word	0x2000013c
 80011b4:	20000078 	.word	0x20000078

080011b8 <HAL_RTC_AlarmAEventCallback>:
/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80011c6:	f001 fc33 	bl	8002a30 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48000800 	.word	0x48000800

080011d8 <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af06      	add	r7, sp, #24
	uint8_t picked_command = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 80011e2:	4959      	ldr	r1, [pc, #356]	; (8001348 <parseCommand+0x170>)
 80011e4:	4859      	ldr	r0, [pc, #356]	; (800134c <parseCommand+0x174>)
 80011e6:	f7fe fffb 	bl	80001e0 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <parseCommand+0x1e>

		handleSetClockMode();
 80011f0:	f7ff fc58 	bl	8000aa4 <handleSetClockMode>
 80011f4:	e09c      	b.n	8001330 <parseCommand+0x158>


	} else if (strcmp("setTime", command) == 0){
 80011f6:	4954      	ldr	r1, [pc, #336]	; (8001348 <parseCommand+0x170>)
 80011f8:	4855      	ldr	r0, [pc, #340]	; (8001350 <parseCommand+0x178>)
 80011fa:	f7fe fff1 	bl	80001e0 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11c      	bne.n	800123e <parseCommand+0x66>
		parseTime();
 8001204:	f000 f8cc 	bl	80013a0 <parseTime>
		resetPins();
 8001208:	f7ff f9ea 	bl	80005e0 <resetPins>

		setTime(sTime, sDate, hour_to_show, minute_to_show, second_to_show);
 800120c:	4b51      	ldr	r3, [pc, #324]	; (8001354 <parseCommand+0x17c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <parseCommand+0x180>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <parseCommand+0x184>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <parseCommand+0x188>)
 8001226:	9004      	str	r0, [sp, #16]
 8001228:	9103      	str	r1, [sp, #12]
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <parseCommand+0x18c>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	9201      	str	r2, [sp, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001238:	f7ff f8c0 	bl	80003bc <setTime>
 800123c:	e078      	b.n	8001330 <parseCommand+0x158>


	} else if (strcmp("getTime", command) == 0) {
 800123e:	4942      	ldr	r1, [pc, #264]	; (8001348 <parseCommand+0x170>)
 8001240:	4849      	ldr	r0, [pc, #292]	; (8001368 <parseCommand+0x190>)
 8001242:	f7fe ffcd 	bl	80001e0 <strcmp>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d116      	bne.n	800127a <parseCommand+0xa2>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <parseCommand+0x188>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <parseCommand+0x188>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	461a      	mov	r2, r3
 8001258:	4b41      	ldr	r3, [pc, #260]	; (8001360 <parseCommand+0x188>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	4843      	ldr	r0, [pc, #268]	; (800136c <parseCommand+0x194>)
 800125e:	f7ff fe73 	bl	8000f48 <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <parseCommand+0x18c>)
 8001264:	789b      	ldrb	r3, [r3, #2]
 8001266:	4619      	mov	r1, r3
 8001268:	4b3e      	ldr	r3, [pc, #248]	; (8001364 <parseCommand+0x18c>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	461a      	mov	r2, r3
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <parseCommand+0x18c>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	483f      	ldr	r0, [pc, #252]	; (8001370 <parseCommand+0x198>)
 8001274:	f7ff fe68 	bl	8000f48 <Send>
 8001278:	e05a      	b.n	8001330 <parseCommand+0x158>


	}else if(strcmp("setAlarm", command) == 0){
 800127a:	4933      	ldr	r1, [pc, #204]	; (8001348 <parseCommand+0x170>)
 800127c:	483d      	ldr	r0, [pc, #244]	; (8001374 <parseCommand+0x19c>)
 800127e:	f7fe ffaf 	bl	80001e0 <strcmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11d      	bne.n	80012c4 <parseCommand+0xec>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 8001288:	f000 f8b8 	bl	80013fc <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set);
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <parseCommand+0x1a0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <parseCommand+0x1a4>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461c      	mov	r4, r3
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <parseCommand+0x1a8>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	461d      	mov	r5, r3
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <parseCommand+0x1ac>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <parseCommand+0x1b0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	482c      	ldr	r0, [pc, #176]	; (8001364 <parseCommand+0x18c>)
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	462b      	mov	r3, r5
 80012ba:	4622      	mov	r2, r4
 80012bc:	6800      	ldr	r0, [r0, #0]
 80012be:	f7ff fc4d 	bl	8000b5c <handleSetAlarm>
 80012c2:	e035      	b.n	8001330 <parseCommand+0x158>



	} else if(strcmp("getAlarms", command) == 0){
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <parseCommand+0x170>)
 80012c6:	4831      	ldr	r0, [pc, #196]	; (800138c <parseCommand+0x1b4>)
 80012c8:	f7fe ff8a 	bl	80001e0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <parseCommand+0x100>
		//HAL_I2C_Mem_Read(&hi2c1, 0xa0, 0x01, 1, (uint8_t*)&test2, sizeof(test2), HAL_MAX_DELAY);

		//uint8_t status = handleGetAlarms();
		//Send("%d", status);
		Flash_read();
 80012d2:	f7ff fab3 	bl	800083c <Flash_read>
 80012d6:	e02b      	b.n	8001330 <parseCommand+0x158>



	} else if (strcmp("getAlarmsCount", command) == 0){
 80012d8:	491b      	ldr	r1, [pc, #108]	; (8001348 <parseCommand+0x170>)
 80012da:	482d      	ldr	r0, [pc, #180]	; (8001390 <parseCommand+0x1b8>)
 80012dc:	f7fe ff80 	bl	80001e0 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <parseCommand+0x158>



	} else if (strcmp("resetAlarms", command) == 0){
 80012e6:	4918      	ldr	r1, [pc, #96]	; (8001348 <parseCommand+0x170>)
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <parseCommand+0x1bc>)
 80012ea:	f7fe ff79 	bl	80001e0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <parseCommand+0x122>
		handleResetAlarms();
 80012f4:	f7ff fcc0 	bl	8000c78 <handleResetAlarms>
 80012f8:	e01a      	b.n	8001330 <parseCommand+0x158>



	} else if (strcmp("showHour", command) == 0){
 80012fa:	4913      	ldr	r1, [pc, #76]	; (8001348 <parseCommand+0x170>)
 80012fc:	4826      	ldr	r0, [pc, #152]	; (8001398 <parseCommand+0x1c0>)
 80012fe:	f7fe ff6f 	bl	80001e0 <strcmp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d110      	bne.n	800132a <parseCommand+0x152>

		parseTime();
 8001308:	f000 f84a 	bl	80013a0 <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <parseCommand+0x17c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <parseCommand+0x180>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <parseCommand+0x184>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	f7ff fbf4 	bl	8000b10 <handleShowHour>
 8001328:	e002      	b.n	8001330 <parseCommand+0x158>

	}
	else {
		sendFail(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fa42 	bl	80017b4 <sendFail>
	}

	//handle picked command

	clearCommand();
 8001330:	f000 f8a6 	bl	8001480 <clearCommand>
	clearData();
 8001334:	f000 f8b4 	bl	80014a0 <clearData>
	Frame_busy = 0;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <parseCommand+0x1c4>)
 800133a:	2200      	movs	r2, #0
 800133c:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	bf00      	nop
 8001348:	200002b8 	.word	0x200002b8
 800134c:	0800bb9c 	.word	0x0800bb9c
 8001350:	0800bba4 	.word	0x0800bba4
 8001354:	20000140 	.word	0x20000140
 8001358:	20000141 	.word	0x20000141
 800135c:	20000142 	.word	0x20000142
 8001360:	20000128 	.word	0x20000128
 8001364:	2000013c 	.word	0x2000013c
 8001368:	0800bbac 	.word	0x0800bbac
 800136c:	0800bbb4 	.word	0x0800bbb4
 8001370:	0800bbd4 	.word	0x0800bbd4
 8001374:	0800bbf4 	.word	0x0800bbf4
 8001378:	20000143 	.word	0x20000143
 800137c:	20000144 	.word	0x20000144
 8001380:	20000146 	.word	0x20000146
 8001384:	20000148 	.word	0x20000148
 8001388:	20000149 	.word	0x20000149
 800138c:	0800bc00 	.word	0x0800bc00
 8001390:	0800bc0c 	.word	0x0800bc0c
 8001394:	0800bc1c 	.word	0x0800bc1c
 8001398:	0800bc28 	.word	0x0800bc28
 800139c:	2000011e 	.word	0x2000011e

080013a0 <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <parseTime+0x44>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <parseTime+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <parseTime+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <parseTime+0x4c>)
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <parseTime+0x48>)
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <parseTime+0x44>)
 80013c0:	490b      	ldr	r1, [pc, #44]	; (80013f0 <parseTime+0x50>)
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <parseTime+0x54>)
 80013c4:	f008 fdd8 	bl	8009f78 <siscanf>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d103      	bne.n	80013d6 <parseTime+0x36>

		 Send("$Success=1#\r\n");
 80013ce:	480a      	ldr	r0, [pc, #40]	; (80013f8 <parseTime+0x58>)
 80013d0:	f7ff fdba 	bl	8000f48 <Send>

	 } else {

		 sendFail(2);
	 }
}
 80013d4:	e002      	b.n	80013dc <parseTime+0x3c>
		 sendFail(2);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f000 f9ec 	bl	80017b4 <sendFail>
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000140 	.word	0x20000140
 80013e8:	20000141 	.word	0x20000141
 80013ec:	20000142 	.word	0x20000142
 80013f0:	0800bc34 	.word	0x0800bc34
 80013f4:	20000584 	.word	0x20000584
 80013f8:	0800bc40 	.word	0x0800bc40

080013fc <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set) == 5){
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <parseDateTime+0x30>)
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <parseDateTime+0x34>)
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <parseDateTime+0x38>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <parseDateTime+0x3c>)
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <parseDateTime+0x40>)
 8001412:	490b      	ldr	r1, [pc, #44]	; (8001440 <parseDateTime+0x44>)
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <parseDateTime+0x48>)
 8001416:	f008 fdaf 	bl	8009f78 <siscanf>
 800141a:	4603      	mov	r3, r0
 800141c:	2b05      	cmp	r3, #5
 800141e:	d002      	beq.n	8001426 <parseDateTime+0x2a>


	} else {
		sendFail(2);
 8001420:	2002      	movs	r0, #2
 8001422:	f000 f9c7 	bl	80017b4 <sendFail>
	}
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000149 	.word	0x20000149
 8001430:	20000148 	.word	0x20000148
 8001434:	20000146 	.word	0x20000146
 8001438:	20000144 	.word	0x20000144
 800143c:	20000143 	.word	0x20000143
 8001440:	0800bc50 	.word	0x0800bc50
 8001444:	20000584 	.word	0x20000584

08001448 <parseIntData>:



int parseIntData(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	int single_param = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	461a      	mov	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <parseIntData+0x30>)
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <parseIntData+0x34>)
 800145a:	f008 fd8d 	bl	8009f78 <siscanf>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <parseIntData+0x20>
		return single_param;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	e002      	b.n	800146e <parseIntData+0x26>
	}
	else {
		sendFail(2);
 8001468:	2002      	movs	r0, #2
 800146a:	f000 f9a3 	bl	80017b4 <sendFail>
	}


}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800bc60 	.word	0x0800bc60
 800147c:	20000584 	.word	0x20000584

08001480 <clearCommand>:


/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <clearCommand+0x18>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	2100      	movs	r1, #0
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <clearCommand+0x1c>)
 8001490:	f008 fd52 	bl	8009f38 <memset>

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000123 	.word	0x20000123
 800149c:	200002b8 	.word	0x200002b8

080014a0 <clearData>:

void clearData(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	data_busy = 0;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <clearData+0x18>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 80014aa:	227d      	movs	r2, #125	; 0x7d
 80014ac:	2100      	movs	r1, #0
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <clearData+0x1c>)
 80014b0:	f008 fd42 	bl	8009f38 <memset>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000124 	.word	0x20000124
 80014bc:	20000584 	.word	0x20000584

080014c0 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 80014d2:	2300      	movs	r3, #0
 80014d4:	757b      	strb	r3, [r7, #21]


	//check if begining exists
	if(frame[0] == start_sign){
 80014d6:	4b50      	ldr	r3, [pc, #320]	; (8001618 <decodeFrame+0x158>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b24      	cmp	r3, #36	; 0x24
 80014dc:	d105      	bne.n	80014ea <decodeFrame+0x2a>
		required_pass++;
 80014de:	7d7b      	ldrb	r3, [r7, #21]
 80014e0:	3301      	adds	r3, #1
 80014e2:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <decodeFrame+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <decodeFrame+0x15c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a49      	ldr	r2, [pc, #292]	; (8001618 <decodeFrame+0x158>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	2b23      	cmp	r3, #35	; 0x23
 80014f8:	d109      	bne.n	800150e <decodeFrame+0x4e>
		required_pass++;
 80014fa:	7d7b      	ldrb	r3, [r7, #21]
 80014fc:	3301      	adds	r3, #1
 80014fe:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 8001500:	4b46      	ldr	r3, [pc, #280]	; (800161c <decodeFrame+0x15c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	4a43      	ldr	r2, [pc, #268]	; (8001618 <decodeFrame+0x158>)
 800150a:	2100      	movs	r1, #0
 800150c:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e013      	b.n	800153c <decodeFrame+0x7c>
		if(frame[i] == '='){
 8001514:	4a40      	ldr	r2, [pc, #256]	; (8001618 <decodeFrame+0x158>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b3d      	cmp	r3, #61	; 0x3d
 800151e:	d10a      	bne.n	8001536 <decodeFrame+0x76>
			required_pass++;
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	3301      	adds	r3, #1
 8001524:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3301      	adds	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3301      	adds	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <decodeFrame+0x15c>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4293      	cmp	r3, r2
 8001548:	dbe4      	blt.n	8001514 <decodeFrame+0x54>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d12b      	bne.n	80015a8 <decodeFrame+0xe8>
 8001550:	7dba      	ldrb	r2, [r7, #22]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	429a      	cmp	r2, r3
 8001556:	d027      	beq.n	80015a8 <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e020      	b.n	80015a0 <decodeFrame+0xe0>
			//prevent memory leaks
			if(command_busy >= command_size){
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <decodeFrame+0x160>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	b25b      	sxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	da09      	bge.n	800157e <decodeFrame+0xbe>
				command_busy = 0;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <decodeFrame+0x160>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	2100      	movs	r1, #0
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <decodeFrame+0x164>)
 8001576:	f008 fcdf 	bl	8009f38 <memset>
				i = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <decodeFrame+0x160>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <decodeFrame+0x160>)
 800158a:	7011      	strb	r1, [r2, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <decodeFrame+0x158>)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <decodeFrame+0x164>)
 8001598:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3301      	adds	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	ddda      	ble.n	800155e <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 80015a8:	7d7b      	ldrb	r3, [r7, #21]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d130      	bne.n	8001610 <decodeFrame+0x150>
 80015ae:	7dfa      	ldrb	r2, [r7, #23]
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <decodeFrame+0x15c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d029      	beq.n	8001610 <decodeFrame+0x150>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e01f      	b.n	8001602 <decodeFrame+0x142>
			//prevent memory leaks
			if(data_busy >= data_size){
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <decodeFrame+0x168>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b7c      	cmp	r3, #124	; 0x7c
 80015ca:	d909      	bls.n	80015e0 <decodeFrame+0x120>
				data_busy = 0;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <decodeFrame+0x168>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 80015d2:	227d      	movs	r2, #125	; 0x7d
 80015d4:	2100      	movs	r1, #0
 80015d6:	4815      	ldr	r0, [pc, #84]	; (800162c <decodeFrame+0x16c>)
 80015d8:	f008 fcae 	bl	8009f38 <memset>
				i = data_idx;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <decodeFrame+0x168>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	b2d1      	uxtb	r1, r2
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <decodeFrame+0x168>)
 80015ec:	7011      	strb	r1, [r2, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4a09      	ldr	r2, [pc, #36]	; (8001618 <decodeFrame+0x158>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4413      	add	r3, r2
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <decodeFrame+0x16c>)
 80015fa:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	3301      	adds	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <decodeFrame+0x15c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4293      	cmp	r3, r2
 800160e:	dbd8      	blt.n	80015c2 <decodeFrame+0x102>
		}

	}


}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000604 	.word	0x20000604
 800161c:	20000120 	.word	0x20000120
 8001620:	20000123 	.word	0x20000123
 8001624:	200002b8 	.word	0x200002b8
 8001628:	20000124 	.word	0x20000124
 800162c:	20000584 	.word	0x20000584

08001630 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <downloadFrame+0xe0>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <downloadFrame+0xe4>)
 8001640:	5c9b      	ldrb	r3, [r3, r2]
 8001642:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <downloadFrame+0xe0>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <downloadFrame+0xe0>)
 8001650:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <downloadFrame+0xe0>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165c:	d302      	bcc.n	8001664 <downloadFrame+0x34>
		Rx_busy = 0;
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <downloadFrame+0xe0>)
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b24      	cmp	r3, #36	; 0x24
 8001668:	d10b      	bne.n	8001682 <downloadFrame+0x52>
			memset(frame, 0x00, FRAME_SIZE); //reset frame
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	2100      	movs	r1, #0
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <downloadFrame+0xe8>)
 8001672:	f008 fc61 	bl	8009f38 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <downloadFrame+0xec>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0x00;
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <downloadFrame+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]

		}

		//check if frame is not too long
		if(frameLength > FRAME_SIZE){
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <downloadFrame+0xf4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d911      	bls.n	80016b2 <downloadFrame+0x82>
			memset(frame, 0x00, FRAME_SIZE);
 800168e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001692:	2100      	movs	r1, #0
 8001694:	4820      	ldr	r0, [pc, #128]	; (8001718 <downloadFrame+0xe8>)
 8001696:	f008 fc4f 	bl	8009f38 <memset>
			Frame_busy = 0;
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <downloadFrame+0xf0>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <downloadFrame+0xf4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <downloadFrame+0xec>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 80016ac:	2004      	movs	r0, #4
 80016ae:	f000 f881 	bl	80017b4 <sendFail>
		}


		//if frame found start downloading frame
		if(frame_found == 1){
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <downloadFrame+0xec>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d111      	bne.n	80016de <downloadFrame+0xae>
			//todo check frame length if more than one start sign is found
			frameLength++;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <downloadFrame+0xf4>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <downloadFrame+0xf4>)
 80016c6:	801a      	strh	r2, [r3, #0]


			//todo check for multiple end signs

			//copy a frame to analyze it
			frame[Frame_busy++] = byte; //download chars
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <downloadFrame+0xf0>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	b291      	uxth	r1, r2
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <downloadFrame+0xf0>)
 80016d4:	8011      	strh	r1, [r2, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <downloadFrame+0xe8>)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	5453      	strb	r3, [r2, r1]
		//check if its actually a frame
		//todo


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b23      	cmp	r3, #35	; 0x23
 80016e2:	d110      	bne.n	8001706 <downloadFrame+0xd6>
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <downloadFrame+0xec>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10c      	bne.n	8001706 <downloadFrame+0xd6>
			frame_found = 0; //stop downloading chars
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <downloadFrame+0xec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <downloadFrame+0xf0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	801a      	strh	r2, [r3, #0]



		  //if frame is received, analyze it
			decodeFrame();
 80016f8:	f7ff fee2 	bl	80014c0 <decodeFrame>
			parseCommand();
 80016fc:	f7ff fd6c 	bl	80011d8 <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <downloadFrame+0xf4>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]

		 }



}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000118 	.word	0x20000118
 8001714:	20000708 	.word	0x20000708
 8001718:	20000604 	.word	0x20000604
 800171c:	20000122 	.word	0x20000122
 8001720:	2000011e 	.word	0x2000011e
 8001724:	20000120 	.word	0x20000120

08001728 <buttonHandler>:





void buttonHandler() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800172c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001730:	481c      	ldr	r0, [pc, #112]	; (80017a4 <buttonHandler+0x7c>)
 8001732:	f001 f957 	bl	80029e4 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d113      	bne.n	8001764 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <buttonHandler+0x80>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <buttonHandler+0x80>)
 800174e:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <buttonHandler+0x84>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <buttonHandler+0x88>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 800175c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001760:	f000 fcec 	bl	800213c <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <buttonHandler+0x80>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10c      	bne.n	8001786 <buttonHandler+0x5e>
			  if(x1hz == 1){
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <buttonHandler+0x84>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d114      	bne.n	800179e <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <buttonHandler+0x7c>)
 800177a:	f001 f989 	bl	8002a90 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <buttonHandler+0x84>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001784:	e00b      	b.n	800179e <buttonHandler+0x76>
			  if(x4hz == 1){
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <buttonHandler+0x88>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <buttonHandler+0x7c>)
 8001794:	f001 f97c 	bl	8002a90 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <buttonHandler+0x88>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	48000800 	.word	0x48000800
 80017a8:	20000114 	.word	0x20000114
 80017ac:	20000112 	.word	0x20000112
 80017b0:	20000113 	.word	0x20000113

080017b4 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <sendFail+0x1c>)
 80017c4:	f7ff fbc0 	bl	8000f48 <Send>

}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	0800bc64 	.word	0x0800bc64

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 80017da:	f7ff fb8d 	bl	8000ef8 <UART_init>
	FLASH_init();
 80017de:	f7fe ffa9 	bl	8000734 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e2:	f000 fc45 	bl	8002070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e6:	f000 f8a1 	bl	800192c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ea:	f7ff f875 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ee:	f000 fb9b 	bl	8001f28 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80017f2:	f000 fae9 	bl	8001dc8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80017f6:	f000 fb1f 	bl	8001e38 <MX_TIM7_Init>
  MX_RTC_Init();
 80017fa:	f000 f90f 	bl	8001a1c <MX_RTC_Init>
  MX_I2C1_Init();
 80017fe:	f7ff fa47 	bl	8000c90 <MX_I2C1_Init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001802:	4839      	ldr	r0, [pc, #228]	; (80018e8 <main+0x114>)
 8001804:	f006 f98a 	bl	8007b1c <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001808:	2200      	movs	r2, #0
 800180a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800180e:	4836      	ldr	r0, [pc, #216]	; (80018e8 <main+0x114>)
 8001810:	f006 f8ae 	bl	8007970 <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <main+0x118>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <main+0x11c>)
 800181e:	4413      	add	r3, r2
 8001820:	2201      	movs	r2, #1
 8001822:	4619      	mov	r1, r3
 8001824:	4833      	ldr	r0, [pc, #204]	; (80018f4 <main+0x120>)
 8001826:	f006 ffe9 	bl	80087fc <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 800182a:	4833      	ldr	r0, [pc, #204]	; (80018f8 <main+0x124>)
 800182c:	f7ff fb8c 	bl	8000f48 <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001830:	4832      	ldr	r0, [pc, #200]	; (80018fc <main+0x128>)
 8001832:	f006 fadb 	bl	8007dec <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <main+0x128>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	4a30      	ldr	r2, [pc, #192]	; (8001900 <main+0x12c>)
 800183e:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <main+0x130>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d116      	bne.n	8001878 <main+0xa4>
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <main+0x134>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d112      	bne.n	8001878 <main+0xa4>
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <main+0x138>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <main+0xa4>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <main+0x138>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <main+0x13c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <main+0x140>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	f7fe fdd8 	bl	8000428 <displayHour>
	   }


	 buttonHandler();
 8001878:	f7ff ff56 	bl	8001728 <buttonHandler>


	 while(uart_ready()){
 800187c:	e001      	b.n	8001882 <main+0xae>
		 //downloadCmd();
		 downloadFrame();
 800187e:	f7ff fed7 	bl	8001630 <downloadFrame>
	 while(uart_ready()){
 8001882:	f7ff fc57 	bl	8001134 <uart_ready>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f8      	bne.n	800187e <main+0xaa>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <main+0x144>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <main+0xc8>
		 handleBlinkCommand();
 8001896:	f7ff faf3 	bl	8000e80 <handleBlinkCommand>
 800189a:	e018      	b.n	80018ce <main+0xfa>
	 } else if(blink_mode == 2){
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <main+0x144>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d113      	bne.n	80018ce <main+0xfa>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <main+0x128>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <main+0x12c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <main+0x148>)
 80018b4:	8812      	ldrh	r2, [r2, #0]
 80018b6:	b292      	uxth	r2, r2
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d308      	bcc.n	80018ce <main+0xfa>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	4818      	ldr	r0, [pc, #96]	; (8001920 <main+0x14c>)
 80018c0:	f001 f8e6 	bl	8002a90 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <main+0x128>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <main+0x12c>)
 80018cc:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <main+0x150>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d1b3      	bne.n	8001840 <main+0x6c>


		 delayMs(delayTime);
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <main+0x154>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fab6 	bl	8000e50 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 80018e4:	e7ac      	b.n	8001840 <main+0x6c>
 80018e6:	bf00      	nop
 80018e8:	20000564 	.word	0x20000564
 80018ec:	20000116 	.word	0x20000116
 80018f0:	20000708 	.word	0x20000708
 80018f4:	200009a4 	.word	0x200009a4
 80018f8:	0800bc70 	.word	0x0800bc70
 80018fc:	2000090c 	.word	0x2000090c
 8001900:	20000150 	.word	0x20000150
 8001904:	20000078 	.word	0x20000078
 8001908:	20000125 	.word	0x20000125
 800190c:	20000140 	.word	0x20000140
 8001910:	20000141 	.word	0x20000141
 8001914:	20000142 	.word	0x20000142
 8001918:	2000014a 	.word	0x2000014a
 800191c:	20000360 	.word	0x20000360
 8001920:	48000800 	.word	0x48000800
 8001924:	20000154 	.word	0x20000154
 8001928:	20000156 	.word	0x20000156

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0a6      	sub	sp, #152	; 0x98
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001936:	2228      	movs	r2, #40	; 0x28
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f008 fafc 	bl	8009f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2258      	movs	r2, #88	; 0x58
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f008 faee 	bl	8009f38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800195c:	230a      	movs	r3, #10
 800195e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800196a:	2301      	movs	r3, #1
 800196c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800197e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f88f 	bl	8004ab4 <HAL_RCC_OscConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800199c:	f000 f82e 	bl	80019fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	230f      	movs	r3, #15
 80019a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	2302      	movs	r3, #2
 80019a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 f8eb 	bl	8005b98 <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80019c8:	f000 f818 	bl	80019fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <SystemClock_Config+0xcc>)
 80019ce:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019dc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fbb3 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019ec:	f000 f806 	bl	80019fc <Error_Handler>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3798      	adds	r7, #152	; 0x98
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	00010022 	.word	0x00010022

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x8>

08001a06 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b090      	sub	sp, #64	; 0x40
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2228      	movs	r2, #40	; 0x28
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f008 fa7b 	bl	8009f38 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MX_RTC_Init+0x88>)
 8001a46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a50:	227f      	movs	r2, #127	; 0x7f
 8001a52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a56:	22ff      	movs	r2, #255	; 0xff
 8001a58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a6e:	f004 ff65 	bl	800693c <HAL_RTC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a78:	f7ff ffc0 	bl	80019fc <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a86:	f005 f9b9 	bl	8006dfc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_RTC_Init+0x84>)
 8001a94:	f005 fb4e 	bl	8007134 <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a98:	3740      	adds	r7, #64	; 0x40
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000564 	.word	0x20000564
 8001aa4:	40002800 	.word	0x40002800

08001aa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_RTC_MspInit+0x60>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d121      	bne.n	8001afe <HAL_RTC_MspInit+0x56>
 8001aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_RTC_MspInit+0x64>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f000 fc3e 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 fc67 	bl	80023bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2029      	movs	r0, #41	; 0x29
 8001af4:	f000 fc36 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001af8:	2029      	movs	r0, #41	; 0x29
 8001afa:	f000 fc5f 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40002800 	.word	0x40002800
 8001b0c:	10908100 	.word	0x10908100

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x44>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x44>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x44>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x44>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x44>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x44>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f000 fbec 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 8001ba4:	f7ff f900 	bl	8000da8 <delay_1hz>
	delay_4hz();
 8001ba8:	f7ff f91a 	bl	8000de0 <delay_4hz>

	if(blink_mode == 1){
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <SysTick_Handler+0x2c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <SysTick_Handler+0x22>
		led_delay++;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SysTick_Handler+0x30>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Handler+0x30>)
 8001bc0:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 fa9b 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000014a 	.word	0x2000014a
 8001bd0:	20000158 	.word	0x20000158

08001bd4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <RTC_WKUP_IRQHandler+0x10>)
 8001bda:	f005 fff7 	bl	8007bcc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000564 	.word	0x20000564

08001be8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <I2C1_EV_IRQHandler+0x10>)
 8001bee:	f001 fa7d 	bl	80030ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000268 	.word	0x20000268

08001bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <USART2_IRQHandler+0x10>)
 8001c02:	f006 fe49 	bl	8008898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200009a4 	.word	0x200009a4

08001c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c18:	f000 ff62 	bl	8002ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <RTC_Alarm_IRQHandler+0x10>)
 8001c26:	f005 fdcd 	bl	80077c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000564 	.word	0x20000564

08001c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM6_DAC_IRQHandler+0x10>)
 8001c3a:	f006 f983 	bl	8007f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000090c 	.word	0x2000090c

08001c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM7_IRQHandler+0x10>)
 8001c4e:	f006 f979 	bl	8007f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000958 	.word	0x20000958

08001c5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
	}

return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
	}
	return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f008 f8bc 	bl	8009ee4 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20010000 	.word	0x20010000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	2000015c 	.word	0x2000015c
 8001da0:	20000a40 	.word	0x20000a40

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <MX_TIM6_Init+0x6c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001de0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001de4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001dfc:	f005 ff14 	bl	8007c28 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e06:	f7ff fdf9 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_TIM6_Init+0x68>)
 8001e18:	f006 fa84 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001e22:	f7ff fdeb 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000090c 	.word	0x2000090c
 8001e34:	40001000 	.word	0x40001000

08001e38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <MX_TIM7_Init+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e50:	2247      	movs	r2, #71	; 0x47
 8001e52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e6a:	f005 fedd 	bl	8007c28 <HAL_TIM_Base_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e74:	f7ff fdc2 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e86:	f006 fa4d 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e90:	f7ff fdb4 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000958 	.word	0x20000958
 8001ea0:	40001400 	.word	0x40001400

08001ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_TIM_Base_MspInit+0x78>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d114      	bne.n	8001ee0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2036      	movs	r0, #54	; 0x36
 8001ed4:	f000 fa46 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ed8:	2036      	movs	r0, #54	; 0x36
 8001eda:	f000 fa6f 	bl	80023bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001ede:	e018      	b.n	8001f12 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HAL_TIM_Base_MspInit+0x80>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d113      	bne.n	8001f12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ef0:	f043 0320 	orr.w	r3, r3, #32
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2037      	movs	r0, #55	; 0x37
 8001f08:	f000 fa2c 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f0c:	2037      	movs	r0, #55	; 0x37
 8001f0e:	f000 fa55 	bl	80023bc <HAL_NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40001000 	.word	0x40001000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40001400 	.word	0x40001400

08001f28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <MX_USART2_UART_Init+0x5c>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART2_UART_Init+0x58>)
 8001f6c:	f006 fb46 	bl	80085fc <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f76:	f7ff fd41 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009a4 	.word	0x200009a4
 8001f84:	40004400 	.word	0x40004400

08001f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_UART_MspInit+0x8c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d130      	bne.n	800200c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_UART_MspInit+0x90>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f000 fa88 	bl	800250c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2026      	movs	r0, #38	; 0x26
 8002002:	f000 f9af 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002006:	2026      	movs	r0, #38	; 0x26
 8002008:	f000 f9d8 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40004400 	.word	0x40004400
 8002018:	40021000 	.word	0x40021000

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <LoopForever+0x6>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <LoopForever+0xe>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <LoopForever+0x16>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002046:	f7ff fead 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f007 ff51 	bl	8009ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7ff fbc1 	bl	80017d4 <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002060:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8002064:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002068:	20000a3c 	.word	0x20000a3c

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>
	...

08002070 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_Init+0x28>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_Init+0x28>)
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002080:	2003      	movs	r0, #3
 8002082:	f000 f94f 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 f808 	bl	800209c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208c:	f7ff fd40 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x54>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_InitTick+0x58>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f996 	bl	80023ec <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f944 	bl	8002364 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_InitTick+0x5c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000007c 	.word	0x2000007c
 80020f4:	20000084 	.word	0x20000084
 80020f8:	20000080 	.word	0x20000080

080020fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000084 	.word	0x20000084
 8002120:	20000a28 	.word	0x20000a28

08002124 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;  
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000a28 	.word	0x20000a28

0800213c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000084 	.word	0x20000084

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b07      	cmp	r3, #7
 8002330:	d00f      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d00c      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d009      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d006      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d003      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800234a:	21ac      	movs	r1, #172	; 0xac
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800234e:	f7ff fb5a 	bl	8001a06 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff16 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800bc90 	.word	0x0800bc90

08002364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d903      	bls.n	8002384 <HAL_NVIC_SetPriority+0x20>
 800237c:	21c4      	movs	r1, #196	; 0xc4
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <HAL_NVIC_SetPriority+0x54>)
 8002380:	f7ff fb41 	bl	8001a06 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d903      	bls.n	8002392 <HAL_NVIC_SetPriority+0x2e>
 800238a:	21c5      	movs	r1, #197	; 0xc5
 800238c:	480a      	ldr	r0, [pc, #40]	; (80023b8 <HAL_NVIC_SetPriority+0x54>)
 800238e:	f7ff fb3a 	bl	8001a06 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002392:	f7ff ff1b 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002396:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f7ff ff6b 	bl	8002278 <NVIC_EncodePriority>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff3a 	bl	8002224 <__NVIC_SetPriority>
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0800bc90 	.word	0x0800bc90

080023bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da03      	bge.n	80023d6 <HAL_NVIC_EnableIRQ+0x1a>
 80023ce:	21d8      	movs	r1, #216	; 0xd8
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_NVIC_EnableIRQ+0x2c>)
 80023d2:	f7ff fb18 	bl	8001a06 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff04 	bl	80021e8 <__NVIC_EnableIRQ>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800bc90 	.word	0x0800bc90

080023ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff73 	bl	80022e0 <SysTick_Config>
 80023fa:	4603      	mov	r3, r0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002412:	2b02      	cmp	r3, #2
 8002414:	d008      	beq.n	8002428 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2204      	movs	r2, #4
 800241a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e020      	b.n	800246a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 020e 	bic.w	r2, r2, #14
 8002436:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002488:	2b02      	cmp	r3, #2
 800248a:	d005      	beq.n	8002498 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2204      	movs	r2, #4
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e027      	b.n	80024e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 020e 	bic.w	r2, r2, #14
 80024a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
    } 
  }
  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <HAL_GPIO_Init+0x104>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01b      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_GPIO_Init+0x108>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d017      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_GPIO_Init+0x10c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a37      	ldr	r2, [pc, #220]	; (800261c <HAL_GPIO_Init+0x110>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a36      	ldr	r2, [pc, #216]	; (8002620 <HAL_GPIO_Init+0x114>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a35      	ldr	r2, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x118>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a34      	ldr	r2, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x11c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 800255a:	21b2      	movs	r1, #178	; 0xb2
 800255c:	4833      	ldr	r0, [pc, #204]	; (800262c <HAL_GPIO_Init+0x120>)
 800255e:	f7ff fa52 	bl	8001a06 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_GPIO_Init+0x6c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x74>
 8002578:	21b3      	movs	r1, #179	; 0xb3
 800257a:	482c      	ldr	r0, [pc, #176]	; (800262c <HAL_GPIO_Init+0x120>)
 800257c:	f7ff fa43 	bl	8001a06 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 821c 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f000 8217 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b11      	cmp	r3, #17
 800259a:	f000 8212 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f000 820d 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	f000 8208 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80025ba:	f000 8202 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80025c6:	f000 81fc 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80025d2:	f000 81f6 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80025de:	f000 81f0 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80025ea:	f000 81ea 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80025f6:	f000 81e4 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f000 81df 	beq.w	80029c2 <HAL_GPIO_Init+0x4b6>
 8002604:	21b4      	movs	r1, #180	; 0xb4
 8002606:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_GPIO_Init+0x120>)
 8002608:	f7ff f9fd 	bl	8001a06 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260c:	e1d9      	b.n	80029c2 <HAL_GPIO_Init+0x4b6>
 800260e:	bf00      	nop
 8002610:	48000400 	.word	0x48000400
 8002614:	48000800 	.word	0x48000800
 8002618:	48000c00 	.word	0x48000c00
 800261c:	48001000 	.word	0x48001000
 8002620:	48001400 	.word	0x48001400
 8002624:	48001800 	.word	0x48001800
 8002628:	48001c00 	.word	0x48001c00
 800262c:	0800bccc 	.word	0x0800bccc
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81ba 	beq.w	80029bc <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d005      	beq.n	8002660 <HAL_GPIO_Init+0x154>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d140      	bne.n	80026e2 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_GPIO_Init+0x174>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x174>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x174>
 8002678:	21c3      	movs	r1, #195	; 0xc3
 800267a:	4894      	ldr	r0, [pc, #592]	; (80028cc <HAL_GPIO_Init+0x3c0>)
 800267c:	f7ff f9c3 	bl	8001a06 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d027      	beq.n	800273e <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_GPIO_Init+0x202>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x202>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x202>
 8002706:	21d4      	movs	r1, #212	; 0xd4
 8002708:	4870      	ldr	r0, [pc, #448]	; (80028cc <HAL_GPIO_Init+0x3c0>)
 800270a:	f7ff f97c 	bl	8001a06 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d157      	bne.n	80027fa <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_GPIO_Init+0x3c4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01b      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_GPIO_Init+0x3c8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d017      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a5c      	ldr	r2, [pc, #368]	; (80028d8 <HAL_GPIO_Init+0x3cc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_GPIO_Init+0x3d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00f      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a5a      	ldr	r2, [pc, #360]	; (80028e0 <HAL_GPIO_Init+0x3d4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00b      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a59      	ldr	r2, [pc, #356]	; (80028e4 <HAL_GPIO_Init+0x3d8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_GPIO_Init+0x3dc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x286>
 800278a:	21e2      	movs	r1, #226	; 0xe2
 800278c:	484f      	ldr	r0, [pc, #316]	; (80028cc <HAL_GPIO_Init+0x3c0>)
 800278e:	f7ff f93a 	bl	8001a06 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d90b      	bls.n	80027b2 <HAL_GPIO_Init+0x2a6>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b0e      	cmp	r3, #14
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x2a6>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2a6>
 80027aa:	21e3      	movs	r1, #227	; 0xe3
 80027ac:	4847      	ldr	r0, [pc, #284]	; (80028cc <HAL_GPIO_Init+0x3c0>)
 80027ae:	f7ff f92a 	bl	8001a06 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	6939      	ldr	r1, [r7, #16]
 80027f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0203 	and.w	r2, r3, #3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80c0 	beq.w	80029bc <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_GPIO_Init+0x3e0>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <HAL_GPIO_Init+0x3e0>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_GPIO_Init+0x3e0>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <HAL_GPIO_Init+0x3e4>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800287e:	d039      	beq.n	80028f4 <HAL_GPIO_Init+0x3e8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_GPIO_Init+0x3c4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d01f      	beq.n	80028c8 <HAL_GPIO_Init+0x3bc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_GPIO_Init+0x3c8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d019      	beq.n	80028c4 <HAL_GPIO_Init+0x3b8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_GPIO_Init+0x3cc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_GPIO_Init+0x3b4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_GPIO_Init+0x3d0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00d      	beq.n	80028bc <HAL_GPIO_Init+0x3b0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x3d4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_Init+0x3ac>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_GPIO_Init+0x3d8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_GPIO_Init+0x3a8>
 80028b0:	2306      	movs	r3, #6
 80028b2:	e020      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028b4:	2307      	movs	r3, #7
 80028b6:	e01e      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028b8:	2305      	movs	r3, #5
 80028ba:	e01c      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028bc:	2304      	movs	r3, #4
 80028be:	e01a      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028c0:	2303      	movs	r3, #3
 80028c2:	e018      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e016      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e014      	b.n	80028f6 <HAL_GPIO_Init+0x3ea>
 80028cc:	0800bccc 	.word	0x0800bccc
 80028d0:	48000400 	.word	0x48000400
 80028d4:	48000800 	.word	0x48000800
 80028d8:	48000c00 	.word	0x48000c00
 80028dc:	48001000 	.word	0x48001000
 80028e0:	48001400 	.word	0x48001400
 80028e4:	48001800 	.word	0x48001800
 80028e8:	48001c00 	.word	0x48001c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	2300      	movs	r3, #0
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002906:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x4d0>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_GPIO_Init+0x4d4>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae2f 	bne.w	8002630 <HAL_GPIO_Init+0x124>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_GPIO_ReadPin+0x1c>
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_GPIO_ReadPin+0x26>
 8002a00:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002a04:	4809      	ldr	r0, [pc, #36]	; (8002a2c <HAL_GPIO_ReadPin+0x48>)
 8002a06:	f7fe fffe 	bl	8001a06 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e001      	b.n	8002a20 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	0800bccc 	.word	0x0800bccc

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_GPIO_WritePin+0x20>
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_GPIO_WritePin+0x2a>
 8002a50:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <HAL_GPIO_WritePin+0x5c>)
 8002a56:	f7fe ffd6 	bl	8001a06 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002a5a:	787b      	ldrb	r3, [r7, #1]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_GPIO_WritePin+0x40>
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d004      	beq.n	8002a70 <HAL_GPIO_WritePin+0x40>
 8002a66:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002a6a:	4808      	ldr	r0, [pc, #32]	; (8002a8c <HAL_GPIO_WritePin+0x5c>)
 8002a6c:	f7fe ffcb 	bl	8001a06 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	0800bccc 	.word	0x0800bccc

08002a90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_GPIO_TogglePin+0x1c>
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_GPIO_TogglePin+0x26>
 8002aac:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <HAL_GPIO_TogglePin+0x4c>)
 8002ab2:	f7fe ffa8 	bl	8001a06 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	041a      	lsls	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	400b      	ands	r3, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	0800bccc 	.word	0x0800bccc

08002ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f806 	bl	8002b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40010400 	.word	0x40010400

08002b10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e104      	b.n	8002d44 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a83      	ldr	r2, [pc, #524]	; (8002d4c <HAL_I2C_Init+0x224>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_I2C_Init+0x3a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a81      	ldr	r2, [pc, #516]	; (8002d50 <HAL_I2C_Init+0x228>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_I2C_Init+0x3a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_I2C_Init+0x22c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_I2C_Init+0x3a>
 8002b58:	f240 2113 	movw	r1, #531	; 0x213
 8002b5c:	487e      	ldr	r0, [pc, #504]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002b5e:	f7fe ff52 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d304      	bcc.n	8002b76 <HAL_I2C_Init+0x4e>
 8002b6c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002b70:	4879      	ldr	r0, [pc, #484]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002b72:	f7fe ff48 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d008      	beq.n	8002b90 <HAL_I2C_Init+0x68>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d004      	beq.n	8002b90 <HAL_I2C_Init+0x68>
 8002b86:	f240 2115 	movw	r1, #533	; 0x215
 8002b8a:	4873      	ldr	r0, [pc, #460]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002b8c:	f7fe ff3b 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_I2C_Init+0x84>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba0:	d004      	beq.n	8002bac <HAL_I2C_Init+0x84>
 8002ba2:	f240 2116 	movw	r1, #534	; 0x216
 8002ba6:	486c      	ldr	r0, [pc, #432]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002ba8:	f7fe ff2d 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	2bff      	cmp	r3, #255	; 0xff
 8002bb2:	d904      	bls.n	8002bbe <HAL_I2C_Init+0x96>
 8002bb4:	f240 2117 	movw	r1, #535	; 0x217
 8002bb8:	4867      	ldr	r0, [pc, #412]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002bba:	f7fe ff24 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d01c      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d018      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d014      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d010      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d00c      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d008      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b07      	cmp	r3, #7
 8002bfc:	d004      	beq.n	8002c08 <HAL_I2C_Init+0xe0>
 8002bfe:	f44f 7106 	mov.w	r1, #536	; 0x218
 8002c02:	4855      	ldr	r0, [pc, #340]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002c04:	f7fe feff 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_I2C_Init+0xfc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c18:	d004      	beq.n	8002c24 <HAL_I2C_Init+0xfc>
 8002c1a:	f240 2119 	movw	r1, #537	; 0x219
 8002c1e:	484e      	ldr	r0, [pc, #312]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002c20:	f7fe fef1 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_I2C_Init+0x118>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c34:	d004      	beq.n	8002c40 <HAL_I2C_Init+0x118>
 8002c36:	f240 211a 	movw	r1, #538	; 0x21a
 8002c3a:	4847      	ldr	r0, [pc, #284]	; (8002d58 <HAL_I2C_Init+0x230>)
 8002c3c:	f7fe fee3 	bl	8001a06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fe f85b 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e006      	b.n	8002cb6 <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d104      	bne.n	8002cc8 <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69d9      	ldr	r1, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40005400 	.word	0x40005400
 8002d50:	40005800 	.word	0x40005800
 8002d54:	40007800 	.word	0x40007800
 8002d58:	0800bd08 	.word	0x0800bd08

08002d5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	817b      	strh	r3, [r7, #10]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	813b      	strh	r3, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d007      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x30>
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d004      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x30>
 8002d82:	f640 11ca 	movw	r1, #2506	; 0x9ca
 8002d86:	4886      	ldr	r0, [pc, #536]	; (8002fa0 <HAL_I2C_Mem_Read+0x244>)
 8002d88:	f7fe fe3d 	bl	8001a06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 80fd 	bne.w	8002f94 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_I2C_Mem_Read+0x4a>
 8002da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0f1      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_Mem_Read+0x64>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0ea      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc8:	f7ff f9ac 	bl	8002124 <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2319      	movs	r3, #25
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f001 fb27 	bl	800442e <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0d5      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2222      	movs	r2, #34	; 0x22
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a3a      	ldr	r2, [r7, #32]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fe2c 	bl	8003a80 <I2C_RequestMemoryRead>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0ad      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2bff      	cmp	r3, #255	; 0xff
 8002e42:	d90e      	bls.n	8002e62 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_I2C_Mem_Read+0x248>)
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f001 fc1a 	bl	8004694 <I2C_TransferConfig>
 8002e60:	e00f      	b.n	8002e82 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_I2C_Mem_Read+0x248>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f001 fc09 	bl	8004694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f001 face 	bl	800442e <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07c      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d034      	beq.n	8002f42 <HAL_I2C_Mem_Read+0x1e6>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d130      	bne.n	8002f42 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f001 fa9f 	bl	800442e <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e04d      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	d90e      	bls.n	8002f22 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f001 fbba 	bl	8004694 <I2C_TransferConfig>
 8002f20:	e00f      	b.n	8002f42 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f001 fba9 	bl	8004694 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d19a      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f001 faec 	bl	800452e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e01a      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2220      	movs	r2, #32
 8002f66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_I2C_Mem_Read+0x24c>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0800bd08 	.word	0x0800bd08
 8002fa4:	80002400 	.word	0x80002400
 8002fa8:	fe00e800 	.word	0xfe00e800

08002fac <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <HAL_I2C_Mem_Write_IT+0x30>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d004      	beq.n	8002fdc <HAL_I2C_Mem_Write_IT+0x30>
 8002fd2:	f640 2154 	movw	r1, #2644	; 0xa54
 8002fd6:	4842      	ldr	r0, [pc, #264]	; (80030e0 <HAL_I2C_Mem_Write_IT+0x134>)
 8002fd8:	f7fe fd15 	bl	8001a06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d176      	bne.n	80030d6 <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_I2C_Mem_Write_IT+0x48>
 8002fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e06b      	b.n	80030d8 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300e:	d101      	bne.n	8003014 <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	e061      	b.n	80030d8 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Mem_Write_IT+0x76>
 800301e:	2302      	movs	r3, #2
 8003020:	e05a      	b.n	80030d8 <HAL_I2C_Mem_Write_IT+0x12c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800302a:	f7ff f87b 	bl	8002124 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2221      	movs	r2, #33	; 0x21
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_I2C_Mem_Write_IT+0x138>)
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a23      	ldr	r2, [pc, #140]	; (80030e8 <HAL_I2C_Mem_Write_IT+0x13c>)
 800305c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	d906      	bls.n	8003076 <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	; 0xff
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800306e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e007      	b.n	8003086 <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003084:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8003086:	88f8      	ldrh	r0, [r7, #6]
 8003088:	893a      	ldrh	r2, [r7, #8]
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2319      	movs	r3, #25
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4603      	mov	r3, r0
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fc9e 	bl	80039d8 <I2C_RequestMemoryWrite>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e014      	b.n	80030d8 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f001 fae9 	bl	8004694 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030ca:	2101      	movs	r1, #1
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f001 fb53 	bl	8004778 <I2C_Enable_IRQ>

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0800bd08 	.word	0x0800bd08
 80030e4:	ffff0000 	.word	0xffff0000
 80030e8:	080031dd 	.word	0x080031dd

080030ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
  }
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
 800317c:	4613      	mov	r3, r2
 800317e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <I2C_Master_ISR_IT+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e114      	b.n	8003424 <I2C_Master_ISR_IT+0x248>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d013      	beq.n	8003236 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f001 f8bb 	bl	80043aa <I2C_Flush_TXDR>
 8003234:	e0e1      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d023      	beq.n	800328a <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01d      	beq.n	800328a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003288:	e0b7      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01e      	beq.n	80032d4 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d018      	beq.n	80032d4 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d2:	e092      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	09db      	lsrs	r3, r3, #7
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05d      	beq.n	800339c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d057      	beq.n	800339c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d040      	beq.n	8003378 <I2C_Master_ISR_IT+0x19c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13c      	bne.n	8003378 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d90e      	bls.n	8003334 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	b2da      	uxtb	r2, r3
 8003322:	8a79      	ldrh	r1, [r7, #18]
 8003324:	2300      	movs	r3, #0
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f001 f9b1 	bl	8004694 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003332:	e032      	b.n	800339a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003346:	d00b      	beq.n	8003360 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	8a79      	ldrh	r1, [r7, #18]
 8003354:	2000      	movs	r0, #0
 8003356:	9000      	str	r0, [sp, #0]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f001 f99b 	bl	8004694 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335e:	e01c      	b.n	800339a <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8a79      	ldrh	r1, [r7, #18]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f001 f98f 	bl	8004694 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003376:	e010      	b.n	800339a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003386:	d003      	beq.n	8003390 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fc51 	bl	8003c30 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800338e:	e034      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 ff12 	bl	80041bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003398:	e02f      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
 800339a:	e02e      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d028      	beq.n	80033fa <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033cc:	d015      	beq.n	80033fa <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d6:	d108      	bne.n	80033ea <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	e007      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fc20 	bl	8003c30 <I2C_ITMasterSeqCplt>
 80033f0:	e003      	b.n	80033fa <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033f2:	2140      	movs	r1, #64	; 0x40
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fee1 	bl	80041bc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003412:	6979      	ldr	r1, [r7, #20]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fca7 	bl	8003d68 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <I2C_Slave_ISR_IT+0x24>
 800344c:	2302      	movs	r3, #2
 800344e:	e0ec      	b.n	800362a <I2C_Slave_ISR_IT+0x1fe>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003470:	6939      	ldr	r1, [r7, #16]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fd42 	bl	8003efc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d04d      	beq.n	8003520 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800348c:	2b00      	cmp	r3, #0
 800348e:	d047      	beq.n	8003520 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d128      	bne.n	80034ec <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b28      	cmp	r3, #40	; 0x28
 80034a4:	d108      	bne.n	80034b8 <I2C_Slave_ISR_IT+0x8c>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ac:	d104      	bne.n	80034b8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034ae:	6939      	ldr	r1, [r7, #16]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fe2d 	bl	8004110 <I2C_ITListenCplt>
 80034b6:	e032      	b.n	800351e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b29      	cmp	r3, #41	; 0x29
 80034c2:	d10e      	bne.n	80034e2 <I2C_Slave_ISR_IT+0xb6>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ca:	d00a      	beq.n	80034e2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 ff68 	bl	80043aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fbe5 	bl	8003caa <I2C_ITSlaveSeqCplt>
 80034e0:	e01d      	b.n	800351e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80034ea:	e096      	b.n	800361a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <I2C_Slave_ISR_IT+0xe4>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	f040 8085 	bne.w	800361a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	4619      	mov	r1, r3
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fe50 	bl	80041bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800351c:	e07d      	b.n	800361a <I2C_Slave_ISR_IT+0x1ee>
 800351e:	e07c      	b.n	800361a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d030      	beq.n	800358e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02a      	beq.n	800358e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d14f      	bne.n	800361e <I2C_Slave_ISR_IT+0x1f2>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003584:	d04b      	beq.n	800361e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb8f 	bl	8003caa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800358c:	e047      	b.n	800361e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035a6:	6939      	ldr	r1, [r7, #16]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fabd 	bl	8003b28 <I2C_ITAddrCplt>
 80035ae:	e037      	b.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d031      	beq.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02b      	beq.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d018      	beq.n	8003604 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
 8003602:	e00d      	b.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360a:	d002      	beq.n	8003612 <I2C_Slave_ISR_IT+0x1e6>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fb49 	bl	8003caa <I2C_ITSlaveSeqCplt>
 8003618:	e002      	b.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800361e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b088      	sub	sp, #32
 8003636:	af02      	add	r7, sp, #8
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <I2C_Master_ISR_DMA+0x1a>
 8003648:	2302      	movs	r3, #2
 800364a:	e0e1      	b.n	8003810 <I2C_Master_ISR_DMA+0x1de>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003668:	2b00      	cmp	r3, #0
 800366a:	d011      	beq.n	8003690 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2210      	movs	r2, #16
 8003672:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003680:	2120      	movs	r1, #32
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f001 f878 	bl	8004778 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fe8e 	bl	80043aa <I2C_Flush_TXDR>
 800368e:	e0ba      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	09db      	lsrs	r3, r3, #7
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d072      	beq.n	8003782 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06c      	beq.n	8003782 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d04e      	beq.n	8003760 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ce:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	; 0xff
 80036d8:	d906      	bls.n	80036e8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e010      	b.n	800370a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036fa:	d003      	beq.n	8003704 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e002      	b.n	800370a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003708:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	8a79      	ldrh	r1, [r7, #18]
 8003712:	2300      	movs	r3, #0
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 ffbb 	bl	8004694 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b22      	cmp	r3, #34	; 0x22
 800373a:	d108      	bne.n	800374e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800374c:	e05b      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800375e:	e052      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376e:	d003      	beq.n	8003778 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa5d 	bl	8003c30 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003776:	e046      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fd1e 	bl	80041bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003780:	e041      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d029      	beq.n	80037e2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003796:	2b00      	cmp	r3, #0
 8003798:	d023      	beq.n	80037e2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d119      	bne.n	80037d8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b2:	d027      	beq.n	8003804 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037bc:	d108      	bne.n	80037d0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037cc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80037ce:	e019      	b.n	8003804 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fa2d 	bl	8003c30 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80037d6:	e015      	b.n	8003804 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fcee 	bl	80041bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037e0:	e010      	b.n	8003804 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fab3 	bl	8003d68 <I2C_ITMasterCplt>
 8003802:	e000      	b.n	8003806 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003804:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <I2C_Slave_ISR_DMA+0x24>
 8003838:	2302      	movs	r3, #2
 800383a:	e0c9      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x1b8>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb4c 	bl	8003efc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 809a 	beq.w	80039a6 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8093 	beq.w	80039a6 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	0b9b      	lsrs	r3, r3, #14
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0bdb      	lsrs	r3, r3, #15
 8003890:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003894:	2b00      	cmp	r3, #0
 8003896:	d07f      	beq.n	8003998 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00d      	beq.n	80038bc <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0bdb      	lsrs	r3, r3, #15
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0b9b      	lsrs	r3, r3, #14
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80038dc:	2301      	movs	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d128      	bne.n	8003938 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b28      	cmp	r3, #40	; 0x28
 80038f0:	d108      	bne.n	8003904 <I2C_Slave_ISR_DMA+0xec>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f8:	d104      	bne.n	8003904 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fc07 	bl	8004110 <I2C_ITListenCplt>
 8003902:	e048      	b.n	8003996 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b29      	cmp	r3, #41	; 0x29
 800390e:	d10e      	bne.n	800392e <I2C_Slave_ISR_DMA+0x116>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003916:	d00a      	beq.n	800392e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fd42 	bl	80043aa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9bf 	bl	8003caa <I2C_ITSlaveSeqCplt>
 800392c:	e033      	b.n	8003996 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2210      	movs	r2, #16
 8003934:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003936:	e034      	b.n	80039a2 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2210      	movs	r2, #16
 800393e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <I2C_Slave_ISR_DMA+0x14a>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d11f      	bne.n	80039a2 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b21      	cmp	r3, #33	; 0x21
 8003966:	d002      	beq.n	800396e <I2C_Slave_ISR_DMA+0x156>
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b29      	cmp	r3, #41	; 0x29
 800396c:	d103      	bne.n	8003976 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2221      	movs	r2, #33	; 0x21
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
 8003974:	e008      	b.n	8003988 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b22      	cmp	r3, #34	; 0x22
 800397a:	d002      	beq.n	8003982 <I2C_Slave_ISR_DMA+0x16a>
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d102      	bne.n	8003988 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2222      	movs	r2, #34	; 0x22
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	4619      	mov	r1, r3
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fc14 	bl	80041bc <I2C_ITError>
      if (treatdmanack == 1U)
 8003994:	e005      	b.n	80039a2 <I2C_Slave_ISR_DMA+0x18a>
 8003996:	e004      	b.n	80039a2 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039a0:	e011      	b.n	80039c6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80039a2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039a4:	e00f      	b.n	80039c6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	08db      	lsrs	r3, r3, #3
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8b1 	bl	8003b28 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	460b      	mov	r3, r1
 80039ec:	813b      	strh	r3, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <I2C_RequestMemoryWrite+0xa4>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fe47 	bl	8004694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fd4f 	bl	80044ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e02c      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a20:	893b      	ldrh	r3, [r7, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
 8003a2a:	e015      	b.n	8003a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a2c:	893b      	ldrh	r3, [r7, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fd35 	bl	80044ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e012      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4e:	893b      	ldrh	r3, [r7, #8]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fce3 	bl	800442e <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	80002000 	.word	0x80002000

08003a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <I2C_RequestMemoryRead+0xa4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fdf4 	bl	8004694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fcfc 	bl	80044ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e02c      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad0:	e015      	b.n	8003afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad2:	893b      	ldrh	r3, [r7, #8]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fce2 	bl	80044ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e012      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af4:	893b      	ldrh	r3, [r7, #8]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc90 	bl	800442e <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	80002000 	.word	0x80002000

08003b28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b3e:	2b28      	cmp	r3, #40	; 0x28
 8003b40:	d16a      	bne.n	8003c18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d138      	bne.n	8003bf8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89bb      	ldrh	r3, [r7, #12]
 8003b8e:	4053      	eors	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f003 0306 	and.w	r3, r3, #6
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11c      	bne.n	8003bd4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d13b      	bne.n	8003c28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bc6:	89ba      	ldrh	r2, [r7, #12]
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff facf 	bl	8003170 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bd2:	e029      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fe2f 	bl	8004840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bea:	89ba      	ldrh	r2, [r7, #12]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fabd 	bl	8003170 <HAL_I2C_AddrCallback>
}
 8003bf6:	e017      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fe1f 	bl	8004840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c0a:	89ba      	ldrh	r2, [r7, #12]
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff faad 	bl	8003170 <HAL_I2C_AddrCallback>
}
 8003c16:	e007      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b21      	cmp	r3, #33	; 0x21
 8003c4a:	d115      	bne.n	8003c78 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2211      	movs	r2, #17
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c60:	2101      	movs	r1, #1
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fdec 	bl	8004840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fa55 	bl	8003120 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c76:	e014      	b.n	8003ca2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2212      	movs	r2, #18
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fdd6 	bl	8004840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fa49 	bl	8003134 <HAL_I2C_MasterRxCpltCallback>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	0b9b      	lsrs	r3, r3, #14
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00d      	b.n	8003cfc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	0bdb      	lsrs	r3, r3, #15
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b29      	cmp	r3, #41	; 0x29
 8003d06:	d112      	bne.n	8003d2e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2228      	movs	r2, #40	; 0x28
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2221      	movs	r2, #33	; 0x21
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d16:	2101      	movs	r1, #1
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fd91 	bl	8004840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fa0e 	bl	8003148 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d2c:	e017      	b.n	8003d5e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b2a      	cmp	r3, #42	; 0x2a
 8003d38:	d111      	bne.n	8003d5e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2228      	movs	r2, #40	; 0x28
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2222      	movs	r2, #34	; 0x22
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d48:	2102      	movs	r1, #2
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fd78 	bl	8004840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff f9ff 	bl	800315c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b21      	cmp	r3, #33	; 0x21
 8003d88:	d107      	bne.n	8003d9a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fd57 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2211      	movs	r2, #17
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
 8003d98:	e00c      	b.n	8003db4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b22      	cmp	r3, #34	; 0x22
 8003da4:	d106      	bne.n	8003db4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003da6:	2102      	movs	r1, #2
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fd49 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2212      	movs	r2, #18
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <I2C_ITMasterCplt+0x18c>)
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <I2C_ITMasterCplt+0x190>)
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2210      	movs	r2, #16
 8003de2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b60      	cmp	r3, #96	; 0x60
 8003dfa:	d10b      	bne.n	8003e14 <I2C_ITMasterCplt+0xac>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003e12:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fac8 	bl	80043aa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d002      	beq.n	8003e32 <I2C_ITMasterCplt+0xca>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d006      	beq.n	8003e40 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9bf 	bl	80041bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e3e:	e054      	b.n	8003eea <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b21      	cmp	r3, #33	; 0x21
 8003e4a:	d124      	bne.n	8003e96 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d10b      	bne.n	8003e7e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fc fc72 	bl	8000760 <HAL_I2C_MemTxCpltCallback>
}
 8003e7c:	e035      	b.n	8003eea <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff f946 	bl	8003120 <HAL_I2C_MasterTxCpltCallback>
}
 8003e94:	e029      	b.n	8003eea <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b22      	cmp	r3, #34	; 0x22
 8003ea0:	d123      	bne.n	8003eea <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d10b      	bne.n	8003ed4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff f967 	bl	80031a0 <HAL_I2C_MemRxCpltCallback>
}
 8003ed2:	e00a      	b.n	8003eea <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff f925 	bl	8003134 <HAL_I2C_MasterRxCpltCallback>
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	fe00e800 	.word	0xfe00e800
 8003ef8:	ffff0000 	.word	0xffff0000

08003efc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b21      	cmp	r3, #33	; 0x21
 8003f26:	d002      	beq.n	8003f2e <I2C_ITSlaveCplt+0x32>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b29      	cmp	r3, #41	; 0x29
 8003f2c:	d108      	bne.n	8003f40 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f2e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fc84 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2221      	movs	r2, #33	; 0x21
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f3e:	e00d      	b.n	8003f5c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b22      	cmp	r3, #34	; 0x22
 8003f44:	d002      	beq.n	8003f4c <I2C_ITSlaveCplt+0x50>
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d107      	bne.n	8003f5c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f4c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fc75 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2222      	movs	r2, #34	; 0x22
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b64      	ldr	r3, [pc, #400]	; (8004108 <I2C_ITSlaveCplt+0x20c>)
 8003f78:	400b      	ands	r3, r1
 8003f7a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa14 	bl	80043aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	0b9b      	lsrs	r3, r3, #14
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb4:	e018      	b.n	8003fe8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	0bdb      	lsrs	r3, r3, #15
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0304 	bic.w	r3, r3, #4
 8003ffa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8a7 	bl	80041bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b28      	cmp	r3, #40	; 0x28
 8004078:	d141      	bne.n	80040fe <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f847 	bl	8004110 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004082:	e03c      	b.n	80040fe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800408c:	d014      	beq.n	80040b8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fe0b 	bl	8003caa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1d      	ldr	r2, [pc, #116]	; (800410c <I2C_ITSlaveCplt+0x210>)
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff f86b 	bl	800318c <HAL_I2C_ListenCpltCallback>
}
 80040b6:	e022      	b.n	80040fe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b22      	cmp	r3, #34	; 0x22
 80040c2:	d10e      	bne.n	80040e2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff f83e 	bl	800315c <HAL_I2C_SlaveRxCpltCallback>
}
 80040e0:	e00d      	b.n	80040fe <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff f825 	bl	8003148 <HAL_I2C_SlaveTxCpltCallback>
}
 80040fe:	bf00      	nop
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	fe00e800 	.word	0xfe00e800
 800410c:	ffff0000 	.word	0xffff0000

08004110 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <I2C_ITListenCplt+0xa8>)
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f043 0204 	orr.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800418e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb54 	bl	8004840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fe ffef 	bl	800318c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	ffff0000 	.word	0xffff0000

080041bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <I2C_ITError+0x194>)
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b28      	cmp	r3, #40	; 0x28
 80041f2:	d005      	beq.n	8004200 <I2C_ITError+0x44>
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b29      	cmp	r3, #41	; 0x29
 80041f8:	d002      	beq.n	8004200 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b2a      	cmp	r3, #42	; 0x2a
 80041fe:	d10b      	bne.n	8004218 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004200:	2103      	movs	r1, #3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb1c 	bl	8004840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2228      	movs	r2, #40	; 0x28
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a50      	ldr	r2, [pc, #320]	; (8004354 <I2C_ITError+0x198>)
 8004214:	635a      	str	r2, [r3, #52]	; 0x34
 8004216:	e011      	b.n	800423c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004218:	f248 0103 	movw	r1, #32771	; 0x8003
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fb0f 	bl	8004840 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b60      	cmp	r3, #96	; 0x60
 800422c:	d003      	beq.n	8004236 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	2b00      	cmp	r3, #0
 8004248:	d039      	beq.n	80042be <I2C_ITError+0x102>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b11      	cmp	r3, #17
 800424e:	d002      	beq.n	8004256 <I2C_ITError+0x9a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b21      	cmp	r3, #33	; 0x21
 8004254:	d133      	bne.n	80042be <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004264:	d107      	bne.n	8004276 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004274:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f939 	bl	80024f2 <HAL_DMA_GetState>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d017      	beq.n	80042b6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	4a33      	ldr	r2, [pc, #204]	; (8004358 <I2C_ITError+0x19c>)
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe f8eb 	bl	8002476 <HAL_DMA_Abort_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04d      	beq.n	8004342 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042b4:	e045      	b.n	8004342 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f850 	bl	800435c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042bc:	e041      	b.n	8004342 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d039      	beq.n	800433a <I2C_ITError+0x17e>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b12      	cmp	r3, #18
 80042ca:	d002      	beq.n	80042d2 <I2C_ITError+0x116>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	d133      	bne.n	800433a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e0:	d107      	bne.n	80042f2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f8fb 	bl	80024f2 <HAL_DMA_GetState>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d017      	beq.n	8004332 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <I2C_ITError+0x19c>)
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe f8ad 	bl	8002476 <HAL_DMA_Abort_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800432c:	4610      	mov	r0, r2
 800432e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004330:	e009      	b.n	8004346 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f812 	bl	800435c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004338:	e005      	b.n	8004346 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f80e 	bl	800435c <I2C_TreatErrorCallback>
  }
}
 8004340:	e002      	b.n	8004348 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004346:	bf00      	nop
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	ffff0000 	.word	0xffff0000
 8004354:	0800342d 	.word	0x0800342d
 8004358:	080043f3 	.word	0x080043f3

0800435c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b60      	cmp	r3, #96	; 0x60
 800436e:	d10e      	bne.n	800438e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe ff1e 	bl	80031c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800438c:	e009      	b.n	80043a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fe ff09 	bl	80031b4 <HAL_I2C_ErrorCallback>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d103      	bne.n	80043c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2200      	movs	r2, #0
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	619a      	str	r2, [r3, #24]
  }
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	2200      	movs	r2, #0
 800440e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff ff9b 	bl	800435c <I2C_TreatErrorCallback>
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800443e:	e022      	b.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d01e      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fd fe6c 	bl	8002124 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d113      	bne.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00f      	b.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699a      	ldr	r2, [r3, #24]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d0cd      	beq.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ba:	e02c      	b.n	8004516 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f871 	bl	80045a8 <I2C_IsAcknowledgeFailed>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02a      	b.n	8004526 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d01e      	beq.n	8004516 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fd fe24 	bl	8002124 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e007      	b.n	8004526 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d1cb      	bne.n	80044bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453a:	e028      	b.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f831 	bl	80045a8 <I2C_IsAcknowledgeFailed>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e026      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fd fde8 	bl	8002124 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d113      	bne.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e007      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d1cf      	bne.n	800453c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d161      	bne.n	8004686 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d0:	d02b      	beq.n	800462a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e2:	e022      	b.n	800462a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d01e      	beq.n	800462a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7fd fd9a 	bl	8002124 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <I2C_IsAcknowledgeFailed+0x5a>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02e      	b.n	8004688 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d1d5      	bne.n	80045e4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2210      	movs	r2, #16
 800463e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2220      	movs	r2, #32
 8004646:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff feae 	bl	80043aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <I2C_IsAcknowledgeFailed+0xe8>)
 800465a:	400b      	ands	r3, r1
 800465c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	fe00e800 	.word	0xfe00e800

08004694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	4613      	mov	r3, r2
 80046a4:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <I2C_TransferConfig+0xc4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <I2C_TransferConfig+0x3a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <I2C_TransferConfig+0xc8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <I2C_TransferConfig+0x3a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <I2C_TransferConfig+0xcc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <I2C_TransferConfig+0x3a>
 80046c4:	f641 11cb 	movw	r1, #6603	; 0x19cb
 80046c8:	4826      	ldr	r0, [pc, #152]	; (8004764 <I2C_TransferConfig+0xd0>)
 80046ca:	f7fd f99c 	bl	8001a06 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d4:	d00b      	beq.n	80046ee <I2C_TransferConfig+0x5a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046dc:	d007      	beq.n	80046ee <I2C_TransferConfig+0x5a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <I2C_TransferConfig+0x5a>
 80046e4:	f641 11cc 	movw	r1, #6604	; 0x19cc
 80046e8:	481e      	ldr	r0, [pc, #120]	; (8004764 <I2C_TransferConfig+0xd0>)
 80046ea:	f7fd f98c 	bl	8001a06 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <I2C_TransferConfig+0xd4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <I2C_TransferConfig+0x82>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <I2C_TransferConfig+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <I2C_TransferConfig+0x82>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <I2C_TransferConfig+0xdc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <I2C_TransferConfig+0x82>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <I2C_TransferConfig+0x82>
 800470c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8004710:	4814      	ldr	r0, [pc, #80]	; (8004764 <I2C_TransferConfig+0xd0>)
 8004712:	f7fd f978 	bl	8001a06 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	0d5b      	lsrs	r3, r3, #21
 8004720:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <I2C_TransferConfig+0xe0>)
 8004726:	430b      	orrs	r3, r1
 8004728:	43db      	mvns	r3, r3
 800472a:	ea02 0103 	and.w	r1, r2, r3
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004734:	7a7b      	ldrb	r3, [r7, #9]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40005400 	.word	0x40005400
 800475c:	40005800 	.word	0x40005800
 8004760:	40007800 	.word	0x40007800
 8004764:	0800bd08 	.word	0x0800bd08
 8004768:	80004000 	.word	0x80004000
 800476c:	80002400 	.word	0x80002400
 8004770:	80002000 	.word	0x80002000
 8004774:	03ff63ff 	.word	0x03ff63ff

08004778 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <I2C_Enable_IRQ+0xc0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004796:	4a29      	ldr	r2, [pc, #164]	; (800483c <I2C_Enable_IRQ+0xc4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d11d      	bne.n	80047d8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800479c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da03      	bge.n	80047ac <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d103      	bne.n	80047ba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047ba:	887b      	ldrh	r3, [r7, #2]
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d103      	bne.n	80047c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d125      	bne.n	800481a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047d6:	e020      	b.n	800481a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da03      	bge.n	80047e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80047f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800480a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	2b20      	cmp	r3, #32
 8004810:	d103      	bne.n	800481a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6819      	ldr	r1, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	08003633 	.word	0x08003633
 800483c:	08003819 	.word	0x08003819

08004840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00f      	beq.n	800487a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004860:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800486e:	2b28      	cmp	r3, #40	; 0x28
 8004870:	d003      	beq.n	800487a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800488a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004898:	2b28      	cmp	r3, #40	; 0x28
 800489a:	d003      	beq.n	80048a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da03      	bge.n	80048b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d103      	bne.n	80048c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d103      	bne.n	80048d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f043 0320 	orr.w	r3, r3, #32
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d103      	bne.n	80048de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	400a      	ands	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a30      	ldr	r2, [pc, #192]	; (80049cc <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00d      	beq.n	800492c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d008      	beq.n	800492c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	482c      	ldr	r0, [pc, #176]	; (80049d8 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004928:	f7fd f86d 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	d003      	beq.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800493a:	2165      	movs	r1, #101	; 0x65
 800493c:	4826      	ldr	r0, [pc, #152]	; (80049d8 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800493e:	f7fd f862 	bl	8001a06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d138      	bne.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8004958:	2302      	movs	r3, #2
 800495a:	e032      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	; 0x24
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800498a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40005400 	.word	0x40005400
 80049d0:	40005800 	.word	0x40005800
 80049d4:	40007800 	.word	0x40007800
 80049d8:	0800bd40 	.word	0x0800bd40

080049dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2e      	ldr	r2, [pc, #184]	; (8004aa4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00d      	beq.n	8004a0c <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d008      	beq.n	8004a0c <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004a04:	2192      	movs	r1, #146	; 0x92
 8004a06:	482a      	ldr	r0, [pc, #168]	; (8004ab0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004a08:	f7fc fffd 	bl	8001a06 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d903      	bls.n	8004a1a <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8004a12:	2193      	movs	r1, #147	; 0x93
 8004a14:	4826      	ldr	r0, [pc, #152]	; (8004ab0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004a16:	f7fc fff6 	bl	8001a06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d139      	bne.n	8004a9a <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e033      	b.n	8004a9c <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40005400 	.word	0x40005400
 8004aa8:	40005800 	.word	0x40005800
 8004aac:	40007800 	.word	0x40007800
 8004ab0:	0800bd40 	.word	0x0800bd40

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f001 b85e 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_OscConfig+0x66>
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d119      	bne.n	8004b1a <HAL_RCC_OscConfig+0x66>
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d112      	bne.n	8004b1a <HAL_RCC_OscConfig+0x66>
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <HAL_RCC_OscConfig+0x66>
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_RCC_OscConfig+0x66>
 8004b10:	f240 114b 	movw	r1, #331	; 0x14b
 8004b14:	48be      	ldr	r0, [pc, #760]	; (8004e10 <HAL_RCC_OscConfig+0x35c>)
 8004b16:	f7fc ff76 	bl	8001a06 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8178 	beq.w	8004e1a <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4a:	d004      	beq.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b4c:	f240 1151 	movw	r1, #337	; 0x151
 8004b50:	48af      	ldr	r0, [pc, #700]	; (8004e10 <HAL_RCC_OscConfig+0x35c>)
 8004b52:	f7fc ff58 	bl	8001a06 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b56:	4baf      	ldr	r3, [pc, #700]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00c      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b62:	4bac      	ldr	r3, [pc, #688]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d159      	bne.n	8004c22 <HAL_RCC_OscConfig+0x16e>
 8004b6e:	4ba9      	ldr	r3, [pc, #676]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7a:	d152      	bne.n	8004c22 <HAL_RCC_OscConfig+0x16e>
 8004b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8004b90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d102      	bne.n	8004bae <HAL_RCC_OscConfig+0xfa>
 8004ba8:	4b9a      	ldr	r3, [pc, #616]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x126>
 8004bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004bca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004bd6:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bde:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004be2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004be6:	fa92 f2a2 	rbit	r2, r2
 8004bea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004bee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004bf2:	fab2 f282 	clz	r2, r2
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	f042 0220 	orr.w	r2, r2, #32
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f002 021f 	and.w	r2, r2, #31
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8104 	beq.w	8004e18 <HAL_RCC_OscConfig+0x364>
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 80fe 	bne.w	8004e18 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f000 bfb4 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCC_OscConfig+0x188>
 8004c2e:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a78      	ldr	r2, [pc, #480]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e030      	b.n	8004c9e <HAL_RCC_OscConfig+0x1ea>
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1ac>
 8004c46:	4b73      	ldr	r3, [pc, #460]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a72      	ldr	r2, [pc, #456]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b70      	ldr	r3, [pc, #448]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6f      	ldr	r2, [pc, #444]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01e      	b.n	8004c9e <HAL_RCC_OscConfig+0x1ea>
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x1d2>
 8004c6c:	4b69      	ldr	r3, [pc, #420]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a68      	ldr	r2, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b66      	ldr	r3, [pc, #408]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a65      	ldr	r2, [pc, #404]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e00b      	b.n	8004c9e <HAL_RCC_OscConfig+0x1ea>
 8004c86:	4b63      	ldr	r3, [pc, #396]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a62      	ldr	r2, [pc, #392]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b60      	ldr	r3, [pc, #384]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5f      	ldr	r2, [pc, #380]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d059      	beq.n	8004d5c <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fa3c 	bl	8002124 <HAL_GetTick>
 8004cac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb2:	f7fd fa37 	bl	8002124 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	f000 bf61 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8004cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ccc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004cdc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_OscConfig+0x246>
 8004cf4:	4b47      	ldr	r3, [pc, #284]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	e015      	b.n	8004d26 <HAL_RCC_OscConfig+0x272>
 8004cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cfe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d22:	4b3c      	ldr	r3, [pc, #240]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d2a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004d2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004d32:	fa92 f2a2 	rbit	r2, r2
 8004d36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004d3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d3e:	fab2 f282 	clz	r2, r2
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f042 0220 	orr.w	r2, r2, #32
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	f002 021f 	and.w	r2, r2, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ab      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1fe>
 8004d5a:	e05e      	b.n	8004e1a <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd f9e2 	bl	8002124 <HAL_GetTick>
 8004d60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d66:	f7fd f9dd 	bl	8002124 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d902      	bls.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	f000 bf07 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8004d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004d90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d102      	bne.n	8004dae <HAL_RCC_OscConfig+0x2fa>
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	e015      	b.n	8004dda <HAL_RCC_OscConfig+0x326>
 8004dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004dca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCC_OscConfig+0x360>)
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dde:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004de2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004de6:	fa92 f2a2 	rbit	r2, r2
 8004dea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004dee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004df2:	fab2 f282 	clz	r2, r2
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f042 0220 	orr.w	r2, r2, #32
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	f002 021f 	and.w	r2, r2, #31
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ab      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2b2>
 8004e0e:	e004      	b.n	8004e1a <HAL_RCC_OscConfig+0x366>
 8004e10:	0800bd7c 	.word	0x0800bd7c
 8004e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 818e 	beq.w	8005146 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_RCC_OscConfig+0x394>
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCC_OscConfig+0x394>
 8004e3e:	f240 1189 	movw	r1, #393	; 0x189
 8004e42:	48a8      	ldr	r0, [pc, #672]	; (80050e4 <HAL_RCC_OscConfig+0x630>)
 8004e44:	f7fc fddf 	bl	8001a06 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b1f      	cmp	r3, #31
 8004e50:	d904      	bls.n	8004e5c <HAL_RCC_OscConfig+0x3a8>
 8004e52:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004e56:	48a3      	ldr	r0, [pc, #652]	; (80050e4 <HAL_RCC_OscConfig+0x630>)
 8004e58:	f7fc fdd5 	bl	8001a06 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e5c:	4ba2      	ldr	r3, [pc, #648]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e68:	4b9f      	ldr	r3, [pc, #636]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d16d      	bne.n	8004f50 <HAL_RCC_OscConfig+0x49c>
 8004e74:	4b9c      	ldr	r3, [pc, #624]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e80:	d166      	bne.n	8004f50 <HAL_RCC_OscConfig+0x49c>
 8004e82:	2302      	movs	r3, #2
 8004e84:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004e94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3fe>
 8004eac:	4b8e      	ldr	r3, [pc, #568]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	e013      	b.n	8004eda <HAL_RCC_OscConfig+0x426>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ebc:	fa93 f3a3 	rbit	r3, r3
 8004ec0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004eca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004ece:	fa93 f3a3 	rbit	r3, r3
 8004ed2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ed6:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2202      	movs	r2, #2
 8004edc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004ee0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004ee4:	fa92 f2a2 	rbit	r2, r2
 8004ee8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004eec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ef0:	fab2 f282 	clz	r2, r2
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	f042 0220 	orr.w	r2, r2, #32
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	f002 021f 	and.w	r2, r2, #31
 8004f00:	2101      	movs	r1, #1
 8004f02:	fa01 f202 	lsl.w	r2, r1, r2
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_RCC_OscConfig+0x468>
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f000 be37 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b72      	ldr	r3, [pc, #456]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	21f8      	movs	r1, #248	; 0xf8
 8004f2c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004f34:	fa91 f1a1 	rbit	r1, r1
 8004f38:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004f3c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f40:	fab1 f181 	clz	r1, r1
 8004f44:	b2c9      	uxtb	r1, r1
 8004f46:	408b      	lsls	r3, r1
 8004f48:	4967      	ldr	r1, [pc, #412]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	e0fa      	b.n	8005146 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8085 	beq.w	8005066 <HAL_RCC_OscConfig+0x5b2>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004f6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	2301      	movs	r3, #1
 8004f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fd f8cc 	bl	8002124 <HAL_GetTick>
 8004f8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd f8c7 	bl	8002124 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f000 bdf1 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004fba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x524>
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e013      	b.n	8005000 <HAL_RCC_OscConfig+0x54c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004fea:	2302      	movs	r3, #2
 8004fec:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ff0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2202      	movs	r2, #2
 8005002:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005006:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005012:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005016:	fab2 f282 	clz	r2, r2
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	f042 0220 	orr.w	r2, r2, #32
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	f002 021f 	and.w	r2, r2, #31
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f202 	lsl.w	r2, r1, r2
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0af      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	21f8      	movs	r1, #248	; 0xf8
 8005042:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800504a:	fa91 f1a1 	rbit	r1, r1
 800504e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005052:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005056:	fab1 f181 	clz	r1, r1
 800505a:	b2c9      	uxtb	r1, r1
 800505c:	408b      	lsls	r3, r1
 800505e:	4922      	ldr	r1, [pc, #136]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 8005060:	4313      	orrs	r3, r2
 8005062:	600b      	str	r3, [r1, #0]
 8005064:	e06f      	b.n	8005146 <HAL_RCC_OscConfig+0x692>
 8005066:	2301      	movs	r3, #1
 8005068:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005078:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005086:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	461a      	mov	r2, r3
 800508e:	2300      	movs	r3, #0
 8005090:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005092:	f7fd f847 	bl	8002124 <HAL_GetTick>
 8005096:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509c:	f7fd f842 	bl	8002124 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d902      	bls.n	80050b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	f000 bd6c 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 80050b2:	2302      	movs	r3, #2
 80050b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80050c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x638>
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <HAL_RCC_OscConfig+0x634>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	e018      	b.n	8005114 <HAL_RCC_OscConfig+0x660>
 80050e2:	bf00      	nop
 80050e4:	0800bd7c 	.word	0x0800bd7c
 80050e8:	40021000 	.word	0x40021000
 80050ec:	2302      	movs	r3, #2
 80050ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050fe:	2302      	movs	r3, #2
 8005100:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005104:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005110:	4bc0      	ldr	r3, [pc, #768]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2202      	movs	r2, #2
 8005116:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800511a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800511e:	fa92 f2a2 	rbit	r2, r2
 8005122:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005126:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800512a:	fab2 f282 	clz	r2, r2
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f042 0220 	orr.w	r2, r2, #32
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f002 021f 	and.w	r2, r2, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1aa      	bne.n	800509c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80e7 	beq.w	8005324 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_RCC_OscConfig+0x6c0>
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d004      	beq.n	8005174 <HAL_RCC_OscConfig+0x6c0>
 800516a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800516e:	48aa      	ldr	r0, [pc, #680]	; (8005418 <HAL_RCC_OscConfig+0x964>)
 8005170:	f7fc fc49 	bl	8001a06 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d066      	beq.n	800524c <HAL_RCC_OscConfig+0x798>
 800517e:	2301      	movs	r3, #1
 8005180:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005188:	fa93 f3a3 	rbit	r3, r3
 800518c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005190:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	4b9f      	ldr	r3, [pc, #636]	; (800541c <HAL_RCC_OscConfig+0x968>)
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	461a      	mov	r2, r3
 80051a4:	2301      	movs	r3, #1
 80051a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7fc ffbc 	bl	8002124 <HAL_GetTick>
 80051ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b2:	f7fc ffb7 	bl	8002124 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f000 bce1 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 80051c8:	2302      	movs	r3, #2
 80051ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d2:	fa93 f2a3 	rbit	r2, r3
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80051e0:	2202      	movs	r2, #2
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	fa93 f2a3 	rbit	r2, r3
 80051ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80051f8:	2202      	movs	r2, #2
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	fa93 f2a3 	rbit	r2, r3
 8005206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800520a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520c:	4b81      	ldr	r3, [pc, #516]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005214:	2102      	movs	r1, #2
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f1a3 	rbit	r1, r3
 8005222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005226:	6019      	str	r1, [r3, #0]
  return result;
 8005228:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0b3      	beq.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
 800524a:	e06b      	b.n	8005324 <HAL_RCC_OscConfig+0x870>
 800524c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	fa93 f2a3 	rbit	r2, r3
 800525e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005262:	601a      	str	r2, [r3, #0]
  return result;
 8005264:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005268:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCC_OscConfig+0x968>)
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527e:	f7fc ff51 	bl	8002124 <HAL_GetTick>
 8005282:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005288:	f7fc ff4c 	bl	8002124 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d902      	bls.n	800529e <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	f000 bc76 	b.w	8005b8a <HAL_RCC_OscConfig+0x10d6>
 800529e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80052a2:	2202      	movs	r2, #2
 80052a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	fa93 f2a3 	rbit	r2, r3
 80052b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80052ba:	2202      	movs	r2, #2
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	fa93 f2a3 	rbit	r2, r3
 80052c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052d2:	2202      	movs	r2, #2
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	fa93 f2a3 	rbit	r2, r3
 80052e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e6:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 80052e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80052ee:	2102      	movs	r1, #2
 80052f0:	6019      	str	r1, [r3, #0]
 80052f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	fa93 f1a3 	rbit	r1, r3
 80052fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005300:	6019      	str	r1, [r3, #0]
  return result;
 8005302:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1b1      	bne.n	8005288 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8171 	beq.w	8005616 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <HAL_RCC_OscConfig+0x8ae>
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d009      	beq.n	8005362 <HAL_RCC_OscConfig+0x8ae>
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b05      	cmp	r3, #5
 8005356:	d004      	beq.n	8005362 <HAL_RCC_OscConfig+0x8ae>
 8005358:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800535c:	482e      	ldr	r0, [pc, #184]	; (8005418 <HAL_RCC_OscConfig+0x964>)
 800535e:	f7fc fb52 	bl	8001a06 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	61d3      	str	r3, [r2, #28]
 800537a:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f107 030c 	add.w	r3, r7, #12
 800538c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCC_OscConfig+0x96c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11a      	bne.n	80053d6 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <HAL_RCC_OscConfig+0x96c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_RCC_OscConfig+0x96c>)
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ac:	f7fc feba 	bl	8002124 <HAL_GetTick>
 80053b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	e009      	b.n	80053ca <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b6:	f7fc feb5 	bl	8002124 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e3df      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <HAL_RCC_OscConfig+0x96c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ef      	beq.n	80053b6 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d106      	bne.n	80053ee <HAL_RCC_OscConfig+0x93a>
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6213      	str	r3, [r2, #32]
 80053ec:	e038      	b.n	8005460 <HAL_RCC_OscConfig+0x9ac>
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d115      	bne.n	8005424 <HAL_RCC_OscConfig+0x970>
 80053f8:	4b06      	ldr	r3, [pc, #24]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	4a05      	ldr	r2, [pc, #20]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6213      	str	r3, [r2, #32]
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	4a02      	ldr	r2, [pc, #8]	; (8005414 <HAL_RCC_OscConfig+0x960>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	6213      	str	r3, [r2, #32]
 8005410:	e026      	b.n	8005460 <HAL_RCC_OscConfig+0x9ac>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	0800bd7c 	.word	0x0800bd7c
 800541c:	10908120 	.word	0x10908120
 8005420:	40007000 	.word	0x40007000
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x994>
 800542e:	4b5e      	ldr	r3, [pc, #376]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a5d      	ldr	r2, [pc, #372]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 8005434:	f043 0304 	orr.w	r3, r3, #4
 8005438:	6213      	str	r3, [r2, #32]
 800543a:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a5a      	ldr	r2, [pc, #360]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6213      	str	r3, [r2, #32]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0x9ac>
 8005448:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	4a56      	ldr	r2, [pc, #344]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6213      	str	r3, [r2, #32]
 8005454:	4b54      	ldr	r3, [pc, #336]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4a53      	ldr	r2, [pc, #332]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 800545a:	f023 0304 	bic.w	r3, r3, #4
 800545e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d064      	beq.n	8005534 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546a:	f7fc fe5b 	bl	8002124 <HAL_GetTick>
 800546e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fc fe56 	bl	8002124 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e37e      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
 800548c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005490:	2202      	movs	r2, #2
 8005492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	fa93 f2a3 	rbit	r2, r3
 800549e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80054a8:	2202      	movs	r2, #2
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	fa93 f2a3 	rbit	r2, r3
 80054b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80054ba:	601a      	str	r2, [r3, #0]
  return result;
 80054bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80054c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d102      	bne.n	80054dc <HAL_RCC_OscConfig+0xa28>
 80054d6:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	e00d      	b.n	80054f8 <HAL_RCC_OscConfig+0xa44>
 80054dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80054e0:	2202      	movs	r2, #2
 80054e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80054fc:	2102      	movs	r1, #2
 80054fe:	6011      	str	r1, [r2, #0]
 8005500:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	fa92 f1a2 	rbit	r1, r2
 800550a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800550e:	6011      	str	r1, [r2, #0]
  return result;
 8005510:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	fab2 f282 	clz	r2, r2
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f002 021f 	and.w	r2, r2, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0a0      	beq.n	8005474 <HAL_RCC_OscConfig+0x9c0>
 8005532:	e066      	b.n	8005602 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005534:	f7fc fdf6 	bl	8002124 <HAL_GetTick>
 8005538:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553c:	e00b      	b.n	8005556 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fc fdf1 	bl	8002124 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e319      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8005556:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800555a:	2202      	movs	r2, #2
 800555c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005572:	2202      	movs	r2, #2
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005584:	601a      	str	r2, [r3, #0]
  return result;
 8005586:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800558a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0xaf8>
 80055a0:	4b01      	ldr	r3, [pc, #4]	; (80055a8 <HAL_RCC_OscConfig+0xaf4>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	e010      	b.n	80055c8 <HAL_RCC_OscConfig+0xb14>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80055b0:	2202      	movs	r2, #2
 80055b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	fa93 f2a3 	rbit	r2, r3
 80055be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	4bad      	ldr	r3, [pc, #692]	; (800587c <HAL_RCC_OscConfig+0xdc8>)
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80055cc:	2102      	movs	r1, #2
 80055ce:	6011      	str	r1, [r2, #0]
 80055d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	fa92 f1a2 	rbit	r1, r2
 80055da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055de:	6011      	str	r1, [r2, #0]
  return result;
 80055e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	fab2 f282 	clz	r2, r2
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	f002 021f 	and.w	r2, r2, #31
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d19d      	bne.n	800553e <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005602:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560a:	4b9c      	ldr	r3, [pc, #624]	; (800587c <HAL_RCC_OscConfig+0xdc8>)
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4a9b      	ldr	r2, [pc, #620]	; (800587c <HAL_RCC_OscConfig+0xdc8>)
 8005610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005614:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00e      	beq.n	800563e <HAL_RCC_OscConfig+0xb8a>
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d009      	beq.n	800563e <HAL_RCC_OscConfig+0xb8a>
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d004      	beq.n	800563e <HAL_RCC_OscConfig+0xb8a>
 8005634:	f240 213a 	movw	r1, #570	; 0x23a
 8005638:	4891      	ldr	r0, [pc, #580]	; (8005880 <HAL_RCC_OscConfig+0xdcc>)
 800563a:	f7fc f9e4 	bl	8001a06 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 829f 	beq.w	8005b88 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564a:	4b8c      	ldr	r3, [pc, #560]	; (800587c <HAL_RCC_OscConfig+0xdc8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b08      	cmp	r3, #8
 8005654:	f000 826c 	beq.w	8005b30 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b02      	cmp	r3, #2
 8005660:	f040 81e4 	bne.w	8005a2c <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566e:	d00a      	beq.n	8005686 <HAL_RCC_OscConfig+0xbd2>
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d004      	beq.n	8005686 <HAL_RCC_OscConfig+0xbd2>
 800567c:	f240 2143 	movw	r1, #579	; 0x243
 8005680:	487f      	ldr	r0, [pc, #508]	; (8005880 <HAL_RCC_OscConfig+0xdcc>)
 8005682:	f7fc f9c0 	bl	8001a06 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d058      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569a:	d052      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a6:	d04c      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056b2:	d046      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d040      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80056ca:	d03a      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056d6:	d034      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80056e2:	d02e      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ee:	d028      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056f0:	1d3b      	adds	r3, r7, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056fa:	d022      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005706:	d01c      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005712:	d016      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800571e:	d010      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800572a:	d00a      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005736:	d004      	beq.n	8005742 <HAL_RCC_OscConfig+0xc8e>
 8005738:	f44f 7111 	mov.w	r1, #580	; 0x244
 800573c:	4850      	ldr	r0, [pc, #320]	; (8005880 <HAL_RCC_OscConfig+0xdcc>)
 800573e:	f7fc f962 	bl	8001a06 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d04f      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b01      	cmp	r3, #1
 8005754:	d04a      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b02      	cmp	r3, #2
 800575e:	d045      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b03      	cmp	r3, #3
 8005768:	d040      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b04      	cmp	r3, #4
 8005772:	d03b      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b05      	cmp	r3, #5
 800577c:	d036      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b06      	cmp	r3, #6
 8005786:	d031      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b07      	cmp	r3, #7
 8005790:	d02c      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b08      	cmp	r3, #8
 800579a:	d027      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	d022      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b0a      	cmp	r3, #10
 80057ae:	d01d      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d018      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b0d      	cmp	r3, #13
 80057cc:	d00e      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b0e      	cmp	r3, #14
 80057d6:	d009      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b0f      	cmp	r3, #15
 80057e0:	d004      	beq.n	80057ec <HAL_RCC_OscConfig+0xd38>
 80057e2:	f240 2146 	movw	r1, #582	; 0x246
 80057e6:	4826      	ldr	r0, [pc, #152]	; (8005880 <HAL_RCC_OscConfig+0xdcc>)
 80057e8:	f7fc f90d 	bl	8001a06 <assert_failed>
 80057ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80057f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	fa93 f2a3 	rbit	r2, r3
 8005800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005804:	601a      	str	r2, [r3, #0]
  return result;
 8005806:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800580a:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005816:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fc fc7f 	bl	8002124 <HAL_GetTick>
 8005826:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582a:	e009      	b.n	8005840 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582c:	f7fc fc7a 	bl	8002124 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1a4      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8005840:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	fa93 f2a3 	rbit	r2, r3
 8005854:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005858:	601a      	str	r2, [r3, #0]
  return result;
 800585a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800585e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005860:	fab3 f383 	clz	r3, r3
 8005864:	b2db      	uxtb	r3, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0xdd0>
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <HAL_RCC_OscConfig+0xdc8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	e020      	b.n	80058bc <HAL_RCC_OscConfig+0xe08>
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	0800bd7c 	.word	0x0800bd7c
 8005884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800588c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	fa93 f2a3 	rbit	r2, r3
 8005898:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80058a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	fa93 f2a3 	rbit	r2, r3
 80058b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	4bb6      	ldr	r3, [pc, #728]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80058c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	fa92 f1a2 	rbit	r1, r2
 80058d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058d4:	6011      	str	r1, [r2, #0]
  return result;
 80058d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	fab2 f282 	clz	r2, r2
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f042 0220 	orr.w	r2, r2, #32
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	f002 021f 	and.w	r2, r2, #31
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d199      	bne.n	800582c <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f8:	4ba6      	ldr	r3, [pc, #664]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f023 020f 	bic.w	r2, r3, #15
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	49a3      	ldr	r1, [pc, #652]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005908:	4313      	orrs	r3, r2
 800590a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800590c:	4ba1      	ldr	r3, [pc, #644]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005914:	1d3b      	adds	r3, r7, #4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a19      	ldr	r1, [r3, #32]
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	430b      	orrs	r3, r1
 8005922:	499c      	ldr	r1, [pc, #624]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800592c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005940:	601a      	str	r2, [r3, #0]
  return result;
 8005942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005946:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005952:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	461a      	mov	r2, r3
 800595a:	2301      	movs	r3, #1
 800595c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fc fbe1 	bl	8002124 <HAL_GetTick>
 8005962:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005966:	e009      	b.n	800597c <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005968:	f7fc fbdc 	bl	8002124 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e106      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
 800597c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	fa93 f2a3 	rbit	r2, r3
 8005990:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005994:	601a      	str	r2, [r3, #0]
  return result;
 8005996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800599a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d102      	bne.n	80059b6 <HAL_RCC_OscConfig+0xf02>
 80059b0:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	e01b      	b.n	80059ee <HAL_RCC_OscConfig+0xf3a>
 80059b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80059ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	fa93 f2a3 	rbit	r2, r3
 80059ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	fa93 f2a3 	rbit	r2, r3
 80059e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80059f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059f6:	6011      	str	r1, [r2, #0]
 80059f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	fa92 f1a2 	rbit	r1, r2
 8005a02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005a06:	6011      	str	r1, [r2, #0]
  return result;
 8005a08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f002 021f 	and.w	r2, r2, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d09e      	beq.n	8005968 <HAL_RCC_OscConfig+0xeb4>
 8005a2a:	e0ad      	b.n	8005b88 <HAL_RCC_OscConfig+0x10d4>
 8005a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	fa93 f2a3 	rbit	r2, r3
 8005a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a44:	601a      	str	r2, [r3, #0]
  return result;
 8005a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a4a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4c:	fab3 f383 	clz	r3, r3
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fc fb5f 	bl	8002124 <HAL_GetTick>
 8005a66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a6a:	e009      	b.n	8005a80 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fc fb5a 	bl	8002124 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e084      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
 8005a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	fa93 f2a3 	rbit	r2, r3
 8005a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a98:	601a      	str	r2, [r3, #0]
  return result;
 8005a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x1006>
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	e01b      	b.n	8005af2 <HAL_RCC_OscConfig+0x103e>
 8005aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	fa93 f2a3 	rbit	r2, r3
 8005ace:	f107 0320 	add.w	r3, r7, #32
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f107 031c 	add.w	r3, r7, #28
 8005ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f107 031c 	add.w	r3, r7, #28
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	fa93 f2a3 	rbit	r2, r3
 8005ae8:	f107 0318 	add.w	r3, r7, #24
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	f107 0214 	add.w	r2, r7, #20
 8005af6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005afa:	6011      	str	r1, [r2, #0]
 8005afc:	f107 0214 	add.w	r2, r7, #20
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	fa92 f1a2 	rbit	r1, r2
 8005b06:	f107 0210 	add.w	r2, r7, #16
 8005b0a:	6011      	str	r1, [r2, #0]
  return result;
 8005b0c:	f107 0210 	add.w	r2, r7, #16
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	fab2 f282 	clz	r2, r2
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	f042 0220 	orr.w	r2, r2, #32
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	f002 021f 	and.w	r2, r2, #31
 8005b22:	2101      	movs	r1, #1
 8005b24:	fa01 f202 	lsl.w	r2, r1, r2
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d19e      	bne.n	8005a6c <HAL_RCC_OscConfig+0xfb8>
 8005b2e:	e02b      	b.n	8005b88 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e025      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCC_OscConfig+0x10e0>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b52:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d111      	bne.n	8005b84 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b64:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d108      	bne.n	8005b84 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000

08005b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b09e      	sub	sp, #120	; 0x78
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e203      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <HAL_RCC_ClockConfig+0x52>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d110      	bne.n	8005bea <HAL_RCC_ClockConfig+0x52>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <HAL_RCC_ClockConfig+0x52>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_RCC_ClockConfig+0x52>
 8005be0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005be4:	48a5      	ldr	r0, [pc, #660]	; (8005e7c <HAL_RCC_ClockConfig+0x2e4>)
 8005be6:	f7fb ff0e 	bl	8001a06 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x6e>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d007      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x6e>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x6e>
 8005bfc:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8005c00:	489e      	ldr	r0, [pc, #632]	; (8005e7c <HAL_RCC_ClockConfig+0x2e4>)
 8005c02:	f7fb ff00 	bl	8001a06 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c06:	4b9e      	ldr	r3, [pc, #632]	; (8005e80 <HAL_RCC_ClockConfig+0x2e8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d910      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c14:	4b9a      	ldr	r3, [pc, #616]	; (8005e80 <HAL_RCC_ClockConfig+0x2e8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 0207 	bic.w	r2, r3, #7
 8005c1c:	4998      	ldr	r1, [pc, #608]	; (8005e80 <HAL_RCC_ClockConfig+0x2e8>)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c24:	4b96      	ldr	r3, [pc, #600]	; (8005e80 <HAL_RCC_ClockConfig+0x2e8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e1c0      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d031      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d024      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d020      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b90      	cmp	r3, #144	; 0x90
 8005c58:	d01c      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8005c60:	d018      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2bb0      	cmp	r3, #176	; 0xb0
 8005c68:	d014      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c70:	d010      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2bd0      	cmp	r3, #208	; 0xd0
 8005c78:	d00c      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2be0      	cmp	r3, #224	; 0xe0
 8005c80:	d008      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2bf0      	cmp	r3, #240	; 0xf0
 8005c88:	d004      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xfc>
 8005c8a:	f240 21db 	movw	r1, #731	; 0x2db
 8005c8e:	487b      	ldr	r0, [pc, #492]	; (8005e7c <HAL_RCC_ClockConfig+0x2e4>)
 8005c90:	f7fb feb9 	bl	8001a06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c94:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4978      	ldr	r1, [pc, #480]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80f3 	beq.w	8005e9a <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x13e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d008      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x13e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d004      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x13e>
 8005ccc:	f240 21e2 	movw	r1, #738	; 0x2e2
 8005cd0:	486a      	ldr	r0, [pc, #424]	; (8005e7c <HAL_RCC_ClockConfig+0x2e4>)
 8005cd2:	f7fb fe98 	bl	8001a06 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d13c      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x1c0>
 8005cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ce2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce6:	fa93 f3a3 	rbit	r3, r3
 8005cea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d102      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x170>
 8005d02:	4b60      	ldr	r3, [pc, #384]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	e00f      	b.n	8005d28 <HAL_RCC_ClockConfig+0x190>
 8005d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	667b      	str	r3, [r7, #100]	; 0x64
 8005d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d24:	4b57      	ldr	r3, [pc, #348]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d30:	fa92 f2a2 	rbit	r2, r2
 8005d34:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d38:	fab2 f282 	clz	r2, r2
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	f042 0220 	orr.w	r2, r2, #32
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	f002 021f 	and.w	r2, r2, #31
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d17b      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e12f      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d13c      	bne.n	8005dda <HAL_RCC_ClockConfig+0x242>
 8005d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d70:	fab3 f383 	clz	r3, r3
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d102      	bne.n	8005d8a <HAL_RCC_ClockConfig+0x1f2>
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	e00f      	b.n	8005daa <HAL_RCC_ClockConfig+0x212>
 8005d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d92:	fa93 f3a3 	rbit	r3, r3
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
 8005d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da0:	fa93 f3a3 	rbit	r3, r3
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da6:	4b37      	ldr	r3, [pc, #220]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dae:	63ba      	str	r2, [r7, #56]	; 0x38
 8005db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db2:	fa92 f2a2 	rbit	r2, r2
 8005db6:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dba:	fab2 f282 	clz	r2, r2
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	f042 0220 	orr.w	r2, r2, #32
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f002 021f 	and.w	r2, r2, #31
 8005dca:	2101      	movs	r1, #1
 8005dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d13a      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e0ee      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	fa93 f3a3 	rbit	r3, r3
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	fab3 f383 	clz	r3, r3
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d102      	bne.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	e00d      	b.n	8005e1e <HAL_RCC_ClockConfig+0x286>
 8005e02:	2302      	movs	r3, #2
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0e:	2302      	movs	r3, #2
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2202      	movs	r2, #2
 8005e20:	61ba      	str	r2, [r7, #24]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	fa92 f2a2 	rbit	r2, r2
 8005e28:	617a      	str	r2, [r7, #20]
  return result;
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	fab2 f282 	clz	r2, r2
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	f042 0220 	orr.w	r2, r2, #32
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	f002 021f 	and.w	r2, r2, #31
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b5      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f023 0203 	bic.w	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	490a      	ldr	r1, [pc, #40]	; (8005e84 <HAL_RCC_ClockConfig+0x2ec>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e5e:	f7fc f961 	bl	8002124 <HAL_GetTick>
 8005e62:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e64:	e010      	b.n	8005e88 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e66:	f7fc f95d 	bl	8002124 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d907      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e09d      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
 8005e7c:	0800bd7c 	.word	0x0800bd7c
 8005e80:	40022000 	.word	0x40022000
 8005e84:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e88:	4b4d      	ldr	r3, [pc, #308]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 020c 	and.w	r2, r3, #12
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d1e5      	bne.n	8005e66 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e9a:	4b4a      	ldr	r3, [pc, #296]	; (8005fc4 <HAL_RCC_ClockConfig+0x42c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d210      	bcs.n	8005eca <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea8:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <HAL_RCC_ClockConfig+0x42c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 0207 	bic.w	r2, r3, #7
 8005eb0:	4944      	ldr	r1, [pc, #272]	; (8005fc4 <HAL_RCC_ClockConfig+0x42c>)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb8:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <HAL_RCC_ClockConfig+0x42c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e076      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d025      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x378>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x378>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005ef0:	d00e      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x378>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005efa:	d009      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x378>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f04:	d004      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x378>
 8005f06:	f240 311e 	movw	r1, #798	; 0x31e
 8005f0a:	482f      	ldr	r0, [pc, #188]	; (8005fc8 <HAL_RCC_ClockConfig+0x430>)
 8005f0c:	f7fb fd7b 	bl	8001a06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f10:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4928      	ldr	r1, [pc, #160]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d026      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3d0>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3e:	d013      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3d0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005f48:	d00e      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3d0>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f52:	d009      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3d0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f5c:	d004      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3d0>
 8005f5e:	f240 3125 	movw	r1, #805	; 0x325
 8005f62:	4819      	ldr	r0, [pc, #100]	; (8005fc8 <HAL_RCC_ClockConfig+0x430>)
 8005f64:	f7fb fd4f 	bl	8001a06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4912      	ldr	r1, [pc, #72]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f7c:	f000 f82c 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 8005f80:	4601      	mov	r1, r0
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_RCC_ClockConfig+0x428>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8a:	22f0      	movs	r2, #240	; 0xf0
 8005f8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	fa92 f2a2 	rbit	r2, r2
 8005f94:	60fa      	str	r2, [r7, #12]
  return result;
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	fab2 f282 	clz	r2, r2
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	40d3      	lsrs	r3, r2
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <HAL_RCC_ClockConfig+0x434>)
 8005fa2:	5cd3      	ldrb	r3, [r2, r3]
 8005fa4:	fa21 f303 	lsr.w	r3, r1, r3
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <HAL_RCC_ClockConfig+0x438>)
 8005faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x43c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fc f873 	bl	800209c <HAL_InitTick>
  
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3778      	adds	r7, #120	; 0x78
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	0800bd7c 	.word	0x0800bd7c
 8005fcc:	0800bf40 	.word	0x0800bf40
 8005fd0:	2000007c 	.word	0x2000007c
 8005fd4:	20000080 	.word	0x20000080

08005fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b08b      	sub	sp, #44	; 0x2c
 8005fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005ff2:	4b2a      	ldr	r3, [pc, #168]	; (800609c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d002      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x30>
 8006002:	2b08      	cmp	r3, #8
 8006004:	d003      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x36>
 8006006:	e03f      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800600a:	623b      	str	r3, [r7, #32]
      break;
 800600c:	e03f      	b.n	800608e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006014:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006018:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	fa92 f2a2 	rbit	r2, r2
 8006020:	607a      	str	r2, [r7, #4]
  return result;
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	fab2 f282 	clz	r2, r2
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	40d3      	lsrs	r3, r2
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800602e:	5cd3      	ldrb	r3, [r2, r3]
 8006030:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006032:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	220f      	movs	r2, #15
 800603c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	fa92 f2a2 	rbit	r2, r2
 8006044:	60fa      	str	r2, [r7, #12]
  return result;
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	fab2 f282 	clz	r2, r2
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	40d3      	lsrs	r3, r2
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006060:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	fbb2 f2f3 	udiv	r2, r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
 8006070:	e007      	b.n	8006082 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006072:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	fbb2 f2f3 	udiv	r2, r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	623b      	str	r3, [r7, #32]
      break;
 8006086:	e002      	b.n	800608e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800608a:	623b      	str	r3, [r7, #32]
      break;
 800608c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800608e:	6a3b      	ldr	r3, [r7, #32]
}
 8006090:	4618      	mov	r0, r3
 8006092:	372c      	adds	r7, #44	; 0x2c
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40021000 	.word	0x40021000
 80060a0:	007a1200 	.word	0x007a1200
 80060a4:	0800bf58 	.word	0x0800bf58
 80060a8:	0800bf68 	.word	0x0800bf68

080060ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	2000007c 	.word	0x2000007c

080060c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80060ca:	f7ff ffef 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 80060ce:	4601      	mov	r1, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80060dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	fa92 f2a2 	rbit	r2, r2
 80060e4:	603a      	str	r2, [r7, #0]
  return result;
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	fab2 f282 	clz	r2, r2
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	40d3      	lsrs	r3, r2
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x40>)
 80060f2:	5cd3      	ldrb	r3, [r2, r3]
 80060f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000
 8006104:	0800bf50 	.word	0x0800bf50

08006108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800610e:	f7ff ffcd 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 8006112:	4601      	mov	r1, r0
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800611c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006120:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	fa92 f2a2 	rbit	r2, r2
 8006128:	603a      	str	r2, [r7, #0]
  return result;
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	fab2 f282 	clz	r2, r2
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	40d3      	lsrs	r3, r2
 8006134:	4a04      	ldr	r2, [pc, #16]	; (8006148 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006136:	5cd3      	ldrb	r3, [r2, r3]
 8006138:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40021000 	.word	0x40021000
 8006148:	0800bf50 	.word	0x0800bf50

0800614c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b092      	sub	sp, #72	; 0x48
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a62      	ldr	r2, [pc, #392]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d303      	bcc.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800616c:	2172      	movs	r1, #114	; 0x72
 800616e:	4861      	ldr	r0, [pc, #388]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006170:	f7fb fc49 	bl	8001a06 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80f1 	beq.w	8006364 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d012      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061a8:	2178      	movs	r1, #120	; 0x78
 80061aa:	4852      	ldr	r0, [pc, #328]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80061ac:	f7fb fc2b 	bl	8001a06 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b0:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10e      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061bc:	4b4e      	ldr	r3, [pc, #312]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4a4d      	ldr	r2, [pc, #308]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c6:	61d3      	str	r3, [r2, #28]
 80061c8:	4b4b      	ldr	r3, [pc, #300]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061da:	4b48      	ldr	r3, [pc, #288]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d118      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e6:	4b45      	ldr	r3, [pc, #276]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a44      	ldr	r2, [pc, #272]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f2:	f7fb ff97 	bl	8002124 <HAL_GetTick>
 80061f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f8:	e008      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fa:	f7fb ff93 	bl	8002124 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	; 0x64
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e38f      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620c:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006218:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 808a 	beq.w	800633e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006234:	429a      	cmp	r2, r3
 8006236:	f000 8082 	beq.w	800633e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800623a:	4b2f      	ldr	r3, [pc, #188]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006248:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	fa93 f3a3 	rbit	r3, r3
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006254:	fab3 f383 	clz	r3, r3
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	4b28      	ldr	r3, [pc, #160]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	461a      	mov	r2, r3
 8006264:	2301      	movs	r3, #1
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	fa93 f3a3 	rbit	r3, r3
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006278:	fab3 f383 	clz	r3, r3
 800627c:	b2db      	uxtb	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800628c:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d050      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fb ff42 	bl	8002124 <HAL_GetTick>
 80062a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fb ff3e 	bl	8002124 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e338      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 80062ba:	2302      	movs	r3, #2
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	2302      	movs	r3, #2
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	fa93 f3a3 	rbit	r3, r3
 80062d0:	61fb      	str	r3, [r7, #28]
  return result;
 80062d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d4:	fab3 f383 	clz	r3, r3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d10d      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80062e8:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	e012      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80062ee:	bf00      	nop
 80062f0:	03f73400 	.word	0x03f73400
 80062f4:	0800bdb4 	.word	0x0800bdb4
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40007000 	.word	0x40007000
 8006300:	10908100 	.word	0x10908100
 8006304:	2302      	movs	r3, #2
 8006306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	4b97      	ldr	r3, [pc, #604]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	2202      	movs	r2, #2
 8006316:	613a      	str	r2, [r7, #16]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	fa92 f2a2 	rbit	r2, r2
 800631e:	60fa      	str	r2, [r7, #12]
  return result;
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	fab2 f282 	clz	r2, r2
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	f002 021f 	and.w	r2, r2, #31
 8006332:	2101      	movs	r1, #1
 8006334:	fa01 f202 	lsl.w	r2, r1, r2
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0b2      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800633e:	4b8c      	ldr	r3, [pc, #560]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4989      	ldr	r1, [pc, #548]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800634c:	4313      	orrs	r3, r2
 800634e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b85      	ldr	r3, [pc, #532]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	4a84      	ldr	r2, [pc, #528]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006362:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01c      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00b      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d007      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006390:	21be      	movs	r1, #190	; 0xbe
 8006392:	4878      	ldr	r0, [pc, #480]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006394:	f7fb fb37 	bl	8001a06 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006398:	4b75      	ldr	r3, [pc, #468]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f023 0203 	bic.w	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4972      	ldr	r1, [pc, #456]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01f      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d012      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c6:	d00d      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d0:	d008      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063da:	d003      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063dc:	21c9      	movs	r1, #201	; 0xc9
 80063de:	4865      	ldr	r0, [pc, #404]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80063e0:	f7fb fb11 	bl	8001a06 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e4:	4b62      	ldr	r3, [pc, #392]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	495f      	ldr	r1, [pc, #380]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01f      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006412:	d00d      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800641c:	d008      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006426:	d003      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006428:	21d5      	movs	r1, #213	; 0xd5
 800642a:	4852      	ldr	r0, [pc, #328]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800642c:	f7fb faeb 	bl	8001a06 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006430:	4b4f      	ldr	r3, [pc, #316]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	494c      	ldr	r1, [pc, #304]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800643e:	4313      	orrs	r3, r2
 8006440:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d014      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b10      	cmp	r3, #16
 800645c:	d003      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800645e:	21e0      	movs	r1, #224	; 0xe0
 8006460:	4844      	ldr	r0, [pc, #272]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006462:	f7fb fad0 	bl	8001a06 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006466:	4b42      	ldr	r3, [pc, #264]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f023 0210 	bic.w	r2, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	493f      	ldr	r1, [pc, #252]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006474:	4313      	orrs	r3, r2
 8006476:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648c:	d007      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x352>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006496:	21ee      	movs	r1, #238	; 0xee
 8006498:	4836      	ldr	r0, [pc, #216]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800649a:	f7fb fab4 	bl	8001a06 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800649e:	4b34      	ldr	r3, [pc, #208]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	4931      	ldr	r1, [pc, #196]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d004      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80064cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80064d0:	4828      	ldr	r0, [pc, #160]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80064d2:	f7fb fa98 	bl	8001a06 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f023 0220 	bic.w	r2, r3, #32
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4923      	ldr	r1, [pc, #140]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d015      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d004      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006504:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006508:	481a      	ldr	r0, [pc, #104]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800650a:	f7fb fa7c 	bl	8001a06 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800650e:	4b18      	ldr	r3, [pc, #96]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	4915      	ldr	r1, [pc, #84]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800651c:	4313      	orrs	r3, r2
 800651e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d025      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d013      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653c:	d00e      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006546:	d009      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006552:	f240 1123 	movw	r1, #291	; 0x123
 8006556:	4807      	ldr	r0, [pc, #28]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006558:	f7fb fa55 	bl	8001a06 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800655c:	4b04      	ldr	r3, [pc, #16]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	4901      	ldr	r1, [pc, #4]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800656a:	4313      	orrs	r3, r2
 800656c:	630b      	str	r3, [r1, #48]	; 0x30
 800656e:	e003      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006570:	40021000 	.word	0x40021000
 8006574:	0800bdb4 	.word	0x0800bdb4
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006594:	d00e      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800659e:	d009      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065a8:	d004      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80065aa:	f240 112d 	movw	r1, #301	; 0x12d
 80065ae:	48a1      	ldr	r0, [pc, #644]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80065b0:	f7fb fa29 	bl	8001a06 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065b4:	4ba0      	ldr	r3, [pc, #640]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	499d      	ldr	r1, [pc, #628]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065e2:	d004      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80065e4:	f240 113d 	movw	r1, #317	; 0x13d
 80065e8:	4892      	ldr	r0, [pc, #584]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80065ea:	f7fb fa0c 	bl	8001a06 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065ee:	4b92      	ldr	r3, [pc, #584]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	498f      	ldr	r1, [pc, #572]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d04d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d040      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661c:	d03b      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006626:	d036      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8006630:	d031      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800663a:	d02c      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006644:	d027      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800664e:	d022      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006658:	d01d      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006662:	d018      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800666c:	d013      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006676:	d00e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800668a:	d004      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800668c:	f240 115d 	movw	r1, #349	; 0x15d
 8006690:	4868      	ldr	r0, [pc, #416]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006692:	f7fb f9b8 	bl	8001a06 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006696:	4b68      	ldr	r3, [pc, #416]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	4965      	ldr	r1, [pc, #404]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d04d      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d040      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c4:	d03b      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80066ce:	d036      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80066d8:	d031      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80066e2:	d02c      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80066ec:	d027      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80066f6:	d022      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8006700:	d01d      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 800670a:	d018      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006714:	d013      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800671e:	d00e      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8006728:	d009      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006732:	d004      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006734:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006738:	483e      	ldr	r0, [pc, #248]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800673a:	f7fb f964 	bl	8001a06 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800673e:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	493b      	ldr	r1, [pc, #236]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800674c:	4313      	orrs	r3, r2
 800674e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d016      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	2b00      	cmp	r3, #0
 8006762:	d009      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676c:	d004      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800676e:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006772:	4830      	ldr	r0, [pc, #192]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006774:	f7fb f947 	bl	8001a06 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	492c      	ldr	r1, [pc, #176]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006786:	4313      	orrs	r3, r2
 8006788:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a6:	d004      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 80067a8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80067ac:	4821      	ldr	r0, [pc, #132]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80067ae:	f7fb f92a 	bl	8001a06 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	491e      	ldr	r1, [pc, #120]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d016      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067e0:	d004      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80067e2:	f240 11f7 	movw	r1, #503	; 0x1f7
 80067e6:	4813      	ldr	r0, [pc, #76]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80067e8:	f7fb f90d 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	490f      	ldr	r1, [pc, #60]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01b      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800681a:	d004      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 800681c:	f240 2101 	movw	r1, #513	; 0x201
 8006820:	4804      	ldr	r0, [pc, #16]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006822:	f7fb f8f0 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006826:	4b04      	ldr	r3, [pc, #16]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	e003      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006834:	0800bdb4 	.word	0x0800bdb4
 8006838:	40021000 	.word	0x40021000
 800683c:	493d      	ldr	r1, [pc, #244]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800683e:	4313      	orrs	r3, r2
 8006840:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d004      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006860:	f240 210b 	movw	r1, #523	; 0x20b
 8006864:	4834      	ldr	r0, [pc, #208]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006866:	f7fb f8ce 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800686a:	4b32      	ldr	r3, [pc, #200]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	492f      	ldr	r1, [pc, #188]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006878:	4313      	orrs	r3, r2
 800687a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006898:	d004      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800689a:	f240 2115 	movw	r1, #533	; 0x215
 800689e:	4826      	ldr	r0, [pc, #152]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80068a0:	f7fb f8b1 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80068a4:	4b23      	ldr	r3, [pc, #140]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b0:	4920      	ldr	r1, [pc, #128]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x792>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d004      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x792>
 80068d4:	f240 211f 	movw	r1, #543	; 0x21f
 80068d8:	4817      	ldr	r0, [pc, #92]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80068da:	f7fb f894 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80068de:	4b15      	ldr	r3, [pc, #84]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	4912      	ldr	r1, [pc, #72]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d016      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	d004      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800690e:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8006912:	4809      	ldr	r0, [pc, #36]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006914:	f7fb f877 	bl	8001a06 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006924:	4903      	ldr	r1, [pc, #12]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006926:	4313      	orrs	r3, r2
 8006928:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3748      	adds	r7, #72	; 0x48
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40021000 	.word	0x40021000
 8006938:	0800bdb4 	.word	0x0800bdb4

0800693c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e0e1      	b.n	8006b12 <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a72      	ldr	r2, [pc, #456]	; (8006b1c <HAL_RTC_Init+0x1e0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_RTC_Init+0x26>
 8006958:	f240 1121 	movw	r1, #289	; 0x121
 800695c:	4870      	ldr	r0, [pc, #448]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 800695e:	f7fb f852 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d008      	beq.n	800697c <HAL_RTC_Init+0x40>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <HAL_RTC_Init+0x40>
 8006972:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006976:	486a      	ldr	r0, [pc, #424]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 8006978:	f7fb f845 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d904      	bls.n	800698e <HAL_RTC_Init+0x52>
 8006984:	f240 1123 	movw	r1, #291	; 0x123
 8006988:	4865      	ldr	r0, [pc, #404]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 800698a:	f7fb f83c 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006996:	d304      	bcc.n	80069a2 <HAL_RTC_Init+0x66>
 8006998:	f44f 7192 	mov.w	r1, #292	; 0x124
 800699c:	4860      	ldr	r0, [pc, #384]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 800699e:	f7fb f832 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d013      	beq.n	80069d2 <HAL_RTC_Init+0x96>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b2:	d00e      	beq.n	80069d2 <HAL_RTC_Init+0x96>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069bc:	d009      	beq.n	80069d2 <HAL_RTC_Init+0x96>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c6:	d004      	beq.n	80069d2 <HAL_RTC_Init+0x96>
 80069c8:	f240 1125 	movw	r1, #293	; 0x125
 80069cc:	4854      	ldr	r0, [pc, #336]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 80069ce:	f7fb f81a 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <HAL_RTC_Init+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e2:	d004      	beq.n	80069ee <HAL_RTC_Init+0xb2>
 80069e4:	f44f 7193 	mov.w	r1, #294	; 0x126
 80069e8:	484d      	ldr	r0, [pc, #308]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 80069ea:	f7fb f80c 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_RTC_Init+0xce>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fe:	d004      	beq.n	8006a0a <HAL_RTC_Init+0xce>
 8006a00:	f240 1127 	movw	r1, #295	; 0x127
 8006a04:	4846      	ldr	r0, [pc, #280]	; (8006b20 <HAL_RTC_Init+0x1e4>)
 8006a06:	f7fa fffe 	bl	8001a06 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7f5b      	ldrb	r3, [r3, #29]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fb f844 	bl	8001aa8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	22ca      	movs	r2, #202	; 0xca
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2253      	movs	r2, #83	; 0x53
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 ff32 	bl	80078a0 <RTC_EnterInitMode>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	22ff      	movs	r2, #255	; 0xff
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e05e      	b.n	8006b12 <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a66:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6899      	ldr	r1, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68d2      	ldr	r2, [r2, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6919      	ldr	r1, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	041a      	lsls	r2, r3, #16
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ab2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fec4 	bl	8007850 <HAL_RTC_WaitForSynchro>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e018      	b.n	8006b12 <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	22ff      	movs	r2, #255	; 0xff
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40002800 	.word	0x40002800
 8006b20:	0800be10 	.word	0x0800be10

08006b24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_RTC_SetTime+0x26>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d004      	beq.n	8006b4a <HAL_RTC_SetTime+0x26>
 8006b40:	f240 310f 	movw	r1, #783	; 0x30f
 8006b44:	48a4      	ldr	r0, [pc, #656]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006b46:	f7fa ff5e 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b52:	d00d      	beq.n	8006b70 <HAL_RTC_SetTime+0x4c>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5c:	d008      	beq.n	8006b70 <HAL_RTC_SetTime+0x4c>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <HAL_RTC_SetTime+0x4c>
 8006b66:	f44f 7144 	mov.w	r1, #784	; 0x310
 8006b6a:	489b      	ldr	r0, [pc, #620]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006b6c:	f7fa ff4b 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_RTC_SetTime+0x68>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b80:	d004      	beq.n	8006b8c <HAL_RTC_SetTime+0x68>
 8006b82:	f240 3111 	movw	r1, #785	; 0x311
 8006b86:	4894      	ldr	r0, [pc, #592]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006b88:	f7fa ff3d 	bl	8001a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	7f1b      	ldrb	r3, [r3, #28]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_RTC_SetTime+0x74>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e12c      	b.n	8006df2 <HAL_RTC_SetTime+0x2ce>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d15c      	bne.n	8006c64 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01a      	beq.n	8006bee <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RTC_SetTime+0xa4>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d904      	bls.n	8006bd2 <HAL_RTC_SetTime+0xae>
 8006bc8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8006bcc:	4882      	ldr	r0, [pc, #520]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006bce:	f7fa ff1a 	bl	8001a06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	78db      	ldrb	r3, [r3, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d015      	beq.n	8006c06 <HAL_RTC_SetTime+0xe2>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	78db      	ldrb	r3, [r3, #3]
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d011      	beq.n	8006c06 <HAL_RTC_SetTime+0xe2>
 8006be2:	f240 311d 	movw	r1, #797	; 0x31d
 8006be6:	487c      	ldr	r0, [pc, #496]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006be8:	f7fa ff0d 	bl	8001a06 <assert_failed>
 8006bec:	e00b      	b.n	8006c06 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b17      	cmp	r3, #23
 8006bfa:	d904      	bls.n	8006c06 <HAL_RTC_SetTime+0xe2>
 8006bfc:	f240 3122 	movw	r1, #802	; 0x322
 8006c00:	4875      	ldr	r0, [pc, #468]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006c02:	f7fa ff00 	bl	8001a06 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b3b      	cmp	r3, #59	; 0x3b
 8006c0c:	d904      	bls.n	8006c18 <HAL_RTC_SetTime+0xf4>
 8006c0e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8006c12:	4871      	ldr	r0, [pc, #452]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006c14:	f7fa fef7 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	789b      	ldrb	r3, [r3, #2]
 8006c1c:	2b3b      	cmp	r3, #59	; 0x3b
 8006c1e:	d904      	bls.n	8006c2a <HAL_RTC_SetTime+0x106>
 8006c20:	f240 3125 	movw	r1, #805	; 0x325
 8006c24:	486c      	ldr	r0, [pc, #432]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006c26:	f7fa feee 	bl	8001a06 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fe62 	bl	80078f8 <RTC_ByteToBcd2>
 8006c34:	4603      	mov	r3, r0
 8006c36:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fe5b 	bl	80078f8 <RTC_ByteToBcd2>
 8006c42:	4603      	mov	r3, r0
 8006c44:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c46:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	789b      	ldrb	r3, [r3, #2]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fe53 	bl	80078f8 <RTC_ByteToBcd2>
 8006c52:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006c54:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e062      	b.n	8006d2a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d022      	beq.n	8006cb8 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fe5c 	bl	8007934 <RTC_Bcd2ToByte>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <HAL_RTC_SetTime+0x16e>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fe54 	bl	8007934 <RTC_Bcd2ToByte>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	d904      	bls.n	8006c9c <HAL_RTC_SetTime+0x178>
 8006c92:	f44f 714c 	mov.w	r1, #816	; 0x330
 8006c96:	4850      	ldr	r0, [pc, #320]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006c98:	f7fa feb5 	bl	8001a06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d019      	beq.n	8006cd8 <HAL_RTC_SetTime+0x1b4>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d015      	beq.n	8006cd8 <HAL_RTC_SetTime+0x1b4>
 8006cac:	f240 3131 	movw	r1, #817	; 0x331
 8006cb0:	4849      	ldr	r0, [pc, #292]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006cb2:	f7fa fea8 	bl	8001a06 <assert_failed>
 8006cb6:	e00f      	b.n	8006cd8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fe36 	bl	8007934 <RTC_Bcd2ToByte>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b17      	cmp	r3, #23
 8006ccc:	d904      	bls.n	8006cd8 <HAL_RTC_SetTime+0x1b4>
 8006cce:	f240 3136 	movw	r1, #822	; 0x336
 8006cd2:	4841      	ldr	r0, [pc, #260]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006cd4:	f7fa fe97 	bl	8001a06 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fe29 	bl	8007934 <RTC_Bcd2ToByte>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b3b      	cmp	r3, #59	; 0x3b
 8006ce6:	d904      	bls.n	8006cf2 <HAL_RTC_SetTime+0x1ce>
 8006ce8:	f44f 714e 	mov.w	r1, #824	; 0x338
 8006cec:	483a      	ldr	r0, [pc, #232]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006cee:	f7fa fe8a 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	789b      	ldrb	r3, [r3, #2]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fe1c 	bl	8007934 <RTC_Bcd2ToByte>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b3b      	cmp	r3, #59	; 0x3b
 8006d00:	d904      	bls.n	8006d0c <HAL_RTC_SetTime+0x1e8>
 8006d02:	f240 3139 	movw	r1, #825	; 0x339
 8006d06:	4834      	ldr	r0, [pc, #208]	; (8006dd8 <HAL_RTC_SetTime+0x2b4>)
 8006d08:	f7fa fe7d 	bl	8001a06 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d18:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006d1e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	22ca      	movs	r2, #202	; 0xca
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2253      	movs	r2, #83	; 0x53
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fdb0 	bl	80078a0 <RTC_EnterInitMode>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	22ff      	movs	r2, #255	; 0xff
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2204      	movs	r2, #4
 8006d52:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e049      	b.n	8006df2 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6899      	ldr	r1, [r3, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d113      	bne.n	8006ddc <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 fd4b 	bl	8007850 <HAL_RTC_WaitForSynchro>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e00c      	b.n	8006df2 <HAL_RTC_SetTime+0x2ce>
 8006dd8:	0800be10 	.word	0x0800be10
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	22ff      	movs	r2, #255	; 0xff
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd90      	pop	{r4, r7, pc}
 8006dfa:	bf00      	nop

08006dfc <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <HAL_RTC_GetTime+0x26>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d004      	beq.n	8006e22 <HAL_RTC_GetTime+0x26>
 8006e18:	f44f 7164 	mov.w	r1, #912	; 0x390
 8006e1c:	482c      	ldr	r0, [pc, #176]	; (8006ed0 <HAL_RTC_GetTime+0xd4>)
 8006e1e:	f7fa fdf2 	bl	8001a06 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e48:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d11a      	bne.n	8006ec4 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fd4e 	bl	8007934 <RTC_Bcd2ToByte>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fd45 	bl	8007934 <RTC_Bcd2ToByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	789b      	ldrb	r3, [r3, #2]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fd3c 	bl	8007934 <RTC_Bcd2ToByte>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	0800be10 	.word	0x0800be10

08006ed4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <HAL_RTC_SetDate+0x26>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d004      	beq.n	8006efa <HAL_RTC_SetDate+0x26>
 8006ef0:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8006ef4:	488e      	ldr	r0, [pc, #568]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8006ef6:	f7fa fd86 	bl	8001a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	7f1b      	ldrb	r3, [r3, #28]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_RTC_SetDate+0x32>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e10f      	b.n	8007126 <HAL_RTC_SetDate+0x252>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10e      	bne.n	8006f36 <HAL_RTC_SetDate+0x62>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	f023 0310 	bic.w	r3, r3, #16
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	330a      	adds	r3, #10
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d01c      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d018      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d014      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d010      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b05      	cmp	r3, #5
 8006f5c:	d00c      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d008      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b07      	cmp	r3, #7
 8006f6c:	d004      	beq.n	8006f78 <HAL_RTC_SetDate+0xa4>
 8006f6e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8006f72:	486f      	ldr	r0, [pc, #444]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8006f74:	f7fa fd47 	bl	8001a06 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d13f      	bne.n	8006ffe <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	78db      	ldrb	r3, [r3, #3]
 8006f82:	2b63      	cmp	r3, #99	; 0x63
 8006f84:	d904      	bls.n	8006f90 <HAL_RTC_SetDate+0xbc>
 8006f86:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8006f8a:	4869      	ldr	r0, [pc, #420]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8006f8c:	f7fa fd3b 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_RTC_SetDate+0xcc>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	d904      	bls.n	8006faa <HAL_RTC_SetDate+0xd6>
 8006fa0:	f240 31cd 	movw	r1, #973	; 0x3cd
 8006fa4:	4862      	ldr	r0, [pc, #392]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8006fa6:	f7fa fd2e 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	789b      	ldrb	r3, [r3, #2]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_RTC_SetDate+0xe6>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	789b      	ldrb	r3, [r3, #2]
 8006fb6:	2b1f      	cmp	r3, #31
 8006fb8:	d904      	bls.n	8006fc4 <HAL_RTC_SetDate+0xf0>
 8006fba:	f240 31ce 	movw	r1, #974	; 0x3ce
 8006fbe:	485c      	ldr	r0, [pc, #368]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8006fc0:	f7fa fd21 	bl	8001a06 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	78db      	ldrb	r3, [r3, #3]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fc95 	bl	80078f8 <RTC_ByteToBcd2>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fc8e 	bl	80078f8 <RTC_ByteToBcd2>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006fe0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	789b      	ldrb	r3, [r3, #2]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fc86 	bl	80078f8 <RTC_ByteToBcd2>
 8006fec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006fee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e045      	b.n	800708a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fc96 	bl	8007934 <RTC_Bcd2ToByte>
 8007008:	4603      	mov	r3, r0
 800700a:	2b63      	cmp	r3, #99	; 0x63
 800700c:	d904      	bls.n	8007018 <HAL_RTC_SetDate+0x144>
 800700e:	f240 31d7 	movw	r1, #983	; 0x3d7
 8007012:	4847      	ldr	r0, [pc, #284]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8007014:	f7fa fcf7 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fc89 	bl	8007934 <RTC_Bcd2ToByte>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_RTC_SetDate+0x164>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fc81 	bl	8007934 <RTC_Bcd2ToByte>
 8007032:	4603      	mov	r3, r0
 8007034:	2b0c      	cmp	r3, #12
 8007036:	d904      	bls.n	8007042 <HAL_RTC_SetDate+0x16e>
 8007038:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 800703c:	483c      	ldr	r0, [pc, #240]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 800703e:	f7fa fce2 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fc74 	bl	8007934 <RTC_Bcd2ToByte>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_RTC_SetDate+0x18e>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	789b      	ldrb	r3, [r3, #2]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fc6c 	bl	8007934 <RTC_Bcd2ToByte>
 800705c:	4603      	mov	r3, r0
 800705e:	2b1f      	cmp	r3, #31
 8007060:	d904      	bls.n	800706c <HAL_RTC_SetDate+0x198>
 8007062:	f240 31d9 	movw	r1, #985	; 0x3d9
 8007066:	4832      	ldr	r0, [pc, #200]	; (8007130 <HAL_RTC_SetDate+0x25c>)
 8007068:	f7fa fccd 	bl	8001a06 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	78db      	ldrb	r3, [r3, #3]
 8007070:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007078:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800707e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	22ca      	movs	r2, #202	; 0xca
 8007090:	625a      	str	r2, [r3, #36]	; 0x24
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2253      	movs	r2, #83	; 0x53
 8007098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fc00 	bl	80078a0 <RTC_EnterInitMode>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	22ff      	movs	r2, #255	; 0xff
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2204      	movs	r2, #4
 80070b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e033      	b.n	8007126 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d111      	bne.n	8007110 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fbaf 	bl	8007850 <HAL_RTC_WaitForSynchro>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2204      	movs	r2, #4
 8007104:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e00a      	b.n	8007126 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}
 800712e:	bf00      	nop
 8007130:	0800be10 	.word	0x0800be10

08007134 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <HAL_RTC_GetDate+0x26>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d004      	beq.n	800715a <HAL_RTC_GetDate+0x26>
 8007150:	f240 4126 	movw	r1, #1062	; 0x426
 8007154:	4824      	ldr	r0, [pc, #144]	; (80071e8 <HAL_RTC_GetDate+0xb4>)
 8007156:	f7fa fc56 	bl	8001a06 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007164:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007168:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	0c1b      	lsrs	r3, r3, #16
 800716e:	b2da      	uxtb	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	b2db      	uxtb	r3, r3
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800718c:	b2da      	uxtb	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	0b5b      	lsrs	r3, r3, #13
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11a      	bne.n	80071de <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	78db      	ldrb	r3, [r3, #3]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fbc1 	bl	8007934 <RTC_Bcd2ToByte>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fbb8 	bl	8007934 <RTC_Bcd2ToByte>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	789b      	ldrb	r3, [r3, #2]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fbaf 	bl	8007934 <RTC_Bcd2ToByte>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	0800be10 	.word	0x0800be10

080071ec <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b089      	sub	sp, #36	; 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <HAL_RTC_SetAlarm_IT+0x2e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d004      	beq.n	800721a <HAL_RTC_SetAlarm_IT+0x2e>
 8007210:	f240 5153 	movw	r1, #1363	; 0x553
 8007214:	48a1      	ldr	r0, [pc, #644]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007216:	f7fa fbf6 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007222:	d009      	beq.n	8007238 <HAL_RTC_SetAlarm_IT+0x4c>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800722c:	d004      	beq.n	8007238 <HAL_RTC_SetAlarm_IT+0x4c>
 800722e:	f240 5154 	movw	r1, #1364	; 0x554
 8007232:	489a      	ldr	r0, [pc, #616]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007234:	f7fa fbe7 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RTC_SetAlarm_IT+0x62>
 8007244:	f240 5155 	movw	r1, #1365	; 0x555
 8007248:	4894      	ldr	r0, [pc, #592]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 800724a:	f7fa fbdc 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <HAL_RTC_SetAlarm_IT+0x7e>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d004      	beq.n	800726a <HAL_RTC_SetAlarm_IT+0x7e>
 8007260:	f240 5156 	movw	r1, #1366	; 0x556
 8007264:	488d      	ldr	r0, [pc, #564]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007266:	f7fa fbce 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007272:	d304      	bcc.n	800727e <HAL_RTC_SetAlarm_IT+0x92>
 8007274:	f240 5157 	movw	r1, #1367	; 0x557
 8007278:	4888      	ldr	r0, [pc, #544]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 800727a:	f7fa fbc4 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04f      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800728e:	d04a      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007298:	d045      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072a2:	d040      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072ac:	d03b      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80072b6:	d036      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80072c0:	d031      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80072ca:	d02c      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d4:	d027      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80072de:	d022      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80072e8:	d01d      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80072f2:	d018      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80072fc:	d013      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8007306:	d00e      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8007310:	d009      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800731a:	d004      	beq.n	8007326 <HAL_RTC_SetAlarm_IT+0x13a>
 800731c:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8007320:	485e      	ldr	r0, [pc, #376]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007322:	f7fa fb70 	bl	8001a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	7f1b      	ldrb	r3, [r3, #28]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_RTC_SetAlarm_IT+0x146>
 800732e:	2302      	movs	r3, #2
 8007330:	e242      	b.n	80077b8 <HAL_RTC_SetAlarm_IT+0x5cc>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2202      	movs	r2, #2
 800733c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 80ad 	bne.w	80074a0 <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01a      	beq.n	800738a <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_RTC_SetAlarm_IT+0x178>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d904      	bls.n	800736e <HAL_RTC_SetAlarm_IT+0x182>
 8007364:	f240 5163 	movw	r1, #1379	; 0x563
 8007368:	484c      	ldr	r0, [pc, #304]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 800736a:	f7fa fb4c 	bl	8001a06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d015      	beq.n	80073a2 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	78db      	ldrb	r3, [r3, #3]
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d011      	beq.n	80073a2 <HAL_RTC_SetAlarm_IT+0x1b6>
 800737e:	f240 5164 	movw	r1, #1380	; 0x564
 8007382:	4846      	ldr	r0, [pc, #280]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007384:	f7fa fb3f 	bl	8001a06 <assert_failed>
 8007388:	e00b      	b.n	80073a2 <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b17      	cmp	r3, #23
 8007396:	d904      	bls.n	80073a2 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007398:	f240 5169 	movw	r1, #1385	; 0x569
 800739c:	483f      	ldr	r0, [pc, #252]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 800739e:	f7fa fb32 	bl	8001a06 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b3b      	cmp	r3, #59	; 0x3b
 80073a8:	d904      	bls.n	80073b4 <HAL_RTC_SetAlarm_IT+0x1c8>
 80073aa:	f240 516b 	movw	r1, #1387	; 0x56b
 80073ae:	483b      	ldr	r0, [pc, #236]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 80073b0:	f7fa fb29 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	2b3b      	cmp	r3, #59	; 0x3b
 80073ba:	d904      	bls.n	80073c6 <HAL_RTC_SetAlarm_IT+0x1da>
 80073bc:	f240 516c 	movw	r1, #1388	; 0x56c
 80073c0:	4836      	ldr	r0, [pc, #216]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 80073c2:	f7fa fb20 	bl	8001a06 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <HAL_RTC_SetAlarm_IT+0x1f6>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073de:	2b1f      	cmp	r3, #31
 80073e0:	d92d      	bls.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 80073e2:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 80073e6:	482d      	ldr	r0, [pc, #180]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 80073e8:	f7fa fb0d 	bl	8001a06 <assert_failed>
 80073ec:	e027      	b.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d022      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d01d      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d018      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d013      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800741c:	2b05      	cmp	r3, #5
 800741e:	d00e      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007426:	2b06      	cmp	r3, #6
 8007428:	d009      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007430:	2b07      	cmp	r3, #7
 8007432:	d004      	beq.n	800743e <HAL_RTC_SetAlarm_IT+0x252>
 8007434:	f240 5174 	movw	r1, #1396	; 0x574
 8007438:	4818      	ldr	r0, [pc, #96]	; (800749c <HAL_RTC_SetAlarm_IT+0x2b0>)
 800743a:	f7fa fae4 	bl	8001a06 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fa58 	bl	80078f8 <RTC_ByteToBcd2>
 8007448:	4603      	mov	r3, r0
 800744a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fa51 	bl	80078f8 <RTC_ByteToBcd2>
 8007456:	4603      	mov	r3, r0
 8007458:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800745a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	789b      	ldrb	r3, [r3, #2]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fa49 	bl	80078f8 <RTC_ByteToBcd2>
 8007466:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007468:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007472:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fa3b 	bl	80078f8 <RTC_ByteToBcd2>
 8007482:	4603      	mov	r3, r0
 8007484:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007486:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800748e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007494:	4313      	orrs	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	e0d0      	b.n	800763c <HAL_RTC_SetAlarm_IT+0x450>
 800749a:	bf00      	nop
 800749c:	0800be10 	.word	0x0800be10
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d022      	beq.n	80074f4 <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fa3e 	bl	8007934 <RTC_Bcd2ToByte>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <HAL_RTC_SetAlarm_IT+0x2e2>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fa36 	bl	8007934 <RTC_Bcd2ToByte>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b0c      	cmp	r3, #12
 80074cc:	d904      	bls.n	80074d8 <HAL_RTC_SetAlarm_IT+0x2ec>
 80074ce:	f240 5182 	movw	r1, #1410	; 0x582
 80074d2:	489d      	ldr	r0, [pc, #628]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 80074d4:	f7fa fa97 	bl	8001a06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d019      	beq.n	8007514 <HAL_RTC_SetAlarm_IT+0x328>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	78db      	ldrb	r3, [r3, #3]
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d015      	beq.n	8007514 <HAL_RTC_SetAlarm_IT+0x328>
 80074e8:	f240 5183 	movw	r1, #1411	; 0x583
 80074ec:	4896      	ldr	r0, [pc, #600]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 80074ee:	f7fa fa8a 	bl	8001a06 <assert_failed>
 80074f2:	e00f      	b.n	8007514 <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fa18 	bl	8007934 <RTC_Bcd2ToByte>
 8007504:	4603      	mov	r3, r0
 8007506:	2b17      	cmp	r3, #23
 8007508:	d904      	bls.n	8007514 <HAL_RTC_SetAlarm_IT+0x328>
 800750a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800750e:	488e      	ldr	r0, [pc, #568]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007510:	f7fa fa79 	bl	8001a06 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fa0b 	bl	8007934 <RTC_Bcd2ToByte>
 800751e:	4603      	mov	r3, r0
 8007520:	2b3b      	cmp	r3, #59	; 0x3b
 8007522:	d904      	bls.n	800752e <HAL_RTC_SetAlarm_IT+0x342>
 8007524:	f240 518b 	movw	r1, #1419	; 0x58b
 8007528:	4887      	ldr	r0, [pc, #540]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 800752a:	f7fa fa6c 	bl	8001a06 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	789b      	ldrb	r3, [r3, #2]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f9fe 	bl	8007934 <RTC_Bcd2ToByte>
 8007538:	4603      	mov	r3, r0
 800753a:	2b3b      	cmp	r3, #59	; 0x3b
 800753c:	d904      	bls.n	8007548 <HAL_RTC_SetAlarm_IT+0x35c>
 800753e:	f240 518c 	movw	r1, #1420	; 0x58c
 8007542:	4881      	ldr	r0, [pc, #516]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007544:	f7fa fa5f 	bl	8001a06 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d117      	bne.n	8007580 <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f9ec 	bl	8007934 <RTC_Bcd2ToByte>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_RTC_SetAlarm_IT+0x388>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f9e3 	bl	8007934 <RTC_Bcd2ToByte>
 800756e:	4603      	mov	r3, r0
 8007570:	2b1f      	cmp	r3, #31
 8007572:	d949      	bls.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 8007574:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8007578:	4873      	ldr	r0, [pc, #460]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 800757a:	f7fa fa44 	bl	8001a06 <assert_failed>
 800757e:	e043      	b.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f9d4 	bl	8007934 <RTC_Bcd2ToByte>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d03a      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f9cb 	bl	8007934 <RTC_Bcd2ToByte>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d031      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f9c2 	bl	8007934 <RTC_Bcd2ToByte>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d028      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f9b9 	bl	8007934 <RTC_Bcd2ToByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d01f      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f9b0 	bl	8007934 <RTC_Bcd2ToByte>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d016      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 f9a7 	bl	8007934 <RTC_Bcd2ToByte>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	d00d      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f99e 	bl	8007934 <RTC_Bcd2ToByte>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d004      	beq.n	8007608 <HAL_RTC_SetAlarm_IT+0x41c>
 80075fe:	f240 5194 	movw	r1, #1428	; 0x594
 8007602:	4851      	ldr	r0, [pc, #324]	; (8007748 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007604:	f7fa f9ff 	bl	8001a06 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007614:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800761a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	78db      	ldrb	r3, [r3, #3]
 8007620:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007622:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800762a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800762c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007632:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007638:	4313      	orrs	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	22ca      	movs	r2, #202	; 0xca
 800764e:	625a      	str	r2, [r3, #36]	; 0x24
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2253      	movs	r2, #83	; 0x53
 8007656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007660:	d148      	bne.n	80076f4 <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007670:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	b2da      	uxtb	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007682:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007684:	f7fa fd4e 	bl	8002124 <HAL_GetTick>
 8007688:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800768a:	e013      	b.n	80076b4 <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800768c:	f7fa fd4a 	bl	8002124 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769a:	d90b      	bls.n	80076b4 <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	22ff      	movs	r2, #255	; 0xff
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2203      	movs	r2, #3
 80076a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e081      	b.n	80077b8 <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0e4      	beq.n	800768c <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076f0:	609a      	str	r2, [r3, #8]
 80076f2:	e04a      	b.n	800778a <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007702:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	b2da      	uxtb	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007714:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007716:	f7fa fd05 	bl	8002124 <HAL_GetTick>
 800771a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800771c:	e016      	b.n	800774c <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800771e:	f7fa fd01 	bl	8002124 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800772c:	d90e      	bls.n	800774c <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	22ff      	movs	r2, #255	; 0xff
 8007734:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2203      	movs	r2, #3
 800773a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e038      	b.n	80077b8 <HAL_RTC_SetAlarm_IT+0x5cc>
 8007746:	bf00      	nop
 8007748:	0800be10 	.word	0x0800be10
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0e1      	beq.n	800771e <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007778:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007788:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007794:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007796:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800779c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ff      	movs	r2, #255	; 0xff
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3724      	adds	r7, #36	; 0x24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}
 80077c0:	40010400 	.word	0x40010400

080077c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fce5 	bl	80011b8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80077fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d012      	beq.n	8007834 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9f9 	bl	8007c14 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	b2da      	uxtb	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007832:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <HAL_RTC_AlarmIRQHandler+0x88>)
 8007836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800783a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	775a      	strb	r2, [r3, #29]
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40010400 	.word	0x40010400

08007850 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800786a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800786c:	f7fa fc5a 	bl	8002124 <HAL_GetTick>
 8007870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007872:	e009      	b.n	8007888 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007874:	f7fa fc56 	bl	8002124 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007882:	d901      	bls.n	8007888 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e007      	b.n	8007898 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0ee      	beq.n	8007874 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d119      	bne.n	80078ee <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f04f 32ff 	mov.w	r2, #4294967295
 80078c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80078c4:	f7fa fc2e 	bl	8002124 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078ca:	e009      	b.n	80078e0 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078cc:	f7fa fc2a 	bl	8002124 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078da:	d901      	bls.n	80078e0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e007      	b.n	80078f0 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0ee      	beq.n	80078cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007906:	e005      	b.n	8007914 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3301      	adds	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	3b0a      	subs	r3, #10
 8007912:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b09      	cmp	r3, #9
 8007918:	d8f6      	bhi.n	8007908 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	b2da      	uxtb	r2, r3
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	4313      	orrs	r3, r2
 8007926:	b2db      	uxtb	r3, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	b2da      	uxtb	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	4413      	add	r3, r2
 8007962:	b2db      	uxtb	r3, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d013      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d010      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d00d      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d00a      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b04      	cmp	r3, #4
 800799c:	d007      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d004      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80079a4:	f44f 7158 	mov.w	r1, #864	; 0x360
 80079a8:	485a      	ldr	r0, [pc, #360]	; (8007b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80079aa:	f7fa f82c 	bl	8001a06 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b4:	d304      	bcc.n	80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80079b6:	f240 3161 	movw	r1, #865	; 0x361
 80079ba:	4856      	ldr	r0, [pc, #344]	; (8007b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80079bc:	f7fa f823 	bl	8001a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7f1b      	ldrb	r3, [r3, #28]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e09e      	b.n	8007b0a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	22ca      	movs	r2, #202	; 0xca
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2253      	movs	r2, #83	; 0x53
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01e      	beq.n	8007a34 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 80079f6:	f7fa fb95 	bl	8002124 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80079fc:	e013      	b.n	8007a26 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079fe:	f7fa fb91 	bl	8002124 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a0c:	d90b      	bls.n	8007a26 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e071      	b.n	8007b0a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a42:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a54:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007a56:	f7fa fb65 	bl	8002124 <HAL_GetTick>
 8007a5a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007a5c:	e013      	b.n	8007a86 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a5e:	f7fa fb61 	bl	8002124 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a6c:	d90b      	bls.n	8007a86 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	22ff      	movs	r2, #255	; 0xff
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e041      	b.n	8007b0a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0e4      	beq.n	8007a5e <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0207 	bic.w	r2, r2, #7
 8007aaa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6899      	ldr	r1, [r3, #8]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ac6:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007ac8:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	4a12      	ldr	r2, [pc, #72]	; (8007b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ae2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	22ff      	movs	r2, #255	; 0xff
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	0800be48 	.word	0x0800be48
 8007b18:	40010400 	.word	0x40010400

08007b1c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7f1b      	ldrb	r3, [r3, #28]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e047      	b.n	8007bc4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	22ca      	movs	r2, #202	; 0xca
 8007b46:	625a      	str	r2, [r3, #36]	; 0x24
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2253      	movs	r2, #83	; 0x53
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b6e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007b70:	f7fa fad8 	bl	8002124 <HAL_GetTick>
 8007b74:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007b76:	e013      	b.n	8007ba0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b78:	f7fa fad4 	bl	8002124 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b86:	d90b      	bls.n	8007ba0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	22ff      	movs	r2, #255	; 0xff
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2203      	movs	r2, #3
 8007b94:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e011      	b.n	8007bc4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0e4      	beq.n	8007b78 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	22ff      	movs	r2, #255	; 0xff
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7f9 fabc 	bl	8001160 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007bf8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8007bfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c00:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	775a      	strb	r2, [r3, #29]
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40010400 	.word	0x40010400

08007c14 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e0be      	b.n	8007db8 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a60      	ldr	r2, [pc, #384]	; (8007dc0 <HAL_TIM_Base_Init+0x198>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d036      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4c:	d031      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a5c      	ldr	r2, [pc, #368]	; (8007dc4 <HAL_TIM_Base_Init+0x19c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d02c      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a5a      	ldr	r2, [pc, #360]	; (8007dc8 <HAL_TIM_Base_Init+0x1a0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d027      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a59      	ldr	r2, [pc, #356]	; (8007dcc <HAL_TIM_Base_Init+0x1a4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d022      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a57      	ldr	r2, [pc, #348]	; (8007dd0 <HAL_TIM_Base_Init+0x1a8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a56      	ldr	r2, [pc, #344]	; (8007dd4 <HAL_TIM_Base_Init+0x1ac>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a54      	ldr	r2, [pc, #336]	; (8007dd8 <HAL_TIM_Base_Init+0x1b0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a53      	ldr	r2, [pc, #332]	; (8007ddc <HAL_TIM_Base_Init+0x1b4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a51      	ldr	r2, [pc, #324]	; (8007de0 <HAL_TIM_Base_Init+0x1b8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a50      	ldr	r2, [pc, #320]	; (8007de4 <HAL_TIM_Base_Init+0x1bc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIM_Base_Init+0x8a>
 8007ca8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8007cac:	484e      	ldr	r0, [pc, #312]	; (8007de8 <HAL_TIM_Base_Init+0x1c0>)
 8007cae:	f7f9 feaa 	bl	8001a06 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d014      	beq.n	8007ce4 <HAL_TIM_Base_Init+0xbc>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d010      	beq.n	8007ce4 <HAL_TIM_Base_Init+0xbc>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d00c      	beq.n	8007ce4 <HAL_TIM_Base_Init+0xbc>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d008      	beq.n	8007ce4 <HAL_TIM_Base_Init+0xbc>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b60      	cmp	r3, #96	; 0x60
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIM_Base_Init+0xbc>
 8007cda:	f240 111b 	movw	r1, #283	; 0x11b
 8007cde:	4842      	ldr	r0, [pc, #264]	; (8007de8 <HAL_TIM_Base_Init+0x1c0>)
 8007ce0:	f7f9 fe91 	bl	8001a06 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00e      	beq.n	8007d0a <HAL_TIM_Base_Init+0xe2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf4:	d009      	beq.n	8007d0a <HAL_TIM_Base_Init+0xe2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfe:	d004      	beq.n	8007d0a <HAL_TIM_Base_Init+0xe2>
 8007d00:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8007d04:	4838      	ldr	r0, [pc, #224]	; (8007de8 <HAL_TIM_Base_Init+0x1c0>)
 8007d06:	f7f9 fe7e 	bl	8001a06 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_TIM_Base_Init+0xfc>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d004      	beq.n	8007d24 <HAL_TIM_Base_Init+0xfc>
 8007d1a:	f240 111d 	movw	r1, #285	; 0x11d
 8007d1e:	4832      	ldr	r0, [pc, #200]	; (8007de8 <HAL_TIM_Base_Init+0x1c0>)
 8007d20:	f7f9 fe71 	bl	8001a06 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7fa f8b3 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f000 fa49 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40000400 	.word	0x40000400
 8007dc8:	40000800 	.word	0x40000800
 8007dcc:	40001000 	.word	0x40001000
 8007dd0:	40001400 	.word	0x40001400
 8007dd4:	40013400 	.word	0x40013400
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	40014400 	.word	0x40014400
 8007de0:	40014800 	.word	0x40014800
 8007de4:	40015000 	.word	0x40015000
 8007de8:	0800be84 	.word	0x0800be84

08007dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a46      	ldr	r2, [pc, #280]	; (8007f14 <HAL_TIM_Base_Start+0x128>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d036      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e06:	d031      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a42      	ldr	r2, [pc, #264]	; (8007f18 <HAL_TIM_Base_Start+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02c      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a41      	ldr	r2, [pc, #260]	; (8007f1c <HAL_TIM_Base_Start+0x130>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d027      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a3f      	ldr	r2, [pc, #252]	; (8007f20 <HAL_TIM_Base_Start+0x134>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a3e      	ldr	r2, [pc, #248]	; (8007f24 <HAL_TIM_Base_Start+0x138>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d01d      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a3c      	ldr	r2, [pc, #240]	; (8007f28 <HAL_TIM_Base_Start+0x13c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a3b      	ldr	r2, [pc, #236]	; (8007f2c <HAL_TIM_Base_Start+0x140>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a39      	ldr	r2, [pc, #228]	; (8007f30 <HAL_TIM_Base_Start+0x144>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a38      	ldr	r2, [pc, #224]	; (8007f34 <HAL_TIM_Base_Start+0x148>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a36      	ldr	r2, [pc, #216]	; (8007f38 <HAL_TIM_Base_Start+0x14c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_Base_Start+0x80>
 8007e62:	f240 119b 	movw	r1, #411	; 0x19b
 8007e66:	4835      	ldr	r0, [pc, #212]	; (8007f3c <HAL_TIM_Base_Start+0x150>)
 8007e68:	f7f9 fdcd 	bl	8001a06 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d001      	beq.n	8007e7c <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e047      	b.n	8007f0c <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <HAL_TIM_Base_Start+0x128>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01d      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d018      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1e      	ldr	r2, [pc, #120]	; (8007f18 <HAL_TIM_Base_Start+0x12c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <HAL_TIM_Base_Start+0x130>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <HAL_TIM_Base_Start+0x13c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <HAL_TIM_Base_Start+0x140>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIM_Base_Start+0xde>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a1c      	ldr	r2, [pc, #112]	; (8007f38 <HAL_TIM_Base_Start+0x14c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d115      	bne.n	8007ef6 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <HAL_TIM_Base_Start+0x154>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b06      	cmp	r3, #6
 8007eda:	d015      	beq.n	8007f08 <HAL_TIM_Base_Start+0x11c>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee2:	d011      	beq.n	8007f08 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef4:	e008      	b.n	8007f08 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0201 	orr.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e000      	b.n	8007f0a <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40001000 	.word	0x40001000
 8007f24:	40001400 	.word	0x40001400
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40014400 	.word	0x40014400
 8007f34:	40014800 	.word	0x40014800
 8007f38:	40015000 	.word	0x40015000
 8007f3c:	0800be84 	.word	0x0800be84
 8007f40:	00010007 	.word	0x00010007

08007f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d122      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d11b      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0202 	mvn.w	r2, #2
 8007f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f90f 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f901 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f912 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d122      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d11b      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0204 	mvn.w	r2, #4
 8007fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f8e5 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8d7 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f8e8 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d122      	bne.n	8008048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d11b      	bne.n	8008048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0208 	mvn.w	r2, #8
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2204      	movs	r2, #4
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8bb 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8ad 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8be 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b10      	cmp	r3, #16
 8008054:	d122      	bne.n	800809c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b10      	cmp	r3, #16
 8008062:	d11b      	bne.n	800809c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0210 	mvn.w	r2, #16
 800806c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2208      	movs	r2, #8
 8008072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f891 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f883 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f894 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10e      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d107      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0201 	mvn.w	r2, #1
 80080c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f85d 	bl	8008182 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa70 	bl	80085d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008102:	d10e      	bne.n	8008122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d107      	bne.n	8008122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800811a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa63 	bl	80085e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d10e      	bne.n	800814e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d107      	bne.n	800814e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f842 	bl	80081d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b20      	cmp	r3, #32
 800815a:	d10e      	bne.n	800817a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b20      	cmp	r3, #32
 8008168:	d107      	bne.n	800817a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f06f 0220 	mvn.w	r2, #32
 8008172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa23 	bl	80085c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a42      	ldr	r2, [pc, #264]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d00f      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a3e      	ldr	r2, [pc, #248]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a3d      	ldr	r2, [pc, #244]	; (8008310 <TIM_Base_SetConfig+0x128>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a3c      	ldr	r2, [pc, #240]	; (8008314 <TIM_Base_SetConfig+0x12c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d108      	bne.n	800823a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a31      	ldr	r2, [pc, #196]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01f      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008248:	d01b      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2e      	ldr	r2, [pc, #184]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d017      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2d      	ldr	r2, [pc, #180]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2c      	ldr	r2, [pc, #176]	; (8008310 <TIM_Base_SetConfig+0x128>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2c      	ldr	r2, [pc, #176]	; (8008318 <TIM_Base_SetConfig+0x130>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2b      	ldr	r2, [pc, #172]	; (800831c <TIM_Base_SetConfig+0x134>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <TIM_Base_SetConfig+0x138>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a25      	ldr	r2, [pc, #148]	; (8008314 <TIM_Base_SetConfig+0x12c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a12      	ldr	r2, [pc, #72]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <TIM_Base_SetConfig+0x100>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a13      	ldr	r2, [pc, #76]	; (8008310 <TIM_Base_SetConfig+0x128>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00f      	beq.n	80082e8 <TIM_Base_SetConfig+0x100>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a13      	ldr	r2, [pc, #76]	; (8008318 <TIM_Base_SetConfig+0x130>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <TIM_Base_SetConfig+0x100>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a12      	ldr	r2, [pc, #72]	; (800831c <TIM_Base_SetConfig+0x134>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d007      	beq.n	80082e8 <TIM_Base_SetConfig+0x100>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a11      	ldr	r2, [pc, #68]	; (8008320 <TIM_Base_SetConfig+0x138>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_Base_SetConfig+0x100>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <TIM_Base_SetConfig+0x12c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d103      	bne.n	80082f0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	615a      	str	r2, [r3, #20]
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40012c00 	.word	0x40012c00
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40013400 	.word	0x40013400
 8008314:	40015000 	.word	0x40015000
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800

08008324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a9a      	ldr	r2, [pc, #616]	; (800859c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d02c      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d027      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a96      	ldr	r2, [pc, #600]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d022      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a94      	ldr	r2, [pc, #592]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d01d      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a93      	ldr	r2, [pc, #588]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d018      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a91      	ldr	r2, [pc, #580]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a90      	ldr	r2, [pc, #576]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00e      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a8e      	ldr	r2, [pc, #568]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d009      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a8d      	ldr	r2, [pc, #564]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d004      	beq.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008388:	f240 71b4 	movw	r1, #1972	; 0x7b4
 800838c:	488b      	ldr	r0, [pc, #556]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800838e:	f7f9 fb3a 	bl	8001a06 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d01c      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d018      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b30      	cmp	r3, #48	; 0x30
 80083b0:	d014      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d010      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b50      	cmp	r3, #80	; 0x50
 80083c0:	d00c      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b60      	cmp	r3, #96	; 0x60
 80083c8:	d008      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b70      	cmp	r3, #112	; 0x70
 80083d0:	d004      	beq.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083d2:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80083d6:	4879      	ldr	r0, [pc, #484]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80083d8:	f7f9 fb15 	bl	8001a06 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b80      	cmp	r3, #128	; 0x80
 80083e2:	d008      	beq.n	80083f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80083ec:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80083f0:	4872      	ldr	r0, [pc, #456]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80083f2:	f7f9 fb08 	bl	8001a06 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008400:	2302      	movs	r3, #2
 8008402:	e0c6      	b.n	8008592 <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a5c      	ldr	r2, [pc, #368]	; (800859c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d009      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a5f      	ldr	r2, [pc, #380]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d004      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a5e      	ldr	r2, [pc, #376]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d161      	bne.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d054      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008452:	d04f      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800845c:	d04a      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008466:	d045      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008470:	d040      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800847a:	d03b      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008484:	d036      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800848e:	d031      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8008498:	d02c      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a2:	d027      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80084ac:	d022      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80084b6:	d01d      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80084c0:	d018      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084ca:	d013      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80084d4:	d00e      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80084de:	d009      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80084e8:	d004      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80084ea:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80084ee:	4833      	ldr	r0, [pc, #204]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80084f0:	f7f9 fa89 	bl	8001a06 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1d      	ldr	r2, [pc, #116]	; (800859c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d01d      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008532:	d018      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a19      	ldr	r2, [pc, #100]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a18      	ldr	r2, [pc, #96]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00e      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d009      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d004      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d10c      	bne.n	8008580 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4313      	orrs	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40012c00 	.word	0x40012c00
 80085a0:	40000400 	.word	0x40000400
 80085a4:	40000800 	.word	0x40000800
 80085a8:	40001000 	.word	0x40001000
 80085ac:	40001400 	.word	0x40001400
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40015000 	.word	0x40015000
 80085bc:	0800bebc 	.word	0x0800bebc

080085c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e077      	b.n	80086fe <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d014      	beq.n	8008640 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a3b      	ldr	r2, [pc, #236]	; (8008708 <HAL_UART_Init+0x10c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d02d      	beq.n	800867c <HAL_UART_Init+0x80>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a39      	ldr	r2, [pc, #228]	; (800870c <HAL_UART_Init+0x110>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d028      	beq.n	800867c <HAL_UART_Init+0x80>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a38      	ldr	r2, [pc, #224]	; (8008710 <HAL_UART_Init+0x114>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d023      	beq.n	800867c <HAL_UART_Init+0x80>
 8008634:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008638:	4836      	ldr	r0, [pc, #216]	; (8008714 <HAL_UART_Init+0x118>)
 800863a:	f7f9 f9e4 	bl	8001a06 <assert_failed>
 800863e:	e01d      	b.n	800867c <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a30      	ldr	r2, [pc, #192]	; (8008708 <HAL_UART_Init+0x10c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d018      	beq.n	800867c <HAL_UART_Init+0x80>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2f      	ldr	r2, [pc, #188]	; (800870c <HAL_UART_Init+0x110>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d013      	beq.n	800867c <HAL_UART_Init+0x80>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2d      	ldr	r2, [pc, #180]	; (8008710 <HAL_UART_Init+0x114>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00e      	beq.n	800867c <HAL_UART_Init+0x80>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2d      	ldr	r2, [pc, #180]	; (8008718 <HAL_UART_Init+0x11c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_UART_Init+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a2b      	ldr	r2, [pc, #172]	; (800871c <HAL_UART_Init+0x120>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d004      	beq.n	800867c <HAL_UART_Init+0x80>
 8008672:	f240 1131 	movw	r1, #305	; 0x131
 8008676:	4827      	ldr	r0, [pc, #156]	; (8008714 <HAL_UART_Init+0x118>)
 8008678:	f7f9 f9c5 	bl	8001a06 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7f9 fc7b 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2224      	movs	r2, #36	; 0x24
 8008696:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0201 	bic.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fbe9 	bl	8008e80 <UART_SetConfig>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e022      	b.n	80086fe <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fe41 	bl	8009348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 ff74 	bl	80095e4 <UART_CheckIdleState>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40013800 	.word	0x40013800
 800870c:	40004400 	.word	0x40004400
 8008710:	40004800 	.word	0x40004800
 8008714:	0800bef8 	.word	0x0800bef8
 8008718:	40004c00 	.word	0x40004c00
 800871c:	40005000 	.word	0x40005000

08008720 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008720:	b480      	push	{r7}
 8008722:	b08b      	sub	sp, #44	; 0x2c
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008732:	2b20      	cmp	r3, #32
 8008734:	d156      	bne.n	80087e4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_UART_Transmit_IT+0x22>
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e04f      	b.n	80087e6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_UART_Transmit_IT+0x34>
 8008750:	2302      	movs	r3, #2
 8008752:	e048      	b.n	80087e6 <HAL_UART_Transmit_IT+0xc6>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	88fa      	ldrh	r2, [r7, #6]
 8008766:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2221      	movs	r2, #33	; 0x21
 8008784:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878e:	d107      	bne.n	80087a0 <HAL_UART_Transmit_IT+0x80>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a16      	ldr	r2, [pc, #88]	; (80087f4 <HAL_UART_Transmit_IT+0xd4>)
 800879c:	669a      	str	r2, [r3, #104]	; 0x68
 800879e:	e002      	b.n	80087a6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <HAL_UART_Transmit_IT+0xd8>)
 80087a4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	613b      	str	r3, [r7, #16]
   return(result);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	623b      	str	r3, [r7, #32]
 80087ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	69f9      	ldr	r1, [r7, #28]
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e6      	bne.n	80087ae <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	e000      	b.n	80087e6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	372c      	adds	r7, #44	; 0x2c
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	08009b03 	.word	0x08009b03
 80087f8:	08009a4b 	.word	0x08009a4b

080087fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	; 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880e:	2b20      	cmp	r3, #32
 8008810:	d13d      	bne.n	800888e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <HAL_UART_Receive_IT+0x22>
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e036      	b.n	8008890 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_UART_Receive_IT+0x34>
 800882c:	2302      	movs	r3, #2
 800882e:	e02f      	b.n	8008890 <HAL_UART_Receive_IT+0x94>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d018      	beq.n	800887e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	613b      	str	r3, [r7, #16]
   return(result);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	623b      	str	r3, [r7, #32]
 800886c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	69f9      	ldr	r1, [r7, #28]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	61bb      	str	r3, [r7, #24]
   return(result);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e6      	bne.n	800884c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	461a      	mov	r2, r3
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 ffbb 	bl	8009800 <UART_Start_Receive_IT>
 800888a:	4603      	mov	r3, r0
 800888c:	e000      	b.n	8008890 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800888e:	2302      	movs	r3, #2
  }
}
 8008890:	4618      	mov	r0, r3
 8008892:	3728      	adds	r7, #40	; 0x28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b0ba      	sub	sp, #232	; 0xe8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80088c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80088c6:	4013      	ands	r3, r2
 80088c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80088cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d115      	bne.n	8008900 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80088d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00f      	beq.n	8008900 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 82a3 	beq.w	8008e3c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
      }
      return;
 80088fe:	e29d      	b.n	8008e3c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8117 	beq.w	8008b38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800890a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800891a:	4b85      	ldr	r3, [pc, #532]	; (8008b30 <HAL_UART_IRQHandler+0x298>)
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 810a 	beq.w	8008b38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d011      	beq.n	8008954 <HAL_UART_IRQHandler+0xbc>
 8008930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2201      	movs	r2, #1
 8008942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d011      	beq.n	8008984 <HAL_UART_IRQHandler+0xec>
 8008960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2202      	movs	r2, #2
 8008972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800897a:	f043 0204 	orr.w	r2, r3, #4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d011      	beq.n	80089b4 <HAL_UART_IRQHandler+0x11c>
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2204      	movs	r2, #4
 80089a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089aa:	f043 0202 	orr.w	r2, r3, #2
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80089cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2208      	movs	r2, #8
 80089de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e6:	f043 0208 	orr.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d012      	beq.n	8008a22 <HAL_UART_IRQHandler+0x18a>
 80089fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8209 	beq.w	8008e40 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00d      	beq.n	8008a56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6a:	2b40      	cmp	r3, #64	; 0x40
 8008a6c:	d005      	beq.n	8008a7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d04f      	beq.n	8008b1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 ff6c 	bl	8009958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d141      	bne.n	8008b12 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1d9      	bne.n	8008a8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d013      	beq.n	8008b0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <HAL_UART_IRQHandler+0x29c>)
 8008ae8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fcc1 	bl	8002476 <HAL_DMA_Abort_IT>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b08:	e00f      	b.n	8008b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9a2 	bl	8008e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b10:	e00b      	b.n	8008b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f99e 	bl	8008e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	e007      	b.n	8008b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f99a 	bl	8008e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008b28:	e18a      	b.n	8008e40 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2a:	bf00      	nop
    return;
 8008b2c:	e188      	b.n	8008e40 <HAL_UART_IRQHandler+0x5a8>
 8008b2e:	bf00      	nop
 8008b30:	04000120 	.word	0x04000120
 8008b34:	08009a1f 	.word	0x08009a1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	f040 8143 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b46:	f003 0310 	and.w	r3, r3, #16
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 813c 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8135 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2210      	movs	r2, #16
 8008b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	f040 80b1 	bne.w	8008cd8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 815c 	beq.w	8008e44 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b96:	429a      	cmp	r2, r3
 8008b98:	f080 8154 	bcs.w	8008e44 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	f000 8085 	beq.w	8008cbc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1da      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3308      	adds	r3, #8
 8008c02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c0e:	f023 0301 	bic.w	r3, r3, #1
 8008c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e1      	bne.n	8008bfc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e3      	bne.n	8008c38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8c:	f023 0310 	bic.w	r3, r3, #16
 8008c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ca0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e4      	bne.n	8008c7c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f9 fba4 	bl	8002404 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8c9 	bl	8008e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cd6:	e0b5      	b.n	8008e44 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80a7 	beq.w	8008e48 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80a2 	beq.w	8008e48 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d26:	647b      	str	r3, [r7, #68]	; 0x44
 8008d28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e4      	bne.n	8008d04 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e3      	bne.n	8008d3a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2220      	movs	r2, #32
 8008d76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f023 0310 	bic.w	r3, r3, #16
 8008d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	69b9      	ldr	r1, [r7, #24]
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	617b      	str	r3, [r7, #20]
   return(result);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e4      	bne.n	8008d84 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f851 	bl	8008e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dc6:	e03f      	b.n	8008e48 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00e      	beq.n	8008df2 <HAL_UART_IRQHandler+0x55a>
 8008dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 f86f 	bl	8009ece <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008df0:	e02d      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d008      	beq.n	8008e1c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01c      	beq.n	8008e4c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
    }
    return;
 8008e1a:	e017      	b.n	8008e4c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d012      	beq.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fec4 	bl	8009bc2 <UART_EndTransmit_IT>
    return;
 8008e3a:	e008      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008e3c:	bf00      	nop
 8008e3e:	e006      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8008e40:	bf00      	nop
 8008e42:	e004      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008e44:	bf00      	nop
 8008e46:	e002      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8008e4c:	bf00      	nop
  }

}
 8008e4e:	37e8      	adds	r7, #232	; 0xe8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4a9a      	ldr	r2, [pc, #616]	; (80090fc <UART_SetConfig+0x27c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d904      	bls.n	8008ea0 <UART_SetConfig+0x20>
 8008e96:	f640 313f 	movw	r1, #2879	; 0xb3f
 8008e9a:	4899      	ldr	r0, [pc, #612]	; (8009100 <UART_SetConfig+0x280>)
 8008e9c:	f7f8 fdb3 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea8:	d00d      	beq.n	8008ec6 <UART_SetConfig+0x46>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <UART_SetConfig+0x46>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	d004      	beq.n	8008ec6 <UART_SetConfig+0x46>
 8008ebc:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8008ec0:	488f      	ldr	r0, [pc, #572]	; (8009100 <UART_SetConfig+0x280>)
 8008ec2:	f7f8 fda0 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ece:	d012      	beq.n	8008ef6 <UART_SetConfig+0x76>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <UART_SetConfig+0x76>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ee0:	d009      	beq.n	8008ef6 <UART_SetConfig+0x76>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eea:	d004      	beq.n	8008ef6 <UART_SetConfig+0x76>
 8008eec:	f640 3141 	movw	r1, #2881	; 0xb41
 8008ef0:	4883      	ldr	r0, [pc, #524]	; (8009100 <UART_SetConfig+0x280>)
 8008ef2:	f7f8 fd88 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <UART_SetConfig+0x92>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f06:	d004      	beq.n	8008f12 <UART_SetConfig+0x92>
 8008f08:	f640 3142 	movw	r1, #2882	; 0xb42
 8008f0c:	487c      	ldr	r0, [pc, #496]	; (8009100 <UART_SetConfig+0x280>)
 8008f0e:	f7f8 fd7a 	bl	8001a06 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <UART_SetConfig+0xb8>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d009      	beq.n	8008f38 <UART_SetConfig+0xb8>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f2c:	d004      	beq.n	8008f38 <UART_SetConfig+0xb8>
 8008f2e:	f640 3144 	movw	r1, #2884	; 0xb44
 8008f32:	4873      	ldr	r0, [pc, #460]	; (8009100 <UART_SetConfig+0x280>)
 8008f34:	f7f8 fd67 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	f023 030c 	bic.w	r3, r3, #12
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <UART_SetConfig+0xcc>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <UART_SetConfig+0xd6>
 8008f4c:	f640 3145 	movw	r1, #2885	; 0xb45
 8008f50:	486b      	ldr	r0, [pc, #428]	; (8009100 <UART_SetConfig+0x280>)
 8008f52:	f7f8 fd58 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d013      	beq.n	8008f86 <UART_SetConfig+0x106>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	d00e      	beq.n	8008f86 <UART_SetConfig+0x106>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f70:	d009      	beq.n	8008f86 <UART_SetConfig+0x106>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f7a:	d004      	beq.n	8008f86 <UART_SetConfig+0x106>
 8008f7c:	f640 3146 	movw	r1, #2886	; 0xb46
 8008f80:	485f      	ldr	r0, [pc, #380]	; (8009100 <UART_SetConfig+0x280>)
 8008f82:	f7f8 fd40 	bl	8001a06 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d009      	beq.n	8008fa2 <UART_SetConfig+0x122>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f96:	d004      	beq.n	8008fa2 <UART_SetConfig+0x122>
 8008f98:	f640 3147 	movw	r1, #2887	; 0xb47
 8008f9c:	4858      	ldr	r0, [pc, #352]	; (8009100 <UART_SetConfig+0x280>)
 8008f9e:	f7f8 fd32 	bl	8001a06 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b50      	ldr	r3, [pc, #320]	; (8009104 <UART_SetConfig+0x284>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	6979      	ldr	r1, [r7, #20]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	430a      	orrs	r2, r1
 8009006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a3e      	ldr	r2, [pc, #248]	; (8009108 <UART_SetConfig+0x288>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d11f      	bne.n	8009052 <UART_SetConfig+0x1d2>
 8009012:	4b3e      	ldr	r3, [pc, #248]	; (800910c <UART_SetConfig+0x28c>)
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d816      	bhi.n	800904c <UART_SetConfig+0x1cc>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <UART_SetConfig+0x1a4>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009035 	.word	0x08009035
 8009028:	08009041 	.word	0x08009041
 800902c:	08009047 	.word	0x08009047
 8009030:	0800903b 	.word	0x0800903b
 8009034:	2301      	movs	r3, #1
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	e0c4      	b.n	80091c4 <UART_SetConfig+0x344>
 800903a:	2302      	movs	r3, #2
 800903c:	77fb      	strb	r3, [r7, #31]
 800903e:	e0c1      	b.n	80091c4 <UART_SetConfig+0x344>
 8009040:	2304      	movs	r3, #4
 8009042:	77fb      	strb	r3, [r7, #31]
 8009044:	e0be      	b.n	80091c4 <UART_SetConfig+0x344>
 8009046:	2308      	movs	r3, #8
 8009048:	77fb      	strb	r3, [r7, #31]
 800904a:	e0bb      	b.n	80091c4 <UART_SetConfig+0x344>
 800904c:	2310      	movs	r3, #16
 800904e:	77fb      	strb	r3, [r7, #31]
 8009050:	e0b8      	b.n	80091c4 <UART_SetConfig+0x344>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a2e      	ldr	r2, [pc, #184]	; (8009110 <UART_SetConfig+0x290>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d124      	bne.n	80090a6 <UART_SetConfig+0x226>
 800905c:	4b2b      	ldr	r3, [pc, #172]	; (800910c <UART_SetConfig+0x28c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009068:	d011      	beq.n	800908e <UART_SetConfig+0x20e>
 800906a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800906e:	d817      	bhi.n	80090a0 <UART_SetConfig+0x220>
 8009070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009074:	d011      	beq.n	800909a <UART_SetConfig+0x21a>
 8009076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800907a:	d811      	bhi.n	80090a0 <UART_SetConfig+0x220>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <UART_SetConfig+0x208>
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009084:	d006      	beq.n	8009094 <UART_SetConfig+0x214>
 8009086:	e00b      	b.n	80090a0 <UART_SetConfig+0x220>
 8009088:	2300      	movs	r3, #0
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	e09a      	b.n	80091c4 <UART_SetConfig+0x344>
 800908e:	2302      	movs	r3, #2
 8009090:	77fb      	strb	r3, [r7, #31]
 8009092:	e097      	b.n	80091c4 <UART_SetConfig+0x344>
 8009094:	2304      	movs	r3, #4
 8009096:	77fb      	strb	r3, [r7, #31]
 8009098:	e094      	b.n	80091c4 <UART_SetConfig+0x344>
 800909a:	2308      	movs	r3, #8
 800909c:	77fb      	strb	r3, [r7, #31]
 800909e:	e091      	b.n	80091c4 <UART_SetConfig+0x344>
 80090a0:	2310      	movs	r3, #16
 80090a2:	77fb      	strb	r3, [r7, #31]
 80090a4:	e08e      	b.n	80091c4 <UART_SetConfig+0x344>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a1a      	ldr	r2, [pc, #104]	; (8009114 <UART_SetConfig+0x294>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d133      	bne.n	8009118 <UART_SetConfig+0x298>
 80090b0:	4b16      	ldr	r3, [pc, #88]	; (800910c <UART_SetConfig+0x28c>)
 80090b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80090b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090bc:	d011      	beq.n	80090e2 <UART_SetConfig+0x262>
 80090be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090c2:	d817      	bhi.n	80090f4 <UART_SetConfig+0x274>
 80090c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090c8:	d011      	beq.n	80090ee <UART_SetConfig+0x26e>
 80090ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090ce:	d811      	bhi.n	80090f4 <UART_SetConfig+0x274>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <UART_SetConfig+0x25c>
 80090d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090d8:	d006      	beq.n	80090e8 <UART_SetConfig+0x268>
 80090da:	e00b      	b.n	80090f4 <UART_SetConfig+0x274>
 80090dc:	2300      	movs	r3, #0
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e070      	b.n	80091c4 <UART_SetConfig+0x344>
 80090e2:	2302      	movs	r3, #2
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e06d      	b.n	80091c4 <UART_SetConfig+0x344>
 80090e8:	2304      	movs	r3, #4
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e06a      	b.n	80091c4 <UART_SetConfig+0x344>
 80090ee:	2308      	movs	r3, #8
 80090f0:	77fb      	strb	r3, [r7, #31]
 80090f2:	e067      	b.n	80091c4 <UART_SetConfig+0x344>
 80090f4:	2310      	movs	r3, #16
 80090f6:	77fb      	strb	r3, [r7, #31]
 80090f8:	e064      	b.n	80091c4 <UART_SetConfig+0x344>
 80090fa:	bf00      	nop
 80090fc:	00895440 	.word	0x00895440
 8009100:	0800bef8 	.word	0x0800bef8
 8009104:	efff69f3 	.word	0xefff69f3
 8009108:	40013800 	.word	0x40013800
 800910c:	40021000 	.word	0x40021000
 8009110:	40004400 	.word	0x40004400
 8009114:	40004800 	.word	0x40004800
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a86      	ldr	r2, [pc, #536]	; (8009338 <UART_SetConfig+0x4b8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d124      	bne.n	800916c <UART_SetConfig+0x2ec>
 8009122:	4b86      	ldr	r3, [pc, #536]	; (800933c <UART_SetConfig+0x4bc>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800912a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800912e:	d011      	beq.n	8009154 <UART_SetConfig+0x2d4>
 8009130:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009134:	d817      	bhi.n	8009166 <UART_SetConfig+0x2e6>
 8009136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800913a:	d011      	beq.n	8009160 <UART_SetConfig+0x2e0>
 800913c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009140:	d811      	bhi.n	8009166 <UART_SetConfig+0x2e6>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <UART_SetConfig+0x2ce>
 8009146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800914a:	d006      	beq.n	800915a <UART_SetConfig+0x2da>
 800914c:	e00b      	b.n	8009166 <UART_SetConfig+0x2e6>
 800914e:	2300      	movs	r3, #0
 8009150:	77fb      	strb	r3, [r7, #31]
 8009152:	e037      	b.n	80091c4 <UART_SetConfig+0x344>
 8009154:	2302      	movs	r3, #2
 8009156:	77fb      	strb	r3, [r7, #31]
 8009158:	e034      	b.n	80091c4 <UART_SetConfig+0x344>
 800915a:	2304      	movs	r3, #4
 800915c:	77fb      	strb	r3, [r7, #31]
 800915e:	e031      	b.n	80091c4 <UART_SetConfig+0x344>
 8009160:	2308      	movs	r3, #8
 8009162:	77fb      	strb	r3, [r7, #31]
 8009164:	e02e      	b.n	80091c4 <UART_SetConfig+0x344>
 8009166:	2310      	movs	r3, #16
 8009168:	77fb      	strb	r3, [r7, #31]
 800916a:	e02b      	b.n	80091c4 <UART_SetConfig+0x344>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a73      	ldr	r2, [pc, #460]	; (8009340 <UART_SetConfig+0x4c0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d124      	bne.n	80091c0 <UART_SetConfig+0x340>
 8009176:	4b71      	ldr	r3, [pc, #452]	; (800933c <UART_SetConfig+0x4bc>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800917e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009182:	d011      	beq.n	80091a8 <UART_SetConfig+0x328>
 8009184:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009188:	d817      	bhi.n	80091ba <UART_SetConfig+0x33a>
 800918a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800918e:	d011      	beq.n	80091b4 <UART_SetConfig+0x334>
 8009190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009194:	d811      	bhi.n	80091ba <UART_SetConfig+0x33a>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <UART_SetConfig+0x322>
 800919a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800919e:	d006      	beq.n	80091ae <UART_SetConfig+0x32e>
 80091a0:	e00b      	b.n	80091ba <UART_SetConfig+0x33a>
 80091a2:	2300      	movs	r3, #0
 80091a4:	77fb      	strb	r3, [r7, #31]
 80091a6:	e00d      	b.n	80091c4 <UART_SetConfig+0x344>
 80091a8:	2302      	movs	r3, #2
 80091aa:	77fb      	strb	r3, [r7, #31]
 80091ac:	e00a      	b.n	80091c4 <UART_SetConfig+0x344>
 80091ae:	2304      	movs	r3, #4
 80091b0:	77fb      	strb	r3, [r7, #31]
 80091b2:	e007      	b.n	80091c4 <UART_SetConfig+0x344>
 80091b4:	2308      	movs	r3, #8
 80091b6:	77fb      	strb	r3, [r7, #31]
 80091b8:	e004      	b.n	80091c4 <UART_SetConfig+0x344>
 80091ba:	2310      	movs	r3, #16
 80091bc:	77fb      	strb	r3, [r7, #31]
 80091be:	e001      	b.n	80091c4 <UART_SetConfig+0x344>
 80091c0:	2310      	movs	r3, #16
 80091c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091cc:	d15c      	bne.n	8009288 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80091ce:	7ffb      	ldrb	r3, [r7, #31]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d828      	bhi.n	8009226 <UART_SetConfig+0x3a6>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <UART_SetConfig+0x35c>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009201 	.word	0x08009201
 80091e0:	08009209 	.word	0x08009209
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009227 	.word	0x08009227
 80091ec:	08009217 	.word	0x08009217
 80091f0:	08009227 	.word	0x08009227
 80091f4:	08009227 	.word	0x08009227
 80091f8:	08009227 	.word	0x08009227
 80091fc:	0800921f 	.word	0x0800921f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009200:	f7fc ff60 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8009204:	61b8      	str	r0, [r7, #24]
        break;
 8009206:	e013      	b.n	8009230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009208:	f7fc ff7e 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 800920c:	61b8      	str	r0, [r7, #24]
        break;
 800920e:	e00f      	b.n	8009230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009210:	4b4c      	ldr	r3, [pc, #304]	; (8009344 <UART_SetConfig+0x4c4>)
 8009212:	61bb      	str	r3, [r7, #24]
        break;
 8009214:	e00c      	b.n	8009230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009216:	f7fc fedf 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 800921a:	61b8      	str	r0, [r7, #24]
        break;
 800921c:	e008      	b.n	8009230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009222:	61bb      	str	r3, [r7, #24]
        break;
 8009224:	e004      	b.n	8009230 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	77bb      	strb	r3, [r7, #30]
        break;
 800922e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d074      	beq.n	8009320 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	005a      	lsls	r2, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	441a      	add	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	fbb2 f3f3 	udiv	r3, r2, r3
 800924a:	b29b      	uxth	r3, r3
 800924c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b0f      	cmp	r3, #15
 8009252:	d916      	bls.n	8009282 <UART_SetConfig+0x402>
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925a:	d212      	bcs.n	8009282 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f023 030f 	bic.w	r3, r3, #15
 8009264:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	b29b      	uxth	r3, r3
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	b29a      	uxth	r2, r3
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	4313      	orrs	r3, r2
 8009276:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	89fa      	ldrh	r2, [r7, #14]
 800927e:	60da      	str	r2, [r3, #12]
 8009280:	e04e      	b.n	8009320 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	77bb      	strb	r3, [r7, #30]
 8009286:	e04b      	b.n	8009320 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009288:	7ffb      	ldrb	r3, [r7, #31]
 800928a:	2b08      	cmp	r3, #8
 800928c:	d827      	bhi.n	80092de <UART_SetConfig+0x45e>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <UART_SetConfig+0x414>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092c1 	.word	0x080092c1
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	080092df 	.word	0x080092df
 80092a4:	080092cf 	.word	0x080092cf
 80092a8:	080092df 	.word	0x080092df
 80092ac:	080092df 	.word	0x080092df
 80092b0:	080092df 	.word	0x080092df
 80092b4:	080092d7 	.word	0x080092d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b8:	f7fc ff04 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 80092bc:	61b8      	str	r0, [r7, #24]
        break;
 80092be:	e013      	b.n	80092e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092c0:	f7fc ff22 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 80092c4:	61b8      	str	r0, [r7, #24]
        break;
 80092c6:	e00f      	b.n	80092e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092c8:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <UART_SetConfig+0x4c4>)
 80092ca:	61bb      	str	r3, [r7, #24]
        break;
 80092cc:	e00c      	b.n	80092e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ce:	f7fc fe83 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 80092d2:	61b8      	str	r0, [r7, #24]
        break;
 80092d4:	e008      	b.n	80092e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092da:	61bb      	str	r3, [r7, #24]
        break;
 80092dc:	e004      	b.n	80092e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	77bb      	strb	r3, [r7, #30]
        break;
 80092e6:	bf00      	nop
    }

    if (pclk != 0U)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d018      	beq.n	8009320 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	085a      	lsrs	r2, r3, #1
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	441a      	add	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009300:	b29b      	uxth	r3, r3
 8009302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2b0f      	cmp	r3, #15
 8009308:	d908      	bls.n	800931c <UART_SetConfig+0x49c>
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009310:	d204      	bcs.n	800931c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	e001      	b.n	8009320 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800932c:	7fbb      	ldrb	r3, [r7, #30]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40004c00 	.word	0x40004c00
 800933c:	40021000 	.word	0x40021000
 8009340:	40005000 	.word	0x40005000
 8009344:	007a1200 	.word	0x007a1200

08009348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	2bff      	cmp	r3, #255	; 0xff
 8009356:	d904      	bls.n	8009362 <UART_AdvFeatureConfig+0x1a>
 8009358:	f640 31c8 	movw	r1, #3016	; 0xbc8
 800935c:	489d      	ldr	r0, [pc, #628]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 800935e:	f7f8 fb52 	bl	8001a06 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d018      	beq.n	80093a0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <UART_AdvFeatureConfig+0x42>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800937e:	d004      	beq.n	800938a <UART_AdvFeatureConfig+0x42>
 8009380:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8009384:	4893      	ldr	r0, [pc, #588]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009386:	f7f8 fb3e 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d018      	beq.n	80093de <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <UART_AdvFeatureConfig+0x80>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093bc:	d004      	beq.n	80093c8 <UART_AdvFeatureConfig+0x80>
 80093be:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80093c2:	4884      	ldr	r0, [pc, #528]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 80093c4:	f7f8 fb1f 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d018      	beq.n	800941c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d009      	beq.n	8009406 <UART_AdvFeatureConfig+0xbe>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093fa:	d004      	beq.n	8009406 <UART_AdvFeatureConfig+0xbe>
 80093fc:	f640 31db 	movw	r1, #3035	; 0xbdb
 8009400:	4874      	ldr	r0, [pc, #464]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009402:	f7f8 fb00 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	2b00      	cmp	r3, #0
 8009426:	d018      	beq.n	800945a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	2b00      	cmp	r3, #0
 800942e:	d009      	beq.n	8009444 <UART_AdvFeatureConfig+0xfc>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009438:	d004      	beq.n	8009444 <UART_AdvFeatureConfig+0xfc>
 800943a:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800943e:	4865      	ldr	r0, [pc, #404]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009440:	f7f8 fae1 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b00      	cmp	r3, #0
 8009464:	d018      	beq.n	8009498 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <UART_AdvFeatureConfig+0x13a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009476:	d004      	beq.n	8009482 <UART_AdvFeatureConfig+0x13a>
 8009478:	f640 31e9 	movw	r1, #3049	; 0xbe9
 800947c:	4855      	ldr	r0, [pc, #340]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 800947e:	f7f8 fac2 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d018      	beq.n	80094d6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <UART_AdvFeatureConfig+0x178>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b4:	d004      	beq.n	80094c0 <UART_AdvFeatureConfig+0x178>
 80094b6:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 80094ba:	4846      	ldr	r0, [pc, #280]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 80094bc:	f7f8 faa3 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d054      	beq.n	800958c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a3c      	ldr	r2, [pc, #240]	; (80095d8 <UART_AdvFeatureConfig+0x290>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00e      	beq.n	800950a <UART_AdvFeatureConfig+0x1c2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a3a      	ldr	r2, [pc, #232]	; (80095dc <UART_AdvFeatureConfig+0x294>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d009      	beq.n	800950a <UART_AdvFeatureConfig+0x1c2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a39      	ldr	r2, [pc, #228]	; (80095e0 <UART_AdvFeatureConfig+0x298>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <UART_AdvFeatureConfig+0x1c2>
 8009500:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009504:	4833      	ldr	r0, [pc, #204]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009506:	f7f8 fa7e 	bl	8001a06 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <UART_AdvFeatureConfig+0x1de>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800951a:	d004      	beq.n	8009526 <UART_AdvFeatureConfig+0x1de>
 800951c:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8009520:	482c      	ldr	r0, [pc, #176]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009522:	f7f8 fa70 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009544:	d122      	bne.n	800958c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	2b00      	cmp	r3, #0
 800954c:	d013      	beq.n	8009576 <UART_AdvFeatureConfig+0x22e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009556:	d00e      	beq.n	8009576 <UART_AdvFeatureConfig+0x22e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009560:	d009      	beq.n	8009576 <UART_AdvFeatureConfig+0x22e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009566:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800956a:	d004      	beq.n	8009576 <UART_AdvFeatureConfig+0x22e>
 800956c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009570:	4818      	ldr	r0, [pc, #96]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 8009572:	f7f8 fa48 	bl	8001a06 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	d018      	beq.n	80095ca <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <UART_AdvFeatureConfig+0x26c>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095a8:	d004      	beq.n	80095b4 <UART_AdvFeatureConfig+0x26c>
 80095aa:	f640 4105 	movw	r1, #3077	; 0xc05
 80095ae:	4809      	ldr	r0, [pc, #36]	; (80095d4 <UART_AdvFeatureConfig+0x28c>)
 80095b0:	f7f8 fa29 	bl	8001a06 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
  }
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	0800bef8 	.word	0x0800bef8
 80095d8:	40013800 	.word	0x40013800
 80095dc:	40004400 	.word	0x40004400
 80095e0:	40004800 	.word	0x40004800

080095e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095f4:	f7f8 fd96 	bl	8002124 <HAL_GetTick>
 80095f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b08      	cmp	r3, #8
 8009606:	d10e      	bne.n	8009626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f82d 	bl	8009676 <UART_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e023      	b.n	800966e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b04      	cmp	r3, #4
 8009632:	d10e      	bne.n	8009652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f817 	bl	8009676 <UART_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e00d      	b.n	800966e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b09c      	sub	sp, #112	; 0x70
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009686:	e0a5      	b.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	f000 80a1 	beq.w	80097d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009692:	f7f8 fd47 	bl	8002124 <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800969e:	429a      	cmp	r2, r3
 80096a0:	d302      	bcc.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80096a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d13e      	bne.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096bc:	667b      	str	r3, [r7, #100]	; 0x64
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e6      	bne.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	663b      	str	r3, [r7, #96]	; 0x60
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e5      	bne.n	80096da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2220      	movs	r2, #32
 8009712:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e067      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d04f      	beq.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800973e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009742:	d147      	bne.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800974c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800976c:	637b      	str	r3, [r7, #52]	; 0x34
 800976e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e6      	bne.n	800974e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3308      	adds	r3, #8
 8009786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	613b      	str	r3, [r7, #16]
   return(result);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	66bb      	str	r3, [r7, #104]	; 0x68
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3308      	adds	r3, #8
 800979e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097a0:	623a      	str	r2, [r7, #32]
 80097a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	6a3a      	ldr	r2, [r7, #32]
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e5      	bne.n	8009780 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2220      	movs	r2, #32
 80097b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e010      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69da      	ldr	r2, [r3, #28]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4013      	ands	r3, r2
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	f43f af4a 	beq.w	8009688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3770      	adds	r7, #112	; 0x70
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009800:	b480      	push	{r7}
 8009802:	b091      	sub	sp, #68	; 0x44
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	88fa      	ldrh	r2, [r7, #6]
 8009818:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	88fa      	ldrh	r2, [r7, #6]
 8009820:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009832:	d10e      	bne.n	8009852 <UART_Start_Receive_IT+0x52>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <UART_Start_Receive_IT+0x48>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009846:	e02d      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	22ff      	movs	r2, #255	; 0xff
 800984c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009850:	e028      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10d      	bne.n	8009876 <UART_Start_Receive_IT+0x76>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d104      	bne.n	800986c <UART_Start_Receive_IT+0x6c>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	22ff      	movs	r2, #255	; 0xff
 8009866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800986a:	e01b      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	227f      	movs	r2, #127	; 0x7f
 8009870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009874:	e016      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987e:	d10d      	bne.n	800989c <UART_Start_Receive_IT+0x9c>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d104      	bne.n	8009892 <UART_Start_Receive_IT+0x92>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	227f      	movs	r2, #127	; 0x7f
 800988c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009890:	e008      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	223f      	movs	r2, #63	; 0x3f
 8009896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800989a:	e003      	b.n	80098a4 <UART_Start_Receive_IT+0xa4>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2222      	movs	r2, #34	; 0x22
 80098b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3308      	adds	r3, #8
 80098d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098d2:	637a      	str	r2, [r7, #52]	; 0x34
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e5      	bne.n	80098b2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ee:	d107      	bne.n	8009900 <UART_Start_Receive_IT+0x100>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4a15      	ldr	r2, [pc, #84]	; (8009950 <UART_Start_Receive_IT+0x150>)
 80098fc:	665a      	str	r2, [r3, #100]	; 0x64
 80098fe:	e002      	b.n	8009906 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a14      	ldr	r2, [pc, #80]	; (8009954 <UART_Start_Receive_IT+0x154>)
 8009904:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	613b      	str	r3, [r7, #16]
   return(result);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009922:	63bb      	str	r3, [r7, #56]	; 0x38
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	623b      	str	r3, [r7, #32]
 800992e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	69f9      	ldr	r1, [r7, #28]
 8009932:	6a3a      	ldr	r2, [r7, #32]
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	61bb      	str	r3, [r7, #24]
   return(result);
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e6      	bne.n	800990e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3744      	adds	r7, #68	; 0x44
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	08009d73 	.word	0x08009d73
 8009954:	08009c17 	.word	0x08009c17

08009958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b095      	sub	sp, #84	; 0x54
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997e:	643b      	str	r3, [r7, #64]	; 0x40
 8009980:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e6      	bne.n	8009960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e5      	bne.n	8009992 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d118      	bne.n	8009a00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	60bb      	str	r3, [r7, #8]
   return(result);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f023 0310 	bic.w	r3, r3, #16
 80099e2:	647b      	str	r3, [r7, #68]	; 0x44
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6979      	ldr	r1, [r7, #20]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	613b      	str	r3, [r7, #16]
   return(result);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e6      	bne.n	80099ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2220      	movs	r2, #32
 8009a04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009a12:	bf00      	nop
 8009a14:	3754      	adds	r7, #84	; 0x54
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7ff fa09 	bl	8008e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b08f      	sub	sp, #60	; 0x3c
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a56:	2b21      	cmp	r3, #33	; 0x21
 8009a58:	d14d      	bne.n	8009af6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d132      	bne.n	8009acc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	461a      	mov	r2, r3
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a86:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e6      	bne.n	8009a66 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	e853 3f00 	ldrex	r3, [r3]
 8009aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6979      	ldr	r1, [r7, #20]
 8009abc:	69ba      	ldr	r2, [r7, #24]
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e6      	bne.n	8009a98 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009aca:	e014      	b.n	8009af6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009af6:	bf00      	nop
 8009af8:	373c      	adds	r7, #60	; 0x3c
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b091      	sub	sp, #68	; 0x44
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b0e:	2b21      	cmp	r3, #33	; 0x21
 8009b10:	d151      	bne.n	8009bb6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d132      	bne.n	8009b84 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e6      	bne.n	8009b1e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b64:	637b      	str	r3, [r7, #52]	; 0x34
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	69b9      	ldr	r1, [r7, #24]
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e6      	bne.n	8009b50 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b82:	e018      	b.n	8009bb6 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	881a      	ldrh	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b96:	b292      	uxth	r2, r2
 8009b98:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9e:	1c9a      	adds	r2, r3, #2
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009bb6:	bf00      	nop
 8009bb8:	3744      	adds	r7, #68	; 0x44
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b088      	sub	sp, #32
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6979      	ldr	r1, [r7, #20]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e6      	bne.n	8009bca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7f7 fa2d 	bl	8001068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0e:	bf00      	nop
 8009c10:	3720      	adds	r7, #32
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b096      	sub	sp, #88	; 0x58
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2c:	2b22      	cmp	r3, #34	; 0x22
 8009c2e:	f040 8094 	bne.w	8009d5a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c40:	b2d9      	uxtb	r1, r3
 8009c42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4c:	400a      	ands	r2, r1
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d177      	bne.n	8009d6a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c98:	647b      	str	r3, [r7, #68]	; 0x44
 8009c9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e6      	bne.n	8009c7a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	e853 3f00 	ldrex	r3, [r3]
 8009cba:	623b      	str	r3, [r7, #32]
   return(result);
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	f023 0301 	bic.w	r3, r3, #1
 8009cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ccc:	633a      	str	r2, [r7, #48]	; 0x30
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cd4:	e841 2300 	strex	r3, r2, [r1]
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e5      	bne.n	8009cac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d12e      	bne.n	8009d52 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0310 	bic.w	r3, r3, #16
 8009d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	69b9      	ldr	r1, [r7, #24]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	617b      	str	r3, [r7, #20]
   return(result);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e6      	bne.n	8009cfa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	d103      	bne.n	8009d42 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2210      	movs	r2, #16
 8009d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff f88c 	bl	8008e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d50:	e00b      	b.n	8009d6a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7f7 f9be 	bl	80010d4 <HAL_UART_RxCpltCallback>
}
 8009d58:	e007      	b.n	8009d6a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f042 0208 	orr.w	r2, r2, #8
 8009d68:	619a      	str	r2, [r3, #24]
}
 8009d6a:	bf00      	nop
 8009d6c:	3758      	adds	r7, #88	; 0x58
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b096      	sub	sp, #88	; 0x58
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d88:	2b22      	cmp	r3, #34	; 0x22
 8009d8a:	f040 8094 	bne.w	8009eb6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d9e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009da2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009da6:	4013      	ands	r3, r2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	1c9a      	adds	r2, r3, #2
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d177      	bne.n	8009ec6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df4:	643b      	str	r3, [r7, #64]	; 0x40
 8009df6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e6      	bne.n	8009dd6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	e853 3f00 	ldrex	r3, [r3]
 8009e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f023 0301 	bic.w	r3, r3, #1
 8009e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3308      	adds	r3, #8
 8009e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e5      	bne.n	8009e08 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d12e      	bne.n	8009eae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f023 0310 	bic.w	r3, r3, #16
 8009e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	613b      	str	r3, [r7, #16]
   return(result);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d103      	bne.n	8009e9e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fe ffde 	bl	8008e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eac:	e00b      	b.n	8009ec6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7f7 f910 	bl	80010d4 <HAL_UART_RxCpltCallback>
}
 8009eb4:	e007      	b.n	8009ec6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699a      	ldr	r2, [r3, #24]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0208 	orr.w	r2, r2, #8
 8009ec4:	619a      	str	r2, [r3, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	3758      	adds	r7, #88	; 0x58
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ed6:	bf00      	nop
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
	...

08009ee4 <__errno>:
 8009ee4:	4b01      	ldr	r3, [pc, #4]	; (8009eec <__errno+0x8>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	20000088 	.word	0x20000088

08009ef0 <__libc_init_array>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	4d0d      	ldr	r5, [pc, #52]	; (8009f28 <__libc_init_array+0x38>)
 8009ef4:	4c0d      	ldr	r4, [pc, #52]	; (8009f2c <__libc_init_array+0x3c>)
 8009ef6:	1b64      	subs	r4, r4, r5
 8009ef8:	10a4      	asrs	r4, r4, #2
 8009efa:	2600      	movs	r6, #0
 8009efc:	42a6      	cmp	r6, r4
 8009efe:	d109      	bne.n	8009f14 <__libc_init_array+0x24>
 8009f00:	4d0b      	ldr	r5, [pc, #44]	; (8009f30 <__libc_init_array+0x40>)
 8009f02:	4c0c      	ldr	r4, [pc, #48]	; (8009f34 <__libc_init_array+0x44>)
 8009f04:	f001 fe0c 	bl	800bb20 <_init>
 8009f08:	1b64      	subs	r4, r4, r5
 8009f0a:	10a4      	asrs	r4, r4, #2
 8009f0c:	2600      	movs	r6, #0
 8009f0e:	42a6      	cmp	r6, r4
 8009f10:	d105      	bne.n	8009f1e <__libc_init_array+0x2e>
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f18:	4798      	blx	r3
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	e7ee      	b.n	8009efc <__libc_init_array+0xc>
 8009f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f22:	4798      	blx	r3
 8009f24:	3601      	adds	r6, #1
 8009f26:	e7f2      	b.n	8009f0e <__libc_init_array+0x1e>
 8009f28:	0800c12c 	.word	0x0800c12c
 8009f2c:	0800c12c 	.word	0x0800c12c
 8009f30:	0800c12c 	.word	0x0800c12c
 8009f34:	0800c130 	.word	0x0800c130

08009f38 <memset>:
 8009f38:	4402      	add	r2, r0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d100      	bne.n	8009f42 <memset+0xa>
 8009f40:	4770      	bx	lr
 8009f42:	f803 1b01 	strb.w	r1, [r3], #1
 8009f46:	e7f9      	b.n	8009f3c <memset+0x4>

08009f48 <iprintf>:
 8009f48:	b40f      	push	{r0, r1, r2, r3}
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <iprintf+0x2c>)
 8009f4c:	b513      	push	{r0, r1, r4, lr}
 8009f4e:	681c      	ldr	r4, [r3, #0]
 8009f50:	b124      	cbz	r4, 8009f5c <iprintf+0x14>
 8009f52:	69a3      	ldr	r3, [r4, #24]
 8009f54:	b913      	cbnz	r3, 8009f5c <iprintf+0x14>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 f91a 	bl	800a190 <__sinit>
 8009f5c:	ab05      	add	r3, sp, #20
 8009f5e:	9a04      	ldr	r2, [sp, #16]
 8009f60:	68a1      	ldr	r1, [r4, #8]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fd77 	bl	800aa58 <_vfiprintf_r>
 8009f6a:	b002      	add	sp, #8
 8009f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f70:	b004      	add	sp, #16
 8009f72:	4770      	bx	lr
 8009f74:	20000088 	.word	0x20000088

08009f78 <siscanf>:
 8009f78:	b40e      	push	{r1, r2, r3}
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	b09f      	sub	sp, #124	; 0x7c
 8009f7e:	ac21      	add	r4, sp, #132	; 0x84
 8009f80:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009f84:	f854 2b04 	ldr.w	r2, [r4], #4
 8009f88:	9201      	str	r2, [sp, #4]
 8009f8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009f8e:	9004      	str	r0, [sp, #16]
 8009f90:	9008      	str	r0, [sp, #32]
 8009f92:	f7f6 f92f 	bl	80001f4 <strlen>
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <siscanf+0x50>)
 8009f98:	9005      	str	r0, [sp, #20]
 8009f9a:	9009      	str	r0, [sp, #36]	; 0x24
 8009f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9e:	480b      	ldr	r0, [pc, #44]	; (8009fcc <siscanf+0x54>)
 8009fa0:	9a01      	ldr	r2, [sp, #4]
 8009fa2:	6800      	ldr	r0, [r0, #0]
 8009fa4:	9403      	str	r4, [sp, #12]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8009faa:	9316      	str	r3, [sp, #88]	; 0x58
 8009fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fb4:	a904      	add	r1, sp, #16
 8009fb6:	4623      	mov	r3, r4
 8009fb8:	f000 fbac 	bl	800a714 <__ssvfiscanf_r>
 8009fbc:	b01f      	add	sp, #124	; 0x7c
 8009fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fc2:	b003      	add	sp, #12
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	08009ff3 	.word	0x08009ff3
 8009fcc:	20000088 	.word	0x20000088

08009fd0 <__sread>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd8:	f001 f94e 	bl	800b278 <_read_r>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	bfab      	itete	ge
 8009fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fe4:	181b      	addge	r3, r3, r0
 8009fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fea:	bfac      	ite	ge
 8009fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fee:	81a3      	strhlt	r3, [r4, #12]
 8009ff0:	bd10      	pop	{r4, pc}

08009ff2 <__seofread>:
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	4770      	bx	lr

08009ff6 <__swrite>:
 8009ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	898b      	ldrh	r3, [r1, #12]
 8009ffe:	05db      	lsls	r3, r3, #23
 800a000:	4605      	mov	r5, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4616      	mov	r6, r2
 800a006:	d505      	bpl.n	800a014 <__swrite+0x1e>
 800a008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00c:	2302      	movs	r3, #2
 800a00e:	2200      	movs	r2, #0
 800a010:	f000 f95e 	bl	800a2d0 <_lseek_r>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	4628      	mov	r0, r5
 800a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	f000 b837 	b.w	800a09c <_write_r>

0800a02e <__sseek>:
 800a02e:	b510      	push	{r4, lr}
 800a030:	460c      	mov	r4, r1
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 f94b 	bl	800a2d0 <_lseek_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	bf15      	itete	ne
 800a040:	6560      	strne	r0, [r4, #84]	; 0x54
 800a042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a04a:	81a3      	strheq	r3, [r4, #12]
 800a04c:	bf18      	it	ne
 800a04e:	81a3      	strhne	r3, [r4, #12]
 800a050:	bd10      	pop	{r4, pc}

0800a052 <__sclose>:
 800a052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a056:	f000 b833 	b.w	800a0c0 <_close_r>
	...

0800a05c <_vsiprintf_r>:
 800a05c:	b500      	push	{lr}
 800a05e:	b09b      	sub	sp, #108	; 0x6c
 800a060:	9100      	str	r1, [sp, #0]
 800a062:	9104      	str	r1, [sp, #16]
 800a064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a068:	9105      	str	r1, [sp, #20]
 800a06a:	9102      	str	r1, [sp, #8]
 800a06c:	4905      	ldr	r1, [pc, #20]	; (800a084 <_vsiprintf_r+0x28>)
 800a06e:	9103      	str	r1, [sp, #12]
 800a070:	4669      	mov	r1, sp
 800a072:	f000 f9f5 	bl	800a460 <_svfiprintf_r>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	2200      	movs	r2, #0
 800a07a:	701a      	strb	r2, [r3, #0]
 800a07c:	b01b      	add	sp, #108	; 0x6c
 800a07e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a082:	bf00      	nop
 800a084:	ffff0208 	.word	0xffff0208

0800a088 <vsiprintf>:
 800a088:	4613      	mov	r3, r2
 800a08a:	460a      	mov	r2, r1
 800a08c:	4601      	mov	r1, r0
 800a08e:	4802      	ldr	r0, [pc, #8]	; (800a098 <vsiprintf+0x10>)
 800a090:	6800      	ldr	r0, [r0, #0]
 800a092:	f7ff bfe3 	b.w	800a05c <_vsiprintf_r>
 800a096:	bf00      	nop
 800a098:	20000088 	.word	0x20000088

0800a09c <_write_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	; (800a0bc <_write_r+0x20>)
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f7f7 fdf3 	bl	8001c96 <_write>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_write_r+0x1e>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_write_r+0x1e>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000a38 	.word	0x20000a38

0800a0c0 <_close_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	; (800a0dc <_close_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f7 fdff 	bl	8001cce <_close>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_close_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_close_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000a38 	.word	0x20000a38

0800a0e0 <std>:
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ee:	6083      	str	r3, [r0, #8]
 800a0f0:	8181      	strh	r1, [r0, #12]
 800a0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a0f4:	81c2      	strh	r2, [r0, #14]
 800a0f6:	6183      	str	r3, [r0, #24]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	2208      	movs	r2, #8
 800a0fc:	305c      	adds	r0, #92	; 0x5c
 800a0fe:	f7ff ff1b 	bl	8009f38 <memset>
 800a102:	4b05      	ldr	r3, [pc, #20]	; (800a118 <std+0x38>)
 800a104:	6263      	str	r3, [r4, #36]	; 0x24
 800a106:	4b05      	ldr	r3, [pc, #20]	; (800a11c <std+0x3c>)
 800a108:	62a3      	str	r3, [r4, #40]	; 0x28
 800a10a:	4b05      	ldr	r3, [pc, #20]	; (800a120 <std+0x40>)
 800a10c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a10e:	4b05      	ldr	r3, [pc, #20]	; (800a124 <std+0x44>)
 800a110:	6224      	str	r4, [r4, #32]
 800a112:	6323      	str	r3, [r4, #48]	; 0x30
 800a114:	bd10      	pop	{r4, pc}
 800a116:	bf00      	nop
 800a118:	08009fd1 	.word	0x08009fd1
 800a11c:	08009ff7 	.word	0x08009ff7
 800a120:	0800a02f 	.word	0x0800a02f
 800a124:	0800a053 	.word	0x0800a053

0800a128 <_cleanup_r>:
 800a128:	4901      	ldr	r1, [pc, #4]	; (800a130 <_cleanup_r+0x8>)
 800a12a:	f000 b8af 	b.w	800a28c <_fwalk_reent>
 800a12e:	bf00      	nop
 800a130:	0800b839 	.word	0x0800b839

0800a134 <__sfmoreglue>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	1e4a      	subs	r2, r1, #1
 800a138:	2568      	movs	r5, #104	; 0x68
 800a13a:	4355      	muls	r5, r2
 800a13c:	460e      	mov	r6, r1
 800a13e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a142:	f000 f8d7 	bl	800a2f4 <_malloc_r>
 800a146:	4604      	mov	r4, r0
 800a148:	b140      	cbz	r0, 800a15c <__sfmoreglue+0x28>
 800a14a:	2100      	movs	r1, #0
 800a14c:	e9c0 1600 	strd	r1, r6, [r0]
 800a150:	300c      	adds	r0, #12
 800a152:	60a0      	str	r0, [r4, #8]
 800a154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a158:	f7ff feee 	bl	8009f38 <memset>
 800a15c:	4620      	mov	r0, r4
 800a15e:	bd70      	pop	{r4, r5, r6, pc}

0800a160 <__sfp_lock_acquire>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__sfp_lock_acquire+0x8>)
 800a162:	f000 b8b3 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20000a34 	.word	0x20000a34

0800a16c <__sfp_lock_release>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__sfp_lock_release+0x8>)
 800a16e:	f000 b8ae 	b.w	800a2ce <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20000a34 	.word	0x20000a34

0800a178 <__sinit_lock_acquire>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__sinit_lock_acquire+0x8>)
 800a17a:	f000 b8a7 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800a17e:	bf00      	nop
 800a180:	20000a2f 	.word	0x20000a2f

0800a184 <__sinit_lock_release>:
 800a184:	4801      	ldr	r0, [pc, #4]	; (800a18c <__sinit_lock_release+0x8>)
 800a186:	f000 b8a2 	b.w	800a2ce <__retarget_lock_release_recursive>
 800a18a:	bf00      	nop
 800a18c:	20000a2f 	.word	0x20000a2f

0800a190 <__sinit>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4604      	mov	r4, r0
 800a194:	f7ff fff0 	bl	800a178 <__sinit_lock_acquire>
 800a198:	69a3      	ldr	r3, [r4, #24]
 800a19a:	b11b      	cbz	r3, 800a1a4 <__sinit+0x14>
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f7ff bff0 	b.w	800a184 <__sinit_lock_release>
 800a1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <__sinit+0x68>)
 800a1ac:	4a13      	ldr	r2, [pc, #76]	; (800a1fc <__sinit+0x6c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	bf04      	itt	eq
 800a1b6:	2301      	moveq	r3, #1
 800a1b8:	61a3      	streq	r3, [r4, #24]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 f820 	bl	800a200 <__sfp>
 800a1c0:	6060      	str	r0, [r4, #4]
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 f81c 	bl	800a200 <__sfp>
 800a1c8:	60a0      	str	r0, [r4, #8]
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 f818 	bl	800a200 <__sfp>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	60e0      	str	r0, [r4, #12]
 800a1d4:	2104      	movs	r1, #4
 800a1d6:	6860      	ldr	r0, [r4, #4]
 800a1d8:	f7ff ff82 	bl	800a0e0 <std>
 800a1dc:	68a0      	ldr	r0, [r4, #8]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	2109      	movs	r1, #9
 800a1e2:	f7ff ff7d 	bl	800a0e0 <std>
 800a1e6:	68e0      	ldr	r0, [r4, #12]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	2112      	movs	r1, #18
 800a1ec:	f7ff ff78 	bl	800a0e0 <std>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	61a3      	str	r3, [r4, #24]
 800a1f4:	e7d2      	b.n	800a19c <__sinit+0xc>
 800a1f6:	bf00      	nop
 800a1f8:	0800bf78 	.word	0x0800bf78
 800a1fc:	0800a129 	.word	0x0800a129

0800a200 <__sfp>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	4607      	mov	r7, r0
 800a204:	f7ff ffac 	bl	800a160 <__sfp_lock_acquire>
 800a208:	4b1e      	ldr	r3, [pc, #120]	; (800a284 <__sfp+0x84>)
 800a20a:	681e      	ldr	r6, [r3, #0]
 800a20c:	69b3      	ldr	r3, [r6, #24]
 800a20e:	b913      	cbnz	r3, 800a216 <__sfp+0x16>
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff ffbd 	bl	800a190 <__sinit>
 800a216:	3648      	adds	r6, #72	; 0x48
 800a218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	d503      	bpl.n	800a228 <__sfp+0x28>
 800a220:	6833      	ldr	r3, [r6, #0]
 800a222:	b30b      	cbz	r3, 800a268 <__sfp+0x68>
 800a224:	6836      	ldr	r6, [r6, #0]
 800a226:	e7f7      	b.n	800a218 <__sfp+0x18>
 800a228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a22c:	b9d5      	cbnz	r5, 800a264 <__sfp+0x64>
 800a22e:	4b16      	ldr	r3, [pc, #88]	; (800a288 <__sfp+0x88>)
 800a230:	60e3      	str	r3, [r4, #12]
 800a232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a236:	6665      	str	r5, [r4, #100]	; 0x64
 800a238:	f000 f847 	bl	800a2ca <__retarget_lock_init_recursive>
 800a23c:	f7ff ff96 	bl	800a16c <__sfp_lock_release>
 800a240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a248:	6025      	str	r5, [r4, #0]
 800a24a:	61a5      	str	r5, [r4, #24]
 800a24c:	2208      	movs	r2, #8
 800a24e:	4629      	mov	r1, r5
 800a250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a254:	f7ff fe70 	bl	8009f38 <memset>
 800a258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a25c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a260:	4620      	mov	r0, r4
 800a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a264:	3468      	adds	r4, #104	; 0x68
 800a266:	e7d9      	b.n	800a21c <__sfp+0x1c>
 800a268:	2104      	movs	r1, #4
 800a26a:	4638      	mov	r0, r7
 800a26c:	f7ff ff62 	bl	800a134 <__sfmoreglue>
 800a270:	4604      	mov	r4, r0
 800a272:	6030      	str	r0, [r6, #0]
 800a274:	2800      	cmp	r0, #0
 800a276:	d1d5      	bne.n	800a224 <__sfp+0x24>
 800a278:	f7ff ff78 	bl	800a16c <__sfp_lock_release>
 800a27c:	230c      	movs	r3, #12
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	e7ee      	b.n	800a260 <__sfp+0x60>
 800a282:	bf00      	nop
 800a284:	0800bf78 	.word	0x0800bf78
 800a288:	ffff0001 	.word	0xffff0001

0800a28c <_fwalk_reent>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	4606      	mov	r6, r0
 800a292:	4688      	mov	r8, r1
 800a294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a298:	2700      	movs	r7, #0
 800a29a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a29e:	f1b9 0901 	subs.w	r9, r9, #1
 800a2a2:	d505      	bpl.n	800a2b0 <_fwalk_reent+0x24>
 800a2a4:	6824      	ldr	r4, [r4, #0]
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	d1f7      	bne.n	800a29a <_fwalk_reent+0xe>
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b0:	89ab      	ldrh	r3, [r5, #12]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d907      	bls.n	800a2c6 <_fwalk_reent+0x3a>
 800a2b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	d003      	beq.n	800a2c6 <_fwalk_reent+0x3a>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	47c0      	blx	r8
 800a2c4:	4307      	orrs	r7, r0
 800a2c6:	3568      	adds	r5, #104	; 0x68
 800a2c8:	e7e9      	b.n	800a29e <_fwalk_reent+0x12>

0800a2ca <__retarget_lock_init_recursive>:
 800a2ca:	4770      	bx	lr

0800a2cc <__retarget_lock_acquire_recursive>:
 800a2cc:	4770      	bx	lr

0800a2ce <__retarget_lock_release_recursive>:
 800a2ce:	4770      	bx	lr

0800a2d0 <_lseek_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	; (800a2f0 <_lseek_r+0x20>)
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	4611      	mov	r1, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	602a      	str	r2, [r5, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f7f7 fd1c 	bl	8001d1c <_lseek>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_lseek_r+0x1e>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_lseek_r+0x1e>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20000a38 	.word	0x20000a38

0800a2f4 <_malloc_r>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	1ccd      	adds	r5, r1, #3
 800a2f8:	f025 0503 	bic.w	r5, r5, #3
 800a2fc:	3508      	adds	r5, #8
 800a2fe:	2d0c      	cmp	r5, #12
 800a300:	bf38      	it	cc
 800a302:	250c      	movcc	r5, #12
 800a304:	2d00      	cmp	r5, #0
 800a306:	4606      	mov	r6, r0
 800a308:	db01      	blt.n	800a30e <_malloc_r+0x1a>
 800a30a:	42a9      	cmp	r1, r5
 800a30c:	d903      	bls.n	800a316 <_malloc_r+0x22>
 800a30e:	230c      	movs	r3, #12
 800a310:	6033      	str	r3, [r6, #0]
 800a312:	2000      	movs	r0, #0
 800a314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a316:	f001 fb57 	bl	800b9c8 <__malloc_lock>
 800a31a:	4921      	ldr	r1, [pc, #132]	; (800a3a0 <_malloc_r+0xac>)
 800a31c:	680a      	ldr	r2, [r1, #0]
 800a31e:	4614      	mov	r4, r2
 800a320:	b99c      	cbnz	r4, 800a34a <_malloc_r+0x56>
 800a322:	4f20      	ldr	r7, [pc, #128]	; (800a3a4 <_malloc_r+0xb0>)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	b923      	cbnz	r3, 800a332 <_malloc_r+0x3e>
 800a328:	4621      	mov	r1, r4
 800a32a:	4630      	mov	r0, r6
 800a32c:	f000 ffb6 	bl	800b29c <_sbrk_r>
 800a330:	6038      	str	r0, [r7, #0]
 800a332:	4629      	mov	r1, r5
 800a334:	4630      	mov	r0, r6
 800a336:	f000 ffb1 	bl	800b29c <_sbrk_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d123      	bne.n	800a386 <_malloc_r+0x92>
 800a33e:	230c      	movs	r3, #12
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	4630      	mov	r0, r6
 800a344:	f001 fb46 	bl	800b9d4 <__malloc_unlock>
 800a348:	e7e3      	b.n	800a312 <_malloc_r+0x1e>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	1b5b      	subs	r3, r3, r5
 800a34e:	d417      	bmi.n	800a380 <_malloc_r+0x8c>
 800a350:	2b0b      	cmp	r3, #11
 800a352:	d903      	bls.n	800a35c <_malloc_r+0x68>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	441c      	add	r4, r3
 800a358:	6025      	str	r5, [r4, #0]
 800a35a:	e004      	b.n	800a366 <_malloc_r+0x72>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	42a2      	cmp	r2, r4
 800a360:	bf0c      	ite	eq
 800a362:	600b      	streq	r3, [r1, #0]
 800a364:	6053      	strne	r3, [r2, #4]
 800a366:	4630      	mov	r0, r6
 800a368:	f001 fb34 	bl	800b9d4 <__malloc_unlock>
 800a36c:	f104 000b 	add.w	r0, r4, #11
 800a370:	1d23      	adds	r3, r4, #4
 800a372:	f020 0007 	bic.w	r0, r0, #7
 800a376:	1ac2      	subs	r2, r0, r3
 800a378:	d0cc      	beq.n	800a314 <_malloc_r+0x20>
 800a37a:	1a1b      	subs	r3, r3, r0
 800a37c:	50a3      	str	r3, [r4, r2]
 800a37e:	e7c9      	b.n	800a314 <_malloc_r+0x20>
 800a380:	4622      	mov	r2, r4
 800a382:	6864      	ldr	r4, [r4, #4]
 800a384:	e7cc      	b.n	800a320 <_malloc_r+0x2c>
 800a386:	1cc4      	adds	r4, r0, #3
 800a388:	f024 0403 	bic.w	r4, r4, #3
 800a38c:	42a0      	cmp	r0, r4
 800a38e:	d0e3      	beq.n	800a358 <_malloc_r+0x64>
 800a390:	1a21      	subs	r1, r4, r0
 800a392:	4630      	mov	r0, r6
 800a394:	f000 ff82 	bl	800b29c <_sbrk_r>
 800a398:	3001      	adds	r0, #1
 800a39a:	d1dd      	bne.n	800a358 <_malloc_r+0x64>
 800a39c:	e7cf      	b.n	800a33e <_malloc_r+0x4a>
 800a39e:	bf00      	nop
 800a3a0:	20000160 	.word	0x20000160
 800a3a4:	20000164 	.word	0x20000164

0800a3a8 <__ssputs_r>:
 800a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ac:	688e      	ldr	r6, [r1, #8]
 800a3ae:	429e      	cmp	r6, r3
 800a3b0:	4682      	mov	sl, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	4690      	mov	r8, r2
 800a3b6:	461f      	mov	r7, r3
 800a3b8:	d838      	bhi.n	800a42c <__ssputs_r+0x84>
 800a3ba:	898a      	ldrh	r2, [r1, #12]
 800a3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3c0:	d032      	beq.n	800a428 <__ssputs_r+0x80>
 800a3c2:	6825      	ldr	r5, [r4, #0]
 800a3c4:	6909      	ldr	r1, [r1, #16]
 800a3c6:	eba5 0901 	sub.w	r9, r5, r1
 800a3ca:	6965      	ldr	r5, [r4, #20]
 800a3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	444b      	add	r3, r9
 800a3d8:	106d      	asrs	r5, r5, #1
 800a3da:	429d      	cmp	r5, r3
 800a3dc:	bf38      	it	cc
 800a3de:	461d      	movcc	r5, r3
 800a3e0:	0553      	lsls	r3, r2, #21
 800a3e2:	d531      	bpl.n	800a448 <__ssputs_r+0xa0>
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7ff ff85 	bl	800a2f4 <_malloc_r>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	b950      	cbnz	r0, 800a404 <__ssputs_r+0x5c>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	f8ca 3000 	str.w	r3, [sl]
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a404:	6921      	ldr	r1, [r4, #16]
 800a406:	464a      	mov	r2, r9
 800a408:	f001 fab6 	bl	800b978 <memcpy>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	6126      	str	r6, [r4, #16]
 800a41a:	6165      	str	r5, [r4, #20]
 800a41c:	444e      	add	r6, r9
 800a41e:	eba5 0509 	sub.w	r5, r5, r9
 800a422:	6026      	str	r6, [r4, #0]
 800a424:	60a5      	str	r5, [r4, #8]
 800a426:	463e      	mov	r6, r7
 800a428:	42be      	cmp	r6, r7
 800a42a:	d900      	bls.n	800a42e <__ssputs_r+0x86>
 800a42c:	463e      	mov	r6, r7
 800a42e:	4632      	mov	r2, r6
 800a430:	6820      	ldr	r0, [r4, #0]
 800a432:	4641      	mov	r1, r8
 800a434:	f001 faae 	bl	800b994 <memmove>
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	1b9b      	subs	r3, r3, r6
 800a43e:	4432      	add	r2, r6
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	2000      	movs	r0, #0
 800a446:	e7db      	b.n	800a400 <__ssputs_r+0x58>
 800a448:	462a      	mov	r2, r5
 800a44a:	f001 fb19 	bl	800ba80 <_realloc_r>
 800a44e:	4606      	mov	r6, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	d1e1      	bne.n	800a418 <__ssputs_r+0x70>
 800a454:	6921      	ldr	r1, [r4, #16]
 800a456:	4650      	mov	r0, sl
 800a458:	f001 fac2 	bl	800b9e0 <_free_r>
 800a45c:	e7c7      	b.n	800a3ee <__ssputs_r+0x46>
	...

0800a460 <_svfiprintf_r>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	4698      	mov	r8, r3
 800a466:	898b      	ldrh	r3, [r1, #12]
 800a468:	061b      	lsls	r3, r3, #24
 800a46a:	b09d      	sub	sp, #116	; 0x74
 800a46c:	4607      	mov	r7, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	4614      	mov	r4, r2
 800a472:	d50e      	bpl.n	800a492 <_svfiprintf_r+0x32>
 800a474:	690b      	ldr	r3, [r1, #16]
 800a476:	b963      	cbnz	r3, 800a492 <_svfiprintf_r+0x32>
 800a478:	2140      	movs	r1, #64	; 0x40
 800a47a:	f7ff ff3b 	bl	800a2f4 <_malloc_r>
 800a47e:	6028      	str	r0, [r5, #0]
 800a480:	6128      	str	r0, [r5, #16]
 800a482:	b920      	cbnz	r0, 800a48e <_svfiprintf_r+0x2e>
 800a484:	230c      	movs	r3, #12
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	e0d1      	b.n	800a632 <_svfiprintf_r+0x1d2>
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	616b      	str	r3, [r5, #20]
 800a492:	2300      	movs	r3, #0
 800a494:	9309      	str	r3, [sp, #36]	; 0x24
 800a496:	2320      	movs	r3, #32
 800a498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a0:	2330      	movs	r3, #48	; 0x30
 800a4a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a64c <_svfiprintf_r+0x1ec>
 800a4a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4aa:	f04f 0901 	mov.w	r9, #1
 800a4ae:	4623      	mov	r3, r4
 800a4b0:	469a      	mov	sl, r3
 800a4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b6:	b10a      	cbz	r2, 800a4bc <_svfiprintf_r+0x5c>
 800a4b8:	2a25      	cmp	r2, #37	; 0x25
 800a4ba:	d1f9      	bne.n	800a4b0 <_svfiprintf_r+0x50>
 800a4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c0:	d00b      	beq.n	800a4da <_svfiprintf_r+0x7a>
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ff6d 	bl	800a3a8 <__ssputs_r>
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f000 80aa 	beq.w	800a628 <_svfiprintf_r+0x1c8>
 800a4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d6:	445a      	add	r2, fp
 800a4d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4da:	f89a 3000 	ldrb.w	r3, [sl]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80a2 	beq.w	800a628 <_svfiprintf_r+0x1c8>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ee:	f10a 0a01 	add.w	sl, sl, #1
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	9307      	str	r3, [sp, #28]
 800a4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a4fc:	4654      	mov	r4, sl
 800a4fe:	2205      	movs	r2, #5
 800a500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a504:	4851      	ldr	r0, [pc, #324]	; (800a64c <_svfiprintf_r+0x1ec>)
 800a506:	f7f5 fe83 	bl	8000210 <memchr>
 800a50a:	9a04      	ldr	r2, [sp, #16]
 800a50c:	b9d8      	cbnz	r0, 800a546 <_svfiprintf_r+0xe6>
 800a50e:	06d0      	lsls	r0, r2, #27
 800a510:	bf44      	itt	mi
 800a512:	2320      	movmi	r3, #32
 800a514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a518:	0711      	lsls	r1, r2, #28
 800a51a:	bf44      	itt	mi
 800a51c:	232b      	movmi	r3, #43	; 0x2b
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a522:	f89a 3000 	ldrb.w	r3, [sl]
 800a526:	2b2a      	cmp	r3, #42	; 0x2a
 800a528:	d015      	beq.n	800a556 <_svfiprintf_r+0xf6>
 800a52a:	9a07      	ldr	r2, [sp, #28]
 800a52c:	4654      	mov	r4, sl
 800a52e:	2000      	movs	r0, #0
 800a530:	f04f 0c0a 	mov.w	ip, #10
 800a534:	4621      	mov	r1, r4
 800a536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a53a:	3b30      	subs	r3, #48	; 0x30
 800a53c:	2b09      	cmp	r3, #9
 800a53e:	d94e      	bls.n	800a5de <_svfiprintf_r+0x17e>
 800a540:	b1b0      	cbz	r0, 800a570 <_svfiprintf_r+0x110>
 800a542:	9207      	str	r2, [sp, #28]
 800a544:	e014      	b.n	800a570 <_svfiprintf_r+0x110>
 800a546:	eba0 0308 	sub.w	r3, r0, r8
 800a54a:	fa09 f303 	lsl.w	r3, r9, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	46a2      	mov	sl, r4
 800a554:	e7d2      	b.n	800a4fc <_svfiprintf_r+0x9c>
 800a556:	9b03      	ldr	r3, [sp, #12]
 800a558:	1d19      	adds	r1, r3, #4
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	9103      	str	r1, [sp, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfbb      	ittet	lt
 800a562:	425b      	neglt	r3, r3
 800a564:	f042 0202 	orrlt.w	r2, r2, #2
 800a568:	9307      	strge	r3, [sp, #28]
 800a56a:	9307      	strlt	r3, [sp, #28]
 800a56c:	bfb8      	it	lt
 800a56e:	9204      	strlt	r2, [sp, #16]
 800a570:	7823      	ldrb	r3, [r4, #0]
 800a572:	2b2e      	cmp	r3, #46	; 0x2e
 800a574:	d10c      	bne.n	800a590 <_svfiprintf_r+0x130>
 800a576:	7863      	ldrb	r3, [r4, #1]
 800a578:	2b2a      	cmp	r3, #42	; 0x2a
 800a57a:	d135      	bne.n	800a5e8 <_svfiprintf_r+0x188>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	9203      	str	r2, [sp, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfb8      	it	lt
 800a588:	f04f 33ff 	movlt.w	r3, #4294967295
 800a58c:	3402      	adds	r4, #2
 800a58e:	9305      	str	r3, [sp, #20]
 800a590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a65c <_svfiprintf_r+0x1fc>
 800a594:	7821      	ldrb	r1, [r4, #0]
 800a596:	2203      	movs	r2, #3
 800a598:	4650      	mov	r0, sl
 800a59a:	f7f5 fe39 	bl	8000210 <memchr>
 800a59e:	b140      	cbz	r0, 800a5b2 <_svfiprintf_r+0x152>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	eba0 000a 	sub.w	r0, r0, sl
 800a5a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	4303      	orrs	r3, r0
 800a5ae:	3401      	adds	r4, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b6:	4826      	ldr	r0, [pc, #152]	; (800a650 <_svfiprintf_r+0x1f0>)
 800a5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5bc:	2206      	movs	r2, #6
 800a5be:	f7f5 fe27 	bl	8000210 <memchr>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d038      	beq.n	800a638 <_svfiprintf_r+0x1d8>
 800a5c6:	4b23      	ldr	r3, [pc, #140]	; (800a654 <_svfiprintf_r+0x1f4>)
 800a5c8:	bb1b      	cbnz	r3, 800a612 <_svfiprintf_r+0x1b2>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	3307      	adds	r3, #7
 800a5ce:	f023 0307 	bic.w	r3, r3, #7
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d8:	4433      	add	r3, r6
 800a5da:	9309      	str	r3, [sp, #36]	; 0x24
 800a5dc:	e767      	b.n	800a4ae <_svfiprintf_r+0x4e>
 800a5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	e7a5      	b.n	800a534 <_svfiprintf_r+0xd4>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	9305      	str	r3, [sp, #20]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	f04f 0c0a 	mov.w	ip, #10
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fa:	3a30      	subs	r2, #48	; 0x30
 800a5fc:	2a09      	cmp	r2, #9
 800a5fe:	d903      	bls.n	800a608 <_svfiprintf_r+0x1a8>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0c5      	beq.n	800a590 <_svfiprintf_r+0x130>
 800a604:	9105      	str	r1, [sp, #20]
 800a606:	e7c3      	b.n	800a590 <_svfiprintf_r+0x130>
 800a608:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60c:	4604      	mov	r4, r0
 800a60e:	2301      	movs	r3, #1
 800a610:	e7f0      	b.n	800a5f4 <_svfiprintf_r+0x194>
 800a612:	ab03      	add	r3, sp, #12
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	462a      	mov	r2, r5
 800a618:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <_svfiprintf_r+0x1f8>)
 800a61a:	a904      	add	r1, sp, #16
 800a61c:	4638      	mov	r0, r7
 800a61e:	f3af 8000 	nop.w
 800a622:	1c42      	adds	r2, r0, #1
 800a624:	4606      	mov	r6, r0
 800a626:	d1d6      	bne.n	800a5d6 <_svfiprintf_r+0x176>
 800a628:	89ab      	ldrh	r3, [r5, #12]
 800a62a:	065b      	lsls	r3, r3, #25
 800a62c:	f53f af2c 	bmi.w	800a488 <_svfiprintf_r+0x28>
 800a630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a632:	b01d      	add	sp, #116	; 0x74
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a638:	ab03      	add	r3, sp, #12
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	462a      	mov	r2, r5
 800a63e:	4b06      	ldr	r3, [pc, #24]	; (800a658 <_svfiprintf_r+0x1f8>)
 800a640:	a904      	add	r1, sp, #16
 800a642:	4638      	mov	r0, r7
 800a644:	f000 fba6 	bl	800ad94 <_printf_i>
 800a648:	e7eb      	b.n	800a622 <_svfiprintf_r+0x1c2>
 800a64a:	bf00      	nop
 800a64c:	0800bfdc 	.word	0x0800bfdc
 800a650:	0800bfe6 	.word	0x0800bfe6
 800a654:	00000000 	.word	0x00000000
 800a658:	0800a3a9 	.word	0x0800a3a9
 800a65c:	0800bfe2 	.word	0x0800bfe2

0800a660 <_sungetc_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	1c4b      	adds	r3, r1, #1
 800a664:	4614      	mov	r4, r2
 800a666:	d103      	bne.n	800a670 <_sungetc_r+0x10>
 800a668:	f04f 35ff 	mov.w	r5, #4294967295
 800a66c:	4628      	mov	r0, r5
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	8993      	ldrh	r3, [r2, #12]
 800a672:	f023 0320 	bic.w	r3, r3, #32
 800a676:	8193      	strh	r3, [r2, #12]
 800a678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a67a:	6852      	ldr	r2, [r2, #4]
 800a67c:	b2cd      	uxtb	r5, r1
 800a67e:	b18b      	cbz	r3, 800a6a4 <_sungetc_r+0x44>
 800a680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a682:	4293      	cmp	r3, r2
 800a684:	dd08      	ble.n	800a698 <_sungetc_r+0x38>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	1e5a      	subs	r2, r3, #1
 800a68a:	6022      	str	r2, [r4, #0]
 800a68c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a690:	6863      	ldr	r3, [r4, #4]
 800a692:	3301      	adds	r3, #1
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	e7e9      	b.n	800a66c <_sungetc_r+0xc>
 800a698:	4621      	mov	r1, r4
 800a69a:	f000 ff4d 	bl	800b538 <__submore>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d0f1      	beq.n	800a686 <_sungetc_r+0x26>
 800a6a2:	e7e1      	b.n	800a668 <_sungetc_r+0x8>
 800a6a4:	6921      	ldr	r1, [r4, #16]
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	b151      	cbz	r1, 800a6c0 <_sungetc_r+0x60>
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d208      	bcs.n	800a6c0 <_sungetc_r+0x60>
 800a6ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a6b2:	42a9      	cmp	r1, r5
 800a6b4:	d104      	bne.n	800a6c0 <_sungetc_r+0x60>
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	6062      	str	r2, [r4, #4]
 800a6be:	e7d5      	b.n	800a66c <_sungetc_r+0xc>
 800a6c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6ce:	4623      	mov	r3, r4
 800a6d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e7dc      	b.n	800a694 <_sungetc_r+0x34>

0800a6da <__ssrefill_r>:
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	460c      	mov	r4, r1
 800a6de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a6e0:	b169      	cbz	r1, 800a6fe <__ssrefill_r+0x24>
 800a6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	d001      	beq.n	800a6ee <__ssrefill_r+0x14>
 800a6ea:	f001 f979 	bl	800b9e0 <_free_r>
 800a6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6f0:	6063      	str	r3, [r4, #4]
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f6:	b113      	cbz	r3, 800a6fe <__ssrefill_r+0x24>
 800a6f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	2300      	movs	r3, #0
 800a704:	6063      	str	r3, [r4, #4]
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	f043 0320 	orr.w	r3, r3, #32
 800a70c:	81a3      	strh	r3, [r4, #12]
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	e7f3      	b.n	800a6fc <__ssrefill_r+0x22>

0800a714 <__ssvfiscanf_r>:
 800a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a718:	460c      	mov	r4, r1
 800a71a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a71e:	2100      	movs	r1, #0
 800a720:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a724:	49b2      	ldr	r1, [pc, #712]	; (800a9f0 <__ssvfiscanf_r+0x2dc>)
 800a726:	91a0      	str	r1, [sp, #640]	; 0x280
 800a728:	f10d 0804 	add.w	r8, sp, #4
 800a72c:	49b1      	ldr	r1, [pc, #708]	; (800a9f4 <__ssvfiscanf_r+0x2e0>)
 800a72e:	4fb2      	ldr	r7, [pc, #712]	; (800a9f8 <__ssvfiscanf_r+0x2e4>)
 800a730:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a9fc <__ssvfiscanf_r+0x2e8>
 800a734:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a738:	4606      	mov	r6, r0
 800a73a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	f892 a000 	ldrb.w	sl, [r2]
 800a742:	f1ba 0f00 	cmp.w	sl, #0
 800a746:	f000 8151 	beq.w	800a9ec <__ssvfiscanf_r+0x2d8>
 800a74a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a74e:	f013 0308 	ands.w	r3, r3, #8
 800a752:	f102 0501 	add.w	r5, r2, #1
 800a756:	d019      	beq.n	800a78c <__ssvfiscanf_r+0x78>
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dd0f      	ble.n	800a77e <__ssvfiscanf_r+0x6a>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	781a      	ldrb	r2, [r3, #0]
 800a762:	5cba      	ldrb	r2, [r7, r2]
 800a764:	0712      	lsls	r2, r2, #28
 800a766:	d401      	bmi.n	800a76c <__ssvfiscanf_r+0x58>
 800a768:	462a      	mov	r2, r5
 800a76a:	e7e8      	b.n	800a73e <__ssvfiscanf_r+0x2a>
 800a76c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a76e:	3201      	adds	r2, #1
 800a770:	9245      	str	r2, [sp, #276]	; 0x114
 800a772:	6862      	ldr	r2, [r4, #4]
 800a774:	3301      	adds	r3, #1
 800a776:	3a01      	subs	r2, #1
 800a778:	6062      	str	r2, [r4, #4]
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	e7ec      	b.n	800a758 <__ssvfiscanf_r+0x44>
 800a77e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a780:	4621      	mov	r1, r4
 800a782:	4630      	mov	r0, r6
 800a784:	4798      	blx	r3
 800a786:	2800      	cmp	r0, #0
 800a788:	d0e9      	beq.n	800a75e <__ssvfiscanf_r+0x4a>
 800a78a:	e7ed      	b.n	800a768 <__ssvfiscanf_r+0x54>
 800a78c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a790:	f040 8083 	bne.w	800a89a <__ssvfiscanf_r+0x186>
 800a794:	9341      	str	r3, [sp, #260]	; 0x104
 800a796:	9343      	str	r3, [sp, #268]	; 0x10c
 800a798:	7853      	ldrb	r3, [r2, #1]
 800a79a:	2b2a      	cmp	r3, #42	; 0x2a
 800a79c:	bf02      	ittt	eq
 800a79e:	2310      	moveq	r3, #16
 800a7a0:	1c95      	addeq	r5, r2, #2
 800a7a2:	9341      	streq	r3, [sp, #260]	; 0x104
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	46ab      	mov	fp, r5
 800a7a8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a7ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a7b0:	2b09      	cmp	r3, #9
 800a7b2:	d91d      	bls.n	800a7f0 <__ssvfiscanf_r+0xdc>
 800a7b4:	4891      	ldr	r0, [pc, #580]	; (800a9fc <__ssvfiscanf_r+0x2e8>)
 800a7b6:	2203      	movs	r2, #3
 800a7b8:	f7f5 fd2a 	bl	8000210 <memchr>
 800a7bc:	b140      	cbz	r0, 800a7d0 <__ssvfiscanf_r+0xbc>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	eba0 0009 	sub.w	r0, r0, r9
 800a7c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a7c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7ca:	4318      	orrs	r0, r3
 800a7cc:	9041      	str	r0, [sp, #260]	; 0x104
 800a7ce:	465d      	mov	r5, fp
 800a7d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a7d4:	2b78      	cmp	r3, #120	; 0x78
 800a7d6:	d806      	bhi.n	800a7e6 <__ssvfiscanf_r+0xd2>
 800a7d8:	2b57      	cmp	r3, #87	; 0x57
 800a7da:	d810      	bhi.n	800a7fe <__ssvfiscanf_r+0xea>
 800a7dc:	2b25      	cmp	r3, #37	; 0x25
 800a7de:	d05c      	beq.n	800a89a <__ssvfiscanf_r+0x186>
 800a7e0:	d856      	bhi.n	800a890 <__ssvfiscanf_r+0x17c>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d074      	beq.n	800a8d0 <__ssvfiscanf_r+0x1bc>
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	9347      	str	r3, [sp, #284]	; 0x11c
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	9342      	str	r3, [sp, #264]	; 0x108
 800a7ee:	e081      	b.n	800a8f4 <__ssvfiscanf_r+0x1e0>
 800a7f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a7f2:	fb02 1303 	mla	r3, r2, r3, r1
 800a7f6:	3b30      	subs	r3, #48	; 0x30
 800a7f8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7fa:	465d      	mov	r5, fp
 800a7fc:	e7d3      	b.n	800a7a6 <__ssvfiscanf_r+0x92>
 800a7fe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a802:	2a20      	cmp	r2, #32
 800a804:	d8ef      	bhi.n	800a7e6 <__ssvfiscanf_r+0xd2>
 800a806:	a101      	add	r1, pc, #4	; (adr r1, 800a80c <__ssvfiscanf_r+0xf8>)
 800a808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a80c:	0800a8df 	.word	0x0800a8df
 800a810:	0800a7e7 	.word	0x0800a7e7
 800a814:	0800a7e7 	.word	0x0800a7e7
 800a818:	0800a93d 	.word	0x0800a93d
 800a81c:	0800a7e7 	.word	0x0800a7e7
 800a820:	0800a7e7 	.word	0x0800a7e7
 800a824:	0800a7e7 	.word	0x0800a7e7
 800a828:	0800a7e7 	.word	0x0800a7e7
 800a82c:	0800a7e7 	.word	0x0800a7e7
 800a830:	0800a7e7 	.word	0x0800a7e7
 800a834:	0800a7e7 	.word	0x0800a7e7
 800a838:	0800a953 	.word	0x0800a953
 800a83c:	0800a929 	.word	0x0800a929
 800a840:	0800a897 	.word	0x0800a897
 800a844:	0800a897 	.word	0x0800a897
 800a848:	0800a897 	.word	0x0800a897
 800a84c:	0800a7e7 	.word	0x0800a7e7
 800a850:	0800a92d 	.word	0x0800a92d
 800a854:	0800a7e7 	.word	0x0800a7e7
 800a858:	0800a7e7 	.word	0x0800a7e7
 800a85c:	0800a7e7 	.word	0x0800a7e7
 800a860:	0800a7e7 	.word	0x0800a7e7
 800a864:	0800a963 	.word	0x0800a963
 800a868:	0800a935 	.word	0x0800a935
 800a86c:	0800a8d7 	.word	0x0800a8d7
 800a870:	0800a7e7 	.word	0x0800a7e7
 800a874:	0800a7e7 	.word	0x0800a7e7
 800a878:	0800a95f 	.word	0x0800a95f
 800a87c:	0800a7e7 	.word	0x0800a7e7
 800a880:	0800a929 	.word	0x0800a929
 800a884:	0800a7e7 	.word	0x0800a7e7
 800a888:	0800a7e7 	.word	0x0800a7e7
 800a88c:	0800a8df 	.word	0x0800a8df
 800a890:	3b45      	subs	r3, #69	; 0x45
 800a892:	2b02      	cmp	r3, #2
 800a894:	d8a7      	bhi.n	800a7e6 <__ssvfiscanf_r+0xd2>
 800a896:	2305      	movs	r3, #5
 800a898:	e02b      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dd0d      	ble.n	800a8bc <__ssvfiscanf_r+0x1a8>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	4552      	cmp	r2, sl
 800a8a6:	f040 80a1 	bne.w	800a9ec <__ssvfiscanf_r+0x2d8>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	6862      	ldr	r2, [r4, #4]
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	6062      	str	r2, [r4, #4]
 800a8b8:	9345      	str	r3, [sp, #276]	; 0x114
 800a8ba:	e755      	b.n	800a768 <__ssvfiscanf_r+0x54>
 800a8bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4798      	blx	r3
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d0eb      	beq.n	800a8a0 <__ssvfiscanf_r+0x18c>
 800a8c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f040 8084 	bne.w	800a9d8 <__ssvfiscanf_r+0x2c4>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e086      	b.n	800a9e4 <__ssvfiscanf_r+0x2d0>
 800a8d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a8d8:	f042 0220 	orr.w	r2, r2, #32
 800a8dc:	9241      	str	r2, [sp, #260]	; 0x104
 800a8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8e4:	9241      	str	r2, [sp, #260]	; 0x104
 800a8e6:	2210      	movs	r2, #16
 800a8e8:	2b6f      	cmp	r3, #111	; 0x6f
 800a8ea:	9242      	str	r2, [sp, #264]	; 0x108
 800a8ec:	bf34      	ite	cc
 800a8ee:	2303      	movcc	r3, #3
 800a8f0:	2304      	movcs	r3, #4
 800a8f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a8f4:	6863      	ldr	r3, [r4, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dd41      	ble.n	800a97e <__ssvfiscanf_r+0x26a>
 800a8fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a8fc:	0659      	lsls	r1, r3, #25
 800a8fe:	d404      	bmi.n	800a90a <__ssvfiscanf_r+0x1f6>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	781a      	ldrb	r2, [r3, #0]
 800a904:	5cba      	ldrb	r2, [r7, r2]
 800a906:	0712      	lsls	r2, r2, #28
 800a908:	d440      	bmi.n	800a98c <__ssvfiscanf_r+0x278>
 800a90a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	dc4f      	bgt.n	800a9b0 <__ssvfiscanf_r+0x29c>
 800a910:	466b      	mov	r3, sp
 800a912:	4622      	mov	r2, r4
 800a914:	a941      	add	r1, sp, #260	; 0x104
 800a916:	4630      	mov	r0, r6
 800a918:	f000 fb62 	bl	800afe0 <_scanf_chars>
 800a91c:	2801      	cmp	r0, #1
 800a91e:	d065      	beq.n	800a9ec <__ssvfiscanf_r+0x2d8>
 800a920:	2802      	cmp	r0, #2
 800a922:	f47f af21 	bne.w	800a768 <__ssvfiscanf_r+0x54>
 800a926:	e7cf      	b.n	800a8c8 <__ssvfiscanf_r+0x1b4>
 800a928:	220a      	movs	r2, #10
 800a92a:	e7dd      	b.n	800a8e8 <__ssvfiscanf_r+0x1d4>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9342      	str	r3, [sp, #264]	; 0x108
 800a930:	2303      	movs	r3, #3
 800a932:	e7de      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a934:	2308      	movs	r3, #8
 800a936:	9342      	str	r3, [sp, #264]	; 0x108
 800a938:	2304      	movs	r3, #4
 800a93a:	e7da      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a93c:	4629      	mov	r1, r5
 800a93e:	4640      	mov	r0, r8
 800a940:	f000 fcbc 	bl	800b2bc <__sccl>
 800a944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94a:	9341      	str	r3, [sp, #260]	; 0x104
 800a94c:	4605      	mov	r5, r0
 800a94e:	2301      	movs	r3, #1
 800a950:	e7cf      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a958:	9341      	str	r3, [sp, #260]	; 0x104
 800a95a:	2300      	movs	r3, #0
 800a95c:	e7c9      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a95e:	2302      	movs	r3, #2
 800a960:	e7c7      	b.n	800a8f2 <__ssvfiscanf_r+0x1de>
 800a962:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a964:	06c3      	lsls	r3, r0, #27
 800a966:	f53f aeff 	bmi.w	800a768 <__ssvfiscanf_r+0x54>
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a96e:	1d19      	adds	r1, r3, #4
 800a970:	9100      	str	r1, [sp, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	07c0      	lsls	r0, r0, #31
 800a976:	bf4c      	ite	mi
 800a978:	801a      	strhmi	r2, [r3, #0]
 800a97a:	601a      	strpl	r2, [r3, #0]
 800a97c:	e6f4      	b.n	800a768 <__ssvfiscanf_r+0x54>
 800a97e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a980:	4621      	mov	r1, r4
 800a982:	4630      	mov	r0, r6
 800a984:	4798      	blx	r3
 800a986:	2800      	cmp	r0, #0
 800a988:	d0b7      	beq.n	800a8fa <__ssvfiscanf_r+0x1e6>
 800a98a:	e79d      	b.n	800a8c8 <__ssvfiscanf_r+0x1b4>
 800a98c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a98e:	3201      	adds	r2, #1
 800a990:	9245      	str	r2, [sp, #276]	; 0x114
 800a992:	6862      	ldr	r2, [r4, #4]
 800a994:	3a01      	subs	r2, #1
 800a996:	2a00      	cmp	r2, #0
 800a998:	6062      	str	r2, [r4, #4]
 800a99a:	dd02      	ble.n	800a9a2 <__ssvfiscanf_r+0x28e>
 800a99c:	3301      	adds	r3, #1
 800a99e:	6023      	str	r3, [r4, #0]
 800a9a0:	e7ae      	b.n	800a900 <__ssvfiscanf_r+0x1ec>
 800a9a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4798      	blx	r3
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d0a8      	beq.n	800a900 <__ssvfiscanf_r+0x1ec>
 800a9ae:	e78b      	b.n	800a8c8 <__ssvfiscanf_r+0x1b4>
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	dc06      	bgt.n	800a9c2 <__ssvfiscanf_r+0x2ae>
 800a9b4:	466b      	mov	r3, sp
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	a941      	add	r1, sp, #260	; 0x104
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 fb68 	bl	800b090 <_scanf_i>
 800a9c0:	e7ac      	b.n	800a91c <__ssvfiscanf_r+0x208>
 800a9c2:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <__ssvfiscanf_r+0x2ec>)
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f43f aecf 	beq.w	800a768 <__ssvfiscanf_r+0x54>
 800a9ca:	466b      	mov	r3, sp
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	a941      	add	r1, sp, #260	; 0x104
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f3af 8000 	nop.w
 800a9d6:	e7a1      	b.n	800a91c <__ssvfiscanf_r+0x208>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a9de:	bf18      	it	ne
 800a9e0:	f04f 30ff 	movne.w	r0, #4294967295
 800a9e4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a9ee:	e7f9      	b.n	800a9e4 <__ssvfiscanf_r+0x2d0>
 800a9f0:	0800a661 	.word	0x0800a661
 800a9f4:	0800a6db 	.word	0x0800a6db
 800a9f8:	0800c02b 	.word	0x0800c02b
 800a9fc:	0800bfe2 	.word	0x0800bfe2
 800aa00:	00000000 	.word	0x00000000

0800aa04 <__sfputc_r>:
 800aa04:	6893      	ldr	r3, [r2, #8]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	b410      	push	{r4}
 800aa0c:	6093      	str	r3, [r2, #8]
 800aa0e:	da08      	bge.n	800aa22 <__sfputc_r+0x1e>
 800aa10:	6994      	ldr	r4, [r2, #24]
 800aa12:	42a3      	cmp	r3, r4
 800aa14:	db01      	blt.n	800aa1a <__sfputc_r+0x16>
 800aa16:	290a      	cmp	r1, #10
 800aa18:	d103      	bne.n	800aa22 <__sfputc_r+0x1e>
 800aa1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1e:	f000 bdc5 	b.w	800b5ac <__swbuf_r>
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	1c58      	adds	r0, r3, #1
 800aa26:	6010      	str	r0, [r2, #0]
 800aa28:	7019      	strb	r1, [r3, #0]
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <__sfputs_r>:
 800aa32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	18d5      	adds	r5, r2, r3
 800aa3c:	42ac      	cmp	r4, r5
 800aa3e:	d101      	bne.n	800aa44 <__sfputs_r+0x12>
 800aa40:	2000      	movs	r0, #0
 800aa42:	e007      	b.n	800aa54 <__sfputs_r+0x22>
 800aa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa48:	463a      	mov	r2, r7
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff ffda 	bl	800aa04 <__sfputc_r>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d1f3      	bne.n	800aa3c <__sfputs_r+0xa>
 800aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa58 <_vfiprintf_r>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	b09d      	sub	sp, #116	; 0x74
 800aa60:	4614      	mov	r4, r2
 800aa62:	4698      	mov	r8, r3
 800aa64:	4606      	mov	r6, r0
 800aa66:	b118      	cbz	r0, 800aa70 <_vfiprintf_r+0x18>
 800aa68:	6983      	ldr	r3, [r0, #24]
 800aa6a:	b90b      	cbnz	r3, 800aa70 <_vfiprintf_r+0x18>
 800aa6c:	f7ff fb90 	bl	800a190 <__sinit>
 800aa70:	4b89      	ldr	r3, [pc, #548]	; (800ac98 <_vfiprintf_r+0x240>)
 800aa72:	429d      	cmp	r5, r3
 800aa74:	d11b      	bne.n	800aaae <_vfiprintf_r+0x56>
 800aa76:	6875      	ldr	r5, [r6, #4]
 800aa78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa7a:	07d9      	lsls	r1, r3, #31
 800aa7c:	d405      	bmi.n	800aa8a <_vfiprintf_r+0x32>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	059a      	lsls	r2, r3, #22
 800aa82:	d402      	bmi.n	800aa8a <_vfiprintf_r+0x32>
 800aa84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa86:	f7ff fc21 	bl	800a2cc <__retarget_lock_acquire_recursive>
 800aa8a:	89ab      	ldrh	r3, [r5, #12]
 800aa8c:	071b      	lsls	r3, r3, #28
 800aa8e:	d501      	bpl.n	800aa94 <_vfiprintf_r+0x3c>
 800aa90:	692b      	ldr	r3, [r5, #16]
 800aa92:	b9eb      	cbnz	r3, 800aad0 <_vfiprintf_r+0x78>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4630      	mov	r0, r6
 800aa98:	f000 fdda 	bl	800b650 <__swsetup_r>
 800aa9c:	b1c0      	cbz	r0, 800aad0 <_vfiprintf_r+0x78>
 800aa9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaa0:	07dc      	lsls	r4, r3, #31
 800aaa2:	d50e      	bpl.n	800aac2 <_vfiprintf_r+0x6a>
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	b01d      	add	sp, #116	; 0x74
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	4b7b      	ldr	r3, [pc, #492]	; (800ac9c <_vfiprintf_r+0x244>)
 800aab0:	429d      	cmp	r5, r3
 800aab2:	d101      	bne.n	800aab8 <_vfiprintf_r+0x60>
 800aab4:	68b5      	ldr	r5, [r6, #8]
 800aab6:	e7df      	b.n	800aa78 <_vfiprintf_r+0x20>
 800aab8:	4b79      	ldr	r3, [pc, #484]	; (800aca0 <_vfiprintf_r+0x248>)
 800aaba:	429d      	cmp	r5, r3
 800aabc:	bf08      	it	eq
 800aabe:	68f5      	ldreq	r5, [r6, #12]
 800aac0:	e7da      	b.n	800aa78 <_vfiprintf_r+0x20>
 800aac2:	89ab      	ldrh	r3, [r5, #12]
 800aac4:	0598      	lsls	r0, r3, #22
 800aac6:	d4ed      	bmi.n	800aaa4 <_vfiprintf_r+0x4c>
 800aac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaca:	f7ff fc00 	bl	800a2ce <__retarget_lock_release_recursive>
 800aace:	e7e9      	b.n	800aaa4 <_vfiprintf_r+0x4c>
 800aad0:	2300      	movs	r3, #0
 800aad2:	9309      	str	r3, [sp, #36]	; 0x24
 800aad4:	2320      	movs	r3, #32
 800aad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aada:	f8cd 800c 	str.w	r8, [sp, #12]
 800aade:	2330      	movs	r3, #48	; 0x30
 800aae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aca4 <_vfiprintf_r+0x24c>
 800aae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aae8:	f04f 0901 	mov.w	r9, #1
 800aaec:	4623      	mov	r3, r4
 800aaee:	469a      	mov	sl, r3
 800aaf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf4:	b10a      	cbz	r2, 800aafa <_vfiprintf_r+0xa2>
 800aaf6:	2a25      	cmp	r2, #37	; 0x25
 800aaf8:	d1f9      	bne.n	800aaee <_vfiprintf_r+0x96>
 800aafa:	ebba 0b04 	subs.w	fp, sl, r4
 800aafe:	d00b      	beq.n	800ab18 <_vfiprintf_r+0xc0>
 800ab00:	465b      	mov	r3, fp
 800ab02:	4622      	mov	r2, r4
 800ab04:	4629      	mov	r1, r5
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ff93 	bl	800aa32 <__sfputs_r>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	f000 80aa 	beq.w	800ac66 <_vfiprintf_r+0x20e>
 800ab12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab14:	445a      	add	r2, fp
 800ab16:	9209      	str	r2, [sp, #36]	; 0x24
 800ab18:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 80a2 	beq.w	800ac66 <_vfiprintf_r+0x20e>
 800ab22:	2300      	movs	r3, #0
 800ab24:	f04f 32ff 	mov.w	r2, #4294967295
 800ab28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab2c:	f10a 0a01 	add.w	sl, sl, #1
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	9307      	str	r3, [sp, #28]
 800ab34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab38:	931a      	str	r3, [sp, #104]	; 0x68
 800ab3a:	4654      	mov	r4, sl
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab42:	4858      	ldr	r0, [pc, #352]	; (800aca4 <_vfiprintf_r+0x24c>)
 800ab44:	f7f5 fb64 	bl	8000210 <memchr>
 800ab48:	9a04      	ldr	r2, [sp, #16]
 800ab4a:	b9d8      	cbnz	r0, 800ab84 <_vfiprintf_r+0x12c>
 800ab4c:	06d1      	lsls	r1, r2, #27
 800ab4e:	bf44      	itt	mi
 800ab50:	2320      	movmi	r3, #32
 800ab52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab56:	0713      	lsls	r3, r2, #28
 800ab58:	bf44      	itt	mi
 800ab5a:	232b      	movmi	r3, #43	; 0x2b
 800ab5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab60:	f89a 3000 	ldrb.w	r3, [sl]
 800ab64:	2b2a      	cmp	r3, #42	; 0x2a
 800ab66:	d015      	beq.n	800ab94 <_vfiprintf_r+0x13c>
 800ab68:	9a07      	ldr	r2, [sp, #28]
 800ab6a:	4654      	mov	r4, sl
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f04f 0c0a 	mov.w	ip, #10
 800ab72:	4621      	mov	r1, r4
 800ab74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab78:	3b30      	subs	r3, #48	; 0x30
 800ab7a:	2b09      	cmp	r3, #9
 800ab7c:	d94e      	bls.n	800ac1c <_vfiprintf_r+0x1c4>
 800ab7e:	b1b0      	cbz	r0, 800abae <_vfiprintf_r+0x156>
 800ab80:	9207      	str	r2, [sp, #28]
 800ab82:	e014      	b.n	800abae <_vfiprintf_r+0x156>
 800ab84:	eba0 0308 	sub.w	r3, r0, r8
 800ab88:	fa09 f303 	lsl.w	r3, r9, r3
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	46a2      	mov	sl, r4
 800ab92:	e7d2      	b.n	800ab3a <_vfiprintf_r+0xe2>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	1d19      	adds	r1, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	9103      	str	r1, [sp, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfbb      	ittet	lt
 800aba0:	425b      	neglt	r3, r3
 800aba2:	f042 0202 	orrlt.w	r2, r2, #2
 800aba6:	9307      	strge	r3, [sp, #28]
 800aba8:	9307      	strlt	r3, [sp, #28]
 800abaa:	bfb8      	it	lt
 800abac:	9204      	strlt	r2, [sp, #16]
 800abae:	7823      	ldrb	r3, [r4, #0]
 800abb0:	2b2e      	cmp	r3, #46	; 0x2e
 800abb2:	d10c      	bne.n	800abce <_vfiprintf_r+0x176>
 800abb4:	7863      	ldrb	r3, [r4, #1]
 800abb6:	2b2a      	cmp	r3, #42	; 0x2a
 800abb8:	d135      	bne.n	800ac26 <_vfiprintf_r+0x1ce>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	1d1a      	adds	r2, r3, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	9203      	str	r2, [sp, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfb8      	it	lt
 800abc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800abca:	3402      	adds	r4, #2
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acb4 <_vfiprintf_r+0x25c>
 800abd2:	7821      	ldrb	r1, [r4, #0]
 800abd4:	2203      	movs	r2, #3
 800abd6:	4650      	mov	r0, sl
 800abd8:	f7f5 fb1a 	bl	8000210 <memchr>
 800abdc:	b140      	cbz	r0, 800abf0 <_vfiprintf_r+0x198>
 800abde:	2340      	movs	r3, #64	; 0x40
 800abe0:	eba0 000a 	sub.w	r0, r0, sl
 800abe4:	fa03 f000 	lsl.w	r0, r3, r0
 800abe8:	9b04      	ldr	r3, [sp, #16]
 800abea:	4303      	orrs	r3, r0
 800abec:	3401      	adds	r4, #1
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf4:	482c      	ldr	r0, [pc, #176]	; (800aca8 <_vfiprintf_r+0x250>)
 800abf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abfa:	2206      	movs	r2, #6
 800abfc:	f7f5 fb08 	bl	8000210 <memchr>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d03f      	beq.n	800ac84 <_vfiprintf_r+0x22c>
 800ac04:	4b29      	ldr	r3, [pc, #164]	; (800acac <_vfiprintf_r+0x254>)
 800ac06:	bb1b      	cbnz	r3, 800ac50 <_vfiprintf_r+0x1f8>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	3307      	adds	r3, #7
 800ac0c:	f023 0307 	bic.w	r3, r3, #7
 800ac10:	3308      	adds	r3, #8
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	443b      	add	r3, r7
 800ac18:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1a:	e767      	b.n	800aaec <_vfiprintf_r+0x94>
 800ac1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac20:	460c      	mov	r4, r1
 800ac22:	2001      	movs	r0, #1
 800ac24:	e7a5      	b.n	800ab72 <_vfiprintf_r+0x11a>
 800ac26:	2300      	movs	r3, #0
 800ac28:	3401      	adds	r4, #1
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f04f 0c0a 	mov.w	ip, #10
 800ac32:	4620      	mov	r0, r4
 800ac34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac38:	3a30      	subs	r2, #48	; 0x30
 800ac3a:	2a09      	cmp	r2, #9
 800ac3c:	d903      	bls.n	800ac46 <_vfiprintf_r+0x1ee>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0c5      	beq.n	800abce <_vfiprintf_r+0x176>
 800ac42:	9105      	str	r1, [sp, #20]
 800ac44:	e7c3      	b.n	800abce <_vfiprintf_r+0x176>
 800ac46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7f0      	b.n	800ac32 <_vfiprintf_r+0x1da>
 800ac50:	ab03      	add	r3, sp, #12
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	462a      	mov	r2, r5
 800ac56:	4b16      	ldr	r3, [pc, #88]	; (800acb0 <_vfiprintf_r+0x258>)
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f3af 8000 	nop.w
 800ac60:	4607      	mov	r7, r0
 800ac62:	1c78      	adds	r0, r7, #1
 800ac64:	d1d6      	bne.n	800ac14 <_vfiprintf_r+0x1bc>
 800ac66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac68:	07d9      	lsls	r1, r3, #31
 800ac6a:	d405      	bmi.n	800ac78 <_vfiprintf_r+0x220>
 800ac6c:	89ab      	ldrh	r3, [r5, #12]
 800ac6e:	059a      	lsls	r2, r3, #22
 800ac70:	d402      	bmi.n	800ac78 <_vfiprintf_r+0x220>
 800ac72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac74:	f7ff fb2b 	bl	800a2ce <__retarget_lock_release_recursive>
 800ac78:	89ab      	ldrh	r3, [r5, #12]
 800ac7a:	065b      	lsls	r3, r3, #25
 800ac7c:	f53f af12 	bmi.w	800aaa4 <_vfiprintf_r+0x4c>
 800ac80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac82:	e711      	b.n	800aaa8 <_vfiprintf_r+0x50>
 800ac84:	ab03      	add	r3, sp, #12
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	462a      	mov	r2, r5
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <_vfiprintf_r+0x258>)
 800ac8c:	a904      	add	r1, sp, #16
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 f880 	bl	800ad94 <_printf_i>
 800ac94:	e7e4      	b.n	800ac60 <_vfiprintf_r+0x208>
 800ac96:	bf00      	nop
 800ac98:	0800bf9c 	.word	0x0800bf9c
 800ac9c:	0800bfbc 	.word	0x0800bfbc
 800aca0:	0800bf7c 	.word	0x0800bf7c
 800aca4:	0800bfdc 	.word	0x0800bfdc
 800aca8:	0800bfe6 	.word	0x0800bfe6
 800acac:	00000000 	.word	0x00000000
 800acb0:	0800aa33 	.word	0x0800aa33
 800acb4:	0800bfe2 	.word	0x0800bfe2

0800acb8 <_printf_common>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	4616      	mov	r6, r2
 800acbe:	4699      	mov	r9, r3
 800acc0:	688a      	ldr	r2, [r1, #8]
 800acc2:	690b      	ldr	r3, [r1, #16]
 800acc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acc8:	4293      	cmp	r3, r2
 800acca:	bfb8      	it	lt
 800accc:	4613      	movlt	r3, r2
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acd4:	4607      	mov	r7, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	b10a      	cbz	r2, 800acde <_printf_common+0x26>
 800acda:	3301      	adds	r3, #1
 800acdc:	6033      	str	r3, [r6, #0]
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	0699      	lsls	r1, r3, #26
 800ace2:	bf42      	ittt	mi
 800ace4:	6833      	ldrmi	r3, [r6, #0]
 800ace6:	3302      	addmi	r3, #2
 800ace8:	6033      	strmi	r3, [r6, #0]
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	f015 0506 	ands.w	r5, r5, #6
 800acf0:	d106      	bne.n	800ad00 <_printf_common+0x48>
 800acf2:	f104 0a19 	add.w	sl, r4, #25
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	6832      	ldr	r2, [r6, #0]
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dc26      	bgt.n	800ad4e <_printf_common+0x96>
 800ad00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad04:	1e13      	subs	r3, r2, #0
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	bf18      	it	ne
 800ad0a:	2301      	movne	r3, #1
 800ad0c:	0692      	lsls	r2, r2, #26
 800ad0e:	d42b      	bmi.n	800ad68 <_printf_common+0xb0>
 800ad10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad14:	4649      	mov	r1, r9
 800ad16:	4638      	mov	r0, r7
 800ad18:	47c0      	blx	r8
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d01e      	beq.n	800ad5c <_printf_common+0xa4>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	68e5      	ldr	r5, [r4, #12]
 800ad22:	6832      	ldr	r2, [r6, #0]
 800ad24:	f003 0306 	and.w	r3, r3, #6
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	bf08      	it	eq
 800ad2c:	1aad      	subeq	r5, r5, r2
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	6922      	ldr	r2, [r4, #16]
 800ad32:	bf0c      	ite	eq
 800ad34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad38:	2500      	movne	r5, #0
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	bfc4      	itt	gt
 800ad3e:	1a9b      	subgt	r3, r3, r2
 800ad40:	18ed      	addgt	r5, r5, r3
 800ad42:	2600      	movs	r6, #0
 800ad44:	341a      	adds	r4, #26
 800ad46:	42b5      	cmp	r5, r6
 800ad48:	d11a      	bne.n	800ad80 <_printf_common+0xc8>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e008      	b.n	800ad60 <_printf_common+0xa8>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	4649      	mov	r1, r9
 800ad54:	4638      	mov	r0, r7
 800ad56:	47c0      	blx	r8
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d103      	bne.n	800ad64 <_printf_common+0xac>
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	3501      	adds	r5, #1
 800ad66:	e7c6      	b.n	800acf6 <_printf_common+0x3e>
 800ad68:	18e1      	adds	r1, r4, r3
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	2030      	movs	r0, #48	; 0x30
 800ad6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad72:	4422      	add	r2, r4
 800ad74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad7c:	3302      	adds	r3, #2
 800ad7e:	e7c7      	b.n	800ad10 <_printf_common+0x58>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4622      	mov	r2, r4
 800ad84:	4649      	mov	r1, r9
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d0e6      	beq.n	800ad5c <_printf_common+0xa4>
 800ad8e:	3601      	adds	r6, #1
 800ad90:	e7d9      	b.n	800ad46 <_printf_common+0x8e>
	...

0800ad94 <_printf_i>:
 800ad94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	460c      	mov	r4, r1
 800ad9a:	4691      	mov	r9, r2
 800ad9c:	7e27      	ldrb	r7, [r4, #24]
 800ad9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ada0:	2f78      	cmp	r7, #120	; 0x78
 800ada2:	4680      	mov	r8, r0
 800ada4:	469a      	mov	sl, r3
 800ada6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adaa:	d807      	bhi.n	800adbc <_printf_i+0x28>
 800adac:	2f62      	cmp	r7, #98	; 0x62
 800adae:	d80a      	bhi.n	800adc6 <_printf_i+0x32>
 800adb0:	2f00      	cmp	r7, #0
 800adb2:	f000 80d8 	beq.w	800af66 <_printf_i+0x1d2>
 800adb6:	2f58      	cmp	r7, #88	; 0x58
 800adb8:	f000 80a3 	beq.w	800af02 <_printf_i+0x16e>
 800adbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800adc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adc4:	e03a      	b.n	800ae3c <_printf_i+0xa8>
 800adc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adca:	2b15      	cmp	r3, #21
 800adcc:	d8f6      	bhi.n	800adbc <_printf_i+0x28>
 800adce:	a001      	add	r0, pc, #4	; (adr r0, 800add4 <_printf_i+0x40>)
 800add0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800add4:	0800ae2d 	.word	0x0800ae2d
 800add8:	0800ae41 	.word	0x0800ae41
 800addc:	0800adbd 	.word	0x0800adbd
 800ade0:	0800adbd 	.word	0x0800adbd
 800ade4:	0800adbd 	.word	0x0800adbd
 800ade8:	0800adbd 	.word	0x0800adbd
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800adbd 	.word	0x0800adbd
 800adf4:	0800adbd 	.word	0x0800adbd
 800adf8:	0800adbd 	.word	0x0800adbd
 800adfc:	0800adbd 	.word	0x0800adbd
 800ae00:	0800af4d 	.word	0x0800af4d
 800ae04:	0800ae71 	.word	0x0800ae71
 800ae08:	0800af2f 	.word	0x0800af2f
 800ae0c:	0800adbd 	.word	0x0800adbd
 800ae10:	0800adbd 	.word	0x0800adbd
 800ae14:	0800af6f 	.word	0x0800af6f
 800ae18:	0800adbd 	.word	0x0800adbd
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800adbd 	.word	0x0800adbd
 800ae24:	0800adbd 	.word	0x0800adbd
 800ae28:	0800af37 	.word	0x0800af37
 800ae2c:	680b      	ldr	r3, [r1, #0]
 800ae2e:	1d1a      	adds	r2, r3, #4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	600a      	str	r2, [r1, #0]
 800ae34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e0a3      	b.n	800af88 <_printf_i+0x1f4>
 800ae40:	6825      	ldr	r5, [r4, #0]
 800ae42:	6808      	ldr	r0, [r1, #0]
 800ae44:	062e      	lsls	r6, r5, #24
 800ae46:	f100 0304 	add.w	r3, r0, #4
 800ae4a:	d50a      	bpl.n	800ae62 <_printf_i+0xce>
 800ae4c:	6805      	ldr	r5, [r0, #0]
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	da03      	bge.n	800ae5c <_printf_i+0xc8>
 800ae54:	232d      	movs	r3, #45	; 0x2d
 800ae56:	426d      	negs	r5, r5
 800ae58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae5c:	485e      	ldr	r0, [pc, #376]	; (800afd8 <_printf_i+0x244>)
 800ae5e:	230a      	movs	r3, #10
 800ae60:	e019      	b.n	800ae96 <_printf_i+0x102>
 800ae62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ae66:	6805      	ldr	r5, [r0, #0]
 800ae68:	600b      	str	r3, [r1, #0]
 800ae6a:	bf18      	it	ne
 800ae6c:	b22d      	sxthne	r5, r5
 800ae6e:	e7ef      	b.n	800ae50 <_printf_i+0xbc>
 800ae70:	680b      	ldr	r3, [r1, #0]
 800ae72:	6825      	ldr	r5, [r4, #0]
 800ae74:	1d18      	adds	r0, r3, #4
 800ae76:	6008      	str	r0, [r1, #0]
 800ae78:	0628      	lsls	r0, r5, #24
 800ae7a:	d501      	bpl.n	800ae80 <_printf_i+0xec>
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	e002      	b.n	800ae86 <_printf_i+0xf2>
 800ae80:	0669      	lsls	r1, r5, #25
 800ae82:	d5fb      	bpl.n	800ae7c <_printf_i+0xe8>
 800ae84:	881d      	ldrh	r5, [r3, #0]
 800ae86:	4854      	ldr	r0, [pc, #336]	; (800afd8 <_printf_i+0x244>)
 800ae88:	2f6f      	cmp	r7, #111	; 0x6f
 800ae8a:	bf0c      	ite	eq
 800ae8c:	2308      	moveq	r3, #8
 800ae8e:	230a      	movne	r3, #10
 800ae90:	2100      	movs	r1, #0
 800ae92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae96:	6866      	ldr	r6, [r4, #4]
 800ae98:	60a6      	str	r6, [r4, #8]
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	bfa2      	ittt	ge
 800ae9e:	6821      	ldrge	r1, [r4, #0]
 800aea0:	f021 0104 	bicge.w	r1, r1, #4
 800aea4:	6021      	strge	r1, [r4, #0]
 800aea6:	b90d      	cbnz	r5, 800aeac <_printf_i+0x118>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	d04d      	beq.n	800af48 <_printf_i+0x1b4>
 800aeac:	4616      	mov	r6, r2
 800aeae:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeb2:	fb03 5711 	mls	r7, r3, r1, r5
 800aeb6:	5dc7      	ldrb	r7, [r0, r7]
 800aeb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aebc:	462f      	mov	r7, r5
 800aebe:	42bb      	cmp	r3, r7
 800aec0:	460d      	mov	r5, r1
 800aec2:	d9f4      	bls.n	800aeae <_printf_i+0x11a>
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d10b      	bne.n	800aee0 <_printf_i+0x14c>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	07df      	lsls	r7, r3, #31
 800aecc:	d508      	bpl.n	800aee0 <_printf_i+0x14c>
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	6861      	ldr	r1, [r4, #4]
 800aed2:	4299      	cmp	r1, r3
 800aed4:	bfde      	ittt	le
 800aed6:	2330      	movle	r3, #48	; 0x30
 800aed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aedc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aee0:	1b92      	subs	r2, r2, r6
 800aee2:	6122      	str	r2, [r4, #16]
 800aee4:	f8cd a000 	str.w	sl, [sp]
 800aee8:	464b      	mov	r3, r9
 800aeea:	aa03      	add	r2, sp, #12
 800aeec:	4621      	mov	r1, r4
 800aeee:	4640      	mov	r0, r8
 800aef0:	f7ff fee2 	bl	800acb8 <_printf_common>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d14c      	bne.n	800af92 <_printf_i+0x1fe>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	b004      	add	sp, #16
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	4835      	ldr	r0, [pc, #212]	; (800afd8 <_printf_i+0x244>)
 800af04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	680e      	ldr	r6, [r1, #0]
 800af0c:	061f      	lsls	r7, r3, #24
 800af0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800af12:	600e      	str	r6, [r1, #0]
 800af14:	d514      	bpl.n	800af40 <_printf_i+0x1ac>
 800af16:	07d9      	lsls	r1, r3, #31
 800af18:	bf44      	itt	mi
 800af1a:	f043 0320 	orrmi.w	r3, r3, #32
 800af1e:	6023      	strmi	r3, [r4, #0]
 800af20:	b91d      	cbnz	r5, 800af2a <_printf_i+0x196>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f023 0320 	bic.w	r3, r3, #32
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	2310      	movs	r3, #16
 800af2c:	e7b0      	b.n	800ae90 <_printf_i+0xfc>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f043 0320 	orr.w	r3, r3, #32
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	2378      	movs	r3, #120	; 0x78
 800af38:	4828      	ldr	r0, [pc, #160]	; (800afdc <_printf_i+0x248>)
 800af3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af3e:	e7e3      	b.n	800af08 <_printf_i+0x174>
 800af40:	065e      	lsls	r6, r3, #25
 800af42:	bf48      	it	mi
 800af44:	b2ad      	uxthmi	r5, r5
 800af46:	e7e6      	b.n	800af16 <_printf_i+0x182>
 800af48:	4616      	mov	r6, r2
 800af4a:	e7bb      	b.n	800aec4 <_printf_i+0x130>
 800af4c:	680b      	ldr	r3, [r1, #0]
 800af4e:	6826      	ldr	r6, [r4, #0]
 800af50:	6960      	ldr	r0, [r4, #20]
 800af52:	1d1d      	adds	r5, r3, #4
 800af54:	600d      	str	r5, [r1, #0]
 800af56:	0635      	lsls	r5, r6, #24
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	d501      	bpl.n	800af60 <_printf_i+0x1cc>
 800af5c:	6018      	str	r0, [r3, #0]
 800af5e:	e002      	b.n	800af66 <_printf_i+0x1d2>
 800af60:	0671      	lsls	r1, r6, #25
 800af62:	d5fb      	bpl.n	800af5c <_printf_i+0x1c8>
 800af64:	8018      	strh	r0, [r3, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	4616      	mov	r6, r2
 800af6c:	e7ba      	b.n	800aee4 <_printf_i+0x150>
 800af6e:	680b      	ldr	r3, [r1, #0]
 800af70:	1d1a      	adds	r2, r3, #4
 800af72:	600a      	str	r2, [r1, #0]
 800af74:	681e      	ldr	r6, [r3, #0]
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	2100      	movs	r1, #0
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7f5 f948 	bl	8000210 <memchr>
 800af80:	b108      	cbz	r0, 800af86 <_printf_i+0x1f2>
 800af82:	1b80      	subs	r0, r0, r6
 800af84:	6060      	str	r0, [r4, #4]
 800af86:	6863      	ldr	r3, [r4, #4]
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	2300      	movs	r3, #0
 800af8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af90:	e7a8      	b.n	800aee4 <_printf_i+0x150>
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	4632      	mov	r2, r6
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	47d0      	blx	sl
 800af9c:	3001      	adds	r0, #1
 800af9e:	d0ab      	beq.n	800aef8 <_printf_i+0x164>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	079b      	lsls	r3, r3, #30
 800afa4:	d413      	bmi.n	800afce <_printf_i+0x23a>
 800afa6:	68e0      	ldr	r0, [r4, #12]
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	4298      	cmp	r0, r3
 800afac:	bfb8      	it	lt
 800afae:	4618      	movlt	r0, r3
 800afb0:	e7a4      	b.n	800aefc <_printf_i+0x168>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d09b      	beq.n	800aef8 <_printf_i+0x164>
 800afc0:	3501      	adds	r5, #1
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	9903      	ldr	r1, [sp, #12]
 800afc6:	1a5b      	subs	r3, r3, r1
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dcf2      	bgt.n	800afb2 <_printf_i+0x21e>
 800afcc:	e7eb      	b.n	800afa6 <_printf_i+0x212>
 800afce:	2500      	movs	r5, #0
 800afd0:	f104 0619 	add.w	r6, r4, #25
 800afd4:	e7f5      	b.n	800afc2 <_printf_i+0x22e>
 800afd6:	bf00      	nop
 800afd8:	0800bfed 	.word	0x0800bfed
 800afdc:	0800bffe 	.word	0x0800bffe

0800afe0 <_scanf_chars>:
 800afe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe4:	4615      	mov	r5, r2
 800afe6:	688a      	ldr	r2, [r1, #8]
 800afe8:	4680      	mov	r8, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b932      	cbnz	r2, 800affc <_scanf_chars+0x1c>
 800afee:	698a      	ldr	r2, [r1, #24]
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	bf0c      	ite	eq
 800aff4:	2201      	moveq	r2, #1
 800aff6:	f04f 32ff 	movne.w	r2, #4294967295
 800affa:	608a      	str	r2, [r1, #8]
 800affc:	6822      	ldr	r2, [r4, #0]
 800affe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b08c <_scanf_chars+0xac>
 800b002:	06d1      	lsls	r1, r2, #27
 800b004:	bf5f      	itttt	pl
 800b006:	681a      	ldrpl	r2, [r3, #0]
 800b008:	1d11      	addpl	r1, r2, #4
 800b00a:	6019      	strpl	r1, [r3, #0]
 800b00c:	6816      	ldrpl	r6, [r2, #0]
 800b00e:	2700      	movs	r7, #0
 800b010:	69a0      	ldr	r0, [r4, #24]
 800b012:	b188      	cbz	r0, 800b038 <_scanf_chars+0x58>
 800b014:	2801      	cmp	r0, #1
 800b016:	d107      	bne.n	800b028 <_scanf_chars+0x48>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	781a      	ldrb	r2, [r3, #0]
 800b01c:	6963      	ldr	r3, [r4, #20]
 800b01e:	5c9b      	ldrb	r3, [r3, r2]
 800b020:	b953      	cbnz	r3, 800b038 <_scanf_chars+0x58>
 800b022:	bb27      	cbnz	r7, 800b06e <_scanf_chars+0x8e>
 800b024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b028:	2802      	cmp	r0, #2
 800b02a:	d120      	bne.n	800b06e <_scanf_chars+0x8e>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b034:	071b      	lsls	r3, r3, #28
 800b036:	d41a      	bmi.n	800b06e <_scanf_chars+0x8e>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	06da      	lsls	r2, r3, #27
 800b03c:	bf5e      	ittt	pl
 800b03e:	682b      	ldrpl	r3, [r5, #0]
 800b040:	781b      	ldrbpl	r3, [r3, #0]
 800b042:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b046:	682a      	ldr	r2, [r5, #0]
 800b048:	686b      	ldr	r3, [r5, #4]
 800b04a:	3201      	adds	r2, #1
 800b04c:	602a      	str	r2, [r5, #0]
 800b04e:	68a2      	ldr	r2, [r4, #8]
 800b050:	3b01      	subs	r3, #1
 800b052:	3a01      	subs	r2, #1
 800b054:	606b      	str	r3, [r5, #4]
 800b056:	3701      	adds	r7, #1
 800b058:	60a2      	str	r2, [r4, #8]
 800b05a:	b142      	cbz	r2, 800b06e <_scanf_chars+0x8e>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dcd7      	bgt.n	800b010 <_scanf_chars+0x30>
 800b060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b064:	4629      	mov	r1, r5
 800b066:	4640      	mov	r0, r8
 800b068:	4798      	blx	r3
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d0d0      	beq.n	800b010 <_scanf_chars+0x30>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	f013 0310 	ands.w	r3, r3, #16
 800b074:	d105      	bne.n	800b082 <_scanf_chars+0xa2>
 800b076:	68e2      	ldr	r2, [r4, #12]
 800b078:	3201      	adds	r2, #1
 800b07a:	60e2      	str	r2, [r4, #12]
 800b07c:	69a2      	ldr	r2, [r4, #24]
 800b07e:	b102      	cbz	r2, 800b082 <_scanf_chars+0xa2>
 800b080:	7033      	strb	r3, [r6, #0]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	441f      	add	r7, r3
 800b086:	6127      	str	r7, [r4, #16]
 800b088:	2000      	movs	r0, #0
 800b08a:	e7cb      	b.n	800b024 <_scanf_chars+0x44>
 800b08c:	0800c02b 	.word	0x0800c02b

0800b090 <_scanf_i>:
 800b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	4698      	mov	r8, r3
 800b096:	4b74      	ldr	r3, [pc, #464]	; (800b268 <_scanf_i+0x1d8>)
 800b098:	460c      	mov	r4, r1
 800b09a:	4682      	mov	sl, r0
 800b09c:	4616      	mov	r6, r2
 800b09e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	ab03      	add	r3, sp, #12
 800b0a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b0aa:	4b70      	ldr	r3, [pc, #448]	; (800b26c <_scanf_i+0x1dc>)
 800b0ac:	69a1      	ldr	r1, [r4, #24]
 800b0ae:	4a70      	ldr	r2, [pc, #448]	; (800b270 <_scanf_i+0x1e0>)
 800b0b0:	2903      	cmp	r1, #3
 800b0b2:	bf18      	it	ne
 800b0b4:	461a      	movne	r2, r3
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	9201      	str	r2, [sp, #4]
 800b0ba:	1e5a      	subs	r2, r3, #1
 800b0bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b0c0:	bf88      	it	hi
 800b0c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b0c6:	4627      	mov	r7, r4
 800b0c8:	bf82      	ittt	hi
 800b0ca:	eb03 0905 	addhi.w	r9, r3, r5
 800b0ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b0d2:	60a3      	strhi	r3, [r4, #8]
 800b0d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b0d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b0dc:	bf98      	it	ls
 800b0de:	f04f 0900 	movls.w	r9, #0
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	463d      	mov	r5, r7
 800b0e6:	f04f 0b00 	mov.w	fp, #0
 800b0ea:	6831      	ldr	r1, [r6, #0]
 800b0ec:	ab03      	add	r3, sp, #12
 800b0ee:	7809      	ldrb	r1, [r1, #0]
 800b0f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	f7f5 f88b 	bl	8000210 <memchr>
 800b0fa:	b328      	cbz	r0, 800b148 <_scanf_i+0xb8>
 800b0fc:	f1bb 0f01 	cmp.w	fp, #1
 800b100:	d159      	bne.n	800b1b6 <_scanf_i+0x126>
 800b102:	6862      	ldr	r2, [r4, #4]
 800b104:	b92a      	cbnz	r2, 800b112 <_scanf_i+0x82>
 800b106:	6822      	ldr	r2, [r4, #0]
 800b108:	2308      	movs	r3, #8
 800b10a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b10e:	6063      	str	r3, [r4, #4]
 800b110:	6022      	str	r2, [r4, #0]
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b118:	6022      	str	r2, [r4, #0]
 800b11a:	68a2      	ldr	r2, [r4, #8]
 800b11c:	1e51      	subs	r1, r2, #1
 800b11e:	60a1      	str	r1, [r4, #8]
 800b120:	b192      	cbz	r2, 800b148 <_scanf_i+0xb8>
 800b122:	6832      	ldr	r2, [r6, #0]
 800b124:	1c51      	adds	r1, r2, #1
 800b126:	6031      	str	r1, [r6, #0]
 800b128:	7812      	ldrb	r2, [r2, #0]
 800b12a:	f805 2b01 	strb.w	r2, [r5], #1
 800b12e:	6872      	ldr	r2, [r6, #4]
 800b130:	3a01      	subs	r2, #1
 800b132:	2a00      	cmp	r2, #0
 800b134:	6072      	str	r2, [r6, #4]
 800b136:	dc07      	bgt.n	800b148 <_scanf_i+0xb8>
 800b138:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b13c:	4631      	mov	r1, r6
 800b13e:	4650      	mov	r0, sl
 800b140:	4790      	blx	r2
 800b142:	2800      	cmp	r0, #0
 800b144:	f040 8085 	bne.w	800b252 <_scanf_i+0x1c2>
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	f1bb 0f03 	cmp.w	fp, #3
 800b150:	d1cb      	bne.n	800b0ea <_scanf_i+0x5a>
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	b90b      	cbnz	r3, 800b15a <_scanf_i+0xca>
 800b156:	230a      	movs	r3, #10
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	6863      	ldr	r3, [r4, #4]
 800b15c:	4945      	ldr	r1, [pc, #276]	; (800b274 <_scanf_i+0x1e4>)
 800b15e:	6960      	ldr	r0, [r4, #20]
 800b160:	1ac9      	subs	r1, r1, r3
 800b162:	f000 f8ab 	bl	800b2bc <__sccl>
 800b166:	f04f 0b00 	mov.w	fp, #0
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	6822      	ldr	r2, [r4, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d03d      	beq.n	800b1ee <_scanf_i+0x15e>
 800b172:	6831      	ldr	r1, [r6, #0]
 800b174:	6960      	ldr	r0, [r4, #20]
 800b176:	f891 c000 	ldrb.w	ip, [r1]
 800b17a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b17e:	2800      	cmp	r0, #0
 800b180:	d035      	beq.n	800b1ee <_scanf_i+0x15e>
 800b182:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b186:	d124      	bne.n	800b1d2 <_scanf_i+0x142>
 800b188:	0510      	lsls	r0, r2, #20
 800b18a:	d522      	bpl.n	800b1d2 <_scanf_i+0x142>
 800b18c:	f10b 0b01 	add.w	fp, fp, #1
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	d003      	beq.n	800b19e <_scanf_i+0x10e>
 800b196:	3301      	adds	r3, #1
 800b198:	f109 39ff 	add.w	r9, r9, #4294967295
 800b19c:	60a3      	str	r3, [r4, #8]
 800b19e:	6873      	ldr	r3, [r6, #4]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	6073      	str	r3, [r6, #4]
 800b1a6:	dd1b      	ble.n	800b1e0 <_scanf_i+0x150>
 800b1a8:	6833      	ldr	r3, [r6, #0]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6033      	str	r3, [r6, #0]
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	60a3      	str	r3, [r4, #8]
 800b1b4:	e7d9      	b.n	800b16a <_scanf_i+0xda>
 800b1b6:	f1bb 0f02 	cmp.w	fp, #2
 800b1ba:	d1ae      	bne.n	800b11a <_scanf_i+0x8a>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b1c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b1c6:	d1bf      	bne.n	800b148 <_scanf_i+0xb8>
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	6063      	str	r3, [r4, #4]
 800b1cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1d0:	e7a2      	b.n	800b118 <_scanf_i+0x88>
 800b1d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b1d6:	6022      	str	r2, [r4, #0]
 800b1d8:	780b      	ldrb	r3, [r1, #0]
 800b1da:	f805 3b01 	strb.w	r3, [r5], #1
 800b1de:	e7de      	b.n	800b19e <_scanf_i+0x10e>
 800b1e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	4798      	blx	r3
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d0df      	beq.n	800b1ae <_scanf_i+0x11e>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	05d9      	lsls	r1, r3, #23
 800b1f2:	d50d      	bpl.n	800b210 <_scanf_i+0x180>
 800b1f4:	42bd      	cmp	r5, r7
 800b1f6:	d909      	bls.n	800b20c <_scanf_i+0x17c>
 800b1f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b1fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b200:	4632      	mov	r2, r6
 800b202:	4650      	mov	r0, sl
 800b204:	4798      	blx	r3
 800b206:	f105 39ff 	add.w	r9, r5, #4294967295
 800b20a:	464d      	mov	r5, r9
 800b20c:	42bd      	cmp	r5, r7
 800b20e:	d028      	beq.n	800b262 <_scanf_i+0x1d2>
 800b210:	6822      	ldr	r2, [r4, #0]
 800b212:	f012 0210 	ands.w	r2, r2, #16
 800b216:	d113      	bne.n	800b240 <_scanf_i+0x1b0>
 800b218:	702a      	strb	r2, [r5, #0]
 800b21a:	6863      	ldr	r3, [r4, #4]
 800b21c:	9e01      	ldr	r6, [sp, #4]
 800b21e:	4639      	mov	r1, r7
 800b220:	4650      	mov	r0, sl
 800b222:	47b0      	blx	r6
 800b224:	f8d8 3000 	ldr.w	r3, [r8]
 800b228:	6821      	ldr	r1, [r4, #0]
 800b22a:	1d1a      	adds	r2, r3, #4
 800b22c:	f8c8 2000 	str.w	r2, [r8]
 800b230:	f011 0f20 	tst.w	r1, #32
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	d00f      	beq.n	800b258 <_scanf_i+0x1c8>
 800b238:	6018      	str	r0, [r3, #0]
 800b23a:	68e3      	ldr	r3, [r4, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60e3      	str	r3, [r4, #12]
 800b240:	1bed      	subs	r5, r5, r7
 800b242:	44ab      	add	fp, r5
 800b244:	6925      	ldr	r5, [r4, #16]
 800b246:	445d      	add	r5, fp
 800b248:	6125      	str	r5, [r4, #16]
 800b24a:	2000      	movs	r0, #0
 800b24c:	b007      	add	sp, #28
 800b24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b252:	f04f 0b00 	mov.w	fp, #0
 800b256:	e7ca      	b.n	800b1ee <_scanf_i+0x15e>
 800b258:	07ca      	lsls	r2, r1, #31
 800b25a:	bf4c      	ite	mi
 800b25c:	8018      	strhmi	r0, [r3, #0]
 800b25e:	6018      	strpl	r0, [r3, #0]
 800b260:	e7eb      	b.n	800b23a <_scanf_i+0x1aa>
 800b262:	2001      	movs	r0, #1
 800b264:	e7f2      	b.n	800b24c <_scanf_i+0x1bc>
 800b266:	bf00      	nop
 800b268:	0800bf34 	.word	0x0800bf34
 800b26c:	0800b535 	.word	0x0800b535
 800b270:	0800b439 	.word	0x0800b439
 800b274:	0800c028 	.word	0x0800c028

0800b278 <_read_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	; (800b298 <_read_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f6 fce8 	bl	8001c5c <_read>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_read_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_read_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20000a38 	.word	0x20000a38

0800b29c <_sbrk_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d06      	ldr	r5, [pc, #24]	; (800b2b8 <_sbrk_r+0x1c>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f6 fd46 	bl	8001d38 <_sbrk>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_sbrk_r+0x1a>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_sbrk_r+0x1a>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	20000a38 	.word	0x20000a38

0800b2bc <__sccl>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	780b      	ldrb	r3, [r1, #0]
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	2b5e      	cmp	r3, #94	; 0x5e
 800b2c4:	bf0b      	itete	eq
 800b2c6:	784b      	ldrbeq	r3, [r1, #1]
 800b2c8:	1c48      	addne	r0, r1, #1
 800b2ca:	1c88      	addeq	r0, r1, #2
 800b2cc:	2200      	movne	r2, #0
 800b2ce:	bf08      	it	eq
 800b2d0:	2201      	moveq	r2, #1
 800b2d2:	1e61      	subs	r1, r4, #1
 800b2d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b2d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b2dc:	42a9      	cmp	r1, r5
 800b2de:	d1fb      	bne.n	800b2d8 <__sccl+0x1c>
 800b2e0:	b90b      	cbnz	r3, 800b2e6 <__sccl+0x2a>
 800b2e2:	3801      	subs	r0, #1
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	f082 0101 	eor.w	r1, r2, #1
 800b2ea:	54e1      	strb	r1, [r4, r3]
 800b2ec:	1c42      	adds	r2, r0, #1
 800b2ee:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b2f2:	2d2d      	cmp	r5, #45	; 0x2d
 800b2f4:	f102 36ff 	add.w	r6, r2, #4294967295
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	d006      	beq.n	800b30a <__sccl+0x4e>
 800b2fc:	2d5d      	cmp	r5, #93	; 0x5d
 800b2fe:	d0f1      	beq.n	800b2e4 <__sccl+0x28>
 800b300:	b90d      	cbnz	r5, 800b306 <__sccl+0x4a>
 800b302:	4630      	mov	r0, r6
 800b304:	e7ee      	b.n	800b2e4 <__sccl+0x28>
 800b306:	462b      	mov	r3, r5
 800b308:	e7ef      	b.n	800b2ea <__sccl+0x2e>
 800b30a:	7816      	ldrb	r6, [r2, #0]
 800b30c:	2e5d      	cmp	r6, #93	; 0x5d
 800b30e:	d0fa      	beq.n	800b306 <__sccl+0x4a>
 800b310:	42b3      	cmp	r3, r6
 800b312:	dcf8      	bgt.n	800b306 <__sccl+0x4a>
 800b314:	4618      	mov	r0, r3
 800b316:	3001      	adds	r0, #1
 800b318:	4286      	cmp	r6, r0
 800b31a:	5421      	strb	r1, [r4, r0]
 800b31c:	dcfb      	bgt.n	800b316 <__sccl+0x5a>
 800b31e:	43d8      	mvns	r0, r3
 800b320:	4430      	add	r0, r6
 800b322:	1c5d      	adds	r5, r3, #1
 800b324:	42b3      	cmp	r3, r6
 800b326:	bfa8      	it	ge
 800b328:	2000      	movge	r0, #0
 800b32a:	182b      	adds	r3, r5, r0
 800b32c:	3202      	adds	r2, #2
 800b32e:	e7de      	b.n	800b2ee <__sccl+0x32>

0800b330 <_strtol_l.isra.0>:
 800b330:	2b01      	cmp	r3, #1
 800b332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b336:	d001      	beq.n	800b33c <_strtol_l.isra.0+0xc>
 800b338:	2b24      	cmp	r3, #36	; 0x24
 800b33a:	d906      	bls.n	800b34a <_strtol_l.isra.0+0x1a>
 800b33c:	f7fe fdd2 	bl	8009ee4 <__errno>
 800b340:	2316      	movs	r3, #22
 800b342:	6003      	str	r3, [r0, #0]
 800b344:	2000      	movs	r0, #0
 800b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34a:	4f3a      	ldr	r7, [pc, #232]	; (800b434 <_strtol_l.isra.0+0x104>)
 800b34c:	468e      	mov	lr, r1
 800b34e:	4676      	mov	r6, lr
 800b350:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b354:	5de5      	ldrb	r5, [r4, r7]
 800b356:	f015 0508 	ands.w	r5, r5, #8
 800b35a:	d1f8      	bne.n	800b34e <_strtol_l.isra.0+0x1e>
 800b35c:	2c2d      	cmp	r4, #45	; 0x2d
 800b35e:	d134      	bne.n	800b3ca <_strtol_l.isra.0+0x9a>
 800b360:	f89e 4000 	ldrb.w	r4, [lr]
 800b364:	f04f 0801 	mov.w	r8, #1
 800b368:	f106 0e02 	add.w	lr, r6, #2
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d05c      	beq.n	800b42a <_strtol_l.isra.0+0xfa>
 800b370:	2b10      	cmp	r3, #16
 800b372:	d10c      	bne.n	800b38e <_strtol_l.isra.0+0x5e>
 800b374:	2c30      	cmp	r4, #48	; 0x30
 800b376:	d10a      	bne.n	800b38e <_strtol_l.isra.0+0x5e>
 800b378:	f89e 4000 	ldrb.w	r4, [lr]
 800b37c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b380:	2c58      	cmp	r4, #88	; 0x58
 800b382:	d14d      	bne.n	800b420 <_strtol_l.isra.0+0xf0>
 800b384:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b388:	2310      	movs	r3, #16
 800b38a:	f10e 0e02 	add.w	lr, lr, #2
 800b38e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b392:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b396:	2600      	movs	r6, #0
 800b398:	fbbc f9f3 	udiv	r9, ip, r3
 800b39c:	4635      	mov	r5, r6
 800b39e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b3a6:	2f09      	cmp	r7, #9
 800b3a8:	d818      	bhi.n	800b3dc <_strtol_l.isra.0+0xac>
 800b3aa:	463c      	mov	r4, r7
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	dd24      	ble.n	800b3fa <_strtol_l.isra.0+0xca>
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	db1f      	blt.n	800b3f4 <_strtol_l.isra.0+0xc4>
 800b3b4:	45a9      	cmp	r9, r5
 800b3b6:	d31d      	bcc.n	800b3f4 <_strtol_l.isra.0+0xc4>
 800b3b8:	d101      	bne.n	800b3be <_strtol_l.isra.0+0x8e>
 800b3ba:	45a2      	cmp	sl, r4
 800b3bc:	db1a      	blt.n	800b3f4 <_strtol_l.isra.0+0xc4>
 800b3be:	fb05 4503 	mla	r5, r5, r3, r4
 800b3c2:	2601      	movs	r6, #1
 800b3c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b3c8:	e7eb      	b.n	800b3a2 <_strtol_l.isra.0+0x72>
 800b3ca:	2c2b      	cmp	r4, #43	; 0x2b
 800b3cc:	bf08      	it	eq
 800b3ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b3d2:	46a8      	mov	r8, r5
 800b3d4:	bf08      	it	eq
 800b3d6:	f106 0e02 	addeq.w	lr, r6, #2
 800b3da:	e7c7      	b.n	800b36c <_strtol_l.isra.0+0x3c>
 800b3dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b3e0:	2f19      	cmp	r7, #25
 800b3e2:	d801      	bhi.n	800b3e8 <_strtol_l.isra.0+0xb8>
 800b3e4:	3c37      	subs	r4, #55	; 0x37
 800b3e6:	e7e1      	b.n	800b3ac <_strtol_l.isra.0+0x7c>
 800b3e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b3ec:	2f19      	cmp	r7, #25
 800b3ee:	d804      	bhi.n	800b3fa <_strtol_l.isra.0+0xca>
 800b3f0:	3c57      	subs	r4, #87	; 0x57
 800b3f2:	e7db      	b.n	800b3ac <_strtol_l.isra.0+0x7c>
 800b3f4:	f04f 36ff 	mov.w	r6, #4294967295
 800b3f8:	e7e4      	b.n	800b3c4 <_strtol_l.isra.0+0x94>
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	da05      	bge.n	800b40a <_strtol_l.isra.0+0xda>
 800b3fe:	2322      	movs	r3, #34	; 0x22
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	4665      	mov	r5, ip
 800b404:	b942      	cbnz	r2, 800b418 <_strtol_l.isra.0+0xe8>
 800b406:	4628      	mov	r0, r5
 800b408:	e79d      	b.n	800b346 <_strtol_l.isra.0+0x16>
 800b40a:	f1b8 0f00 	cmp.w	r8, #0
 800b40e:	d000      	beq.n	800b412 <_strtol_l.isra.0+0xe2>
 800b410:	426d      	negs	r5, r5
 800b412:	2a00      	cmp	r2, #0
 800b414:	d0f7      	beq.n	800b406 <_strtol_l.isra.0+0xd6>
 800b416:	b10e      	cbz	r6, 800b41c <_strtol_l.isra.0+0xec>
 800b418:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b41c:	6011      	str	r1, [r2, #0]
 800b41e:	e7f2      	b.n	800b406 <_strtol_l.isra.0+0xd6>
 800b420:	2430      	movs	r4, #48	; 0x30
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1b3      	bne.n	800b38e <_strtol_l.isra.0+0x5e>
 800b426:	2308      	movs	r3, #8
 800b428:	e7b1      	b.n	800b38e <_strtol_l.isra.0+0x5e>
 800b42a:	2c30      	cmp	r4, #48	; 0x30
 800b42c:	d0a4      	beq.n	800b378 <_strtol_l.isra.0+0x48>
 800b42e:	230a      	movs	r3, #10
 800b430:	e7ad      	b.n	800b38e <_strtol_l.isra.0+0x5e>
 800b432:	bf00      	nop
 800b434:	0800c02b 	.word	0x0800c02b

0800b438 <_strtol_r>:
 800b438:	f7ff bf7a 	b.w	800b330 <_strtol_l.isra.0>

0800b43c <_strtoul_l.isra.0>:
 800b43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b440:	4e3b      	ldr	r6, [pc, #236]	; (800b530 <_strtoul_l.isra.0+0xf4>)
 800b442:	4686      	mov	lr, r0
 800b444:	468c      	mov	ip, r1
 800b446:	4660      	mov	r0, ip
 800b448:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b44c:	5da5      	ldrb	r5, [r4, r6]
 800b44e:	f015 0508 	ands.w	r5, r5, #8
 800b452:	d1f8      	bne.n	800b446 <_strtoul_l.isra.0+0xa>
 800b454:	2c2d      	cmp	r4, #45	; 0x2d
 800b456:	d134      	bne.n	800b4c2 <_strtoul_l.isra.0+0x86>
 800b458:	f89c 4000 	ldrb.w	r4, [ip]
 800b45c:	f04f 0801 	mov.w	r8, #1
 800b460:	f100 0c02 	add.w	ip, r0, #2
 800b464:	2b00      	cmp	r3, #0
 800b466:	d05e      	beq.n	800b526 <_strtoul_l.isra.0+0xea>
 800b468:	2b10      	cmp	r3, #16
 800b46a:	d10c      	bne.n	800b486 <_strtoul_l.isra.0+0x4a>
 800b46c:	2c30      	cmp	r4, #48	; 0x30
 800b46e:	d10a      	bne.n	800b486 <_strtoul_l.isra.0+0x4a>
 800b470:	f89c 0000 	ldrb.w	r0, [ip]
 800b474:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b478:	2858      	cmp	r0, #88	; 0x58
 800b47a:	d14f      	bne.n	800b51c <_strtoul_l.isra.0+0xe0>
 800b47c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b480:	2310      	movs	r3, #16
 800b482:	f10c 0c02 	add.w	ip, ip, #2
 800b486:	f04f 37ff 	mov.w	r7, #4294967295
 800b48a:	2500      	movs	r5, #0
 800b48c:	fbb7 f7f3 	udiv	r7, r7, r3
 800b490:	fb03 f907 	mul.w	r9, r3, r7
 800b494:	ea6f 0909 	mvn.w	r9, r9
 800b498:	4628      	mov	r0, r5
 800b49a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b49e:	2e09      	cmp	r6, #9
 800b4a0:	d818      	bhi.n	800b4d4 <_strtoul_l.isra.0+0x98>
 800b4a2:	4634      	mov	r4, r6
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	dd24      	ble.n	800b4f2 <_strtoul_l.isra.0+0xb6>
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	db1f      	blt.n	800b4ec <_strtoul_l.isra.0+0xb0>
 800b4ac:	4287      	cmp	r7, r0
 800b4ae:	d31d      	bcc.n	800b4ec <_strtoul_l.isra.0+0xb0>
 800b4b0:	d101      	bne.n	800b4b6 <_strtoul_l.isra.0+0x7a>
 800b4b2:	45a1      	cmp	r9, r4
 800b4b4:	db1a      	blt.n	800b4ec <_strtoul_l.isra.0+0xb0>
 800b4b6:	fb00 4003 	mla	r0, r0, r3, r4
 800b4ba:	2501      	movs	r5, #1
 800b4bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b4c0:	e7eb      	b.n	800b49a <_strtoul_l.isra.0+0x5e>
 800b4c2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4c4:	bf08      	it	eq
 800b4c6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b4ca:	46a8      	mov	r8, r5
 800b4cc:	bf08      	it	eq
 800b4ce:	f100 0c02 	addeq.w	ip, r0, #2
 800b4d2:	e7c7      	b.n	800b464 <_strtoul_l.isra.0+0x28>
 800b4d4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b4d8:	2e19      	cmp	r6, #25
 800b4da:	d801      	bhi.n	800b4e0 <_strtoul_l.isra.0+0xa4>
 800b4dc:	3c37      	subs	r4, #55	; 0x37
 800b4de:	e7e1      	b.n	800b4a4 <_strtoul_l.isra.0+0x68>
 800b4e0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b4e4:	2e19      	cmp	r6, #25
 800b4e6:	d804      	bhi.n	800b4f2 <_strtoul_l.isra.0+0xb6>
 800b4e8:	3c57      	subs	r4, #87	; 0x57
 800b4ea:	e7db      	b.n	800b4a4 <_strtoul_l.isra.0+0x68>
 800b4ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b4f0:	e7e4      	b.n	800b4bc <_strtoul_l.isra.0+0x80>
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	da07      	bge.n	800b506 <_strtoul_l.isra.0+0xca>
 800b4f6:	2322      	movs	r3, #34	; 0x22
 800b4f8:	f8ce 3000 	str.w	r3, [lr]
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	b942      	cbnz	r2, 800b514 <_strtoul_l.isra.0+0xd8>
 800b502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b506:	f1b8 0f00 	cmp.w	r8, #0
 800b50a:	d000      	beq.n	800b50e <_strtoul_l.isra.0+0xd2>
 800b50c:	4240      	negs	r0, r0
 800b50e:	2a00      	cmp	r2, #0
 800b510:	d0f7      	beq.n	800b502 <_strtoul_l.isra.0+0xc6>
 800b512:	b10d      	cbz	r5, 800b518 <_strtoul_l.isra.0+0xdc>
 800b514:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b518:	6011      	str	r1, [r2, #0]
 800b51a:	e7f2      	b.n	800b502 <_strtoul_l.isra.0+0xc6>
 800b51c:	2430      	movs	r4, #48	; 0x30
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1b1      	bne.n	800b486 <_strtoul_l.isra.0+0x4a>
 800b522:	2308      	movs	r3, #8
 800b524:	e7af      	b.n	800b486 <_strtoul_l.isra.0+0x4a>
 800b526:	2c30      	cmp	r4, #48	; 0x30
 800b528:	d0a2      	beq.n	800b470 <_strtoul_l.isra.0+0x34>
 800b52a:	230a      	movs	r3, #10
 800b52c:	e7ab      	b.n	800b486 <_strtoul_l.isra.0+0x4a>
 800b52e:	bf00      	nop
 800b530:	0800c02b 	.word	0x0800c02b

0800b534 <_strtoul_r>:
 800b534:	f7ff bf82 	b.w	800b43c <_strtoul_l.isra.0>

0800b538 <__submore>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b544:	4299      	cmp	r1, r3
 800b546:	d11d      	bne.n	800b584 <__submore+0x4c>
 800b548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b54c:	f7fe fed2 	bl	800a2f4 <_malloc_r>
 800b550:	b918      	cbnz	r0, 800b55a <__submore+0x22>
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b55e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b560:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b564:	6360      	str	r0, [r4, #52]	; 0x34
 800b566:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b56a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b56e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b572:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b576:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b57a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b57e:	6020      	str	r0, [r4, #0]
 800b580:	2000      	movs	r0, #0
 800b582:	e7e8      	b.n	800b556 <__submore+0x1e>
 800b584:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b586:	0077      	lsls	r7, r6, #1
 800b588:	463a      	mov	r2, r7
 800b58a:	f000 fa79 	bl	800ba80 <_realloc_r>
 800b58e:	4605      	mov	r5, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d0de      	beq.n	800b552 <__submore+0x1a>
 800b594:	eb00 0806 	add.w	r8, r0, r6
 800b598:	4601      	mov	r1, r0
 800b59a:	4632      	mov	r2, r6
 800b59c:	4640      	mov	r0, r8
 800b59e:	f000 f9eb 	bl	800b978 <memcpy>
 800b5a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b5a6:	f8c4 8000 	str.w	r8, [r4]
 800b5aa:	e7e9      	b.n	800b580 <__submore+0x48>

0800b5ac <__swbuf_r>:
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	460e      	mov	r6, r1
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	b118      	cbz	r0, 800b5be <__swbuf_r+0x12>
 800b5b6:	6983      	ldr	r3, [r0, #24]
 800b5b8:	b90b      	cbnz	r3, 800b5be <__swbuf_r+0x12>
 800b5ba:	f7fe fde9 	bl	800a190 <__sinit>
 800b5be:	4b21      	ldr	r3, [pc, #132]	; (800b644 <__swbuf_r+0x98>)
 800b5c0:	429c      	cmp	r4, r3
 800b5c2:	d12b      	bne.n	800b61c <__swbuf_r+0x70>
 800b5c4:	686c      	ldr	r4, [r5, #4]
 800b5c6:	69a3      	ldr	r3, [r4, #24]
 800b5c8:	60a3      	str	r3, [r4, #8]
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	071a      	lsls	r2, r3, #28
 800b5ce:	d52f      	bpl.n	800b630 <__swbuf_r+0x84>
 800b5d0:	6923      	ldr	r3, [r4, #16]
 800b5d2:	b36b      	cbz	r3, 800b630 <__swbuf_r+0x84>
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	1ac0      	subs	r0, r0, r3
 800b5da:	6963      	ldr	r3, [r4, #20]
 800b5dc:	b2f6      	uxtb	r6, r6
 800b5de:	4283      	cmp	r3, r0
 800b5e0:	4637      	mov	r7, r6
 800b5e2:	dc04      	bgt.n	800b5ee <__swbuf_r+0x42>
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f000 f926 	bl	800b838 <_fflush_r>
 800b5ec:	bb30      	cbnz	r0, 800b63c <__swbuf_r+0x90>
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	60a3      	str	r3, [r4, #8]
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	6022      	str	r2, [r4, #0]
 800b5fa:	701e      	strb	r6, [r3, #0]
 800b5fc:	6963      	ldr	r3, [r4, #20]
 800b5fe:	3001      	adds	r0, #1
 800b600:	4283      	cmp	r3, r0
 800b602:	d004      	beq.n	800b60e <__swbuf_r+0x62>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	07db      	lsls	r3, r3, #31
 800b608:	d506      	bpl.n	800b618 <__swbuf_r+0x6c>
 800b60a:	2e0a      	cmp	r6, #10
 800b60c:	d104      	bne.n	800b618 <__swbuf_r+0x6c>
 800b60e:	4621      	mov	r1, r4
 800b610:	4628      	mov	r0, r5
 800b612:	f000 f911 	bl	800b838 <_fflush_r>
 800b616:	b988      	cbnz	r0, 800b63c <__swbuf_r+0x90>
 800b618:	4638      	mov	r0, r7
 800b61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61c:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <__swbuf_r+0x9c>)
 800b61e:	429c      	cmp	r4, r3
 800b620:	d101      	bne.n	800b626 <__swbuf_r+0x7a>
 800b622:	68ac      	ldr	r4, [r5, #8]
 800b624:	e7cf      	b.n	800b5c6 <__swbuf_r+0x1a>
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <__swbuf_r+0xa0>)
 800b628:	429c      	cmp	r4, r3
 800b62a:	bf08      	it	eq
 800b62c:	68ec      	ldreq	r4, [r5, #12]
 800b62e:	e7ca      	b.n	800b5c6 <__swbuf_r+0x1a>
 800b630:	4621      	mov	r1, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f80c 	bl	800b650 <__swsetup_r>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d0cb      	beq.n	800b5d4 <__swbuf_r+0x28>
 800b63c:	f04f 37ff 	mov.w	r7, #4294967295
 800b640:	e7ea      	b.n	800b618 <__swbuf_r+0x6c>
 800b642:	bf00      	nop
 800b644:	0800bf9c 	.word	0x0800bf9c
 800b648:	0800bfbc 	.word	0x0800bfbc
 800b64c:	0800bf7c 	.word	0x0800bf7c

0800b650 <__swsetup_r>:
 800b650:	4b32      	ldr	r3, [pc, #200]	; (800b71c <__swsetup_r+0xcc>)
 800b652:	b570      	push	{r4, r5, r6, lr}
 800b654:	681d      	ldr	r5, [r3, #0]
 800b656:	4606      	mov	r6, r0
 800b658:	460c      	mov	r4, r1
 800b65a:	b125      	cbz	r5, 800b666 <__swsetup_r+0x16>
 800b65c:	69ab      	ldr	r3, [r5, #24]
 800b65e:	b913      	cbnz	r3, 800b666 <__swsetup_r+0x16>
 800b660:	4628      	mov	r0, r5
 800b662:	f7fe fd95 	bl	800a190 <__sinit>
 800b666:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <__swsetup_r+0xd0>)
 800b668:	429c      	cmp	r4, r3
 800b66a:	d10f      	bne.n	800b68c <__swsetup_r+0x3c>
 800b66c:	686c      	ldr	r4, [r5, #4]
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b674:	0719      	lsls	r1, r3, #28
 800b676:	d42c      	bmi.n	800b6d2 <__swsetup_r+0x82>
 800b678:	06dd      	lsls	r5, r3, #27
 800b67a:	d411      	bmi.n	800b6a0 <__swsetup_r+0x50>
 800b67c:	2309      	movs	r3, #9
 800b67e:	6033      	str	r3, [r6, #0]
 800b680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	f04f 30ff 	mov.w	r0, #4294967295
 800b68a:	e03e      	b.n	800b70a <__swsetup_r+0xba>
 800b68c:	4b25      	ldr	r3, [pc, #148]	; (800b724 <__swsetup_r+0xd4>)
 800b68e:	429c      	cmp	r4, r3
 800b690:	d101      	bne.n	800b696 <__swsetup_r+0x46>
 800b692:	68ac      	ldr	r4, [r5, #8]
 800b694:	e7eb      	b.n	800b66e <__swsetup_r+0x1e>
 800b696:	4b24      	ldr	r3, [pc, #144]	; (800b728 <__swsetup_r+0xd8>)
 800b698:	429c      	cmp	r4, r3
 800b69a:	bf08      	it	eq
 800b69c:	68ec      	ldreq	r4, [r5, #12]
 800b69e:	e7e6      	b.n	800b66e <__swsetup_r+0x1e>
 800b6a0:	0758      	lsls	r0, r3, #29
 800b6a2:	d512      	bpl.n	800b6ca <__swsetup_r+0x7a>
 800b6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6a6:	b141      	cbz	r1, 800b6ba <__swsetup_r+0x6a>
 800b6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ac:	4299      	cmp	r1, r3
 800b6ae:	d002      	beq.n	800b6b6 <__swsetup_r+0x66>
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f000 f995 	bl	800b9e0 <_free_r>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6063      	str	r3, [r4, #4]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f043 0308 	orr.w	r3, r3, #8
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	b94b      	cbnz	r3, 800b6ea <__swsetup_r+0x9a>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6e0:	d003      	beq.n	800b6ea <__swsetup_r+0x9a>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f000 f907 	bl	800b8f8 <__smakebuf_r>
 800b6ea:	89a0      	ldrh	r0, [r4, #12]
 800b6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6f0:	f010 0301 	ands.w	r3, r0, #1
 800b6f4:	d00a      	beq.n	800b70c <__swsetup_r+0xbc>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	6963      	ldr	r3, [r4, #20]
 800b6fc:	425b      	negs	r3, r3
 800b6fe:	61a3      	str	r3, [r4, #24]
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	b943      	cbnz	r3, 800b716 <__swsetup_r+0xc6>
 800b704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b708:	d1ba      	bne.n	800b680 <__swsetup_r+0x30>
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	0781      	lsls	r1, r0, #30
 800b70e:	bf58      	it	pl
 800b710:	6963      	ldrpl	r3, [r4, #20]
 800b712:	60a3      	str	r3, [r4, #8]
 800b714:	e7f4      	b.n	800b700 <__swsetup_r+0xb0>
 800b716:	2000      	movs	r0, #0
 800b718:	e7f7      	b.n	800b70a <__swsetup_r+0xba>
 800b71a:	bf00      	nop
 800b71c:	20000088 	.word	0x20000088
 800b720:	0800bf9c 	.word	0x0800bf9c
 800b724:	0800bfbc 	.word	0x0800bfbc
 800b728:	0800bf7c 	.word	0x0800bf7c

0800b72c <__sflush_r>:
 800b72c:	898a      	ldrh	r2, [r1, #12]
 800b72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b732:	4605      	mov	r5, r0
 800b734:	0710      	lsls	r0, r2, #28
 800b736:	460c      	mov	r4, r1
 800b738:	d458      	bmi.n	800b7ec <__sflush_r+0xc0>
 800b73a:	684b      	ldr	r3, [r1, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dc05      	bgt.n	800b74c <__sflush_r+0x20>
 800b740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	dc02      	bgt.n	800b74c <__sflush_r+0x20>
 800b746:	2000      	movs	r0, #0
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d0f9      	beq.n	800b746 <__sflush_r+0x1a>
 800b752:	2300      	movs	r3, #0
 800b754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b758:	682f      	ldr	r7, [r5, #0]
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	d032      	beq.n	800b7c4 <__sflush_r+0x98>
 800b75e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	075a      	lsls	r2, r3, #29
 800b764:	d505      	bpl.n	800b772 <__sflush_r+0x46>
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	1ac0      	subs	r0, r0, r3
 800b76a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b76c:	b10b      	cbz	r3, 800b772 <__sflush_r+0x46>
 800b76e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b770:	1ac0      	subs	r0, r0, r3
 800b772:	2300      	movs	r3, #0
 800b774:	4602      	mov	r2, r0
 800b776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b778:	6a21      	ldr	r1, [r4, #32]
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b0      	blx	r6
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	d106      	bne.n	800b792 <__sflush_r+0x66>
 800b784:	6829      	ldr	r1, [r5, #0]
 800b786:	291d      	cmp	r1, #29
 800b788:	d82c      	bhi.n	800b7e4 <__sflush_r+0xb8>
 800b78a:	4a2a      	ldr	r2, [pc, #168]	; (800b834 <__sflush_r+0x108>)
 800b78c:	40ca      	lsrs	r2, r1
 800b78e:	07d6      	lsls	r6, r2, #31
 800b790:	d528      	bpl.n	800b7e4 <__sflush_r+0xb8>
 800b792:	2200      	movs	r2, #0
 800b794:	6062      	str	r2, [r4, #4]
 800b796:	04d9      	lsls	r1, r3, #19
 800b798:	6922      	ldr	r2, [r4, #16]
 800b79a:	6022      	str	r2, [r4, #0]
 800b79c:	d504      	bpl.n	800b7a8 <__sflush_r+0x7c>
 800b79e:	1c42      	adds	r2, r0, #1
 800b7a0:	d101      	bne.n	800b7a6 <__sflush_r+0x7a>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	b903      	cbnz	r3, 800b7a8 <__sflush_r+0x7c>
 800b7a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7aa:	602f      	str	r7, [r5, #0]
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d0ca      	beq.n	800b746 <__sflush_r+0x1a>
 800b7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d002      	beq.n	800b7be <__sflush_r+0x92>
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f000 f911 	bl	800b9e0 <_free_r>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7c2:	e7c1      	b.n	800b748 <__sflush_r+0x1c>
 800b7c4:	6a21      	ldr	r1, [r4, #32]
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b0      	blx	r6
 800b7cc:	1c41      	adds	r1, r0, #1
 800b7ce:	d1c7      	bne.n	800b760 <__sflush_r+0x34>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0c4      	beq.n	800b760 <__sflush_r+0x34>
 800b7d6:	2b1d      	cmp	r3, #29
 800b7d8:	d001      	beq.n	800b7de <__sflush_r+0xb2>
 800b7da:	2b16      	cmp	r3, #22
 800b7dc:	d101      	bne.n	800b7e2 <__sflush_r+0xb6>
 800b7de:	602f      	str	r7, [r5, #0]
 800b7e0:	e7b1      	b.n	800b746 <__sflush_r+0x1a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	e7ad      	b.n	800b748 <__sflush_r+0x1c>
 800b7ec:	690f      	ldr	r7, [r1, #16]
 800b7ee:	2f00      	cmp	r7, #0
 800b7f0:	d0a9      	beq.n	800b746 <__sflush_r+0x1a>
 800b7f2:	0793      	lsls	r3, r2, #30
 800b7f4:	680e      	ldr	r6, [r1, #0]
 800b7f6:	bf08      	it	eq
 800b7f8:	694b      	ldreq	r3, [r1, #20]
 800b7fa:	600f      	str	r7, [r1, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	2300      	movne	r3, #0
 800b800:	eba6 0807 	sub.w	r8, r6, r7
 800b804:	608b      	str	r3, [r1, #8]
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	dd9c      	ble.n	800b746 <__sflush_r+0x1a>
 800b80c:	6a21      	ldr	r1, [r4, #32]
 800b80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b810:	4643      	mov	r3, r8
 800b812:	463a      	mov	r2, r7
 800b814:	4628      	mov	r0, r5
 800b816:	47b0      	blx	r6
 800b818:	2800      	cmp	r0, #0
 800b81a:	dc06      	bgt.n	800b82a <__sflush_r+0xfe>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e78e      	b.n	800b748 <__sflush_r+0x1c>
 800b82a:	4407      	add	r7, r0
 800b82c:	eba8 0800 	sub.w	r8, r8, r0
 800b830:	e7e9      	b.n	800b806 <__sflush_r+0xda>
 800b832:	bf00      	nop
 800b834:	20400001 	.word	0x20400001

0800b838 <_fflush_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	4605      	mov	r5, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	b913      	cbnz	r3, 800b848 <_fflush_r+0x10>
 800b842:	2500      	movs	r5, #0
 800b844:	4628      	mov	r0, r5
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	b118      	cbz	r0, 800b852 <_fflush_r+0x1a>
 800b84a:	6983      	ldr	r3, [r0, #24]
 800b84c:	b90b      	cbnz	r3, 800b852 <_fflush_r+0x1a>
 800b84e:	f7fe fc9f 	bl	800a190 <__sinit>
 800b852:	4b14      	ldr	r3, [pc, #80]	; (800b8a4 <_fflush_r+0x6c>)
 800b854:	429c      	cmp	r4, r3
 800b856:	d11b      	bne.n	800b890 <_fflush_r+0x58>
 800b858:	686c      	ldr	r4, [r5, #4]
 800b85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0ef      	beq.n	800b842 <_fflush_r+0xa>
 800b862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b864:	07d0      	lsls	r0, r2, #31
 800b866:	d404      	bmi.n	800b872 <_fflush_r+0x3a>
 800b868:	0599      	lsls	r1, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_fflush_r+0x3a>
 800b86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86e:	f7fe fd2d 	bl	800a2cc <__retarget_lock_acquire_recursive>
 800b872:	4628      	mov	r0, r5
 800b874:	4621      	mov	r1, r4
 800b876:	f7ff ff59 	bl	800b72c <__sflush_r>
 800b87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b87c:	07da      	lsls	r2, r3, #31
 800b87e:	4605      	mov	r5, r0
 800b880:	d4e0      	bmi.n	800b844 <_fflush_r+0xc>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	059b      	lsls	r3, r3, #22
 800b886:	d4dd      	bmi.n	800b844 <_fflush_r+0xc>
 800b888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88a:	f7fe fd20 	bl	800a2ce <__retarget_lock_release_recursive>
 800b88e:	e7d9      	b.n	800b844 <_fflush_r+0xc>
 800b890:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <_fflush_r+0x70>)
 800b892:	429c      	cmp	r4, r3
 800b894:	d101      	bne.n	800b89a <_fflush_r+0x62>
 800b896:	68ac      	ldr	r4, [r5, #8]
 800b898:	e7df      	b.n	800b85a <_fflush_r+0x22>
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <_fflush_r+0x74>)
 800b89c:	429c      	cmp	r4, r3
 800b89e:	bf08      	it	eq
 800b8a0:	68ec      	ldreq	r4, [r5, #12]
 800b8a2:	e7da      	b.n	800b85a <_fflush_r+0x22>
 800b8a4:	0800bf9c 	.word	0x0800bf9c
 800b8a8:	0800bfbc 	.word	0x0800bfbc
 800b8ac:	0800bf7c 	.word	0x0800bf7c

0800b8b0 <__swhatbuf_r>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	460e      	mov	r6, r1
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	b096      	sub	sp, #88	; 0x58
 800b8bc:	4614      	mov	r4, r2
 800b8be:	461d      	mov	r5, r3
 800b8c0:	da07      	bge.n	800b8d2 <__swhatbuf_r+0x22>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	89b3      	ldrh	r3, [r6, #12]
 800b8c8:	061a      	lsls	r2, r3, #24
 800b8ca:	d410      	bmi.n	800b8ee <__swhatbuf_r+0x3e>
 800b8cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d0:	e00e      	b.n	800b8f0 <__swhatbuf_r+0x40>
 800b8d2:	466a      	mov	r2, sp
 800b8d4:	f000 f8fa 	bl	800bacc <_fstat_r>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	dbf2      	blt.n	800b8c2 <__swhatbuf_r+0x12>
 800b8dc:	9a01      	ldr	r2, [sp, #4]
 800b8de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8e6:	425a      	negs	r2, r3
 800b8e8:	415a      	adcs	r2, r3
 800b8ea:	602a      	str	r2, [r5, #0]
 800b8ec:	e7ee      	b.n	800b8cc <__swhatbuf_r+0x1c>
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	b016      	add	sp, #88	; 0x58
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}

0800b8f8 <__smakebuf_r>:
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8fc:	079d      	lsls	r5, r3, #30
 800b8fe:	4606      	mov	r6, r0
 800b900:	460c      	mov	r4, r1
 800b902:	d507      	bpl.n	800b914 <__smakebuf_r+0x1c>
 800b904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	2301      	movs	r3, #1
 800b90e:	6163      	str	r3, [r4, #20]
 800b910:	b002      	add	sp, #8
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	ab01      	add	r3, sp, #4
 800b916:	466a      	mov	r2, sp
 800b918:	f7ff ffca 	bl	800b8b0 <__swhatbuf_r>
 800b91c:	9900      	ldr	r1, [sp, #0]
 800b91e:	4605      	mov	r5, r0
 800b920:	4630      	mov	r0, r6
 800b922:	f7fe fce7 	bl	800a2f4 <_malloc_r>
 800b926:	b948      	cbnz	r0, 800b93c <__smakebuf_r+0x44>
 800b928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d4ef      	bmi.n	800b910 <__smakebuf_r+0x18>
 800b930:	f023 0303 	bic.w	r3, r3, #3
 800b934:	f043 0302 	orr.w	r3, r3, #2
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	e7e3      	b.n	800b904 <__smakebuf_r+0xc>
 800b93c:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <__smakebuf_r+0x7c>)
 800b93e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	6020      	str	r0, [r4, #0]
 800b944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	6163      	str	r3, [r4, #20]
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	6120      	str	r0, [r4, #16]
 800b952:	b15b      	cbz	r3, 800b96c <__smakebuf_r+0x74>
 800b954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f8c9 	bl	800baf0 <_isatty_r>
 800b95e:	b128      	cbz	r0, 800b96c <__smakebuf_r+0x74>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	f023 0303 	bic.w	r3, r3, #3
 800b966:	f043 0301 	orr.w	r3, r3, #1
 800b96a:	81a3      	strh	r3, [r4, #12]
 800b96c:	89a0      	ldrh	r0, [r4, #12]
 800b96e:	4305      	orrs	r5, r0
 800b970:	81a5      	strh	r5, [r4, #12]
 800b972:	e7cd      	b.n	800b910 <__smakebuf_r+0x18>
 800b974:	0800a129 	.word	0x0800a129

0800b978 <memcpy>:
 800b978:	440a      	add	r2, r1
 800b97a:	4291      	cmp	r1, r2
 800b97c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b980:	d100      	bne.n	800b984 <memcpy+0xc>
 800b982:	4770      	bx	lr
 800b984:	b510      	push	{r4, lr}
 800b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b98e:	4291      	cmp	r1, r2
 800b990:	d1f9      	bne.n	800b986 <memcpy+0xe>
 800b992:	bd10      	pop	{r4, pc}

0800b994 <memmove>:
 800b994:	4288      	cmp	r0, r1
 800b996:	b510      	push	{r4, lr}
 800b998:	eb01 0402 	add.w	r4, r1, r2
 800b99c:	d902      	bls.n	800b9a4 <memmove+0x10>
 800b99e:	4284      	cmp	r4, r0
 800b9a0:	4623      	mov	r3, r4
 800b9a2:	d807      	bhi.n	800b9b4 <memmove+0x20>
 800b9a4:	1e43      	subs	r3, r0, #1
 800b9a6:	42a1      	cmp	r1, r4
 800b9a8:	d008      	beq.n	800b9bc <memmove+0x28>
 800b9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9b2:	e7f8      	b.n	800b9a6 <memmove+0x12>
 800b9b4:	4402      	add	r2, r0
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	428a      	cmp	r2, r1
 800b9ba:	d100      	bne.n	800b9be <memmove+0x2a>
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9c6:	e7f7      	b.n	800b9b8 <memmove+0x24>

0800b9c8 <__malloc_lock>:
 800b9c8:	4801      	ldr	r0, [pc, #4]	; (800b9d0 <__malloc_lock+0x8>)
 800b9ca:	f7fe bc7f 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800b9ce:	bf00      	nop
 800b9d0:	20000a30 	.word	0x20000a30

0800b9d4 <__malloc_unlock>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__malloc_unlock+0x8>)
 800b9d6:	f7fe bc7a 	b.w	800a2ce <__retarget_lock_release_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20000a30 	.word	0x20000a30

0800b9e0 <_free_r>:
 800b9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	d048      	beq.n	800ba78 <_free_r+0x98>
 800b9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ea:	9001      	str	r0, [sp, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f1a1 0404 	sub.w	r4, r1, #4
 800b9f2:	bfb8      	it	lt
 800b9f4:	18e4      	addlt	r4, r4, r3
 800b9f6:	f7ff ffe7 	bl	800b9c8 <__malloc_lock>
 800b9fa:	4a20      	ldr	r2, [pc, #128]	; (800ba7c <_free_r+0x9c>)
 800b9fc:	9801      	ldr	r0, [sp, #4]
 800b9fe:	6813      	ldr	r3, [r2, #0]
 800ba00:	4615      	mov	r5, r2
 800ba02:	b933      	cbnz	r3, 800ba12 <_free_r+0x32>
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	6014      	str	r4, [r2, #0]
 800ba08:	b003      	add	sp, #12
 800ba0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba0e:	f7ff bfe1 	b.w	800b9d4 <__malloc_unlock>
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	d90b      	bls.n	800ba2e <_free_r+0x4e>
 800ba16:	6821      	ldr	r1, [r4, #0]
 800ba18:	1862      	adds	r2, r4, r1
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	bf04      	itt	eq
 800ba1e:	681a      	ldreq	r2, [r3, #0]
 800ba20:	685b      	ldreq	r3, [r3, #4]
 800ba22:	6063      	str	r3, [r4, #4]
 800ba24:	bf04      	itt	eq
 800ba26:	1852      	addeq	r2, r2, r1
 800ba28:	6022      	streq	r2, [r4, #0]
 800ba2a:	602c      	str	r4, [r5, #0]
 800ba2c:	e7ec      	b.n	800ba08 <_free_r+0x28>
 800ba2e:	461a      	mov	r2, r3
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b10b      	cbz	r3, 800ba38 <_free_r+0x58>
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d9fa      	bls.n	800ba2e <_free_r+0x4e>
 800ba38:	6811      	ldr	r1, [r2, #0]
 800ba3a:	1855      	adds	r5, r2, r1
 800ba3c:	42a5      	cmp	r5, r4
 800ba3e:	d10b      	bne.n	800ba58 <_free_r+0x78>
 800ba40:	6824      	ldr	r4, [r4, #0]
 800ba42:	4421      	add	r1, r4
 800ba44:	1854      	adds	r4, r2, r1
 800ba46:	42a3      	cmp	r3, r4
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	d1dd      	bne.n	800ba08 <_free_r+0x28>
 800ba4c:	681c      	ldr	r4, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	6053      	str	r3, [r2, #4]
 800ba52:	4421      	add	r1, r4
 800ba54:	6011      	str	r1, [r2, #0]
 800ba56:	e7d7      	b.n	800ba08 <_free_r+0x28>
 800ba58:	d902      	bls.n	800ba60 <_free_r+0x80>
 800ba5a:	230c      	movs	r3, #12
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	e7d3      	b.n	800ba08 <_free_r+0x28>
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	1961      	adds	r1, r4, r5
 800ba64:	428b      	cmp	r3, r1
 800ba66:	bf04      	itt	eq
 800ba68:	6819      	ldreq	r1, [r3, #0]
 800ba6a:	685b      	ldreq	r3, [r3, #4]
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	bf04      	itt	eq
 800ba70:	1949      	addeq	r1, r1, r5
 800ba72:	6021      	streq	r1, [r4, #0]
 800ba74:	6054      	str	r4, [r2, #4]
 800ba76:	e7c7      	b.n	800ba08 <_free_r+0x28>
 800ba78:	b003      	add	sp, #12
 800ba7a:	bd30      	pop	{r4, r5, pc}
 800ba7c:	20000160 	.word	0x20000160

0800ba80 <_realloc_r>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	4607      	mov	r7, r0
 800ba84:	4614      	mov	r4, r2
 800ba86:	460e      	mov	r6, r1
 800ba88:	b921      	cbnz	r1, 800ba94 <_realloc_r+0x14>
 800ba8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba8e:	4611      	mov	r1, r2
 800ba90:	f7fe bc30 	b.w	800a2f4 <_malloc_r>
 800ba94:	b922      	cbnz	r2, 800baa0 <_realloc_r+0x20>
 800ba96:	f7ff ffa3 	bl	800b9e0 <_free_r>
 800ba9a:	4625      	mov	r5, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baa0:	f000 f836 	bl	800bb10 <_malloc_usable_size_r>
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d20f      	bcs.n	800bac8 <_realloc_r+0x48>
 800baa8:	4621      	mov	r1, r4
 800baaa:	4638      	mov	r0, r7
 800baac:	f7fe fc22 	bl	800a2f4 <_malloc_r>
 800bab0:	4605      	mov	r5, r0
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d0f2      	beq.n	800ba9c <_realloc_r+0x1c>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4622      	mov	r2, r4
 800baba:	f7ff ff5d 	bl	800b978 <memcpy>
 800babe:	4631      	mov	r1, r6
 800bac0:	4638      	mov	r0, r7
 800bac2:	f7ff ff8d 	bl	800b9e0 <_free_r>
 800bac6:	e7e9      	b.n	800ba9c <_realloc_r+0x1c>
 800bac8:	4635      	mov	r5, r6
 800baca:	e7e7      	b.n	800ba9c <_realloc_r+0x1c>

0800bacc <_fstat_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	; (800baec <_fstat_r+0x20>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	f7f6 f904 	bl	8001ce6 <_fstat>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	d102      	bne.n	800bae8 <_fstat_r+0x1c>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	b103      	cbz	r3, 800bae8 <_fstat_r+0x1c>
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	bd38      	pop	{r3, r4, r5, pc}
 800baea:	bf00      	nop
 800baec:	20000a38 	.word	0x20000a38

0800baf0 <_isatty_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	; (800bb0c <_isatty_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f6 f903 	bl	8001d06 <_isatty>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_isatty_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_isatty_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	20000a38 	.word	0x20000a38

0800bb10 <_malloc_usable_size_r>:
 800bb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb14:	1f18      	subs	r0, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfbc      	itt	lt
 800bb1a:	580b      	ldrlt	r3, [r1, r0]
 800bb1c:	18c0      	addlt	r0, r0, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_init>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr

0800bb2c <_fini>:
 800bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2e:	bf00      	nop
 800bb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb32:	bc08      	pop	{r3}
 800bb34:	469e      	mov	lr, r3
 800bb36:	4770      	bx	lr
