
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009150  08009150  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009150  08009150  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08009158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          000007c8  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008b4  200008b4  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a8a  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003251  00000000  00000000  00037ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  0003adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  0003bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023861  00000000  00000000  0003cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3fe  00000000  00000000  000607a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2cd9  00000000  00000000  0007dba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150880  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a4  00000000  00000000  001508d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b6c 	.word	0x08008b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08008b6c 	.word	0x08008b6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d131      	bne.n	8000328 <splitNumber+0x78>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d039      	beq.n	800033e <splitNumber+0x8e>
             while(num > 0 ){
 80002ca:	e02d      	b.n	8000328 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	1c43      	adds	r3, r0, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <splitNumber+0x98>)
 80002d6:	fb83 2301 	smull	r2, r3, r3, r1
 80002da:	109a      	asrs	r2, r3, #2
 80002dc:	17cb      	asrs	r3, r1, #31
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1aca      	subs	r2, r1, r3
 80002ea:	0083      	lsls	r3, r0, #2
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440b      	add	r3, r1
 80002f2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <splitNumber+0x98>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	1092      	asrs	r2, r2, #2
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <splitNumber+0x70>
                  arr[i++] = 0;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	617a      	str	r2, [r7, #20]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	f107 0218 	add.w	r2, r7, #24
 8000318:	4413      	add	r3, r2
 800031a:	2200      	movs	r2, #0
 800031c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <splitNumber+0x9c>)
 8000324:	f006 fe36 	bl	8006f94 <iprintf>
             while(num > 0 ){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dcce      	bgt.n	80002cc <splitNumber+0x1c>


            }
        return arr[return_val];
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0218 	add.w	r2, r7, #24
 8000336:	4413      	add	r3, r2
 8000338:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800033c:	e000      	b.n	8000340 <splitNumber+0x90>
         } else {
             return 0;
 800033e:	2300      	movs	r3, #0
         }


}
 8000340:	4618      	mov	r0, r3
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	66666667 	.word	0x66666667
 800034c:	08008b84 	.word	0x08008b84

08000350 <convertToBinary>:

int convertToBinary(int num){
 8000350:	b480      	push	{r7}
 8000352:	b08f      	sub	sp, #60	; 0x3c
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000360:	e015      	b.n	800038e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000378:	440b      	add	r3, r1
 800037a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	0fda      	lsrs	r2, r3, #31
 8000382:	4413      	add	r3, r2
 8000384:	105b      	asrs	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
              i++;
 8000388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e6      	bne.n	8000362 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000396:	3b01      	subs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800039a:	e005      	b.n	80003a8 <convertToBinary+0x58>
              count++;
 800039c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800039e:	3301      	adds	r3, #1
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	daf6      	bge.n	800039c <convertToBinary+0x4c>

          }
          return count;
 80003ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	373c      	adds	r7, #60	; 0x3c
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <setTime>:



void setTime(RTC_TimeTypeDef sTime, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003bc:	b084      	sub	sp, #16
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	f107 0c08 	add.w	ip, r7, #8
 80003c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <setTime+0x48>)
 80003cc:	f004 fbd6 	bl	8004b7c <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003d0:	7f3b      	ldrb	r3, [r7, #28]
 80003d2:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003d8:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003de:	72bb      	strb	r3, [r7, #10]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f107 0108 	add.w	r1, r7, #8
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <setTime+0x48>)
 80003e8:	f004 f88a 	bl	8004500 <HAL_RTC_SetTime>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <setTime+0x48>)
 80003f4:	f004 faec 	bl	80049d0 <HAL_RTCEx_SetWakeUpTimer_IT>


}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000400:	b004      	add	sp, #16
 8000402:	4770      	bx	lr
 8000404:	200003dc 	.word	0x200003dc

08000408 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	resetPins();
 800041a:	f000 f8d7 	bl	80005cc <resetPins>

	int bits_count = convertToBinary(hour);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff95 	bl	8000350 <convertToBinary>
 8000426:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	2b05      	cmp	r3, #5
 800042c:	dd03      	ble.n	8000436 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800042e:	485a      	ldr	r0, [pc, #360]	; (8000598 <displayHour+0x190>)
 8000430:	f000 faf6 	bl	8000a20 <Send>
		hour_displayed = 1;

	}


}
 8000434:	e0ac      	b.n	8000590 <displayHour+0x188>
		for(int i = 0; i <= 5; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
 800043a:	e016      	b.n	800046a <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	fa42 f303 	asr.w	r3, r2, r3
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00b      	beq.n	8000464 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 800044c:	4a53      	ldr	r2, [pc, #332]	; (800059c <displayHour+0x194>)
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000454:	4a52      	ldr	r2, [pc, #328]	; (80005a0 <displayHour+0x198>)
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	f001 ff9a 	bl	8002398 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	3301      	adds	r3, #1
 8000468:	61fb      	str	r3, [r7, #28]
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	2b05      	cmp	r3, #5
 800046e:	dde5      	ble.n	800043c <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
 8000474:	e01b      	b.n	80004ae <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff18 	bl	80002b0 <splitNumber>
 8000480:	4602      	mov	r2, r0
 8000482:	69bb      	ldr	r3, [r7, #24]
 8000484:	fa42 f303 	asr.w	r3, r2, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00b      	beq.n	80004a8 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 8000490:	4a44      	ldr	r2, [pc, #272]	; (80005a4 <displayHour+0x19c>)
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000498:	4a43      	ldr	r2, [pc, #268]	; (80005a8 <displayHour+0x1a0>)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	f001 ff78 	bl	8002398 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	3301      	adds	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
 80004ae:	69bb      	ldr	r3, [r7, #24]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	dde0      	ble.n	8000476 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	e01b      	b.n	80004f2 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fef6 	bl	80002b0 <splitNumber>
 80004c4:	4602      	mov	r2, r0
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa42 f303 	asr.w	r3, r2, r3
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80004d4:	4a35      	ldr	r2, [pc, #212]	; (80005ac <displayHour+0x1a4>)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004dc:	4a34      	ldr	r2, [pc, #208]	; (80005b0 <displayHour+0x1a8>)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f001 ff56 	bl	8002398 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	dde0      	ble.n	80004ba <displayHour+0xb2>
			Send("Second: %d\r\n", second);
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	4619      	mov	r1, r3
 80004fc:	482d      	ldr	r0, [pc, #180]	; (80005b4 <displayHour+0x1ac>)
 80004fe:	f000 fa8f 	bl	8000a20 <Send>
			for (int i = 0; i <= 4; i++){
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
 8000506:	e01b      	b.n	8000540 <displayHour+0x138>
					    if (splitNumber(second, 0) & (1 << i)){
 8000508:	797b      	ldrb	r3, [r7, #5]
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fecf 	bl	80002b0 <splitNumber>
 8000512:	4602      	mov	r2, r0
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	fa42 f303 	asr.w	r3, r2, r3
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00b      	beq.n	800053a <displayHour+0x132>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000522:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <displayHour+0x1b0>)
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800052a:	4a24      	ldr	r2, [pc, #144]	; (80005bc <displayHour+0x1b4>)
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	f001 ff2f 	bl	8002398 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	3301      	adds	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	2b04      	cmp	r3, #4
 8000544:	dde0      	ble.n	8000508 <displayHour+0x100>
					for (int i = 0; i <= 3; i++){
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e01b      	b.n	8000584 <displayHour+0x17c>
					    if (splitNumber(second, 1) & (1 << i)){
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fead 	bl	80002b0 <splitNumber>
 8000556:	4602      	mov	r2, r0
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	fa42 f303 	asr.w	r3, r2, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d00b      	beq.n	800057e <displayHour+0x176>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <displayHour+0x1b8>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <displayHour+0x1bc>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	f001 ff0d 	bl	8002398 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b03      	cmp	r3, #3
 8000588:	dde0      	ble.n	800054c <displayHour+0x144>
		hour_displayed = 1;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <displayHour+0x1c0>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08008b88 	.word	0x08008b88
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000014 	.word	0x20000014
 80005a4:	20000020 	.word	0x20000020
 80005a8:	20000030 	.word	0x20000030
 80005ac:	20000038 	.word	0x20000038
 80005b0:	20000044 	.word	0x20000044
 80005b4:	08008ba8 	.word	0x08008ba8
 80005b8:	20000060 	.word	0x20000060
 80005bc:	20000070 	.word	0x20000070
 80005c0:	2000004c 	.word	0x2000004c
 80005c4:	20000058 	.word	0x20000058
 80005c8:	2000011f 	.word	0x2000011f

080005cc <resetPins>:

void resetPins(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00e      	b.n	80005f6 <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <resetPins+0xc0>)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005e0:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <resetPins+0xc4>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 fed4 	bl	8002398 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	dded      	ble.n	80005d8 <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	e01a      	b.n	8000638 <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <resetPins+0xc8>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <resetPins+0xcc>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f001 febf 	bl	8002398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <resetPins+0xd0>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <resetPins+0xd4>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	f001 feb3 	bl	8002398 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3301      	adds	r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b02      	cmp	r3, #2
 800063c:	dde1      	ble.n	8000602 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e01a      	b.n	800067a <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <resetPins+0xd8>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <resetPins+0xdc>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f001 fe9e 	bl	8002398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <resetPins+0xe0>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <resetPins+0xe4>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	f001 fe92 	bl	8002398 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3301      	adds	r3, #1
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b03      	cmp	r3, #3
 800067e:	dde1      	ble.n	8000644 <resetPins+0x78>
	}



}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000014 	.word	0x20000014
 8000694:	20000038 	.word	0x20000038
 8000698:	20000044 	.word	0x20000044
 800069c:	2000004c 	.word	0x2000004c
 80006a0:	20000058 	.word	0x20000058
 80006a4:	20000020 	.word	0x20000020
 80006a8:	20000030 	.word	0x20000030
 80006ac:	20000060 	.word	0x20000060
 80006b0:	20000070 	.word	0x20000070

080006b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b69      	ldr	r3, [pc, #420]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a68      	ldr	r2, [pc, #416]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b63      	ldr	r3, [pc, #396]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a62      	ldr	r2, [pc, #392]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b60      	ldr	r3, [pc, #384]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <MX_GPIO_Init+0x1bc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a5c      	ldr	r2, [pc, #368]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b5a      	ldr	r3, [pc, #360]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b57      	ldr	r3, [pc, #348]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a56      	ldr	r2, [pc, #344]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b54      	ldr	r3, [pc, #336]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b51      	ldr	r3, [pc, #324]	; (8000870 <MX_GPIO_Init+0x1bc>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a50      	ldr	r2, [pc, #320]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <MX_GPIO_Init+0x1bc>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000742:	2200      	movs	r2, #0
 8000744:	f641 515f 	movw	r1, #7519	; 0x1d5f
 8000748:	484a      	ldr	r0, [pc, #296]	; (8000874 <MX_GPIO_Init+0x1c0>)
 800074a:	f001 fe25 	bl	8002398 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f001 fe1e 	bl	8002398 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 800075c:	2200      	movs	r2, #0
 800075e:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000762:	4845      	ldr	r0, [pc, #276]	; (8000878 <MX_GPIO_Init+0x1c4>)
 8000764:	f001 fe18 	bl	8002398 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	4843      	ldr	r0, [pc, #268]	; (800087c <MX_GPIO_Init+0x1c8>)
 800076e:	f001 fe13 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_GPIO_Init+0x1c0>)
 800078a:	f001 fb73 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 800078e:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000792:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4833      	ldr	r0, [pc, #204]	; (8000874 <MX_GPIO_Init+0x1c0>)
 80007a8:	f001 fb64 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 80007ac:	f248 2313 	movw	r3, #33299	; 0x8213
 80007b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 fb56 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 80007c8:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 80007cc:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f001 fb46 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 80007e8:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <MX_GPIO_Init+0x1c0>)
 80007fe:	f001 fb39 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000802:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000806:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <MX_GPIO_Init+0x1c4>)
 800081c:	f001 fb2a 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000820:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8000824:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <MX_GPIO_Init+0x1c4>)
 8000836:	f001 fb1d 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480a      	ldr	r0, [pc, #40]	; (800087c <MX_GPIO_Init+0x1c8>)
 8000852:	f001 fb0f 	bl	8001e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f001 fa42 	bl	8001ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	; 0x28
 8000862:	f001 fa6b 	bl	8001d3c <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	48000800 	.word	0x48000800
 8000878:	48000400 	.word	0x48000400
 800087c:	48000c00 	.word	0x48000c00

08000880 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	x1hzTime++;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <delay_1hz+0x30>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <delay_1hz+0x30>)
 800088e:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <delay_1hz+0x30>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000898:	d305      	bcc.n	80008a6 <delay_1hz+0x26>
		x1hz = 1;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <delay_1hz+0x34>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <delay_1hz+0x30>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	801a      	strh	r2, [r3, #0]
	}
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	20000108 	.word	0x20000108
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <delay_4hz>:

void delay_4hz(){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	x4hzTime++;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <delay_4hz+0x30>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <delay_4hz+0x30>)
 80008c6:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <delay_4hz+0x30>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	2bf9      	cmp	r3, #249	; 0xf9
 80008ce:	d905      	bls.n	80008dc <delay_4hz+0x24>
		x4hz = 1;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <delay_4hz+0x34>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <delay_4hz+0x30>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]
	}

}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000010a 	.word	0x2000010a
 80008ec:	2000010d 	.word	0x2000010d

080008f0 <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <delayUs+0x30>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 8000902:	bf00      	nop
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <delayUs+0x34>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3f9      	bcc.n	8000904 <delayUs+0x14>
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200007d0 	.word	0x200007d0
 8000924:	20000784 	.word	0x20000784

08000928 <delayMs>:

void delayMs(uint16_t ms){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 8000932:	2300      	movs	r3, #0
 8000934:	81fb      	strh	r3, [r7, #14]
 8000936:	e006      	b.n	8000946 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f7ff ffd8 	bl	80008f0 <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	3301      	adds	r3, #1
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	89fa      	ldrh	r2, [r7, #14]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	429a      	cmp	r2, r3
 800094c:	d3f4      	bcc.n	8000938 <delayMs+0x10>
	}
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <handleBlinkCommand+0x60>)
 800095e:	881a      	ldrh	r2, [r3, #0]
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <handleBlinkCommand+0x64>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	429a      	cmp	r2, r3
 8000968:	d805      	bhi.n	8000976 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <handleBlinkCommand+0x68>)
 8000970:	f001 fd12 	bl	8002398 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8000974:	e01e      	b.n	80009b4 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <handleBlinkCommand+0x60>)
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <handleBlinkCommand+0x6c>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	429a      	cmp	r2, r3
 8000982:	d805      	bhi.n	8000990 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <handleBlinkCommand+0x68>)
 800098a:	f001 fd05 	bl	8002398 <HAL_GPIO_WritePin>
}
 800098e:	e011      	b.n	80009b4 <handleBlinkCommand+0x5c>
		led_delay = 0;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <handleBlinkCommand+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <handleBlinkCommand+0x70>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	3b01      	subs	r3, #1
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <handleBlinkCommand+0x70>)
 80009a2:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <handleBlinkCommand+0x70>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <handleBlinkCommand+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000144 	.word	0x20000144
 80009bc:	2000007a 	.word	0x2000007a
 80009c0:	48000800 	.word	0x48000800
 80009c4:	20000124 	.word	0x20000124
 80009c8:	20000126 	.word	0x20000126
 80009cc:	20000123 	.word	0x20000123

080009d0 <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <UART_init+0x38>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <UART_init+0x3c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <UART_init+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <UART_init+0x44>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	2100      	movs	r1, #0
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <UART_init+0x48>)
 80009f4:	f006 fac6 	bl	8006f84 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	2100      	movs	r1, #0
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <UART_init+0x4c>)
 8000a00:	f006 fac0 	bl	8006f84 <memset>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	20000112 	.word	0x20000112
 8000a10:	20000114 	.word	0x20000114
 8000a14:	20000116 	.word	0x20000116
 8000a18:	20000580 	.word	0x20000580
 8000a1c:	200001dc 	.word	0x200001dc

08000a20 <Send>:

/* ===== SEND USART ==== */



void Send(char* message, ...){
 8000a20:	b40f      	push	{r0, r1, r2, r3}
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b0a4      	sub	sp, #144	; 0x90
 8000a26:	af00      	add	r7, sp, #0
	char temp[128];

	volatile int idx = Tx_empty;
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <Send+0xe4>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	60bb      	str	r3, [r7, #8]


	va_list arglist;
	va_start(arglist, message);
 8000a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a34:	607b      	str	r3, [r7, #4]
	vsprintf(temp, message, arglist);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 fb47 	bl	80070d4 <vsiprintf>
	va_end(arglist);

	for(int i = 0; i < strlen(temp); i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a4c:	e016      	b.n	8000a7c <Send+0x5c>
		Tx_buff[idx] = temp[i];
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f107 010c 	add.w	r1, r7, #12
 8000a54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a58:	440a      	add	r2, r1
 8000a5a:	7811      	ldrb	r1, [r2, #0]
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <Send+0xe8>)
 8000a5e:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
		if(idx >= TX_BUFF_SIZE){
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a6c:	db01      	blt.n	8000a72 <Send+0x52>
			idx = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < strlen(temp); i++){
 8000a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a76:	3301      	adds	r3, #1
 8000a78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fbb7 	bl	80001f4 <strlen>
 8000a86:	4602      	mov	r2, r0
 8000a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8de      	bhi.n	8000a4e <Send+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
		}

	}
	__disable_irq();

	if(Tx_empty == Tx_busy){
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <Send+0xe4>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <Send+0xec>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d121      	bne.n	8000ae8 <Send+0xc8>
		Tx_empty = idx;
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <Send+0xe4>)
 8000aaa:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <Send+0xec>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <Send+0xe8>)
 8000ab6:	5c9b      	ldrb	r3, [r3, r2]
 8000ab8:	70fb      	strb	r3, [r7, #3]
		Tx_busy++;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <Send+0xec>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <Send+0xec>)
 8000ac6:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <Send+0xec>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ad2:	d302      	bcc.n	8000ada <Send+0xba>
			Tx_busy = 0;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <Send+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000ada:	1cfb      	adds	r3, r7, #3
 8000adc:	2201      	movs	r2, #1
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <Send+0xf0>)
 8000ae2:	f004 fe43 	bl	800576c <HAL_UART_Transmit_IT>
 8000ae6:	e003      	b.n	8000af0 <Send+0xd0>

	} else {
		Tx_empty = idx;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <Send+0xe4>)
 8000aee:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000af0:	b662      	cpsie	i
}
 8000af2:	bf00      	nop
	}
	__enable_irq();


}
 8000af4:	bf00      	nop
 8000af6:	3790      	adds	r7, #144	; 0x90
 8000af8:	46bd      	mov	sp, r7
 8000afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000afe:	b004      	add	sp, #16
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000114 	.word	0x20000114
 8000b08:	200001dc 	.word	0x200001dc
 8000b0c:	20000116 	.word	0x20000116
 8000b10:	2000081c 	.word	0x2000081c

08000b14 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_TxCpltCallback+0x60>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d01d      	beq.n	8000b68 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_UART_TxCpltCallback+0x64>)
 8000b36:	5c9b      	ldrb	r3, [r3, r2]
 8000b38:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3301      	adds	r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b46:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b52:	d302      	bcc.n	8000b5a <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_UART_TxCpltCallback+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8000b5a:	f107 030f 	add.w	r3, r7, #15
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_UART_TxCpltCallback+0x68>)
 8000b64:	f004 fe02 	bl	800576c <HAL_UART_Transmit_IT>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000116 	.word	0x20000116
 8000b74:	20000114 	.word	0x20000114
 8000b78:	200001dc 	.word	0x200001dc
 8000b7c:	2000081c 	.word	0x2000081c

08000b80 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_RxCpltCallback+0x50>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d11a      	bne.n	8000bc8 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_UART_RxCpltCallback+0x54>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_UART_RxCpltCallback+0x54>)
 8000b9e:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_UART_RxCpltCallback+0x54>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000baa:	d302      	bcc.n	8000bb2 <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_UART_RxCpltCallback+0x54>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_UART_RxCpltCallback+0x54>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_UART_RxCpltCallback+0x58>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <HAL_UART_RxCpltCallback+0x5c>)
 8000bc4:	f004 fe40 	bl	8005848 <HAL_UART_Receive_IT>


	}
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	20000110 	.word	0x20000110
 8000bd8:	20000580 	.word	0x20000580
 8000bdc:	2000081c 	.word	0x2000081c

08000be0 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <uart_ready+0x24>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <uart_ready+0x28>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d101      	bne.n	8000bf8 <uart_ready+0x18>
		return 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e000      	b.n	8000bfa <uart_ready+0x1a>
	} else {
		return 1;
 8000bf8:	2301      	movs	r3, #1
	}
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000110 	.word	0x20000110
 8000c08:	20000112 	.word	0x20000112

08000c0c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ====== END USART ==== */

/* ======== RTC =========== */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	static RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000c14:	2200      	movs	r2, #0
 8000c16:	4913      	ldr	r1, [pc, #76]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f003 fddd 	bl	80047d8 <HAL_RTC_GetTime>

	Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 8000c30:	f7ff fef6 	bl	8000a20 <Send>
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	737b      	strb	r3, [r7, #13]


	 //int hour = splitNumber(seconds);
	 if(clock_mode == 1){
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_RTCEx_WakeUpTimerEventCallback+0x60>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d105      	bne.n	8000c5c <HAL_RTCEx_WakeUpTimerEventCallback+0x50>
		 displayHour(hours, minutes, seconds);
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	7bb9      	ldrb	r1, [r7, #14]
 8000c54:	7b7a      	ldrb	r2, [r7, #13]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fbd6 	bl	8000408 <displayHour>


	 //hr = &hour;


}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000130 	.word	0x20000130
 8000c68:	08008bb8 	.word	0x08008bb8
 8000c6c:	20000078 	.word	0x20000078

08000c70 <parseCommand>:


/* ===== PARSERS ===== */


void parseCommand(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t picked_command = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]

	if(strcmp("setMode", command) == 0){
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <parseCommand+0xac>)
 8000c7c:	4828      	ldr	r0, [pc, #160]	; (8000d20 <parseCommand+0xb0>)
 8000c7e:	f7ff faaf 	bl	80001e0 <strcmp>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d106      	bne.n	8000c96 <parseCommand+0x26>
		int mode = parseIntData();
 8000c88:	f000 f890 	bl	8000dac <parseIntData>
 8000c8c:	6038      	str	r0, [r7, #0]
		handleSetClockMode(mode);
 8000c8e:	6838      	ldr	r0, [r7, #0]
 8000c90:	f000 f8ca 	bl	8000e28 <handleSetClockMode>
 8000c94:	e036      	b.n	8000d04 <parseCommand+0x94>


		setTime(hour_to_show, minute_to_show, second_to_show);


	} */else if(strcmp("setAlarm", command) == 0){
 8000c96:	4921      	ldr	r1, [pc, #132]	; (8000d1c <parseCommand+0xac>)
 8000c98:	4822      	ldr	r0, [pc, #136]	; (8000d24 <parseCommand+0xb4>)
 8000c9a:	f7ff faa1 	bl	80001e0 <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d02f      	beq.n	8000d04 <parseCommand+0x94>



	} else if(strcmp("getAlarms", command) == 0){
 8000ca4:	491d      	ldr	r1, [pc, #116]	; (8000d1c <parseCommand+0xac>)
 8000ca6:	4820      	ldr	r0, [pc, #128]	; (8000d28 <parseCommand+0xb8>)
 8000ca8:	f7ff fa9a 	bl	80001e0 <strcmp>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d028      	beq.n	8000d04 <parseCommand+0x94>



	} else if (strcmp("getAlarmsCount", command) == 0){
 8000cb2:	491a      	ldr	r1, [pc, #104]	; (8000d1c <parseCommand+0xac>)
 8000cb4:	481d      	ldr	r0, [pc, #116]	; (8000d2c <parseCommand+0xbc>)
 8000cb6:	f7ff fa93 	bl	80001e0 <strcmp>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d021      	beq.n	8000d04 <parseCommand+0x94>



	} else if (strcmp("resetAlarms", command) == 0){
 8000cc0:	4916      	ldr	r1, [pc, #88]	; (8000d1c <parseCommand+0xac>)
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <parseCommand+0xc0>)
 8000cc4:	f7ff fa8c 	bl	80001e0 <strcmp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01a      	beq.n	8000d04 <parseCommand+0x94>



	} else if (strcmp("showHour", command) == 0){
 8000cce:	4913      	ldr	r1, [pc, #76]	; (8000d1c <parseCommand+0xac>)
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <parseCommand+0xc4>)
 8000cd2:	f7ff fa85 	bl	80001e0 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d110      	bne.n	8000cfe <parseCommand+0x8e>
		parseTime();
 8000cdc:	f000 f836 	bl	8000d4c <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <parseCommand+0xc8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <parseCommand+0xcc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <parseCommand+0xd0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f000 f8b6 	bl	8000e68 <handleShowHour>
 8000cfc:	e002      	b.n	8000d04 <parseCommand+0x94>

	}
	else {
		Send("Fail: {Command not found!}\n\r");
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <parseCommand+0xd4>)
 8000d00:	f7ff fe8e 	bl	8000a20 <Send>
	}

	//handle picked command

	clearCommand();
 8000d04:	f000 f870 	bl	8000de8 <clearCommand>
	clearData();
 8000d08:	f000 f87e 	bl	8000e08 <clearData>
	Frame_busy = 0;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <parseCommand+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000158 	.word	0x20000158
 8000d20:	08008bcc 	.word	0x08008bcc
 8000d24:	08008bd4 	.word	0x08008bd4
 8000d28:	08008be0 	.word	0x08008be0
 8000d2c:	08008bec 	.word	0x08008bec
 8000d30:	08008bfc 	.word	0x08008bfc
 8000d34:	08008c08 	.word	0x08008c08
 8000d38:	20000120 	.word	0x20000120
 8000d3c:	20000121 	.word	0x20000121
 8000d40:	20000122 	.word	0x20000122
 8000d44:	08008c14 	.word	0x08008c14
 8000d48:	20000118 	.word	0x20000118

08000d4c <parseTime>:
void parseData(){


}

void parseTime(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <parseTime+0x44>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <parseTime+0x48>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <parseTime+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <parseTime+0x4c>)
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <parseTime+0x48>)
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <parseTime+0x44>)
 8000d6c:	490b      	ldr	r1, [pc, #44]	; (8000d9c <parseTime+0x50>)
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <parseTime+0x54>)
 8000d70:	f006 f928 	bl	8006fc4 <siscanf>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d103      	bne.n	8000d82 <parseTime+0x36>
		 Send("Success {Time parsed correctly} \r\n");
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <parseTime+0x58>)
 8000d7c:	f7ff fe50 	bl	8000a20 <Send>

	 } else {
		 Send("Fail: {Data not acceptable}\r\n");
	 }
}
 8000d80:	e002      	b.n	8000d88 <parseTime+0x3c>
		 Send("Fail: {Data not acceptable}\r\n");
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <parseTime+0x5c>)
 8000d84:	f7ff fe4c 	bl	8000a20 <Send>
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000120 	.word	0x20000120
 8000d94:	20000121 	.word	0x20000121
 8000d98:	20000122 	.word	0x20000122
 8000d9c:	08008c34 	.word	0x08008c34
 8000da0:	200003fc 	.word	0x200003fc
 8000da4:	08008c40 	.word	0x08008c40
 8000da8:	08008c64 	.word	0x08008c64

08000dac <parseIntData>:



int parseIntData(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
	int single_param = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	461a      	mov	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <parseIntData+0x30>)
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <parseIntData+0x34>)
 8000dbe:	f006 f901 	bl	8006fc4 <siscanf>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <parseIntData+0x20>
		return single_param;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	e002      	b.n	8000dd2 <parseIntData+0x26>
	}
	else {
			Send("Fail: {Data not acceptable}\r\n");
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <parseIntData+0x38>)
 8000dce:	f7ff fe27 	bl	8000a20 <Send>
	}


}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08008c84 	.word	0x08008c84
 8000de0:	200003fc 	.word	0x200003fc
 8000de4:	08008c64 	.word	0x08008c64

08000de8 <clearCommand>:


/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	command_busy = 0;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <clearCommand+0x18>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	2100      	movs	r1, #0
 8000df6:	4803      	ldr	r0, [pc, #12]	; (8000e04 <clearCommand+0x1c>)
 8000df8:	f006 f8c4 	bl	8006f84 <memset>

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000011d 	.word	0x2000011d
 8000e04:	20000158 	.word	0x20000158

08000e08 <clearData>:

void clearData(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	data_busy = 0;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <clearData+0x18>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8000e12:	227d      	movs	r2, #125	; 0x7d
 8000e14:	2100      	movs	r1, #0
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <clearData+0x1c>)
 8000e18:	f006 f8b4 	bl	8006f84 <memset>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000011e 	.word	0x2000011e
 8000e24:	200003fc 	.word	0x200003fc

08000e28 <handleSetClockMode>:


/* ===== HANDLERS FOR SPECIFIC COMMANDS ====== */


void handleSetClockMode(int mode){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <handleSetClockMode+0x14>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d107      	bne.n	8000e4c <handleSetClockMode+0x24>

				clock_mode = mode;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <handleSetClockMode+0x34>)
 8000e42:	701a      	strb	r2, [r3, #0]
				Send("Success: {Running in showHourMode}\r\n");
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <handleSetClockMode+0x38>)
 8000e46:	f7ff fdeb 	bl	8000a20 <Send>
 8000e4a:	e003      	b.n	8000e54 <handleSetClockMode+0x2c>

			}else {
				Send("Data Not Acceptable\r\n");
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <handleSetClockMode+0x3c>)
 8000e4e:	f7ff fde7 	bl	8000a20 <Send>





}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000078 	.word	0x20000078
 8000e60:	08008c88 	.word	0x08008c88
 8000e64:	08008cb0 	.word	0x08008cb0

08000e68 <handleShowHour>:

void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	460b      	mov	r3, r1
 8000e74:	71bb      	strb	r3, [r7, #6]
 8000e76:	4613      	mov	r3, r2
 8000e78:	717b      	strb	r3, [r7, #5]

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <handleShowHour+0x32>
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b16      	cmp	r3, #22
 8000e84:	d809      	bhi.n	8000e9a <handleShowHour+0x32>
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	2b3b      	cmp	r3, #59	; 0x3b
 8000e8a:	d806      	bhi.n	8000e9a <handleShowHour+0x32>
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	2b3b      	cmp	r3, #59	; 0x3b
 8000e90:	d803      	bhi.n	8000e9a <handleShowHour+0x32>

			 hour_displayed = 0;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <handleShowHour+0x44>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e003      	b.n	8000ea2 <handleShowHour+0x3a>
			} else {
				Send("Fail: {Data Not Acceptable} \r\n");
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <handleShowHour+0x48>)
 8000e9c:	f7ff fdc0 	bl	8000a20 <Send>
			}




}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000011f 	.word	0x2000011f
 8000eb0:	08008cc8 	.word	0x08008cc8

08000eb4 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	757b      	strb	r3, [r7, #21]


	//check if begining exists
	if(frame[0] == start_sign){
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <decodeFrame+0x160>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b24      	cmp	r3, #36	; 0x24
 8000ed0:	d105      	bne.n	8000ede <decodeFrame+0x2a>
		required_pass++;
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8000ed8:	4b4e      	ldr	r3, [pc, #312]	; (8001014 <decodeFrame+0x160>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <decodeFrame+0x164>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4a4b      	ldr	r2, [pc, #300]	; (8001014 <decodeFrame+0x160>)
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	2b23      	cmp	r3, #35	; 0x23
 8000eec:	d109      	bne.n	8000f02 <decodeFrame+0x4e>
		required_pass++;
 8000eee:	7d7b      	ldrb	r3, [r7, #21]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 8000ef4:	4b48      	ldr	r3, [pc, #288]	; (8001018 <decodeFrame+0x164>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3b01      	subs	r3, #1
 8000efc:	4a45      	ldr	r2, [pc, #276]	; (8001014 <decodeFrame+0x160>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e013      	b.n	8000f30 <decodeFrame+0x7c>
		if(frame[i] == '='){
 8000f08:	4a42      	ldr	r2, [pc, #264]	; (8001014 <decodeFrame+0x160>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b3d      	cmp	r3, #61	; 0x3d
 8000f12:	d10a      	bne.n	8000f2a <decodeFrame+0x76>
			required_pass++;
 8000f14:	7d7b      	ldrb	r3, [r7, #21]
 8000f16:	3301      	adds	r3, #1
 8000f18:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <decodeFrame+0x164>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	dbe4      	blt.n	8000f08 <decodeFrame+0x54>


   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d12b      	bne.n	8000f9c <decodeFrame+0xe8>
 8000f44:	7dba      	ldrb	r2, [r7, #22]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d027      	beq.n	8000f9c <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	e020      	b.n	8000f94 <decodeFrame+0xe0>
			//prevent memory leaks
			if(command_busy >= command_size){
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <decodeFrame+0x168>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da09      	bge.n	8000f72 <decodeFrame+0xbe>
				command_busy = 0;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <decodeFrame+0x168>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	2100      	movs	r1, #0
 8000f68:	482d      	ldr	r0, [pc, #180]	; (8001020 <decodeFrame+0x16c>)
 8000f6a:	f006 f80b 	bl	8006f84 <memset>
				i = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <decodeFrame+0x168>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	b2d1      	uxtb	r1, r2
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <decodeFrame+0x168>)
 8000f7e:	7011      	strb	r1, [r2, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4a24      	ldr	r2, [pc, #144]	; (8001014 <decodeFrame+0x160>)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <decodeFrame+0x16c>)
 8000f8c:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	7dbb      	ldrb	r3, [r7, #22]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	ddda      	ble.n	8000f52 <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8000f9c:	7d7b      	ldrb	r3, [r7, #21]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d133      	bne.n	800100a <decodeFrame+0x156>
 8000fa2:	7dfa      	ldrb	r2, [r7, #23]
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <decodeFrame+0x164>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d02c      	beq.n	800100a <decodeFrame+0x156>
		Send("Data exists!\r\n");
 8000fb0:	481c      	ldr	r0, [pc, #112]	; (8001024 <decodeFrame+0x170>)
 8000fb2:	f7ff fd35 	bl	8000a20 <Send>
		for(int i = data_idx; i <= frameLength - 1; i++){
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e01f      	b.n	8000ffc <decodeFrame+0x148>
			//prevent memory leaks
			if(data_busy >= data_size){
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <decodeFrame+0x174>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b7c      	cmp	r3, #124	; 0x7c
 8000fc4:	d909      	bls.n	8000fda <decodeFrame+0x126>
				data_busy = 0;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <decodeFrame+0x174>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 8000fcc:	227d      	movs	r2, #125	; 0x7d
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <decodeFrame+0x178>)
 8000fd2:	f005 ffd7 	bl	8006f84 <memset>
				i = data_idx;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <decodeFrame+0x174>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	b2d1      	uxtb	r1, r2
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <decodeFrame+0x174>)
 8000fe6:	7011      	strb	r1, [r2, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <decodeFrame+0x160>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <decodeFrame+0x178>)
 8000ff4:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <decodeFrame+0x164>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4293      	cmp	r3, r2
 8001008:	dbd8      	blt.n	8000fbc <decodeFrame+0x108>
		}

	}


}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000047c 	.word	0x2000047c
 8001018:	2000011a 	.word	0x2000011a
 800101c:	2000011d 	.word	0x2000011d
 8001020:	20000158 	.word	0x20000158
 8001024:	08008ce8 	.word	0x08008ce8
 8001028:	2000011e 	.word	0x2000011e
 800102c:	200003fc 	.word	0x200003fc

08001030 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <downloadFrame+0xe0>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <downloadFrame+0xe4>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	71fb      	strb	r3, [r7, #7]


		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b24      	cmp	r3, #36	; 0x24
 8001048:	d10b      	bne.n	8001062 <downloadFrame+0x32>
			memset(frame, 0x00, FRAME_SIZE); //reset frame
 800104a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104e:	2100      	movs	r1, #0
 8001050:	4831      	ldr	r0, [pc, #196]	; (8001118 <downloadFrame+0xe8>)
 8001052:	f005 ff97 	bl	8006f84 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <downloadFrame+0xec>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0x00;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <downloadFrame+0xf0>)
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]

		}
		//if frame found start downloading frame
		if(frame_found == 1){
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <downloadFrame+0xec>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d111      	bne.n	800108e <downloadFrame+0x5e>
			frameLength++;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <downloadFrame+0xf4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	3301      	adds	r3, #1
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <downloadFrame+0xf4>)
 8001076:	801a      	strh	r2, [r3, #0]
			//copy frame to analyze it
			frame[Frame_busy++] = byte; //download chars
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <downloadFrame+0xf0>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b291      	uxth	r1, r2
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <downloadFrame+0xf0>)
 8001084:	8011      	strh	r1, [r2, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <downloadFrame+0xe8>)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	5453      	strb	r3, [r2, r1]
		}

		//check if frame is not too long

		if(frameLength > FRAME_SIZE){
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <downloadFrame+0xf4>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001098:	d911      	bls.n	80010be <downloadFrame+0x8e>
			memset(frame, 0x00, FRAME_SIZE);
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	2100      	movs	r1, #0
 80010a0:	481d      	ldr	r0, [pc, #116]	; (8001118 <downloadFrame+0xe8>)
 80010a2:	f005 ff6f 	bl	8006f84 <memset>
			Frame_busy = 0;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <downloadFrame+0xf0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <downloadFrame+0xf4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <downloadFrame+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
			Send("Fail: Frame too long} \n\r");
 80010b8:	481b      	ldr	r0, [pc, #108]	; (8001128 <downloadFrame+0xf8>)
 80010ba:	f7ff fcb1 	bl	8000a20 <Send>
		//check if its actually a frame
		//todo


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b23      	cmp	r3, #35	; 0x23
 80010c2:	d110      	bne.n	80010e6 <downloadFrame+0xb6>
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <downloadFrame+0xec>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10c      	bne.n	80010e6 <downloadFrame+0xb6>
			frame_found = 0; //stop downloading chars
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <downloadFrame+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <downloadFrame+0xf0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]


		  //if frame is received, analyze it
			decodeFrame();
 80010d8:	f7ff feec 	bl	8000eb4 <decodeFrame>
			parseCommand();
 80010dc:	f7ff fdc8 	bl	8000c70 <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <downloadFrame+0xf4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]

		 }

		//control ringbuffer
		Rx_busy++;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <downloadFrame+0xe0>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <downloadFrame+0xe0>)
 80010f2:	801a      	strh	r2, [r3, #0]
		if(Rx_busy >= RX_BUFF_SIZE){
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <downloadFrame+0xe0>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fe:	d302      	bcc.n	8001106 <downloadFrame+0xd6>
			Rx_busy = 0;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <downloadFrame+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]
		}


}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000112 	.word	0x20000112
 8001114:	20000580 	.word	0x20000580
 8001118:	2000047c 	.word	0x2000047c
 800111c:	2000011c 	.word	0x2000011c
 8001120:	20000118 	.word	0x20000118
 8001124:	2000011a 	.word	0x2000011a
 8001128:	08008cf8 	.word	0x08008cf8

0800112c <buttonHandler>:





void buttonHandler() {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	481c      	ldr	r0, [pc, #112]	; (80011a8 <buttonHandler+0x7c>)
 8001136:	f001 f909 	bl	800234c <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d113      	bne.n	8001168 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <buttonHandler+0x80>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <buttonHandler+0x80>)
 8001152:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <buttonHandler+0x84>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <buttonHandler+0x88>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8001160:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001164:	f000 fcaa 	bl	8001abc <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <buttonHandler+0x80>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10c      	bne.n	800118a <buttonHandler+0x5e>
			  if(x1hz == 1){
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <buttonHandler+0x84>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d114      	bne.n	80011a2 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <buttonHandler+0x7c>)
 800117e:	f001 f93b 	bl	80023f8 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <buttonHandler+0x84>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001188:	e00b      	b.n	80011a2 <buttonHandler+0x76>
			  if(x4hz == 1){
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <buttonHandler+0x88>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <buttonHandler+0x7c>)
 8001198:	f001 f92e 	bl	80023f8 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <buttonHandler+0x88>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	48000800 	.word	0x48000800
 80011ac:	2000010e 	.word	0x2000010e
 80011b0:	2000010c 	.word	0x2000010c
 80011b4:	2000010d 	.word	0x2000010d

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	UART_init();
 80011be:	f7ff fc07 	bl	80009d0 <UART_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 fc15 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f89f 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f7ff fa73 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ce:	f000 fb6b 	bl	80018a8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80011d2:	f000 fab9 	bl	8001748 <MX_TIM6_Init>
  MX_TIM7_Init();
 80011d6:	f000 faef 	bl	80017b8 <MX_TIM7_Init>
  MX_RTC_Init();
 80011da:	f000 f90b 	bl	80013f4 <MX_RTC_Init>

  /* ===== RTC set time ==== */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  setTime(sTime, 17, 26, 0);
 80011de:	2300      	movs	r3, #0
 80011e0:	9303      	str	r3, [sp, #12]
 80011e2:	231a      	movs	r3, #26
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2311      	movs	r3, #17
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f2:	f7ff f8e3 	bl	80003bc <setTime>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <main+0x110>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <main+0x114>)
 8001200:	4413      	add	r3, r2
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	4832      	ldr	r0, [pc, #200]	; (80012d0 <main+0x118>)
 8001208:	f004 fb1e 	bl	8005848 <HAL_UART_Receive_IT>


  Send("Hello, im STM32!\r\n");
 800120c:	4831      	ldr	r0, [pc, #196]	; (80012d4 <main+0x11c>)
 800120e:	f7ff fc07 	bl	8000a20 <Send>

  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <main+0x120>)
 8001214:	f003 fe10 	bl	8004e38 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <main+0x120>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <main+0x124>)
 8001220:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <main+0x128>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d116      	bne.n	800125a <main+0xa2>
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <main+0x12c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d112      	bne.n	800125a <main+0xa2>
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <main+0x130>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00d      	beq.n	800125a <main+0xa2>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <main+0x130>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <main+0x134>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <main+0x138>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	f7ff f8d7 	bl	8000408 <displayHour>
	   }


	 buttonHandler();
 800125a:	f7ff ff67 	bl	800112c <buttonHandler>


	 while(uart_ready()){
 800125e:	e001      	b.n	8001264 <main+0xac>
		 //downloadCmd();
		 downloadFrame();
 8001260:	f7ff fee6 	bl	8001030 <downloadFrame>
	 while(uart_ready()){
 8001264:	f7ff fcbc 	bl	8000be0 <uart_ready>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f8      	bne.n	8001260 <main+0xa8>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <main+0x13c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d102      	bne.n	800127e <main+0xc6>
		 handleBlinkCommand();
 8001278:	f7ff fb6e 	bl	8000958 <handleBlinkCommand>
 800127c:	e018      	b.n	80012b0 <main+0xf8>
	 } else if(blink_mode == 2){
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <main+0x13c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d113      	bne.n	80012b0 <main+0xf8>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <main+0x120>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <main+0x124>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <main+0x140>)
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	b292      	uxth	r2, r2
 800129a:	4293      	cmp	r3, r2
 800129c:	d308      	bcc.n	80012b0 <main+0xf8>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4816      	ldr	r0, [pc, #88]	; (80012fc <main+0x144>)
 80012a2:	f001 f8a9 	bl	80023f8 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <main+0x120>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <main+0x124>)
 80012ae:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <main+0x148>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d1b3      	bne.n	8001222 <main+0x6a>


		 delayMs(delayTime);
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <main+0x14c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fb31 	bl	8000928 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 80012c6:	e7ac      	b.n	8001222 <main+0x6a>
 80012c8:	20000110 	.word	0x20000110
 80012cc:	20000580 	.word	0x20000580
 80012d0:	2000081c 	.word	0x2000081c
 80012d4:	08008d14 	.word	0x08008d14
 80012d8:	20000784 	.word	0x20000784
 80012dc:	20000128 	.word	0x20000128
 80012e0:	20000078 	.word	0x20000078
 80012e4:	2000011f 	.word	0x2000011f
 80012e8:	20000120 	.word	0x20000120
 80012ec:	20000121 	.word	0x20000121
 80012f0:	20000122 	.word	0x20000122
 80012f4:	20000123 	.word	0x20000123
 80012f8:	200001d8 	.word	0x200001d8
 80012fc:	48000800 	.word	0x48000800
 8001300:	2000012c 	.word	0x2000012c
 8001304:	2000012e 	.word	0x2000012e

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	; 0x98
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fe34 	bl	8006f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2258      	movs	r2, #88	; 0x58
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fe26 	bl	8006f84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001338:	230a      	movs	r3, #10
 800133a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800135a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800135e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f88f 	bl	8002490 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001378:	f000 f82c 	bl	80013d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001392:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f8eb 	bl	8003574 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80013a4:	f000 f816 	bl	80013d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SystemClock_Config+0xc8>)
 80013aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbb5 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013c4:	f000 f806 	bl	80013d4 <Error_Handler>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3798      	adds	r7, #152	; 0x98
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	00010002 	.word	0x00010002

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>

080013de <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_RTC_Init+0x64>)
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_RTC_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_RTC_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_RTC_Init+0x64>)
 800141a:	227f      	movs	r2, #127	; 0x7f
 800141c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_RTC_Init+0x64>)
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_RTC_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_RTC_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_RTC_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <MX_RTC_Init+0x64>)
 8001438:	f002 ff6e 	bl	8004318 <HAL_RTC_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001442:	f7ff ffc7 	bl	80013d4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <MX_RTC_Init+0x64>)
 800144e:	f003 f9c3 	bl	80047d8 <HAL_RTC_GetTime>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200003dc 	.word	0x200003dc
 800145c:	40002800 	.word	0x40002800

08001460 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_RTC_MspInit+0x50>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d119      	bne.n	80014a6 <HAL_RTC_MspInit+0x46>
 8001472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001476:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001480:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RTC_MspInit+0x54>)
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	461a      	mov	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2003      	movs	r0, #3
 800149c:	f000 fc22 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 fc4b 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40002800 	.word	0x40002800
 80014b4:	10908100 	.word	0x10908100

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ee:	2007      	movs	r0, #7
 80014f0:	f000 fbd8 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 800154c:	f7ff f998 	bl	8000880 <delay_1hz>
	delay_4hz();
 8001550:	f7ff f9b2 	bl	80008b8 <delay_4hz>

	if(blink_mode == 1){
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <SysTick_Handler+0x2c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <SysTick_Handler+0x22>
		led_delay++;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SysTick_Handler+0x30>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Handler+0x30>)
 8001568:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f000 fa87 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000123 	.word	0x20000123
 8001578:	20000144 	.word	0x20000144

0800157c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <RTC_WKUP_IRQHandler+0x10>)
 8001582:	f003 fb53 	bl	8004c2c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200003dc 	.word	0x200003dc

08001590 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <USART2_IRQHandler+0x10>)
 8001596:	f004 f9a5 	bl	80058e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000081c 	.word	0x2000081c

080015a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ac:	f000 ff4c 	bl	8002448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TIM6_DAC_IRQHandler+0x10>)
 80015ba:	f003 fce9 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000784 	.word	0x20000784

080015c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM7_IRQHandler+0x10>)
 80015ce:	f003 fcdf 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200007d0 	.word	0x200007d0

080015dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
	}

return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e009      	b.n	800163c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf1      	blt.n	8001628 <_write+0x12>
	}
	return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_close>:

int _close(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001676:	605a      	str	r2, [r3, #4]
	return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_isatty>:

int _isatty(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f005 fc22 	bl	8006f30 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20010000 	.word	0x20010000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000148 	.word	0x20000148
 8001720:	200008b8 	.word	0x200008b8

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_TIM6_Init+0x68>)
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <MX_TIM6_Init+0x6c>)
 800175c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_TIM6_Init+0x68>)
 8001760:	f242 720f 	movw	r2, #9999	; 0x270f
 8001764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_TIM6_Init+0x68>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_TIM6_Init+0x68>)
 800176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001772:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_TIM6_Init+0x68>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_TIM6_Init+0x68>)
 800177c:	f003 fa7a 	bl	8004c74 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001786:	f7ff fe25 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_TIM6_Init+0x68>)
 8001798:	f003 fdea 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80017a2:	f7ff fe17 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000784 	.word	0x20000784
 80017b4:	40001000 	.word	0x40001000

080017b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_TIM7_Init+0x64>)
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_TIM7_Init+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_TIM7_Init+0x64>)
 80017d0:	2247      	movs	r2, #71	; 0x47
 80017d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_TIM7_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_TIM7_Init+0x64>)
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_TIM7_Init+0x64>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM7_Init+0x64>)
 80017ea:	f003 fa43 	bl	8004c74 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017f4:	f7ff fdee 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM7_Init+0x64>)
 8001806:	f003 fdb3 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001810:	f7ff fde0 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200007d0 	.word	0x200007d0
 8001820:	40001400 	.word	0x40001400

08001824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d114      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2036      	movs	r0, #54	; 0x36
 8001854:	f000 fa46 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001858:	2036      	movs	r0, #54	; 0x36
 800185a:	f000 fa6f 	bl	8001d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800185e:	e018      	b.n	8001892 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d113      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2037      	movs	r0, #55	; 0x37
 8001888:	f000 fa2c 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800188c:	2037      	movs	r0, #55	; 0x37
 800188e:	f000 fa55 	bl	8001d3c <HAL_NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40001000 	.word	0x40001000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40001400 	.word	0x40001400

080018a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <MX_USART2_UART_Init+0x5c>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_USART2_UART_Init+0x58>)
 80018ec:	f003 feac 	bl	8005648 <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018f6:	f7ff fd6d 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000081c 	.word	0x2000081c
 8001904:	40004400 	.word	0x40004400

08001908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <HAL_UART_MspInit+0x8c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d130      	bne.n	800198c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x90>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_UART_MspInit+0x90>)
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x90>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x90>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x90>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_UART_MspInit+0x90>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800195a:	230c      	movs	r3, #12
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196a:	2307      	movs	r3, #7
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f000 fa7c 	bl	8001e74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2026      	movs	r0, #38	; 0x26
 8001982:	f000 f9af 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001986:	2026      	movs	r0, #38	; 0x26
 8001988:	f000 f9d8 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40004400 	.word	0x40004400
 8001998:	40021000 	.word	0x40021000

0800199c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a2:	490e      	ldr	r1, [pc, #56]	; (80019dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <LoopForever+0xe>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b8:	4c0b      	ldr	r4, [pc, #44]	; (80019e8 <LoopForever+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019c6:	f7ff fead 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f005 fab7 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ce:	f7ff fbf3 	bl	80011b8 <main>

080019d2 <LoopForever>:

LoopForever:
    b LoopForever
 80019d2:	e7fe      	b.n	80019d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80019e0:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 80019e4:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80019e8:	200008b4 	.word	0x200008b4

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x28>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x28>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f94f 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fd54 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000

08001a1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f996 	bl	8001d6c <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f944 	bl	8001ce4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000007c 	.word	0x2000007c
 8001a74:	20000084 	.word	0x20000084
 8001a78:	20000080 	.word	0x20000080

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000084 	.word	0x20000084
 8001aa0:	200008a0 	.word	0x200008a0

08001aa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200008a0 	.word	0x200008a0

08001abc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000084 	.word	0x20000084

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d00f      	beq.n	8001cd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b06      	cmp	r3, #6
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d009      	beq.n	8001cd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d006      	beq.n	8001cd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d003      	beq.n	8001cd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cca:	21ac      	movs	r1, #172	; 0xac
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001cce:	f7ff fb86 	bl	80013de <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff16 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	08008d28 	.word	0x08008d28

08001ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d903      	bls.n	8001d04 <HAL_NVIC_SetPriority+0x20>
 8001cfc:	21c4      	movs	r1, #196	; 0xc4
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <HAL_NVIC_SetPriority+0x54>)
 8001d00:	f7ff fb6d 	bl	80013de <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	d903      	bls.n	8001d12 <HAL_NVIC_SetPriority+0x2e>
 8001d0a:	21c5      	movs	r1, #197	; 0xc5
 8001d0c:	480a      	ldr	r0, [pc, #40]	; (8001d38 <HAL_NVIC_SetPriority+0x54>)
 8001d0e:	f7ff fb66 	bl	80013de <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d12:	f7ff ff1b 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f7ff ff6b 	bl	8001bf8 <NVIC_EncodePriority>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff3a 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08008d28 	.word	0x08008d28

08001d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da03      	bge.n	8001d56 <HAL_NVIC_EnableIRQ+0x1a>
 8001d4e:	21d8      	movs	r1, #216	; 0xd8
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_NVIC_EnableIRQ+0x2c>)
 8001d52:	f7ff fb44 	bl	80013de <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff04 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08008d28 	.word	0x08008d28

08001d6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff73 	bl	8001c60 <SysTick_Config>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d008      	beq.n	8001da8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e020      	b.n	8001dea <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 020e 	bic.w	r2, r2, #14
 8001db6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d005      	beq.n	8001e18 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e027      	b.n	8001e68 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020e 	bic.w	r2, r2, #14
 8001e26:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
    } 
  }
  return status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <HAL_GPIO_Init+0x104>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01b      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a39      	ldr	r2, [pc, #228]	; (8001f7c <HAL_GPIO_Init+0x108>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d017      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <HAL_GPIO_Init+0x10c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_GPIO_Init+0x110>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00f      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a36      	ldr	r2, [pc, #216]	; (8001f88 <HAL_GPIO_Init+0x114>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x118>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_GPIO_Init+0x11c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x56>
 8001ec2:	21b2      	movs	r1, #178	; 0xb2
 8001ec4:	4833      	ldr	r0, [pc, #204]	; (8001f94 <HAL_GPIO_Init+0x120>)
 8001ec6:	f7ff fa8a 	bl	80013de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x6c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x74>
 8001ee0:	21b3      	movs	r1, #179	; 0xb3
 8001ee2:	482c      	ldr	r0, [pc, #176]	; (8001f94 <HAL_GPIO_Init+0x120>)
 8001ee4:	f7ff fa7b 	bl	80013de <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 821c 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	f000 8217 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b11      	cmp	r3, #17
 8001f02:	f000 8212 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f000 820d 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	f000 8208 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001f22:	f000 8202 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001f2e:	f000 81fc 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001f3a:	f000 81f6 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001f46:	f000 81f0 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001f52:	f000 81ea 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001f5e:	f000 81e4 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	f000 81df 	beq.w	800232a <HAL_GPIO_Init+0x4b6>
 8001f6c:	21b4      	movs	r1, #180	; 0xb4
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <HAL_GPIO_Init+0x120>)
 8001f70:	f7ff fa35 	bl	80013de <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f74:	e1d9      	b.n	800232a <HAL_GPIO_Init+0x4b6>
 8001f76:	bf00      	nop
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	48001c00 	.word	0x48001c00
 8001f94:	08008d64 	.word	0x08008d64
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 81ba 	beq.w	8002324 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d005      	beq.n	8001fc8 <HAL_GPIO_Init+0x154>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d140      	bne.n	800204a <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_GPIO_Init+0x174>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x174>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x174>
 8001fe0:	21c3      	movs	r1, #195	; 0xc3
 8001fe2:	4894      	ldr	r0, [pc, #592]	; (8002234 <HAL_GPIO_Init+0x3c0>)
 8001fe4:	f7ff f9fb 	bl	80013de <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800201e:	2201      	movs	r2, #1
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 0201 	and.w	r2, r3, #1
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b03      	cmp	r3, #3
 8002054:	d027      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 800206e:	21d4      	movs	r1, #212	; 0xd4
 8002070:	4870      	ldr	r0, [pc, #448]	; (8002234 <HAL_GPIO_Init+0x3c0>)
 8002072:	f7ff f9b4 	bl	80013de <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d157      	bne.n	8002162 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a5e      	ldr	r2, [pc, #376]	; (8002238 <HAL_GPIO_Init+0x3c4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01b      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <HAL_GPIO_Init+0x3c8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_GPIO_Init+0x3cc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_GPIO_Init+0x3d0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_GPIO_Init+0x3d4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00b      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a59      	ldr	r2, [pc, #356]	; (800224c <HAL_GPIO_Init+0x3d8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_GPIO_Init+0x3dc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x286>
 80020f2:	21e2      	movs	r1, #226	; 0xe2
 80020f4:	484f      	ldr	r0, [pc, #316]	; (8002234 <HAL_GPIO_Init+0x3c0>)
 80020f6:	f7ff f972 	bl	80013de <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d90b      	bls.n	800211a <HAL_GPIO_Init+0x2a6>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b0e      	cmp	r3, #14
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x2a6>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2a6>
 8002112:	21e3      	movs	r1, #227	; 0xe3
 8002114:	4847      	ldr	r0, [pc, #284]	; (8002234 <HAL_GPIO_Init+0x3c0>)
 8002116:	f7ff f962 	bl	80013de <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80c0 	beq.w	8002324 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_GPIO_Init+0x3e0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_GPIO_Init+0x3e0>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <HAL_GPIO_Init+0x3e0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x3e4>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021e6:	d039      	beq.n	800225c <HAL_GPIO_Init+0x3e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_GPIO_Init+0x3c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_Init+0x3bc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_GPIO_Init+0x3c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_Init+0x3b8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_GPIO_Init+0x3cc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x3b4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_GPIO_Init+0x3d0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x3b0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_GPIO_Init+0x3d4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x3ac>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_GPIO_Init+0x3d8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x3a8>
 8002218:	2306      	movs	r3, #6
 800221a:	e020      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 800221c:	2307      	movs	r3, #7
 800221e:	e01e      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 8002220:	2305      	movs	r3, #5
 8002222:	e01c      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 8002224:	2304      	movs	r3, #4
 8002226:	e01a      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 8002228:	2303      	movs	r3, #3
 800222a:	e018      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 800222c:	2302      	movs	r3, #2
 800222e:	e016      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 8002230:	2301      	movs	r3, #1
 8002232:	e014      	b.n	800225e <HAL_GPIO_Init+0x3ea>
 8002234:	08008d64 	.word	0x08008d64
 8002238:	48000400 	.word	0x48000400
 800223c:	48000800 	.word	0x48000800
 8002240:	48000c00 	.word	0x48000c00
 8002244:	48001000 	.word	0x48001000
 8002248:	48001400 	.word	0x48001400
 800224c:	48001800 	.word	0x48001800
 8002250:	48001c00 	.word	0x48001c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	2300      	movs	r3, #0
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	f002 0203 	and.w	r2, r2, #3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4093      	lsls	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226e:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x4d0>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_GPIO_Init+0x4d4>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f ae2f 	bne.w	8001f98 <HAL_GPIO_Init+0x124>
  }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40010000 	.word	0x40010000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_GPIO_ReadPin+0x1c>
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_GPIO_ReadPin+0x26>
 8002368:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_GPIO_ReadPin+0x48>)
 800236e:	f7ff f836 	bl	80013de <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e001      	b.n	8002388 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	08008d64 	.word	0x08008d64

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <HAL_GPIO_WritePin+0x20>
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_GPIO_WritePin+0x2a>
 80023b8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <HAL_GPIO_WritePin+0x5c>)
 80023be:	f7ff f80e 	bl	80013de <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023c2:	787b      	ldrb	r3, [r7, #1]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_WritePin+0x40>
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d004      	beq.n	80023d8 <HAL_GPIO_WritePin+0x40>
 80023ce:	f240 11a5 	movw	r1, #421	; 0x1a5
 80023d2:	4808      	ldr	r0, [pc, #32]	; (80023f4 <HAL_GPIO_WritePin+0x5c>)
 80023d4:	f7ff f803 	bl	80013de <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08008d64 	.word	0x08008d64

080023f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_GPIO_TogglePin+0x1c>
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <HAL_GPIO_TogglePin+0x26>
 8002414:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <HAL_GPIO_TogglePin+0x4c>)
 800241a:	f7fe ffe0 	bl	80013de <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43d9      	mvns	r1, r3
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	400b      	ands	r3, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	08008d64 	.word	0x08008d64

08002448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f806 	bl	8002478 <HAL_GPIO_EXTI_Callback>
  }
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002496:	af00      	add	r7, sp, #0
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f001 b85e 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024ec:	f240 114b 	movw	r1, #331	; 0x14b
 80024f0:	48be      	ldr	r0, [pc, #760]	; (80027ec <HAL_RCC_OscConfig+0x35c>)
 80024f2:	f7fe ff74 	bl	80013de <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8178 	beq.w	80027f6 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCC_OscConfig+0xa2>
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251a:	d00a      	beq.n	8002532 <HAL_RCC_OscConfig+0xa2>
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002526:	d004      	beq.n	8002532 <HAL_RCC_OscConfig+0xa2>
 8002528:	f240 1151 	movw	r1, #337	; 0x151
 800252c:	48af      	ldr	r0, [pc, #700]	; (80027ec <HAL_RCC_OscConfig+0x35c>)
 800252e:	f7fe ff56 	bl	80013de <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002532:	4baf      	ldr	r3, [pc, #700]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00c      	beq.n	8002558 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800253e:	4bac      	ldr	r3, [pc, #688]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d159      	bne.n	80025fe <HAL_RCC_OscConfig+0x16e>
 800254a:	4ba9      	ldr	r3, [pc, #676]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002556:	d152      	bne.n	80025fe <HAL_RCC_OscConfig+0x16e>
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800256c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0xfa>
 8002584:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x126>
 800258a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025b2:	4b8f      	ldr	r3, [pc, #572]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80025be:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80025c2:	fa92 f2a2 	rbit	r2, r2
 80025c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80025ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025ce:	fab2 f282 	clz	r2, r2
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f002 021f 	and.w	r2, r2, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8104 	beq.w	80027f4 <HAL_RCC_OscConfig+0x364>
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80fe 	bne.w	80027f4 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f000 bfb4 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x188>
 800260a:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a78      	ldr	r2, [pc, #480]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e030      	b.n	800267a <HAL_RCC_OscConfig+0x1ea>
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x1ac>
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a72      	ldr	r2, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6f      	ldr	r2, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01e      	b.n	800267a <HAL_RCC_OscConfig+0x1ea>
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x1d2>
 8002648:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a68      	ldr	r2, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 800264e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a65      	ldr	r2, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	e00b      	b.n	800267a <HAL_RCC_OscConfig+0x1ea>
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d059      	beq.n	8002738 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fa0e 	bl	8001aa4 <HAL_GetTick>
 8002688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268e:	f7ff fa09 	bl	8001aa4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d902      	bls.n	80026a4 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	f000 bf61 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 80026a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80026b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_RCC_OscConfig+0x246>
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x272>
 80026d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026fe:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002706:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800270a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002716:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ab      	beq.n	800268e <HAL_RCC_OscConfig+0x1fe>
 8002736:	e05e      	b.n	80027f6 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f9b4 	bl	8001aa4 <HAL_GetTick>
 800273c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002742:	f7ff f9af 	bl	8001aa4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d902      	bls.n	8002758 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	f000 bf07 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800276c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x2fa>
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x326>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800279e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_OscConfig+0x360>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80027be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80027ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ab      	bne.n	8002742 <HAL_RCC_OscConfig+0x2b2>
 80027ea:	e004      	b.n	80027f6 <HAL_RCC_OscConfig+0x366>
 80027ec:	08008da0 	.word	0x08008da0
 80027f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 818e 	beq.w	8002b22 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_RCC_OscConfig+0x394>
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d004      	beq.n	8002824 <HAL_RCC_OscConfig+0x394>
 800281a:	f240 1189 	movw	r1, #393	; 0x189
 800281e:	48a8      	ldr	r0, [pc, #672]	; (8002ac0 <HAL_RCC_OscConfig+0x630>)
 8002820:	f7fe fddd 	bl	80013de <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b1f      	cmp	r3, #31
 800282c:	d904      	bls.n	8002838 <HAL_RCC_OscConfig+0x3a8>
 800282e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002832:	48a3      	ldr	r0, [pc, #652]	; (8002ac0 <HAL_RCC_OscConfig+0x630>)
 8002834:	f7fe fdd3 	bl	80013de <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002838:	4ba2      	ldr	r3, [pc, #648]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002844:	4b9f      	ldr	r3, [pc, #636]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d16d      	bne.n	800292c <HAL_RCC_OscConfig+0x49c>
 8002850:	4b9c      	ldr	r3, [pc, #624]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285c:	d166      	bne.n	800292c <HAL_RCC_OscConfig+0x49c>
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002870:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0x3fe>
 8002888:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e013      	b.n	80028b6 <HAL_RCC_OscConfig+0x426>
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028b2:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2202      	movs	r2, #2
 80028b8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80028bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80028c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_RCC_OscConfig+0x468>
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f000 be37 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	21f8      	movs	r1, #248	; 0xf8
 8002908:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002910:	fa91 f1a1 	rbit	r1, r1
 8002914:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002918:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800291c:	fab1 f181 	clz	r1, r1
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	408b      	lsls	r3, r1
 8002924:	4967      	ldr	r1, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e0fa      	b.n	8002b22 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8085 	beq.w	8002a42 <HAL_RCC_OscConfig+0x5b2>
 8002938:	2301      	movs	r3, #1
 800293a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800294a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	461a      	mov	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff f89e 	bl	8001aa4 <HAL_GetTick>
 8002968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff f899 	bl	8001aa4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	f000 bdf1 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002996:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x524>
 80029ae:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0x54c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2202      	movs	r2, #2
 80029de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029e2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80029ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029f2:	fab2 f282 	clz	r2, r2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f042 0220 	orr.w	r2, r2, #32
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f002 021f 	and.w	r2, r2, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0af      	beq.n	800296e <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	21f8      	movs	r1, #248	; 0xf8
 8002a1e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002a26:	fa91 f1a1 	rbit	r1, r1
 8002a2a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a32:	fab1 f181 	clz	r1, r1
 8002a36:	b2c9      	uxtb	r1, r1
 8002a38:	408b      	lsls	r3, r1
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_OscConfig+0x692>
 8002a42:	2301      	movs	r3, #1
 8002a44:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f819 	bl	8001aa4 <HAL_GetTick>
 8002a72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff f814 	bl	8001aa4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bd6c 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002aa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x638>
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <HAL_RCC_OscConfig+0x634>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	e018      	b.n	8002af0 <HAL_RCC_OscConfig+0x660>
 8002abe:	bf00      	nop
 8002ac0:	08008da0 	.word	0x08008da0
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ae0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002aec:	4bc0      	ldr	r3, [pc, #768]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2202      	movs	r2, #2
 8002af2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002af6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002afa:	fa92 f2a2 	rbit	r2, r2
 8002afe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002b02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1aa      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80e7 	beq.w	8002d00 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_OscConfig+0x6c0>
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d004      	beq.n	8002b50 <HAL_RCC_OscConfig+0x6c0>
 8002b46:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8002b4a:	48aa      	ldr	r0, [pc, #680]	; (8002df4 <HAL_RCC_OscConfig+0x964>)
 8002b4c:	f7fe fc47 	bl	80013de <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d066      	beq.n	8002c28 <HAL_RCC_OscConfig+0x798>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b9f      	ldr	r3, [pc, #636]	; (8002df8 <HAL_RCC_OscConfig+0x968>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2301      	movs	r3, #1
 8002b82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe ff8e 	bl	8001aa4 <HAL_GetTick>
 8002b88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe ff89 	bl	8001aa4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	f000 bce1 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be8:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	6019      	str	r1, [r3, #0]
 8002bf4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f1a3 	rbit	r1, r3
 8002bfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c02:	6019      	str	r1, [r3, #0]
  return result;
 8002c04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0b3      	beq.n	8002b8e <HAL_RCC_OscConfig+0x6fe>
 8002c26:	e06b      	b.n	8002d00 <HAL_RCC_OscConfig+0x870>
 8002c28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c3e:	601a      	str	r2, [r3, #0]
  return result;
 8002c40:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x968>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe ff23 	bl	8001aa4 <HAL_GetTick>
 8002c5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe ff1e 	bl	8001aa4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d902      	bls.n	8002c7a <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f000 bc76 	b.w	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002c7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c7e:	2202      	movs	r2, #2
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cca:	2102      	movs	r1, #2
 8002ccc:	6019      	str	r1, [r3, #0]
 8002cce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f1a3 	rbit	r1, r3
 8002cd8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cdc:	6019      	str	r1, [r3, #0]
  return result;
 8002cde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1b1      	bne.n	8002c64 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8171 	beq.w	8002ff2 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_RCC_OscConfig+0x8ae>
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_OscConfig+0x8ae>
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d004      	beq.n	8002d3e <HAL_RCC_OscConfig+0x8ae>
 8002d34:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8002d38:	482e      	ldr	r0, [pc, #184]	; (8002df4 <HAL_RCC_OscConfig+0x964>)
 8002d3a:	f7fe fb50 	bl	80013de <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d112      	bne.n	8002d70 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	61d3      	str	r3, [r2, #28]
 8002d56:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_OscConfig+0x96c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11a      	bne.n	8002db2 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7c:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <HAL_RCC_OscConfig+0x96c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x96c>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fe8c 	bl	8001aa4 <HAL_GetTick>
 8002d8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fe87 	bl	8001aa4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e3df      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x96c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ef      	beq.n	8002d92 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x93a>
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e038      	b.n	8002e3c <HAL_RCC_OscConfig+0x9ac>
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d115      	bne.n	8002e00 <HAL_RCC_OscConfig+0x970>
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <HAL_RCC_OscConfig+0x960>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	e026      	b.n	8002e3c <HAL_RCC_OscConfig+0x9ac>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08008da0 	.word	0x08008da0
 8002df8:	10908120 	.word	0x10908120
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x994>
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a5d      	ldr	r2, [pc, #372]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6213      	str	r3, [r2, #32]
 8002e16:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a5a      	ldr	r2, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6213      	str	r3, [r2, #32]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0x9ac>
 8002e24:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a56      	ldr	r2, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002e36:	f023 0304 	bic.w	r3, r3, #4
 8002e3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d064      	beq.n	8002f10 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fe2d 	bl	8001aa4 <HAL_GetTick>
 8002e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe fe28 	bl	8001aa4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e37e      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002e68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xa28>
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	e00d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xa44>
 8002eb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002ed8:	2102      	movs	r1, #2
 8002eda:	6011      	str	r1, [r2, #0]
 8002edc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	fa92 f1a2 	rbit	r1, r2
 8002ee6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002eea:	6011      	str	r1, [r2, #0]
  return result;
 8002eec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	fab2 f282 	clz	r2, r2
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f002 021f 	and.w	r2, r2, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0a0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x9c0>
 8002f0e:	e066      	b.n	8002fde <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f10:	f7fe fdc8 	bl	8001aa4 <HAL_GetTick>
 8002f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fdc3 	bl	8001aa4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e319      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
 8002f32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f36:	2202      	movs	r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f4e:	2202      	movs	r2, #2
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f60:	601a      	str	r2, [r3, #0]
  return result;
 8002f62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0xaf8>
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <HAL_RCC_OscConfig+0xaf4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	e010      	b.n	8002fa4 <HAL_RCC_OscConfig+0xb14>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4bad      	ldr	r3, [pc, #692]	; (8003258 <HAL_RCC_OscConfig+0xdc8>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002fa8:	2102      	movs	r1, #2
 8002faa:	6011      	str	r1, [r2, #0]
 8002fac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	fa92 f1a2 	rbit	r1, r2
 8002fb6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fba:	6011      	str	r1, [r2, #0]
  return result;
 8002fbc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d19d      	bne.n	8002f1a <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fde:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b9c      	ldr	r3, [pc, #624]	; (8003258 <HAL_RCC_OscConfig+0xdc8>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a9b      	ldr	r2, [pc, #620]	; (8003258 <HAL_RCC_OscConfig+0xdc8>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <HAL_RCC_OscConfig+0xb8a>
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d009      	beq.n	800301a <HAL_RCC_OscConfig+0xb8a>
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d004      	beq.n	800301a <HAL_RCC_OscConfig+0xb8a>
 8003010:	f240 213a 	movw	r1, #570	; 0x23a
 8003014:	4891      	ldr	r0, [pc, #580]	; (800325c <HAL_RCC_OscConfig+0xdcc>)
 8003016:	f7fe f9e2 	bl	80013de <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 829f 	beq.w	8003564 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003026:	4b8c      	ldr	r3, [pc, #560]	; (8003258 <HAL_RCC_OscConfig+0xdc8>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	f000 826c 	beq.w	800350c <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	f040 81e4 	bne.w	8003408 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304a:	d00a      	beq.n	8003062 <HAL_RCC_OscConfig+0xbd2>
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003056:	d004      	beq.n	8003062 <HAL_RCC_OscConfig+0xbd2>
 8003058:	f240 2143 	movw	r1, #579	; 0x243
 800305c:	487f      	ldr	r0, [pc, #508]	; (800325c <HAL_RCC_OscConfig+0xdcc>)
 800305e:	f7fe f9be 	bl	80013de <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d058      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003076:	d052      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003082:	d04c      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800308e:	d046      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309a:	d040      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030a6:	d03a      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030b2:	d034      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030be:	d02e      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ca:	d028      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030d6:	d022      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030e2:	d01c      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030ee:	d016      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fa:	d010      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003106:	d00a      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003112:	d004      	beq.n	800311e <HAL_RCC_OscConfig+0xc8e>
 8003114:	f44f 7111 	mov.w	r1, #580	; 0x244
 8003118:	4850      	ldr	r0, [pc, #320]	; (800325c <HAL_RCC_OscConfig+0xdcc>)
 800311a:	f7fe f960 	bl	80013de <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d04f      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b01      	cmp	r3, #1
 8003130:	d04a      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b02      	cmp	r3, #2
 800313a:	d045      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b03      	cmp	r3, #3
 8003144:	d040      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2b04      	cmp	r3, #4
 800314e:	d03b      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b05      	cmp	r3, #5
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b06      	cmp	r3, #6
 8003162:	d031      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b07      	cmp	r3, #7
 800316c:	d02c      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	2b08      	cmp	r3, #8
 8003176:	d027      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b09      	cmp	r3, #9
 8003180:	d022      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b0a      	cmp	r3, #10
 800318a:	d01d      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b0b      	cmp	r3, #11
 8003194:	d018      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b0d      	cmp	r3, #13
 80031a8:	d00e      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2b0e      	cmp	r3, #14
 80031b2:	d009      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	d004      	beq.n	80031c8 <HAL_RCC_OscConfig+0xd38>
 80031be:	f240 2146 	movw	r1, #582	; 0x246
 80031c2:	4826      	ldr	r0, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0xdcc>)
 80031c4:	f7fe f90b 	bl	80013de <assert_failed>
 80031c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e0:	601a      	str	r2, [r3, #0]
  return result;
 80031e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e6:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe fc51 	bl	8001aa4 <HAL_GetTick>
 8003202:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fc4c 	bl	8001aa4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1a4      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
 800321c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003234:	601a      	str	r2, [r3, #0]
  return result;
 8003236:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800323a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0xdd0>
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_RCC_OscConfig+0xdc8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e020      	b.n	8003298 <HAL_RCC_OscConfig+0xe08>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	08008da0 	.word	0x08008da0
 8003260:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800327e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	4bb6      	ldr	r3, [pc, #728]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800329c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032b0:	6011      	str	r1, [r2, #0]
  return result;
 80032b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d199      	bne.n	8003208 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f023 020f 	bic.w	r2, r3, #15
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	49a3      	ldr	r1, [pc, #652]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032e8:	4ba1      	ldr	r3, [pc, #644]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a19      	ldr	r1, [r3, #32]
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	499c      	ldr	r1, [pc, #624]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800331c:	601a      	str	r2, [r3, #0]
  return result;
 800331e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003322:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	461a      	mov	r2, r3
 8003336:	2301      	movs	r3, #1
 8003338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fbb3 	bl	8001aa4 <HAL_GetTick>
 800333e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003342:	e009      	b.n	8003358 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe fbae 	bl	8001aa4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e106      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
 8003358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800335c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003370:	601a      	str	r2, [r3, #0]
  return result;
 8003372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003376:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_RCC_OscConfig+0xf02>
 800338c:	4b78      	ldr	r3, [pc, #480]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e01b      	b.n	80033ca <HAL_RCC_OscConfig+0xf3a>
 8003392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800339a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033d2:	6011      	str	r1, [r2, #0]
 80033d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	fa92 f1a2 	rbit	r1, r2
 80033de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033e2:	6011      	str	r1, [r2, #0]
  return result;
 80033e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d09e      	beq.n	8003344 <HAL_RCC_OscConfig+0xeb4>
 8003406:	e0ad      	b.n	8003564 <HAL_RCC_OscConfig+0x10d4>
 8003408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003420:	601a      	str	r2, [r3, #0]
  return result;
 8003422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003426:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003432:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	461a      	mov	r2, r3
 800343a:	2300      	movs	r3, #0
 800343c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fb31 	bl	8001aa4 <HAL_GetTick>
 8003442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	e009      	b.n	800345c <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fb2c 	bl	8001aa4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e084      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
 800345c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fa93 f2a3 	rbit	r2, r3
 8003470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003474:	601a      	str	r2, [r3, #0]
  return result;
 8003476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800347a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0x1006>
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	e01b      	b.n	80034ce <HAL_RCC_OscConfig+0x103e>
 8003496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f107 0320 	add.w	r3, r7, #32
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f107 0214 	add.w	r2, r7, #20
 80034d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034d6:	6011      	str	r1, [r2, #0]
 80034d8:	f107 0214 	add.w	r2, r7, #20
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	fa92 f1a2 	rbit	r1, r2
 80034e2:	f107 0210 	add.w	r2, r7, #16
 80034e6:	6011      	str	r1, [r2, #0]
  return result;
 80034e8:	f107 0210 	add.w	r2, r7, #16
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	fab2 f282 	clz	r2, r2
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f042 0220 	orr.w	r2, r2, #32
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f002 021f 	and.w	r2, r2, #31
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f202 	lsl.w	r2, r1, r2
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d19e      	bne.n	8003448 <HAL_RCC_OscConfig+0xfb8>
 800350a:	e02b      	b.n	8003564 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e025      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0x10e0>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800352a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800352e:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	429a      	cmp	r2, r3
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800353c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003540:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800354a:	429a      	cmp	r2, r3
 800354c:	d108      	bne.n	8003560 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800354e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003552:	f003 020f 	and.w	r2, r3, #15
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b09e      	sub	sp, #120	; 0x78
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e203      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d116      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x52>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d110      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x52>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x52>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x52>
 80035bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80035c0:	48a5      	ldr	r0, [pc, #660]	; (8003858 <HAL_RCC_ClockConfig+0x2e4>)
 80035c2:	f7fd ff0c 	bl	80013de <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x6e>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d007      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x6e>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d004      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x6e>
 80035d8:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80035dc:	489e      	ldr	r0, [pc, #632]	; (8003858 <HAL_RCC_ClockConfig+0x2e4>)
 80035de:	f7fd fefe 	bl	80013de <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e2:	4b9e      	ldr	r3, [pc, #632]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d910      	bls.n	8003612 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f0:	4b9a      	ldr	r3, [pc, #616]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 0207 	bic.w	r2, r3, #7
 80035f8:	4998      	ldr	r1, [pc, #608]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003600:	4b96      	ldr	r3, [pc, #600]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c0      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d031      	beq.n	8003682 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d024      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d020      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b90      	cmp	r3, #144	; 0x90
 8003634:	d01c      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2ba0      	cmp	r3, #160	; 0xa0
 800363c:	d018      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2bb0      	cmp	r3, #176	; 0xb0
 8003644:	d014      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2bc0      	cmp	r3, #192	; 0xc0
 800364c:	d010      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2bd0      	cmp	r3, #208	; 0xd0
 8003654:	d00c      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2be0      	cmp	r3, #224	; 0xe0
 800365c:	d008      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2bf0      	cmp	r3, #240	; 0xf0
 8003664:	d004      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
 8003666:	f240 21db 	movw	r1, #731	; 0x2db
 800366a:	487b      	ldr	r0, [pc, #492]	; (8003858 <HAL_RCC_ClockConfig+0x2e4>)
 800366c:	f7fd feb7 	bl	80013de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4978      	ldr	r1, [pc, #480]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80f3 	beq.w	8003876 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x13e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x13e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d004      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x13e>
 80036a8:	f240 21e2 	movw	r1, #738	; 0x2e2
 80036ac:	486a      	ldr	r0, [pc, #424]	; (8003858 <HAL_RCC_ClockConfig+0x2e4>)
 80036ae:	f7fd fe96 	bl	80013de <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d13c      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1c0>
 80036ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d102      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x170>
 80036de:	4b60      	ldr	r3, [pc, #384]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	e00f      	b.n	8003704 <HAL_RCC_ClockConfig+0x190>
 80036e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	667b      	str	r3, [r7, #100]	; 0x64
 80036f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f6:	663b      	str	r3, [r7, #96]	; 0x60
 80036f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003700:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003708:	65ba      	str	r2, [r7, #88]	; 0x58
 800370a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370c:	fa92 f2a2 	rbit	r2, r2
 8003710:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003714:	fab2 f282 	clz	r2, r2
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f042 0220 	orr.w	r2, r2, #32
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f002 021f 	and.w	r2, r2, #31
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f202 	lsl.w	r2, r1, r2
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d17b      	bne.n	8003828 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e12f      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d13c      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x242>
 800373c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003740:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800374a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1f2>
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e00f      	b.n	8003786 <HAL_RCC_ClockConfig+0x212>
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
 8003774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003778:	643b      	str	r3, [r7, #64]	; 0x40
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378a:	63ba      	str	r2, [r7, #56]	; 0x38
 800378c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800378e:	fa92 f2a2 	rbit	r2, r2
 8003792:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003796:	fab2 f282 	clz	r2, r2
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	f042 0220 	orr.w	r2, r2, #32
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	f002 021f 	and.w	r2, r2, #31
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d13a      	bne.n	8003828 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0ee      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
 80037b6:	2302      	movs	r3, #2
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d102      	bne.n	80037de <HAL_RCC_ClockConfig+0x26a>
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	e00d      	b.n	80037fa <HAL_RCC_ClockConfig+0x286>
 80037de:	2302      	movs	r3, #2
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	2302      	movs	r3, #2
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2202      	movs	r2, #2
 80037fc:	61ba      	str	r2, [r7, #24]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	fa92 f2a2 	rbit	r2, r2
 8003804:	617a      	str	r2, [r7, #20]
  return result;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f002 021f 	and.w	r2, r2, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b5      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 0203 	bic.w	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	490a      	ldr	r1, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383a:	f7fe f933 	bl	8001aa4 <HAL_GetTick>
 800383e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003840:	e010      	b.n	8003864 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003842:	f7fe f92f 	bl	8001aa4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d907      	bls.n	8003864 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e09d      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
 8003858:	08008da0 	.word	0x08008da0
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 020c 	and.w	r2, r3, #12
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	429a      	cmp	r2, r3
 8003874:	d1e5      	bne.n	8003842 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_ClockConfig+0x42c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d210      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_ClockConfig+0x42c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 0207 	bic.w	r2, r3, #7
 800388c:	4944      	ldr	r1, [pc, #272]	; (80039a0 <HAL_RCC_ClockConfig+0x42c>)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCC_ClockConfig+0x42c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e076      	b.n	8003994 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d025      	beq.n	80038fe <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <HAL_RCC_ClockConfig+0x378>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_ClockConfig+0x378>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038cc:	d00e      	beq.n	80038ec <HAL_RCC_ClockConfig+0x378>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_ClockConfig+0x378>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e0:	d004      	beq.n	80038ec <HAL_RCC_ClockConfig+0x378>
 80038e2:	f240 311e 	movw	r1, #798	; 0x31e
 80038e6:	482f      	ldr	r0, [pc, #188]	; (80039a4 <HAL_RCC_ClockConfig+0x430>)
 80038e8:	f7fd fd79 	bl	80013de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4928      	ldr	r1, [pc, #160]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d026      	beq.n	8003958 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3d0>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d013      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3d0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003924:	d00e      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3d0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800392e:	d009      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3d0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003938:	d004      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3d0>
 800393a:	f240 3125 	movw	r1, #805	; 0x325
 800393e:	4819      	ldr	r0, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x430>)
 8003940:	f7fd fd4d 	bl	80013de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003958:	f000 f82c 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800395c:	4601      	mov	r1, r0
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_RCC_ClockConfig+0x428>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003966:	22f0      	movs	r2, #240	; 0xf0
 8003968:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	60fa      	str	r2, [r7, #12]
  return result;
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	40d3      	lsrs	r3, r2
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x434>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x438>)
 8003986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x43c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe f845 	bl	8001a1c <HAL_InitTick>
  
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3778      	adds	r7, #120	; 0x78
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	40022000 	.word	0x40022000
 80039a4:	08008da0 	.word	0x08008da0
 80039a8:	08008f64 	.word	0x08008f64
 80039ac:	2000007c 	.word	0x2000007c
 80039b0:	20000080 	.word	0x20000080

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b08b      	sub	sp, #44	; 0x2c
 80039b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x30>
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x36>
 80039e2:	e03f      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 80039e6:	623b      	str	r3, [r7, #32]
      break;
 80039e8:	e03f      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	fa92 f2a2 	rbit	r2, r2
 80039fc:	607a      	str	r2, [r7, #4]
  return result;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	40d3      	lsrs	r3, r2
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	220f      	movs	r2, #15
 8003a18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	60fa      	str	r2, [r7, #12]
  return result;
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	fab2 f282 	clz	r2, r2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	40d3      	lsrs	r3, r2
 8003a2c:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	e007      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a4e:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	623b      	str	r3, [r7, #32]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a66:	623b      	str	r3, [r7, #32]
      break;
 8003a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	372c      	adds	r7, #44	; 0x2c
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	007a1200 	.word	0x007a1200
 8003a80:	08008f7c 	.word	0x08008f7c
 8003a84:	08008f8c 	.word	0x08008f8c

08003a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000007c 	.word	0x2000007c

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003aa6:	f7ff ffef 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003aaa:	4601      	mov	r1, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ab8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	fa92 f2a2 	rbit	r2, r2
 8003ac0:	603a      	str	r2, [r7, #0]
  return result;
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	fab2 f282 	clz	r2, r2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	40d3      	lsrs	r3, r2
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08008f74 	.word	0x08008f74

08003ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003aea:	f7ff ffcd 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003aee:	4601      	mov	r1, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003af8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003afc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	603a      	str	r2, [r7, #0]
  return result;
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	fab2 f282 	clz	r2, r2
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	40d3      	lsrs	r3, r2
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08008f74 	.word	0x08008f74

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b092      	sub	sp, #72	; 0x48
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a62      	ldr	r2, [pc, #392]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d303      	bcc.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b48:	2172      	movs	r1, #114	; 0x72
 8003b4a:	4861      	ldr	r0, [pc, #388]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b4c:	f7fd fc47 	bl	80013de <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80f1 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d003      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b84:	2178      	movs	r1, #120	; 0x78
 8003b86:	4852      	ldr	r0, [pc, #328]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b88:	f7fd fc29 	bl	80013de <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8c:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10e      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d118      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bce:	f7fd ff69 	bl	8001aa4 <HAL_GetTick>
 8003bd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	e008      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd6:	f7fd ff65 	bl	8001aa4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b64      	cmp	r3, #100	; 0x64
 8003be2:	d901      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e38f      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 808a 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f000 8082 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2301      	movs	r3, #1
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	2300      	movs	r3, #0
 8003c66:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c68:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d050      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd ff14 	bl	8001aa4 <HAL_GetTick>
 8003c7c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd ff10 	bl	8001aa4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e338      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8003c96:	2302      	movs	r3, #2
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	61fb      	str	r3, [r7, #28]
  return result;
 8003cae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	e012      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003cca:	bf00      	nop
 8003ccc:	03f73400 	.word	0x03f73400
 8003cd0:	08008dd8 	.word	0x08008dd8
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	10908100 	.word	0x10908100
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	4b97      	ldr	r3, [pc, #604]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	613a      	str	r2, [r7, #16]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fa92 f2a2 	rbit	r2, r2
 8003cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0b2      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d1a:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4989      	ldr	r1, [pc, #548]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a84      	ldr	r2, [pc, #528]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d007      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003d6c:	21be      	movs	r1, #190	; 0xbe
 8003d6e:	4878      	ldr	r0, [pc, #480]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003d70:	f7fd fb35 	bl	80013de <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d74:	4b75      	ldr	r3, [pc, #468]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f023 0203 	bic.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4972      	ldr	r1, [pc, #456]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01f      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d012      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003db8:	21c9      	movs	r1, #201	; 0xc9
 8003dba:	4865      	ldr	r0, [pc, #404]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003dbc:	f7fd fb0f 	bl	80013de <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc0:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	495f      	ldr	r1, [pc, #380]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01f      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e02:	d003      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e04:	21d5      	movs	r1, #213	; 0xd5
 8003e06:	4852      	ldr	r0, [pc, #328]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e08:	f7fd fae9 	bl	80013de <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e0c:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	494c      	ldr	r1, [pc, #304]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d003      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003e3a:	21e0      	movs	r1, #224	; 0xe0
 8003e3c:	4844      	ldr	r0, [pc, #272]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e3e:	f7fd face 	bl	80013de <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f023 0210 	bic.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	493f      	ldr	r1, [pc, #252]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003e72:	21ee      	movs	r1, #238	; 0xee
 8003e74:	4836      	ldr	r0, [pc, #216]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e76:	f7fd fab2 	bl	80013de <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e7a:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	4931      	ldr	r1, [pc, #196]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8003ea8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003eac:	4828      	ldr	r0, [pc, #160]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003eae:	f7fd fa96 	bl	80013de <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f023 0220 	bic.w	r2, r3, #32
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4923      	ldr	r1, [pc, #140]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d004      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003ee0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003ee4:	481a      	ldr	r0, [pc, #104]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003ee6:	f7fd fa7a 	bl	80013de <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	4915      	ldr	r1, [pc, #84]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d025      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f18:	d00e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f22:	d009      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f2c:	d004      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f2e:	f240 1123 	movw	r1, #291	; 0x123
 8003f32:	4807      	ldr	r0, [pc, #28]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003f34:	f7fd fa53 	bl	80013de <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	4901      	ldr	r1, [pc, #4]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	630b      	str	r3, [r1, #48]	; 0x30
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08008dd8 	.word	0x08008dd8
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d00e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f84:	d004      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003f86:	f240 112d 	movw	r1, #301	; 0x12d
 8003f8a:	48a1      	ldr	r0, [pc, #644]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003f8c:	f7fd fa27 	bl	80013de <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f90:	4ba0      	ldr	r3, [pc, #640]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	499d      	ldr	r1, [pc, #628]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fbe:	d004      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8003fc0:	f240 113d 	movw	r1, #317	; 0x13d
 8003fc4:	4892      	ldr	r0, [pc, #584]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003fc6:	f7fd fa0a 	bl	80013de <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fca:	4b92      	ldr	r3, [pc, #584]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	498f      	ldr	r1, [pc, #572]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d04d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d040      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d03b      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004002:	d036      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800400c:	d031      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8004016:	d02c      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004020:	d027      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800402a:	d022      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8004034:	d01d      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800403e:	d018      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004048:	d013      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004052:	d00e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800405c:	d009      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004068:	f240 115d 	movw	r1, #349	; 0x15d
 800406c:	4868      	ldr	r0, [pc, #416]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800406e:	f7fd f9b6 	bl	80013de <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004072:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	4965      	ldr	r1, [pc, #404]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004080:	4313      	orrs	r3, r2
 8004082:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04d      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d040      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d03b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80040aa:	d036      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80040b4:	d031      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80040be:	d02c      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80040c8:	d027      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 80040dc:	d01d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 80040e6:	d018      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f0:	d013      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 80040fa:	d00e      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8004104:	d009      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 800410e:	d004      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004110:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8004114:	483e      	ldr	r0, [pc, #248]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004116:	f7fd f962 	bl	80013de <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	493b      	ldr	r1, [pc, #236]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004128:	4313      	orrs	r3, r2
 800412a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004148:	d004      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800414a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800414e:	4830      	ldr	r0, [pc, #192]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004150:	f7fd f945 	bl	80013de <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004154:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	492c      	ldr	r1, [pc, #176]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x666>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d004      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8004184:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8004188:	4821      	ldr	r0, [pc, #132]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800418a:	f7fd f928 	bl	80013de <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	491e      	ldr	r1, [pc, #120]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800419c:	4313      	orrs	r3, r2
 800419e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d016      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041bc:	d004      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80041be:	f240 11f7 	movw	r1, #503	; 0x1f7
 80041c2:	4813      	ldr	r0, [pc, #76]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041c4:	f7fd f90b 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	490f      	ldr	r1, [pc, #60]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01b      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f6:	d004      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80041f8:	f240 2101 	movw	r1, #513	; 0x201
 80041fc:	4804      	ldr	r0, [pc, #16]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041fe:	f7fd f8ee 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004210:	08008dd8 	.word	0x08008dd8
 8004214:	40021000 	.word	0x40021000
 8004218:	493d      	ldr	r1, [pc, #244]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d004      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800423c:	f240 210b 	movw	r1, #523	; 0x20b
 8004240:	4834      	ldr	r0, [pc, #208]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8004242:	f7fd f8cc 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004246:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	492f      	ldr	r1, [pc, #188]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d016      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d004      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8004276:	f240 2115 	movw	r1, #533	; 0x215
 800427a:	4826      	ldr	r0, [pc, #152]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800427c:	f7fd f8af 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	4920      	ldr	r1, [pc, #128]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d004      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 80042b0:	f240 211f 	movw	r1, #543	; 0x21f
 80042b4:	4817      	ldr	r0, [pc, #92]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80042b6:	f7fd f892 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d016      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d004      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80042ea:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80042ee:	4809      	ldr	r0, [pc, #36]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80042f0:	f7fd f875 	bl	80013de <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3748      	adds	r7, #72	; 0x48
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	08008dd8 	.word	0x08008dd8

08004318 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0e1      	b.n	80044ee <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a72      	ldr	r2, [pc, #456]	; (80044f8 <HAL_RTC_Init+0x1e0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_RTC_Init+0x26>
 8004334:	f240 1121 	movw	r1, #289	; 0x121
 8004338:	4870      	ldr	r0, [pc, #448]	; (80044fc <HAL_RTC_Init+0x1e4>)
 800433a:	f7fd f850 	bl	80013de <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d008      	beq.n	8004358 <HAL_RTC_Init+0x40>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_RTC_Init+0x40>
 800434e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004352:	486a      	ldr	r0, [pc, #424]	; (80044fc <HAL_RTC_Init+0x1e4>)
 8004354:	f7fd f843 	bl	80013de <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b7f      	cmp	r3, #127	; 0x7f
 800435e:	d904      	bls.n	800436a <HAL_RTC_Init+0x52>
 8004360:	f240 1123 	movw	r1, #291	; 0x123
 8004364:	4865      	ldr	r0, [pc, #404]	; (80044fc <HAL_RTC_Init+0x1e4>)
 8004366:	f7fd f83a 	bl	80013de <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	d304      	bcc.n	800437e <HAL_RTC_Init+0x66>
 8004374:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004378:	4860      	ldr	r0, [pc, #384]	; (80044fc <HAL_RTC_Init+0x1e4>)
 800437a:	f7fd f830 	bl	80013de <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d013      	beq.n	80043ae <HAL_RTC_Init+0x96>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438e:	d00e      	beq.n	80043ae <HAL_RTC_Init+0x96>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d009      	beq.n	80043ae <HAL_RTC_Init+0x96>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043a2:	d004      	beq.n	80043ae <HAL_RTC_Init+0x96>
 80043a4:	f240 1125 	movw	r1, #293	; 0x125
 80043a8:	4854      	ldr	r0, [pc, #336]	; (80044fc <HAL_RTC_Init+0x1e4>)
 80043aa:	f7fd f818 	bl	80013de <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RTC_Init+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043be:	d004      	beq.n	80043ca <HAL_RTC_Init+0xb2>
 80043c0:	f44f 7193 	mov.w	r1, #294	; 0x126
 80043c4:	484d      	ldr	r0, [pc, #308]	; (80044fc <HAL_RTC_Init+0x1e4>)
 80043c6:	f7fd f80a 	bl	80013de <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RTC_Init+0xce>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043da:	d004      	beq.n	80043e6 <HAL_RTC_Init+0xce>
 80043dc:	f240 1127 	movw	r1, #295	; 0x127
 80043e0:	4846      	ldr	r0, [pc, #280]	; (80044fc <HAL_RTC_Init+0x1e4>)
 80043e2:	f7fc fffc 	bl	80013de <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7f5b      	ldrb	r3, [r3, #29]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd f832 	bl	8001460 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ca      	movs	r2, #202	; 0xca
 8004408:	625a      	str	r2, [r3, #36]	; 0x24
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2253      	movs	r2, #83	; 0x53
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa74 	bl	8004900 <RTC_EnterInitMode>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	22ff      	movs	r2, #255	; 0xff
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e05e      	b.n	80044ee <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800443e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004442:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6899      	ldr	r1, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6919      	ldr	r1, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	041a      	lsls	r2, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10e      	bne.n	80044bc <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa06 	bl	80048b0 <HAL_RTC_WaitForSynchro>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2204      	movs	r2, #4
 80044b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e018      	b.n	80044ee <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	22ff      	movs	r2, #255	; 0xff
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40002800 	.word	0x40002800
 80044fc:	08008e34 	.word	0x08008e34

08004500 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_RTC_SetTime+0x26>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d004      	beq.n	8004526 <HAL_RTC_SetTime+0x26>
 800451c:	f240 310f 	movw	r1, #783	; 0x30f
 8004520:	48a4      	ldr	r0, [pc, #656]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 8004522:	f7fc ff5c 	bl	80013de <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452e:	d00d      	beq.n	800454c <HAL_RTC_SetTime+0x4c>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d008      	beq.n	800454c <HAL_RTC_SetTime+0x4c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_RTC_SetTime+0x4c>
 8004542:	f44f 7144 	mov.w	r1, #784	; 0x310
 8004546:	489b      	ldr	r0, [pc, #620]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 8004548:	f7fc ff49 	bl	80013de <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_RTC_SetTime+0x68>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800455c:	d004      	beq.n	8004568 <HAL_RTC_SetTime+0x68>
 800455e:	f240 3111 	movw	r1, #785	; 0x311
 8004562:	4894      	ldr	r0, [pc, #592]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 8004564:	f7fc ff3b 	bl	80013de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	7f1b      	ldrb	r3, [r3, #28]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_RTC_SetTime+0x74>
 8004570:	2302      	movs	r3, #2
 8004572:	e12c      	b.n	80047ce <HAL_RTC_SetTime+0x2ce>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2202      	movs	r2, #2
 800457e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d15c      	bne.n	8004640 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_RTC_SetTime+0xa4>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d904      	bls.n	80045ae <HAL_RTC_SetTime+0xae>
 80045a4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80045a8:	4882      	ldr	r0, [pc, #520]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80045aa:	f7fc ff18 	bl	80013de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	78db      	ldrb	r3, [r3, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <HAL_RTC_SetTime+0xe2>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	78db      	ldrb	r3, [r3, #3]
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d011      	beq.n	80045e2 <HAL_RTC_SetTime+0xe2>
 80045be:	f240 311d 	movw	r1, #797	; 0x31d
 80045c2:	487c      	ldr	r0, [pc, #496]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80045c4:	f7fc ff0b 	bl	80013de <assert_failed>
 80045c8:	e00b      	b.n	80045e2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2200      	movs	r2, #0
 80045ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b17      	cmp	r3, #23
 80045d6:	d904      	bls.n	80045e2 <HAL_RTC_SetTime+0xe2>
 80045d8:	f240 3122 	movw	r1, #802	; 0x322
 80045dc:	4875      	ldr	r0, [pc, #468]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80045de:	f7fc fefe 	bl	80013de <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2b3b      	cmp	r3, #59	; 0x3b
 80045e8:	d904      	bls.n	80045f4 <HAL_RTC_SetTime+0xf4>
 80045ea:	f44f 7149 	mov.w	r1, #804	; 0x324
 80045ee:	4871      	ldr	r0, [pc, #452]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80045f0:	f7fc fef5 	bl	80013de <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	789b      	ldrb	r3, [r3, #2]
 80045f8:	2b3b      	cmp	r3, #59	; 0x3b
 80045fa:	d904      	bls.n	8004606 <HAL_RTC_SetTime+0x106>
 80045fc:	f240 3125 	movw	r1, #805	; 0x325
 8004600:	486c      	ldr	r0, [pc, #432]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 8004602:	f7fc feec 	bl	80013de <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f9a4 	bl	8004958 <RTC_ByteToBcd2>
 8004610:	4603      	mov	r3, r0
 8004612:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f99d 	bl	8004958 <RTC_ByteToBcd2>
 800461e:	4603      	mov	r3, r0
 8004620:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004622:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f995 	bl	8004958 <RTC_ByteToBcd2>
 800462e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004630:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	78db      	ldrb	r3, [r3, #3]
 8004638:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e062      	b.n	8004706 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d022      	beq.n	8004694 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f99e 	bl	8004994 <RTC_Bcd2ToByte>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_RTC_SetTime+0x16e>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f996 	bl	8004994 <RTC_Bcd2ToByte>
 8004668:	4603      	mov	r3, r0
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d904      	bls.n	8004678 <HAL_RTC_SetTime+0x178>
 800466e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8004672:	4850      	ldr	r0, [pc, #320]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 8004674:	f7fc feb3 	bl	80013de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	78db      	ldrb	r3, [r3, #3]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d019      	beq.n	80046b4 <HAL_RTC_SetTime+0x1b4>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d015      	beq.n	80046b4 <HAL_RTC_SetTime+0x1b4>
 8004688:	f240 3131 	movw	r1, #817	; 0x331
 800468c:	4849      	ldr	r0, [pc, #292]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 800468e:	f7fc fea6 	bl	80013de <assert_failed>
 8004692:	e00f      	b.n	80046b4 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f978 	bl	8004994 <RTC_Bcd2ToByte>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b17      	cmp	r3, #23
 80046a8:	d904      	bls.n	80046b4 <HAL_RTC_SetTime+0x1b4>
 80046aa:	f240 3136 	movw	r1, #822	; 0x336
 80046ae:	4841      	ldr	r0, [pc, #260]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80046b0:	f7fc fe95 	bl	80013de <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f96b 	bl	8004994 <RTC_Bcd2ToByte>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b3b      	cmp	r3, #59	; 0x3b
 80046c2:	d904      	bls.n	80046ce <HAL_RTC_SetTime+0x1ce>
 80046c4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80046c8:	483a      	ldr	r0, [pc, #232]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80046ca:	f7fc fe88 	bl	80013de <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	789b      	ldrb	r3, [r3, #2]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f95e 	bl	8004994 <RTC_Bcd2ToByte>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b3b      	cmp	r3, #59	; 0x3b
 80046dc:	d904      	bls.n	80046e8 <HAL_RTC_SetTime+0x1e8>
 80046de:	f240 3139 	movw	r1, #825	; 0x339
 80046e2:	4834      	ldr	r0, [pc, #208]	; (80047b4 <HAL_RTC_SetTime+0x2b4>)
 80046e4:	f7fc fe7b 	bl	80013de <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80046fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	22ca      	movs	r2, #202	; 0xca
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2253      	movs	r2, #83	; 0x53
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8f2 	bl	8004900 <RTC_EnterInitMode>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	22ff      	movs	r2, #255	; 0xff
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2204      	movs	r2, #4
 800472e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e049      	b.n	80047ce <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004744:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004748:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004758:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6899      	ldr	r1, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004780:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d113      	bne.n	80047b8 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f88d 	bl	80048b0 <HAL_RTC_WaitForSynchro>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2204      	movs	r2, #4
 80047a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e00c      	b.n	80047ce <HAL_RTC_SetTime+0x2ce>
 80047b4:	08008e34 	.word	0x08008e34
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop

080047d8 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <HAL_RTC_GetTime+0x26>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d004      	beq.n	80047fe <HAL_RTC_GetTime+0x26>
 80047f4:	f44f 7164 	mov.w	r1, #912	; 0x390
 80047f8:	482c      	ldr	r0, [pc, #176]	; (80048ac <HAL_RTC_GetTime+0xd4>)
 80047fa:	f7fc fdf0 	bl	80013de <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004820:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004824:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11a      	bne.n	80048a0 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f890 	bl	8004994 <RTC_Bcd2ToByte>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 f887 	bl	8004994 <RTC_Bcd2ToByte>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f87e 	bl	8004994 <RTC_Bcd2ToByte>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08008e34 	.word	0x08008e34

080048b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048cc:	f7fd f8ea 	bl	8001aa4 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80048d2:	e009      	b.n	80048e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048d4:	f7fd f8e6 	bl	8001aa4 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e2:	d901      	bls.n	80048e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e007      	b.n	80048f8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ee      	beq.n	80048d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d119      	bne.n	800494e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004924:	f7fd f8be 	bl	8001aa4 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800492a:	e009      	b.n	8004940 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800492c:	f7fd f8ba 	bl	8001aa4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493a:	d901      	bls.n	8004940 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e007      	b.n	8004950 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004966:	e005      	b.n	8004974 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	3b0a      	subs	r3, #10
 8004972:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	2b09      	cmp	r3, #9
 8004978:	d8f6      	bhi.n	8004968 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	b2da      	uxtb	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	4313      	orrs	r3, r2
 8004986:	b2db      	uxtb	r3, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	b2db      	uxtb	r3, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d013      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d010      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d00d      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d00a      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d007      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b06      	cmp	r3, #6
 8004a02:	d004      	beq.n	8004a0e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8004a04:	f44f 7158 	mov.w	r1, #864	; 0x360
 8004a08:	485a      	ldr	r0, [pc, #360]	; (8004b74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004a0a:	f7fc fce8 	bl	80013de <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d304      	bcc.n	8004a20 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8004a16:	f240 3161 	movw	r1, #865	; 0x361
 8004a1a:	4856      	ldr	r0, [pc, #344]	; (8004b74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004a1c:	f7fc fcdf 	bl	80013de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	7f1b      	ldrb	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e09e      	b.n	8004b6a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2202      	movs	r2, #2
 8004a36:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	22ca      	movs	r2, #202	; 0xca
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2253      	movs	r2, #83	; 0x53
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01e      	beq.n	8004a94 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8004a56:	f7fd f825 	bl	8001aa4 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004a5c:	e013      	b.n	8004a86 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a5e:	f7fd f821 	bl	8001aa4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6c:	d90b      	bls.n	8004a86 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	22ff      	movs	r2, #255	; 0xff
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e071      	b.n	8004b6a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004ab4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ab6:	f7fc fff5 	bl	8001aa4 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004abc:	e013      	b.n	8004ae6 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004abe:	f7fc fff1 	bl	8001aa4 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004acc:	d90b      	bls.n	8004ae6 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e041      	b.n	8004b6a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0e4      	beq.n	8004abe <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0207 	bic.w	r2, r2, #7
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b26:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b32:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b52:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	22ff      	movs	r2, #255	; 0xff
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08008e6c 	.word	0x08008e6c
 8004b78:	40010400 	.word	0x40010400

08004b7c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7f1b      	ldrb	r3, [r3, #28]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e047      	b.n	8004c24 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	22ca      	movs	r2, #202	; 0xca
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2253      	movs	r2, #83	; 0x53
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bce:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004bd0:	f7fc ff68 	bl	8001aa4 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004bd6:	e013      	b.n	8004c00 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bd8:	f7fc ff64 	bl	8001aa4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be6:	d90b      	bls.n	8004c00 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	22ff      	movs	r2, #255	; 0xff
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e011      	b.n	8004c24 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0e4      	beq.n	8004bd8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	22ff      	movs	r2, #255	; 0xff
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fb ffe2 	bl	8000c0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004c58:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004c5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c60:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	775a      	strb	r2, [r3, #29]
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0be      	b.n	8004e04 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a60      	ldr	r2, [pc, #384]	; (8004e0c <HAL_TIM_Base_Init+0x198>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d036      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c98:	d031      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5c      	ldr	r2, [pc, #368]	; (8004e10 <HAL_TIM_Base_Init+0x19c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d02c      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5a      	ldr	r2, [pc, #360]	; (8004e14 <HAL_TIM_Base_Init+0x1a0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a59      	ldr	r2, [pc, #356]	; (8004e18 <HAL_TIM_Base_Init+0x1a4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a57      	ldr	r2, [pc, #348]	; (8004e1c <HAL_TIM_Base_Init+0x1a8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a56      	ldr	r2, [pc, #344]	; (8004e20 <HAL_TIM_Base_Init+0x1ac>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <HAL_TIM_Base_Init+0x1b0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a53      	ldr	r2, [pc, #332]	; (8004e28 <HAL_TIM_Base_Init+0x1b4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a51      	ldr	r2, [pc, #324]	; (8004e2c <HAL_TIM_Base_Init+0x1b8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a50      	ldr	r2, [pc, #320]	; (8004e30 <HAL_TIM_Base_Init+0x1bc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_TIM_Base_Init+0x8a>
 8004cf4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004cf8:	484e      	ldr	r0, [pc, #312]	; (8004e34 <HAL_TIM_Base_Init+0x1c0>)
 8004cfa:	f7fc fb70 	bl	80013de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <HAL_TIM_Base_Init+0xbc>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d010      	beq.n	8004d30 <HAL_TIM_Base_Init+0xbc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d00c      	beq.n	8004d30 <HAL_TIM_Base_Init+0xbc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d008      	beq.n	8004d30 <HAL_TIM_Base_Init+0xbc>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b60      	cmp	r3, #96	; 0x60
 8004d24:	d004      	beq.n	8004d30 <HAL_TIM_Base_Init+0xbc>
 8004d26:	f240 111b 	movw	r1, #283	; 0x11b
 8004d2a:	4842      	ldr	r0, [pc, #264]	; (8004e34 <HAL_TIM_Base_Init+0x1c0>)
 8004d2c:	f7fc fb57 	bl	80013de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIM_Base_Init+0xe2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d009      	beq.n	8004d56 <HAL_TIM_Base_Init+0xe2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIM_Base_Init+0xe2>
 8004d4c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004d50:	4838      	ldr	r0, [pc, #224]	; (8004e34 <HAL_TIM_Base_Init+0x1c0>)
 8004d52:	f7fc fb44 	bl	80013de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_TIM_Base_Init+0xfc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_Base_Init+0xfc>
 8004d66:	f240 111d 	movw	r1, #285	; 0x11d
 8004d6a:	4832      	ldr	r0, [pc, #200]	; (8004e34 <HAL_TIM_Base_Init+0x1c0>)
 8004d6c:	f7fc fb37 	bl	80013de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc fd4d 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fa49 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40001000 	.word	0x40001000
 8004e1c:	40001400 	.word	0x40001400
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	40015000 	.word	0x40015000
 8004e34:	08008ea8 	.word	0x08008ea8

08004e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a46      	ldr	r2, [pc, #280]	; (8004f60 <HAL_TIM_Base_Start+0x128>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d031      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a42      	ldr	r2, [pc, #264]	; (8004f64 <HAL_TIM_Base_Start+0x12c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a41      	ldr	r2, [pc, #260]	; (8004f68 <HAL_TIM_Base_Start+0x130>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3f      	ldr	r2, [pc, #252]	; (8004f6c <HAL_TIM_Base_Start+0x134>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3e      	ldr	r2, [pc, #248]	; (8004f70 <HAL_TIM_Base_Start+0x138>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <HAL_TIM_Base_Start+0x13c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3b      	ldr	r2, [pc, #236]	; (8004f78 <HAL_TIM_Base_Start+0x140>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <HAL_TIM_Base_Start+0x144>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a38      	ldr	r2, [pc, #224]	; (8004f80 <HAL_TIM_Base_Start+0x148>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a36      	ldr	r2, [pc, #216]	; (8004f84 <HAL_TIM_Base_Start+0x14c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x80>
 8004eae:	f240 119b 	movw	r1, #411	; 0x19b
 8004eb2:	4835      	ldr	r0, [pc, #212]	; (8004f88 <HAL_TIM_Base_Start+0x150>)
 8004eb4:	f7fc fa93 	bl	80013de <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d001      	beq.n	8004ec8 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e047      	b.n	8004f58 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_TIM_Base_Start+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01d      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee2:	d018      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_TIM_Base_Start+0x130>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_TIM_Base_Start+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_TIM_Base_Start+0x140>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIM_Base_Start+0xde>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <HAL_TIM_Base_Start+0x14c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d115      	bne.n	8004f42 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_TIM_Base_Start+0x154>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d015      	beq.n	8004f54 <HAL_TIM_Base_Start+0x11c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	d011      	beq.n	8004f54 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	e008      	b.n	8004f54 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e000      	b.n	8004f56 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40001000 	.word	0x40001000
 8004f70:	40001400 	.word	0x40001400
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40015000 	.word	0x40015000
 8004f88:	08008ea8 	.word	0x08008ea8
 8004f8c:	00010007 	.word	0x00010007

08004f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0202 	mvn.w	r2, #2
 8004fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f90f 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f901 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f912 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0204 	mvn.w	r2, #4
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8e5 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8d7 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8e8 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b08      	cmp	r3, #8
 800504c:	d122      	bne.n	8005094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d11b      	bne.n	8005094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0208 	mvn.w	r2, #8
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2204      	movs	r2, #4
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8bb 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8ad 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8be 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d122      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0210 	mvn.w	r2, #16
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2208      	movs	r2, #8
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f891 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f883 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f894 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10e      	bne.n	8005114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d107      	bne.n	8005114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0201 	mvn.w	r2, #1
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f85d 	bl	80051ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b80      	cmp	r3, #128	; 0x80
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa70 	bl	8005620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514e:	d10e      	bne.n	800516e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d107      	bne.n	800516e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa63 	bl	8005634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d10e      	bne.n	800519a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d107      	bne.n	800519a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f842 	bl	800521e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d10e      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f06f 0220 	mvn.w	r2, #32
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa23 	bl	800560c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a42      	ldr	r2, [pc, #264]	; (8005350 <TIM_Base_SetConfig+0x11c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d00f      	beq.n	8005274 <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3f      	ldr	r2, [pc, #252]	; (8005354 <TIM_Base_SetConfig+0x120>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00b      	beq.n	8005274 <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3e      	ldr	r2, [pc, #248]	; (8005358 <TIM_Base_SetConfig+0x124>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3d      	ldr	r2, [pc, #244]	; (800535c <TIM_Base_SetConfig+0x128>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <TIM_Base_SetConfig+0x12c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d108      	bne.n	8005286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a31      	ldr	r2, [pc, #196]	; (8005350 <TIM_Base_SetConfig+0x11c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01f      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d01b      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <TIM_Base_SetConfig+0x120>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d017      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2d      	ldr	r2, [pc, #180]	; (8005358 <TIM_Base_SetConfig+0x124>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <TIM_Base_SetConfig+0x128>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00f      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <TIM_Base_SetConfig+0x130>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <TIM_Base_SetConfig+0x134>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <TIM_Base_SetConfig+0x138>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_Base_SetConfig+0x9a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <TIM_Base_SetConfig+0x12c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a12      	ldr	r2, [pc, #72]	; (8005350 <TIM_Base_SetConfig+0x11c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <TIM_Base_SetConfig+0x100>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <TIM_Base_SetConfig+0x128>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x100>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a13      	ldr	r2, [pc, #76]	; (8005364 <TIM_Base_SetConfig+0x130>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x100>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <TIM_Base_SetConfig+0x134>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x100>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a11      	ldr	r2, [pc, #68]	; (800536c <TIM_Base_SetConfig+0x138>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x100>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <TIM_Base_SetConfig+0x12c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d103      	bne.n	800533c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	615a      	str	r2, [r3, #20]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40013400 	.word	0x40013400
 8005360:	40015000 	.word	0x40015000
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a9a      	ldr	r2, [pc, #616]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d02c      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d027      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a96      	ldr	r2, [pc, #600]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d022      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a94      	ldr	r2, [pc, #592]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01d      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a93      	ldr	r2, [pc, #588]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d018      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a91      	ldr	r2, [pc, #580]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a90      	ldr	r2, [pc, #576]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a8e      	ldr	r2, [pc, #568]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a8d      	ldr	r2, [pc, #564]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80053d4:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80053d8:	488b      	ldr	r0, [pc, #556]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80053da:	f7fc f800 	bl	80013de <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d01c      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d018      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d014      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d010      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b50      	cmp	r3, #80	; 0x50
 800540c:	d00c      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b60      	cmp	r3, #96	; 0x60
 8005414:	d008      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b70      	cmp	r3, #112	; 0x70
 800541c:	d004      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800541e:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8005422:	4879      	ldr	r0, [pc, #484]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005424:	f7fb ffdb 	bl	80013de <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d008      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005438:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800543c:	4872      	ldr	r0, [pc, #456]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800543e:	f7fb ffce 	bl	80013de <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800544c:	2302      	movs	r3, #2
 800544e:	e0c6      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5c      	ldr	r2, [pc, #368]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5e      	ldr	r2, [pc, #376]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d161      	bne.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d054      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800549e:	d04f      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a8:	d04a      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054b2:	d045      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054bc:	d040      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80054c6:	d03b      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054d0:	d036      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054da:	d031      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80054e4:	d02c      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ee:	d027      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80054f8:	d022      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005502:	d01d      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800550c:	d018      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005516:	d013      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8005520:	d00e      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800552a:	d009      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8005534:	d004      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8005536:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800553a:	4833      	ldr	r0, [pc, #204]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800553c:	f7fb ff4f 	bl	80013de <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d018      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a17      	ldr	r2, [pc, #92]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40001000 	.word	0x40001000
 80055f8:	40001400 	.word	0x40001400
 80055fc:	40013400 	.word	0x40013400
 8005600:	40014000 	.word	0x40014000
 8005604:	40015000 	.word	0x40015000
 8005608:	08008ee0 	.word	0x08008ee0

0800560c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e077      	b.n	800574a <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d014      	beq.n	800568c <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a3b      	ldr	r2, [pc, #236]	; (8005754 <HAL_UART_Init+0x10c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02d      	beq.n	80056c8 <HAL_UART_Init+0x80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a39      	ldr	r2, [pc, #228]	; (8005758 <HAL_UART_Init+0x110>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d028      	beq.n	80056c8 <HAL_UART_Init+0x80>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_UART_Init+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d023      	beq.n	80056c8 <HAL_UART_Init+0x80>
 8005680:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005684:	4836      	ldr	r0, [pc, #216]	; (8005760 <HAL_UART_Init+0x118>)
 8005686:	f7fb feaa 	bl	80013de <assert_failed>
 800568a:	e01d      	b.n	80056c8 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	; (8005754 <HAL_UART_Init+0x10c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <HAL_UART_Init+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2f      	ldr	r2, [pc, #188]	; (8005758 <HAL_UART_Init+0x110>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_UART_Init+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2d      	ldr	r2, [pc, #180]	; (800575c <HAL_UART_Init+0x114>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_UART_Init+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <HAL_UART_Init+0x11c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_UART_Init+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2b      	ldr	r2, [pc, #172]	; (8005768 <HAL_UART_Init+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_UART_Init+0x80>
 80056be:	f240 1131 	movw	r1, #305	; 0x131
 80056c2:	4827      	ldr	r0, [pc, #156]	; (8005760 <HAL_UART_Init+0x118>)
 80056c4:	f7fb fe8b 	bl	80013de <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fc f915 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2224      	movs	r2, #36	; 0x24
 80056e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fbe9 	bl	8005ecc <UART_SetConfig>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e022      	b.n	800574a <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fe41 	bl	8006394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005720:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005730:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 ff74 	bl	8006630 <UART_CheckIdleState>
 8005748:	4603      	mov	r3, r0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40013800 	.word	0x40013800
 8005758:	40004400 	.word	0x40004400
 800575c:	40004800 	.word	0x40004800
 8005760:	08008f1c 	.word	0x08008f1c
 8005764:	40004c00 	.word	0x40004c00
 8005768:	40005000 	.word	0x40005000

0800576c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576c:	b480      	push	{r7}
 800576e:	b08b      	sub	sp, #44	; 0x2c
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577e:	2b20      	cmp	r3, #32
 8005780:	d156      	bne.n	8005830 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_UART_Transmit_IT+0x22>
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e04f      	b.n	8005832 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_UART_Transmit_IT+0x34>
 800579c:	2302      	movs	r3, #2
 800579e:	e048      	b.n	8005832 <HAL_UART_Transmit_IT+0xc6>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2221      	movs	r2, #33	; 0x21
 80057d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d107      	bne.n	80057ec <HAL_UART_Transmit_IT+0x80>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <HAL_UART_Transmit_IT+0xd4>)
 80057e8:	669a      	str	r2, [r3, #104]	; 0x68
 80057ea:	e002      	b.n	80057f2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <HAL_UART_Transmit_IT+0xd8>)
 80057f0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	613b      	str	r3, [r7, #16]
   return(result);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	61bb      	str	r3, [r7, #24]
   return(result);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	372c      	adds	r7, #44	; 0x2c
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	08006b4f 	.word	0x08006b4f
 8005844:	08006a97 	.word	0x08006a97

08005848 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	2b20      	cmp	r3, #32
 800585c:	d13d      	bne.n	80058da <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_UART_Receive_IT+0x22>
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e036      	b.n	80058dc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_UART_Receive_IT+0x34>
 8005878:	2302      	movs	r3, #2
 800587a:	e02f      	b.n	80058dc <HAL_UART_Receive_IT+0x94>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d018      	beq.n	80058ca <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	69f9      	ldr	r1, [r7, #28]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	461a      	mov	r2, r3
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 ffbb 	bl	800684c <UART_Start_Receive_IT>
 80058d6:	4603      	mov	r3, r0
 80058d8:	e000      	b.n	80058dc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b0ba      	sub	sp, #232	; 0xe8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800590a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800590e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005912:	4013      	ands	r3, r2
 8005914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d115      	bne.n	800594c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00f      	beq.n	800594c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 82a3 	beq.w	8005e88 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
      }
      return;
 800594a:	e29d      	b.n	8005e88 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800594c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8117 	beq.w	8005b84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005962:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005966:	4b85      	ldr	r3, [pc, #532]	; (8005b7c <HAL_UART_IRQHandler+0x298>)
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 810a 	beq.w	8005b84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <HAL_UART_IRQHandler+0xbc>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d011      	beq.n	80059d0 <HAL_UART_IRQHandler+0xec>
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2202      	movs	r2, #2
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d011      	beq.n	8005a00 <HAL_UART_IRQHandler+0x11c>
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2204      	movs	r2, #4
 80059ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f6:	f043 0202 	orr.w	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a32:	f043 0208 	orr.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d012      	beq.n	8005a6e <HAL_UART_IRQHandler+0x18a>
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8209 	beq.w	8005e8c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00d      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	d005      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04f      	beq.n	8005b66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 ff6c 	bl	80069a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d141      	bne.n	8005b5e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <HAL_UART_IRQHandler+0x29c>)
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc f95b 	bl	8001df6 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00f      	b.n	8005b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9a2 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00b      	b.n	8005b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f99e 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e007      	b.n	8005b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f99a 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b74:	e18a      	b.n	8005e8c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b76:	bf00      	nop
    return;
 8005b78:	e188      	b.n	8005e8c <HAL_UART_IRQHandler+0x5a8>
 8005b7a:	bf00      	nop
 8005b7c:	04000120 	.word	0x04000120
 8005b80:	08006a6b 	.word	0x08006a6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	f040 8143 	bne.w	8005e14 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 813c 	beq.w	8005e14 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8135 	beq.w	8005e14 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	f040 80b1 	bne.w	8005d24 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 815c 	beq.w	8005e90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 8154 	bcs.w	8005e90 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	f000 8085 	beq.w	8005d08 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c2c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1da      	bne.n	8005bfe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e1      	bne.n	8005c48 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e4      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fc f83e 	bl	8001d84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f8c9 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d22:	e0b5      	b.n	8005e90 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80a7 	beq.w	8005e94 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a2 	beq.w	8005e94 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d72:	647b      	str	r3, [r7, #68]	; 0x44
 8005d74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e4      	bne.n	8005d50 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	623b      	str	r3, [r7, #32]
   return(result);
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005daa:	633a      	str	r2, [r7, #48]	; 0x30
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e3      	bne.n	8005d86 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	69b9      	ldr	r1, [r7, #24]
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e4      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f851 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e12:	e03f      	b.n	8005e94 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <HAL_UART_IRQHandler+0x55a>
 8005e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f86f 	bl	8006f1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e3c:	e02d      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01c      	beq.n	8005e98 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
    }
    return;
 8005e66:	e017      	b.n	8005e98 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d012      	beq.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00c      	beq.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fec4 	bl	8006c0e <UART_EndTransmit_IT>
    return;
 8005e86:	e008      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e88:	bf00      	nop
 8005e8a:	e006      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e8c:	bf00      	nop
 8005e8e:	e004      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e98:	bf00      	nop
  }

}
 8005e9a:	37e8      	adds	r7, #232	; 0xe8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4a9a      	ldr	r2, [pc, #616]	; (8006148 <UART_SetConfig+0x27c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d904      	bls.n	8005eec <UART_SetConfig+0x20>
 8005ee2:	f640 313f 	movw	r1, #2879	; 0xb3f
 8005ee6:	4899      	ldr	r0, [pc, #612]	; (800614c <UART_SetConfig+0x280>)
 8005ee8:	f7fb fa79 	bl	80013de <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef4:	d00d      	beq.n	8005f12 <UART_SetConfig+0x46>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <UART_SetConfig+0x46>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	d004      	beq.n	8005f12 <UART_SetConfig+0x46>
 8005f08:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8005f0c:	488f      	ldr	r0, [pc, #572]	; (800614c <UART_SetConfig+0x280>)
 8005f0e:	f7fb fa66 	bl	80013de <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d012      	beq.n	8005f42 <UART_SetConfig+0x76>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <UART_SetConfig+0x76>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f2c:	d009      	beq.n	8005f42 <UART_SetConfig+0x76>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f36:	d004      	beq.n	8005f42 <UART_SetConfig+0x76>
 8005f38:	f640 3141 	movw	r1, #2881	; 0xb41
 8005f3c:	4883      	ldr	r0, [pc, #524]	; (800614c <UART_SetConfig+0x280>)
 8005f3e:	f7fb fa4e 	bl	80013de <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <UART_SetConfig+0x92>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d004      	beq.n	8005f5e <UART_SetConfig+0x92>
 8005f54:	f640 3142 	movw	r1, #2882	; 0xb42
 8005f58:	487c      	ldr	r0, [pc, #496]	; (800614c <UART_SetConfig+0x280>)
 8005f5a:	f7fb fa40 	bl	80013de <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <UART_SetConfig+0xb8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d009      	beq.n	8005f84 <UART_SetConfig+0xb8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f78:	d004      	beq.n	8005f84 <UART_SetConfig+0xb8>
 8005f7a:	f640 3144 	movw	r1, #2884	; 0xb44
 8005f7e:	4873      	ldr	r0, [pc, #460]	; (800614c <UART_SetConfig+0x280>)
 8005f80:	f7fb fa2d 	bl	80013de <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f023 030c 	bic.w	r3, r3, #12
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <UART_SetConfig+0xcc>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <UART_SetConfig+0xd6>
 8005f98:	f640 3145 	movw	r1, #2885	; 0xb45
 8005f9c:	486b      	ldr	r0, [pc, #428]	; (800614c <UART_SetConfig+0x280>)
 8005f9e:	f7fb fa1e 	bl	80013de <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d013      	beq.n	8005fd2 <UART_SetConfig+0x106>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d00e      	beq.n	8005fd2 <UART_SetConfig+0x106>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fbc:	d009      	beq.n	8005fd2 <UART_SetConfig+0x106>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc6:	d004      	beq.n	8005fd2 <UART_SetConfig+0x106>
 8005fc8:	f640 3146 	movw	r1, #2886	; 0xb46
 8005fcc:	485f      	ldr	r0, [pc, #380]	; (800614c <UART_SetConfig+0x280>)
 8005fce:	f7fb fa06 	bl	80013de <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <UART_SetConfig+0x122>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe2:	d004      	beq.n	8005fee <UART_SetConfig+0x122>
 8005fe4:	f640 3147 	movw	r1, #2887	; 0xb47
 8005fe8:	4858      	ldr	r0, [pc, #352]	; (800614c <UART_SetConfig+0x280>)
 8005fea:	f7fb f9f8 	bl	80013de <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b50      	ldr	r3, [pc, #320]	; (8006150 <UART_SetConfig+0x284>)
 800600e:	4013      	ands	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	430b      	orrs	r3, r1
 8006018:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3e      	ldr	r2, [pc, #248]	; (8006154 <UART_SetConfig+0x288>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d11f      	bne.n	800609e <UART_SetConfig+0x1d2>
 800605e:	4b3e      	ldr	r3, [pc, #248]	; (8006158 <UART_SetConfig+0x28c>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d816      	bhi.n	8006098 <UART_SetConfig+0x1cc>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x1a4>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006081 	.word	0x08006081
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006093 	.word	0x08006093
 800607c:	08006087 	.word	0x08006087
 8006080:	2301      	movs	r3, #1
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e0c4      	b.n	8006210 <UART_SetConfig+0x344>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e0c1      	b.n	8006210 <UART_SetConfig+0x344>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e0be      	b.n	8006210 <UART_SetConfig+0x344>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e0bb      	b.n	8006210 <UART_SetConfig+0x344>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e0b8      	b.n	8006210 <UART_SetConfig+0x344>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2e      	ldr	r2, [pc, #184]	; (800615c <UART_SetConfig+0x290>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d124      	bne.n	80060f2 <UART_SetConfig+0x226>
 80060a8:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <UART_SetConfig+0x28c>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060b4:	d011      	beq.n	80060da <UART_SetConfig+0x20e>
 80060b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ba:	d817      	bhi.n	80060ec <UART_SetConfig+0x220>
 80060bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c0:	d011      	beq.n	80060e6 <UART_SetConfig+0x21a>
 80060c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c6:	d811      	bhi.n	80060ec <UART_SetConfig+0x220>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <UART_SetConfig+0x208>
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	d006      	beq.n	80060e0 <UART_SetConfig+0x214>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x220>
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e09a      	b.n	8006210 <UART_SetConfig+0x344>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e097      	b.n	8006210 <UART_SetConfig+0x344>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e094      	b.n	8006210 <UART_SetConfig+0x344>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e091      	b.n	8006210 <UART_SetConfig+0x344>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e08e      	b.n	8006210 <UART_SetConfig+0x344>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <UART_SetConfig+0x294>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d133      	bne.n	8006164 <UART_SetConfig+0x298>
 80060fc:	4b16      	ldr	r3, [pc, #88]	; (8006158 <UART_SetConfig+0x28c>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006104:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006108:	d011      	beq.n	800612e <UART_SetConfig+0x262>
 800610a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800610e:	d817      	bhi.n	8006140 <UART_SetConfig+0x274>
 8006110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006114:	d011      	beq.n	800613a <UART_SetConfig+0x26e>
 8006116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800611a:	d811      	bhi.n	8006140 <UART_SetConfig+0x274>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <UART_SetConfig+0x25c>
 8006120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006124:	d006      	beq.n	8006134 <UART_SetConfig+0x268>
 8006126:	e00b      	b.n	8006140 <UART_SetConfig+0x274>
 8006128:	2300      	movs	r3, #0
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e070      	b.n	8006210 <UART_SetConfig+0x344>
 800612e:	2302      	movs	r3, #2
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e06d      	b.n	8006210 <UART_SetConfig+0x344>
 8006134:	2304      	movs	r3, #4
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e06a      	b.n	8006210 <UART_SetConfig+0x344>
 800613a:	2308      	movs	r3, #8
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e067      	b.n	8006210 <UART_SetConfig+0x344>
 8006140:	2310      	movs	r3, #16
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e064      	b.n	8006210 <UART_SetConfig+0x344>
 8006146:	bf00      	nop
 8006148:	00895440 	.word	0x00895440
 800614c:	08008f1c 	.word	0x08008f1c
 8006150:	efff69f3 	.word	0xefff69f3
 8006154:	40013800 	.word	0x40013800
 8006158:	40021000 	.word	0x40021000
 800615c:	40004400 	.word	0x40004400
 8006160:	40004800 	.word	0x40004800
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a86      	ldr	r2, [pc, #536]	; (8006384 <UART_SetConfig+0x4b8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d124      	bne.n	80061b8 <UART_SetConfig+0x2ec>
 800616e:	4b86      	ldr	r3, [pc, #536]	; (8006388 <UART_SetConfig+0x4bc>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800617a:	d011      	beq.n	80061a0 <UART_SetConfig+0x2d4>
 800617c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006180:	d817      	bhi.n	80061b2 <UART_SetConfig+0x2e6>
 8006182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006186:	d011      	beq.n	80061ac <UART_SetConfig+0x2e0>
 8006188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800618c:	d811      	bhi.n	80061b2 <UART_SetConfig+0x2e6>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <UART_SetConfig+0x2ce>
 8006192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006196:	d006      	beq.n	80061a6 <UART_SetConfig+0x2da>
 8006198:	e00b      	b.n	80061b2 <UART_SetConfig+0x2e6>
 800619a:	2300      	movs	r3, #0
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e037      	b.n	8006210 <UART_SetConfig+0x344>
 80061a0:	2302      	movs	r3, #2
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e034      	b.n	8006210 <UART_SetConfig+0x344>
 80061a6:	2304      	movs	r3, #4
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e031      	b.n	8006210 <UART_SetConfig+0x344>
 80061ac:	2308      	movs	r3, #8
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e02e      	b.n	8006210 <UART_SetConfig+0x344>
 80061b2:	2310      	movs	r3, #16
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e02b      	b.n	8006210 <UART_SetConfig+0x344>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a73      	ldr	r2, [pc, #460]	; (800638c <UART_SetConfig+0x4c0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d124      	bne.n	800620c <UART_SetConfig+0x340>
 80061c2:	4b71      	ldr	r3, [pc, #452]	; (8006388 <UART_SetConfig+0x4bc>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80061ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061ce:	d011      	beq.n	80061f4 <UART_SetConfig+0x328>
 80061d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061d4:	d817      	bhi.n	8006206 <UART_SetConfig+0x33a>
 80061d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061da:	d011      	beq.n	8006200 <UART_SetConfig+0x334>
 80061dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061e0:	d811      	bhi.n	8006206 <UART_SetConfig+0x33a>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <UART_SetConfig+0x322>
 80061e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ea:	d006      	beq.n	80061fa <UART_SetConfig+0x32e>
 80061ec:	e00b      	b.n	8006206 <UART_SetConfig+0x33a>
 80061ee:	2300      	movs	r3, #0
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e00d      	b.n	8006210 <UART_SetConfig+0x344>
 80061f4:	2302      	movs	r3, #2
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e00a      	b.n	8006210 <UART_SetConfig+0x344>
 80061fa:	2304      	movs	r3, #4
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e007      	b.n	8006210 <UART_SetConfig+0x344>
 8006200:	2308      	movs	r3, #8
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e004      	b.n	8006210 <UART_SetConfig+0x344>
 8006206:	2310      	movs	r3, #16
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e001      	b.n	8006210 <UART_SetConfig+0x344>
 800620c:	2310      	movs	r3, #16
 800620e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006218:	d15c      	bne.n	80062d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d828      	bhi.n	8006272 <UART_SetConfig+0x3a6>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x35c>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006273 	.word	0x08006273
 8006238:	08006263 	.word	0x08006263
 800623c:	08006273 	.word	0x08006273
 8006240:	08006273 	.word	0x08006273
 8006244:	08006273 	.word	0x08006273
 8006248:	0800626b 	.word	0x0800626b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fd fc28 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006250:	61b8      	str	r0, [r7, #24]
        break;
 8006252:	e013      	b.n	800627c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006254:	f7fd fc46 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 8006258:	61b8      	str	r0, [r7, #24]
        break;
 800625a:	e00f      	b.n	800627c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800625c:	4b4c      	ldr	r3, [pc, #304]	; (8006390 <UART_SetConfig+0x4c4>)
 800625e:	61bb      	str	r3, [r7, #24]
        break;
 8006260:	e00c      	b.n	800627c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006262:	f7fd fba7 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8006266:	61b8      	str	r0, [r7, #24]
        break;
 8006268:	e008      	b.n	800627c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	61bb      	str	r3, [r7, #24]
        break;
 8006270:	e004      	b.n	800627c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	77bb      	strb	r3, [r7, #30]
        break;
 800627a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d074      	beq.n	800636c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	005a      	lsls	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	441a      	add	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d916      	bls.n	80062ce <UART_SetConfig+0x402>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a6:	d212      	bcs.n	80062ce <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f023 030f 	bic.w	r3, r3, #15
 80062b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	b29a      	uxth	r2, r3
 80062be:	89fb      	ldrh	r3, [r7, #14]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	89fa      	ldrh	r2, [r7, #14]
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e04e      	b.n	800636c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	77bb      	strb	r3, [r7, #30]
 80062d2:	e04b      	b.n	800636c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d827      	bhi.n	800632a <UART_SetConfig+0x45e>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x414>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	0800632b 	.word	0x0800632b
 80062f0:	0800631b 	.word	0x0800631b
 80062f4:	0800632b 	.word	0x0800632b
 80062f8:	0800632b 	.word	0x0800632b
 80062fc:	0800632b 	.word	0x0800632b
 8006300:	08006323 	.word	0x08006323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fd fbcc 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006308:	61b8      	str	r0, [r7, #24]
        break;
 800630a:	e013      	b.n	8006334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630c:	f7fd fbea 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 8006310:	61b8      	str	r0, [r7, #24]
        break;
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <UART_SetConfig+0x4c4>)
 8006316:	61bb      	str	r3, [r7, #24]
        break;
 8006318:	e00c      	b.n	8006334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fd fb4b 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800631e:	61b8      	str	r0, [r7, #24]
        break;
 8006320:	e008      	b.n	8006334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	61bb      	str	r3, [r7, #24]
        break;
 8006328:	e004      	b.n	8006334 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	77bb      	strb	r3, [r7, #30]
        break;
 8006332:	bf00      	nop
    }

    if (pclk != 0U)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d018      	beq.n	800636c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	085a      	lsrs	r2, r3, #1
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	441a      	add	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	b29b      	uxth	r3, r3
 800634e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d908      	bls.n	8006368 <UART_SetConfig+0x49c>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d204      	bcs.n	8006368 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	e001      	b.n	800636c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006378:	7fbb      	ldrb	r3, [r7, #30]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40004c00 	.word	0x40004c00
 8006388:	40021000 	.word	0x40021000
 800638c:	40005000 	.word	0x40005000
 8006390:	007a1200 	.word	0x007a1200

08006394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2bff      	cmp	r3, #255	; 0xff
 80063a2:	d904      	bls.n	80063ae <UART_AdvFeatureConfig+0x1a>
 80063a4:	f640 31c8 	movw	r1, #3016	; 0xbc8
 80063a8:	489d      	ldr	r0, [pc, #628]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 80063aa:	f7fb f818 	bl	80013de <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <UART_AdvFeatureConfig+0x42>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ca:	d004      	beq.n	80063d6 <UART_AdvFeatureConfig+0x42>
 80063cc:	f640 31cd 	movw	r1, #3021	; 0xbcd
 80063d0:	4893      	ldr	r0, [pc, #588]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 80063d2:	f7fb f804 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d018      	beq.n	800642a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <UART_AdvFeatureConfig+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006408:	d004      	beq.n	8006414 <UART_AdvFeatureConfig+0x80>
 800640a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800640e:	4884      	ldr	r0, [pc, #528]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 8006410:	f7fa ffe5 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <UART_AdvFeatureConfig+0xbe>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006446:	d004      	beq.n	8006452 <UART_AdvFeatureConfig+0xbe>
 8006448:	f640 31db 	movw	r1, #3035	; 0xbdb
 800644c:	4874      	ldr	r0, [pc, #464]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 800644e:	f7fa ffc6 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d018      	beq.n	80064a6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <UART_AdvFeatureConfig+0xfc>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006484:	d004      	beq.n	8006490 <UART_AdvFeatureConfig+0xfc>
 8006486:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800648a:	4865      	ldr	r0, [pc, #404]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 800648c:	f7fa ffa7 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <UART_AdvFeatureConfig+0x13a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d004      	beq.n	80064ce <UART_AdvFeatureConfig+0x13a>
 80064c4:	f640 31e9 	movw	r1, #3049	; 0xbe9
 80064c8:	4855      	ldr	r0, [pc, #340]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 80064ca:	f7fa ff88 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d018      	beq.n	8006522 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <UART_AdvFeatureConfig+0x178>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006500:	d004      	beq.n	800650c <UART_AdvFeatureConfig+0x178>
 8006502:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8006506:	4846      	ldr	r0, [pc, #280]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 8006508:	f7fa ff69 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d054      	beq.n	80065d8 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a3c      	ldr	r2, [pc, #240]	; (8006624 <UART_AdvFeatureConfig+0x290>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <UART_AdvFeatureConfig+0x1c2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a3a      	ldr	r2, [pc, #232]	; (8006628 <UART_AdvFeatureConfig+0x294>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <UART_AdvFeatureConfig+0x1c2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a39      	ldr	r2, [pc, #228]	; (800662c <UART_AdvFeatureConfig+0x298>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <UART_AdvFeatureConfig+0x1c2>
 800654c:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8006550:	4833      	ldr	r0, [pc, #204]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 8006552:	f7fa ff44 	bl	80013de <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <UART_AdvFeatureConfig+0x1de>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d004      	beq.n	8006572 <UART_AdvFeatureConfig+0x1de>
 8006568:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800656c:	482c      	ldr	r0, [pc, #176]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 800656e:	f7fa ff36 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006590:	d122      	bne.n	80065d8 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	2b00      	cmp	r3, #0
 8006598:	d013      	beq.n	80065c2 <UART_AdvFeatureConfig+0x22e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065a2:	d00e      	beq.n	80065c2 <UART_AdvFeatureConfig+0x22e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ac:	d009      	beq.n	80065c2 <UART_AdvFeatureConfig+0x22e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065b6:	d004      	beq.n	80065c2 <UART_AdvFeatureConfig+0x22e>
 80065b8:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80065bc:	4818      	ldr	r0, [pc, #96]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 80065be:	f7fa ff0e 	bl	80013de <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d018      	beq.n	8006616 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <UART_AdvFeatureConfig+0x26c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065f4:	d004      	beq.n	8006600 <UART_AdvFeatureConfig+0x26c>
 80065f6:	f640 4105 	movw	r1, #3077	; 0xc05
 80065fa:	4809      	ldr	r0, [pc, #36]	; (8006620 <UART_AdvFeatureConfig+0x28c>)
 80065fc:	f7fa feef 	bl	80013de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  }
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	08008f1c 	.word	0x08008f1c
 8006624:	40013800 	.word	0x40013800
 8006628:	40004400 	.word	0x40004400
 800662c:	40004800 	.word	0x40004800

08006630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006640:	f7fb fa30 	bl	8001aa4 <HAL_GetTick>
 8006644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b08      	cmp	r3, #8
 8006652:	d10e      	bne.n	8006672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f82d 	bl	80066c2 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e023      	b.n	80066ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d10e      	bne.n	800669e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f817 	bl	80066c2 <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e00d      	b.n	80066ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b09c      	sub	sp, #112	; 0x70
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d2:	e0a5      	b.n	8006820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	f000 80a1 	beq.w	8006820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fb f9e1 	bl	8001aa4 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80066ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13e      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006708:	667b      	str	r3, [r7, #100]	; 0x64
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e6      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	663b      	str	r3, [r7, #96]	; 0x60
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3308      	adds	r3, #8
 8006744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006746:	64ba      	str	r2, [r7, #72]	; 0x48
 8006748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800674c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e067      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d04f      	beq.n	8006820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678e:	d147      	bne.n	8006820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	613b      	str	r3, [r7, #16]
   return(result);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067ec:	623a      	str	r2, [r7, #32]
 80067ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69f9      	ldr	r1, [r7, #28]
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e010      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	bf0c      	ite	eq
 8006830:	2301      	moveq	r3, #1
 8006832:	2300      	movne	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	429a      	cmp	r2, r3
 800683c:	f43f af4a 	beq.w	80066d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3770      	adds	r7, #112	; 0x70
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800684c:	b480      	push	{r7}
 800684e:	b091      	sub	sp, #68	; 0x44
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687e:	d10e      	bne.n	800689e <UART_Start_Receive_IT+0x52>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <UART_Start_Receive_IT+0x48>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800688e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006892:	e02d      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800689c:	e028      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10d      	bne.n	80068c2 <UART_Start_Receive_IT+0x76>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <UART_Start_Receive_IT+0x6c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068b6:	e01b      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	227f      	movs	r2, #127	; 0x7f
 80068bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068c0:	e016      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ca:	d10d      	bne.n	80068e8 <UART_Start_Receive_IT+0x9c>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <UART_Start_Receive_IT+0x92>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	227f      	movs	r2, #127	; 0x7f
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068dc:	e008      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	223f      	movs	r2, #63	; 0x3f
 80068e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068e6:	e003      	b.n	80068f0 <UART_Start_Receive_IT+0xa4>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2222      	movs	r2, #34	; 0x22
 80068fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800691e:	637a      	str	r2, [r7, #52]	; 0x34
 8006920:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d107      	bne.n	800694c <UART_Start_Receive_IT+0x100>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <UART_Start_Receive_IT+0x150>)
 8006948:	665a      	str	r2, [r3, #100]	; 0x64
 800694a:	e002      	b.n	8006952 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a14      	ldr	r2, [pc, #80]	; (80069a0 <UART_Start_Receive_IT+0x154>)
 8006950:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	613b      	str	r3, [r7, #16]
   return(result);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800696e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	6a3a      	ldr	r2, [r7, #32]
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	61bb      	str	r3, [r7, #24]
   return(result);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3744      	adds	r7, #68	; 0x44
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	08006dbf 	.word	0x08006dbf
 80069a0:	08006c63 	.word	0x08006c63

080069a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b095      	sub	sp, #84	; 0x54
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
 80069cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d118      	bne.n	8006a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6979      	ldr	r1, [r7, #20]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	613b      	str	r3, [r7, #16]
   return(result);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a5e:	bf00      	nop
 8006a60:	3754      	adds	r7, #84	; 0x54
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fa09 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b08f      	sub	sp, #60	; 0x3c
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa2:	2b21      	cmp	r3, #33	; 0x21
 8006aa4:	d14d      	bne.n	8006b42 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d132      	bne.n	8006b18 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006b16:	e014      	b.n	8006b42 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	b292      	uxth	r2, r2
 8006b24:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b42:	bf00      	nop
 8006b44:	373c      	adds	r7, #60	; 0x3c
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b091      	sub	sp, #68	; 0x44
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5a:	2b21      	cmp	r3, #33	; 0x21
 8006b5c:	d151      	bne.n	8006c02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d132      	bne.n	8006bd0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	623b      	str	r3, [r7, #32]
   return(result);
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e6      	bne.n	8006b9c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006bce:	e018      	b.n	8006c02 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be2:	b292      	uxth	r2, r2
 8006be4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c02:	bf00      	nop
 8006c04:	3744      	adds	r7, #68	; 0x44
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	613b      	str	r3, [r7, #16]
   return(result);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7f9 ff5d 	bl	8000b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5a:	bf00      	nop
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b096      	sub	sp, #88	; 0x58
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c78:	2b22      	cmp	r3, #34	; 0x22
 8006c7a:	f040 8094 	bne.w	8006da6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c88:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c8c:	b2d9      	uxtb	r1, r3
 8006c8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	400a      	ands	r2, r1
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d177      	bne.n	8006db6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cda:	653b      	str	r3, [r7, #80]	; 0x50
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e6      	bne.n	8006cc6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d18:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d12e      	bne.n	8006d9e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0310 	bic.w	r3, r3, #16
 8006d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	617b      	str	r3, [r7, #20]
   return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e6      	bne.n	8006d46 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d103      	bne.n	8006d8e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff f88c 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d9c:	e00b      	b.n	8006db6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7f9 feee 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 8006da4:	e007      	b.n	8006db6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0208 	orr.w	r2, r2, #8
 8006db4:	619a      	str	r2, [r3, #24]
}
 8006db6:	bf00      	nop
 8006db8:	3758      	adds	r7, #88	; 0x58
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b096      	sub	sp, #88	; 0x58
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd4:	2b22      	cmp	r3, #34	; 0x22
 8006dd6:	f040 8094 	bne.w	8006f02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006de0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006dee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006df2:	4013      	ands	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	1c9a      	adds	r2, r3, #2
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d177      	bne.n	8006f12 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	643b      	str	r3, [r7, #64]	; 0x40
 8006e42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e6      	bne.n	8006e22 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d12e      	bne.n	8006efa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f023 0310 	bic.w	r3, r3, #16
 8006eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6979      	ldr	r1, [r7, #20]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b10      	cmp	r3, #16
 8006ee0:	d103      	bne.n	8006eea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe ffde 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ef8:	e00b      	b.n	8006f12 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7f9 fe40 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 8006f00:	e007      	b.n	8006f12 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0208 	orr.w	r2, r2, #8
 8006f10:	619a      	str	r2, [r3, #24]
}
 8006f12:	bf00      	nop
 8006f14:	3758      	adds	r7, #88	; 0x58
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <__errno>:
 8006f30:	4b01      	ldr	r3, [pc, #4]	; (8006f38 <__errno+0x8>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000088 	.word	0x20000088

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	; (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	; (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	; (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	; (8006f80 <__libc_init_array+0x44>)
 8006f50:	f001 fe0c 	bl	8008b6c <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	08009150 	.word	0x08009150
 8006f78:	08009150 	.word	0x08009150
 8006f7c:	08009150 	.word	0x08009150
 8006f80:	08009154 	.word	0x08009154

08006f84 <memset>:
 8006f84:	4402      	add	r2, r0
 8006f86:	4603      	mov	r3, r0
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d100      	bne.n	8006f8e <memset+0xa>
 8006f8c:	4770      	bx	lr
 8006f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f92:	e7f9      	b.n	8006f88 <memset+0x4>

08006f94 <iprintf>:
 8006f94:	b40f      	push	{r0, r1, r2, r3}
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <iprintf+0x2c>)
 8006f98:	b513      	push	{r0, r1, r4, lr}
 8006f9a:	681c      	ldr	r4, [r3, #0]
 8006f9c:	b124      	cbz	r4, 8006fa8 <iprintf+0x14>
 8006f9e:	69a3      	ldr	r3, [r4, #24]
 8006fa0:	b913      	cbnz	r3, 8006fa8 <iprintf+0x14>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 f91a 	bl	80071dc <__sinit>
 8006fa8:	ab05      	add	r3, sp, #20
 8006faa:	9a04      	ldr	r2, [sp, #16]
 8006fac:	68a1      	ldr	r1, [r4, #8]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fd77 	bl	8007aa4 <_vfiprintf_r>
 8006fb6:	b002      	add	sp, #8
 8006fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbc:	b004      	add	sp, #16
 8006fbe:	4770      	bx	lr
 8006fc0:	20000088 	.word	0x20000088

08006fc4 <siscanf>:
 8006fc4:	b40e      	push	{r1, r2, r3}
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	b09f      	sub	sp, #124	; 0x7c
 8006fca:	ac21      	add	r4, sp, #132	; 0x84
 8006fcc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006fd0:	f854 2b04 	ldr.w	r2, [r4], #4
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006fda:	9004      	str	r0, [sp, #16]
 8006fdc:	9008      	str	r0, [sp, #32]
 8006fde:	f7f9 f909 	bl	80001f4 <strlen>
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <siscanf+0x50>)
 8006fe4:	9005      	str	r0, [sp, #20]
 8006fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8006fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8006fea:	480b      	ldr	r0, [pc, #44]	; (8007018 <siscanf+0x54>)
 8006fec:	9a01      	ldr	r2, [sp, #4]
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	9403      	str	r4, [sp, #12]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8006ff6:	9316      	str	r3, [sp, #88]	; 0x58
 8006ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ffc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007000:	a904      	add	r1, sp, #16
 8007002:	4623      	mov	r3, r4
 8007004:	f000 fbac 	bl	8007760 <__ssvfiscanf_r>
 8007008:	b01f      	add	sp, #124	; 0x7c
 800700a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700e:	b003      	add	sp, #12
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	0800703f 	.word	0x0800703f
 8007018:	20000088 	.word	0x20000088

0800701c <__sread>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	f001 f94e 	bl	80082c4 <_read_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	bfab      	itete	ge
 800702c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702e:	89a3      	ldrhlt	r3, [r4, #12]
 8007030:	181b      	addge	r3, r3, r0
 8007032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007036:	bfac      	ite	ge
 8007038:	6563      	strge	r3, [r4, #84]	; 0x54
 800703a:	81a3      	strhlt	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__seofread>:
 800703e:	2000      	movs	r0, #0
 8007040:	4770      	bx	lr

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	05db      	lsls	r3, r3, #23
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2302      	movs	r3, #2
 800705a:	2200      	movs	r2, #0
 800705c:	f000 f95e 	bl	800731c <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b837 	b.w	80070e8 <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f94b 	bl	800731c <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	; 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b833 	b.w	800710c <_close_r>
	...

080070a8 <_vsiprintf_r>:
 80070a8:	b500      	push	{lr}
 80070aa:	b09b      	sub	sp, #108	; 0x6c
 80070ac:	9100      	str	r1, [sp, #0]
 80070ae:	9104      	str	r1, [sp, #16]
 80070b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070b4:	9105      	str	r1, [sp, #20]
 80070b6:	9102      	str	r1, [sp, #8]
 80070b8:	4905      	ldr	r1, [pc, #20]	; (80070d0 <_vsiprintf_r+0x28>)
 80070ba:	9103      	str	r1, [sp, #12]
 80070bc:	4669      	mov	r1, sp
 80070be:	f000 f9f5 	bl	80074ac <_svfiprintf_r>
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	b01b      	add	sp, #108	; 0x6c
 80070ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ce:	bf00      	nop
 80070d0:	ffff0208 	.word	0xffff0208

080070d4 <vsiprintf>:
 80070d4:	4613      	mov	r3, r2
 80070d6:	460a      	mov	r2, r1
 80070d8:	4601      	mov	r1, r0
 80070da:	4802      	ldr	r0, [pc, #8]	; (80070e4 <vsiprintf+0x10>)
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f7ff bfe3 	b.w	80070a8 <_vsiprintf_r>
 80070e2:	bf00      	nop
 80070e4:	20000088 	.word	0x20000088

080070e8 <_write_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_write_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fa fa8d 	bl	8001616 <_write>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_write_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_write_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	200008b0 	.word	0x200008b0

0800710c <_close_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d06      	ldr	r5, [pc, #24]	; (8007128 <_close_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fa fa99 	bl	800164e <_close>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_close_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_close_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	200008b0 	.word	0x200008b0

0800712c <std>:
 800712c:	2300      	movs	r3, #0
 800712e:	b510      	push	{r4, lr}
 8007130:	4604      	mov	r4, r0
 8007132:	e9c0 3300 	strd	r3, r3, [r0]
 8007136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800713a:	6083      	str	r3, [r0, #8]
 800713c:	8181      	strh	r1, [r0, #12]
 800713e:	6643      	str	r3, [r0, #100]	; 0x64
 8007140:	81c2      	strh	r2, [r0, #14]
 8007142:	6183      	str	r3, [r0, #24]
 8007144:	4619      	mov	r1, r3
 8007146:	2208      	movs	r2, #8
 8007148:	305c      	adds	r0, #92	; 0x5c
 800714a:	f7ff ff1b 	bl	8006f84 <memset>
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x38>)
 8007150:	6263      	str	r3, [r4, #36]	; 0x24
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <std+0x3c>)
 8007154:	62a3      	str	r3, [r4, #40]	; 0x28
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <std+0x40>)
 8007158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800715a:	4b05      	ldr	r3, [pc, #20]	; (8007170 <std+0x44>)
 800715c:	6224      	str	r4, [r4, #32]
 800715e:	6323      	str	r3, [r4, #48]	; 0x30
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	0800701d 	.word	0x0800701d
 8007168:	08007043 	.word	0x08007043
 800716c:	0800707b 	.word	0x0800707b
 8007170:	0800709f 	.word	0x0800709f

08007174 <_cleanup_r>:
 8007174:	4901      	ldr	r1, [pc, #4]	; (800717c <_cleanup_r+0x8>)
 8007176:	f000 b8af 	b.w	80072d8 <_fwalk_reent>
 800717a:	bf00      	nop
 800717c:	08008885 	.word	0x08008885

08007180 <__sfmoreglue>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	1e4a      	subs	r2, r1, #1
 8007184:	2568      	movs	r5, #104	; 0x68
 8007186:	4355      	muls	r5, r2
 8007188:	460e      	mov	r6, r1
 800718a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800718e:	f000 f8d7 	bl	8007340 <_malloc_r>
 8007192:	4604      	mov	r4, r0
 8007194:	b140      	cbz	r0, 80071a8 <__sfmoreglue+0x28>
 8007196:	2100      	movs	r1, #0
 8007198:	e9c0 1600 	strd	r1, r6, [r0]
 800719c:	300c      	adds	r0, #12
 800719e:	60a0      	str	r0, [r4, #8]
 80071a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071a4:	f7ff feee 	bl	8006f84 <memset>
 80071a8:	4620      	mov	r0, r4
 80071aa:	bd70      	pop	{r4, r5, r6, pc}

080071ac <__sfp_lock_acquire>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__sfp_lock_acquire+0x8>)
 80071ae:	f000 b8b3 	b.w	8007318 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	200008ac 	.word	0x200008ac

080071b8 <__sfp_lock_release>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__sfp_lock_release+0x8>)
 80071ba:	f000 b8ae 	b.w	800731a <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	200008ac 	.word	0x200008ac

080071c4 <__sinit_lock_acquire>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__sinit_lock_acquire+0x8>)
 80071c6:	f000 b8a7 	b.w	8007318 <__retarget_lock_acquire_recursive>
 80071ca:	bf00      	nop
 80071cc:	200008a7 	.word	0x200008a7

080071d0 <__sinit_lock_release>:
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <__sinit_lock_release+0x8>)
 80071d2:	f000 b8a2 	b.w	800731a <__retarget_lock_release_recursive>
 80071d6:	bf00      	nop
 80071d8:	200008a7 	.word	0x200008a7

080071dc <__sinit>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	f7ff fff0 	bl	80071c4 <__sinit_lock_acquire>
 80071e4:	69a3      	ldr	r3, [r4, #24]
 80071e6:	b11b      	cbz	r3, 80071f0 <__sinit+0x14>
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ec:	f7ff bff0 	b.w	80071d0 <__sinit_lock_release>
 80071f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071f4:	6523      	str	r3, [r4, #80]	; 0x50
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <__sinit+0x68>)
 80071f8:	4a13      	ldr	r2, [pc, #76]	; (8007248 <__sinit+0x6c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80071fe:	42a3      	cmp	r3, r4
 8007200:	bf04      	itt	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	61a3      	streq	r3, [r4, #24]
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f820 	bl	800724c <__sfp>
 800720c:	6060      	str	r0, [r4, #4]
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f81c 	bl	800724c <__sfp>
 8007214:	60a0      	str	r0, [r4, #8]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f818 	bl	800724c <__sfp>
 800721c:	2200      	movs	r2, #0
 800721e:	60e0      	str	r0, [r4, #12]
 8007220:	2104      	movs	r1, #4
 8007222:	6860      	ldr	r0, [r4, #4]
 8007224:	f7ff ff82 	bl	800712c <std>
 8007228:	68a0      	ldr	r0, [r4, #8]
 800722a:	2201      	movs	r2, #1
 800722c:	2109      	movs	r1, #9
 800722e:	f7ff ff7d 	bl	800712c <std>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	2202      	movs	r2, #2
 8007236:	2112      	movs	r1, #18
 8007238:	f7ff ff78 	bl	800712c <std>
 800723c:	2301      	movs	r3, #1
 800723e:	61a3      	str	r3, [r4, #24]
 8007240:	e7d2      	b.n	80071e8 <__sinit+0xc>
 8007242:	bf00      	nop
 8007244:	08008f9c 	.word	0x08008f9c
 8007248:	08007175 	.word	0x08007175

0800724c <__sfp>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	4607      	mov	r7, r0
 8007250:	f7ff ffac 	bl	80071ac <__sfp_lock_acquire>
 8007254:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <__sfp+0x84>)
 8007256:	681e      	ldr	r6, [r3, #0]
 8007258:	69b3      	ldr	r3, [r6, #24]
 800725a:	b913      	cbnz	r3, 8007262 <__sfp+0x16>
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff ffbd 	bl	80071dc <__sinit>
 8007262:	3648      	adds	r6, #72	; 0x48
 8007264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007268:	3b01      	subs	r3, #1
 800726a:	d503      	bpl.n	8007274 <__sfp+0x28>
 800726c:	6833      	ldr	r3, [r6, #0]
 800726e:	b30b      	cbz	r3, 80072b4 <__sfp+0x68>
 8007270:	6836      	ldr	r6, [r6, #0]
 8007272:	e7f7      	b.n	8007264 <__sfp+0x18>
 8007274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007278:	b9d5      	cbnz	r5, 80072b0 <__sfp+0x64>
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <__sfp+0x88>)
 800727c:	60e3      	str	r3, [r4, #12]
 800727e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007282:	6665      	str	r5, [r4, #100]	; 0x64
 8007284:	f000 f847 	bl	8007316 <__retarget_lock_init_recursive>
 8007288:	f7ff ff96 	bl	80071b8 <__sfp_lock_release>
 800728c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007294:	6025      	str	r5, [r4, #0]
 8007296:	61a5      	str	r5, [r4, #24]
 8007298:	2208      	movs	r2, #8
 800729a:	4629      	mov	r1, r5
 800729c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072a0:	f7ff fe70 	bl	8006f84 <memset>
 80072a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072ac:	4620      	mov	r0, r4
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	3468      	adds	r4, #104	; 0x68
 80072b2:	e7d9      	b.n	8007268 <__sfp+0x1c>
 80072b4:	2104      	movs	r1, #4
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ff62 	bl	8007180 <__sfmoreglue>
 80072bc:	4604      	mov	r4, r0
 80072be:	6030      	str	r0, [r6, #0]
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d1d5      	bne.n	8007270 <__sfp+0x24>
 80072c4:	f7ff ff78 	bl	80071b8 <__sfp_lock_release>
 80072c8:	230c      	movs	r3, #12
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	e7ee      	b.n	80072ac <__sfp+0x60>
 80072ce:	bf00      	nop
 80072d0:	08008f9c 	.word	0x08008f9c
 80072d4:	ffff0001 	.word	0xffff0001

080072d8 <_fwalk_reent>:
 80072d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072dc:	4606      	mov	r6, r0
 80072de:	4688      	mov	r8, r1
 80072e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072e4:	2700      	movs	r7, #0
 80072e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072ea:	f1b9 0901 	subs.w	r9, r9, #1
 80072ee:	d505      	bpl.n	80072fc <_fwalk_reent+0x24>
 80072f0:	6824      	ldr	r4, [r4, #0]
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d1f7      	bne.n	80072e6 <_fwalk_reent+0xe>
 80072f6:	4638      	mov	r0, r7
 80072f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fc:	89ab      	ldrh	r3, [r5, #12]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d907      	bls.n	8007312 <_fwalk_reent+0x3a>
 8007302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007306:	3301      	adds	r3, #1
 8007308:	d003      	beq.n	8007312 <_fwalk_reent+0x3a>
 800730a:	4629      	mov	r1, r5
 800730c:	4630      	mov	r0, r6
 800730e:	47c0      	blx	r8
 8007310:	4307      	orrs	r7, r0
 8007312:	3568      	adds	r5, #104	; 0x68
 8007314:	e7e9      	b.n	80072ea <_fwalk_reent+0x12>

08007316 <__retarget_lock_init_recursive>:
 8007316:	4770      	bx	lr

08007318 <__retarget_lock_acquire_recursive>:
 8007318:	4770      	bx	lr

0800731a <__retarget_lock_release_recursive>:
 800731a:	4770      	bx	lr

0800731c <_lseek_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_lseek_r+0x20>)
 8007320:	4604      	mov	r4, r0
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7fa f9b6 	bl	800169c <_lseek>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_lseek_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_lseek_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	200008b0 	.word	0x200008b0

08007340 <_malloc_r>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	1ccd      	adds	r5, r1, #3
 8007344:	f025 0503 	bic.w	r5, r5, #3
 8007348:	3508      	adds	r5, #8
 800734a:	2d0c      	cmp	r5, #12
 800734c:	bf38      	it	cc
 800734e:	250c      	movcc	r5, #12
 8007350:	2d00      	cmp	r5, #0
 8007352:	4606      	mov	r6, r0
 8007354:	db01      	blt.n	800735a <_malloc_r+0x1a>
 8007356:	42a9      	cmp	r1, r5
 8007358:	d903      	bls.n	8007362 <_malloc_r+0x22>
 800735a:	230c      	movs	r3, #12
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	2000      	movs	r0, #0
 8007360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007362:	f001 fb57 	bl	8008a14 <__malloc_lock>
 8007366:	4921      	ldr	r1, [pc, #132]	; (80073ec <_malloc_r+0xac>)
 8007368:	680a      	ldr	r2, [r1, #0]
 800736a:	4614      	mov	r4, r2
 800736c:	b99c      	cbnz	r4, 8007396 <_malloc_r+0x56>
 800736e:	4f20      	ldr	r7, [pc, #128]	; (80073f0 <_malloc_r+0xb0>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	b923      	cbnz	r3, 800737e <_malloc_r+0x3e>
 8007374:	4621      	mov	r1, r4
 8007376:	4630      	mov	r0, r6
 8007378:	f000 ffb6 	bl	80082e8 <_sbrk_r>
 800737c:	6038      	str	r0, [r7, #0]
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f000 ffb1 	bl	80082e8 <_sbrk_r>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d123      	bne.n	80073d2 <_malloc_r+0x92>
 800738a:	230c      	movs	r3, #12
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	4630      	mov	r0, r6
 8007390:	f001 fb46 	bl	8008a20 <__malloc_unlock>
 8007394:	e7e3      	b.n	800735e <_malloc_r+0x1e>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	1b5b      	subs	r3, r3, r5
 800739a:	d417      	bmi.n	80073cc <_malloc_r+0x8c>
 800739c:	2b0b      	cmp	r3, #11
 800739e:	d903      	bls.n	80073a8 <_malloc_r+0x68>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	441c      	add	r4, r3
 80073a4:	6025      	str	r5, [r4, #0]
 80073a6:	e004      	b.n	80073b2 <_malloc_r+0x72>
 80073a8:	6863      	ldr	r3, [r4, #4]
 80073aa:	42a2      	cmp	r2, r4
 80073ac:	bf0c      	ite	eq
 80073ae:	600b      	streq	r3, [r1, #0]
 80073b0:	6053      	strne	r3, [r2, #4]
 80073b2:	4630      	mov	r0, r6
 80073b4:	f001 fb34 	bl	8008a20 <__malloc_unlock>
 80073b8:	f104 000b 	add.w	r0, r4, #11
 80073bc:	1d23      	adds	r3, r4, #4
 80073be:	f020 0007 	bic.w	r0, r0, #7
 80073c2:	1ac2      	subs	r2, r0, r3
 80073c4:	d0cc      	beq.n	8007360 <_malloc_r+0x20>
 80073c6:	1a1b      	subs	r3, r3, r0
 80073c8:	50a3      	str	r3, [r4, r2]
 80073ca:	e7c9      	b.n	8007360 <_malloc_r+0x20>
 80073cc:	4622      	mov	r2, r4
 80073ce:	6864      	ldr	r4, [r4, #4]
 80073d0:	e7cc      	b.n	800736c <_malloc_r+0x2c>
 80073d2:	1cc4      	adds	r4, r0, #3
 80073d4:	f024 0403 	bic.w	r4, r4, #3
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d0e3      	beq.n	80073a4 <_malloc_r+0x64>
 80073dc:	1a21      	subs	r1, r4, r0
 80073de:	4630      	mov	r0, r6
 80073e0:	f000 ff82 	bl	80082e8 <_sbrk_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d1dd      	bne.n	80073a4 <_malloc_r+0x64>
 80073e8:	e7cf      	b.n	800738a <_malloc_r+0x4a>
 80073ea:	bf00      	nop
 80073ec:	2000014c 	.word	0x2000014c
 80073f0:	20000150 	.word	0x20000150

080073f4 <__ssputs_r>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	688e      	ldr	r6, [r1, #8]
 80073fa:	429e      	cmp	r6, r3
 80073fc:	4682      	mov	sl, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4690      	mov	r8, r2
 8007402:	461f      	mov	r7, r3
 8007404:	d838      	bhi.n	8007478 <__ssputs_r+0x84>
 8007406:	898a      	ldrh	r2, [r1, #12]
 8007408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800740c:	d032      	beq.n	8007474 <__ssputs_r+0x80>
 800740e:	6825      	ldr	r5, [r4, #0]
 8007410:	6909      	ldr	r1, [r1, #16]
 8007412:	eba5 0901 	sub.w	r9, r5, r1
 8007416:	6965      	ldr	r5, [r4, #20]
 8007418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800741c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007420:	3301      	adds	r3, #1
 8007422:	444b      	add	r3, r9
 8007424:	106d      	asrs	r5, r5, #1
 8007426:	429d      	cmp	r5, r3
 8007428:	bf38      	it	cc
 800742a:	461d      	movcc	r5, r3
 800742c:	0553      	lsls	r3, r2, #21
 800742e:	d531      	bpl.n	8007494 <__ssputs_r+0xa0>
 8007430:	4629      	mov	r1, r5
 8007432:	f7ff ff85 	bl	8007340 <_malloc_r>
 8007436:	4606      	mov	r6, r0
 8007438:	b950      	cbnz	r0, 8007450 <__ssputs_r+0x5c>
 800743a:	230c      	movs	r3, #12
 800743c:	f8ca 3000 	str.w	r3, [sl]
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	6921      	ldr	r1, [r4, #16]
 8007452:	464a      	mov	r2, r9
 8007454:	f001 fab6 	bl	80089c4 <memcpy>
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	81a3      	strh	r3, [r4, #12]
 8007464:	6126      	str	r6, [r4, #16]
 8007466:	6165      	str	r5, [r4, #20]
 8007468:	444e      	add	r6, r9
 800746a:	eba5 0509 	sub.w	r5, r5, r9
 800746e:	6026      	str	r6, [r4, #0]
 8007470:	60a5      	str	r5, [r4, #8]
 8007472:	463e      	mov	r6, r7
 8007474:	42be      	cmp	r6, r7
 8007476:	d900      	bls.n	800747a <__ssputs_r+0x86>
 8007478:	463e      	mov	r6, r7
 800747a:	4632      	mov	r2, r6
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	4641      	mov	r1, r8
 8007480:	f001 faae 	bl	80089e0 <memmove>
 8007484:	68a3      	ldr	r3, [r4, #8]
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	1b9b      	subs	r3, r3, r6
 800748a:	4432      	add	r2, r6
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	2000      	movs	r0, #0
 8007492:	e7db      	b.n	800744c <__ssputs_r+0x58>
 8007494:	462a      	mov	r2, r5
 8007496:	f001 fb19 	bl	8008acc <_realloc_r>
 800749a:	4606      	mov	r6, r0
 800749c:	2800      	cmp	r0, #0
 800749e:	d1e1      	bne.n	8007464 <__ssputs_r+0x70>
 80074a0:	6921      	ldr	r1, [r4, #16]
 80074a2:	4650      	mov	r0, sl
 80074a4:	f001 fac2 	bl	8008a2c <_free_r>
 80074a8:	e7c7      	b.n	800743a <__ssputs_r+0x46>
	...

080074ac <_svfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	4698      	mov	r8, r3
 80074b2:	898b      	ldrh	r3, [r1, #12]
 80074b4:	061b      	lsls	r3, r3, #24
 80074b6:	b09d      	sub	sp, #116	; 0x74
 80074b8:	4607      	mov	r7, r0
 80074ba:	460d      	mov	r5, r1
 80074bc:	4614      	mov	r4, r2
 80074be:	d50e      	bpl.n	80074de <_svfiprintf_r+0x32>
 80074c0:	690b      	ldr	r3, [r1, #16]
 80074c2:	b963      	cbnz	r3, 80074de <_svfiprintf_r+0x32>
 80074c4:	2140      	movs	r1, #64	; 0x40
 80074c6:	f7ff ff3b 	bl	8007340 <_malloc_r>
 80074ca:	6028      	str	r0, [r5, #0]
 80074cc:	6128      	str	r0, [r5, #16]
 80074ce:	b920      	cbnz	r0, 80074da <_svfiprintf_r+0x2e>
 80074d0:	230c      	movs	r3, #12
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e0d1      	b.n	800767e <_svfiprintf_r+0x1d2>
 80074da:	2340      	movs	r3, #64	; 0x40
 80074dc:	616b      	str	r3, [r5, #20]
 80074de:	2300      	movs	r3, #0
 80074e0:	9309      	str	r3, [sp, #36]	; 0x24
 80074e2:	2320      	movs	r3, #32
 80074e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ec:	2330      	movs	r3, #48	; 0x30
 80074ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007698 <_svfiprintf_r+0x1ec>
 80074f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f6:	f04f 0901 	mov.w	r9, #1
 80074fa:	4623      	mov	r3, r4
 80074fc:	469a      	mov	sl, r3
 80074fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007502:	b10a      	cbz	r2, 8007508 <_svfiprintf_r+0x5c>
 8007504:	2a25      	cmp	r2, #37	; 0x25
 8007506:	d1f9      	bne.n	80074fc <_svfiprintf_r+0x50>
 8007508:	ebba 0b04 	subs.w	fp, sl, r4
 800750c:	d00b      	beq.n	8007526 <_svfiprintf_r+0x7a>
 800750e:	465b      	mov	r3, fp
 8007510:	4622      	mov	r2, r4
 8007512:	4629      	mov	r1, r5
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff ff6d 	bl	80073f4 <__ssputs_r>
 800751a:	3001      	adds	r0, #1
 800751c:	f000 80aa 	beq.w	8007674 <_svfiprintf_r+0x1c8>
 8007520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007522:	445a      	add	r2, fp
 8007524:	9209      	str	r2, [sp, #36]	; 0x24
 8007526:	f89a 3000 	ldrb.w	r3, [sl]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 80a2 	beq.w	8007674 <_svfiprintf_r+0x1c8>
 8007530:	2300      	movs	r3, #0
 8007532:	f04f 32ff 	mov.w	r2, #4294967295
 8007536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800753a:	f10a 0a01 	add.w	sl, sl, #1
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007546:	931a      	str	r3, [sp, #104]	; 0x68
 8007548:	4654      	mov	r4, sl
 800754a:	2205      	movs	r2, #5
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	4851      	ldr	r0, [pc, #324]	; (8007698 <_svfiprintf_r+0x1ec>)
 8007552:	f7f8 fe5d 	bl	8000210 <memchr>
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	b9d8      	cbnz	r0, 8007592 <_svfiprintf_r+0xe6>
 800755a:	06d0      	lsls	r0, r2, #27
 800755c:	bf44      	itt	mi
 800755e:	2320      	movmi	r3, #32
 8007560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007564:	0711      	lsls	r1, r2, #28
 8007566:	bf44      	itt	mi
 8007568:	232b      	movmi	r3, #43	; 0x2b
 800756a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756e:	f89a 3000 	ldrb.w	r3, [sl]
 8007572:	2b2a      	cmp	r3, #42	; 0x2a
 8007574:	d015      	beq.n	80075a2 <_svfiprintf_r+0xf6>
 8007576:	9a07      	ldr	r2, [sp, #28]
 8007578:	4654      	mov	r4, sl
 800757a:	2000      	movs	r0, #0
 800757c:	f04f 0c0a 	mov.w	ip, #10
 8007580:	4621      	mov	r1, r4
 8007582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007586:	3b30      	subs	r3, #48	; 0x30
 8007588:	2b09      	cmp	r3, #9
 800758a:	d94e      	bls.n	800762a <_svfiprintf_r+0x17e>
 800758c:	b1b0      	cbz	r0, 80075bc <_svfiprintf_r+0x110>
 800758e:	9207      	str	r2, [sp, #28]
 8007590:	e014      	b.n	80075bc <_svfiprintf_r+0x110>
 8007592:	eba0 0308 	sub.w	r3, r0, r8
 8007596:	fa09 f303 	lsl.w	r3, r9, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	46a2      	mov	sl, r4
 80075a0:	e7d2      	b.n	8007548 <_svfiprintf_r+0x9c>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	1d19      	adds	r1, r3, #4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	9103      	str	r1, [sp, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfbb      	ittet	lt
 80075ae:	425b      	neglt	r3, r3
 80075b0:	f042 0202 	orrlt.w	r2, r2, #2
 80075b4:	9307      	strge	r3, [sp, #28]
 80075b6:	9307      	strlt	r3, [sp, #28]
 80075b8:	bfb8      	it	lt
 80075ba:	9204      	strlt	r2, [sp, #16]
 80075bc:	7823      	ldrb	r3, [r4, #0]
 80075be:	2b2e      	cmp	r3, #46	; 0x2e
 80075c0:	d10c      	bne.n	80075dc <_svfiprintf_r+0x130>
 80075c2:	7863      	ldrb	r3, [r4, #1]
 80075c4:	2b2a      	cmp	r3, #42	; 0x2a
 80075c6:	d135      	bne.n	8007634 <_svfiprintf_r+0x188>
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	9203      	str	r2, [sp, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfb8      	it	lt
 80075d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d8:	3402      	adds	r4, #2
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076a8 <_svfiprintf_r+0x1fc>
 80075e0:	7821      	ldrb	r1, [r4, #0]
 80075e2:	2203      	movs	r2, #3
 80075e4:	4650      	mov	r0, sl
 80075e6:	f7f8 fe13 	bl	8000210 <memchr>
 80075ea:	b140      	cbz	r0, 80075fe <_svfiprintf_r+0x152>
 80075ec:	2340      	movs	r3, #64	; 0x40
 80075ee:	eba0 000a 	sub.w	r0, r0, sl
 80075f2:	fa03 f000 	lsl.w	r0, r3, r0
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	4303      	orrs	r3, r0
 80075fa:	3401      	adds	r4, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007602:	4826      	ldr	r0, [pc, #152]	; (800769c <_svfiprintf_r+0x1f0>)
 8007604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007608:	2206      	movs	r2, #6
 800760a:	f7f8 fe01 	bl	8000210 <memchr>
 800760e:	2800      	cmp	r0, #0
 8007610:	d038      	beq.n	8007684 <_svfiprintf_r+0x1d8>
 8007612:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <_svfiprintf_r+0x1f4>)
 8007614:	bb1b      	cbnz	r3, 800765e <_svfiprintf_r+0x1b2>
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	3307      	adds	r3, #7
 800761a:	f023 0307 	bic.w	r3, r3, #7
 800761e:	3308      	adds	r3, #8
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007624:	4433      	add	r3, r6
 8007626:	9309      	str	r3, [sp, #36]	; 0x24
 8007628:	e767      	b.n	80074fa <_svfiprintf_r+0x4e>
 800762a:	fb0c 3202 	mla	r2, ip, r2, r3
 800762e:	460c      	mov	r4, r1
 8007630:	2001      	movs	r0, #1
 8007632:	e7a5      	b.n	8007580 <_svfiprintf_r+0xd4>
 8007634:	2300      	movs	r3, #0
 8007636:	3401      	adds	r4, #1
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	4619      	mov	r1, r3
 800763c:	f04f 0c0a 	mov.w	ip, #10
 8007640:	4620      	mov	r0, r4
 8007642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007646:	3a30      	subs	r2, #48	; 0x30
 8007648:	2a09      	cmp	r2, #9
 800764a:	d903      	bls.n	8007654 <_svfiprintf_r+0x1a8>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0c5      	beq.n	80075dc <_svfiprintf_r+0x130>
 8007650:	9105      	str	r1, [sp, #20]
 8007652:	e7c3      	b.n	80075dc <_svfiprintf_r+0x130>
 8007654:	fb0c 2101 	mla	r1, ip, r1, r2
 8007658:	4604      	mov	r4, r0
 800765a:	2301      	movs	r3, #1
 800765c:	e7f0      	b.n	8007640 <_svfiprintf_r+0x194>
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <_svfiprintf_r+0x1f8>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	4638      	mov	r0, r7
 800766a:	f3af 8000 	nop.w
 800766e:	1c42      	adds	r2, r0, #1
 8007670:	4606      	mov	r6, r0
 8007672:	d1d6      	bne.n	8007622 <_svfiprintf_r+0x176>
 8007674:	89ab      	ldrh	r3, [r5, #12]
 8007676:	065b      	lsls	r3, r3, #25
 8007678:	f53f af2c 	bmi.w	80074d4 <_svfiprintf_r+0x28>
 800767c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767e:	b01d      	add	sp, #116	; 0x74
 8007680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	462a      	mov	r2, r5
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <_svfiprintf_r+0x1f8>)
 800768c:	a904      	add	r1, sp, #16
 800768e:	4638      	mov	r0, r7
 8007690:	f000 fba6 	bl	8007de0 <_printf_i>
 8007694:	e7eb      	b.n	800766e <_svfiprintf_r+0x1c2>
 8007696:	bf00      	nop
 8007698:	08009000 	.word	0x08009000
 800769c:	0800900a 	.word	0x0800900a
 80076a0:	00000000 	.word	0x00000000
 80076a4:	080073f5 	.word	0x080073f5
 80076a8:	08009006 	.word	0x08009006

080076ac <_sungetc_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	1c4b      	adds	r3, r1, #1
 80076b0:	4614      	mov	r4, r2
 80076b2:	d103      	bne.n	80076bc <_sungetc_r+0x10>
 80076b4:	f04f 35ff 	mov.w	r5, #4294967295
 80076b8:	4628      	mov	r0, r5
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	8993      	ldrh	r3, [r2, #12]
 80076be:	f023 0320 	bic.w	r3, r3, #32
 80076c2:	8193      	strh	r3, [r2, #12]
 80076c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076c6:	6852      	ldr	r2, [r2, #4]
 80076c8:	b2cd      	uxtb	r5, r1
 80076ca:	b18b      	cbz	r3, 80076f0 <_sungetc_r+0x44>
 80076cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076ce:	4293      	cmp	r3, r2
 80076d0:	dd08      	ble.n	80076e4 <_sungetc_r+0x38>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	6022      	str	r2, [r4, #0]
 80076d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	3301      	adds	r3, #1
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	e7e9      	b.n	80076b8 <_sungetc_r+0xc>
 80076e4:	4621      	mov	r1, r4
 80076e6:	f000 ff4d 	bl	8008584 <__submore>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d0f1      	beq.n	80076d2 <_sungetc_r+0x26>
 80076ee:	e7e1      	b.n	80076b4 <_sungetc_r+0x8>
 80076f0:	6921      	ldr	r1, [r4, #16]
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	b151      	cbz	r1, 800770c <_sungetc_r+0x60>
 80076f6:	4299      	cmp	r1, r3
 80076f8:	d208      	bcs.n	800770c <_sungetc_r+0x60>
 80076fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80076fe:	42a9      	cmp	r1, r5
 8007700:	d104      	bne.n	800770c <_sungetc_r+0x60>
 8007702:	3b01      	subs	r3, #1
 8007704:	3201      	adds	r2, #1
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	6062      	str	r2, [r4, #4]
 800770a:	e7d5      	b.n	80076b8 <_sungetc_r+0xc>
 800770c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007714:	6363      	str	r3, [r4, #52]	; 0x34
 8007716:	2303      	movs	r3, #3
 8007718:	63a3      	str	r3, [r4, #56]	; 0x38
 800771a:	4623      	mov	r3, r4
 800771c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	2301      	movs	r3, #1
 8007724:	e7dc      	b.n	80076e0 <_sungetc_r+0x34>

08007726 <__ssrefill_r>:
 8007726:	b510      	push	{r4, lr}
 8007728:	460c      	mov	r4, r1
 800772a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800772c:	b169      	cbz	r1, 800774a <__ssrefill_r+0x24>
 800772e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007732:	4299      	cmp	r1, r3
 8007734:	d001      	beq.n	800773a <__ssrefill_r+0x14>
 8007736:	f001 f979 	bl	8008a2c <_free_r>
 800773a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	2000      	movs	r0, #0
 8007740:	6360      	str	r0, [r4, #52]	; 0x34
 8007742:	b113      	cbz	r3, 800774a <__ssrefill_r+0x24>
 8007744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	bd10      	pop	{r4, pc}
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	2300      	movs	r3, #0
 8007750:	6063      	str	r3, [r4, #4]
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	f043 0320 	orr.w	r3, r3, #32
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	e7f3      	b.n	8007748 <__ssrefill_r+0x22>

08007760 <__ssvfiscanf_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	460c      	mov	r4, r1
 8007766:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800776a:	2100      	movs	r1, #0
 800776c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007770:	49b2      	ldr	r1, [pc, #712]	; (8007a3c <__ssvfiscanf_r+0x2dc>)
 8007772:	91a0      	str	r1, [sp, #640]	; 0x280
 8007774:	f10d 0804 	add.w	r8, sp, #4
 8007778:	49b1      	ldr	r1, [pc, #708]	; (8007a40 <__ssvfiscanf_r+0x2e0>)
 800777a:	4fb2      	ldr	r7, [pc, #712]	; (8007a44 <__ssvfiscanf_r+0x2e4>)
 800777c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8007a48 <__ssvfiscanf_r+0x2e8>
 8007780:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007784:	4606      	mov	r6, r0
 8007786:	91a1      	str	r1, [sp, #644]	; 0x284
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	f892 a000 	ldrb.w	sl, [r2]
 800778e:	f1ba 0f00 	cmp.w	sl, #0
 8007792:	f000 8151 	beq.w	8007a38 <__ssvfiscanf_r+0x2d8>
 8007796:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800779a:	f013 0308 	ands.w	r3, r3, #8
 800779e:	f102 0501 	add.w	r5, r2, #1
 80077a2:	d019      	beq.n	80077d8 <__ssvfiscanf_r+0x78>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd0f      	ble.n	80077ca <__ssvfiscanf_r+0x6a>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	5cba      	ldrb	r2, [r7, r2]
 80077b0:	0712      	lsls	r2, r2, #28
 80077b2:	d401      	bmi.n	80077b8 <__ssvfiscanf_r+0x58>
 80077b4:	462a      	mov	r2, r5
 80077b6:	e7e8      	b.n	800778a <__ssvfiscanf_r+0x2a>
 80077b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80077ba:	3201      	adds	r2, #1
 80077bc:	9245      	str	r2, [sp, #276]	; 0x114
 80077be:	6862      	ldr	r2, [r4, #4]
 80077c0:	3301      	adds	r3, #1
 80077c2:	3a01      	subs	r2, #1
 80077c4:	6062      	str	r2, [r4, #4]
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	e7ec      	b.n	80077a4 <__ssvfiscanf_r+0x44>
 80077ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80077cc:	4621      	mov	r1, r4
 80077ce:	4630      	mov	r0, r6
 80077d0:	4798      	blx	r3
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0e9      	beq.n	80077aa <__ssvfiscanf_r+0x4a>
 80077d6:	e7ed      	b.n	80077b4 <__ssvfiscanf_r+0x54>
 80077d8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80077dc:	f040 8083 	bne.w	80078e6 <__ssvfiscanf_r+0x186>
 80077e0:	9341      	str	r3, [sp, #260]	; 0x104
 80077e2:	9343      	str	r3, [sp, #268]	; 0x10c
 80077e4:	7853      	ldrb	r3, [r2, #1]
 80077e6:	2b2a      	cmp	r3, #42	; 0x2a
 80077e8:	bf02      	ittt	eq
 80077ea:	2310      	moveq	r3, #16
 80077ec:	1c95      	addeq	r5, r2, #2
 80077ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80077f0:	220a      	movs	r2, #10
 80077f2:	46ab      	mov	fp, r5
 80077f4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80077f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d91d      	bls.n	800783c <__ssvfiscanf_r+0xdc>
 8007800:	4891      	ldr	r0, [pc, #580]	; (8007a48 <__ssvfiscanf_r+0x2e8>)
 8007802:	2203      	movs	r2, #3
 8007804:	f7f8 fd04 	bl	8000210 <memchr>
 8007808:	b140      	cbz	r0, 800781c <__ssvfiscanf_r+0xbc>
 800780a:	2301      	movs	r3, #1
 800780c:	eba0 0009 	sub.w	r0, r0, r9
 8007810:	fa03 f000 	lsl.w	r0, r3, r0
 8007814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007816:	4318      	orrs	r0, r3
 8007818:	9041      	str	r0, [sp, #260]	; 0x104
 800781a:	465d      	mov	r5, fp
 800781c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007820:	2b78      	cmp	r3, #120	; 0x78
 8007822:	d806      	bhi.n	8007832 <__ssvfiscanf_r+0xd2>
 8007824:	2b57      	cmp	r3, #87	; 0x57
 8007826:	d810      	bhi.n	800784a <__ssvfiscanf_r+0xea>
 8007828:	2b25      	cmp	r3, #37	; 0x25
 800782a:	d05c      	beq.n	80078e6 <__ssvfiscanf_r+0x186>
 800782c:	d856      	bhi.n	80078dc <__ssvfiscanf_r+0x17c>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d074      	beq.n	800791c <__ssvfiscanf_r+0x1bc>
 8007832:	2303      	movs	r3, #3
 8007834:	9347      	str	r3, [sp, #284]	; 0x11c
 8007836:	230a      	movs	r3, #10
 8007838:	9342      	str	r3, [sp, #264]	; 0x108
 800783a:	e081      	b.n	8007940 <__ssvfiscanf_r+0x1e0>
 800783c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800783e:	fb02 1303 	mla	r3, r2, r3, r1
 8007842:	3b30      	subs	r3, #48	; 0x30
 8007844:	9343      	str	r3, [sp, #268]	; 0x10c
 8007846:	465d      	mov	r5, fp
 8007848:	e7d3      	b.n	80077f2 <__ssvfiscanf_r+0x92>
 800784a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800784e:	2a20      	cmp	r2, #32
 8007850:	d8ef      	bhi.n	8007832 <__ssvfiscanf_r+0xd2>
 8007852:	a101      	add	r1, pc, #4	; (adr r1, 8007858 <__ssvfiscanf_r+0xf8>)
 8007854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007858:	0800792b 	.word	0x0800792b
 800785c:	08007833 	.word	0x08007833
 8007860:	08007833 	.word	0x08007833
 8007864:	08007989 	.word	0x08007989
 8007868:	08007833 	.word	0x08007833
 800786c:	08007833 	.word	0x08007833
 8007870:	08007833 	.word	0x08007833
 8007874:	08007833 	.word	0x08007833
 8007878:	08007833 	.word	0x08007833
 800787c:	08007833 	.word	0x08007833
 8007880:	08007833 	.word	0x08007833
 8007884:	0800799f 	.word	0x0800799f
 8007888:	08007975 	.word	0x08007975
 800788c:	080078e3 	.word	0x080078e3
 8007890:	080078e3 	.word	0x080078e3
 8007894:	080078e3 	.word	0x080078e3
 8007898:	08007833 	.word	0x08007833
 800789c:	08007979 	.word	0x08007979
 80078a0:	08007833 	.word	0x08007833
 80078a4:	08007833 	.word	0x08007833
 80078a8:	08007833 	.word	0x08007833
 80078ac:	08007833 	.word	0x08007833
 80078b0:	080079af 	.word	0x080079af
 80078b4:	08007981 	.word	0x08007981
 80078b8:	08007923 	.word	0x08007923
 80078bc:	08007833 	.word	0x08007833
 80078c0:	08007833 	.word	0x08007833
 80078c4:	080079ab 	.word	0x080079ab
 80078c8:	08007833 	.word	0x08007833
 80078cc:	08007975 	.word	0x08007975
 80078d0:	08007833 	.word	0x08007833
 80078d4:	08007833 	.word	0x08007833
 80078d8:	0800792b 	.word	0x0800792b
 80078dc:	3b45      	subs	r3, #69	; 0x45
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d8a7      	bhi.n	8007832 <__ssvfiscanf_r+0xd2>
 80078e2:	2305      	movs	r3, #5
 80078e4:	e02b      	b.n	800793e <__ssvfiscanf_r+0x1de>
 80078e6:	6863      	ldr	r3, [r4, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dd0d      	ble.n	8007908 <__ssvfiscanf_r+0x1a8>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	4552      	cmp	r2, sl
 80078f2:	f040 80a1 	bne.w	8007a38 <__ssvfiscanf_r+0x2d8>
 80078f6:	3301      	adds	r3, #1
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80078fe:	3a01      	subs	r2, #1
 8007900:	3301      	adds	r3, #1
 8007902:	6062      	str	r2, [r4, #4]
 8007904:	9345      	str	r3, [sp, #276]	; 0x114
 8007906:	e755      	b.n	80077b4 <__ssvfiscanf_r+0x54>
 8007908:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800790a:	4621      	mov	r1, r4
 800790c:	4630      	mov	r0, r6
 800790e:	4798      	blx	r3
 8007910:	2800      	cmp	r0, #0
 8007912:	d0eb      	beq.n	80078ec <__ssvfiscanf_r+0x18c>
 8007914:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007916:	2800      	cmp	r0, #0
 8007918:	f040 8084 	bne.w	8007a24 <__ssvfiscanf_r+0x2c4>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e086      	b.n	8007a30 <__ssvfiscanf_r+0x2d0>
 8007922:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007924:	f042 0220 	orr.w	r2, r2, #32
 8007928:	9241      	str	r2, [sp, #260]	; 0x104
 800792a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800792c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007930:	9241      	str	r2, [sp, #260]	; 0x104
 8007932:	2210      	movs	r2, #16
 8007934:	2b6f      	cmp	r3, #111	; 0x6f
 8007936:	9242      	str	r2, [sp, #264]	; 0x108
 8007938:	bf34      	ite	cc
 800793a:	2303      	movcc	r3, #3
 800793c:	2304      	movcs	r3, #4
 800793e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	dd41      	ble.n	80079ca <__ssvfiscanf_r+0x26a>
 8007946:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007948:	0659      	lsls	r1, r3, #25
 800794a:	d404      	bmi.n	8007956 <__ssvfiscanf_r+0x1f6>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	781a      	ldrb	r2, [r3, #0]
 8007950:	5cba      	ldrb	r2, [r7, r2]
 8007952:	0712      	lsls	r2, r2, #28
 8007954:	d440      	bmi.n	80079d8 <__ssvfiscanf_r+0x278>
 8007956:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007958:	2b02      	cmp	r3, #2
 800795a:	dc4f      	bgt.n	80079fc <__ssvfiscanf_r+0x29c>
 800795c:	466b      	mov	r3, sp
 800795e:	4622      	mov	r2, r4
 8007960:	a941      	add	r1, sp, #260	; 0x104
 8007962:	4630      	mov	r0, r6
 8007964:	f000 fb62 	bl	800802c <_scanf_chars>
 8007968:	2801      	cmp	r0, #1
 800796a:	d065      	beq.n	8007a38 <__ssvfiscanf_r+0x2d8>
 800796c:	2802      	cmp	r0, #2
 800796e:	f47f af21 	bne.w	80077b4 <__ssvfiscanf_r+0x54>
 8007972:	e7cf      	b.n	8007914 <__ssvfiscanf_r+0x1b4>
 8007974:	220a      	movs	r2, #10
 8007976:	e7dd      	b.n	8007934 <__ssvfiscanf_r+0x1d4>
 8007978:	2300      	movs	r3, #0
 800797a:	9342      	str	r3, [sp, #264]	; 0x108
 800797c:	2303      	movs	r3, #3
 800797e:	e7de      	b.n	800793e <__ssvfiscanf_r+0x1de>
 8007980:	2308      	movs	r3, #8
 8007982:	9342      	str	r3, [sp, #264]	; 0x108
 8007984:	2304      	movs	r3, #4
 8007986:	e7da      	b.n	800793e <__ssvfiscanf_r+0x1de>
 8007988:	4629      	mov	r1, r5
 800798a:	4640      	mov	r0, r8
 800798c:	f000 fcbc 	bl	8008308 <__sccl>
 8007990:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007996:	9341      	str	r3, [sp, #260]	; 0x104
 8007998:	4605      	mov	r5, r0
 800799a:	2301      	movs	r3, #1
 800799c:	e7cf      	b.n	800793e <__ssvfiscanf_r+0x1de>
 800799e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a4:	9341      	str	r3, [sp, #260]	; 0x104
 80079a6:	2300      	movs	r3, #0
 80079a8:	e7c9      	b.n	800793e <__ssvfiscanf_r+0x1de>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e7c7      	b.n	800793e <__ssvfiscanf_r+0x1de>
 80079ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 80079b0:	06c3      	lsls	r3, r0, #27
 80079b2:	f53f aeff 	bmi.w	80077b4 <__ssvfiscanf_r+0x54>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079ba:	1d19      	adds	r1, r3, #4
 80079bc:	9100      	str	r1, [sp, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	07c0      	lsls	r0, r0, #31
 80079c2:	bf4c      	ite	mi
 80079c4:	801a      	strhmi	r2, [r3, #0]
 80079c6:	601a      	strpl	r2, [r3, #0]
 80079c8:	e6f4      	b.n	80077b4 <__ssvfiscanf_r+0x54>
 80079ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079cc:	4621      	mov	r1, r4
 80079ce:	4630      	mov	r0, r6
 80079d0:	4798      	blx	r3
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d0b7      	beq.n	8007946 <__ssvfiscanf_r+0x1e6>
 80079d6:	e79d      	b.n	8007914 <__ssvfiscanf_r+0x1b4>
 80079d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079da:	3201      	adds	r2, #1
 80079dc:	9245      	str	r2, [sp, #276]	; 0x114
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	3a01      	subs	r2, #1
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	6062      	str	r2, [r4, #4]
 80079e6:	dd02      	ble.n	80079ee <__ssvfiscanf_r+0x28e>
 80079e8:	3301      	adds	r3, #1
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	e7ae      	b.n	800794c <__ssvfiscanf_r+0x1ec>
 80079ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079f0:	4621      	mov	r1, r4
 80079f2:	4630      	mov	r0, r6
 80079f4:	4798      	blx	r3
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0a8      	beq.n	800794c <__ssvfiscanf_r+0x1ec>
 80079fa:	e78b      	b.n	8007914 <__ssvfiscanf_r+0x1b4>
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	dc06      	bgt.n	8007a0e <__ssvfiscanf_r+0x2ae>
 8007a00:	466b      	mov	r3, sp
 8007a02:	4622      	mov	r2, r4
 8007a04:	a941      	add	r1, sp, #260	; 0x104
 8007a06:	4630      	mov	r0, r6
 8007a08:	f000 fb68 	bl	80080dc <_scanf_i>
 8007a0c:	e7ac      	b.n	8007968 <__ssvfiscanf_r+0x208>
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <__ssvfiscanf_r+0x2ec>)
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f43f aecf 	beq.w	80077b4 <__ssvfiscanf_r+0x54>
 8007a16:	466b      	mov	r3, sp
 8007a18:	4622      	mov	r2, r4
 8007a1a:	a941      	add	r1, sp, #260	; 0x104
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f3af 8000 	nop.w
 8007a22:	e7a1      	b.n	8007968 <__ssvfiscanf_r+0x208>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a2a:	bf18      	it	ne
 8007a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8007a30:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a3a:	e7f9      	b.n	8007a30 <__ssvfiscanf_r+0x2d0>
 8007a3c:	080076ad 	.word	0x080076ad
 8007a40:	08007727 	.word	0x08007727
 8007a44:	0800904f 	.word	0x0800904f
 8007a48:	08009006 	.word	0x08009006
 8007a4c:	00000000 	.word	0x00000000

08007a50 <__sfputc_r>:
 8007a50:	6893      	ldr	r3, [r2, #8]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	b410      	push	{r4}
 8007a58:	6093      	str	r3, [r2, #8]
 8007a5a:	da08      	bge.n	8007a6e <__sfputc_r+0x1e>
 8007a5c:	6994      	ldr	r4, [r2, #24]
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	db01      	blt.n	8007a66 <__sfputc_r+0x16>
 8007a62:	290a      	cmp	r1, #10
 8007a64:	d103      	bne.n	8007a6e <__sfputc_r+0x1e>
 8007a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a6a:	f000 bdc5 	b.w	80085f8 <__swbuf_r>
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	1c58      	adds	r0, r3, #1
 8007a72:	6010      	str	r0, [r2, #0]
 8007a74:	7019      	strb	r1, [r3, #0]
 8007a76:	4608      	mov	r0, r1
 8007a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <__sfputs_r>:
 8007a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a80:	4606      	mov	r6, r0
 8007a82:	460f      	mov	r7, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	18d5      	adds	r5, r2, r3
 8007a88:	42ac      	cmp	r4, r5
 8007a8a:	d101      	bne.n	8007a90 <__sfputs_r+0x12>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e007      	b.n	8007aa0 <__sfputs_r+0x22>
 8007a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a94:	463a      	mov	r2, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ffda 	bl	8007a50 <__sfputc_r>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d1f3      	bne.n	8007a88 <__sfputs_r+0xa>
 8007aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aa4 <_vfiprintf_r>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	b09d      	sub	sp, #116	; 0x74
 8007aac:	4614      	mov	r4, r2
 8007aae:	4698      	mov	r8, r3
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	b118      	cbz	r0, 8007abc <_vfiprintf_r+0x18>
 8007ab4:	6983      	ldr	r3, [r0, #24]
 8007ab6:	b90b      	cbnz	r3, 8007abc <_vfiprintf_r+0x18>
 8007ab8:	f7ff fb90 	bl	80071dc <__sinit>
 8007abc:	4b89      	ldr	r3, [pc, #548]	; (8007ce4 <_vfiprintf_r+0x240>)
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	d11b      	bne.n	8007afa <_vfiprintf_r+0x56>
 8007ac2:	6875      	ldr	r5, [r6, #4]
 8007ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac6:	07d9      	lsls	r1, r3, #31
 8007ac8:	d405      	bmi.n	8007ad6 <_vfiprintf_r+0x32>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	059a      	lsls	r2, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_vfiprintf_r+0x32>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad2:	f7ff fc21 	bl	8007318 <__retarget_lock_acquire_recursive>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	071b      	lsls	r3, r3, #28
 8007ada:	d501      	bpl.n	8007ae0 <_vfiprintf_r+0x3c>
 8007adc:	692b      	ldr	r3, [r5, #16]
 8007ade:	b9eb      	cbnz	r3, 8007b1c <_vfiprintf_r+0x78>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 fdda 	bl	800869c <__swsetup_r>
 8007ae8:	b1c0      	cbz	r0, 8007b1c <_vfiprintf_r+0x78>
 8007aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aec:	07dc      	lsls	r4, r3, #31
 8007aee:	d50e      	bpl.n	8007b0e <_vfiprintf_r+0x6a>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	b01d      	add	sp, #116	; 0x74
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	4b7b      	ldr	r3, [pc, #492]	; (8007ce8 <_vfiprintf_r+0x244>)
 8007afc:	429d      	cmp	r5, r3
 8007afe:	d101      	bne.n	8007b04 <_vfiprintf_r+0x60>
 8007b00:	68b5      	ldr	r5, [r6, #8]
 8007b02:	e7df      	b.n	8007ac4 <_vfiprintf_r+0x20>
 8007b04:	4b79      	ldr	r3, [pc, #484]	; (8007cec <_vfiprintf_r+0x248>)
 8007b06:	429d      	cmp	r5, r3
 8007b08:	bf08      	it	eq
 8007b0a:	68f5      	ldreq	r5, [r6, #12]
 8007b0c:	e7da      	b.n	8007ac4 <_vfiprintf_r+0x20>
 8007b0e:	89ab      	ldrh	r3, [r5, #12]
 8007b10:	0598      	lsls	r0, r3, #22
 8007b12:	d4ed      	bmi.n	8007af0 <_vfiprintf_r+0x4c>
 8007b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b16:	f7ff fc00 	bl	800731a <__retarget_lock_release_recursive>
 8007b1a:	e7e9      	b.n	8007af0 <_vfiprintf_r+0x4c>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	2320      	movs	r3, #32
 8007b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b2a:	2330      	movs	r3, #48	; 0x30
 8007b2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cf0 <_vfiprintf_r+0x24c>
 8007b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b34:	f04f 0901 	mov.w	r9, #1
 8007b38:	4623      	mov	r3, r4
 8007b3a:	469a      	mov	sl, r3
 8007b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b40:	b10a      	cbz	r2, 8007b46 <_vfiprintf_r+0xa2>
 8007b42:	2a25      	cmp	r2, #37	; 0x25
 8007b44:	d1f9      	bne.n	8007b3a <_vfiprintf_r+0x96>
 8007b46:	ebba 0b04 	subs.w	fp, sl, r4
 8007b4a:	d00b      	beq.n	8007b64 <_vfiprintf_r+0xc0>
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	4622      	mov	r2, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff93 	bl	8007a7e <__sfputs_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f000 80aa 	beq.w	8007cb2 <_vfiprintf_r+0x20e>
 8007b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b60:	445a      	add	r2, fp
 8007b62:	9209      	str	r2, [sp, #36]	; 0x24
 8007b64:	f89a 3000 	ldrb.w	r3, [sl]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a2 	beq.w	8007cb2 <_vfiprintf_r+0x20e>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295
 8007b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b78:	f10a 0a01 	add.w	sl, sl, #1
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b84:	931a      	str	r3, [sp, #104]	; 0x68
 8007b86:	4654      	mov	r4, sl
 8007b88:	2205      	movs	r2, #5
 8007b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8e:	4858      	ldr	r0, [pc, #352]	; (8007cf0 <_vfiprintf_r+0x24c>)
 8007b90:	f7f8 fb3e 	bl	8000210 <memchr>
 8007b94:	9a04      	ldr	r2, [sp, #16]
 8007b96:	b9d8      	cbnz	r0, 8007bd0 <_vfiprintf_r+0x12c>
 8007b98:	06d1      	lsls	r1, r2, #27
 8007b9a:	bf44      	itt	mi
 8007b9c:	2320      	movmi	r3, #32
 8007b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba2:	0713      	lsls	r3, r2, #28
 8007ba4:	bf44      	itt	mi
 8007ba6:	232b      	movmi	r3, #43	; 0x2b
 8007ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bac:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb2:	d015      	beq.n	8007be0 <_vfiprintf_r+0x13c>
 8007bb4:	9a07      	ldr	r2, [sp, #28]
 8007bb6:	4654      	mov	r4, sl
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f04f 0c0a 	mov.w	ip, #10
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc4:	3b30      	subs	r3, #48	; 0x30
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d94e      	bls.n	8007c68 <_vfiprintf_r+0x1c4>
 8007bca:	b1b0      	cbz	r0, 8007bfa <_vfiprintf_r+0x156>
 8007bcc:	9207      	str	r2, [sp, #28]
 8007bce:	e014      	b.n	8007bfa <_vfiprintf_r+0x156>
 8007bd0:	eba0 0308 	sub.w	r3, r0, r8
 8007bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	46a2      	mov	sl, r4
 8007bde:	e7d2      	b.n	8007b86 <_vfiprintf_r+0xe2>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	1d19      	adds	r1, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	9103      	str	r1, [sp, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bfbb      	ittet	lt
 8007bec:	425b      	neglt	r3, r3
 8007bee:	f042 0202 	orrlt.w	r2, r2, #2
 8007bf2:	9307      	strge	r3, [sp, #28]
 8007bf4:	9307      	strlt	r3, [sp, #28]
 8007bf6:	bfb8      	it	lt
 8007bf8:	9204      	strlt	r2, [sp, #16]
 8007bfa:	7823      	ldrb	r3, [r4, #0]
 8007bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bfe:	d10c      	bne.n	8007c1a <_vfiprintf_r+0x176>
 8007c00:	7863      	ldrb	r3, [r4, #1]
 8007c02:	2b2a      	cmp	r3, #42	; 0x2a
 8007c04:	d135      	bne.n	8007c72 <_vfiprintf_r+0x1ce>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9203      	str	r2, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfb8      	it	lt
 8007c12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c16:	3402      	adds	r4, #2
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d00 <_vfiprintf_r+0x25c>
 8007c1e:	7821      	ldrb	r1, [r4, #0]
 8007c20:	2203      	movs	r2, #3
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7f8 faf4 	bl	8000210 <memchr>
 8007c28:	b140      	cbz	r0, 8007c3c <_vfiprintf_r+0x198>
 8007c2a:	2340      	movs	r3, #64	; 0x40
 8007c2c:	eba0 000a 	sub.w	r0, r0, sl
 8007c30:	fa03 f000 	lsl.w	r0, r3, r0
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	4303      	orrs	r3, r0
 8007c38:	3401      	adds	r4, #1
 8007c3a:	9304      	str	r3, [sp, #16]
 8007c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c40:	482c      	ldr	r0, [pc, #176]	; (8007cf4 <_vfiprintf_r+0x250>)
 8007c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c46:	2206      	movs	r2, #6
 8007c48:	f7f8 fae2 	bl	8000210 <memchr>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d03f      	beq.n	8007cd0 <_vfiprintf_r+0x22c>
 8007c50:	4b29      	ldr	r3, [pc, #164]	; (8007cf8 <_vfiprintf_r+0x254>)
 8007c52:	bb1b      	cbnz	r3, 8007c9c <_vfiprintf_r+0x1f8>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	3307      	adds	r3, #7
 8007c58:	f023 0307 	bic.w	r3, r3, #7
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c62:	443b      	add	r3, r7
 8007c64:	9309      	str	r3, [sp, #36]	; 0x24
 8007c66:	e767      	b.n	8007b38 <_vfiprintf_r+0x94>
 8007c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	2001      	movs	r0, #1
 8007c70:	e7a5      	b.n	8007bbe <_vfiprintf_r+0x11a>
 8007c72:	2300      	movs	r3, #0
 8007c74:	3401      	adds	r4, #1
 8007c76:	9305      	str	r3, [sp, #20]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f04f 0c0a 	mov.w	ip, #10
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c84:	3a30      	subs	r2, #48	; 0x30
 8007c86:	2a09      	cmp	r2, #9
 8007c88:	d903      	bls.n	8007c92 <_vfiprintf_r+0x1ee>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0c5      	beq.n	8007c1a <_vfiprintf_r+0x176>
 8007c8e:	9105      	str	r1, [sp, #20]
 8007c90:	e7c3      	b.n	8007c1a <_vfiprintf_r+0x176>
 8007c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c96:	4604      	mov	r4, r0
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7f0      	b.n	8007c7e <_vfiprintf_r+0x1da>
 8007c9c:	ab03      	add	r3, sp, #12
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	4b16      	ldr	r3, [pc, #88]	; (8007cfc <_vfiprintf_r+0x258>)
 8007ca4:	a904      	add	r1, sp, #16
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f3af 8000 	nop.w
 8007cac:	4607      	mov	r7, r0
 8007cae:	1c78      	adds	r0, r7, #1
 8007cb0:	d1d6      	bne.n	8007c60 <_vfiprintf_r+0x1bc>
 8007cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb4:	07d9      	lsls	r1, r3, #31
 8007cb6:	d405      	bmi.n	8007cc4 <_vfiprintf_r+0x220>
 8007cb8:	89ab      	ldrh	r3, [r5, #12]
 8007cba:	059a      	lsls	r2, r3, #22
 8007cbc:	d402      	bmi.n	8007cc4 <_vfiprintf_r+0x220>
 8007cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc0:	f7ff fb2b 	bl	800731a <__retarget_lock_release_recursive>
 8007cc4:	89ab      	ldrh	r3, [r5, #12]
 8007cc6:	065b      	lsls	r3, r3, #25
 8007cc8:	f53f af12 	bmi.w	8007af0 <_vfiprintf_r+0x4c>
 8007ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cce:	e711      	b.n	8007af4 <_vfiprintf_r+0x50>
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <_vfiprintf_r+0x258>)
 8007cd8:	a904      	add	r1, sp, #16
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f000 f880 	bl	8007de0 <_printf_i>
 8007ce0:	e7e4      	b.n	8007cac <_vfiprintf_r+0x208>
 8007ce2:	bf00      	nop
 8007ce4:	08008fc0 	.word	0x08008fc0
 8007ce8:	08008fe0 	.word	0x08008fe0
 8007cec:	08008fa0 	.word	0x08008fa0
 8007cf0:	08009000 	.word	0x08009000
 8007cf4:	0800900a 	.word	0x0800900a
 8007cf8:	00000000 	.word	0x00000000
 8007cfc:	08007a7f 	.word	0x08007a7f
 8007d00:	08009006 	.word	0x08009006

08007d04 <_printf_common>:
 8007d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d08:	4616      	mov	r6, r2
 8007d0a:	4699      	mov	r9, r3
 8007d0c:	688a      	ldr	r2, [r1, #8]
 8007d0e:	690b      	ldr	r3, [r1, #16]
 8007d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d14:	4293      	cmp	r3, r2
 8007d16:	bfb8      	it	lt
 8007d18:	4613      	movlt	r3, r2
 8007d1a:	6033      	str	r3, [r6, #0]
 8007d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d20:	4607      	mov	r7, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	b10a      	cbz	r2, 8007d2a <_printf_common+0x26>
 8007d26:	3301      	adds	r3, #1
 8007d28:	6033      	str	r3, [r6, #0]
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	0699      	lsls	r1, r3, #26
 8007d2e:	bf42      	ittt	mi
 8007d30:	6833      	ldrmi	r3, [r6, #0]
 8007d32:	3302      	addmi	r3, #2
 8007d34:	6033      	strmi	r3, [r6, #0]
 8007d36:	6825      	ldr	r5, [r4, #0]
 8007d38:	f015 0506 	ands.w	r5, r5, #6
 8007d3c:	d106      	bne.n	8007d4c <_printf_common+0x48>
 8007d3e:	f104 0a19 	add.w	sl, r4, #25
 8007d42:	68e3      	ldr	r3, [r4, #12]
 8007d44:	6832      	ldr	r2, [r6, #0]
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	42ab      	cmp	r3, r5
 8007d4a:	dc26      	bgt.n	8007d9a <_printf_common+0x96>
 8007d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d50:	1e13      	subs	r3, r2, #0
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	bf18      	it	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	0692      	lsls	r2, r2, #26
 8007d5a:	d42b      	bmi.n	8007db4 <_printf_common+0xb0>
 8007d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d60:	4649      	mov	r1, r9
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d01e      	beq.n	8007da8 <_printf_common+0xa4>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	68e5      	ldr	r5, [r4, #12]
 8007d6e:	6832      	ldr	r2, [r6, #0]
 8007d70:	f003 0306 	and.w	r3, r3, #6
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	bf08      	it	eq
 8007d78:	1aad      	subeq	r5, r5, r2
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	6922      	ldr	r2, [r4, #16]
 8007d7e:	bf0c      	ite	eq
 8007d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d84:	2500      	movne	r5, #0
 8007d86:	4293      	cmp	r3, r2
 8007d88:	bfc4      	itt	gt
 8007d8a:	1a9b      	subgt	r3, r3, r2
 8007d8c:	18ed      	addgt	r5, r5, r3
 8007d8e:	2600      	movs	r6, #0
 8007d90:	341a      	adds	r4, #26
 8007d92:	42b5      	cmp	r5, r6
 8007d94:	d11a      	bne.n	8007dcc <_printf_common+0xc8>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e008      	b.n	8007dac <_printf_common+0xa8>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	4649      	mov	r1, r9
 8007da0:	4638      	mov	r0, r7
 8007da2:	47c0      	blx	r8
 8007da4:	3001      	adds	r0, #1
 8007da6:	d103      	bne.n	8007db0 <_printf_common+0xac>
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	3501      	adds	r5, #1
 8007db2:	e7c6      	b.n	8007d42 <_printf_common+0x3e>
 8007db4:	18e1      	adds	r1, r4, r3
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	2030      	movs	r0, #48	; 0x30
 8007dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dbe:	4422      	add	r2, r4
 8007dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dc8:	3302      	adds	r3, #2
 8007dca:	e7c7      	b.n	8007d5c <_printf_common+0x58>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	4622      	mov	r2, r4
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	47c0      	blx	r8
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d0e6      	beq.n	8007da8 <_printf_common+0xa4>
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7d9      	b.n	8007d92 <_printf_common+0x8e>
	...

08007de0 <_printf_i>:
 8007de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	460c      	mov	r4, r1
 8007de6:	4691      	mov	r9, r2
 8007de8:	7e27      	ldrb	r7, [r4, #24]
 8007dea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dec:	2f78      	cmp	r7, #120	; 0x78
 8007dee:	4680      	mov	r8, r0
 8007df0:	469a      	mov	sl, r3
 8007df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df6:	d807      	bhi.n	8007e08 <_printf_i+0x28>
 8007df8:	2f62      	cmp	r7, #98	; 0x62
 8007dfa:	d80a      	bhi.n	8007e12 <_printf_i+0x32>
 8007dfc:	2f00      	cmp	r7, #0
 8007dfe:	f000 80d8 	beq.w	8007fb2 <_printf_i+0x1d2>
 8007e02:	2f58      	cmp	r7, #88	; 0x58
 8007e04:	f000 80a3 	beq.w	8007f4e <_printf_i+0x16e>
 8007e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e10:	e03a      	b.n	8007e88 <_printf_i+0xa8>
 8007e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e16:	2b15      	cmp	r3, #21
 8007e18:	d8f6      	bhi.n	8007e08 <_printf_i+0x28>
 8007e1a:	a001      	add	r0, pc, #4	; (adr r0, 8007e20 <_printf_i+0x40>)
 8007e1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e20:	08007e79 	.word	0x08007e79
 8007e24:	08007e8d 	.word	0x08007e8d
 8007e28:	08007e09 	.word	0x08007e09
 8007e2c:	08007e09 	.word	0x08007e09
 8007e30:	08007e09 	.word	0x08007e09
 8007e34:	08007e09 	.word	0x08007e09
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007e09 	.word	0x08007e09
 8007e40:	08007e09 	.word	0x08007e09
 8007e44:	08007e09 	.word	0x08007e09
 8007e48:	08007e09 	.word	0x08007e09
 8007e4c:	08007f99 	.word	0x08007f99
 8007e50:	08007ebd 	.word	0x08007ebd
 8007e54:	08007f7b 	.word	0x08007f7b
 8007e58:	08007e09 	.word	0x08007e09
 8007e5c:	08007e09 	.word	0x08007e09
 8007e60:	08007fbb 	.word	0x08007fbb
 8007e64:	08007e09 	.word	0x08007e09
 8007e68:	08007ebd 	.word	0x08007ebd
 8007e6c:	08007e09 	.word	0x08007e09
 8007e70:	08007e09 	.word	0x08007e09
 8007e74:	08007f83 	.word	0x08007f83
 8007e78:	680b      	ldr	r3, [r1, #0]
 8007e7a:	1d1a      	adds	r2, r3, #4
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	600a      	str	r2, [r1, #0]
 8007e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0a3      	b.n	8007fd4 <_printf_i+0x1f4>
 8007e8c:	6825      	ldr	r5, [r4, #0]
 8007e8e:	6808      	ldr	r0, [r1, #0]
 8007e90:	062e      	lsls	r6, r5, #24
 8007e92:	f100 0304 	add.w	r3, r0, #4
 8007e96:	d50a      	bpl.n	8007eae <_printf_i+0xce>
 8007e98:	6805      	ldr	r5, [r0, #0]
 8007e9a:	600b      	str	r3, [r1, #0]
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	da03      	bge.n	8007ea8 <_printf_i+0xc8>
 8007ea0:	232d      	movs	r3, #45	; 0x2d
 8007ea2:	426d      	negs	r5, r5
 8007ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea8:	485e      	ldr	r0, [pc, #376]	; (8008024 <_printf_i+0x244>)
 8007eaa:	230a      	movs	r3, #10
 8007eac:	e019      	b.n	8007ee2 <_printf_i+0x102>
 8007eae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007eb2:	6805      	ldr	r5, [r0, #0]
 8007eb4:	600b      	str	r3, [r1, #0]
 8007eb6:	bf18      	it	ne
 8007eb8:	b22d      	sxthne	r5, r5
 8007eba:	e7ef      	b.n	8007e9c <_printf_i+0xbc>
 8007ebc:	680b      	ldr	r3, [r1, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	1d18      	adds	r0, r3, #4
 8007ec2:	6008      	str	r0, [r1, #0]
 8007ec4:	0628      	lsls	r0, r5, #24
 8007ec6:	d501      	bpl.n	8007ecc <_printf_i+0xec>
 8007ec8:	681d      	ldr	r5, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <_printf_i+0xf2>
 8007ecc:	0669      	lsls	r1, r5, #25
 8007ece:	d5fb      	bpl.n	8007ec8 <_printf_i+0xe8>
 8007ed0:	881d      	ldrh	r5, [r3, #0]
 8007ed2:	4854      	ldr	r0, [pc, #336]	; (8008024 <_printf_i+0x244>)
 8007ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2308      	moveq	r3, #8
 8007eda:	230a      	movne	r3, #10
 8007edc:	2100      	movs	r1, #0
 8007ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ee2:	6866      	ldr	r6, [r4, #4]
 8007ee4:	60a6      	str	r6, [r4, #8]
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	bfa2      	ittt	ge
 8007eea:	6821      	ldrge	r1, [r4, #0]
 8007eec:	f021 0104 	bicge.w	r1, r1, #4
 8007ef0:	6021      	strge	r1, [r4, #0]
 8007ef2:	b90d      	cbnz	r5, 8007ef8 <_printf_i+0x118>
 8007ef4:	2e00      	cmp	r6, #0
 8007ef6:	d04d      	beq.n	8007f94 <_printf_i+0x1b4>
 8007ef8:	4616      	mov	r6, r2
 8007efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007efe:	fb03 5711 	mls	r7, r3, r1, r5
 8007f02:	5dc7      	ldrb	r7, [r0, r7]
 8007f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f08:	462f      	mov	r7, r5
 8007f0a:	42bb      	cmp	r3, r7
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	d9f4      	bls.n	8007efa <_printf_i+0x11a>
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d10b      	bne.n	8007f2c <_printf_i+0x14c>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	07df      	lsls	r7, r3, #31
 8007f18:	d508      	bpl.n	8007f2c <_printf_i+0x14c>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	6861      	ldr	r1, [r4, #4]
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	bfde      	ittt	le
 8007f22:	2330      	movle	r3, #48	; 0x30
 8007f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f2c:	1b92      	subs	r2, r2, r6
 8007f2e:	6122      	str	r2, [r4, #16]
 8007f30:	f8cd a000 	str.w	sl, [sp]
 8007f34:	464b      	mov	r3, r9
 8007f36:	aa03      	add	r2, sp, #12
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f7ff fee2 	bl	8007d04 <_printf_common>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d14c      	bne.n	8007fde <_printf_i+0x1fe>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	b004      	add	sp, #16
 8007f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4e:	4835      	ldr	r0, [pc, #212]	; (8008024 <_printf_i+0x244>)
 8007f50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	680e      	ldr	r6, [r1, #0]
 8007f58:	061f      	lsls	r7, r3, #24
 8007f5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f5e:	600e      	str	r6, [r1, #0]
 8007f60:	d514      	bpl.n	8007f8c <_printf_i+0x1ac>
 8007f62:	07d9      	lsls	r1, r3, #31
 8007f64:	bf44      	itt	mi
 8007f66:	f043 0320 	orrmi.w	r3, r3, #32
 8007f6a:	6023      	strmi	r3, [r4, #0]
 8007f6c:	b91d      	cbnz	r5, 8007f76 <_printf_i+0x196>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	f023 0320 	bic.w	r3, r3, #32
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	2310      	movs	r3, #16
 8007f78:	e7b0      	b.n	8007edc <_printf_i+0xfc>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	f043 0320 	orr.w	r3, r3, #32
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	2378      	movs	r3, #120	; 0x78
 8007f84:	4828      	ldr	r0, [pc, #160]	; (8008028 <_printf_i+0x248>)
 8007f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f8a:	e7e3      	b.n	8007f54 <_printf_i+0x174>
 8007f8c:	065e      	lsls	r6, r3, #25
 8007f8e:	bf48      	it	mi
 8007f90:	b2ad      	uxthmi	r5, r5
 8007f92:	e7e6      	b.n	8007f62 <_printf_i+0x182>
 8007f94:	4616      	mov	r6, r2
 8007f96:	e7bb      	b.n	8007f10 <_printf_i+0x130>
 8007f98:	680b      	ldr	r3, [r1, #0]
 8007f9a:	6826      	ldr	r6, [r4, #0]
 8007f9c:	6960      	ldr	r0, [r4, #20]
 8007f9e:	1d1d      	adds	r5, r3, #4
 8007fa0:	600d      	str	r5, [r1, #0]
 8007fa2:	0635      	lsls	r5, r6, #24
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	d501      	bpl.n	8007fac <_printf_i+0x1cc>
 8007fa8:	6018      	str	r0, [r3, #0]
 8007faa:	e002      	b.n	8007fb2 <_printf_i+0x1d2>
 8007fac:	0671      	lsls	r1, r6, #25
 8007fae:	d5fb      	bpl.n	8007fa8 <_printf_i+0x1c8>
 8007fb0:	8018      	strh	r0, [r3, #0]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	4616      	mov	r6, r2
 8007fb8:	e7ba      	b.n	8007f30 <_printf_i+0x150>
 8007fba:	680b      	ldr	r3, [r1, #0]
 8007fbc:	1d1a      	adds	r2, r3, #4
 8007fbe:	600a      	str	r2, [r1, #0]
 8007fc0:	681e      	ldr	r6, [r3, #0]
 8007fc2:	6862      	ldr	r2, [r4, #4]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7f8 f922 	bl	8000210 <memchr>
 8007fcc:	b108      	cbz	r0, 8007fd2 <_printf_i+0x1f2>
 8007fce:	1b80      	subs	r0, r0, r6
 8007fd0:	6060      	str	r0, [r4, #4]
 8007fd2:	6863      	ldr	r3, [r4, #4]
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fdc:	e7a8      	b.n	8007f30 <_printf_i+0x150>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	47d0      	blx	sl
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d0ab      	beq.n	8007f44 <_printf_i+0x164>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	079b      	lsls	r3, r3, #30
 8007ff0:	d413      	bmi.n	800801a <_printf_i+0x23a>
 8007ff2:	68e0      	ldr	r0, [r4, #12]
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	4298      	cmp	r0, r3
 8007ff8:	bfb8      	it	lt
 8007ffa:	4618      	movlt	r0, r3
 8007ffc:	e7a4      	b.n	8007f48 <_printf_i+0x168>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4632      	mov	r2, r6
 8008002:	4649      	mov	r1, r9
 8008004:	4640      	mov	r0, r8
 8008006:	47d0      	blx	sl
 8008008:	3001      	adds	r0, #1
 800800a:	d09b      	beq.n	8007f44 <_printf_i+0x164>
 800800c:	3501      	adds	r5, #1
 800800e:	68e3      	ldr	r3, [r4, #12]
 8008010:	9903      	ldr	r1, [sp, #12]
 8008012:	1a5b      	subs	r3, r3, r1
 8008014:	42ab      	cmp	r3, r5
 8008016:	dcf2      	bgt.n	8007ffe <_printf_i+0x21e>
 8008018:	e7eb      	b.n	8007ff2 <_printf_i+0x212>
 800801a:	2500      	movs	r5, #0
 800801c:	f104 0619 	add.w	r6, r4, #25
 8008020:	e7f5      	b.n	800800e <_printf_i+0x22e>
 8008022:	bf00      	nop
 8008024:	08009011 	.word	0x08009011
 8008028:	08009022 	.word	0x08009022

0800802c <_scanf_chars>:
 800802c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008030:	4615      	mov	r5, r2
 8008032:	688a      	ldr	r2, [r1, #8]
 8008034:	4680      	mov	r8, r0
 8008036:	460c      	mov	r4, r1
 8008038:	b932      	cbnz	r2, 8008048 <_scanf_chars+0x1c>
 800803a:	698a      	ldr	r2, [r1, #24]
 800803c:	2a00      	cmp	r2, #0
 800803e:	bf0c      	ite	eq
 8008040:	2201      	moveq	r2, #1
 8008042:	f04f 32ff 	movne.w	r2, #4294967295
 8008046:	608a      	str	r2, [r1, #8]
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80080d8 <_scanf_chars+0xac>
 800804e:	06d1      	lsls	r1, r2, #27
 8008050:	bf5f      	itttt	pl
 8008052:	681a      	ldrpl	r2, [r3, #0]
 8008054:	1d11      	addpl	r1, r2, #4
 8008056:	6019      	strpl	r1, [r3, #0]
 8008058:	6816      	ldrpl	r6, [r2, #0]
 800805a:	2700      	movs	r7, #0
 800805c:	69a0      	ldr	r0, [r4, #24]
 800805e:	b188      	cbz	r0, 8008084 <_scanf_chars+0x58>
 8008060:	2801      	cmp	r0, #1
 8008062:	d107      	bne.n	8008074 <_scanf_chars+0x48>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	6963      	ldr	r3, [r4, #20]
 800806a:	5c9b      	ldrb	r3, [r3, r2]
 800806c:	b953      	cbnz	r3, 8008084 <_scanf_chars+0x58>
 800806e:	bb27      	cbnz	r7, 80080ba <_scanf_chars+0x8e>
 8008070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008074:	2802      	cmp	r0, #2
 8008076:	d120      	bne.n	80080ba <_scanf_chars+0x8e>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008080:	071b      	lsls	r3, r3, #28
 8008082:	d41a      	bmi.n	80080ba <_scanf_chars+0x8e>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	06da      	lsls	r2, r3, #27
 8008088:	bf5e      	ittt	pl
 800808a:	682b      	ldrpl	r3, [r5, #0]
 800808c:	781b      	ldrbpl	r3, [r3, #0]
 800808e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008092:	682a      	ldr	r2, [r5, #0]
 8008094:	686b      	ldr	r3, [r5, #4]
 8008096:	3201      	adds	r2, #1
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	68a2      	ldr	r2, [r4, #8]
 800809c:	3b01      	subs	r3, #1
 800809e:	3a01      	subs	r2, #1
 80080a0:	606b      	str	r3, [r5, #4]
 80080a2:	3701      	adds	r7, #1
 80080a4:	60a2      	str	r2, [r4, #8]
 80080a6:	b142      	cbz	r2, 80080ba <_scanf_chars+0x8e>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dcd7      	bgt.n	800805c <_scanf_chars+0x30>
 80080ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080b0:	4629      	mov	r1, r5
 80080b2:	4640      	mov	r0, r8
 80080b4:	4798      	blx	r3
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d0d0      	beq.n	800805c <_scanf_chars+0x30>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f013 0310 	ands.w	r3, r3, #16
 80080c0:	d105      	bne.n	80080ce <_scanf_chars+0xa2>
 80080c2:	68e2      	ldr	r2, [r4, #12]
 80080c4:	3201      	adds	r2, #1
 80080c6:	60e2      	str	r2, [r4, #12]
 80080c8:	69a2      	ldr	r2, [r4, #24]
 80080ca:	b102      	cbz	r2, 80080ce <_scanf_chars+0xa2>
 80080cc:	7033      	strb	r3, [r6, #0]
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	441f      	add	r7, r3
 80080d2:	6127      	str	r7, [r4, #16]
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7cb      	b.n	8008070 <_scanf_chars+0x44>
 80080d8:	0800904f 	.word	0x0800904f

080080dc <_scanf_i>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4698      	mov	r8, r3
 80080e2:	4b74      	ldr	r3, [pc, #464]	; (80082b4 <_scanf_i+0x1d8>)
 80080e4:	460c      	mov	r4, r1
 80080e6:	4682      	mov	sl, r0
 80080e8:	4616      	mov	r6, r2
 80080ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080ee:	b087      	sub	sp, #28
 80080f0:	ab03      	add	r3, sp, #12
 80080f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80080f6:	4b70      	ldr	r3, [pc, #448]	; (80082b8 <_scanf_i+0x1dc>)
 80080f8:	69a1      	ldr	r1, [r4, #24]
 80080fa:	4a70      	ldr	r2, [pc, #448]	; (80082bc <_scanf_i+0x1e0>)
 80080fc:	2903      	cmp	r1, #3
 80080fe:	bf18      	it	ne
 8008100:	461a      	movne	r2, r3
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	1e5a      	subs	r2, r3, #1
 8008108:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800810c:	bf88      	it	hi
 800810e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008112:	4627      	mov	r7, r4
 8008114:	bf82      	ittt	hi
 8008116:	eb03 0905 	addhi.w	r9, r3, r5
 800811a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800811e:	60a3      	strhi	r3, [r4, #8]
 8008120:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008124:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008128:	bf98      	it	ls
 800812a:	f04f 0900 	movls.w	r9, #0
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	463d      	mov	r5, r7
 8008132:	f04f 0b00 	mov.w	fp, #0
 8008136:	6831      	ldr	r1, [r6, #0]
 8008138:	ab03      	add	r3, sp, #12
 800813a:	7809      	ldrb	r1, [r1, #0]
 800813c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008140:	2202      	movs	r2, #2
 8008142:	f7f8 f865 	bl	8000210 <memchr>
 8008146:	b328      	cbz	r0, 8008194 <_scanf_i+0xb8>
 8008148:	f1bb 0f01 	cmp.w	fp, #1
 800814c:	d159      	bne.n	8008202 <_scanf_i+0x126>
 800814e:	6862      	ldr	r2, [r4, #4]
 8008150:	b92a      	cbnz	r2, 800815e <_scanf_i+0x82>
 8008152:	6822      	ldr	r2, [r4, #0]
 8008154:	2308      	movs	r3, #8
 8008156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008164:	6022      	str	r2, [r4, #0]
 8008166:	68a2      	ldr	r2, [r4, #8]
 8008168:	1e51      	subs	r1, r2, #1
 800816a:	60a1      	str	r1, [r4, #8]
 800816c:	b192      	cbz	r2, 8008194 <_scanf_i+0xb8>
 800816e:	6832      	ldr	r2, [r6, #0]
 8008170:	1c51      	adds	r1, r2, #1
 8008172:	6031      	str	r1, [r6, #0]
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	f805 2b01 	strb.w	r2, [r5], #1
 800817a:	6872      	ldr	r2, [r6, #4]
 800817c:	3a01      	subs	r2, #1
 800817e:	2a00      	cmp	r2, #0
 8008180:	6072      	str	r2, [r6, #4]
 8008182:	dc07      	bgt.n	8008194 <_scanf_i+0xb8>
 8008184:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008188:	4631      	mov	r1, r6
 800818a:	4650      	mov	r0, sl
 800818c:	4790      	blx	r2
 800818e:	2800      	cmp	r0, #0
 8008190:	f040 8085 	bne.w	800829e <_scanf_i+0x1c2>
 8008194:	f10b 0b01 	add.w	fp, fp, #1
 8008198:	f1bb 0f03 	cmp.w	fp, #3
 800819c:	d1cb      	bne.n	8008136 <_scanf_i+0x5a>
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	b90b      	cbnz	r3, 80081a6 <_scanf_i+0xca>
 80081a2:	230a      	movs	r3, #10
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	4945      	ldr	r1, [pc, #276]	; (80082c0 <_scanf_i+0x1e4>)
 80081aa:	6960      	ldr	r0, [r4, #20]
 80081ac:	1ac9      	subs	r1, r1, r3
 80081ae:	f000 f8ab 	bl	8008308 <__sccl>
 80081b2:	f04f 0b00 	mov.w	fp, #0
 80081b6:	68a3      	ldr	r3, [r4, #8]
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d03d      	beq.n	800823a <_scanf_i+0x15e>
 80081be:	6831      	ldr	r1, [r6, #0]
 80081c0:	6960      	ldr	r0, [r4, #20]
 80081c2:	f891 c000 	ldrb.w	ip, [r1]
 80081c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d035      	beq.n	800823a <_scanf_i+0x15e>
 80081ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80081d2:	d124      	bne.n	800821e <_scanf_i+0x142>
 80081d4:	0510      	lsls	r0, r2, #20
 80081d6:	d522      	bpl.n	800821e <_scanf_i+0x142>
 80081d8:	f10b 0b01 	add.w	fp, fp, #1
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	d003      	beq.n	80081ea <_scanf_i+0x10e>
 80081e2:	3301      	adds	r3, #1
 80081e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	6873      	ldr	r3, [r6, #4]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	6073      	str	r3, [r6, #4]
 80081f2:	dd1b      	ble.n	800822c <_scanf_i+0x150>
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	60a3      	str	r3, [r4, #8]
 8008200:	e7d9      	b.n	80081b6 <_scanf_i+0xda>
 8008202:	f1bb 0f02 	cmp.w	fp, #2
 8008206:	d1ae      	bne.n	8008166 <_scanf_i+0x8a>
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800820e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008212:	d1bf      	bne.n	8008194 <_scanf_i+0xb8>
 8008214:	2310      	movs	r3, #16
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800821c:	e7a2      	b.n	8008164 <_scanf_i+0x88>
 800821e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008222:	6022      	str	r2, [r4, #0]
 8008224:	780b      	ldrb	r3, [r1, #0]
 8008226:	f805 3b01 	strb.w	r3, [r5], #1
 800822a:	e7de      	b.n	80081ea <_scanf_i+0x10e>
 800822c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008230:	4631      	mov	r1, r6
 8008232:	4650      	mov	r0, sl
 8008234:	4798      	blx	r3
 8008236:	2800      	cmp	r0, #0
 8008238:	d0df      	beq.n	80081fa <_scanf_i+0x11e>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	05d9      	lsls	r1, r3, #23
 800823e:	d50d      	bpl.n	800825c <_scanf_i+0x180>
 8008240:	42bd      	cmp	r5, r7
 8008242:	d909      	bls.n	8008258 <_scanf_i+0x17c>
 8008244:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800824c:	4632      	mov	r2, r6
 800824e:	4650      	mov	r0, sl
 8008250:	4798      	blx	r3
 8008252:	f105 39ff 	add.w	r9, r5, #4294967295
 8008256:	464d      	mov	r5, r9
 8008258:	42bd      	cmp	r5, r7
 800825a:	d028      	beq.n	80082ae <_scanf_i+0x1d2>
 800825c:	6822      	ldr	r2, [r4, #0]
 800825e:	f012 0210 	ands.w	r2, r2, #16
 8008262:	d113      	bne.n	800828c <_scanf_i+0x1b0>
 8008264:	702a      	strb	r2, [r5, #0]
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	9e01      	ldr	r6, [sp, #4]
 800826a:	4639      	mov	r1, r7
 800826c:	4650      	mov	r0, sl
 800826e:	47b0      	blx	r6
 8008270:	f8d8 3000 	ldr.w	r3, [r8]
 8008274:	6821      	ldr	r1, [r4, #0]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	f8c8 2000 	str.w	r2, [r8]
 800827c:	f011 0f20 	tst.w	r1, #32
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	d00f      	beq.n	80082a4 <_scanf_i+0x1c8>
 8008284:	6018      	str	r0, [r3, #0]
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	60e3      	str	r3, [r4, #12]
 800828c:	1bed      	subs	r5, r5, r7
 800828e:	44ab      	add	fp, r5
 8008290:	6925      	ldr	r5, [r4, #16]
 8008292:	445d      	add	r5, fp
 8008294:	6125      	str	r5, [r4, #16]
 8008296:	2000      	movs	r0, #0
 8008298:	b007      	add	sp, #28
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	f04f 0b00 	mov.w	fp, #0
 80082a2:	e7ca      	b.n	800823a <_scanf_i+0x15e>
 80082a4:	07ca      	lsls	r2, r1, #31
 80082a6:	bf4c      	ite	mi
 80082a8:	8018      	strhmi	r0, [r3, #0]
 80082aa:	6018      	strpl	r0, [r3, #0]
 80082ac:	e7eb      	b.n	8008286 <_scanf_i+0x1aa>
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7f2      	b.n	8008298 <_scanf_i+0x1bc>
 80082b2:	bf00      	nop
 80082b4:	08008f58 	.word	0x08008f58
 80082b8:	08008581 	.word	0x08008581
 80082bc:	08008485 	.word	0x08008485
 80082c0:	0800904c 	.word	0x0800904c

080082c4 <_read_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d07      	ldr	r5, [pc, #28]	; (80082e4 <_read_r+0x20>)
 80082c8:	4604      	mov	r4, r0
 80082ca:	4608      	mov	r0, r1
 80082cc:	4611      	mov	r1, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	602a      	str	r2, [r5, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f7f9 f982 	bl	80015dc <_read>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_read_r+0x1e>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_read_r+0x1e>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	200008b0 	.word	0x200008b0

080082e8 <_sbrk_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d06      	ldr	r5, [pc, #24]	; (8008304 <_sbrk_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7f9 f9e0 	bl	80016b8 <_sbrk>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_sbrk_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_sbrk_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	200008b0 	.word	0x200008b0

08008308 <__sccl>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	780b      	ldrb	r3, [r1, #0]
 800830c:	4604      	mov	r4, r0
 800830e:	2b5e      	cmp	r3, #94	; 0x5e
 8008310:	bf0b      	itete	eq
 8008312:	784b      	ldrbeq	r3, [r1, #1]
 8008314:	1c48      	addne	r0, r1, #1
 8008316:	1c88      	addeq	r0, r1, #2
 8008318:	2200      	movne	r2, #0
 800831a:	bf08      	it	eq
 800831c:	2201      	moveq	r2, #1
 800831e:	1e61      	subs	r1, r4, #1
 8008320:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008324:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008328:	42a9      	cmp	r1, r5
 800832a:	d1fb      	bne.n	8008324 <__sccl+0x1c>
 800832c:	b90b      	cbnz	r3, 8008332 <__sccl+0x2a>
 800832e:	3801      	subs	r0, #1
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	f082 0101 	eor.w	r1, r2, #1
 8008336:	54e1      	strb	r1, [r4, r3]
 8008338:	1c42      	adds	r2, r0, #1
 800833a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800833e:	2d2d      	cmp	r5, #45	; 0x2d
 8008340:	f102 36ff 	add.w	r6, r2, #4294967295
 8008344:	4610      	mov	r0, r2
 8008346:	d006      	beq.n	8008356 <__sccl+0x4e>
 8008348:	2d5d      	cmp	r5, #93	; 0x5d
 800834a:	d0f1      	beq.n	8008330 <__sccl+0x28>
 800834c:	b90d      	cbnz	r5, 8008352 <__sccl+0x4a>
 800834e:	4630      	mov	r0, r6
 8008350:	e7ee      	b.n	8008330 <__sccl+0x28>
 8008352:	462b      	mov	r3, r5
 8008354:	e7ef      	b.n	8008336 <__sccl+0x2e>
 8008356:	7816      	ldrb	r6, [r2, #0]
 8008358:	2e5d      	cmp	r6, #93	; 0x5d
 800835a:	d0fa      	beq.n	8008352 <__sccl+0x4a>
 800835c:	42b3      	cmp	r3, r6
 800835e:	dcf8      	bgt.n	8008352 <__sccl+0x4a>
 8008360:	4618      	mov	r0, r3
 8008362:	3001      	adds	r0, #1
 8008364:	4286      	cmp	r6, r0
 8008366:	5421      	strb	r1, [r4, r0]
 8008368:	dcfb      	bgt.n	8008362 <__sccl+0x5a>
 800836a:	43d8      	mvns	r0, r3
 800836c:	4430      	add	r0, r6
 800836e:	1c5d      	adds	r5, r3, #1
 8008370:	42b3      	cmp	r3, r6
 8008372:	bfa8      	it	ge
 8008374:	2000      	movge	r0, #0
 8008376:	182b      	adds	r3, r5, r0
 8008378:	3202      	adds	r2, #2
 800837a:	e7de      	b.n	800833a <__sccl+0x32>

0800837c <_strtol_l.isra.0>:
 800837c:	2b01      	cmp	r3, #1
 800837e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008382:	d001      	beq.n	8008388 <_strtol_l.isra.0+0xc>
 8008384:	2b24      	cmp	r3, #36	; 0x24
 8008386:	d906      	bls.n	8008396 <_strtol_l.isra.0+0x1a>
 8008388:	f7fe fdd2 	bl	8006f30 <__errno>
 800838c:	2316      	movs	r3, #22
 800838e:	6003      	str	r3, [r0, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	4f3a      	ldr	r7, [pc, #232]	; (8008480 <_strtol_l.isra.0+0x104>)
 8008398:	468e      	mov	lr, r1
 800839a:	4676      	mov	r6, lr
 800839c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80083a0:	5de5      	ldrb	r5, [r4, r7]
 80083a2:	f015 0508 	ands.w	r5, r5, #8
 80083a6:	d1f8      	bne.n	800839a <_strtol_l.isra.0+0x1e>
 80083a8:	2c2d      	cmp	r4, #45	; 0x2d
 80083aa:	d134      	bne.n	8008416 <_strtol_l.isra.0+0x9a>
 80083ac:	f89e 4000 	ldrb.w	r4, [lr]
 80083b0:	f04f 0801 	mov.w	r8, #1
 80083b4:	f106 0e02 	add.w	lr, r6, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d05c      	beq.n	8008476 <_strtol_l.isra.0+0xfa>
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d10c      	bne.n	80083da <_strtol_l.isra.0+0x5e>
 80083c0:	2c30      	cmp	r4, #48	; 0x30
 80083c2:	d10a      	bne.n	80083da <_strtol_l.isra.0+0x5e>
 80083c4:	f89e 4000 	ldrb.w	r4, [lr]
 80083c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083cc:	2c58      	cmp	r4, #88	; 0x58
 80083ce:	d14d      	bne.n	800846c <_strtol_l.isra.0+0xf0>
 80083d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80083d4:	2310      	movs	r3, #16
 80083d6:	f10e 0e02 	add.w	lr, lr, #2
 80083da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80083de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083e2:	2600      	movs	r6, #0
 80083e4:	fbbc f9f3 	udiv	r9, ip, r3
 80083e8:	4635      	mov	r5, r6
 80083ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80083ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80083f2:	2f09      	cmp	r7, #9
 80083f4:	d818      	bhi.n	8008428 <_strtol_l.isra.0+0xac>
 80083f6:	463c      	mov	r4, r7
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	dd24      	ble.n	8008446 <_strtol_l.isra.0+0xca>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	db1f      	blt.n	8008440 <_strtol_l.isra.0+0xc4>
 8008400:	45a9      	cmp	r9, r5
 8008402:	d31d      	bcc.n	8008440 <_strtol_l.isra.0+0xc4>
 8008404:	d101      	bne.n	800840a <_strtol_l.isra.0+0x8e>
 8008406:	45a2      	cmp	sl, r4
 8008408:	db1a      	blt.n	8008440 <_strtol_l.isra.0+0xc4>
 800840a:	fb05 4503 	mla	r5, r5, r3, r4
 800840e:	2601      	movs	r6, #1
 8008410:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008414:	e7eb      	b.n	80083ee <_strtol_l.isra.0+0x72>
 8008416:	2c2b      	cmp	r4, #43	; 0x2b
 8008418:	bf08      	it	eq
 800841a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800841e:	46a8      	mov	r8, r5
 8008420:	bf08      	it	eq
 8008422:	f106 0e02 	addeq.w	lr, r6, #2
 8008426:	e7c7      	b.n	80083b8 <_strtol_l.isra.0+0x3c>
 8008428:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800842c:	2f19      	cmp	r7, #25
 800842e:	d801      	bhi.n	8008434 <_strtol_l.isra.0+0xb8>
 8008430:	3c37      	subs	r4, #55	; 0x37
 8008432:	e7e1      	b.n	80083f8 <_strtol_l.isra.0+0x7c>
 8008434:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008438:	2f19      	cmp	r7, #25
 800843a:	d804      	bhi.n	8008446 <_strtol_l.isra.0+0xca>
 800843c:	3c57      	subs	r4, #87	; 0x57
 800843e:	e7db      	b.n	80083f8 <_strtol_l.isra.0+0x7c>
 8008440:	f04f 36ff 	mov.w	r6, #4294967295
 8008444:	e7e4      	b.n	8008410 <_strtol_l.isra.0+0x94>
 8008446:	2e00      	cmp	r6, #0
 8008448:	da05      	bge.n	8008456 <_strtol_l.isra.0+0xda>
 800844a:	2322      	movs	r3, #34	; 0x22
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	4665      	mov	r5, ip
 8008450:	b942      	cbnz	r2, 8008464 <_strtol_l.isra.0+0xe8>
 8008452:	4628      	mov	r0, r5
 8008454:	e79d      	b.n	8008392 <_strtol_l.isra.0+0x16>
 8008456:	f1b8 0f00 	cmp.w	r8, #0
 800845a:	d000      	beq.n	800845e <_strtol_l.isra.0+0xe2>
 800845c:	426d      	negs	r5, r5
 800845e:	2a00      	cmp	r2, #0
 8008460:	d0f7      	beq.n	8008452 <_strtol_l.isra.0+0xd6>
 8008462:	b10e      	cbz	r6, 8008468 <_strtol_l.isra.0+0xec>
 8008464:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008468:	6011      	str	r1, [r2, #0]
 800846a:	e7f2      	b.n	8008452 <_strtol_l.isra.0+0xd6>
 800846c:	2430      	movs	r4, #48	; 0x30
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1b3      	bne.n	80083da <_strtol_l.isra.0+0x5e>
 8008472:	2308      	movs	r3, #8
 8008474:	e7b1      	b.n	80083da <_strtol_l.isra.0+0x5e>
 8008476:	2c30      	cmp	r4, #48	; 0x30
 8008478:	d0a4      	beq.n	80083c4 <_strtol_l.isra.0+0x48>
 800847a:	230a      	movs	r3, #10
 800847c:	e7ad      	b.n	80083da <_strtol_l.isra.0+0x5e>
 800847e:	bf00      	nop
 8008480:	0800904f 	.word	0x0800904f

08008484 <_strtol_r>:
 8008484:	f7ff bf7a 	b.w	800837c <_strtol_l.isra.0>

08008488 <_strtoul_l.isra.0>:
 8008488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800848c:	4e3b      	ldr	r6, [pc, #236]	; (800857c <_strtoul_l.isra.0+0xf4>)
 800848e:	4686      	mov	lr, r0
 8008490:	468c      	mov	ip, r1
 8008492:	4660      	mov	r0, ip
 8008494:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008498:	5da5      	ldrb	r5, [r4, r6]
 800849a:	f015 0508 	ands.w	r5, r5, #8
 800849e:	d1f8      	bne.n	8008492 <_strtoul_l.isra.0+0xa>
 80084a0:	2c2d      	cmp	r4, #45	; 0x2d
 80084a2:	d134      	bne.n	800850e <_strtoul_l.isra.0+0x86>
 80084a4:	f89c 4000 	ldrb.w	r4, [ip]
 80084a8:	f04f 0801 	mov.w	r8, #1
 80084ac:	f100 0c02 	add.w	ip, r0, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05e      	beq.n	8008572 <_strtoul_l.isra.0+0xea>
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d10c      	bne.n	80084d2 <_strtoul_l.isra.0+0x4a>
 80084b8:	2c30      	cmp	r4, #48	; 0x30
 80084ba:	d10a      	bne.n	80084d2 <_strtoul_l.isra.0+0x4a>
 80084bc:	f89c 0000 	ldrb.w	r0, [ip]
 80084c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80084c4:	2858      	cmp	r0, #88	; 0x58
 80084c6:	d14f      	bne.n	8008568 <_strtoul_l.isra.0+0xe0>
 80084c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80084cc:	2310      	movs	r3, #16
 80084ce:	f10c 0c02 	add.w	ip, ip, #2
 80084d2:	f04f 37ff 	mov.w	r7, #4294967295
 80084d6:	2500      	movs	r5, #0
 80084d8:	fbb7 f7f3 	udiv	r7, r7, r3
 80084dc:	fb03 f907 	mul.w	r9, r3, r7
 80084e0:	ea6f 0909 	mvn.w	r9, r9
 80084e4:	4628      	mov	r0, r5
 80084e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80084ea:	2e09      	cmp	r6, #9
 80084ec:	d818      	bhi.n	8008520 <_strtoul_l.isra.0+0x98>
 80084ee:	4634      	mov	r4, r6
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	dd24      	ble.n	800853e <_strtoul_l.isra.0+0xb6>
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	db1f      	blt.n	8008538 <_strtoul_l.isra.0+0xb0>
 80084f8:	4287      	cmp	r7, r0
 80084fa:	d31d      	bcc.n	8008538 <_strtoul_l.isra.0+0xb0>
 80084fc:	d101      	bne.n	8008502 <_strtoul_l.isra.0+0x7a>
 80084fe:	45a1      	cmp	r9, r4
 8008500:	db1a      	blt.n	8008538 <_strtoul_l.isra.0+0xb0>
 8008502:	fb00 4003 	mla	r0, r0, r3, r4
 8008506:	2501      	movs	r5, #1
 8008508:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800850c:	e7eb      	b.n	80084e6 <_strtoul_l.isra.0+0x5e>
 800850e:	2c2b      	cmp	r4, #43	; 0x2b
 8008510:	bf08      	it	eq
 8008512:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008516:	46a8      	mov	r8, r5
 8008518:	bf08      	it	eq
 800851a:	f100 0c02 	addeq.w	ip, r0, #2
 800851e:	e7c7      	b.n	80084b0 <_strtoul_l.isra.0+0x28>
 8008520:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008524:	2e19      	cmp	r6, #25
 8008526:	d801      	bhi.n	800852c <_strtoul_l.isra.0+0xa4>
 8008528:	3c37      	subs	r4, #55	; 0x37
 800852a:	e7e1      	b.n	80084f0 <_strtoul_l.isra.0+0x68>
 800852c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008530:	2e19      	cmp	r6, #25
 8008532:	d804      	bhi.n	800853e <_strtoul_l.isra.0+0xb6>
 8008534:	3c57      	subs	r4, #87	; 0x57
 8008536:	e7db      	b.n	80084f0 <_strtoul_l.isra.0+0x68>
 8008538:	f04f 35ff 	mov.w	r5, #4294967295
 800853c:	e7e4      	b.n	8008508 <_strtoul_l.isra.0+0x80>
 800853e:	2d00      	cmp	r5, #0
 8008540:	da07      	bge.n	8008552 <_strtoul_l.isra.0+0xca>
 8008542:	2322      	movs	r3, #34	; 0x22
 8008544:	f8ce 3000 	str.w	r3, [lr]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	b942      	cbnz	r2, 8008560 <_strtoul_l.isra.0+0xd8>
 800854e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008552:	f1b8 0f00 	cmp.w	r8, #0
 8008556:	d000      	beq.n	800855a <_strtoul_l.isra.0+0xd2>
 8008558:	4240      	negs	r0, r0
 800855a:	2a00      	cmp	r2, #0
 800855c:	d0f7      	beq.n	800854e <_strtoul_l.isra.0+0xc6>
 800855e:	b10d      	cbz	r5, 8008564 <_strtoul_l.isra.0+0xdc>
 8008560:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	e7f2      	b.n	800854e <_strtoul_l.isra.0+0xc6>
 8008568:	2430      	movs	r4, #48	; 0x30
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1b1      	bne.n	80084d2 <_strtoul_l.isra.0+0x4a>
 800856e:	2308      	movs	r3, #8
 8008570:	e7af      	b.n	80084d2 <_strtoul_l.isra.0+0x4a>
 8008572:	2c30      	cmp	r4, #48	; 0x30
 8008574:	d0a2      	beq.n	80084bc <_strtoul_l.isra.0+0x34>
 8008576:	230a      	movs	r3, #10
 8008578:	e7ab      	b.n	80084d2 <_strtoul_l.isra.0+0x4a>
 800857a:	bf00      	nop
 800857c:	0800904f 	.word	0x0800904f

08008580 <_strtoul_r>:
 8008580:	f7ff bf82 	b.w	8008488 <_strtoul_l.isra.0>

08008584 <__submore>:
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	460c      	mov	r4, r1
 800858a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800858c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008590:	4299      	cmp	r1, r3
 8008592:	d11d      	bne.n	80085d0 <__submore+0x4c>
 8008594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008598:	f7fe fed2 	bl	8007340 <_malloc_r>
 800859c:	b918      	cbnz	r0, 80085a6 <__submore+0x22>
 800859e:	f04f 30ff 	mov.w	r0, #4294967295
 80085a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80085ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80085b0:	6360      	str	r0, [r4, #52]	; 0x34
 80085b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80085b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80085be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80085c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80085c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80085ca:	6020      	str	r0, [r4, #0]
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7e8      	b.n	80085a2 <__submore+0x1e>
 80085d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80085d2:	0077      	lsls	r7, r6, #1
 80085d4:	463a      	mov	r2, r7
 80085d6:	f000 fa79 	bl	8008acc <_realloc_r>
 80085da:	4605      	mov	r5, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0de      	beq.n	800859e <__submore+0x1a>
 80085e0:	eb00 0806 	add.w	r8, r0, r6
 80085e4:	4601      	mov	r1, r0
 80085e6:	4632      	mov	r2, r6
 80085e8:	4640      	mov	r0, r8
 80085ea:	f000 f9eb 	bl	80089c4 <memcpy>
 80085ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80085f2:	f8c4 8000 	str.w	r8, [r4]
 80085f6:	e7e9      	b.n	80085cc <__submore+0x48>

080085f8 <__swbuf_r>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	460e      	mov	r6, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	4605      	mov	r5, r0
 8008600:	b118      	cbz	r0, 800860a <__swbuf_r+0x12>
 8008602:	6983      	ldr	r3, [r0, #24]
 8008604:	b90b      	cbnz	r3, 800860a <__swbuf_r+0x12>
 8008606:	f7fe fde9 	bl	80071dc <__sinit>
 800860a:	4b21      	ldr	r3, [pc, #132]	; (8008690 <__swbuf_r+0x98>)
 800860c:	429c      	cmp	r4, r3
 800860e:	d12b      	bne.n	8008668 <__swbuf_r+0x70>
 8008610:	686c      	ldr	r4, [r5, #4]
 8008612:	69a3      	ldr	r3, [r4, #24]
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	071a      	lsls	r2, r3, #28
 800861a:	d52f      	bpl.n	800867c <__swbuf_r+0x84>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b36b      	cbz	r3, 800867c <__swbuf_r+0x84>
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	1ac0      	subs	r0, r0, r3
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	b2f6      	uxtb	r6, r6
 800862a:	4283      	cmp	r3, r0
 800862c:	4637      	mov	r7, r6
 800862e:	dc04      	bgt.n	800863a <__swbuf_r+0x42>
 8008630:	4621      	mov	r1, r4
 8008632:	4628      	mov	r0, r5
 8008634:	f000 f926 	bl	8008884 <_fflush_r>
 8008638:	bb30      	cbnz	r0, 8008688 <__swbuf_r+0x90>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	3b01      	subs	r3, #1
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	701e      	strb	r6, [r3, #0]
 8008648:	6963      	ldr	r3, [r4, #20]
 800864a:	3001      	adds	r0, #1
 800864c:	4283      	cmp	r3, r0
 800864e:	d004      	beq.n	800865a <__swbuf_r+0x62>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	07db      	lsls	r3, r3, #31
 8008654:	d506      	bpl.n	8008664 <__swbuf_r+0x6c>
 8008656:	2e0a      	cmp	r6, #10
 8008658:	d104      	bne.n	8008664 <__swbuf_r+0x6c>
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 f911 	bl	8008884 <_fflush_r>
 8008662:	b988      	cbnz	r0, 8008688 <__swbuf_r+0x90>
 8008664:	4638      	mov	r0, r7
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <__swbuf_r+0x9c>)
 800866a:	429c      	cmp	r4, r3
 800866c:	d101      	bne.n	8008672 <__swbuf_r+0x7a>
 800866e:	68ac      	ldr	r4, [r5, #8]
 8008670:	e7cf      	b.n	8008612 <__swbuf_r+0x1a>
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <__swbuf_r+0xa0>)
 8008674:	429c      	cmp	r4, r3
 8008676:	bf08      	it	eq
 8008678:	68ec      	ldreq	r4, [r5, #12]
 800867a:	e7ca      	b.n	8008612 <__swbuf_r+0x1a>
 800867c:	4621      	mov	r1, r4
 800867e:	4628      	mov	r0, r5
 8008680:	f000 f80c 	bl	800869c <__swsetup_r>
 8008684:	2800      	cmp	r0, #0
 8008686:	d0cb      	beq.n	8008620 <__swbuf_r+0x28>
 8008688:	f04f 37ff 	mov.w	r7, #4294967295
 800868c:	e7ea      	b.n	8008664 <__swbuf_r+0x6c>
 800868e:	bf00      	nop
 8008690:	08008fc0 	.word	0x08008fc0
 8008694:	08008fe0 	.word	0x08008fe0
 8008698:	08008fa0 	.word	0x08008fa0

0800869c <__swsetup_r>:
 800869c:	4b32      	ldr	r3, [pc, #200]	; (8008768 <__swsetup_r+0xcc>)
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	4606      	mov	r6, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	b125      	cbz	r5, 80086b2 <__swsetup_r+0x16>
 80086a8:	69ab      	ldr	r3, [r5, #24]
 80086aa:	b913      	cbnz	r3, 80086b2 <__swsetup_r+0x16>
 80086ac:	4628      	mov	r0, r5
 80086ae:	f7fe fd95 	bl	80071dc <__sinit>
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <__swsetup_r+0xd0>)
 80086b4:	429c      	cmp	r4, r3
 80086b6:	d10f      	bne.n	80086d8 <__swsetup_r+0x3c>
 80086b8:	686c      	ldr	r4, [r5, #4]
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c0:	0719      	lsls	r1, r3, #28
 80086c2:	d42c      	bmi.n	800871e <__swsetup_r+0x82>
 80086c4:	06dd      	lsls	r5, r3, #27
 80086c6:	d411      	bmi.n	80086ec <__swsetup_r+0x50>
 80086c8:	2309      	movs	r3, #9
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	e03e      	b.n	8008756 <__swsetup_r+0xba>
 80086d8:	4b25      	ldr	r3, [pc, #148]	; (8008770 <__swsetup_r+0xd4>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <__swsetup_r+0x46>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7eb      	b.n	80086ba <__swsetup_r+0x1e>
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <__swsetup_r+0xd8>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7e6      	b.n	80086ba <__swsetup_r+0x1e>
 80086ec:	0758      	lsls	r0, r3, #29
 80086ee:	d512      	bpl.n	8008716 <__swsetup_r+0x7a>
 80086f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f2:	b141      	cbz	r1, 8008706 <__swsetup_r+0x6a>
 80086f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d002      	beq.n	8008702 <__swsetup_r+0x66>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 f995 	bl	8008a2c <_free_r>
 8008702:	2300      	movs	r3, #0
 8008704:	6363      	str	r3, [r4, #52]	; 0x34
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	2300      	movs	r3, #0
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f043 0308 	orr.w	r3, r3, #8
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	b94b      	cbnz	r3, 8008736 <__swsetup_r+0x9a>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d003      	beq.n	8008736 <__swsetup_r+0x9a>
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	f000 f907 	bl	8008944 <__smakebuf_r>
 8008736:	89a0      	ldrh	r0, [r4, #12]
 8008738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800873c:	f010 0301 	ands.w	r3, r0, #1
 8008740:	d00a      	beq.n	8008758 <__swsetup_r+0xbc>
 8008742:	2300      	movs	r3, #0
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	6963      	ldr	r3, [r4, #20]
 8008748:	425b      	negs	r3, r3
 800874a:	61a3      	str	r3, [r4, #24]
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	b943      	cbnz	r3, 8008762 <__swsetup_r+0xc6>
 8008750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008754:	d1ba      	bne.n	80086cc <__swsetup_r+0x30>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	0781      	lsls	r1, r0, #30
 800875a:	bf58      	it	pl
 800875c:	6963      	ldrpl	r3, [r4, #20]
 800875e:	60a3      	str	r3, [r4, #8]
 8008760:	e7f4      	b.n	800874c <__swsetup_r+0xb0>
 8008762:	2000      	movs	r0, #0
 8008764:	e7f7      	b.n	8008756 <__swsetup_r+0xba>
 8008766:	bf00      	nop
 8008768:	20000088 	.word	0x20000088
 800876c:	08008fc0 	.word	0x08008fc0
 8008770:	08008fe0 	.word	0x08008fe0
 8008774:	08008fa0 	.word	0x08008fa0

08008778 <__sflush_r>:
 8008778:	898a      	ldrh	r2, [r1, #12]
 800877a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	4605      	mov	r5, r0
 8008780:	0710      	lsls	r0, r2, #28
 8008782:	460c      	mov	r4, r1
 8008784:	d458      	bmi.n	8008838 <__sflush_r+0xc0>
 8008786:	684b      	ldr	r3, [r1, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc05      	bgt.n	8008798 <__sflush_r+0x20>
 800878c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	dc02      	bgt.n	8008798 <__sflush_r+0x20>
 8008792:	2000      	movs	r0, #0
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800879a:	2e00      	cmp	r6, #0
 800879c:	d0f9      	beq.n	8008792 <__sflush_r+0x1a>
 800879e:	2300      	movs	r3, #0
 80087a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087a4:	682f      	ldr	r7, [r5, #0]
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	d032      	beq.n	8008810 <__sflush_r+0x98>
 80087aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	075a      	lsls	r2, r3, #29
 80087b0:	d505      	bpl.n	80087be <__sflush_r+0x46>
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	1ac0      	subs	r0, r0, r3
 80087b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087b8:	b10b      	cbz	r3, 80087be <__sflush_r+0x46>
 80087ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087bc:	1ac0      	subs	r0, r0, r3
 80087be:	2300      	movs	r3, #0
 80087c0:	4602      	mov	r2, r0
 80087c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b0      	blx	r6
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	d106      	bne.n	80087de <__sflush_r+0x66>
 80087d0:	6829      	ldr	r1, [r5, #0]
 80087d2:	291d      	cmp	r1, #29
 80087d4:	d82c      	bhi.n	8008830 <__sflush_r+0xb8>
 80087d6:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <__sflush_r+0x108>)
 80087d8:	40ca      	lsrs	r2, r1
 80087da:	07d6      	lsls	r6, r2, #31
 80087dc:	d528      	bpl.n	8008830 <__sflush_r+0xb8>
 80087de:	2200      	movs	r2, #0
 80087e0:	6062      	str	r2, [r4, #4]
 80087e2:	04d9      	lsls	r1, r3, #19
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	d504      	bpl.n	80087f4 <__sflush_r+0x7c>
 80087ea:	1c42      	adds	r2, r0, #1
 80087ec:	d101      	bne.n	80087f2 <__sflush_r+0x7a>
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	b903      	cbnz	r3, 80087f4 <__sflush_r+0x7c>
 80087f2:	6560      	str	r0, [r4, #84]	; 0x54
 80087f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f6:	602f      	str	r7, [r5, #0]
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d0ca      	beq.n	8008792 <__sflush_r+0x1a>
 80087fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008800:	4299      	cmp	r1, r3
 8008802:	d002      	beq.n	800880a <__sflush_r+0x92>
 8008804:	4628      	mov	r0, r5
 8008806:	f000 f911 	bl	8008a2c <_free_r>
 800880a:	2000      	movs	r0, #0
 800880c:	6360      	str	r0, [r4, #52]	; 0x34
 800880e:	e7c1      	b.n	8008794 <__sflush_r+0x1c>
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	2301      	movs	r3, #1
 8008814:	4628      	mov	r0, r5
 8008816:	47b0      	blx	r6
 8008818:	1c41      	adds	r1, r0, #1
 800881a:	d1c7      	bne.n	80087ac <__sflush_r+0x34>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0c4      	beq.n	80087ac <__sflush_r+0x34>
 8008822:	2b1d      	cmp	r3, #29
 8008824:	d001      	beq.n	800882a <__sflush_r+0xb2>
 8008826:	2b16      	cmp	r3, #22
 8008828:	d101      	bne.n	800882e <__sflush_r+0xb6>
 800882a:	602f      	str	r7, [r5, #0]
 800882c:	e7b1      	b.n	8008792 <__sflush_r+0x1a>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	e7ad      	b.n	8008794 <__sflush_r+0x1c>
 8008838:	690f      	ldr	r7, [r1, #16]
 800883a:	2f00      	cmp	r7, #0
 800883c:	d0a9      	beq.n	8008792 <__sflush_r+0x1a>
 800883e:	0793      	lsls	r3, r2, #30
 8008840:	680e      	ldr	r6, [r1, #0]
 8008842:	bf08      	it	eq
 8008844:	694b      	ldreq	r3, [r1, #20]
 8008846:	600f      	str	r7, [r1, #0]
 8008848:	bf18      	it	ne
 800884a:	2300      	movne	r3, #0
 800884c:	eba6 0807 	sub.w	r8, r6, r7
 8008850:	608b      	str	r3, [r1, #8]
 8008852:	f1b8 0f00 	cmp.w	r8, #0
 8008856:	dd9c      	ble.n	8008792 <__sflush_r+0x1a>
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800885c:	4643      	mov	r3, r8
 800885e:	463a      	mov	r2, r7
 8008860:	4628      	mov	r0, r5
 8008862:	47b0      	blx	r6
 8008864:	2800      	cmp	r0, #0
 8008866:	dc06      	bgt.n	8008876 <__sflush_r+0xfe>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e78e      	b.n	8008794 <__sflush_r+0x1c>
 8008876:	4407      	add	r7, r0
 8008878:	eba8 0800 	sub.w	r8, r8, r0
 800887c:	e7e9      	b.n	8008852 <__sflush_r+0xda>
 800887e:	bf00      	nop
 8008880:	20400001 	.word	0x20400001

08008884 <_fflush_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b913      	cbnz	r3, 8008894 <_fflush_r+0x10>
 800888e:	2500      	movs	r5, #0
 8008890:	4628      	mov	r0, r5
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	b118      	cbz	r0, 800889e <_fflush_r+0x1a>
 8008896:	6983      	ldr	r3, [r0, #24]
 8008898:	b90b      	cbnz	r3, 800889e <_fflush_r+0x1a>
 800889a:	f7fe fc9f 	bl	80071dc <__sinit>
 800889e:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <_fflush_r+0x6c>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	d11b      	bne.n	80088dc <_fflush_r+0x58>
 80088a4:	686c      	ldr	r4, [r5, #4]
 80088a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0ef      	beq.n	800888e <_fflush_r+0xa>
 80088ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088b0:	07d0      	lsls	r0, r2, #31
 80088b2:	d404      	bmi.n	80088be <_fflush_r+0x3a>
 80088b4:	0599      	lsls	r1, r3, #22
 80088b6:	d402      	bmi.n	80088be <_fflush_r+0x3a>
 80088b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ba:	f7fe fd2d 	bl	8007318 <__retarget_lock_acquire_recursive>
 80088be:	4628      	mov	r0, r5
 80088c0:	4621      	mov	r1, r4
 80088c2:	f7ff ff59 	bl	8008778 <__sflush_r>
 80088c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088c8:	07da      	lsls	r2, r3, #31
 80088ca:	4605      	mov	r5, r0
 80088cc:	d4e0      	bmi.n	8008890 <_fflush_r+0xc>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	059b      	lsls	r3, r3, #22
 80088d2:	d4dd      	bmi.n	8008890 <_fflush_r+0xc>
 80088d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088d6:	f7fe fd20 	bl	800731a <__retarget_lock_release_recursive>
 80088da:	e7d9      	b.n	8008890 <_fflush_r+0xc>
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <_fflush_r+0x70>)
 80088de:	429c      	cmp	r4, r3
 80088e0:	d101      	bne.n	80088e6 <_fflush_r+0x62>
 80088e2:	68ac      	ldr	r4, [r5, #8]
 80088e4:	e7df      	b.n	80088a6 <_fflush_r+0x22>
 80088e6:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <_fflush_r+0x74>)
 80088e8:	429c      	cmp	r4, r3
 80088ea:	bf08      	it	eq
 80088ec:	68ec      	ldreq	r4, [r5, #12]
 80088ee:	e7da      	b.n	80088a6 <_fflush_r+0x22>
 80088f0:	08008fc0 	.word	0x08008fc0
 80088f4:	08008fe0 	.word	0x08008fe0
 80088f8:	08008fa0 	.word	0x08008fa0

080088fc <__swhatbuf_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	460e      	mov	r6, r1
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	2900      	cmp	r1, #0
 8008906:	b096      	sub	sp, #88	; 0x58
 8008908:	4614      	mov	r4, r2
 800890a:	461d      	mov	r5, r3
 800890c:	da07      	bge.n	800891e <__swhatbuf_r+0x22>
 800890e:	2300      	movs	r3, #0
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	89b3      	ldrh	r3, [r6, #12]
 8008914:	061a      	lsls	r2, r3, #24
 8008916:	d410      	bmi.n	800893a <__swhatbuf_r+0x3e>
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	e00e      	b.n	800893c <__swhatbuf_r+0x40>
 800891e:	466a      	mov	r2, sp
 8008920:	f000 f8fa 	bl	8008b18 <_fstat_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	dbf2      	blt.n	800890e <__swhatbuf_r+0x12>
 8008928:	9a01      	ldr	r2, [sp, #4]
 800892a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800892e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008932:	425a      	negs	r2, r3
 8008934:	415a      	adcs	r2, r3
 8008936:	602a      	str	r2, [r5, #0]
 8008938:	e7ee      	b.n	8008918 <__swhatbuf_r+0x1c>
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	2000      	movs	r0, #0
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	b016      	add	sp, #88	; 0x58
 8008942:	bd70      	pop	{r4, r5, r6, pc}

08008944 <__smakebuf_r>:
 8008944:	898b      	ldrh	r3, [r1, #12]
 8008946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008948:	079d      	lsls	r5, r3, #30
 800894a:	4606      	mov	r6, r0
 800894c:	460c      	mov	r4, r1
 800894e:	d507      	bpl.n	8008960 <__smakebuf_r+0x1c>
 8008950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	2301      	movs	r3, #1
 800895a:	6163      	str	r3, [r4, #20]
 800895c:	b002      	add	sp, #8
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	ab01      	add	r3, sp, #4
 8008962:	466a      	mov	r2, sp
 8008964:	f7ff ffca 	bl	80088fc <__swhatbuf_r>
 8008968:	9900      	ldr	r1, [sp, #0]
 800896a:	4605      	mov	r5, r0
 800896c:	4630      	mov	r0, r6
 800896e:	f7fe fce7 	bl	8007340 <_malloc_r>
 8008972:	b948      	cbnz	r0, 8008988 <__smakebuf_r+0x44>
 8008974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008978:	059a      	lsls	r2, r3, #22
 800897a:	d4ef      	bmi.n	800895c <__smakebuf_r+0x18>
 800897c:	f023 0303 	bic.w	r3, r3, #3
 8008980:	f043 0302 	orr.w	r3, r3, #2
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	e7e3      	b.n	8008950 <__smakebuf_r+0xc>
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <__smakebuf_r+0x7c>)
 800898a:	62b3      	str	r3, [r6, #40]	; 0x28
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	6020      	str	r0, [r4, #0]
 8008990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	6163      	str	r3, [r4, #20]
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	6120      	str	r0, [r4, #16]
 800899e:	b15b      	cbz	r3, 80089b8 <__smakebuf_r+0x74>
 80089a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089a4:	4630      	mov	r0, r6
 80089a6:	f000 f8c9 	bl	8008b3c <_isatty_r>
 80089aa:	b128      	cbz	r0, 80089b8 <__smakebuf_r+0x74>
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	f023 0303 	bic.w	r3, r3, #3
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	89a0      	ldrh	r0, [r4, #12]
 80089ba:	4305      	orrs	r5, r0
 80089bc:	81a5      	strh	r5, [r4, #12]
 80089be:	e7cd      	b.n	800895c <__smakebuf_r+0x18>
 80089c0:	08007175 	.word	0x08007175

080089c4 <memcpy>:
 80089c4:	440a      	add	r2, r1
 80089c6:	4291      	cmp	r1, r2
 80089c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089cc:	d100      	bne.n	80089d0 <memcpy+0xc>
 80089ce:	4770      	bx	lr
 80089d0:	b510      	push	{r4, lr}
 80089d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089da:	4291      	cmp	r1, r2
 80089dc:	d1f9      	bne.n	80089d2 <memcpy+0xe>
 80089de:	bd10      	pop	{r4, pc}

080089e0 <memmove>:
 80089e0:	4288      	cmp	r0, r1
 80089e2:	b510      	push	{r4, lr}
 80089e4:	eb01 0402 	add.w	r4, r1, r2
 80089e8:	d902      	bls.n	80089f0 <memmove+0x10>
 80089ea:	4284      	cmp	r4, r0
 80089ec:	4623      	mov	r3, r4
 80089ee:	d807      	bhi.n	8008a00 <memmove+0x20>
 80089f0:	1e43      	subs	r3, r0, #1
 80089f2:	42a1      	cmp	r1, r4
 80089f4:	d008      	beq.n	8008a08 <memmove+0x28>
 80089f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fe:	e7f8      	b.n	80089f2 <memmove+0x12>
 8008a00:	4402      	add	r2, r0
 8008a02:	4601      	mov	r1, r0
 8008a04:	428a      	cmp	r2, r1
 8008a06:	d100      	bne.n	8008a0a <memmove+0x2a>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a12:	e7f7      	b.n	8008a04 <memmove+0x24>

08008a14 <__malloc_lock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__malloc_lock+0x8>)
 8008a16:	f7fe bc7f 	b.w	8007318 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	200008a8 	.word	0x200008a8

08008a20 <__malloc_unlock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__malloc_unlock+0x8>)
 8008a22:	f7fe bc7a 	b.w	800731a <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	200008a8 	.word	0x200008a8

08008a2c <_free_r>:
 8008a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	d048      	beq.n	8008ac4 <_free_r+0x98>
 8008a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a36:	9001      	str	r0, [sp, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a3e:	bfb8      	it	lt
 8008a40:	18e4      	addlt	r4, r4, r3
 8008a42:	f7ff ffe7 	bl	8008a14 <__malloc_lock>
 8008a46:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <_free_r+0x9c>)
 8008a48:	9801      	ldr	r0, [sp, #4]
 8008a4a:	6813      	ldr	r3, [r2, #0]
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	b933      	cbnz	r3, 8008a5e <_free_r+0x32>
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	6014      	str	r4, [r2, #0]
 8008a54:	b003      	add	sp, #12
 8008a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a5a:	f7ff bfe1 	b.w	8008a20 <__malloc_unlock>
 8008a5e:	42a3      	cmp	r3, r4
 8008a60:	d90b      	bls.n	8008a7a <_free_r+0x4e>
 8008a62:	6821      	ldr	r1, [r4, #0]
 8008a64:	1862      	adds	r2, r4, r1
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bf04      	itt	eq
 8008a6a:	681a      	ldreq	r2, [r3, #0]
 8008a6c:	685b      	ldreq	r3, [r3, #4]
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	bf04      	itt	eq
 8008a72:	1852      	addeq	r2, r2, r1
 8008a74:	6022      	streq	r2, [r4, #0]
 8008a76:	602c      	str	r4, [r5, #0]
 8008a78:	e7ec      	b.n	8008a54 <_free_r+0x28>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b10b      	cbz	r3, 8008a84 <_free_r+0x58>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d9fa      	bls.n	8008a7a <_free_r+0x4e>
 8008a84:	6811      	ldr	r1, [r2, #0]
 8008a86:	1855      	adds	r5, r2, r1
 8008a88:	42a5      	cmp	r5, r4
 8008a8a:	d10b      	bne.n	8008aa4 <_free_r+0x78>
 8008a8c:	6824      	ldr	r4, [r4, #0]
 8008a8e:	4421      	add	r1, r4
 8008a90:	1854      	adds	r4, r2, r1
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	d1dd      	bne.n	8008a54 <_free_r+0x28>
 8008a98:	681c      	ldr	r4, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	6053      	str	r3, [r2, #4]
 8008a9e:	4421      	add	r1, r4
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	e7d7      	b.n	8008a54 <_free_r+0x28>
 8008aa4:	d902      	bls.n	8008aac <_free_r+0x80>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	e7d3      	b.n	8008a54 <_free_r+0x28>
 8008aac:	6825      	ldr	r5, [r4, #0]
 8008aae:	1961      	adds	r1, r4, r5
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	bf04      	itt	eq
 8008ab4:	6819      	ldreq	r1, [r3, #0]
 8008ab6:	685b      	ldreq	r3, [r3, #4]
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	bf04      	itt	eq
 8008abc:	1949      	addeq	r1, r1, r5
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	6054      	str	r4, [r2, #4]
 8008ac2:	e7c7      	b.n	8008a54 <_free_r+0x28>
 8008ac4:	b003      	add	sp, #12
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	2000014c 	.word	0x2000014c

08008acc <_realloc_r>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	4607      	mov	r7, r0
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	460e      	mov	r6, r1
 8008ad4:	b921      	cbnz	r1, 8008ae0 <_realloc_r+0x14>
 8008ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ada:	4611      	mov	r1, r2
 8008adc:	f7fe bc30 	b.w	8007340 <_malloc_r>
 8008ae0:	b922      	cbnz	r2, 8008aec <_realloc_r+0x20>
 8008ae2:	f7ff ffa3 	bl	8008a2c <_free_r>
 8008ae6:	4625      	mov	r5, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aec:	f000 f836 	bl	8008b5c <_malloc_usable_size_r>
 8008af0:	42a0      	cmp	r0, r4
 8008af2:	d20f      	bcs.n	8008b14 <_realloc_r+0x48>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4638      	mov	r0, r7
 8008af8:	f7fe fc22 	bl	8007340 <_malloc_r>
 8008afc:	4605      	mov	r5, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d0f2      	beq.n	8008ae8 <_realloc_r+0x1c>
 8008b02:	4631      	mov	r1, r6
 8008b04:	4622      	mov	r2, r4
 8008b06:	f7ff ff5d 	bl	80089c4 <memcpy>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff ff8d 	bl	8008a2c <_free_r>
 8008b12:	e7e9      	b.n	8008ae8 <_realloc_r+0x1c>
 8008b14:	4635      	mov	r5, r6
 8008b16:	e7e7      	b.n	8008ae8 <_realloc_r+0x1c>

08008b18 <_fstat_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	; (8008b38 <_fstat_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f7f8 fd9e 	bl	8001666 <_fstat>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_fstat_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_fstat_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	200008b0 	.word	0x200008b0

08008b3c <_isatty_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	; (8008b58 <_isatty_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7f8 fd9d 	bl	8001686 <_isatty>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_isatty_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_isatty_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200008b0 	.word	0x200008b0

08008b5c <_malloc_usable_size_r>:
 8008b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b60:	1f18      	subs	r0, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfbc      	itt	lt
 8008b66:	580b      	ldrlt	r3, [r1, r0]
 8008b68:	18c0      	addlt	r0, r0, r3
 8008b6a:	4770      	bx	lr

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
