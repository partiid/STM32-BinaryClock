
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800c4d8  0800c4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb9c  0800cb9c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb9c  0800cb9c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb9c  0800cb9c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb9c  0800cb9c  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cba0  0800cba0  0001cba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800cba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          000009b0  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e72f  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d4  00000000  00000000  0003e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00042920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a26  00000000  00000000  000452c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e77  00000000  00000000  00069cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4aa8  00000000  00000000  0008eb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016360d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064b8  00000000  00000000  00163660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4c0 	.word	0x0800c4c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800c4c0 	.word	0x0800c4c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HAL_RTC_AlarmAEventCallback>:
extern RTC_HandleTypeDef hrtc;
extern RTC_AlarmTypeDef sAlarm;
extern uint16_t FlashTx_buff[128];

/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <HAL_RTC_AlarmAEventCallback+0x3c>)
 80002be:	f002 ff8b 	bl	80031d8 <HAL_GPIO_WritePin>
	Flash_read();
 80002c2:	f000 fb1b 	bl	80008fc <Flash_read>


	for(int i = 0 ; i < 128; i++){
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e007      	b.n	80002dc <HAL_RTC_AlarmAEventCallback+0x2c>
		uint8_t byte = FlashTx_buff[i];
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <HAL_RTC_AlarmAEventCallback+0x40>)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d4:	72fb      	strb	r3, [r7, #11]
	for(int i = 0 ; i < 128; i++){
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2b7f      	cmp	r3, #127	; 0x7f
 80002e0:	ddf4      	ble.n	80002cc <HAL_RTC_AlarmAEventCallback+0x1c>




	//
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	48000800 	.word	0x48000800
 80002f0:	20000168 	.word	0x20000168

080002f4 <Alarms_init>:

void Alarms_init(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != 0x32f3){
 80002f8:	2102      	movs	r1, #2
 80002fa:	4817      	ldr	r0, [pc, #92]	; (8000358 <Alarms_init+0x64>)
 80002fc:	f008 f93a 	bl	8008574 <HAL_RTCEx_BKUPRead>
 8000300:	4603      	mov	r3, r0
 8000302:	f243 22f3 	movw	r2, #13043	; 0x32f3
 8000306:	4293      	cmp	r3, r2
 8000308:	d024      	beq.n	8000354 <Alarms_init+0x60>
		sAlarm.AlarmTime.Hours = 12;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <Alarms_init+0x68>)
 800030c:	220c      	movs	r2, #12
 800030e:	701a      	strb	r2, [r3, #0]
		sAlarm.AlarmTime.Minutes = 30;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <Alarms_init+0x68>)
 8000312:	221e      	movs	r2, #30
 8000314:	705a      	strb	r2, [r3, #1]
		sAlarm.AlarmTime.Seconds = 0;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <Alarms_init+0x68>)
 8000318:	2200      	movs	r2, #0
 800031a:	709a      	strb	r2, [r3, #2]
		sAlarm.AlarmDateWeekDay = 16;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <Alarms_init+0x68>)
 800031e:	2210      	movs	r2, #16
 8000320:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarm.Alarm = RTC_ALARM_A;
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <Alarms_init+0x68>)
 8000326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032a:	625a      	str	r2, [r3, #36]	; 0x24

		 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 800032c:	e004      	b.n	8000338 <Alarms_init+0x44>
						 		Error_Handler();
 800032e:	f001 fec9 	bl	80020c4 <Error_Handler>
						 		sendFail(4);
 8000332:	2004      	movs	r0, #4
 8000334:	f001 fd98 	bl	8001e68 <sendFail>
		 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000338:	2200      	movs	r2, #0
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <Alarms_init+0x68>)
 800033c:	4806      	ldr	r0, [pc, #24]	; (8000358 <Alarms_init+0x64>)
 800033e:	f007 fb39 	bl	80079b4 <HAL_RTC_SetAlarm_IT>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f2      	bne.n	800032e <Alarms_init+0x3a>
		};
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 0x32f3);
 8000348:	f243 22f3 	movw	r2, #13043	; 0x32f3
 800034c:	2102      	movs	r1, #2
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <Alarms_init+0x64>)
 8000350:	f008 f8ee 	bl	8008530 <HAL_RTCEx_BKUPWrite>
	}




}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000584 	.word	0x20000584
 800035c:	20000358 	.word	0x20000358

08000360 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d131      	bne.n	80003d8 <splitNumber+0x78>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d039      	beq.n	80003ee <splitNumber+0x8e>
             while(num > 0 ){
 800037a:	e02d      	b.n	80003d8 <splitNumber+0x78>
              arr[i++] = num % 10;
 800037c:	6978      	ldr	r0, [r7, #20]
 800037e:	1c43      	adds	r3, r0, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <splitNumber+0x98>)
 8000386:	fb83 2301 	smull	r2, r3, r3, r1
 800038a:	109a      	asrs	r2, r3, #2
 800038c:	17cb      	asrs	r3, r1, #31
 800038e:	1ad2      	subs	r2, r2, r3
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	1aca      	subs	r2, r1, r3
 800039a:	0083      	lsls	r3, r0, #2
 800039c:	f107 0118 	add.w	r1, r7, #24
 80003a0:	440b      	add	r3, r1
 80003a2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <splitNumber+0x98>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1092      	asrs	r2, r2, #2
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	607b      	str	r3, [r7, #4]
              if(num == 0){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <splitNumber+0x70>
                  arr[i++] = 0;
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	617a      	str	r2, [r7, #20]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	f107 0218 	add.w	r2, r7, #24
 80003c8:	4413      	add	r3, r2
 80003ca:	2200      	movs	r2, #0
 80003cc:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 80003d0:	6879      	ldr	r1, [r7, #4]
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <splitNumber+0x9c>)
 80003d4:	f00a fa88 	bl	800a8e8 <iprintf>
             while(num > 0 ){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dcce      	bgt.n	800037c <splitNumber+0x1c>


            }
        return arr[return_val];
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	f107 0218 	add.w	r2, r7, #24
 80003e6:	4413      	add	r3, r2
 80003e8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80003ec:	e000      	b.n	80003f0 <splitNumber+0x90>
         } else {
             return 0;
 80003ee:	2300      	movs	r3, #0
         }


}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	66666667 	.word	0x66666667
 80003fc:	0800c4d8 	.word	0x0800c4d8

08000400 <convertToBinary>:

int convertToBinary(int num){
 8000400:	b480      	push	{r7}
 8000402:	b08f      	sub	sp, #60	; 0x3c
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000410:	e015      	b.n	800043e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	bfb8      	it	lt
 800041c:	425b      	neglt	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000428:	440b      	add	r3, r1
 800042a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	0fda      	lsrs	r2, r3, #31
 8000432:	4413      	add	r3, r2
 8000434:	105b      	asrs	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
              i++;
 8000438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800043a:	3301      	adds	r3, #1
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1e6      	bne.n	8000412 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000446:	3b01      	subs	r3, #1
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800044a:	e005      	b.n	8000458 <convertToBinary+0x58>
              count++;
 800044c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800044e:	3301      	adds	r3, #1
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 8000452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000454:	3b01      	subs	r3, #1
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045a:	2b00      	cmp	r3, #0
 800045c:	daf6      	bge.n	800044c <convertToBinary+0x4c>

          }
          return count;
 800045e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000460:	4618      	mov	r0, r3
 8000462:	373c      	adds	r7, #60	; 0x3c
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <setTime>:



void setTime(RTC_TimeTypeDef sTime, int8_t hours, uint8_t minutes, uint8_t seconds){
 800046c:	b084      	sub	sp, #16
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
 8000472:	f107 0c08 	add.w	ip, r7, #8
 8000476:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800047a:	4817      	ldr	r0, [pc, #92]	; (80004d8 <setTime+0x6c>)
 800047c:	f007 ffdc 	bl	8008438 <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 8000480:	7f3b      	ldrb	r3, [r7, #28]
 8000482:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 8000484:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000488:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 800048a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800048e:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000490:	2200      	movs	r2, #0
 8000492:	f107 0108 	add.w	r1, r7, #8
 8000496:	4810      	ldr	r0, [pc, #64]	; (80004d8 <setTime+0x6c>)
 8000498:	f006 ff28 	bl	80072ec <HAL_RTC_SetTime>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800049c:	2200      	movs	r2, #0
 800049e:	f107 0108 	add.w	r1, r7, #8
 80004a2:	480d      	ldr	r0, [pc, #52]	; (80004d8 <setTime+0x6c>)
 80004a4:	f006 ff22 	bl	80072ec <HAL_RTC_SetTime>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <setTime+0x46>
	{
		Error_Handler();
 80004ae:	f001 fe09 	bl	80020c4 <Error_Handler>
//	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80004b2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80004b6:	2101      	movs	r1, #1
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <setTime+0x6c>)
 80004ba:	f008 f839 	bl	8008530 <HAL_RTCEx_BKUPWrite>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80004be:	2200      	movs	r2, #0
 80004c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <setTime+0x6c>)
 80004c6:	f007 fee1 	bl	800828c <HAL_RTCEx_SetWakeUpTimer_IT>



}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d2:	b004      	add	sp, #16
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000584 	.word	0x20000584

080004dc <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	resetPins();
 80004ee:	f000 f8d1 	bl	8000694 <resetPins>

	int bits_count = convertToBinary(hour);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff83 	bl	8000400 <convertToBinary>
 80004fa:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b05      	cmp	r3, #5
 8000500:	dd03      	ble.n	800050a <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 8000502:	4858      	ldr	r0, [pc, #352]	; (8000664 <displayHour+0x188>)
 8000504:	f000 fee4 	bl	80012d0 <Send>
		hour_displayed = 1;

	}


}
 8000508:	e0a7      	b.n	800065a <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
 800050e:	e016      	b.n	800053e <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	fa42 f303 	asr.w	r3, r2, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00b      	beq.n	8000538 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 8000520:	4a51      	ldr	r2, [pc, #324]	; (8000668 <displayHour+0x18c>)
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000528:	4a50      	ldr	r2, [pc, #320]	; (800066c <displayHour+0x190>)
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000530:	2201      	movs	r2, #1
 8000532:	4619      	mov	r1, r3
 8000534:	f002 fe50 	bl	80031d8 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	3301      	adds	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	2b05      	cmp	r3, #5
 8000542:	dde5      	ble.n	8000510 <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	e01b      	b.n	8000582 <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff06 	bl	8000360 <splitNumber>
 8000554:	4602      	mov	r2, r0
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 8000564:	4a42      	ldr	r2, [pc, #264]	; (8000670 <displayHour+0x194>)
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800056c:	4a41      	ldr	r2, [pc, #260]	; (8000674 <displayHour+0x198>)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f002 fe2e 	bl	80031d8 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	3301      	adds	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	2b04      	cmp	r3, #4
 8000586:	dde0      	ble.n	800054a <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e01b      	b.n	80005c6 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fee4 	bl	8000360 <splitNumber>
 8000598:	4602      	mov	r2, r0
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	fa42 f303 	asr.w	r3, r2, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80005a8:	4a33      	ldr	r2, [pc, #204]	; (8000678 <displayHour+0x19c>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b0:	4a32      	ldr	r2, [pc, #200]	; (800067c <displayHour+0x1a0>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	f002 fe0c 	bl	80031d8 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	dde0      	ble.n	800058e <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	e01b      	b.n	800060a <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fec2 	bl	8000360 <splitNumber>
 80005dc:	4602      	mov	r2, r0
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00b      	beq.n	8000604 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 80005ec:	4a24      	ldr	r2, [pc, #144]	; (8000680 <displayHour+0x1a4>)
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f4:	4a23      	ldr	r2, [pc, #140]	; (8000684 <displayHour+0x1a8>)
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f002 fdea 	bl	80031d8 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	3301      	adds	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	2b04      	cmp	r3, #4
 800060e:	dde0      	ble.n	80005d2 <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e01b      	b.n	800064e <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	2101      	movs	r1, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fea0 	bl	8000360 <splitNumber>
 8000620:	4602      	mov	r2, r0
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	fa42 f303 	asr.w	r3, r2, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00b      	beq.n	8000648 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <displayHour+0x1ac>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <displayHour+0x1b0>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	f002 fdc8 	bl	80031d8 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b03      	cmp	r3, #3
 8000652:	dde0      	ble.n	8000616 <displayHour+0x13a>
		hour_displayed = 1;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <displayHour+0x1b4>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	0800c4dc 	.word	0x0800c4dc
 8000668:	20000000 	.word	0x20000000
 800066c:	20000014 	.word	0x20000014
 8000670:	20000020 	.word	0x20000020
 8000674:	20000030 	.word	0x20000030
 8000678:	20000038 	.word	0x20000038
 800067c:	20000044 	.word	0x20000044
 8000680:	20000060 	.word	0x20000060
 8000684:	20000070 	.word	0x20000070
 8000688:	2000004c 	.word	0x2000004c
 800068c:	20000058 	.word	0x20000058
 8000690:	20000125 	.word	0x20000125

08000694 <resetPins>:

void resetPins(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00e      	b.n	80006be <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80006a0:	4a2c      	ldr	r2, [pc, #176]	; (8000754 <resetPins+0xc0>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <resetPins+0xc4>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 fd90 	bl	80031d8 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	dded      	ble.n	80006a0 <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	e01a      	b.n	8000700 <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 80006ca:	4a24      	ldr	r2, [pc, #144]	; (800075c <resetPins+0xc8>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <resetPins+0xcc>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fd7b 	bl	80031d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <resetPins+0xd0>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <resetPins+0xd4>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 fd6f 	bl	80031d8 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	dde1      	ble.n	80006ca <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e01a      	b.n	8000742 <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <resetPins+0xd8>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000714:	4a16      	ldr	r2, [pc, #88]	; (8000770 <resetPins+0xdc>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	f002 fd5a 	bl	80031d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <resetPins+0xe0>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <resetPins+0xe4>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	f002 fd4e 	bl	80031d8 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b03      	cmp	r3, #3
 8000746:	dde1      	ble.n	800070c <resetPins+0x78>
	}



}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000
 8000758:	20000014 	.word	0x20000014
 800075c:	20000038 	.word	0x20000038
 8000760:	20000044 	.word	0x20000044
 8000764:	2000004c 	.word	0x2000004c
 8000768:	20000058 	.word	0x20000058
 800076c:	20000020 	.word	0x20000020
 8000770:	20000030 	.word	0x20000030
 8000774:	20000060 	.word	0x20000060
 8000778:	20000070 	.word	0x20000070

0800077c <getNumOfDaysInMonth>:





uint8_t getNumOfDaysInMonth(uint8_t N){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d011      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d00e      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b05      	cmp	r3, #5
 8000796:	d00b      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b07      	cmp	r3, #7
 800079c:	d008      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d005      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b0a      	cmp	r3, #10
 80007a8:	d002      	beq.n	80007b0 <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b0c      	cmp	r3, #12
 80007ae:	d101      	bne.n	80007b4 <getNumOfDaysInMonth+0x38>
	        return 31;
 80007b0:	231f      	movs	r3, #31
 80007b2:	e013      	b.n	80007dc <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d008      	beq.n	80007cc <getNumOfDaysInMonth+0x50>
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d005      	beq.n	80007cc <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b09      	cmp	r3, #9
 80007c4:	d002      	beq.n	80007cc <getNumOfDaysInMonth+0x50>
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b0b      	cmp	r3, #11
 80007ca:	d101      	bne.n	80007d0 <getNumOfDaysInMonth+0x54>
	        return 30;
 80007cc:	231e      	movs	r3, #30
 80007ce:	e005      	b.n	80007dc <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d101      	bne.n	80007da <getNumOfDaysInMonth+0x5e>
	        return 28;
 80007d6:	231c      	movs	r3, #28
 80007d8:	e000      	b.n	80007dc <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 80007da:	2300      	movs	r3, #0
	    }

}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <FLASH_init>:


/* ===== FLASH INIT ===== */


void FLASH_init(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <FLASH_init+0x20>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <FLASH_init+0x24>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 255, FLASHTX_BUFF_SIZE);
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	21ff      	movs	r1, #255	; 0xff
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <FLASH_init+0x28>)
 80007fe:	f00a f86b 	bl	800a8d8 <memset>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000010c 	.word	0x2000010c
 800080c:	2000010d 	.word	0x2000010d
 8000810:	20000168 	.word	0x20000168

08000814 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <Flash_flush>:





void Flash_flush(){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 800082e:	23ff      	movs	r3, #255	; 0xff
 8000830:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e010      	b.n	800085a <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b29a      	uxth	r2, r3
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	21a0      	movs	r1, #160	; 0xa0
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <Flash_flush+0x44>)
 800084a:	f002 ff83 	bl	8003754 <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 800084e:	2005      	movs	r0, #5
 8000850:	f002 f848 	bl	80028e4 <HAL_Delay>
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3301      	adds	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b80      	cmp	r3, #128	; 0x80
 800085e:	ddeb      	ble.n	8000838 <Flash_flush+0x10>
	}
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000268 	.word	0x20000268

08000870 <Flash_write>:



uint8_t bt = 0;

void Flash_write(uint8_t data[], int start_idx){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <Flash_write+0x80>)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	6013      	str	r3, [r2, #0]



		uint8_t arr_size = 6;
 8000880:	2306      	movs	r3, #6
 8000882:	72fb      	strb	r3, [r7, #11]

		//control memory
		if(counter >= FLASHTX_BUFF_SIZE - arr_size - 1){
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <Flash_write+0x80>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	dc02      	bgt.n	8000898 <Flash_write+0x28>
			counter = 0;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <Flash_write+0x80>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
		}


		Send("Counter at: %d\r\n", counter);
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <Flash_write+0x80>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <Flash_write+0x84>)
 80008a0:	f000 fd16 	bl	80012d0 <Send>

		for(int i = 0; i < arr_size ; i++){
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e019      	b.n	80008de <Flash_write+0x6e>

			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <Flash_write+0x80>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	2201      	movs	r2, #1
 80008b8:	9201      	str	r2, [sp, #4]
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	460a      	mov	r2, r1
 80008c0:	21a0      	movs	r1, #160	; 0xa0
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <Flash_write+0x88>)
 80008c4:	f002 ff46 	bl	8003754 <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];

			counter++;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <Flash_write+0x80>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <Flash_write+0x80>)
 80008d0:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 80008d2:	2005      	movs	r0, #5
 80008d4:	f002 f806 	bl	80028e4 <HAL_Delay>
		for(int i = 0; i < arr_size ; i++){
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbe1      	blt.n	80008aa <Flash_write+0x3a>





}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000108 	.word	0x20000108
 80008f4:	0800c4fc 	.word	0x0800c4fc
 80008f8:	20000268 	.word	0x20000268

080008fc <Flash_read>:


void Flash_read(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af04      	add	r7, sp, #16
	FLASH_init();
 8000902:	f7ff ff71 	bl	80007e8 <FLASH_init>

	uint8_t byte = 0x00;
 8000906:	2300      	movs	r3, #0
 8000908:	717b      	strb	r3, [r7, #5]
	uint8_t data_found = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]


	uint8_t page = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	71bb      	strb	r3, [r7, #6]
	for(page = 0; page <= 128; page++){
 8000912:	2300      	movs	r3, #0
 8000914:	71bb      	strb	r3, [r7, #6]
 8000916:	e031      	b.n	800097c <Flash_read+0x80>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, page, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	b29a      	uxth	r2, r3
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	2301      	movs	r3, #1
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	1d7b      	adds	r3, r7, #5
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	21a1      	movs	r1, #161	; 0xa1
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <Flash_read+0x90>)
 8000930:	f002 fde8 	bl	8003504 <HAL_I2C_Mem_Read>

		//if byte is found then start downloading bytes to buffer
		if(byte != 0x00 ){
 8000934:	797b      	ldrb	r3, [r7, #5]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <Flash_read+0x42>
			//FlashTx_buff[Tx_busy++] = byte;
			data_found = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]

		}

		if(data_found == 1){
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d118      	bne.n	8000976 <Flash_read+0x7a>
				FlashTx_buff[FlashTx_busy++] = byte;
 8000944:	7979      	ldrb	r1, [r7, #5]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <Flash_read+0x94>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d0      	uxtb	r0, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <Flash_read+0x94>)
 8000950:	7010      	strb	r0, [r2, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	b289      	uxth	r1, r1
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <Flash_read+0x98>)
 8000958:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(FlashTx_busy >= FLASHTX_BUFF_SIZE){
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <Flash_read+0x94>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	da02      	bge.n	800096c <Flash_read+0x70>
					FlashTx_busy = 0;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <Flash_read+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
				}
				//if too many zeros found stop downlaoding to save only data
				if(byte == 0x00 ){
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <Flash_read+0x7a>
					data_found = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	71fb      	strb	r3, [r7, #7]
	for(page = 0; page <= 128; page++){
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	3301      	adds	r3, #1
 800097a:	71bb      	strb	r3, [r7, #6]
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	2b80      	cmp	r3, #128	; 0x80
 8000980:	d9ca      	bls.n	8000918 <Flash_read+0x1c>

}



}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000268 	.word	0x20000268
 8000990:	2000010d 	.word	0x2000010d
 8000994:	20000168 	.word	0x20000168

08000998 <Flash_getFreeSpace>:

// function to get first free address to write to
int Flash_getFreeSpace(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 80009a6:	e010      	b.n	80009ca <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	1cfb      	adds	r3, r7, #3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	21a1      	movs	r1, #161	; 0xa1
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <Flash_getFreeSpace+0x44>)
 80009c0:	f002 fda0 	bl	8003504 <HAL_I2C_Mem_Read>
		i++;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3301      	adds	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d1eb      	bne.n	80009a8 <Flash_getFreeSpace+0x10>

	}
	return i;
 80009d0:	687b      	ldr	r3, [r7, #4]


}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000268 	.word	0x20000268

080009e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b69      	ldr	r3, [pc, #420]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a68      	ldr	r2, [pc, #416]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 80009fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b66      	ldr	r3, [pc, #408]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b63      	ldr	r3, [pc, #396]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a62      	ldr	r2, [pc, #392]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b5d      	ldr	r3, [pc, #372]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a5c      	ldr	r2, [pc, #368]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a56      	ldr	r2, [pc, #344]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b51      	ldr	r3, [pc, #324]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a50      	ldr	r2, [pc, #320]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <MX_GPIO_Init+0x1bc>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f641 515f 	movw	r1, #7519	; 0x1d5f
 8000a74:	484a      	ldr	r0, [pc, #296]	; (8000ba0 <MX_GPIO_Init+0x1c0>)
 8000a76:	f002 fbaf 	bl	80031d8 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f002 fba8 	bl	80031d8 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000a8e:	4845      	ldr	r0, [pc, #276]	; (8000ba4 <MX_GPIO_Init+0x1c4>)
 8000a90:	f002 fba2 	bl	80031d8 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2104      	movs	r1, #4
 8000a98:	4843      	ldr	r0, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x1c8>)
 8000a9a:	f002 fb9d 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_GPIO_Init+0x1c0>)
 8000ab6:	f002 f8fd 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000aba:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000abe:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <MX_GPIO_Init+0x1c0>)
 8000ad4:	f002 f8ee 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 8000ad8:	f248 2313 	movw	r3, #33299	; 0x8213
 8000adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f002 f8e0 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000af4:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 8000af8:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f002 f8d0 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000b14:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0x1c0>)
 8000b2a:	f002 f8c3 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000b2e:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000b32:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0x1c4>)
 8000b48:	f002 f8b4 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000b4c:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000b50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <MX_GPIO_Init+0x1c4>)
 8000b62:	f002 f8a7 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000b66:	2304      	movs	r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <MX_GPIO_Init+0x1c8>)
 8000b7e:	f002 f899 	bl	8002cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2028      	movs	r0, #40	; 0x28
 8000b88:	f001 ffc0 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8c:	2028      	movs	r0, #40	; 0x28
 8000b8e:	f001 ffe9 	bl	8002b64 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000c00 	.word	0x48000c00

08000bac <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000bb2:	f000 fe1b 	bl	80017ec <parseIntData>
 8000bb6:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d002      	beq.n	8000bc4 <handleSetClockMode+0x18>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d117      	bne.n	8000bf4 <handleSetClockMode+0x48>

			clock_mode = mode;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <handleSetClockMode+0x58>)
 8000bca:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d10c      	bne.n	8000bec <handleSetClockMode+0x40>
				resetPins();
 8000bd2:	f7ff fd5f 	bl	8000694 <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <handleSetClockMode+0x5c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <handleSetClockMode+0x60>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <handleSetClockMode+0x64>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	f7ff fc78 	bl	80004dc <displayHour>
			}

			Send("$Success=1#\r\n");
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <handleSetClockMode+0x68>)
 8000bee:	f000 fb6f 	bl	80012d0 <Send>
		if(mode == 1 || mode == 2){
 8000bf2:	e003      	b.n	8000bfc <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000bf4:	2004      	movs	r0, #4
 8000bf6:	f001 f937 	bl	8001e68 <sendFail>
		}


}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000078 	.word	0x20000078
 8000c08:	20000140 	.word	0x20000140
 8000c0c:	20000141 	.word	0x20000141
 8000c10:	20000142 	.word	0x20000142
 8000c14:	0800c510 	.word	0x0800c510

08000c18 <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	460b      	mov	r3, r1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	4613      	mov	r3, r2
 8000c28:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000c2a:	f7ff fd33 	bl	8000694 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00c      	beq.n	8000c4e <handleShowHour+0x36>
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b16      	cmp	r3, #22
 8000c38:	d809      	bhi.n	8000c4e <handleShowHour+0x36>
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c3e:	d806      	bhi.n	8000c4e <handleShowHour+0x36>
 8000c40:	797b      	ldrb	r3, [r7, #5]
 8000c42:	2b3b      	cmp	r3, #59	; 0x3b
 8000c44:	d803      	bhi.n	8000c4e <handleShowHour+0x36>

			 hour_displayed = 0;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <handleShowHour+0x48>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e003      	b.n	8000c56 <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000c4e:	2004      	movs	r0, #4
 8000c50:	f001 f90a 	bl	8001e68 <sendFail>
	        }


}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000125 	.word	0x20000125

08000c64 <compareAlarms>:

//compare alarms that are set
/**
 * @returns earlier alarm in form of 1/2
 */
uint8_t compareAlarms(RTC_AlarmTypeDef alarmA, RTC_AlarmTypeDef alarmB){
 8000c64:	b084      	sub	sp, #16
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	f107 0c10 	add.w	ip, r7, #16
 8000c70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			//todo
			//add month checking
			uint8_t alarmA_day = alarmA.AlarmDateWeekDay;
 8000c74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c78:	71fb      	strb	r3, [r7, #7]
			uint8_t alarmA_hours = alarmA.AlarmTime.Hours;
 8000c7a:	7c3b      	ldrb	r3, [r7, #16]
 8000c7c:	71bb      	strb	r3, [r7, #6]
			uint8_t alarmA_minutes = alarmA.AlarmTime.Minutes;
 8000c7e:	7c7b      	ldrb	r3, [r7, #17]
 8000c80:	717b      	strb	r3, [r7, #5]
			uint8_t alarmA_seconds = alarmA.AlarmTime.Seconds;
 8000c82:	7cbb      	ldrb	r3, [r7, #18]
 8000c84:	713b      	strb	r3, [r7, #4]

			uint8_t alarmB_day = alarmB.AlarmDateWeekDay;
 8000c86:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000c8a:	70fb      	strb	r3, [r7, #3]
			uint8_t alarmB_hours = alarmB.AlarmTime.Hours;
 8000c8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c90:	70bb      	strb	r3, [r7, #2]
			uint8_t alarmB_minutes = alarmB.AlarmTime.Minutes;
 8000c92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c96:	707b      	strb	r3, [r7, #1]
			uint8_t alarmB_seconds = alarmB.AlarmTime.Seconds;
 8000c98:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000c9c:	703b      	strb	r3, [r7, #0]

			if(alarmA_day == alarmB_day){ //check if day is same if yes - check if hour is the same
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d125      	bne.n	8000cf2 <compareAlarms+0x8e>

				if(alarmA_hours == alarmB_hours){
 8000ca6:	79ba      	ldrb	r2, [r7, #6]
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d119      	bne.n	8000ce2 <compareAlarms+0x7e>

					if(alarmA_minutes == alarmB_minutes){
 8000cae:	797a      	ldrb	r2, [r7, #5]
 8000cb0:	787b      	ldrb	r3, [r7, #1]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d10d      	bne.n	8000cd2 <compareAlarms+0x6e>


						if(alarmA_seconds == alarmB_seconds){
 8000cb6:	793a      	ldrb	r2, [r7, #4]
 8000cb8:	783b      	ldrb	r3, [r7, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d101      	bne.n	8000cc2 <compareAlarms+0x5e>
							return 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e01e      	b.n	8000d00 <compareAlarms+0x9c>
						} else {
							if(alarmA_seconds < alarmB_seconds){
 8000cc2:	793a      	ldrb	r2, [r7, #4]
 8000cc4:	783b      	ldrb	r3, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d201      	bcs.n	8000cce <compareAlarms+0x6a>
								return 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e018      	b.n	8000d00 <compareAlarms+0x9c>
							} else {
								return 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e016      	b.n	8000d00 <compareAlarms+0x9c>



					}else {

						if(alarmA_minutes < alarmB_minutes){
 8000cd2:	797a      	ldrb	r2, [r7, #5]
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d201      	bcs.n	8000cde <compareAlarms+0x7a>
							return 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e010      	b.n	8000d00 <compareAlarms+0x9c>
						} else {
							return 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e00e      	b.n	8000d00 <compareAlarms+0x9c>
						}
					}

				} else {

					if(alarmA_hours < alarmB_hours){
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	78bb      	ldrb	r3, [r7, #2]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d201      	bcs.n	8000cee <compareAlarms+0x8a>

						return 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e008      	b.n	8000d00 <compareAlarms+0x9c>
					} else {
						return 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e006      	b.n	8000d00 <compareAlarms+0x9c>
					}

				}
			} else {
				if(alarmA_day < alarmB_day){
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d201      	bcs.n	8000cfe <compareAlarms+0x9a>
					return 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <compareAlarms+0x9c>
				} else {
					return 2;
 8000cfe:	2302      	movs	r3, #2
				}

			}


}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	b004      	add	sp, #16
 8000d0c:	4770      	bx	lr
	...

08000d10 <getAlarm>:


/**
 * @param INT {alarm} 1 for alarm A 2 for alarmB
 */
RTC_AlarmTypeDef getAlarm(uint8_t whichAlarm){
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef alarm;

	switch(whichAlarm){
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d002      	beq.n	8000d28 <getAlarm+0x18>
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d009      	beq.n	8000d3a <getAlarm+0x2a>
 8000d26:	e011      	b.n	8000d4c <getAlarm+0x3c>
	case 1:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000d28:	f107 0108 	add.w	r1, r7, #8
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <getAlarm+0x5c>)
 8000d34:	f007 f92a 	bl	8007f8c <HAL_RTC_GetAlarm>
		break;
 8000d38:	e008      	b.n	8000d4c <getAlarm+0x3c>
	case 2:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8000d3a:	f107 0108 	add.w	r1, r7, #8
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <getAlarm+0x5c>)
 8000d46:	f007 f921 	bl	8007f8c <HAL_RTC_GetAlarm>
		break;
 8000d4a:	bf00      	nop
	}



	return alarm;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	461d      	mov	r5, r3
 8000d50:	f107 0408 	add.w	r4, r7, #8
 8000d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d60:	e885 0003 	stmia.w	r5, {r0, r1}




}
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	3730      	adds	r7, #48	; 0x30
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000584 	.word	0x20000584

08000d70 <handleSetAlarm>:
uint8_t getWeekDay(){
	return getDate().WeekDay;
}

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second){
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b0a4      	sub	sp, #144	; 0x90
 8000d74:	af10      	add	r7, sp, #64	; 0x40
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70bb      	strb	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	803b      	strh	r3, [r7, #0]



	//i sprawdzac czy juz jest ten dzien i zaprogramowac alarm na najblizszy dzien

	uint8_t max_days = getNumOfDaysInMonth(month); //get maximum days in a month
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fcf5 	bl	800077c <getNumOfDaysInMonth>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//fill array to encode it and save to flash
	uint8_t alarm_to_set[7];
	uint8_t alarm_to_backup[7];

	RTC_DateTypeDef currentDate ;
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4873      	ldr	r0, [pc, #460]	; (8000f70 <handleSetAlarm+0x200>)
 8000da2:	f006 fdab 	bl	80078fc <HAL_RTC_GetDate>
Send("Current date: %d/%d", currentDate.Month, currentDate.Date);
 8000da6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000daa:	4619      	mov	r1, r3
 8000dac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000db0:	461a      	mov	r2, r3
 8000db2:	4870      	ldr	r0, [pc, #448]	; (8000f74 <handleSetAlarm+0x204>)
 8000db4:	f000 fa8c 	bl	80012d0 <Send>


	if(year >= 22 && (day > 0 && day <= max_days) && (month > 0 && month <= 12)){
 8000db8:	883b      	ldrh	r3, [r7, #0]
 8000dba:	2b15      	cmp	r3, #21
 8000dbc:	f240 80cf 	bls.w	8000f5e <handleSetAlarm+0x1ee>
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80cb 	beq.w	8000f5e <handleSetAlarm+0x1ee>
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80c5 	bhi.w	8000f5e <handleSetAlarm+0x1ee>
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80c1 	beq.w	8000f5e <handleSetAlarm+0x1ee>
 8000ddc:	78bb      	ldrb	r3, [r7, #2]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	f200 80bd 	bhi.w	8000f5e <handleSetAlarm+0x1ee>
		if(currentDate.Month <= month && currentDate.Date <= day){
 8000de4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de8:	78ba      	ldrb	r2, [r7, #2]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d307      	bcc.n	8000dfe <handleSetAlarm+0x8e>
 8000dee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d302      	bcc.n	8000dfe <handleSetAlarm+0x8e>
			Send("Past date given");
 8000df8:	485f      	ldr	r0, [pc, #380]	; (8000f78 <handleSetAlarm+0x208>)
 8000dfa:	f000 fa69 	bl	80012d0 <Send>
		}


			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000dfe:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80a7 	beq.w	8000f56 <handleSetAlarm+0x1e6>
 8000e08:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e0c:	2b17      	cmp	r3, #23
 8000e0e:	f200 80a2 	bhi.w	8000f56 <handleSetAlarm+0x1e6>
 8000e12:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e16:	2b3b      	cmp	r3, #59	; 0x3b
 8000e18:	f200 809d 	bhi.w	8000f56 <handleSetAlarm+0x1e6>
 8000e1c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e20:	2b3b      	cmp	r3, #59	; 0x3b
 8000e22:	f200 8098 	bhi.w	8000f56 <handleSetAlarm+0x1e6>

				alarm_to_set[0] = day;
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				alarm_to_set[1] = month;
 8000e2c:	78bb      	ldrb	r3, [r7, #2]
 8000e2e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				alarm_to_set[2] = year;
 8000e32:	883b      	ldrh	r3, [r7, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				alarm_to_set[3] = hour;
 8000e3a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				alarm_to_set[4] = minute;
 8000e42:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e46:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				alarm_to_set[5] = second;
 8000e4a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				alarm_to_set[6] = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			Send("$Success=1 %d#\r\n");
 8000e58:	4848      	ldr	r0, [pc, #288]	; (8000f7c <handleSetAlarm+0x20c>)
 8000e5a:	f000 fa39 	bl	80012d0 <Send>



			sAlarm.AlarmTime.Hours = hour;
 8000e5e:	4a48      	ldr	r2, [pc, #288]	; (8000f80 <handleSetAlarm+0x210>)
 8000e60:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e64:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 8000e66:	4a46      	ldr	r2, [pc, #280]	; (8000f80 <handleSetAlarm+0x210>)
 8000e68:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e6c:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = second;
 8000e6e:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <handleSetAlarm+0x210>)
 8000e70:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e74:	7093      	strb	r3, [r2, #2]
			sAlarm.AlarmDateWeekDay = day;
 8000e76:	4a42      	ldr	r2, [pc, #264]	; (8000f80 <handleSetAlarm+0x210>)
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	f882 3020 	strb.w	r3, [r2, #32]



			int start_idx = Flash_getFreeSpace() - 1;
 8000e7e:	f7ff fd8b 	bl	8000998 <Flash_getFreeSpace>
 8000e82:	4603      	mov	r3, r0
 8000e84:	3b01      	subs	r3, #1
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48


			Send("Start idx: %d\r\n", start_idx);
 8000e88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e8a:	483e      	ldr	r0, [pc, #248]	; (8000f84 <handleSetAlarm+0x214>)
 8000e8c:	f000 fa20 	bl	80012d0 <Send>




			//get two already defined alarms
			RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff3a 	bl	8000d10 <getAlarm>

					alarm_to_backup[0] = alarmA.AlarmDateWeekDay;
 8000e9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					alarm_to_backup[1] = 02;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					alarm_to_backup[2] = year;
 8000eaa:	883b      	ldrh	r3, [r7, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					alarm_to_backup[3] = alarmA.AlarmTime.Hours;
 8000eb2:	7b3b      	ldrb	r3, [r7, #12]
 8000eb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					alarm_to_backup[4] = alarmA.AlarmTime.Minutes;
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					alarm_to_backup[5] = alarmA.AlarmTime.Seconds;
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					alarm_to_backup[6] = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
//			Send("AlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//					alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);


			//check which of the two is earlier
			uint8_t earlierAlarm = compareAlarms(alarmA, sAlarm);
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <handleSetAlarm+0x210>)
 8000ecc:	ac06      	add	r4, sp, #24
 8000ece:	461d      	mov	r5, r3
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000edc:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ee0:	466d      	mov	r5, sp
 8000ee2:	f107 041c 	add.w	r4, r7, #28
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	f7ff feb4 	bl	8000c64 <compareAlarms>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			//if alarm is earlier set that alarm set that alarm
			if(earlierAlarm == 2){
 8000f02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d11b      	bne.n	8000f42 <handleSetAlarm+0x1d2>
				 sAlarm.Alarm = RTC_ALARM_A;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <handleSetAlarm+0x210>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
				 Flash_write(alarm_to_backup, start_idx);
 8000f12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fca9 	bl	8000870 <Flash_write>

				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f1e:	e004      	b.n	8000f2a <handleSetAlarm+0x1ba>
						Error_Handler();
 8000f20:	f001 f8d0 	bl	80020c4 <Error_Handler>
						sendFail(4);
 8000f24:	2004      	movs	r0, #4
 8000f26:	f000 ff9f 	bl	8001e68 <sendFail>
				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4914      	ldr	r1, [pc, #80]	; (8000f80 <handleSetAlarm+0x210>)
 8000f2e:	4810      	ldr	r0, [pc, #64]	; (8000f70 <handleSetAlarm+0x200>)
 8000f30:	f006 fd40 	bl	80079b4 <HAL_RTC_SetAlarm_IT>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f2      	bne.n	8000f20 <handleSetAlarm+0x1b0>
				 };

				 HAL_Delay(5);
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f001 fcd2 	bl	80028e4 <HAL_Delay>
 8000f40:	e005      	b.n	8000f4e <handleSetAlarm+0x1de>

			} else {

				Flash_write(alarm_to_set, start_idx);
 8000f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fc91 	bl	8000870 <Flash_write>





			handleGetAlarms();
 8000f4e:	f000 f82b 	bl	8000fa8 <handleGetAlarms>
			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f52:	bf00      	nop
 8000f54:	e007      	b.n	8000f66 <handleSetAlarm+0x1f6>

			} else { //send fail if data not correct
				sendFail(2);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f000 ff86 	bl	8001e68 <sendFail>
			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f5c:	e003      	b.n	8000f66 <handleSetAlarm+0x1f6>
			}


		} else {
			sendFail(2);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 ff82 	bl	8001e68 <sendFail>
		}
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	; 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000584 	.word	0x20000584
 8000f74:	0800c520 	.word	0x0800c520
 8000f78:	0800c534 	.word	0x0800c534
 8000f7c:	0800c544 	.word	0x0800c544
 8000f80:	20000358 	.word	0x20000358
 8000f84:	0800c558 	.word	0x0800c558

08000f88 <handleResetAlarms>:


void handleResetAlarms(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	Flash_flush();
 8000f8c:	f7ff fc4c 	bl	8000828 <Flash_flush>
	FLASH_init();
 8000f90:	f7ff fc2a 	bl	80007e8 <FLASH_init>
	Alarms_init();
 8000f94:	f7ff f9ae 	bl	80002f4 <Alarms_init>
	Send("$Success=1#\r\n");
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <handleResetAlarms+0x1c>)
 8000f9a:	f000 f999 	bl	80012d0 <Send>



}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800c510 	.word	0x0800c510

08000fa8 <handleGetAlarms>:



void handleGetAlarms(){
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b09b      	sub	sp, #108	; 0x6c
 8000fac:	af06      	add	r7, sp, #24

	Flash_read();
 8000fae:	f7ff fca5 	bl	80008fc <Flash_read>


	RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fea9 	bl	8000d10 <getAlarm>
	RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fea4 	bl	8000d10 <getAlarm>


		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000fc8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fcc:	461d      	mov	r5, r3
 8000fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd2:	461e      	mov	r6, r3
 8000fd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fd8:	469c      	mov	ip, r3
 8000fda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
							alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes, alarmA.AlarmTime.Seconds);
 8000fde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fe2:	7839      	ldrb	r1, [r7, #0]
 8000fe4:	7878      	ldrb	r0, [r7, #1]
 8000fe6:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000fea:	9404      	str	r4, [sp, #16]
 8000fec:	9003      	str	r0, [sp, #12]
 8000fee:	9102      	str	r1, [sp, #8]
 8000ff0:	9201      	str	r2, [sp, #4]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	4632      	mov	r2, r6
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <handleGetAlarms+0x68>)
 8000ffc:	f000 f968 	bl	80012d0 <Send>

		parseAlarms(FlashTx_buff);
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <handleGetAlarms+0x6c>)
 8001002:	f000 fc0f 	bl	8001824 <parseAlarms>


}
 8001006:	bf00      	nop
 8001008:	3754      	adds	r7, #84	; 0x54
 800100a:	46bd      	mov	sp, r7
 800100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100e:	bf00      	nop
 8001010:	0800c568 	.word	0x0800c568
 8001014:	20000168 	.word	0x20000168

08001018 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f002 f93c 	bl	80032d0 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f001 f831 	bl	80020c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f004 f81d 	bl	80050a4 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f001 f828 	bl	80020c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f004 f884 	bl	8005184 <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f001 f81f 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000268 	.word	0x20000268
 8001090:	40005400 	.word	0x40005400
 8001094:	2000090e 	.word	0x2000090e

08001098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_I2C_MspInit+0x8c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12f      	bne.n	800111a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_I2C_MspInit+0x90>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_I2C_MspInit+0x90>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0x90>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d6:	2312      	movs	r3, #18
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e2:	2304      	movs	r3, #4
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_I2C_MspInit+0x94>)
 80010ee:	f001 fde1 	bl	8002cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_I2C_MspInit+0x90>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_I2C_MspInit+0x90>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_I2C_MspInit+0x90>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201f      	movs	r0, #31
 8001110:	f001 fcfc 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001114:	201f      	movs	r0, #31
 8001116:	f001 fd25 	bl	8002b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40005400 	.word	0x40005400
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400

08001130 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	x1hzTime++;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <delay_1hz+0x30>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <delay_1hz+0x30>)
 800113e:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <delay_1hz+0x30>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001148:	d305      	bcc.n	8001156 <delay_1hz+0x26>
		x1hz = 1;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <delay_1hz+0x34>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <delay_1hz+0x30>)
 8001152:	2200      	movs	r2, #0
 8001154:	801a      	strh	r2, [r3, #0]
	}
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	2000010e 	.word	0x2000010e
 8001164:	20000112 	.word	0x20000112

08001168 <delay_4hz>:

void delay_4hz(){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	x4hzTime++;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <delay_4hz+0x30>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <delay_4hz+0x30>)
 8001176:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <delay_4hz+0x30>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2bf9      	cmp	r3, #249	; 0xf9
 800117e:	d905      	bls.n	800118c <delay_4hz+0x24>
		x4hz = 1;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <delay_4hz+0x34>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <delay_4hz+0x30>)
 8001188:	2200      	movs	r2, #0
 800118a:	801a      	strh	r2, [r3, #0]
	}

}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000110 	.word	0x20000110
 800119c:	20000113 	.word	0x20000113

080011a0 <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <delayUs+0x30>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80011b2:	bf00      	nop
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <delayUs+0x34>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3f9      	bcc.n	80011b4 <delayUs+0x14>
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200009b8 	.word	0x200009b8
 80011d4:	2000096c 	.word	0x2000096c

080011d8 <delayMs>:

void delayMs(uint16_t ms){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	81fb      	strh	r3, [r7, #14]
 80011e6:	e006      	b.n	80011f6 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f7ff ffd8 	bl	80011a0 <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	3301      	adds	r3, #1
 80011f4:	81fb      	strh	r3, [r7, #14]
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3f4      	bcc.n	80011e8 <delayMs+0x10>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <handleBlinkCommand+0x60>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <handleBlinkCommand+0x64>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	d805      	bhi.n	8001226 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <handleBlinkCommand+0x68>)
 8001220:	f001 ffda 	bl	80031d8 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8001224:	e01e      	b.n	8001264 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <handleBlinkCommand+0x60>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <handleBlinkCommand+0x6c>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	429a      	cmp	r2, r3
 8001232:	d805      	bhi.n	8001240 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <handleBlinkCommand+0x68>)
 800123a:	f001 ffcd 	bl	80031d8 <HAL_GPIO_WritePin>
}
 800123e:	e011      	b.n	8001264 <handleBlinkCommand+0x5c>
		led_delay = 0;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <handleBlinkCommand+0x60>)
 8001242:	2200      	movs	r2, #0
 8001244:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <handleBlinkCommand+0x70>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <handleBlinkCommand+0x70>)
 8001252:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <handleBlinkCommand+0x70>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <handleBlinkCommand+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000158 	.word	0x20000158
 800126c:	2000007a 	.word	0x2000007a
 8001270:	48000800 	.word	0x48000800
 8001274:	2000014c 	.word	0x2000014c
 8001278:	2000014e 	.word	0x2000014e
 800127c:	2000014b 	.word	0x2000014b

08001280 <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <UART_init+0x38>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <UART_init+0x3c>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <UART_init+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <UART_init+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <UART_init+0x48>)
 80012a4:	f009 fb18 	bl	800a8d8 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	2100      	movs	r1, #0
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <UART_init+0x4c>)
 80012b0:	f009 fb12 	bl	800a8d8 <memset>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000116 	.word	0x20000116
 80012bc:	20000118 	.word	0x20000118
 80012c0:	2000011a 	.word	0x2000011a
 80012c4:	2000011c 	.word	0x2000011c
 80012c8:	20000728 	.word	0x20000728
 80012cc:	20000384 	.word	0x20000384

080012d0 <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 80012d0:	b40f      	push	{r0, r1, r2, r3}
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b0c4      	sub	sp, #272	; 0x110
 80012d6:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <Send+0x110>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 80012e6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	f107 000c 	add.w	r0, r7, #12
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80012fa:	f009 fb95 	bl	800aa28 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001304:	e020      	b.n	8001348 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f107 010c 	add.w	r1, r7, #12
 8001310:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001314:	440a      	add	r2, r1
 8001316:	7811      	ldrb	r1, [r2, #0]
 8001318:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <Send+0x114>)
 800131a:	54d1      	strb	r1, [r2, r3]
		idx++;
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001334:	db03      	blt.n	800133e <Send+0x6e>
			idx = 0;
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 800133e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff51 	bl	80001f4 <strlen>
 8001352:	4602      	mov	r2, r0
 8001354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001358:	429a      	cmp	r2, r3
 800135a:	d8d4      	bhi.n	8001306 <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <Send+0x110>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <Send+0x118>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	429a      	cmp	r2, r3
 800136e:	d127      	bne.n	80013c0 <Send+0xf0>
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <Send+0x11c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <Send+0x110>)
 8001380:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <Send+0x118>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <Send+0x114>)
 800138c:	5c9a      	ldrb	r2, [r3, r2]
 800138e:	1cfb      	adds	r3, r7, #3
 8001390:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <Send+0x118>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3301      	adds	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <Send+0x118>)
 800139e:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <Send+0x118>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013aa:	d302      	bcc.n	80013b2 <Send+0xe2>
			Tx_busy = 0;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <Send+0x118>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80013b2:	1cfb      	adds	r3, r7, #3
 80013b4:	2201      	movs	r2, #1
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <Send+0x11c>)
 80013ba:	f007 fe81 	bl	80090c0 <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 80013be:	e005      	b.n	80013cc <Send+0xfc>

	} else {
		Tx_empty = idx;
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <Send+0x110>)
 80013ca:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013cc:	b662      	cpsie	i
}
 80013ce:	bf00      	nop
	}
	__enable_irq();


}
 80013d0:	bf00      	nop
 80013d2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013dc:	b004      	add	sp, #16
 80013de:	4770      	bx	lr
 80013e0:	2000011a 	.word	0x2000011a
 80013e4:	20000384 	.word	0x20000384
 80013e8:	2000011c 	.word	0x2000011c
 80013ec:	20000a04 	.word	0x20000a04

080013f0 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_UART_TxCpltCallback+0x60>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	429a      	cmp	r2, r3
 8001406:	d01d      	beq.n	8001444 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_UART_TxCpltCallback+0x64>)
 8001412:	5c9b      	ldrb	r3, [r3, r2]
 8001414:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 8001422:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142e:	d302      	bcc.n	8001436 <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_UART_TxCpltCallback+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001436:	f107 030f 	add.w	r3, r7, #15
 800143a:	2201      	movs	r2, #1
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_UART_TxCpltCallback+0x68>)
 8001440:	f007 fe3e 	bl	80090c0 <HAL_UART_Transmit_IT>
	}
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000011c 	.word	0x2000011c
 8001450:	2000011a 	.word	0x2000011a
 8001454:	20000384 	.word	0x20000384
 8001458:	20000a04 	.word	0x20000a04

0800145c <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a10      	ldr	r2, [pc, #64]	; (80014ac <HAL_UART_RxCpltCallback+0x50>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11a      	bne.n	80014a4 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 800147a:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001486:	d302      	bcc.n	800148e <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 800148a:	2200      	movs	r2, #0
 800148c:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_UART_RxCpltCallback+0x58>)
 8001498:	4413      	add	r3, r2
 800149a:	2201      	movs	r2, #1
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 80014a0:	f007 fe7c 	bl	800919c <HAL_UART_Receive_IT>


	}
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004400 	.word	0x40004400
 80014b0:	20000116 	.word	0x20000116
 80014b4:	20000728 	.word	0x20000728
 80014b8:	20000a04 	.word	0x20000a04

080014bc <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <uart_ready+0x24>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <uart_ready+0x28>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d101      	bne.n	80014d4 <uart_ready+0x18>
		return 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <uart_ready+0x1a>
	} else {
		return 1;
 80014d4:	2301      	movs	r3, #1
	}
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20000116 	.word	0x20000116
 80014e4:	20000118 	.word	0x20000118

080014e8 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ======== RTC =========== */



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80014f0:	2200      	movs	r2, #0
 80014f2:	4910      	ldr	r1, [pc, #64]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f006 f865 	bl	80075c4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80014fa:	2200      	movs	r2, #0
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f006 f9fc 	bl	80078fc <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001512:	789b      	ldrb	r3, [r3, #2]
 8001514:	737b      	strb	r3, [r7, #13]


	 if(clock_mode == 1){
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	7bb9      	ldrb	r1, [r7, #14]
 8001524:	7b7a      	ldrb	r2, [r7, #13]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ffd8 	bl	80004dc <displayHour>





}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000128 	.word	0x20000128
 8001538:	2000013c 	.word	0x2000013c
 800153c:	20000078 	.word	0x20000078

08001540 <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af04      	add	r7, sp, #16
	uint8_t picked_command = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 800154a:	4962      	ldr	r1, [pc, #392]	; (80016d4 <parseCommand+0x194>)
 800154c:	4862      	ldr	r0, [pc, #392]	; (80016d8 <parseCommand+0x198>)
 800154e:	f7fe fe47 	bl	80001e0 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <parseCommand+0x1e>

		handleSetClockMode();
 8001558:	f7ff fb28 	bl	8000bac <handleSetClockMode>
 800155c:	e0ae      	b.n	80016bc <parseCommand+0x17c>


	} else if (strcmp("setTime", command) == 0){
 800155e:	495d      	ldr	r1, [pc, #372]	; (80016d4 <parseCommand+0x194>)
 8001560:	485e      	ldr	r0, [pc, #376]	; (80016dc <parseCommand+0x19c>)
 8001562:	f7fe fe3d 	bl	80001e0 <strcmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d119      	bne.n	80015a0 <parseCommand+0x60>
		parseTime();
 800156c:	f000 f8e6 	bl	800173c <parseTime>
		resetPins();
 8001570:	f7ff f890 	bl	8000694 <resetPins>

		setTime(sTime, hour_to_show, minute_to_show, second_to_show);
 8001574:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <parseCommand+0x1a0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <parseCommand+0x1a4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <parseCommand+0x1a8>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <parseCommand+0x1ac>)
 800158e:	9003      	str	r0, [sp, #12]
 8001590:	9102      	str	r1, [sp, #8]
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159a:	f7fe ff67 	bl	800046c <setTime>
 800159e:	e08d      	b.n	80016bc <parseCommand+0x17c>


	} else if (strcmp("getTime", command) == 0) {
 80015a0:	494c      	ldr	r1, [pc, #304]	; (80016d4 <parseCommand+0x194>)
 80015a2:	4853      	ldr	r0, [pc, #332]	; (80016f0 <parseCommand+0x1b0>)
 80015a4:	f7fe fe1c 	bl	80001e0 <strcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <parseCommand+0x9c>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80015ae:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <parseCommand+0x1ac>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <parseCommand+0x1ac>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <parseCommand+0x1ac>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	484d      	ldr	r0, [pc, #308]	; (80016f4 <parseCommand+0x1b4>)
 80015c0:	f7ff fe86 	bl	80012d0 <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <parseCommand+0x1b8>)
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <parseCommand+0x1b8>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <parseCommand+0x1b8>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <parseCommand+0x1bc>)
 80015d6:	f7ff fe7b 	bl	80012d0 <Send>
 80015da:	e06f      	b.n	80016bc <parseCommand+0x17c>


	}else if(strcmp("setAlarm", command) == 0){
 80015dc:	493d      	ldr	r1, [pc, #244]	; (80016d4 <parseCommand+0x194>)
 80015de:	4848      	ldr	r0, [pc, #288]	; (8001700 <parseCommand+0x1c0>)
 80015e0:	f7fe fdfe 	bl	80001e0 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d123      	bne.n	8001632 <parseCommand+0xf2>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 80015ea:	f000 f8d5 	bl	8001798 <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set, second_to_set);
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <parseCommand+0x1c4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461c      	mov	r4, r3
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <parseCommand+0x1c8>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461d      	mov	r5, r3
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <parseCommand+0x1cc>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461e      	mov	r6, r3
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <parseCommand+0x1d0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <parseCommand+0x1d4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <parseCommand+0x1d8>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4836      	ldr	r0, [pc, #216]	; (80016f8 <parseCommand+0x1b8>)
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	9101      	str	r1, [sp, #4]
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	4633      	mov	r3, r6
 8001626:	462a      	mov	r2, r5
 8001628:	4621      	mov	r1, r4
 800162a:	6800      	ldr	r0, [r0, #0]
 800162c:	f7ff fba0 	bl	8000d70 <handleSetAlarm>
 8001630:	e044      	b.n	80016bc <parseCommand+0x17c>


	} else if(strcmp("getAlarms", command) == 0){
 8001632:	4928      	ldr	r1, [pc, #160]	; (80016d4 <parseCommand+0x194>)
 8001634:	4839      	ldr	r0, [pc, #228]	; (800171c <parseCommand+0x1dc>)
 8001636:	f7fe fdd3 	bl	80001e0 <strcmp>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <parseCommand+0x106>
		handleGetAlarms();
 8001640:	f7ff fcb2 	bl	8000fa8 <handleGetAlarms>
 8001644:	e03a      	b.n	80016bc <parseCommand+0x17c>


	} else if (strcmp("getAlarmsCount", command) == 0){
 8001646:	4923      	ldr	r1, [pc, #140]	; (80016d4 <parseCommand+0x194>)
 8001648:	4835      	ldr	r0, [pc, #212]	; (8001720 <parseCommand+0x1e0>)
 800164a:	f7fe fdc9 	bl	80001e0 <strcmp>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d033      	beq.n	80016bc <parseCommand+0x17c>



	} else if (strcmp("resetAlarms", command) == 0){
 8001654:	491f      	ldr	r1, [pc, #124]	; (80016d4 <parseCommand+0x194>)
 8001656:	4833      	ldr	r0, [pc, #204]	; (8001724 <parseCommand+0x1e4>)
 8001658:	f7fe fdc2 	bl	80001e0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d111      	bne.n	8001686 <parseCommand+0x146>
		handleResetAlarms();
 8001662:	f7ff fc91 	bl	8000f88 <handleResetAlarms>
		memset(days, 0 , sizeof(days));
 8001666:	2220      	movs	r2, #32
 8001668:	2100      	movs	r1, #0
 800166a:	482f      	ldr	r0, [pc, #188]	; (8001728 <parseCommand+0x1e8>)
 800166c:	f009 f934 	bl	800a8d8 <memset>
				memset(months, 0 , sizeof(months));
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	482d      	ldr	r0, [pc, #180]	; (800172c <parseCommand+0x1ec>)
 8001676:	f009 f92f 	bl	800a8d8 <memset>
				memset(hours, 0 , sizeof(hours));
 800167a:	2220      	movs	r2, #32
 800167c:	2100      	movs	r1, #0
 800167e:	482c      	ldr	r0, [pc, #176]	; (8001730 <parseCommand+0x1f0>)
 8001680:	f009 f92a 	bl	800a8d8 <memset>
 8001684:	e01a      	b.n	80016bc <parseCommand+0x17c>

	} else if (strcmp("showHour", command) == 0){
 8001686:	4913      	ldr	r1, [pc, #76]	; (80016d4 <parseCommand+0x194>)
 8001688:	482a      	ldr	r0, [pc, #168]	; (8001734 <parseCommand+0x1f4>)
 800168a:	f7fe fda9 	bl	80001e0 <strcmp>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d110      	bne.n	80016b6 <parseCommand+0x176>

		parseTime();
 8001694:	f000 f852 	bl	800173c <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <parseCommand+0x1a0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <parseCommand+0x1a4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <parseCommand+0x1a8>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f7ff fab2 	bl	8000c18 <handleShowHour>
 80016b4:	e002      	b.n	80016bc <parseCommand+0x17c>

	}
	else {
		sendFail(1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f000 fbd6 	bl	8001e68 <sendFail>
	}

	//handle picked command

	clearCommand();
 80016bc:	f000 fa32 	bl	8001b24 <clearCommand>
	clearData();
 80016c0:	f000 fa40 	bl	8001b44 <clearData>
	Frame_busy = 0;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <parseCommand+0x1f8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002d8 	.word	0x200002d8
 80016d8:	0800c5a0 	.word	0x0800c5a0
 80016dc:	0800c5a8 	.word	0x0800c5a8
 80016e0:	20000140 	.word	0x20000140
 80016e4:	20000141 	.word	0x20000141
 80016e8:	20000142 	.word	0x20000142
 80016ec:	20000128 	.word	0x20000128
 80016f0:	0800c5b0 	.word	0x0800c5b0
 80016f4:	0800c5b8 	.word	0x0800c5b8
 80016f8:	2000013c 	.word	0x2000013c
 80016fc:	0800c5d8 	.word	0x0800c5d8
 8001700:	0800c5f8 	.word	0x0800c5f8
 8001704:	20000143 	.word	0x20000143
 8001708:	20000144 	.word	0x20000144
 800170c:	20000146 	.word	0x20000146
 8001710:	20000148 	.word	0x20000148
 8001714:	20000149 	.word	0x20000149
 8001718:	2000014a 	.word	0x2000014a
 800171c:	0800c604 	.word	0x0800c604
 8001720:	0800c610 	.word	0x0800c610
 8001724:	0800c620 	.word	0x0800c620
 8001728:	200002b4 	.word	0x200002b4
 800172c:	20000948 	.word	0x20000948
 8001730:	20000928 	.word	0x20000928
 8001734:	0800c62c 	.word	0x0800c62c
 8001738:	2000011e 	.word	0x2000011e

0800173c <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <parseTime+0x44>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <parseTime+0x48>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <parseTime+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <parseTime+0x4c>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <parseTime+0x48>)
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <parseTime+0x44>)
 800175c:	490b      	ldr	r1, [pc, #44]	; (800178c <parseTime+0x50>)
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <parseTime+0x54>)
 8001760:	f009 f8da 	bl	800a918 <siscanf>
 8001764:	4603      	mov	r3, r0
 8001766:	2b03      	cmp	r3, #3
 8001768:	d103      	bne.n	8001772 <parseTime+0x36>

		 Send("$Success=1#\r\n");
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <parseTime+0x58>)
 800176c:	f7ff fdb0 	bl	80012d0 <Send>

	 } else {

		 sendFail(2);
	 }
}
 8001770:	e002      	b.n	8001778 <parseTime+0x3c>
		 sendFail(2);
 8001772:	2002      	movs	r0, #2
 8001774:	f000 fb78 	bl	8001e68 <sendFail>
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000140 	.word	0x20000140
 8001784:	20000141 	.word	0x20000141
 8001788:	20000142 	.word	0x20000142
 800178c:	0800c638 	.word	0x0800c638
 8001790:	200005a4 	.word	0x200005a4
 8001794:	0800c644 	.word	0x0800c644

08001798 <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set, &second_to_set) == 6){
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <parseDateTime+0x34>)
 80017a0:	9303      	str	r3, [sp, #12]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <parseDateTime+0x38>)
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <parseDateTime+0x3c>)
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <parseDateTime+0x40>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <parseDateTime+0x44>)
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <parseDateTime+0x48>)
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <parseDateTime+0x4c>)
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <parseDateTime+0x50>)
 80017b6:	f009 f8af 	bl	800a918 <siscanf>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d002      	beq.n	80017c6 <parseDateTime+0x2e>


	} else {
		sendFail(2);
 80017c0:	2002      	movs	r0, #2
 80017c2:	f000 fb51 	bl	8001e68 <sendFail>
	}
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000014a 	.word	0x2000014a
 80017d0:	20000149 	.word	0x20000149
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000146 	.word	0x20000146
 80017dc:	20000144 	.word	0x20000144
 80017e0:	20000143 	.word	0x20000143
 80017e4:	0800c654 	.word	0x0800c654
 80017e8:	200005a4 	.word	0x200005a4

080017ec <parseIntData>:



int parseIntData(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	int single_param = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	461a      	mov	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <parseIntData+0x30>)
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <parseIntData+0x34>)
 80017fe:	f009 f88b 	bl	800a918 <siscanf>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <parseIntData+0x20>
		return single_param;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	e002      	b.n	8001812 <parseIntData+0x26>
	}
	else {
		sendFail(2);
 800180c:	2002      	movs	r0, #2
 800180e:	f000 fb2b 	bl	8001e68 <sendFail>
	}


}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800c668 	.word	0x0800c668
 8001820:	200005a4 	.word	0x200005a4

08001824 <parseAlarms>:
//function to parse alarms downloaded from flash

void parseAlarms(uint16_t alarms[]){
 8001824:	b580      	push	{r7, lr}
 8001826:	b0a0      	sub	sp, #128	; 0x80
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]



	//arrays with separate values to find the min value

	uint8_t days_idx = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


	uint8_t months_idx = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e


	uint8_t hours_idx = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

	uint16_t minutes[16];
	uint8_t minutes_idx = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

	uint16_t seconds[16];
	uint8_t seconds_idx = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b


	uint8_t alarms_size = 128;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	uint8_t day_start_idx = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	uint8_t month_start_idx = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t year_start_idx = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	uint8_t hour_start_idx = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	uint8_t minute_start_idx = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t second_start_idx = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76



	for(int i = 0; i < alarms_size; i++){
 8001874:	2300      	movs	r3, #0
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
 8001878:	e020      	b.n	80018bc <parseAlarms+0x98>
		//
		if(i == 0 ){
 800187a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <parseAlarms+0x62>
			day_start_idx = i;
 8001880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001882:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

		}
		if(i == 1){
 8001886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001888:	2b01      	cmp	r3, #1
 800188a:	d102      	bne.n	8001892 <parseAlarms+0x6e>
			month_start_idx = i;
 800188c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800188e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
		}
		if(i == 3){
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001894:	2b03      	cmp	r3, #3
 8001896:	d102      	bne.n	800189e <parseAlarms+0x7a>
			hour_start_idx = i;
 8001898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800189a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
		}
		if(i == 4){
 800189e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d102      	bne.n	80018aa <parseAlarms+0x86>
			minute_start_idx = i;
 80018a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		if(i == 5){
 80018aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d102      	bne.n	80018b6 <parseAlarms+0x92>
			second_start_idx = i;
 80018b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	for(int i = 0; i < alarms_size; i++){
 80018b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b8:	3301      	adds	r3, #1
 80018ba:	673b      	str	r3, [r7, #112]	; 0x70
 80018bc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbd9      	blt.n	800187a <parseAlarms+0x56>
		}
	}

	//sepearte each value to different array
	//inc by 5 to check only days
	for(int i = day_start_idx; i < alarms_size; i+=6){
 80018c6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80018ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018cc:	e017      	b.n	80018fe <parseAlarms+0xda>
		if(alarms[i] != 255){
 80018ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d00d      	beq.n	80018f8 <parseAlarms+0xd4>

		days[days_idx++] = alarms[i];
 80018dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	441a      	add	r2, r3
 80018e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	f887 107f 	strb.w	r1, [r7, #127]	; 0x7f
 80018ee:	4619      	mov	r1, r3
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	4b86      	ldr	r3, [pc, #536]	; (8001b0c <parseAlarms+0x2e8>)
 80018f4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = day_start_idx; i < alarms_size; i+=6){
 80018f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fa:	3306      	adds	r3, #6
 80018fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001902:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001904:	429a      	cmp	r2, r3
 8001906:	dbe2      	blt.n	80018ce <parseAlarms+0xaa>
		}
	}

	//check month
	for(int i = month_start_idx; i < alarms_size; i+=6){
 8001908:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800190c:	66bb      	str	r3, [r7, #104]	; 0x68
 800190e:	e017      	b.n	8001940 <parseAlarms+0x11c>
		if(alarms[i] != 255){
 8001910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d00d      	beq.n	800193a <parseAlarms+0x116>
			months[months_idx++] = alarms[i];
 800191e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	441a      	add	r2, r3
 8001926:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f887 107e 	strb.w	r1, [r7, #126]	; 0x7e
 8001930:	4619      	mov	r1, r3
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <parseAlarms+0x2ec>)
 8001936:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = month_start_idx; i < alarms_size; i+=6){
 800193a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193c:	3306      	adds	r3, #6
 800193e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001940:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001944:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe2      	blt.n	8001910 <parseAlarms+0xec>
		}

	}

	for(int i = hour_start_idx; i < alarms_size; i+=6){
 800194a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800194e:	667b      	str	r3, [r7, #100]	; 0x64
 8001950:	e017      	b.n	8001982 <parseAlarms+0x15e>
			if(alarms[i] != 255){
 8001952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	2bff      	cmp	r3, #255	; 0xff
 800195e:	d00d      	beq.n	800197c <parseAlarms+0x158>
				hours[hours_idx++] = alarms[i];
 8001960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	441a      	add	r2, r3
 8001968:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800196c:	1c59      	adds	r1, r3, #1
 800196e:	f887 107d 	strb.w	r1, [r7, #125]	; 0x7d
 8001972:	4619      	mov	r1, r3
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <parseAlarms+0x2f0>)
 8001978:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = hour_start_idx; i < alarms_size; i+=6){
 800197c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800197e:	3306      	adds	r3, #6
 8001980:	667b      	str	r3, [r7, #100]	; 0x64
 8001982:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001988:	429a      	cmp	r2, r3
 800198a:	dbe2      	blt.n	8001952 <parseAlarms+0x12e>
			}

		}
	for(int i = minute_start_idx; i < alarms_size; i+=6){
 800198c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001990:	663b      	str	r3, [r7, #96]	; 0x60
 8001992:	e019      	b.n	80019c8 <parseAlarms+0x1a4>
				if(alarms[i] != 255){
 8001994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d00f      	beq.n	80019c2 <parseAlarms+0x19e>
					minutes[minutes_idx++] = alarms[i];
 80019a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	441a      	add	r2, r3
 80019aa:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f887 107c 	strb.w	r1, [r7, #124]	; 0x7c
 80019b4:	8812      	ldrh	r2, [r2, #0]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80019bc:	440b      	add	r3, r1
 80019be:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(int i = minute_start_idx; i < alarms_size; i+=6){
 80019c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c4:	3306      	adds	r3, #6
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
 80019c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80019cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbe0      	blt.n	8001994 <parseAlarms+0x170>
				}

			}
	for(int i = second_start_idx; i < alarms_size; i+=6){
 80019d2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80019d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019d8:	e019      	b.n	8001a0e <parseAlarms+0x1ea>
			if(alarms[i] != 255){
 80019da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2bff      	cmp	r3, #255	; 0xff
 80019e6:	d00f      	beq.n	8001a08 <parseAlarms+0x1e4>
			seconds[seconds_idx++] = alarms[i];
 80019e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	441a      	add	r2, r3
 80019f0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	f887 107b 	strb.w	r1, [r7, #123]	; 0x7b
 80019fa:	8812      	ldrh	r2, [r2, #0]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001a02:	440b      	add	r3, r1
 8001a04:	f823 2c74 	strh.w	r2, [r3, #-116]
	for(int i = second_start_idx; i < alarms_size; i+=6){
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a0e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbe0      	blt.n	80019da <parseAlarms+0x1b6>
		}

		}
	//parse alarm to get the earliest alarm to set

	uint8_t location_months = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t location_days = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a



	uint8_t checker = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51





		for(int i = 0; i < 16; i++){
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a2e:	e02a      	b.n	8001a86 <parseAlarms+0x262>
			if(months[i] > 0){
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <parseAlarms+0x2ec>)
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00d      	beq.n	8001a58 <parseAlarms+0x234>
				if(months[i] < months[location_months]){
 8001a3c:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <parseAlarms+0x2ec>)
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a48:	4931      	ldr	r1, [pc, #196]	; (8001b10 <parseAlarms+0x2ec>)
 8001a4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d202      	bcs.n	8001a58 <parseAlarms+0x234>
					location_months = i;
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				}
			}
			if(days[i] > 0){
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <parseAlarms+0x2e8>)
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <parseAlarms+0x25c>
				if(days[i] < days[location_days]){
 8001a64:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <parseAlarms+0x2e8>)
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a6c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001a70:	4926      	ldr	r1, [pc, #152]	; (8001b0c <parseAlarms+0x2e8>)
 8001a72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d202      	bcs.n	8001a80 <parseAlarms+0x25c>
					location_days = i;
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		for(int i = 0; i < 16; i++){
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	3301      	adds	r3, #1
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	ddd1      	ble.n	8001a30 <parseAlarms+0x20c>

		}


		//get the minimum month - closest alarm
		uint8_t min_day = days[location_days];
 8001a8c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <parseAlarms+0x2e8>)
 8001a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		uint8_t min_month = months[location_months];
 8001a9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <parseAlarms+0x2ec>)
 8001aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if(months[location_days] == min_month){
 8001aa8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001aac:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <parseAlarms+0x2ec>)
 8001aae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ab2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d103      	bne.n	8001ac4 <parseAlarms+0x2a0>
			location_months = location_days;
 8001abc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001ac0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b


	//in case


	Send("Minimum month found: %d at location %d", months[location_months], location_months);
 8001ac4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <parseAlarms+0x2ec>)
 8001aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4810      	ldr	r0, [pc, #64]	; (8001b18 <parseAlarms+0x2f4>)
 8001ad8:	f7ff fbfa 	bl	80012d0 <Send>

	Send("Minimum day found: %d at location %d", days[location_days], location_days);
 8001adc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <parseAlarms+0x2e8>)
 8001ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001aec:	461a      	mov	r2, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <parseAlarms+0x2f8>)
 8001af0:	f7ff fbee 	bl	80012d0 <Send>
	//check day and month if they do not overlap


	Send("MInimum alarm: %d %d", min_day, min_month);
 8001af4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001af8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001afc:	4619      	mov	r1, r3
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <parseAlarms+0x2fc>)
 8001b00:	f7ff fbe6 	bl	80012d0 <Send>





}
 8001b04:	bf00      	nop
 8001b06:	3780      	adds	r7, #128	; 0x80
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002b4 	.word	0x200002b4
 8001b10:	20000948 	.word	0x20000948
 8001b14:	20000928 	.word	0x20000928
 8001b18:	0800c66c 	.word	0x0800c66c
 8001b1c:	0800c694 	.word	0x0800c694
 8001b20:	0800c6bc 	.word	0x0800c6bc

08001b24 <clearCommand>:



/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <clearCommand+0x18>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	2100      	movs	r1, #0
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <clearCommand+0x1c>)
 8001b34:	f008 fed0 	bl	800a8d8 <memset>

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000123 	.word	0x20000123
 8001b40:	200002d8 	.word	0x200002d8

08001b44 <clearData>:

void clearData(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	data_busy = 0;
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <clearData+0x18>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8001b4e:	227d      	movs	r2, #125	; 0x7d
 8001b50:	2100      	movs	r1, #0
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <clearData+0x1c>)
 8001b54:	f008 fec0 	bl	800a8d8 <memset>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000124 	.word	0x20000124
 8001b60:	200005a4 	.word	0x200005a4

08001b64 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 8001b76:	2300      	movs	r3, #0
 8001b78:	757b      	strb	r3, [r7, #21]



	//check if begining exists
	if(frame[0] == start_sign){
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <decodeFrame+0x158>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b24      	cmp	r3, #36	; 0x24
 8001b80:	d105      	bne.n	8001b8e <decodeFrame+0x2a>
		required_pass++;
 8001b82:	7d7b      	ldrb	r3, [r7, #21]
 8001b84:	3301      	adds	r3, #1
 8001b86:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8001b88:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <decodeFrame+0x158>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		//if char was received, consider it as first sign so the length should be + 1

	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <decodeFrame+0x15c>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <decodeFrame+0x158>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	2b23      	cmp	r3, #35	; 0x23
 8001b9c:	d109      	bne.n	8001bb2 <decodeFrame+0x4e>
		required_pass++;
 8001b9e:	7d7b      	ldrb	r3, [r7, #21]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 8001ba4:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <decodeFrame+0x15c>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a43      	ldr	r2, [pc, #268]	; (8001cbc <decodeFrame+0x158>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e013      	b.n	8001be0 <decodeFrame+0x7c>
		if(frame[i] == '='){
 8001bb8:	4a40      	ldr	r2, [pc, #256]	; (8001cbc <decodeFrame+0x158>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b3d      	cmp	r3, #61	; 0x3d
 8001bc2:	d10a      	bne.n	8001bda <decodeFrame+0x76>
			required_pass++;
 8001bc4:	7d7b      	ldrb	r3, [r7, #21]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <decodeFrame+0x15c>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	dbe4      	blt.n	8001bb8 <decodeFrame+0x54>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 8001bee:	7d7b      	ldrb	r3, [r7, #21]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d12b      	bne.n	8001c4c <decodeFrame+0xe8>
 8001bf4:	7dba      	ldrb	r2, [r7, #22]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d027      	beq.n	8001c4c <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e020      	b.n	8001c44 <decodeFrame+0xe0>
			//prevent memory leaks
			if(command_busy >= command_size){
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <decodeFrame+0x160>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da09      	bge.n	8001c22 <decodeFrame+0xbe>
				command_busy = 0;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <decodeFrame+0x160>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	2100      	movs	r1, #0
 8001c18:	482b      	ldr	r0, [pc, #172]	; (8001cc8 <decodeFrame+0x164>)
 8001c1a:	f008 fe5d 	bl	800a8d8 <memset>
				i = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <decodeFrame+0x160>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	b2d1      	uxtb	r1, r2
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <decodeFrame+0x160>)
 8001c2e:	7011      	strb	r1, [r2, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <decodeFrame+0x158>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <decodeFrame+0x164>)
 8001c3c:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	7dbb      	ldrb	r3, [r7, #22]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	ddda      	ble.n	8001c02 <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8001c4c:	7d7b      	ldrb	r3, [r7, #21]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d130      	bne.n	8001cb4 <decodeFrame+0x150>
 8001c52:	7dfa      	ldrb	r2, [r7, #23]
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <decodeFrame+0x15c>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d029      	beq.n	8001cb4 <decodeFrame+0x150>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	e01f      	b.n	8001ca6 <decodeFrame+0x142>
			//prevent memory leaks
			if(data_busy >= data_size){
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <decodeFrame+0x168>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b7c      	cmp	r3, #124	; 0x7c
 8001c6e:	d909      	bls.n	8001c84 <decodeFrame+0x120>
				data_busy = 0;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <decodeFrame+0x168>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 8001c76:	227d      	movs	r2, #125	; 0x7d
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <decodeFrame+0x16c>)
 8001c7c:	f008 fe2c 	bl	800a8d8 <memset>
				i = data_idx;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <decodeFrame+0x168>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	b2d1      	uxtb	r1, r2
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <decodeFrame+0x168>)
 8001c90:	7011      	strb	r1, [r2, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <decodeFrame+0x158>)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <decodeFrame+0x16c>)
 8001c9e:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <decodeFrame+0x15c>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	dbd8      	blt.n	8001c66 <decodeFrame+0x102>
		}

	}


}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000624 	.word	0x20000624
 8001cc0:	20000120 	.word	0x20000120
 8001cc4:	20000123 	.word	0x20000123
 8001cc8:	200002d8 	.word	0x200002d8
 8001ccc:	20000124 	.word	0x20000124
 8001cd0:	200005a4 	.word	0x200005a4

08001cd4 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <downloadFrame+0xf0>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <downloadFrame+0xf4>)
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <downloadFrame+0xf0>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <downloadFrame+0xf0>)
 8001cf4:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <downloadFrame+0xf0>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d00:	d302      	bcc.n	8001d08 <downloadFrame+0x34>
		Rx_busy = 0;
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <downloadFrame+0xf0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b24      	cmp	r3, #36	; 0x24
 8001d0c:	d10f      	bne.n	8001d2e <downloadFrame+0x5a>
			memset(frame, 0x00, FRAME_SIZE); //reset frame #
 8001d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d12:	2100      	movs	r1, #0
 8001d14:	482d      	ldr	r0, [pc, #180]	; (8001dcc <downloadFrame+0xf8>)
 8001d16:	f008 fddf 	bl	800a8d8 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <downloadFrame+0xfc>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]

			Frame_busy = 0;
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <downloadFrame+0x100>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	801a      	strh	r2, [r3, #0]
			frameLength = 1; //set frame length to one cos $ is already in the frame
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <downloadFrame+0x104>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	e00a      	b.n	8001d44 <downloadFrame+0x70>

		} else if(frame_found == 1){ //frame length if more than one start sign is found
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <downloadFrame+0xfc>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <downloadFrame+0x70>

			frameLength++;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <downloadFrame+0x104>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <downloadFrame+0x104>)
 8001d42:	801a      	strh	r2, [r3, #0]

		}

		//if frame found start downloading frame
		//start downloading the frame
		if(frame_found == 1){
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <downloadFrame+0xfc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10a      	bne.n	8001d62 <downloadFrame+0x8e>

				//copy a frame to analyze it
					frame[Frame_busy++] = byte; //download chars
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <downloadFrame+0x100>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	b291      	uxth	r1, r2
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <downloadFrame+0x100>)
 8001d58:	8011      	strh	r1, [r2, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <downloadFrame+0xf8>)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	5453      	strb	r3, [r2, r1]

			}

		//check if frame is not too long
		if(frameLength > FRAME_SIZE){
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <downloadFrame+0x104>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d911      	bls.n	8001d92 <downloadFrame+0xbe>
			memset(frame, 0x00, FRAME_SIZE);
 8001d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d72:	2100      	movs	r1, #0
 8001d74:	4815      	ldr	r0, [pc, #84]	; (8001dcc <downloadFrame+0xf8>)
 8001d76:	f008 fdaf 	bl	800a8d8 <memset>
			Frame_busy = 0;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <downloadFrame+0x100>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <downloadFrame+0x104>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <downloadFrame+0xfc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f000 f86b 	bl	8001e68 <sendFail>
		}


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b23      	cmp	r3, #35	; 0x23
 8001d96:	d110      	bne.n	8001dba <downloadFrame+0xe6>
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <downloadFrame+0xfc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10c      	bne.n	8001dba <downloadFrame+0xe6>
			frame_found = 0; //stop downloading chars
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <downloadFrame+0xfc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <downloadFrame+0x100>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]

		  //if frame is received, analyze it
			decodeFrame();
 8001dac:	f7ff feda 	bl	8001b64 <decodeFrame>
			parseCommand();
 8001db0:	f7ff fbc6 	bl	8001540 <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <downloadFrame+0x104>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	801a      	strh	r2, [r3, #0]

		 }



}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000118 	.word	0x20000118
 8001dc8:	20000728 	.word	0x20000728
 8001dcc:	20000624 	.word	0x20000624
 8001dd0:	20000122 	.word	0x20000122
 8001dd4:	2000011e 	.word	0x2000011e
 8001dd8:	20000120 	.word	0x20000120

08001ddc <buttonHandler>:





void buttonHandler() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de4:	481c      	ldr	r0, [pc, #112]	; (8001e58 <buttonHandler+0x7c>)
 8001de6:	f001 f9d1 	bl	800318c <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <buttonHandler+0x80>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <buttonHandler+0x80>)
 8001e02:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <buttonHandler+0x84>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <buttonHandler+0x88>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8001e10:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e14:	f000 fd66 	bl	80028e4 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <buttonHandler+0x80>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10c      	bne.n	8001e3a <buttonHandler+0x5e>
			  if(x1hz == 1){
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <buttonHandler+0x84>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d114      	bne.n	8001e52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <buttonHandler+0x7c>)
 8001e2e:	f001 fa03 	bl	8003238 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <buttonHandler+0x84>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001e38:	e00b      	b.n	8001e52 <buttonHandler+0x76>
			  if(x4hz == 1){
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <buttonHandler+0x88>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <buttonHandler+0x7c>)
 8001e48:	f001 f9f6 	bl	8003238 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <buttonHandler+0x88>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	20000114 	.word	0x20000114
 8001e60:	20000112 	.word	0x20000112
 8001e64:	20000113 	.word	0x20000113

08001e68 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <sendFail+0x1c>)
 8001e78:	f7ff fa2a 	bl	80012d0 <Send>

}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	0800c6d4 	.word	0x0800c6d4

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 8001e8e:	f7ff f9f7 	bl	8001280 <UART_init>
	FLASH_init();
 8001e92:	f7fe fca9 	bl	80007e8 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e96:	f000 fcbf 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9a:	f000 f8ab 	bl	8001ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9e:	f7fe fd9f 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ea2:	f000 fc15 	bl	80026d0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001ea6:	f000 fb63 	bl	8002570 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001eaa:	f000 fb99 	bl	80025e0 <MX_TIM7_Init>

  MX_I2C1_Init();
 8001eae:	f7ff f8b3 	bl	8001018 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	483e      	ldr	r0, [pc, #248]	; (8001fb0 <main+0x128>)
 8001eb6:	f006 fb5d 	bl	8008574 <HAL_RTCEx_BKUPRead>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d001      	beq.n	8001ec8 <main+0x40>
	  MX_RTC_Init();
 8001ec4:	f000 f90e 	bl	80020e4 <MX_RTC_Init>
  }
  Alarms_init();
 8001ec8:	f7fe fa14 	bl	80002f4 <Alarms_init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001ecc:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <main+0x128>)
 8001ece:	f006 fab3 	bl	8008438 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2500 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f640 11c3 	movw	r1, #2499	; 0x9c3
 8001ed8:	4835      	ldr	r0, [pc, #212]	; (8001fb0 <main+0x128>)
 8001eda:	f006 f9d7 	bl	800828c <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <main+0x12c>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <main+0x130>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	4833      	ldr	r0, [pc, #204]	; (8001fbc <main+0x134>)
 8001ef0:	f007 f954 	bl	800919c <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 8001ef4:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <main+0x138>)
 8001ef6:	f7ff f9eb 	bl	80012d0 <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001efa:	4832      	ldr	r0, [pc, #200]	; (8001fc4 <main+0x13c>)
 8001efc:	f006 fc46 	bl	800878c <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <main+0x13c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <main+0x140>)
 8001f08:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <main+0x144>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d116      	bne.n	8001f42 <main+0xba>
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <main+0x148>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <main+0xba>
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <main+0x14c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <main+0xba>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <main+0x14c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <main+0x150>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <main+0x154>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f7fe facd 	bl	80004dc <displayHour>
	   }


	 buttonHandler();
 8001f42:	f7ff ff4b 	bl	8001ddc <buttonHandler>


	 while(uart_ready()){
 8001f46:	e001      	b.n	8001f4c <main+0xc4>

		 downloadFrame();
 8001f48:	f7ff fec4 	bl	8001cd4 <downloadFrame>
	 while(uart_ready()){
 8001f4c:	f7ff fab6 	bl	80014bc <uart_ready>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f8      	bne.n	8001f48 <main+0xc0>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <main+0x158>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <main+0xde>
		 handleBlinkCommand();
 8001f60:	f7ff f952 	bl	8001208 <handleBlinkCommand>
 8001f64:	e018      	b.n	8001f98 <main+0x110>
	 } else if(blink_mode == 2){
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <main+0x158>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d113      	bne.n	8001f98 <main+0x110>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <main+0x13c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <main+0x140>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <main+0x15c>)
 8001f7e:	8812      	ldrh	r2, [r2, #0]
 8001f80:	b292      	uxth	r2, r2
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d308      	bcc.n	8001f98 <main+0x110>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <main+0x160>)
 8001f8a:	f001 f955 	bl	8003238 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <main+0x13c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <main+0x140>)
 8001f96:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <main+0x164>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d1b3      	bne.n	8001f0a <main+0x82>


		 delayMs(delayTime);
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <main+0x168>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f915 	bl	80011d8 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001fae:	e7ac      	b.n	8001f0a <main+0x82>
 8001fb0:	20000584 	.word	0x20000584
 8001fb4:	20000116 	.word	0x20000116
 8001fb8:	20000728 	.word	0x20000728
 8001fbc:	20000a04 	.word	0x20000a04
 8001fc0:	0800c6e0 	.word	0x0800c6e0
 8001fc4:	2000096c 	.word	0x2000096c
 8001fc8:	20000150 	.word	0x20000150
 8001fcc:	20000078 	.word	0x20000078
 8001fd0:	20000125 	.word	0x20000125
 8001fd4:	20000140 	.word	0x20000140
 8001fd8:	20000141 	.word	0x20000141
 8001fdc:	20000142 	.word	0x20000142
 8001fe0:	2000014b 	.word	0x2000014b
 8001fe4:	20000380 	.word	0x20000380
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	20000154 	.word	0x20000154
 8001ff0:	20000156 	.word	0x20000156

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0a6      	sub	sp, #152	; 0x98
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ffe:	2228      	movs	r2, #40	; 0x28
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f008 fc68 	bl	800a8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2258      	movs	r2, #88	; 0x58
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f008 fc5a 	bl	800a8d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002024:	230a      	movs	r3, #10
 8002026:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002028:	2301      	movs	r3, #1
 800202a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202c:	2310      	movs	r3, #16
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002032:	2301      	movs	r3, #1
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002038:	2302      	movs	r3, #2
 800203a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800203e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002046:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800204a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002054:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f90f 	bl	800527c <HAL_RCC_OscConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002064:	f000 f82e 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002068:	230f      	movs	r3, #15
 800206a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206c:	2302      	movs	r3, #2
 800206e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800207e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f004 f96b 	bl	8006360 <HAL_RCC_ClockConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002090:	f000 f818 	bl	80020c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <SystemClock_Config+0xcc>)
 8002096:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 fc33 	bl	8006914 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020b4:	f000 f806 	bl	80020c4 <Error_Handler>
  }
}
 80020b8:	bf00      	nop
 80020ba:	3798      	adds	r7, #152	; 0x98
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	00010022 	.word	0x00010022

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>

080020ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b090      	sub	sp, #64	; 0x40
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80020fe:	463b      	mov	r3, r7
 8002100:	2228      	movs	r2, #40	; 0x28
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f008 fbe7 	bl	800a8d8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800210a:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <MX_RTC_Init+0x160>)
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <MX_RTC_Init+0x164>)
 800210e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <MX_RTC_Init+0x160>)
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <MX_RTC_Init+0x160>)
 8002118:	227f      	movs	r2, #127	; 0x7f
 800211a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <MX_RTC_Init+0x160>)
 800211e:	22ff      	movs	r2, #255	; 0xff
 8002120:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <MX_RTC_Init+0x160>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <MX_RTC_Init+0x160>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800212e:	4b45      	ldr	r3, [pc, #276]	; (8002244 <MX_RTC_Init+0x160>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002134:	4843      	ldr	r0, [pc, #268]	; (8002244 <MX_RTC_Init+0x160>)
 8002136:	f004 ffe5 	bl	8007104 <HAL_RTC_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002140:	f7ff ffc0 	bl	80020c4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */


  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32f2){
 8002144:	2101      	movs	r1, #1
 8002146:	483f      	ldr	r0, [pc, #252]	; (8002244 <MX_RTC_Init+0x160>)
 8002148:	f006 fa14 	bl	8008574 <HAL_RTCEx_BKUPRead>
 800214c:	4603      	mov	r3, r0
 800214e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002152:	4293      	cmp	r3, r2
 8002154:	d072      	beq.n	800223c <MX_RTC_Init+0x158>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8002156:	2317      	movs	r3, #23
 8002158:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 59;
 800215c:	233b      	movs	r3, #59	; 0x3b
 800215e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 55;
 8002162:	2337      	movs	r3, #55	; 0x37
 8002164:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002168:	2300      	movs	r3, #0
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	4832      	ldr	r0, [pc, #200]	; (8002244 <MX_RTC_Init+0x160>)
 800217a:	f005 f8b7 	bl	80072ec <HAL_RTC_SetTime>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002184:	f7ff ff9e 	bl	80020c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002188:	2303      	movs	r3, #3
 800218a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_FEBRUARY;
 800218e:	2302      	movs	r3, #2
 8002190:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 15;
 8002194:	230f      	movs	r3, #15
 8002196:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 800219a:	2316      	movs	r3, #22
 800219c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80021a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	4826      	ldr	r0, [pc, #152]	; (8002244 <MX_RTC_Init+0x160>)
 80021aa:	f005 fa77 	bl	800769c <HAL_RTC_SetDate>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 80021b4:	f7ff ff86 	bl	80020c4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 13;
 80021b8:	230d      	movs	r3, #13
 80021ba:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 20;
 80021bc:	2314      	movs	r3, #20
 80021be:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 30;
 80021c0:	231e      	movs	r3, #30
 80021c2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 13;
 80021dc:	230d      	movs	r3, #13
 80021de:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4815      	ldr	r0, [pc, #84]	; (8002244 <MX_RTC_Init+0x160>)
 80021f0:	f005 fbe0 	bl	80079b4 <HAL_RTC_SetAlarm_IT>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 80021fa:	f7ff ff63 	bl	80020c4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <MX_RTC_Init+0x160>)
 800220c:	f005 fbd2 	bl	80079b4 <HAL_RTC_SetAlarm_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002216:	f7ff ff55 	bl	80020c4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <MX_RTC_Init+0x160>)
 8002220:	f006 f834 	bl	800828c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800222a:	f7ff ff4b 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //write backup registry
  //HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800222e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002232:	2101      	movs	r1, #1
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_RTC_Init+0x160>)
 8002236:	f006 f97b 	bl	8008530 <HAL_RTCEx_BKUPWrite>
 800223a:	e000      	b.n	800223e <MX_RTC_Init+0x15a>
	  return;
 800223c:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 800223e:	3740      	adds	r7, #64	; 0x40
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000584 	.word	0x20000584
 8002248:	40002800 	.word	0x40002800

0800224c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <HAL_RTC_MspInit+0x64>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d123      	bne.n	80022a6 <HAL_RTC_MspInit+0x5a>
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RTC_MspInit+0x68>)
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	461a      	mov	r2, r3
 800227e:	2301      	movs	r3, #1
 8002280:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2003      	movs	r0, #3
 8002288:	f000 fc40 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 fc69 	bl	8002b64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2029      	movs	r0, #41	; 0x29
 8002298:	f000 fc38 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800229c:	2029      	movs	r0, #41	; 0x29
 800229e:	f000 fc61 	bl	8002b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

    HAL_PWR_EnableBkUpAccess();
 80022a2:	f002 ffdb 	bl	800525c <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40002800 	.word	0x40002800
 80022b4:	10908100 	.word	0x10908100

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x44>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_MspInit+0x44>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6193      	str	r3, [r2, #24]
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_MspInit+0x44>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_MspInit+0x44>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_MspInit+0x44>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	61d3      	str	r3, [r2, #28]
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_MspInit+0x44>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ee:	2007      	movs	r0, #7
 80022f0:	f000 fbec 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <NMI_Handler+0x4>

08002306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler+0x4>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <UsageFault_Handler+0x4>

0800231e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 800234c:	f7fe fef0 	bl	8001130 <delay_1hz>
	delay_4hz();
 8002350:	f7fe ff0a 	bl	8001168 <delay_4hz>

	if(blink_mode == 1){
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <SysTick_Handler+0x2c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <SysTick_Handler+0x22>
		led_delay++;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SysTick_Handler+0x30>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	3301      	adds	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Handler+0x30>)
 8002368:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800236a:	f000 fa9b 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000014b 	.word	0x2000014b
 8002378:	20000158 	.word	0x20000158

0800237c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <RTC_WKUP_IRQHandler+0x10>)
 8002382:	f006 f8b1 	bl	80084e8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000584 	.word	0x20000584

08002390 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <I2C1_EV_IRQHandler+0x10>)
 8002396:	f001 fa7d 	bl	8003894 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000268 	.word	0x20000268

080023a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <USART2_IRQHandler+0x10>)
 80023aa:	f006 ff45 	bl	8009238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000a04 	.word	0x20000a04

080023b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023c0:	f000 ff62 	bl	8003288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <RTC_Alarm_IRQHandler+0x10>)
 80023ce:	f005 fe87 	bl	80080e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000584 	.word	0x20000584

080023dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <TIM6_DAC_IRQHandler+0x10>)
 80023e2:	f006 fa7f 	bl	80088e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000096c 	.word	0x2000096c

080023f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM7_IRQHandler+0x10>)
 80023f6:	f006 fa75 	bl	80088e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200009b8 	.word	0x200009b8

08002404 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00a      	b.n	800242c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002416:	f3af 8000 	nop.w
 800241a:	4601      	mov	r1, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf0      	blt.n	8002416 <_read+0x12>
	}

return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e009      	b.n	8002464 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf1      	blt.n	8002450 <_write+0x12>
	}
	return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_close>:

int _close(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	return -1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249e:	605a      	str	r2, [r3, #4]
	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_isatty>:

int _isatty(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return 1;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <_sbrk+0x5c>)
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <_sbrk+0x60>)
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x64>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <_sbrk+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d207      	bcs.n	8002520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002510:	f008 f9b8 	bl	800a884 <__errno>
 8002514:	4603      	mov	r3, r0
 8002516:	220c      	movs	r2, #12
 8002518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e009      	b.n	8002534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_sbrk+0x64>)
 8002530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20010000 	.word	0x20010000
 8002540:	00000400 	.word	0x00000400
 8002544:	2000015c 	.word	0x2000015c
 8002548:	20000aa0 	.word	0x20000aa0

0800254c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <SystemInit+0x20>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <SystemInit+0x20>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_TIM6_Init+0x68>)
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <MX_TIM6_Init+0x6c>)
 8002584:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_TIM6_Init+0x68>)
 8002588:	f242 720f 	movw	r2, #9999	; 0x270f
 800258c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <MX_TIM6_Init+0x68>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <MX_TIM6_Init+0x68>)
 8002596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_TIM6_Init+0x68>)
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <MX_TIM6_Init+0x68>)
 80025a4:	f006 f810 	bl	80085c8 <HAL_TIM_Base_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025ae:	f7ff fd89 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <MX_TIM6_Init+0x68>)
 80025c0:	f006 fb80 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80025ca:	f7ff fd7b 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000096c 	.word	0x2000096c
 80025dc:	40001000 	.word	0x40001000

080025e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_TIM7_Init+0x64>)
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_TIM7_Init+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_TIM7_Init+0x64>)
 80025f8:	2247      	movs	r2, #71	; 0x47
 80025fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_TIM7_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_TIM7_Init+0x64>)
 8002604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002608:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_TIM7_Init+0x64>)
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_TIM7_Init+0x64>)
 8002612:	f005 ffd9 	bl	80085c8 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800261c:	f7ff fd52 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_TIM7_Init+0x64>)
 800262e:	f006 fb49 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002638:	f7ff fd44 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200009b8 	.word	0x200009b8
 8002648:	40001400 	.word	0x40001400

0800264c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_TIM_Base_MspInit+0x78>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d114      	bne.n	8002688 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2036      	movs	r0, #54	; 0x36
 800267c:	f000 fa46 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002680:	2036      	movs	r0, #54	; 0x36
 8002682:	f000 fa6f 	bl	8002b64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002686:	e018      	b.n	80026ba <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_TIM_Base_MspInit+0x80>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d113      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_TIM_Base_MspInit+0x7c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2037      	movs	r0, #55	; 0x37
 80026b0:	f000 fa2c 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026b4:	2037      	movs	r0, #55	; 0x37
 80026b6:	f000 fa55 	bl	8002b64 <HAL_NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40001000 	.word	0x40001000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40001400 	.word	0x40001400

080026d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <MX_USART2_UART_Init+0x5c>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_USART2_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_USART2_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_USART2_UART_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_USART2_UART_Init+0x58>)
 800270e:	2200      	movs	r2, #0
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_USART2_UART_Init+0x58>)
 8002714:	f006 fc42 	bl	8008f9c <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800271e:	f7ff fcd1 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000a04 	.word	0x20000a04
 800272c:	40004400 	.word	0x40004400

08002730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_UART_MspInit+0x8c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d130      	bne.n	80027b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_UART_MspInit+0x90>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_UART_MspInit+0x90>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	61d3      	str	r3, [r2, #28]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_UART_MspInit+0x90>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_UART_MspInit+0x90>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_UART_MspInit+0x90>)
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	6153      	str	r3, [r2, #20]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_UART_MspInit+0x90>)
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002782:	230c      	movs	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002792:	2307      	movs	r3, #7
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a0:	f000 fa88 	bl	8002cb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	2026      	movs	r0, #38	; 0x26
 80027aa:	f000 f9af 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ae:	2026      	movs	r0, #38	; 0x26
 80027b0:	f000 f9d8 	bl	8002b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40004400 	.word	0x40004400
 80027c0:	40021000 	.word	0x40021000

080027c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ca:	490e      	ldr	r1, [pc, #56]	; (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e0:	4c0b      	ldr	r4, [pc, #44]	; (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ee:	f7ff fead 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027f2:	f008 f84d 	bl	800a890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027f6:	f7ff fb47 	bl	8001e88 <main>

080027fa <LoopForever>:

LoopForever:
    b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002808:	0800cba4 	.word	0x0800cba4
  ldr r2, =_sbss
 800280c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002810:	20000a9c 	.word	0x20000a9c

08002814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC1_2_IRQHandler>
	...

08002818 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_Init+0x28>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_Init+0x28>)
 8002822:	f043 0310 	orr.w	r3, r3, #16
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 f94f 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	2000      	movs	r0, #0
 8002830:	f000 f808 	bl	8002844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fd40 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000

08002844 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x54>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_InitTick+0x58>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f996 	bl	8002b94 <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00e      	b.n	8002890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d80a      	bhi.n	800288e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f000 f944 	bl	8002b0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <HAL_InitTick+0x5c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000007c 	.word	0x2000007c
 800289c:	20000084 	.word	0x20000084
 80028a0:	20000080 	.word	0x20000080

080028a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000084 	.word	0x20000084
 80028c8:	20000a88 	.word	0x20000a88

080028cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000a88 	.word	0x20000a88

080028e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000084 	.word	0x20000084

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d00f      	beq.n	8002afa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d00c      	beq.n	8002afa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d009      	beq.n	8002afa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d006      	beq.n	8002afa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d003      	beq.n	8002afa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002af2:	21ac      	movs	r1, #172	; 0xac
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002af6:	f7ff faea 	bl	80020ce <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff16 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	0800c700 	.word	0x0800c700

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d903      	bls.n	8002b2c <HAL_NVIC_SetPriority+0x20>
 8002b24:	21c4      	movs	r1, #196	; 0xc4
 8002b26:	480e      	ldr	r0, [pc, #56]	; (8002b60 <HAL_NVIC_SetPriority+0x54>)
 8002b28:	f7ff fad1 	bl	80020ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	d903      	bls.n	8002b3a <HAL_NVIC_SetPriority+0x2e>
 8002b32:	21c5      	movs	r1, #197	; 0xc5
 8002b34:	480a      	ldr	r0, [pc, #40]	; (8002b60 <HAL_NVIC_SetPriority+0x54>)
 8002b36:	f7ff faca 	bl	80020ce <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3a:	f7ff ff1b 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002b3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	6978      	ldr	r0, [r7, #20]
 8002b46:	f7ff ff6b 	bl	8002a20 <NVIC_EncodePriority>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff3a 	bl	80029cc <__NVIC_SetPriority>
}
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	0800c700 	.word	0x0800c700

08002b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da03      	bge.n	8002b7e <HAL_NVIC_EnableIRQ+0x1a>
 8002b76:	21d8      	movs	r1, #216	; 0xd8
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <HAL_NVIC_EnableIRQ+0x2c>)
 8002b7a:	f7ff faa8 	bl	80020ce <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff04 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800c700 	.word	0x0800c700

08002b94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff73 	bl	8002a88 <SysTick_Config>
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d008      	beq.n	8002bd0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e020      	b.n	8002c12 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 020e 	bic.w	r2, r2, #14
 8002bde:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d005      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2204      	movs	r2, #4
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e027      	b.n	8002c90 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 020e 	bic.w	r2, r2, #14
 8002c4e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
    } 
  }
  return status;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a3a      	ldr	r2, [pc, #232]	; (8002db8 <HAL_GPIO_Init+0x104>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <HAL_GPIO_Init+0x108>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a38      	ldr	r2, [pc, #224]	; (8002dc0 <HAL_GPIO_Init+0x10c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <HAL_GPIO_Init+0x110>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <HAL_GPIO_Init+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x118>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_GPIO_Init+0x11c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x56>
 8002d02:	21b2      	movs	r1, #178	; 0xb2
 8002d04:	4833      	ldr	r0, [pc, #204]	; (8002dd4 <HAL_GPIO_Init+0x120>)
 8002d06:	f7ff f9e2 	bl	80020ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_GPIO_Init+0x6c>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x74>
 8002d20:	21b3      	movs	r1, #179	; 0xb3
 8002d22:	482c      	ldr	r0, [pc, #176]	; (8002dd4 <HAL_GPIO_Init+0x120>)
 8002d24:	f7ff f9d3 	bl	80020ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 821c 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	f000 8217 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b11      	cmp	r3, #17
 8002d42:	f000 8212 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	f000 820d 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	f000 8208 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002d62:	f000 8202 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002d6e:	f000 81fc 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002d7a:	f000 81f6 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002d86:	f000 81f0 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002d92:	f000 81ea 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002d9e:	f000 81e4 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	f000 81df 	beq.w	800316a <HAL_GPIO_Init+0x4b6>
 8002dac:	21b4      	movs	r1, #180	; 0xb4
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <HAL_GPIO_Init+0x120>)
 8002db0:	f7ff f98d 	bl	80020ce <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db4:	e1d9      	b.n	800316a <HAL_GPIO_Init+0x4b6>
 8002db6:	bf00      	nop
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	48001000 	.word	0x48001000
 8002dc8:	48001400 	.word	0x48001400
 8002dcc:	48001800 	.word	0x48001800
 8002dd0:	48001c00 	.word	0x48001c00
 8002dd4:	0800c73c 	.word	0x0800c73c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 81ba 	beq.w	8003164 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d005      	beq.n	8002e08 <HAL_GPIO_Init+0x154>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d140      	bne.n	8002e8a <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_GPIO_Init+0x174>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d007      	beq.n	8002e28 <HAL_GPIO_Init+0x174>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x174>
 8002e20:	21c3      	movs	r1, #195	; 0xc3
 8002e22:	4894      	ldr	r0, [pc, #592]	; (8003074 <HAL_GPIO_Init+0x3c0>)
 8002e24:	f7ff f953 	bl	80020ce <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0201 	and.w	r2, r3, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d027      	beq.n	8002ee6 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_GPIO_Init+0x202>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_GPIO_Init+0x202>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x202>
 8002eae:	21d4      	movs	r1, #212	; 0xd4
 8002eb0:	4870      	ldr	r0, [pc, #448]	; (8003074 <HAL_GPIO_Init+0x3c0>)
 8002eb2:	f7ff f90c 	bl	80020ce <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d157      	bne.n	8002fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_GPIO_Init+0x3c4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01b      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_GPIO_Init+0x3c8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d017      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_GPIO_Init+0x3cc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_GPIO_Init+0x3d0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a5a      	ldr	r2, [pc, #360]	; (8003088 <HAL_GPIO_Init+0x3d4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a59      	ldr	r2, [pc, #356]	; (800308c <HAL_GPIO_Init+0x3d8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_GPIO_Init+0x3dc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
 8002f32:	21e2      	movs	r1, #226	; 0xe2
 8002f34:	484f      	ldr	r0, [pc, #316]	; (8003074 <HAL_GPIO_Init+0x3c0>)
 8002f36:	f7ff f8ca 	bl	80020ce <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d90b      	bls.n	8002f5a <HAL_GPIO_Init+0x2a6>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b0e      	cmp	r3, #14
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x2a6>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2a6>
 8002f52:	21e3      	movs	r1, #227	; 0xe3
 8002f54:	4847      	ldr	r0, [pc, #284]	; (8003074 <HAL_GPIO_Init+0x3c0>)
 8002f56:	f7ff f8ba 	bl	80020ce <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	08da      	lsrs	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	6939      	ldr	r1, [r7, #16]
 8002f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80c0 	beq.w	8003164 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_GPIO_Init+0x3e0>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <HAL_GPIO_Init+0x3e0>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_GPIO_Init+0x3e0>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x3e4>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003026:	d039      	beq.n	800309c <HAL_GPIO_Init+0x3e8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a13      	ldr	r2, [pc, #76]	; (8003078 <HAL_GPIO_Init+0x3c4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d01f      	beq.n	8003070 <HAL_GPIO_Init+0x3bc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_GPIO_Init+0x3c8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d019      	beq.n	800306c <HAL_GPIO_Init+0x3b8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a11      	ldr	r2, [pc, #68]	; (8003080 <HAL_GPIO_Init+0x3cc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_GPIO_Init+0x3b4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_GPIO_Init+0x3d0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00d      	beq.n	8003064 <HAL_GPIO_Init+0x3b0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_GPIO_Init+0x3d4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <HAL_GPIO_Init+0x3ac>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_GPIO_Init+0x3d8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_GPIO_Init+0x3a8>
 8003058:	2306      	movs	r3, #6
 800305a:	e020      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 800305c:	2307      	movs	r3, #7
 800305e:	e01e      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 8003060:	2305      	movs	r3, #5
 8003062:	e01c      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 8003064:	2304      	movs	r3, #4
 8003066:	e01a      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 8003068:	2303      	movs	r3, #3
 800306a:	e018      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 800306c:	2302      	movs	r3, #2
 800306e:	e016      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 8003070:	2301      	movs	r3, #1
 8003072:	e014      	b.n	800309e <HAL_GPIO_Init+0x3ea>
 8003074:	0800c73c 	.word	0x0800c73c
 8003078:	48000400 	.word	0x48000400
 800307c:	48000800 	.word	0x48000800
 8003080:	48000c00 	.word	0x48000c00
 8003084:	48001000 	.word	0x48001000
 8003088:	48001400 	.word	0x48001400
 800308c:	48001800 	.word	0x48001800
 8003090:	48001c00 	.word	0x48001c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000
 800309c:	2300      	movs	r3, #0
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ae:	4935      	ldr	r1, [pc, #212]	; (8003184 <HAL_GPIO_Init+0x4d0>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030bc:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_GPIO_Init+0x4d4>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f47f ae2f 	bne.w	8002dd8 <HAL_GPIO_Init+0x124>
  }
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40010000 	.word	0x40010000
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_GPIO_ReadPin+0x1c>
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_GPIO_ReadPin+0x26>
 80031a8:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80031ac:	4809      	ldr	r0, [pc, #36]	; (80031d4 <HAL_GPIO_ReadPin+0x48>)
 80031ae:	f7fe ff8e 	bl	80020ce <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e001      	b.n	80031c8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	0800c73c 	.word	0x0800c73c

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_GPIO_WritePin+0x20>
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_GPIO_WritePin+0x2a>
 80031f8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80031fc:	480d      	ldr	r0, [pc, #52]	; (8003234 <HAL_GPIO_WritePin+0x5c>)
 80031fe:	f7fe ff66 	bl	80020ce <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003202:	787b      	ldrb	r3, [r7, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_WritePin+0x40>
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d004      	beq.n	8003218 <HAL_GPIO_WritePin+0x40>
 800320e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003212:	4808      	ldr	r0, [pc, #32]	; (8003234 <HAL_GPIO_WritePin+0x5c>)
 8003214:	f7fe ff5b 	bl	80020ce <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003224:	e002      	b.n	800322c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0800c73c 	.word	0x0800c73c

08003238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_GPIO_TogglePin+0x1c>
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_GPIO_TogglePin+0x26>
 8003254:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003258:	480a      	ldr	r0, [pc, #40]	; (8003284 <HAL_GPIO_TogglePin+0x4c>)
 800325a:	f7fe ff38 	bl	80020ce <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003264:	887a      	ldrh	r2, [r7, #2]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43d9      	mvns	r1, r3
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	400b      	ands	r3, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	0800c73c 	.word	0x0800c73c

08003288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f806 	bl	80032b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e104      	b.n	80034ec <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_I2C_Init+0x224>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_I2C_Init+0x3a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a81      	ldr	r2, [pc, #516]	; (80034f8 <HAL_I2C_Init+0x228>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_I2C_Init+0x3a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a80      	ldr	r2, [pc, #512]	; (80034fc <HAL_I2C_Init+0x22c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_I2C_Init+0x3a>
 8003300:	f240 2113 	movw	r1, #531	; 0x213
 8003304:	487e      	ldr	r0, [pc, #504]	; (8003500 <HAL_I2C_Init+0x230>)
 8003306:	f7fe fee2 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d304      	bcc.n	800331e <HAL_I2C_Init+0x4e>
 8003314:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003318:	4879      	ldr	r0, [pc, #484]	; (8003500 <HAL_I2C_Init+0x230>)
 800331a:	f7fe fed8 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d008      	beq.n	8003338 <HAL_I2C_Init+0x68>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d004      	beq.n	8003338 <HAL_I2C_Init+0x68>
 800332e:	f240 2115 	movw	r1, #533	; 0x215
 8003332:	4873      	ldr	r0, [pc, #460]	; (8003500 <HAL_I2C_Init+0x230>)
 8003334:	f7fe fecb 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_I2C_Init+0x84>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003348:	d004      	beq.n	8003354 <HAL_I2C_Init+0x84>
 800334a:	f240 2116 	movw	r1, #534	; 0x216
 800334e:	486c      	ldr	r0, [pc, #432]	; (8003500 <HAL_I2C_Init+0x230>)
 8003350:	f7fe febd 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d904      	bls.n	8003366 <HAL_I2C_Init+0x96>
 800335c:	f240 2117 	movw	r1, #535	; 0x217
 8003360:	4867      	ldr	r0, [pc, #412]	; (8003500 <HAL_I2C_Init+0x230>)
 8003362:	f7fe feb4 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d01c      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d018      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d014      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d010      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d00c      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d008      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	d004      	beq.n	80033b0 <HAL_I2C_Init+0xe0>
 80033a6:	f44f 7106 	mov.w	r1, #536	; 0x218
 80033aa:	4855      	ldr	r0, [pc, #340]	; (8003500 <HAL_I2C_Init+0x230>)
 80033ac:	f7fe fe8f 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <HAL_I2C_Init+0xfc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c0:	d004      	beq.n	80033cc <HAL_I2C_Init+0xfc>
 80033c2:	f240 2119 	movw	r1, #537	; 0x219
 80033c6:	484e      	ldr	r0, [pc, #312]	; (8003500 <HAL_I2C_Init+0x230>)
 80033c8:	f7fe fe81 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HAL_I2C_Init+0x118>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033dc:	d004      	beq.n	80033e8 <HAL_I2C_Init+0x118>
 80033de:	f240 211a 	movw	r1, #538	; 0x21a
 80033e2:	4847      	ldr	r0, [pc, #284]	; (8003500 <HAL_I2C_Init+0x230>)
 80033e4:	f7fe fe73 	bl	80020ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd fe4b 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2224      	movs	r2, #36	; 0x24
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003426:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003436:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	e006      	b.n	800345e <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800345c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d104      	bne.n	8003470 <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800346e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800347e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003482:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003492:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69d9      	ldr	r1, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40005400 	.word	0x40005400
 80034f8:	40005800 	.word	0x40005800
 80034fc:	40007800 	.word	0x40007800
 8003500:	0800c778 	.word	0x0800c778

08003504 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d007      	beq.n	8003534 <HAL_I2C_Mem_Read+0x30>
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d004      	beq.n	8003534 <HAL_I2C_Mem_Read+0x30>
 800352a:	f640 11ca 	movw	r1, #2506	; 0x9ca
 800352e:	4886      	ldr	r0, [pc, #536]	; (8003748 <HAL_I2C_Mem_Read+0x244>)
 8003530:	f7fe fdcd 	bl	80020ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	f040 80fd 	bne.w	800373c <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_I2C_Mem_Read+0x4a>
 8003548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0f1      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_I2C_Mem_Read+0x64>
 8003564:	2302      	movs	r3, #2
 8003566:	e0ea      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003570:	f7ff f9ac 	bl	80028cc <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2201      	movs	r2, #1
 800357e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f001 fb27 	bl	8004bd6 <I2C_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0d5      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2222      	movs	r2, #34	; 0x22
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ba:	88f8      	ldrh	r0, [r7, #6]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	4603      	mov	r3, r0
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fe2c 	bl	8004228 <I2C_RequestMemoryRead>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0ad      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2bff      	cmp	r3, #255	; 0xff
 80035ea:	d90e      	bls.n	800360a <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	22ff      	movs	r2, #255	; 0xff
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	8979      	ldrh	r1, [r7, #10]
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <HAL_I2C_Mem_Read+0x248>)
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 fc1a 	bl	8004e3c <I2C_TransferConfig>
 8003608:	e00f      	b.n	800362a <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	b2da      	uxtb	r2, r3
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <HAL_I2C_Mem_Read+0x248>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f001 fc09 	bl	8004e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	2200      	movs	r2, #0
 8003632:	2104      	movs	r1, #4
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f001 face 	bl	8004bd6 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e07c      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d034      	beq.n	80036ea <HAL_I2C_Mem_Read+0x1e6>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d130      	bne.n	80036ea <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2200      	movs	r2, #0
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f001 fa9f 	bl	8004bd6 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e04d      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2bff      	cmp	r3, #255	; 0xff
 80036aa:	d90e      	bls.n	80036ca <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f001 fbba 	bl	8004e3c <I2C_TransferConfig>
 80036c8:	e00f      	b.n	80036ea <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f001 fba9 	bl	8004e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d19a      	bne.n	800362a <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f001 faec 	bl	8004cd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2220      	movs	r2, #32
 800370e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_I2C_Mem_Read+0x24c>)
 800371c:	400b      	ands	r3, r1
 800371e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	0800c778 	.word	0x0800c778
 800374c:	80002400 	.word	0x80002400
 8003750:	fe00e800 	.word	0xfe00e800

08003754 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d007      	beq.n	8003784 <HAL_I2C_Mem_Write_IT+0x30>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d004      	beq.n	8003784 <HAL_I2C_Mem_Write_IT+0x30>
 800377a:	f640 2154 	movw	r1, #2644	; 0xa54
 800377e:	4842      	ldr	r0, [pc, #264]	; (8003888 <HAL_I2C_Mem_Write_IT+0x134>)
 8003780:	f7fe fca5 	bl	80020ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b20      	cmp	r3, #32
 800378e:	d176      	bne.n	800387e <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_I2C_Mem_Write_IT+0x48>
 8003796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e06b      	b.n	8003880 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d101      	bne.n	80037bc <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	e061      	b.n	8003880 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Mem_Write_IT+0x76>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e05a      	b.n	8003880 <HAL_I2C_Mem_Write_IT+0x12c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d2:	f7ff f87b 	bl	80028cc <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2221      	movs	r2, #33	; 0x21
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_I2C_Mem_Write_IT+0x138>)
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_I2C_Mem_Write_IT+0x13c>)
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d906      	bls.n	800381e <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e007      	b.n	800382e <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382c:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800382e:	88f8      	ldrh	r0, [r7, #6]
 8003830:	893a      	ldrh	r2, [r7, #8]
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2319      	movs	r3, #25
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fc9e 	bl	8004180 <I2C_RequestMemoryWrite>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e014      	b.n	8003880 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	b2da      	uxtb	r2, r3
 800385c:	8979      	ldrh	r1, [r7, #10]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f001 fae9 	bl	8004e3c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003872:	2101      	movs	r1, #1
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 fb53 	bl	8004f20 <I2C_Enable_IRQ>

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	0800c778 	.word	0x0800c778
 800388c:	ffff0000 	.word	0xffff0000
 8003890:	08003985 	.word	0x08003985

08003894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
 8003924:	4613      	mov	r3, r2
 8003926:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <I2C_Master_ISR_IT+0x1e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e114      	b.n	8003bcc <I2C_Master_ISR_IT+0x248>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2210      	movs	r2, #16
 80039c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f001 f8bb 	bl	8004b52 <I2C_Flush_TXDR>
 80039dc:	e0e1      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a30:	e0b7      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01e      	beq.n	8003a7c <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a7a:	e092      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	09db      	lsrs	r3, r3, #7
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05d      	beq.n	8003b44 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d057      	beq.n	8003b44 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d040      	beq.n	8003b20 <I2C_Master_ISR_IT+0x19c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13c      	bne.n	8003b20 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d90e      	bls.n	8003adc <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8a79      	ldrh	r1, [r7, #18]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f001 f9b1 	bl	8004e3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ada:	e032      	b.n	8003b42 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aee:	d00b      	beq.n	8003b08 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	8a79      	ldrh	r1, [r7, #18]
 8003afc:	2000      	movs	r0, #0
 8003afe:	9000      	str	r0, [sp, #0]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f001 f99b 	bl	8004e3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b06:	e01c      	b.n	8003b42 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	8a79      	ldrh	r1, [r7, #18]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 f98f 	bl	8004e3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1e:	e010      	b.n	8003b42 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b2e:	d003      	beq.n	8003b38 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fc51 	bl	80043d8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b36:	e034      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b38:	2140      	movs	r1, #64	; 0x40
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 ff12 	bl	8004964 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b40:	e02f      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
 8003b42:	e02e      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d028      	beq.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d022      	beq.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b74:	d015      	beq.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7e:	d108      	bne.n	8003b92 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	e007      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fc20 	bl	80043d8 <I2C_ITMasterSeqCplt>
 8003b98:	e003      	b.n	8003ba2 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b9a:	2140      	movs	r1, #64	; 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fee1 	bl	8004964 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fca7 	bl	8004510 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <I2C_Slave_ISR_IT+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0ec      	b.n	8003dd2 <I2C_Slave_ISR_IT+0x1fe>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c18:	6939      	ldr	r1, [r7, #16]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fd42 	bl	80046a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d04d      	beq.n	8003cc8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d128      	bne.n	8003c94 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b28      	cmp	r3, #40	; 0x28
 8003c4c:	d108      	bne.n	8003c60 <I2C_Slave_ISR_IT+0x8c>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c54:	d104      	bne.n	8003c60 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c56:	6939      	ldr	r1, [r7, #16]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fe2d 	bl	80048b8 <I2C_ITListenCplt>
 8003c5e:	e032      	b.n	8003cc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b29      	cmp	r3, #41	; 0x29
 8003c6a:	d10e      	bne.n	8003c8a <I2C_Slave_ISR_IT+0xb6>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c72:	d00a      	beq.n	8003c8a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 ff68 	bl	8004b52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fbe5 	bl	8004452 <I2C_ITSlaveSeqCplt>
 8003c88:	e01d      	b.n	8003cc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c92:	e096      	b.n	8003dc2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d004      	beq.n	8003cb8 <I2C_Slave_ISR_IT+0xe4>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb4:	f040 8085 	bne.w	8003dc2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fe50 	bl	8004964 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cc4:	e07d      	b.n	8003dc2 <I2C_Slave_ISR_IT+0x1ee>
 8003cc6:	e07c      	b.n	8003dc2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d030      	beq.n	8003d36 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02a      	beq.n	8003d36 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d018      	beq.n	8003d1c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d14f      	bne.n	8003dc6 <I2C_Slave_ISR_IT+0x1f2>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d2c:	d04b      	beq.n	8003dc6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fb8f 	bl	8004452 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d34:	e047      	b.n	8003dc6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	08db      	lsrs	r3, r3, #3
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fabd 	bl	80042d0 <I2C_ITAddrCplt>
 8003d56:	e037      	b.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02b      	beq.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003daa:	e00d      	b.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db2:	d002      	beq.n	8003dba <I2C_Slave_ISR_IT+0x1e6>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb49 	bl	8004452 <I2C_ITSlaveSeqCplt>
 8003dc0:	e002      	b.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003dc6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b088      	sub	sp, #32
 8003dde:	af02      	add	r7, sp, #8
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <I2C_Master_ISR_DMA+0x1a>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e0e1      	b.n	8003fb8 <I2C_Master_ISR_DMA+0x1de>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d011      	beq.n	8003e38 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e28:	2120      	movs	r1, #32
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f001 f878 	bl	8004f20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fe8e 	bl	8004b52 <I2C_Flush_TXDR>
 8003e36:	e0ba      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d072      	beq.n	8003f2a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d06c      	beq.n	8003f2a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04e      	beq.n	8003f08 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e76:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2bff      	cmp	r3, #255	; 0xff
 8003e80:	d906      	bls.n	8003e90 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e010      	b.n	8003eb2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea2:	d003      	beq.n	8003eac <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e002      	b.n	8003eb2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	8a79      	ldrh	r1, [r7, #18]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 ffbb 	bl	8004e3c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b22      	cmp	r3, #34	; 0x22
 8003ee2:	d108      	bne.n	8003ef6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ef4:	e05b      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f06:	e052      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f16:	d003      	beq.n	8003f20 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa5d 	bl	80043d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003f1e:	e046      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f20:	2140      	movs	r1, #64	; 0x40
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fd1e 	bl	8004964 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f28:	e041      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	099b      	lsrs	r3, r3, #6
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d029      	beq.n	8003f8a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d023      	beq.n	8003f8a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d119      	bne.n	8003f80 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5a:	d027      	beq.n	8003fac <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f64:	d108      	bne.n	8003f78 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f74:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f76:	e019      	b.n	8003fac <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fa2d 	bl	80043d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f7e:	e015      	b.n	8003fac <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fcee 	bl	8004964 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f88:	e010      	b.n	8003fac <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fab3 	bl	8004510 <I2C_ITMasterCplt>
 8003faa:	e000      	b.n	8003fae <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003fac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <I2C_Slave_ISR_DMA+0x24>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0c9      	b.n	8004178 <I2C_Slave_ISR_DMA+0x1b8>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fb4c 	bl	80046a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 809a 	beq.w	800414e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8093 	beq.w	800414e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0b9b      	lsrs	r3, r3, #14
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0bdb      	lsrs	r3, r3, #15
 8004038:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800403c:	2b00      	cmp	r3, #0
 800403e:	d07f      	beq.n	8004140 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0bdb      	lsrs	r3, r3, #15
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004060:	2301      	movs	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0b9b      	lsrs	r3, r3, #14
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d128      	bne.n	80040e0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b28      	cmp	r3, #40	; 0x28
 8004098:	d108      	bne.n	80040ac <I2C_Slave_ISR_DMA+0xec>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a0:	d104      	bne.n	80040ac <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fc07 	bl	80048b8 <I2C_ITListenCplt>
 80040aa:	e048      	b.n	800413e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b29      	cmp	r3, #41	; 0x29
 80040b6:	d10e      	bne.n	80040d6 <I2C_Slave_ISR_DMA+0x116>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040be:	d00a      	beq.n	80040d6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2210      	movs	r2, #16
 80040c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fd42 	bl	8004b52 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f9bf 	bl	8004452 <I2C_ITSlaveSeqCplt>
 80040d4:	e033      	b.n	800413e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2210      	movs	r2, #16
 80040dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80040de:	e034      	b.n	800414a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2210      	movs	r2, #16
 80040e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <I2C_Slave_ISR_DMA+0x14a>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004108:	d11f      	bne.n	800414a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b21      	cmp	r3, #33	; 0x21
 800410e:	d002      	beq.n	8004116 <I2C_Slave_ISR_DMA+0x156>
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b29      	cmp	r3, #41	; 0x29
 8004114:	d103      	bne.n	800411e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2221      	movs	r2, #33	; 0x21
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
 800411c:	e008      	b.n	8004130 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b22      	cmp	r3, #34	; 0x22
 8004122:	d002      	beq.n	800412a <I2C_Slave_ISR_DMA+0x16a>
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b2a      	cmp	r3, #42	; 0x2a
 8004128:	d102      	bne.n	8004130 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2222      	movs	r2, #34	; 0x22
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	4619      	mov	r1, r3
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fc14 	bl	8004964 <I2C_ITError>
      if (treatdmanack == 1U)
 800413c:	e005      	b.n	800414a <I2C_Slave_ISR_DMA+0x18a>
 800413e:	e004      	b.n	800414a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2210      	movs	r2, #16
 8004146:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004148:	e011      	b.n	800416e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800414a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800414c:	e00f      	b.n	800416e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f8b1 	bl	80042d0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	4b20      	ldr	r3, [pc, #128]	; (8004224 <I2C_RequestMemoryWrite+0xa4>)
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fe47 	bl	8004e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fd4f 	bl	8004c56 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02c      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
 80041d2:	e015      	b.n	8004200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fd35 	bl	8004c56 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e012      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fce3 	bl	8004bd6 <I2C_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	80002000 	.word	0x80002000

08004228 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8979      	ldrh	r1, [r7, #10]
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <I2C_RequestMemoryRead+0xa4>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2300      	movs	r3, #0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fdf4 	bl	8004e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fcfc 	bl	8004c56 <I2C_WaitOnTXISFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e02c      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e015      	b.n	80042a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fce2 	bl	8004c56 <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e012      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fc90 	bl	8004bd6 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	80002000 	.word	0x80002000

080042d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042e6:	2b28      	cmp	r3, #40	; 0x28
 80042e8:	d16a      	bne.n	80043c0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b29b      	uxth	r3, r3
 8004304:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004308:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004316:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004324:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d138      	bne.n	80043a0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	09db      	lsrs	r3, r3, #7
 8004332:	b29a      	uxth	r2, r3
 8004334:	89bb      	ldrh	r3, [r7, #12]
 8004336:	4053      	eors	r3, r2
 8004338:	b29b      	uxth	r3, r3
 800433a:	f003 0306 	and.w	r3, r3, #6
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11c      	bne.n	800437c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	2b02      	cmp	r3, #2
 8004356:	d13b      	bne.n	80043d0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2208      	movs	r2, #8
 8004364:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800436e:	89ba      	ldrh	r2, [r7, #12]
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff facf 	bl	8003918 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800437a:	e029      	b.n	80043d0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fe2f 	bl	8004fe8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004392:	89ba      	ldrh	r2, [r7, #12]
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fabd 	bl	8003918 <HAL_I2C_AddrCallback>
}
 800439e:	e017      	b.n	80043d0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fe1f 	bl	8004fe8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043b2:	89ba      	ldrh	r2, [r7, #12]
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff faad 	bl	8003918 <HAL_I2C_AddrCallback>
}
 80043be:	e007      	b.n	80043d0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b21      	cmp	r3, #33	; 0x21
 80043f2:	d115      	bne.n	8004420 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2211      	movs	r2, #17
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004408:	2101      	movs	r1, #1
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fdec 	bl	8004fe8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fa55 	bl	80038c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441e:	e014      	b.n	800444a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2212      	movs	r2, #18
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004434:	2102      	movs	r1, #2
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fdd6 	bl	8004fe8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fa49 	bl	80038dc <HAL_I2C_MasterRxCpltCallback>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	0b9b      	lsrs	r3, r3, #14
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e00d      	b.n	80044a4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0bdb      	lsrs	r3, r3, #15
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b29      	cmp	r3, #41	; 0x29
 80044ae:	d112      	bne.n	80044d6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2228      	movs	r2, #40	; 0x28
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2221      	movs	r2, #33	; 0x21
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044be:	2101      	movs	r1, #1
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd91 	bl	8004fe8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fa0e 	bl	80038f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044d4:	e017      	b.n	8004506 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b2a      	cmp	r3, #42	; 0x2a
 80044e0:	d111      	bne.n	8004506 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2228      	movs	r2, #40	; 0x28
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2222      	movs	r2, #34	; 0x22
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044f0:	2102      	movs	r1, #2
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fd78 	bl	8004fe8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff f9ff 	bl	8003904 <HAL_I2C_SlaveRxCpltCallback>
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2220      	movs	r2, #32
 8004524:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b21      	cmp	r3, #33	; 0x21
 8004530:	d107      	bne.n	8004542 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004532:	2101      	movs	r1, #1
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fd57 	bl	8004fe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2211      	movs	r2, #17
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
 8004540:	e00c      	b.n	800455c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b22      	cmp	r3, #34	; 0x22
 800454c:	d106      	bne.n	800455c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800454e:	2102      	movs	r1, #2
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fd49 	bl	8004fe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2212      	movs	r2, #18
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6859      	ldr	r1, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b4d      	ldr	r3, [pc, #308]	; (800469c <I2C_ITMasterCplt+0x18c>)
 8004568:	400b      	ands	r3, r1
 800456a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <I2C_ITMasterCplt+0x190>)
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2210      	movs	r2, #16
 800458a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d10b      	bne.n	80045bc <I2C_ITMasterCplt+0xac>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80045ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fac8 	bl	8004b52 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d002      	beq.n	80045da <I2C_ITMasterCplt+0xca>
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9bf 	bl	8004964 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045e6:	e054      	b.n	8004692 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b21      	cmp	r3, #33	; 0x21
 80045f2:	d124      	bne.n	800463e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d10b      	bne.n	8004626 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc f8f8 	bl	8000814 <HAL_I2C_MemTxCpltCallback>
}
 8004624:	e035      	b.n	8004692 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff f946 	bl	80038c8 <HAL_I2C_MasterTxCpltCallback>
}
 800463c:	e029      	b.n	8004692 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b22      	cmp	r3, #34	; 0x22
 8004648:	d123      	bne.n	8004692 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10b      	bne.n	800467c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff f967 	bl	8003948 <HAL_I2C_MemRxCpltCallback>
}
 800467a:	e00a      	b.n	8004692 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff f925 	bl	80038dc <HAL_I2C_MasterRxCpltCallback>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fe00e800 	.word	0xfe00e800
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2220      	movs	r2, #32
 80046c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b21      	cmp	r3, #33	; 0x21
 80046ce:	d002      	beq.n	80046d6 <I2C_ITSlaveCplt+0x32>
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b29      	cmp	r3, #41	; 0x29
 80046d4:	d108      	bne.n	80046e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fc84 	bl	8004fe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2221      	movs	r2, #33	; 0x21
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
 80046e6:	e00d      	b.n	8004704 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	d002      	beq.n	80046f4 <I2C_ITSlaveCplt+0x50>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b2a      	cmp	r3, #42	; 0x2a
 80046f2:	d107      	bne.n	8004704 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046f4:	f248 0102 	movw	r1, #32770	; 0x8002
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fc75 	bl	8004fe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2222      	movs	r2, #34	; 0x22
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004712:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <I2C_ITSlaveCplt+0x20c>)
 8004720:	400b      	ands	r3, r1
 8004722:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa14 	bl	8004b52 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	0b9b      	lsrs	r3, r3, #14
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d013      	beq.n	800475e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d020      	beq.n	8004790 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800475c:	e018      	b.n	8004790 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	0bdb      	lsrs	r3, r3, #15
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004778:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f043 0204 	orr.w	r2, r3, #4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8a7 	bl	8004964 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b28      	cmp	r3, #40	; 0x28
 8004820:	d141      	bne.n	80048a6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f847 	bl	80048b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800482a:	e03c      	b.n	80048a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004834:	d014      	beq.n	8004860 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fe0b 	bl	8004452 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <I2C_ITSlaveCplt+0x210>)
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff f86b 	bl	8003934 <HAL_I2C_ListenCpltCallback>
}
 800485e:	e022      	b.n	80048a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d10e      	bne.n	800488a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff f83e 	bl	8003904 <HAL_I2C_SlaveRxCpltCallback>
}
 8004888:	e00d      	b.n	80048a6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff f825 	bl	80038f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80048a6:	bf00      	nop
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	fe00e800 	.word	0xfe00e800
 80048b4:	ffff0000 	.word	0xffff0000

080048b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <I2C_ITListenCplt+0xa8>)
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004936:	f248 0103 	movw	r1, #32771	; 0x8003
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb54 	bl	8004fe8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2210      	movs	r2, #16
 8004946:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fe ffef 	bl	8003934 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <I2C_ITError+0x194>)
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d005      	beq.n	80049a8 <I2C_ITError+0x44>
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b29      	cmp	r3, #41	; 0x29
 80049a0:	d002      	beq.n	80049a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b2a      	cmp	r3, #42	; 0x2a
 80049a6:	d10b      	bne.n	80049c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049a8:	2103      	movs	r1, #3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fb1c 	bl	8004fe8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2228      	movs	r2, #40	; 0x28
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a50      	ldr	r2, [pc, #320]	; (8004afc <I2C_ITError+0x198>)
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34
 80049be:	e011      	b.n	80049e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fb0f 	bl	8004fe8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b60      	cmp	r3, #96	; 0x60
 80049d4:	d003      	beq.n	80049de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d039      	beq.n	8004a66 <I2C_ITError+0x102>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b11      	cmp	r3, #17
 80049f6:	d002      	beq.n	80049fe <I2C_ITError+0x9a>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b21      	cmp	r3, #33	; 0x21
 80049fc:	d133      	bne.n	8004a66 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a0c:	d107      	bne.n	8004a1e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f939 	bl	8002c9a <HAL_DMA_GetState>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d017      	beq.n	8004a5e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4a33      	ldr	r2, [pc, #204]	; (8004b00 <I2C_ITError+0x19c>)
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f8eb 	bl	8002c1e <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d04d      	beq.n	8004aea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5c:	e045      	b.n	8004aea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f850 	bl	8004b04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a64:	e041      	b.n	8004aea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d039      	beq.n	8004ae2 <I2C_ITError+0x17e>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d002      	beq.n	8004a7a <I2C_ITError+0x116>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b22      	cmp	r3, #34	; 0x22
 8004a78:	d133      	bne.n	8004ae2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d107      	bne.n	8004a9a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a98:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe f8fb 	bl	8002c9a <HAL_DMA_GetState>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d017      	beq.n	8004ada <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <I2C_ITError+0x19c>)
 8004ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe f8ad 	bl	8002c1e <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad8:	e009      	b.n	8004aee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f812 	bl	8004b04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae0:	e005      	b.n	8004aee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f80e 	bl	8004b04 <I2C_TreatErrorCallback>
  }
}
 8004ae8:	e002      	b.n	8004af0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aee:	bf00      	nop
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	ffff0000 	.word	0xffff0000
 8004afc:	08003bd5 	.word	0x08003bd5
 8004b00:	08004b9b 	.word	0x08004b9b

08004b04 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d10e      	bne.n	8004b36 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fe ff1e 	bl	8003970 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b34:	e009      	b.n	8004b4a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fe ff09 	bl	800395c <HAL_I2C_ErrorCallback>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d103      	bne.n	8004b70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d007      	beq.n	8004b8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	619a      	str	r2, [r3, #24]
  }
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff9b 	bl	8004b04 <I2C_TreatErrorCallback>
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be6:	e022      	b.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d01e      	beq.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fd fe6c 	bl	80028cc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d113      	bne.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00f      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d0cd      	beq.n	8004be8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c62:	e02c      	b.n	8004cbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f871 	bl	8004d50 <I2C_IsAcknowledgeFailed>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e02a      	b.n	8004cce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d01e      	beq.n	8004cbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fd fe24 	bl	80028cc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d113      	bne.n	8004cbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d1cb      	bne.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce2:	e028      	b.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f831 	bl	8004d50 <I2C_IsAcknowledgeFailed>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e026      	b.n	8004d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf8:	f7fd fde8 	bl	80028cc <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d113      	bne.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e007      	b.n	8004d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d1cf      	bne.n	8004ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d161      	bne.n	8004e2e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d78:	d02b      	beq.n	8004dd2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d88:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d8a:	e022      	b.n	8004dd2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d01e      	beq.n	8004dd2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fd fd9a 	bl	80028cc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_IsAcknowledgeFailed+0x5a>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d113      	bne.n	8004dd2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e02e      	b.n	8004e30 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d1d5      	bne.n	8004d8c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2210      	movs	r2, #16
 8004de6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2220      	movs	r2, #32
 8004dee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff feae 	bl	8004b52 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <I2C_IsAcknowledgeFailed+0xe8>)
 8004e02:	400b      	ands	r3, r1
 8004e04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f043 0204 	orr.w	r2, r3, #4
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	fe00e800 	.word	0xfe00e800

08004e3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	817b      	strh	r3, [r7, #10]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2b      	ldr	r2, [pc, #172]	; (8004f00 <I2C_TransferConfig+0xc4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <I2C_TransferConfig+0x3a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <I2C_TransferConfig+0xc8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <I2C_TransferConfig+0x3a>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a28      	ldr	r2, [pc, #160]	; (8004f08 <I2C_TransferConfig+0xcc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <I2C_TransferConfig+0x3a>
 8004e6c:	f641 11cb 	movw	r1, #6603	; 0x19cb
 8004e70:	4826      	ldr	r0, [pc, #152]	; (8004f0c <I2C_TransferConfig+0xd0>)
 8004e72:	f7fd f92c 	bl	80020ce <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7c:	d00b      	beq.n	8004e96 <I2C_TransferConfig+0x5a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e84:	d007      	beq.n	8004e96 <I2C_TransferConfig+0x5a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <I2C_TransferConfig+0x5a>
 8004e8c:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8004e90:	481e      	ldr	r0, [pc, #120]	; (8004f0c <I2C_TransferConfig+0xd0>)
 8004e92:	f7fd f91c 	bl	80020ce <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <I2C_TransferConfig+0xd4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <I2C_TransferConfig+0x82>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <I2C_TransferConfig+0xd8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <I2C_TransferConfig+0x82>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <I2C_TransferConfig+0xdc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <I2C_TransferConfig+0x82>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <I2C_TransferConfig+0x82>
 8004eb4:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8004eb8:	4814      	ldr	r0, [pc, #80]	; (8004f0c <I2C_TransferConfig+0xd0>)
 8004eba:	f7fd f908 	bl	80020ce <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	0d5b      	lsrs	r3, r3, #21
 8004ec8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <I2C_TransferConfig+0xe0>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	ea02 0103 	and.w	r1, r2, r3
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004edc:	7a7b      	ldrb	r3, [r7, #9]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40005400 	.word	0x40005400
 8004f04:	40005800 	.word	0x40005800
 8004f08:	40007800 	.word	0x40007800
 8004f0c:	0800c778 	.word	0x0800c778
 8004f10:	80004000 	.word	0x80004000
 8004f14:	80002400 	.word	0x80002400
 8004f18:	80002000 	.word	0x80002000
 8004f1c:	03ff63ff 	.word	0x03ff63ff

08004f20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <I2C_Enable_IRQ+0xc0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <I2C_Enable_IRQ+0xc4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d11d      	bne.n	8004f80 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	da03      	bge.n	8004f54 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004f52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d103      	bne.n	8004f62 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004f60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d103      	bne.n	8004f70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d125      	bne.n	8004fc2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004f7e:	e020      	b.n	8004fc2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	da03      	bge.n	8004f90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004f8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004fa0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fa2:	887b      	ldrh	r3, [r7, #2]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004fb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d103      	bne.n	8004fc2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6819      	ldr	r1, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	08003ddb 	.word	0x08003ddb
 8004fe4:	08003fc1 	.word	0x08003fc1

08004fe8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00f      	beq.n	8005022 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005008:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005016:	2b28      	cmp	r3, #40	; 0x28
 8005018:	d003      	beq.n	8005022 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005020:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005022:	887b      	ldrh	r3, [r7, #2]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00f      	beq.n	800504c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005032:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005040:	2b28      	cmp	r3, #40	; 0x28
 8005042:	d003      	beq.n	800504c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800504a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800504c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da03      	bge.n	800505c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800505a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	2b10      	cmp	r3, #16
 8005060:	d103      	bne.n	800506a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005068:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	2b20      	cmp	r3, #32
 800506e:	d103      	bne.n	8005078 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f043 0320 	orr.w	r3, r3, #32
 8005076:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d103      	bne.n	8005086 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43da      	mvns	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	400a      	ands	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00d      	beq.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2e      	ldr	r2, [pc, #184]	; (8005178 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d008      	beq.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2d      	ldr	r2, [pc, #180]	; (800517c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80050cc:	2164      	movs	r1, #100	; 0x64
 80050ce:	482c      	ldr	r0, [pc, #176]	; (8005180 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80050d0:	f7fc fffd 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d003      	beq.n	80050ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80050e2:	2165      	movs	r1, #101	; 0x65
 80050e4:	4826      	ldr	r0, [pc, #152]	; (8005180 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80050e6:	f7fc fff2 	bl	80020ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d138      	bne.n	8005168 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8005100:	2302      	movs	r3, #2
 8005102:	e032      	b.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	; 0x24
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005132:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40005400 	.word	0x40005400
 8005178:	40005800 	.word	0x40005800
 800517c:	40007800 	.word	0x40007800
 8005180:	0800c7b0 	.word	0x0800c7b0

08005184 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2e      	ldr	r2, [pc, #184]	; (800524c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00d      	beq.n	80051b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d008      	beq.n	80051b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80051ac:	2192      	movs	r1, #146	; 0x92
 80051ae:	482a      	ldr	r0, [pc, #168]	; (8005258 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80051b0:	f7fc ff8d 	bl	80020ce <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d903      	bls.n	80051c2 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 80051ba:	2193      	movs	r1, #147	; 0x93
 80051bc:	4826      	ldr	r0, [pc, #152]	; (8005258 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80051be:	f7fc ff86 	bl	80020ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d139      	bne.n	8005242 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80051d8:	2302      	movs	r3, #2
 80051da:	e033      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40005400 	.word	0x40005400
 8005250:	40005800 	.word	0x40005800
 8005254:	40007800 	.word	0x40007800
 8005258:	0800c7b0 	.word	0x0800c7b0

0800525c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a04      	ldr	r2, [pc, #16]	; (8005278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40007000 	.word	0x40007000

0800527c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005282:	af00      	add	r7, sp, #0
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	f001 b85e 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_OscConfig+0x66>
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d119      	bne.n	80052e2 <HAL_RCC_OscConfig+0x66>
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d112      	bne.n	80052e2 <HAL_RCC_OscConfig+0x66>
 80052bc:	1d3b      	adds	r3, r7, #4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10b      	bne.n	80052e2 <HAL_RCC_OscConfig+0x66>
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <HAL_RCC_OscConfig+0x66>
 80052d8:	f240 114b 	movw	r1, #331	; 0x14b
 80052dc:	48be      	ldr	r0, [pc, #760]	; (80055d8 <HAL_RCC_OscConfig+0x35c>)
 80052de:	f7fc fef6 	bl	80020ce <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8178 	beq.w	80055e2 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d010      	beq.n	800531e <HAL_RCC_OscConfig+0xa2>
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d00a      	beq.n	800531e <HAL_RCC_OscConfig+0xa2>
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005312:	d004      	beq.n	800531e <HAL_RCC_OscConfig+0xa2>
 8005314:	f240 1151 	movw	r1, #337	; 0x151
 8005318:	48af      	ldr	r0, [pc, #700]	; (80055d8 <HAL_RCC_OscConfig+0x35c>)
 800531a:	f7fc fed8 	bl	80020ce <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800531e:	4baf      	ldr	r3, [pc, #700]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d00c      	beq.n	8005344 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800532a:	4bac      	ldr	r3, [pc, #688]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d159      	bne.n	80053ea <HAL_RCC_OscConfig+0x16e>
 8005336:	4ba9      	ldr	r3, [pc, #676]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d152      	bne.n	80053ea <HAL_RCC_OscConfig+0x16e>
 8005344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005348:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8005358:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535c:	fab3 f383 	clz	r3, r3
 8005360:	b2db      	uxtb	r3, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <HAL_RCC_OscConfig+0xfa>
 8005370:	4b9a      	ldr	r3, [pc, #616]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	e015      	b.n	80053a2 <HAL_RCC_OscConfig+0x126>
 8005376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800537a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800538a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800538e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005392:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800539e:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80053aa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80053ae:	fa92 f2a2 	rbit	r2, r2
 80053b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80053b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80053ba:	fab2 f282 	clz	r2, r2
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	f042 0220 	orr.w	r2, r2, #32
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	f002 021f 	and.w	r2, r2, #31
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f202 	lsl.w	r2, r1, r2
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8104 	beq.w	80055e0 <HAL_RCC_OscConfig+0x364>
 80053d8:	1d3b      	adds	r3, r7, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 80fe 	bne.w	80055e0 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f000 bfb4 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x188>
 80053f6:	4b79      	ldr	r3, [pc, #484]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a78      	ldr	r2, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e030      	b.n	8005466 <HAL_RCC_OscConfig+0x1ea>
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x1ac>
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a72      	ldr	r2, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6f      	ldr	r2, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e01e      	b.n	8005466 <HAL_RCC_OscConfig+0x1ea>
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x1d2>
 8005434:	4b69      	ldr	r3, [pc, #420]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a68      	ldr	r2, [pc, #416]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 800543a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e00b      	b.n	8005466 <HAL_RCC_OscConfig+0x1ea>
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a62      	ldr	r2, [pc, #392]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b60      	ldr	r3, [pc, #384]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5f      	ldr	r2, [pc, #380]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d059      	beq.n	8005524 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fd fa2c 	bl	80028cc <HAL_GetTick>
 8005474:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547a:	f7fd fa27 	bl	80028cc <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d902      	bls.n	8005490 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	f000 bf61 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005494:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80054a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <HAL_RCC_OscConfig+0x246>
 80054bc:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	e015      	b.n	80054ee <HAL_RCC_OscConfig+0x272>
 80054c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80054d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80054de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80054ea:	4b3c      	ldr	r3, [pc, #240]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80054f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80054fa:	fa92 f2a2 	rbit	r2, r2
 80054fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005502:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005506:	fab2 f282 	clz	r2, r2
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	f042 0220 	orr.w	r2, r2, #32
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	f002 021f 	and.w	r2, r2, #31
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f202 	lsl.w	r2, r1, r2
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0ab      	beq.n	800547a <HAL_RCC_OscConfig+0x1fe>
 8005522:	e05e      	b.n	80055e2 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fd f9d2 	bl	80028cc <HAL_GetTick>
 8005528:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552e:	f7fd f9cd 	bl	80028cc <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d902      	bls.n	8005544 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	f000 bf07 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005548:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005558:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	b2db      	uxtb	r3, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <HAL_RCC_OscConfig+0x2fa>
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x326>
 8005576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800557a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800558a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800558e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005592:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80055aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80055ae:	fa92 f2a2 	rbit	r2, r2
 80055b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80055b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80055ba:	fab2 f282 	clz	r2, r2
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	f042 0220 	orr.w	r2, r2, #32
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	f002 021f 	and.w	r2, r2, #31
 80055ca:	2101      	movs	r1, #1
 80055cc:	fa01 f202 	lsl.w	r2, r1, r2
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ab      	bne.n	800552e <HAL_RCC_OscConfig+0x2b2>
 80055d6:	e004      	b.n	80055e2 <HAL_RCC_OscConfig+0x366>
 80055d8:	0800c7ec 	.word	0x0800c7ec
 80055dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 818e 	beq.w	800590e <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <HAL_RCC_OscConfig+0x394>
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d004      	beq.n	8005610 <HAL_RCC_OscConfig+0x394>
 8005606:	f240 1189 	movw	r1, #393	; 0x189
 800560a:	48a8      	ldr	r0, [pc, #672]	; (80058ac <HAL_RCC_OscConfig+0x630>)
 800560c:	f7fc fd5f 	bl	80020ce <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b1f      	cmp	r3, #31
 8005618:	d904      	bls.n	8005624 <HAL_RCC_OscConfig+0x3a8>
 800561a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800561e:	48a3      	ldr	r0, [pc, #652]	; (80058ac <HAL_RCC_OscConfig+0x630>)
 8005620:	f7fc fd55 	bl	80020ce <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005624:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005630:	4b9f      	ldr	r3, [pc, #636]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	2b08      	cmp	r3, #8
 800563a:	d16d      	bne.n	8005718 <HAL_RCC_OscConfig+0x49c>
 800563c:	4b9c      	ldr	r3, [pc, #624]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d166      	bne.n	8005718 <HAL_RCC_OscConfig+0x49c>
 800564a:	2302      	movs	r3, #2
 800564c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800565c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	b2db      	uxtb	r3, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <HAL_RCC_OscConfig+0x3fe>
 8005674:	4b8e      	ldr	r3, [pc, #568]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	e013      	b.n	80056a2 <HAL_RCC_OscConfig+0x426>
 800567a:	2302      	movs	r3, #2
 800567c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800568c:	2302      	movs	r3, #2
 800568e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005692:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005696:	fa93 f3a3 	rbit	r3, r3
 800569a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800569e:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2202      	movs	r2, #2
 80056a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80056a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80056ac:	fa92 f2a2 	rbit	r2, r2
 80056b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80056b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80056b8:	fab2 f282 	clz	r2, r2
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	f042 0220 	orr.w	r2, r2, #32
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	f002 021f 	and.w	r2, r2, #31
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f202 	lsl.w	r2, r1, r2
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <HAL_RCC_OscConfig+0x468>
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d002      	beq.n	80056e4 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f000 be37 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	21f8      	movs	r1, #248	; 0xf8
 80056f4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80056fc:	fa91 f1a1 	rbit	r1, r1
 8005700:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005704:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005708:	fab1 f181 	clz	r1, r1
 800570c:	b2c9      	uxtb	r1, r1
 800570e:	408b      	lsls	r3, r1
 8005710:	4967      	ldr	r1, [pc, #412]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005716:	e0fa      	b.n	800590e <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8085 	beq.w	800582e <HAL_RCC_OscConfig+0x5b2>
 8005724:	2301      	movs	r3, #1
 8005726:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005736:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	461a      	mov	r2, r3
 800574c:	2301      	movs	r3, #1
 800574e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fd f8bc 	bl	80028cc <HAL_GetTick>
 8005754:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575a:	f7fd f8b7 	bl	80028cc <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d902      	bls.n	8005770 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	f000 bdf1 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005770:	2302      	movs	r3, #2
 8005772:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005782:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <HAL_RCC_OscConfig+0x524>
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	e013      	b.n	80057c8 <HAL_RCC_OscConfig+0x54c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80057b2:	2302      	movs	r3, #2
 80057b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2202      	movs	r2, #2
 80057ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80057ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80057d2:	fa92 f2a2 	rbit	r2, r2
 80057d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80057da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80057de:	fab2 f282 	clz	r2, r2
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	f042 0220 	orr.w	r2, r2, #32
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	f002 021f 	and.w	r2, r2, #31
 80057ee:	2101      	movs	r1, #1
 80057f0:	fa01 f202 	lsl.w	r2, r1, r2
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0af      	beq.n	800575a <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	21f8      	movs	r1, #248	; 0xf8
 800580a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005812:	fa91 f1a1 	rbit	r1, r1
 8005816:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800581a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800581e:	fab1 f181 	clz	r1, r1
 8005822:	b2c9      	uxtb	r1, r1
 8005824:	408b      	lsls	r3, r1
 8005826:	4922      	ldr	r1, [pc, #136]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 8005828:	4313      	orrs	r3, r2
 800582a:	600b      	str	r3, [r1, #0]
 800582c:	e06f      	b.n	800590e <HAL_RCC_OscConfig+0x692>
 800582e:	2301      	movs	r3, #1
 8005830:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005834:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005838:	fa93 f3a3 	rbit	r3, r3
 800583c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005840:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005844:	fab3 f383 	clz	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800584e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	461a      	mov	r2, r3
 8005856:	2300      	movs	r3, #0
 8005858:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fd f837 	bl	80028cc <HAL_GetTick>
 800585e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005864:	f7fd f832 	bl	80028cc <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d902      	bls.n	800587a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	f000 bd6c 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 800587a:	2302      	movs	r3, #2
 800587c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005880:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005884:	fa93 f3a3 	rbit	r3, r3
 8005888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800588c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005890:	fab3 f383 	clz	r3, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_OscConfig+0x638>
 80058a4:	4b02      	ldr	r3, [pc, #8]	; (80058b0 <HAL_RCC_OscConfig+0x634>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	e018      	b.n	80058dc <HAL_RCC_OscConfig+0x660>
 80058aa:	bf00      	nop
 80058ac:	0800c7ec 	.word	0x0800c7ec
 80058b0:	40021000 	.word	0x40021000
 80058b4:	2302      	movs	r3, #2
 80058b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	fa93 f3a3 	rbit	r3, r3
 80058c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058c6:	2302      	movs	r3, #2
 80058c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058d8:	4bc0      	ldr	r3, [pc, #768]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2202      	movs	r2, #2
 80058de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80058e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80058e6:	fa92 f2a2 	rbit	r2, r2
 80058ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80058ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80058f2:	fab2 f282 	clz	r2, r2
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	f042 0220 	orr.w	r2, r2, #32
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	f002 021f 	and.w	r2, r2, #31
 8005902:	2101      	movs	r1, #1
 8005904:	fa01 f202 	lsl.w	r2, r1, r2
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1aa      	bne.n	8005864 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80e7 	beq.w	8005aec <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCC_OscConfig+0x6c0>
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d004      	beq.n	800593c <HAL_RCC_OscConfig+0x6c0>
 8005932:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8005936:	48aa      	ldr	r0, [pc, #680]	; (8005be0 <HAL_RCC_OscConfig+0x964>)
 8005938:	f7fc fbc9 	bl	80020ce <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d066      	beq.n	8005a14 <HAL_RCC_OscConfig+0x798>
 8005946:	2301      	movs	r3, #1
 8005948:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005958:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800595c:	fab3 f383 	clz	r3, r3
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	4b9f      	ldr	r3, [pc, #636]	; (8005be4 <HAL_RCC_OscConfig+0x968>)
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	461a      	mov	r2, r3
 800596c:	2301      	movs	r3, #1
 800596e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005970:	f7fc ffac 	bl	80028cc <HAL_GetTick>
 8005974:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800597a:	f7fc ffa7 	bl	80028cc <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d902      	bls.n	8005990 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	f000 bce1 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005990:	2302      	movs	r3, #2
 8005992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	fa93 f2a3 	rbit	r2, r3
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80059a8:	2202      	movs	r2, #2
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	fa93 f2a3 	rbit	r2, r3
 80059b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80059c0:	2202      	movs	r2, #2
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	fa93 f2a3 	rbit	r2, r3
 80059ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d4:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 80059d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059dc:	2102      	movs	r1, #2
 80059de:	6019      	str	r1, [r3, #0]
 80059e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	fa93 f1a3 	rbit	r1, r3
 80059ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059ee:	6019      	str	r1, [r3, #0]
  return result;
 80059f0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2101      	movs	r1, #1
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0b3      	beq.n	800597a <HAL_RCC_OscConfig+0x6fe>
 8005a12:	e06b      	b.n	8005aec <HAL_RCC_OscConfig+0x870>
 8005a14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	fa93 f2a3 	rbit	r2, r3
 8005a26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a2a:	601a      	str	r2, [r3, #0]
  return result;
 8005a2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <HAL_RCC_OscConfig+0x968>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	461a      	mov	r2, r3
 8005a42:	2300      	movs	r3, #0
 8005a44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a46:	f7fc ff41 	bl	80028cc <HAL_GetTick>
 8005a4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a50:	f7fc ff3c 	bl	80028cc <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d902      	bls.n	8005a66 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	f000 bc76 	b.w	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005a66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fa93 f2a3 	rbit	r2, r3
 8005a78:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a82:	2202      	movs	r2, #2
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	fa93 f2a3 	rbit	r2, r3
 8005a90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	fa93 f2a3 	rbit	r2, r3
 8005aa8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005aac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aae:	4b4b      	ldr	r3, [pc, #300]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fa93 f1a3 	rbit	r1, r3
 8005ac4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005ac8:	6019      	str	r1, [r3, #0]
  return result;
 8005aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	fab3 f383 	clz	r3, r3
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1b1      	bne.n	8005a50 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8171 	beq.w	8005dde <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <HAL_RCC_OscConfig+0x8ae>
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d009      	beq.n	8005b2a <HAL_RCC_OscConfig+0x8ae>
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCC_OscConfig+0x8ae>
 8005b20:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005b24:	482e      	ldr	r0, [pc, #184]	; (8005be0 <HAL_RCC_OscConfig+0x964>)
 8005b26:	f7fc fad2 	bl	80020ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d112      	bne.n	8005b5c <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	61d3      	str	r3, [r2, #28]
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f107 030c 	add.w	r3, r7, #12
 8005b54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5c:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_RCC_OscConfig+0x96c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11a      	bne.n	8005b9e <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <HAL_RCC_OscConfig+0x96c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <HAL_RCC_OscConfig+0x96c>)
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b74:	f7fc feaa 	bl	80028cc <HAL_GetTick>
 8005b78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7c:	e009      	b.n	8005b92 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7e:	f7fc fea5 	bl	80028cc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e3df      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <HAL_RCC_OscConfig+0x96c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0ef      	beq.n	8005b7e <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x93a>
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4a0b      	ldr	r2, [pc, #44]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6213      	str	r3, [r2, #32]
 8005bb4:	e038      	b.n	8005c28 <HAL_RCC_OscConfig+0x9ac>
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d115      	bne.n	8005bec <HAL_RCC_OscConfig+0x970>
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6213      	str	r3, [r2, #32]
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	4a02      	ldr	r2, [pc, #8]	; (8005bdc <HAL_RCC_OscConfig+0x960>)
 8005bd2:	f023 0304 	bic.w	r3, r3, #4
 8005bd6:	6213      	str	r3, [r2, #32]
 8005bd8:	e026      	b.n	8005c28 <HAL_RCC_OscConfig+0x9ac>
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	0800c7ec 	.word	0x0800c7ec
 8005be4:	10908120 	.word	0x10908120
 8005be8:	40007000 	.word	0x40007000
 8005bec:	1d3b      	adds	r3, r7, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x994>
 8005bf6:	4b5e      	ldr	r3, [pc, #376]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4a5d      	ldr	r2, [pc, #372]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	6213      	str	r3, [r2, #32]
 8005c02:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6213      	str	r3, [r2, #32]
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCC_OscConfig+0x9ac>
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	4a56      	ldr	r2, [pc, #344]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	6213      	str	r3, [r2, #32]
 8005c1c:	4b54      	ldr	r3, [pc, #336]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	4a53      	ldr	r2, [pc, #332]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005c22:	f023 0304 	bic.w	r3, r3, #4
 8005c26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d064      	beq.n	8005cfc <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c32:	f7fc fe4b 	bl	80028cc <HAL_GetTick>
 8005c36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fc fe46 	bl	80028cc <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e37e      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005c54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c58:	2202      	movs	r2, #2
 8005c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	fa93 f2a3 	rbit	r2, r3
 8005c66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c70:	2202      	movs	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fa93 f2a3 	rbit	r2, r3
 8005c7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c82:	601a      	str	r2, [r3, #0]
  return result;
 8005c84:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f043 0302 	orr.w	r3, r3, #2
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d102      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xa28>
 8005c9e:	4b34      	ldr	r3, [pc, #208]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	e00d      	b.n	8005cc0 <HAL_RCC_OscConfig+0xa44>
 8005ca4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ca8:	2202      	movs	r2, #2
 8005caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	fa93 f2a3 	rbit	r2, r3
 8005cb6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	6011      	str	r1, [r2, #0]
 8005cc8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	fa92 f1a2 	rbit	r1, r2
 8005cd2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005cd6:	6011      	str	r1, [r2, #0]
  return result;
 8005cd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	fab2 f282 	clz	r2, r2
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	f002 021f 	and.w	r2, r2, #31
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0a0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x9c0>
 8005cfa:	e066      	b.n	8005dca <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfc:	f7fc fde6 	bl	80028cc <HAL_GetTick>
 8005d00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d04:	e00b      	b.n	8005d1e <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d06:	f7fc fde1 	bl	80028cc <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e319      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
 8005d1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d22:	2202      	movs	r2, #2
 8005d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	fa93 f2a3 	rbit	r2, r3
 8005d30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	fa93 f2a3 	rbit	r2, r3
 8005d48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d4c:	601a      	str	r2, [r3, #0]
  return result;
 8005d4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d54:	fab3 f383 	clz	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d105      	bne.n	8005d74 <HAL_RCC_OscConfig+0xaf8>
 8005d68:	4b01      	ldr	r3, [pc, #4]	; (8005d70 <HAL_RCC_OscConfig+0xaf4>)
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	e010      	b.n	8005d90 <HAL_RCC_OscConfig+0xb14>
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d78:	2202      	movs	r2, #2
 8005d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	fa93 f2a3 	rbit	r2, r3
 8005d86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	4bad      	ldr	r3, [pc, #692]	; (8006044 <HAL_RCC_OscConfig+0xdc8>)
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005d94:	2102      	movs	r1, #2
 8005d96:	6011      	str	r1, [r2, #0]
 8005d98:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	fa92 f1a2 	rbit	r1, r2
 8005da2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005da6:	6011      	str	r1, [r2, #0]
  return result;
 8005da8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	fab2 f282 	clz	r2, r2
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	f002 021f 	and.w	r2, r2, #31
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d19d      	bne.n	8005d06 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	4b9c      	ldr	r3, [pc, #624]	; (8006044 <HAL_RCC_OscConfig+0xdc8>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4a9b      	ldr	r2, [pc, #620]	; (8006044 <HAL_RCC_OscConfig+0xdc8>)
 8005dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005dde:	1d3b      	adds	r3, r7, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <HAL_RCC_OscConfig+0xb8a>
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d009      	beq.n	8005e06 <HAL_RCC_OscConfig+0xb8a>
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d004      	beq.n	8005e06 <HAL_RCC_OscConfig+0xb8a>
 8005dfc:	f240 213a 	movw	r1, #570	; 0x23a
 8005e00:	4891      	ldr	r0, [pc, #580]	; (8006048 <HAL_RCC_OscConfig+0xdcc>)
 8005e02:	f7fc f964 	bl	80020ce <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 829f 	beq.w	8006350 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e12:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <HAL_RCC_OscConfig+0xdc8>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	f000 826c 	beq.w	80062f8 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	f040 81e4 	bne.w	80061f4 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCC_OscConfig+0xbd2>
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e42:	d004      	beq.n	8005e4e <HAL_RCC_OscConfig+0xbd2>
 8005e44:	f240 2143 	movw	r1, #579	; 0x243
 8005e48:	487f      	ldr	r0, [pc, #508]	; (8006048 <HAL_RCC_OscConfig+0xdcc>)
 8005e4a:	f7fc f940 	bl	80020ce <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d058      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e58:	1d3b      	adds	r3, r7, #4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e62:	d052      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e6e:	d04c      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e7a:	d046      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d040      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e92:	d03a      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e9e:	d034      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eaa:	d02e      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005eac:	1d3b      	adds	r3, r7, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb6:	d028      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ec2:	d022      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ece:	d01c      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005eda:	d016      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee6:	d010      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005efe:	d004      	beq.n	8005f0a <HAL_RCC_OscConfig+0xc8e>
 8005f00:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005f04:	4850      	ldr	r0, [pc, #320]	; (8006048 <HAL_RCC_OscConfig+0xdcc>)
 8005f06:	f7fc f8e2 	bl	80020ce <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d04f      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d04a      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d045      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d040      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d03b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d036      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b06      	cmp	r3, #6
 8005f4e:	d031      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d02c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d027      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d022      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b0a      	cmp	r3, #10
 8005f76:	d01d      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b0b      	cmp	r3, #11
 8005f80:	d018      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b0c      	cmp	r3, #12
 8005f8a:	d013      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b0d      	cmp	r3, #13
 8005f94:	d00e      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	2b0e      	cmp	r3, #14
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d004      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xd38>
 8005faa:	f240 2146 	movw	r1, #582	; 0x246
 8005fae:	4826      	ldr	r0, [pc, #152]	; (8006048 <HAL_RCC_OscConfig+0xdcc>)
 8005fb0:	f7fc f88d 	bl	80020ce <assert_failed>
 8005fb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	fa93 f2a3 	rbit	r2, r3
 8005fc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fcc:	601a      	str	r2, [r3, #0]
  return result;
 8005fce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fd2:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd4:	fab3 f383 	clz	r3, r3
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fea:	f7fc fc6f 	bl	80028cc <HAL_GetTick>
 8005fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ff2:	e009      	b.n	8006008 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff4:	f7fc fc6a 	bl	80028cc <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e1a4      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
 8006008:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800600c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006012:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	fa93 f2a3 	rbit	r2, r3
 800601c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006020:	601a      	str	r2, [r3, #0]
  return result;
 8006022:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006026:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006028:	fab3 f383 	clz	r3, r3
 800602c:	b2db      	uxtb	r3, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <HAL_RCC_OscConfig+0xdd0>
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <HAL_RCC_OscConfig+0xdc8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	e020      	b.n	8006084 <HAL_RCC_OscConfig+0xe08>
 8006042:	bf00      	nop
 8006044:	40021000 	.word	0x40021000
 8006048:	0800c7ec 	.word	0x0800c7ec
 800604c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	fa93 f2a3 	rbit	r2, r3
 8006060:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800606a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	fa93 f2a3 	rbit	r2, r3
 800607a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	4bb6      	ldr	r3, [pc, #728]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	fa92 f1a2 	rbit	r1, r2
 8006098:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800609c:	6011      	str	r1, [r2, #0]
  return result;
 800609e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	f042 0220 	orr.w	r2, r2, #32
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	f002 021f 	and.w	r2, r2, #31
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f202 	lsl.w	r2, r1, r2
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d199      	bne.n	8005ff4 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c0:	4ba6      	ldr	r3, [pc, #664]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f023 020f 	bic.w	r2, r3, #15
 80060c8:	1d3b      	adds	r3, r7, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	49a3      	ldr	r1, [pc, #652]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80060d4:	4ba1      	ldr	r3, [pc, #644]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a19      	ldr	r1, [r3, #32]
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	499c      	ldr	r1, [pc, #624]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
 80060f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	fa93 f2a3 	rbit	r2, r3
 8006104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006108:	601a      	str	r2, [r3, #0]
  return result;
 800610a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800610e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	fab3 f383 	clz	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800611a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	461a      	mov	r2, r3
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc fbd1 	bl	80028cc <HAL_GetTick>
 800612a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800612e:	e009      	b.n	8006144 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006130:	f7fc fbcc 	bl	80028cc <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e106      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
 8006144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800614c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f2a3 	rbit	r2, r3
 8006158:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800615c:	601a      	str	r2, [r3, #0]
  return result;
 800615e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006162:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <HAL_RCC_OscConfig+0xf02>
 8006178:	4b78      	ldr	r3, [pc, #480]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	e01b      	b.n	80061b6 <HAL_RCC_OscConfig+0xf3a>
 800617e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006188:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	fa93 f2a3 	rbit	r2, r3
 8006192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800619c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	fa93 f2a3 	rbit	r2, r3
 80061ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	4b6a      	ldr	r3, [pc, #424]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80061ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061be:	6011      	str	r1, [r2, #0]
 80061c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	fa92 f1a2 	rbit	r1, r2
 80061ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061ce:	6011      	str	r1, [r2, #0]
  return result;
 80061d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	fab2 f282 	clz	r2, r2
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	f042 0220 	orr.w	r2, r2, #32
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	f002 021f 	and.w	r2, r2, #31
 80061e6:	2101      	movs	r1, #1
 80061e8:	fa01 f202 	lsl.w	r2, r1, r2
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d09e      	beq.n	8006130 <HAL_RCC_OscConfig+0xeb4>
 80061f2:	e0ad      	b.n	8006350 <HAL_RCC_OscConfig+0x10d4>
 80061f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	fa93 f2a3 	rbit	r2, r3
 8006208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800620c:	601a      	str	r2, [r3, #0]
  return result;
 800620e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006212:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006214:	fab3 f383 	clz	r3, r3
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800621e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	461a      	mov	r2, r3
 8006226:	2300      	movs	r3, #0
 8006228:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7fc fb4f 	bl	80028cc <HAL_GetTick>
 800622e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006232:	e009      	b.n	8006248 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006234:	f7fc fb4a 	bl	80028cc <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e084      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
 8006248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800624c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	fa93 f2a3 	rbit	r2, r3
 800625c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006260:	601a      	str	r2, [r3, #0]
  return result;
 8006262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006266:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006268:	fab3 f383 	clz	r3, r3
 800626c:	b2db      	uxtb	r3, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d102      	bne.n	8006282 <HAL_RCC_OscConfig+0x1006>
 800627c:	4b37      	ldr	r3, [pc, #220]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	e01b      	b.n	80062ba <HAL_RCC_OscConfig+0x103e>
 8006282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800628a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	fa93 f2a3 	rbit	r2, r3
 8006296:	f107 0320 	add.w	r3, r7, #32
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f107 031c 	add.w	r3, r7, #28
 80062a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f107 031c 	add.w	r3, r7, #28
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	fa93 f2a3 	rbit	r2, r3
 80062b0:	f107 0318 	add.w	r3, r7, #24
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	4b29      	ldr	r3, [pc, #164]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	f107 0214 	add.w	r2, r7, #20
 80062be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062c2:	6011      	str	r1, [r2, #0]
 80062c4:	f107 0214 	add.w	r2, r7, #20
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	fa92 f1a2 	rbit	r1, r2
 80062ce:	f107 0210 	add.w	r2, r7, #16
 80062d2:	6011      	str	r1, [r2, #0]
  return result;
 80062d4:	f107 0210 	add.w	r2, r7, #16
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	fab2 f282 	clz	r2, r2
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	f042 0220 	orr.w	r2, r2, #32
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	f002 021f 	and.w	r2, r2, #31
 80062ea:	2101      	movs	r1, #1
 80062ec:	fa01 f202 	lsl.w	r2, r1, r2
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d19e      	bne.n	8006234 <HAL_RCC_OscConfig+0xfb8>
 80062f6:	e02b      	b.n	8006350 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e025      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <HAL_RCC_OscConfig+0x10e0>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006316:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800631a:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	429a      	cmp	r2, r3
 8006326:	d111      	bne.n	800634c <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006328:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800632c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006330:	1d3b      	adds	r3, r7, #4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006336:	429a      	cmp	r2, r3
 8006338:	d108      	bne.n	800634c <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800633a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800633e:	f003 020f 	and.w	r2, r3, #15
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b09e      	sub	sp, #120	; 0x78
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e203      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d116      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x52>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d110      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x52>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x52>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x52>
 80063a8:	f240 21c3 	movw	r1, #707	; 0x2c3
 80063ac:	48a5      	ldr	r0, [pc, #660]	; (8006644 <HAL_RCC_ClockConfig+0x2e4>)
 80063ae:	f7fb fe8e 	bl	80020ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCC_ClockConfig+0x6e>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d007      	beq.n	80063ce <HAL_RCC_ClockConfig+0x6e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d004      	beq.n	80063ce <HAL_RCC_ClockConfig+0x6e>
 80063c4:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80063c8:	489e      	ldr	r0, [pc, #632]	; (8006644 <HAL_RCC_ClockConfig+0x2e4>)
 80063ca:	f7fb fe80 	bl	80020ce <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063ce:	4b9e      	ldr	r3, [pc, #632]	; (8006648 <HAL_RCC_ClockConfig+0x2e8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d910      	bls.n	80063fe <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063dc:	4b9a      	ldr	r3, [pc, #616]	; (8006648 <HAL_RCC_ClockConfig+0x2e8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f023 0207 	bic.w	r2, r3, #7
 80063e4:	4998      	ldr	r1, [pc, #608]	; (8006648 <HAL_RCC_ClockConfig+0x2e8>)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ec:	4b96      	ldr	r3, [pc, #600]	; (8006648 <HAL_RCC_ClockConfig+0x2e8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d001      	beq.n	80063fe <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e1c0      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d031      	beq.n	800646e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d024      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d020      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b90      	cmp	r3, #144	; 0x90
 8006420:	d01c      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2ba0      	cmp	r3, #160	; 0xa0
 8006428:	d018      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2bb0      	cmp	r3, #176	; 0xb0
 8006430:	d014      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2bc0      	cmp	r3, #192	; 0xc0
 8006438:	d010      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2bd0      	cmp	r3, #208	; 0xd0
 8006440:	d00c      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2be0      	cmp	r3, #224	; 0xe0
 8006448:	d008      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2bf0      	cmp	r3, #240	; 0xf0
 8006450:	d004      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
 8006452:	f240 21db 	movw	r1, #731	; 0x2db
 8006456:	487b      	ldr	r0, [pc, #492]	; (8006644 <HAL_RCC_ClockConfig+0x2e4>)
 8006458:	f7fb fe39 	bl	80020ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645c:	4b7b      	ldr	r3, [pc, #492]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4978      	ldr	r1, [pc, #480]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 800646a:	4313      	orrs	r3, r2
 800646c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80f3 	beq.w	8006662 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_RCC_ClockConfig+0x13e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d008      	beq.n	800649e <HAL_RCC_ClockConfig+0x13e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d004      	beq.n	800649e <HAL_RCC_ClockConfig+0x13e>
 8006494:	f240 21e2 	movw	r1, #738	; 0x2e2
 8006498:	486a      	ldr	r0, [pc, #424]	; (8006644 <HAL_RCC_ClockConfig+0x2e4>)
 800649a:	f7fb fe18 	bl	80020ce <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d13c      	bne.n	8006520 <HAL_RCC_ClockConfig+0x1c0>
 80064a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ae:	fa93 f3a3 	rbit	r3, r3
 80064b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80064b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b6:	fab3 f383 	clz	r3, r3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x170>
 80064ca:	4b60      	ldr	r3, [pc, #384]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	e00f      	b.n	80064f0 <HAL_RCC_ClockConfig+0x190>
 80064d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d8:	fa93 f3a3 	rbit	r3, r3
 80064dc:	667b      	str	r3, [r7, #100]	; 0x64
 80064de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e2:	663b      	str	r3, [r7, #96]	; 0x60
 80064e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e6:	fa93 f3a3 	rbit	r3, r3
 80064ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ec:	4b57      	ldr	r3, [pc, #348]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80064f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064f8:	fa92 f2a2 	rbit	r2, r2
 80064fc:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80064fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006500:	fab2 f282 	clz	r2, r2
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	f042 0220 	orr.w	r2, r2, #32
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	f002 021f 	and.w	r2, r2, #31
 8006510:	2101      	movs	r1, #1
 8006512:	fa01 f202 	lsl.w	r2, r1, r2
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d17b      	bne.n	8006614 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e12f      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d13c      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x242>
 8006528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006530:	fa93 f3a3 	rbit	r3, r3
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006538:	fab3 f383 	clz	r3, r3
 800653c:	b2db      	uxtb	r3, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d102      	bne.n	8006552 <HAL_RCC_ClockConfig+0x1f2>
 800654c:	4b3f      	ldr	r3, [pc, #252]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	e00f      	b.n	8006572 <HAL_RCC_ClockConfig+0x212>
 8006552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655a:	fa93 f3a3 	rbit	r3, r3
 800655e:	647b      	str	r3, [r7, #68]	; 0x44
 8006560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
 8006566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006568:	fa93 f3a3 	rbit	r3, r3
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656e:	4b37      	ldr	r3, [pc, #220]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006576:	63ba      	str	r2, [r7, #56]	; 0x38
 8006578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657a:	fa92 f2a2 	rbit	r2, r2
 800657e:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006582:	fab2 f282 	clz	r2, r2
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	f042 0220 	orr.w	r2, r2, #32
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	f002 021f 	and.w	r2, r2, #31
 8006592:	2101      	movs	r1, #1
 8006594:	fa01 f202 	lsl.w	r2, r1, r2
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d13a      	bne.n	8006614 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e0ee      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
 80065a2:	2302      	movs	r3, #2
 80065a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b0:	fab3 f383 	clz	r3, r3
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_RCC_ClockConfig+0x26a>
 80065c4:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	e00d      	b.n	80065e6 <HAL_RCC_ClockConfig+0x286>
 80065ca:	2302      	movs	r3, #2
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	fa93 f3a3 	rbit	r3, r3
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	2302      	movs	r3, #2
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	fa93 f3a3 	rbit	r3, r3
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2202      	movs	r2, #2
 80065e8:	61ba      	str	r2, [r7, #24]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	fa92 f2a2 	rbit	r2, r2
 80065f0:	617a      	str	r2, [r7, #20]
  return result;
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	fab2 f282 	clz	r2, r2
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	f042 0220 	orr.w	r2, r2, #32
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	f002 021f 	and.w	r2, r2, #31
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f202 	lsl.w	r2, r1, r2
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0b5      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006614:	4b0d      	ldr	r3, [pc, #52]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f023 0203 	bic.w	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	490a      	ldr	r1, [pc, #40]	; (800664c <HAL_RCC_ClockConfig+0x2ec>)
 8006622:	4313      	orrs	r3, r2
 8006624:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006626:	f7fc f951 	bl	80028cc <HAL_GetTick>
 800662a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662c:	e010      	b.n	8006650 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800662e:	f7fc f94d 	bl	80028cc <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	; 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d907      	bls.n	8006650 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e09d      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
 8006644:	0800c7ec 	.word	0x0800c7ec
 8006648:	40022000 	.word	0x40022000
 800664c:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006650:	4b4d      	ldr	r3, [pc, #308]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 020c 	and.w	r2, r3, #12
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	429a      	cmp	r2, r3
 8006660:	d1e5      	bne.n	800662e <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006662:	4b4a      	ldr	r3, [pc, #296]	; (800678c <HAL_RCC_ClockConfig+0x42c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d210      	bcs.n	8006692 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006670:	4b46      	ldr	r3, [pc, #280]	; (800678c <HAL_RCC_ClockConfig+0x42c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f023 0207 	bic.w	r2, r3, #7
 8006678:	4944      	ldr	r1, [pc, #272]	; (800678c <HAL_RCC_ClockConfig+0x42c>)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	4313      	orrs	r3, r2
 800667e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006680:	4b42      	ldr	r3, [pc, #264]	; (800678c <HAL_RCC_ClockConfig+0x42c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d001      	beq.n	8006692 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e076      	b.n	8006780 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d025      	beq.n	80066ea <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x378>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ae:	d013      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x378>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80066b8:	d00e      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x378>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066c2:	d009      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x378>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066cc:	d004      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x378>
 80066ce:	f240 311e 	movw	r1, #798	; 0x31e
 80066d2:	482f      	ldr	r0, [pc, #188]	; (8006790 <HAL_RCC_ClockConfig+0x430>)
 80066d4:	f7fb fcfb 	bl	80020ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d8:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4928      	ldr	r1, [pc, #160]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d026      	beq.n	8006744 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3d0>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006706:	d013      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3d0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006710:	d00e      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3d0>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800671a:	d009      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3d0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006724:	d004      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3d0>
 8006726:	f240 3125 	movw	r1, #805	; 0x325
 800672a:	4819      	ldr	r0, [pc, #100]	; (8006790 <HAL_RCC_ClockConfig+0x430>)
 800672c:	f7fb fccf 	bl	80020ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006730:	4b15      	ldr	r3, [pc, #84]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4912      	ldr	r1, [pc, #72]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 8006740:	4313      	orrs	r3, r2
 8006742:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006744:	f000 f82c 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8006748:	4601      	mov	r1, r0
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <HAL_RCC_ClockConfig+0x428>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006752:	22f0      	movs	r2, #240	; 0xf0
 8006754:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	fa92 f2a2 	rbit	r2, r2
 800675c:	60fa      	str	r2, [r7, #12]
  return result;
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	fab2 f282 	clz	r2, r2
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	40d3      	lsrs	r3, r2
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x434>)
 800676a:	5cd3      	ldrb	r3, [r2, r3]
 800676c:	fa21 f303 	lsr.w	r3, r1, r3
 8006770:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_RCC_ClockConfig+0x438>)
 8006772:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x43c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f7fc f863 	bl	8002844 <HAL_InitTick>
  
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3778      	adds	r7, #120	; 0x78
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40021000 	.word	0x40021000
 800678c:	40022000 	.word	0x40022000
 8006790:	0800c7ec 	.word	0x0800c7ec
 8006794:	0800c9b0 	.word	0x0800c9b0
 8006798:	2000007c 	.word	0x2000007c
 800679c:	20000080 	.word	0x20000080

080067a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b08b      	sub	sp, #44	; 0x2c
 80067a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80067ba:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d002      	beq.n	80067d0 <HAL_RCC_GetSysClockFreq+0x30>
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d003      	beq.n	80067d6 <HAL_RCC_GetSysClockFreq+0x36>
 80067ce:	e03f      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067d0:	4b25      	ldr	r3, [pc, #148]	; (8006868 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067d2:	623b      	str	r3, [r7, #32]
      break;
 80067d4:	e03f      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80067dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80067e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	fa92 f2a2 	rbit	r2, r2
 80067e8:	607a      	str	r2, [r7, #4]
  return result;
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	fab2 f282 	clz	r2, r2
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	40d3      	lsrs	r3, r2
 80067f4:	4a1d      	ldr	r2, [pc, #116]	; (800686c <HAL_RCC_GetSysClockFreq+0xcc>)
 80067f6:	5cd3      	ldrb	r3, [r2, r3]
 80067f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	220f      	movs	r2, #15
 8006804:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	fa92 f2a2 	rbit	r2, r2
 800680c:	60fa      	str	r2, [r7, #12]
  return result;
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	fab2 f282 	clz	r2, r2
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	40d3      	lsrs	r3, r2
 8006818:	4a15      	ldr	r2, [pc, #84]	; (8006870 <HAL_RCC_GetSysClockFreq+0xd0>)
 800681a:	5cd3      	ldrb	r3, [r2, r3]
 800681c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006828:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <HAL_RCC_GetSysClockFreq+0xc8>)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
 8006838:	e007      	b.n	800684a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <HAL_RCC_GetSysClockFreq+0xc8>)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	623b      	str	r3, [r7, #32]
      break;
 800684e:	e002      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006852:	623b      	str	r3, [r7, #32]
      break;
 8006854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006856:	6a3b      	ldr	r3, [r7, #32]
}
 8006858:	4618      	mov	r0, r3
 800685a:	372c      	adds	r7, #44	; 0x2c
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40021000 	.word	0x40021000
 8006868:	007a1200 	.word	0x007a1200
 800686c:	0800c9c8 	.word	0x0800c9c8
 8006870:	0800c9d8 	.word	0x0800c9d8

08006874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006878:	4b03      	ldr	r3, [pc, #12]	; (8006888 <HAL_RCC_GetHCLKFreq+0x14>)
 800687a:	681b      	ldr	r3, [r3, #0]
}
 800687c:	4618      	mov	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000007c 	.word	0x2000007c

0800688c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006892:	f7ff ffef 	bl	8006874 <HAL_RCC_GetHCLKFreq>
 8006896:	4601      	mov	r1, r0
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80068a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	fa92 f2a2 	rbit	r2, r2
 80068ac:	603a      	str	r2, [r7, #0]
  return result;
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	fab2 f282 	clz	r2, r2
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	40d3      	lsrs	r3, r2
 80068b8:	4a04      	ldr	r2, [pc, #16]	; (80068cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80068ba:	5cd3      	ldrb	r3, [r2, r3]
 80068bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40021000 	.word	0x40021000
 80068cc:	0800c9c0 	.word	0x0800c9c0

080068d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80068d6:	f7ff ffcd 	bl	8006874 <HAL_RCC_GetHCLKFreq>
 80068da:	4601      	mov	r1, r0
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80068e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80068e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	fa92 f2a2 	rbit	r2, r2
 80068f0:	603a      	str	r2, [r7, #0]
  return result;
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	fab2 f282 	clz	r2, r2
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	40d3      	lsrs	r3, r2
 80068fc:	4a04      	ldr	r2, [pc, #16]	; (8006910 <HAL_RCC_GetPCLK2Freq+0x40>)
 80068fe:	5cd3      	ldrb	r3, [r2, r3]
 8006900:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40021000 	.word	0x40021000
 8006910:	0800c9c0 	.word	0x0800c9c0

08006914 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b092      	sub	sp, #72	; 0x48
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a62      	ldr	r2, [pc, #392]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d303      	bcc.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006934:	2172      	movs	r1, #114	; 0x72
 8006936:	4861      	ldr	r0, [pc, #388]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006938:	f7fb fbc9 	bl	80020ce <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80f1 	beq.w	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d012      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d00d      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006964:	d008      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696e:	d003      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006970:	2178      	movs	r1, #120	; 0x78
 8006972:	4852      	ldr	r0, [pc, #328]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006974:	f7fb fbab 	bl	80020ce <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006978:	4b51      	ldr	r3, [pc, #324]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10e      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006984:	4b4e      	ldr	r3, [pc, #312]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	4a4d      	ldr	r2, [pc, #308]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698e:	61d3      	str	r3, [r2, #28]
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a2:	4b48      	ldr	r3, [pc, #288]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d118      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ae:	4b45      	ldr	r3, [pc, #276]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ba:	f7fb ff87 	bl	80028cc <HAL_GetTick>
 80069be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c0:	e008      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c2:	f7fb ff83 	bl	80028cc <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b64      	cmp	r3, #100	; 0x64
 80069ce:	d901      	bls.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e38f      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d4:	4b3b      	ldr	r3, [pc, #236]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069e0:	4b37      	ldr	r3, [pc, #220]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 808a 	beq.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069fc:	429a      	cmp	r2, r3
 80069fe:	f000 8082 	beq.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a02:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	fa93 f3a3 	rbit	r3, r3
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a1c:	fab3 f383 	clz	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	fa93 f3a3 	rbit	r3, r3
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a40:	fab3 f383 	clz	r3, r3
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2300      	movs	r3, #0
 8006a52:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d050      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fb ff32 	bl	80028cc <HAL_GetTick>
 8006a68:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6c:	f7fb ff2e 	bl	80028cc <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e338      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8006a82:	2302      	movs	r3, #2
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	fa93 f3a3 	rbit	r3, r3
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	2302      	movs	r3, #2
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	fa93 f3a3 	rbit	r3, r3
 8006a98:	61fb      	str	r3, [r7, #28]
  return result;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9c:	fab3 f383 	clz	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f043 0302 	orr.w	r3, r3, #2
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d10d      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	e012      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006ab6:	bf00      	nop
 8006ab8:	03f73400 	.word	0x03f73400
 8006abc:	0800c824 	.word	0x0800c824
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	10908100 	.word	0x10908100
 8006acc:	2302      	movs	r3, #2
 8006ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	4b97      	ldr	r3, [pc, #604]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2202      	movs	r2, #2
 8006ade:	613a      	str	r2, [r7, #16]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	fa92 f2a2 	rbit	r2, r2
 8006ae6:	60fa      	str	r2, [r7, #12]
  return result;
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	fab2 f282 	clz	r2, r2
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	f002 021f 	and.w	r2, r2, #31
 8006afa:	2101      	movs	r1, #1
 8006afc:	fa01 f202 	lsl.w	r2, r1, r2
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0b2      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006b06:	4b8c      	ldr	r3, [pc, #560]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4989      	ldr	r1, [pc, #548]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b20:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	4a84      	ldr	r2, [pc, #528]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01c      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d00b      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d007      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006b58:	21be      	movs	r1, #190	; 0xbe
 8006b5a:	4878      	ldr	r0, [pc, #480]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006b5c:	f7fb fab7 	bl	80020ce <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b60:	4b75      	ldr	r3, [pc, #468]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	f023 0203 	bic.w	r2, r3, #3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4972      	ldr	r1, [pc, #456]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01f      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d012      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8e:	d00d      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d008      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ba4:	21c9      	movs	r1, #201	; 0xc9
 8006ba6:	4865      	ldr	r0, [pc, #404]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006ba8:	f7fb fa91 	bl	80020ce <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bac:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	495f      	ldr	r1, [pc, #380]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01f      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d012      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bda:	d00d      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006be4:	d008      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006bee:	d003      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006bf0:	21d5      	movs	r1, #213	; 0xd5
 8006bf2:	4852      	ldr	r0, [pc, #328]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006bf4:	f7fb fa6b 	bl	80020ce <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bf8:	4b4f      	ldr	r3, [pc, #316]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	494c      	ldr	r1, [pc, #304]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d014      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d003      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006c26:	21e0      	movs	r1, #224	; 0xe0
 8006c28:	4844      	ldr	r0, [pc, #272]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006c2a:	f7fb fa50 	bl	80020ce <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c2e:	4b42      	ldr	r3, [pc, #264]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	493f      	ldr	r1, [pc, #252]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d015      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c54:	d007      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006c5e:	21ee      	movs	r1, #238	; 0xee
 8006c60:	4836      	ldr	r0, [pc, #216]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006c62:	f7fb fa34 	bl	80020ce <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c66:	4b34      	ldr	r3, [pc, #208]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	4931      	ldr	r1, [pc, #196]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d015      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d008      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d004      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006c94:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006c98:	4828      	ldr	r0, [pc, #160]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006c9a:	f7fb fa18 	bl	80020ce <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c9e:	4b26      	ldr	r3, [pc, #152]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f023 0220 	bic.w	r2, r3, #32
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	4923      	ldr	r1, [pc, #140]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d015      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d004      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006ccc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006cd0:	481a      	ldr	r0, [pc, #104]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006cd2:	f7fb f9fc 	bl	80020ce <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cd6:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	4915      	ldr	r1, [pc, #84]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d025      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d04:	d00e      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0e:	d009      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d18:	d004      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006d1a:	f240 1123 	movw	r1, #291	; 0x123
 8006d1e:	4807      	ldr	r0, [pc, #28]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006d20:	f7fb f9d5 	bl	80020ce <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	4901      	ldr	r1, [pc, #4]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	630b      	str	r3, [r1, #48]	; 0x30
 8006d36:	e003      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	0800c824 	.word	0x0800c824
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d020      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5c:	d00e      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d66:	d009      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d70:	d004      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d72:	f240 112d 	movw	r1, #301	; 0x12d
 8006d76:	48a1      	ldr	r0, [pc, #644]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006d78:	f7fb f9a9 	bl	80020ce <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d7c:	4ba0      	ldr	r3, [pc, #640]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	499d      	ldr	r1, [pc, #628]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d016      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006daa:	d004      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8006dac:	f240 113d 	movw	r1, #317	; 0x13d
 8006db0:	4892      	ldr	r0, [pc, #584]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006db2:	f7fb f98c 	bl	80020ce <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006db6:	4b92      	ldr	r3, [pc, #584]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	498f      	ldr	r1, [pc, #572]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d04d      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d040      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d03b      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006dee:	d036      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8006df8:	d031      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006e02:	d02c      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006e0c:	d027      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8006e16:	d022      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006e20:	d01d      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006e2a:	d018      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006e34:	d013      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006e3e:	d00e      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006e48:	d009      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e52:	d004      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006e54:	f240 115d 	movw	r1, #349	; 0x15d
 8006e58:	4868      	ldr	r0, [pc, #416]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006e5a:	f7fb f938 	bl	80020ce <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e5e:	4b68      	ldr	r3, [pc, #416]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	4965      	ldr	r1, [pc, #404]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d04d      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d040      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8c:	d03b      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8006e96:	d036      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8006ea0:	d031      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8006eaa:	d02c      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006eb4:	d027      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8006ebe:	d022      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8006ec8:	d01d      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8006ed2:	d018      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006edc:	d013      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8006ee6:	d00e      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8006ef0:	d009      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006efa:	d004      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006efc:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006f00:	483e      	ldr	r0, [pc, #248]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006f02:	f7fb f8e4 	bl	80020ce <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	493b      	ldr	r1, [pc, #236]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f34:	d004      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006f36:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006f3a:	4830      	ldr	r0, [pc, #192]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006f3c:	f7fb f8c7 	bl	80020ce <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006f40:	4b2f      	ldr	r3, [pc, #188]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	492c      	ldr	r1, [pc, #176]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006f70:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006f74:	4821      	ldr	r0, [pc, #132]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006f76:	f7fb f8aa 	bl	80020ce <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006f7a:	4b21      	ldr	r3, [pc, #132]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	491e      	ldr	r1, [pc, #120]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d016      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa8:	d004      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006faa:	f240 11f7 	movw	r1, #503	; 0x1f7
 8006fae:	4813      	ldr	r0, [pc, #76]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006fb0:	f7fb f88d 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	490f      	ldr	r1, [pc, #60]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01b      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006fe4:	f240 2101 	movw	r1, #513	; 0x201
 8006fe8:	4804      	ldr	r0, [pc, #16]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006fea:	f7fb f870 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006ffc:	0800c824 	.word	0x0800c824
 8007000:	40021000 	.word	0x40021000
 8007004:	493d      	ldr	r1, [pc, #244]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007006:	4313      	orrs	r3, r2
 8007008:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d016      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d004      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8007028:	f240 210b 	movw	r1, #523	; 0x20b
 800702c:	4834      	ldr	r0, [pc, #208]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800702e:	f7fb f84e 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007032:	4b32      	ldr	r3, [pc, #200]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703e:	492f      	ldr	r1, [pc, #188]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007040:	4313      	orrs	r3, r2
 8007042:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d016      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x758>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007060:	d004      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x758>
 8007062:	f240 2115 	movw	r1, #533	; 0x215
 8007066:	4826      	ldr	r0, [pc, #152]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8007068:	f7fb f831 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007078:	4920      	ldr	r1, [pc, #128]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800707a:	4313      	orrs	r3, r2
 800707c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709a:	d004      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x792>
 800709c:	f240 211f 	movw	r1, #543	; 0x21f
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80070a2:	f7fb f814 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b2:	4912      	ldr	r1, [pc, #72]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d016      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d4:	d004      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80070d6:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80070da:	4809      	ldr	r0, [pc, #36]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80070dc:	f7fa fff7 	bl	80020ce <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	4903      	ldr	r1, [pc, #12]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3748      	adds	r7, #72	; 0x48
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40021000 	.word	0x40021000
 8007100:	0800c824 	.word	0x0800c824

08007104 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e0e1      	b.n	80072da <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a72      	ldr	r2, [pc, #456]	; (80072e4 <HAL_RTC_Init+0x1e0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_RTC_Init+0x26>
 8007120:	f240 1121 	movw	r1, #289	; 0x121
 8007124:	4870      	ldr	r0, [pc, #448]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 8007126:	f7fa ffd2 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d008      	beq.n	8007144 <HAL_RTC_Init+0x40>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <HAL_RTC_Init+0x40>
 800713a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800713e:	486a      	ldr	r0, [pc, #424]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 8007140:	f7fa ffc5 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b7f      	cmp	r3, #127	; 0x7f
 800714a:	d904      	bls.n	8007156 <HAL_RTC_Init+0x52>
 800714c:	f240 1123 	movw	r1, #291	; 0x123
 8007150:	4865      	ldr	r0, [pc, #404]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 8007152:	f7fa ffbc 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715e:	d304      	bcc.n	800716a <HAL_RTC_Init+0x66>
 8007160:	f44f 7192 	mov.w	r1, #292	; 0x124
 8007164:	4860      	ldr	r0, [pc, #384]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 8007166:	f7fa ffb2 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d013      	beq.n	800719a <HAL_RTC_Init+0x96>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717a:	d00e      	beq.n	800719a <HAL_RTC_Init+0x96>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007184:	d009      	beq.n	800719a <HAL_RTC_Init+0x96>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800718e:	d004      	beq.n	800719a <HAL_RTC_Init+0x96>
 8007190:	f240 1125 	movw	r1, #293	; 0x125
 8007194:	4854      	ldr	r0, [pc, #336]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 8007196:	f7fa ff9a 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_RTC_Init+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071aa:	d004      	beq.n	80071b6 <HAL_RTC_Init+0xb2>
 80071ac:	f44f 7193 	mov.w	r1, #294	; 0x126
 80071b0:	484d      	ldr	r0, [pc, #308]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 80071b2:	f7fa ff8c 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_RTC_Init+0xce>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071c6:	d004      	beq.n	80071d2 <HAL_RTC_Init+0xce>
 80071c8:	f240 1127 	movw	r1, #295	; 0x127
 80071cc:	4846      	ldr	r0, [pc, #280]	; (80072e8 <HAL_RTC_Init+0x1e4>)
 80071ce:	f7fa ff7e 	bl	80020ce <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7f5b      	ldrb	r3, [r3, #29]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb f832 	bl	800224c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	22ca      	movs	r2, #202	; 0xca
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2253      	movs	r2, #83	; 0x53
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 ffdc 	bl	80081bc <RTC_EnterInitMode>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	22ff      	movs	r2, #255	; 0xff
 8007210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e05e      	b.n	80072da <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800722a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68d2      	ldr	r2, [r2, #12]
 8007256:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6919      	ldr	r1, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	041a      	lsls	r2, r3, #16
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800727a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 ff6e 	bl	800816c <HAL_RTC_WaitForSynchro>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2204      	movs	r2, #4
 80072a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e018      	b.n	80072da <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	22ff      	movs	r2, #255	; 0xff
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
  }
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40002800 	.word	0x40002800
 80072e8:	0800c880 	.word	0x0800c880

080072ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_RTC_SetTime+0x26>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d004      	beq.n	8007312 <HAL_RTC_SetTime+0x26>
 8007308:	f240 310f 	movw	r1, #783	; 0x30f
 800730c:	48a4      	ldr	r0, [pc, #656]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 800730e:	f7fa fede 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d00d      	beq.n	8007338 <HAL_RTC_SetTime+0x4c>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007324:	d008      	beq.n	8007338 <HAL_RTC_SetTime+0x4c>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <HAL_RTC_SetTime+0x4c>
 800732e:	f44f 7144 	mov.w	r1, #784	; 0x310
 8007332:	489b      	ldr	r0, [pc, #620]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 8007334:	f7fa fecb 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <HAL_RTC_SetTime+0x68>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007348:	d004      	beq.n	8007354 <HAL_RTC_SetTime+0x68>
 800734a:	f240 3111 	movw	r1, #785	; 0x311
 800734e:	4894      	ldr	r0, [pc, #592]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 8007350:	f7fa febd 	bl	80020ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	7f1b      	ldrb	r3, [r3, #28]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_RTC_SetTime+0x74>
 800735c:	2302      	movs	r3, #2
 800735e:	e12c      	b.n	80075ba <HAL_RTC_SetTime+0x2ce>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d15c      	bne.n	800742c <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01a      	beq.n	80073b6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RTC_SetTime+0xa4>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b0c      	cmp	r3, #12
 800738e:	d904      	bls.n	800739a <HAL_RTC_SetTime+0xae>
 8007390:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8007394:	4882      	ldr	r0, [pc, #520]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 8007396:	f7fa fe9a 	bl	80020ce <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	78db      	ldrb	r3, [r3, #3]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d015      	beq.n	80073ce <HAL_RTC_SetTime+0xe2>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	78db      	ldrb	r3, [r3, #3]
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d011      	beq.n	80073ce <HAL_RTC_SetTime+0xe2>
 80073aa:	f240 311d 	movw	r1, #797	; 0x31d
 80073ae:	487c      	ldr	r0, [pc, #496]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80073b0:	f7fa fe8d 	bl	80020ce <assert_failed>
 80073b4:	e00b      	b.n	80073ce <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b17      	cmp	r3, #23
 80073c2:	d904      	bls.n	80073ce <HAL_RTC_SetTime+0xe2>
 80073c4:	f240 3122 	movw	r1, #802	; 0x322
 80073c8:	4875      	ldr	r0, [pc, #468]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80073ca:	f7fa fe80 	bl	80020ce <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b3b      	cmp	r3, #59	; 0x3b
 80073d4:	d904      	bls.n	80073e0 <HAL_RTC_SetTime+0xf4>
 80073d6:	f44f 7149 	mov.w	r1, #804	; 0x324
 80073da:	4871      	ldr	r0, [pc, #452]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80073dc:	f7fa fe77 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	2b3b      	cmp	r3, #59	; 0x3b
 80073e6:	d904      	bls.n	80073f2 <HAL_RTC_SetTime+0x106>
 80073e8:	f240 3125 	movw	r1, #805	; 0x325
 80073ec:	486c      	ldr	r0, [pc, #432]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80073ee:	f7fa fe6e 	bl	80020ce <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 ff0c 	bl	8008214 <RTC_ByteToBcd2>
 80073fc:	4603      	mov	r3, r0
 80073fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 ff05 	bl	8008214 <RTC_ByteToBcd2>
 800740a:	4603      	mov	r3, r0
 800740c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800740e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	789b      	ldrb	r3, [r3, #2]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fefd 	bl	8008214 <RTC_ByteToBcd2>
 800741a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800741c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	78db      	ldrb	r3, [r3, #3]
 8007424:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e062      	b.n	80074f2 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 ff06 	bl	8008250 <RTC_Bcd2ToByte>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <HAL_RTC_SetTime+0x16e>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fefe 	bl	8008250 <RTC_Bcd2ToByte>
 8007454:	4603      	mov	r3, r0
 8007456:	2b0c      	cmp	r3, #12
 8007458:	d904      	bls.n	8007464 <HAL_RTC_SetTime+0x178>
 800745a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800745e:	4850      	ldr	r0, [pc, #320]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 8007460:	f7fa fe35 	bl	80020ce <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	78db      	ldrb	r3, [r3, #3]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d019      	beq.n	80074a0 <HAL_RTC_SetTime+0x1b4>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d015      	beq.n	80074a0 <HAL_RTC_SetTime+0x1b4>
 8007474:	f240 3131 	movw	r1, #817	; 0x331
 8007478:	4849      	ldr	r0, [pc, #292]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 800747a:	f7fa fe28 	bl	80020ce <assert_failed>
 800747e:	e00f      	b.n	80074a0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fee0 	bl	8008250 <RTC_Bcd2ToByte>
 8007490:	4603      	mov	r3, r0
 8007492:	2b17      	cmp	r3, #23
 8007494:	d904      	bls.n	80074a0 <HAL_RTC_SetTime+0x1b4>
 8007496:	f240 3136 	movw	r1, #822	; 0x336
 800749a:	4841      	ldr	r0, [pc, #260]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 800749c:	f7fa fe17 	bl	80020ce <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fed3 	bl	8008250 <RTC_Bcd2ToByte>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b3b      	cmp	r3, #59	; 0x3b
 80074ae:	d904      	bls.n	80074ba <HAL_RTC_SetTime+0x1ce>
 80074b0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80074b4:	483a      	ldr	r0, [pc, #232]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80074b6:	f7fa fe0a 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	789b      	ldrb	r3, [r3, #2]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fec6 	bl	8008250 <RTC_Bcd2ToByte>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b3b      	cmp	r3, #59	; 0x3b
 80074c8:	d904      	bls.n	80074d4 <HAL_RTC_SetTime+0x1e8>
 80074ca:	f240 3139 	movw	r1, #825	; 0x339
 80074ce:	4834      	ldr	r0, [pc, #208]	; (80075a0 <HAL_RTC_SetTime+0x2b4>)
 80074d0:	f7fa fdfd 	bl	80020ce <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80074e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80074e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	22ca      	movs	r2, #202	; 0xca
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2253      	movs	r2, #83	; 0x53
 8007500:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fe5a 	bl	80081bc <RTC_EnterInitMode>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	22ff      	movs	r2, #255	; 0xff
 8007514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2204      	movs	r2, #4
 800751a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e049      	b.n	80075ba <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007530:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007534:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007544:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6899      	ldr	r1, [r3, #8]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	431a      	orrs	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800756c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d113      	bne.n	80075a4 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fdf5 	bl	800816c <HAL_RTC_WaitForSynchro>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00d      	beq.n	80075a4 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2204      	movs	r2, #4
 8007594:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e00c      	b.n	80075ba <HAL_RTC_SetTime+0x2ce>
 80075a0:	0800c880 	.word	0x0800c880
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80075b8:	2300      	movs	r3, #0
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}
 80075c2:	bf00      	nop

080075c4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <HAL_RTC_GetTime+0x26>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d004      	beq.n	80075ea <HAL_RTC_GetTime+0x26>
 80075e0:	f44f 7164 	mov.w	r1, #912	; 0x390
 80075e4:	482c      	ldr	r0, [pc, #176]	; (8007698 <HAL_RTC_GetTime+0xd4>)
 80075e6:	f7fa fd72 	bl	80020ce <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800760c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007610:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800761c:	b2da      	uxtb	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	0a1b      	lsrs	r3, r3, #8
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d11a      	bne.n	800768c <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fdf8 	bl	8008250 <RTC_Bcd2ToByte>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fdef 	bl	8008250 <RTC_Bcd2ToByte>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	789b      	ldrb	r3, [r3, #2]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fde6 	bl	8008250 <RTC_Bcd2ToByte>
 8007684:	4603      	mov	r3, r0
 8007686:	461a      	mov	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	0800c880 	.word	0x0800c880

0800769c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_RTC_SetDate+0x26>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d004      	beq.n	80076c2 <HAL_RTC_SetDate+0x26>
 80076b8:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80076bc:	488e      	ldr	r0, [pc, #568]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 80076be:	f7fa fd06 	bl	80020ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7f1b      	ldrb	r3, [r3, #28]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_RTC_SetDate+0x32>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e10f      	b.n	80078ee <HAL_RTC_SetDate+0x252>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2202      	movs	r2, #2
 80076d8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10e      	bne.n	80076fe <HAL_RTC_SetDate+0x62>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	f023 0310 	bic.w	r3, r3, #16
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	330a      	adds	r3, #10
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d01c      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d018      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d014      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b04      	cmp	r3, #4
 800771c:	d010      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b05      	cmp	r3, #5
 8007724:	d00c      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b06      	cmp	r3, #6
 800772c:	d008      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b07      	cmp	r3, #7
 8007734:	d004      	beq.n	8007740 <HAL_RTC_SetDate+0xa4>
 8007736:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800773a:	486f      	ldr	r0, [pc, #444]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 800773c:	f7fa fcc7 	bl	80020ce <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d13f      	bne.n	80077c6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	2b63      	cmp	r3, #99	; 0x63
 800774c:	d904      	bls.n	8007758 <HAL_RTC_SetDate+0xbc>
 800774e:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8007752:	4869      	ldr	r0, [pc, #420]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 8007754:	f7fa fcbb 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_RTC_SetDate+0xcc>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b0c      	cmp	r3, #12
 8007766:	d904      	bls.n	8007772 <HAL_RTC_SetDate+0xd6>
 8007768:	f240 31cd 	movw	r1, #973	; 0x3cd
 800776c:	4862      	ldr	r0, [pc, #392]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 800776e:	f7fa fcae 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	789b      	ldrb	r3, [r3, #2]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_RTC_SetDate+0xe6>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	789b      	ldrb	r3, [r3, #2]
 800777e:	2b1f      	cmp	r3, #31
 8007780:	d904      	bls.n	800778c <HAL_RTC_SetDate+0xf0>
 8007782:	f240 31ce 	movw	r1, #974	; 0x3ce
 8007786:	485c      	ldr	r0, [pc, #368]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 8007788:	f7fa fca1 	bl	80020ce <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	78db      	ldrb	r3, [r3, #3]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fd3f 	bl	8008214 <RTC_ByteToBcd2>
 8007796:	4603      	mov	r3, r0
 8007798:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fd38 	bl	8008214 <RTC_ByteToBcd2>
 80077a4:	4603      	mov	r3, r0
 80077a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80077a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	789b      	ldrb	r3, [r3, #2]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fd30 	bl	8008214 <RTC_ByteToBcd2>
 80077b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80077b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e045      	b.n	8007852 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	78db      	ldrb	r3, [r3, #3]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fd40 	bl	8008250 <RTC_Bcd2ToByte>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b63      	cmp	r3, #99	; 0x63
 80077d4:	d904      	bls.n	80077e0 <HAL_RTC_SetDate+0x144>
 80077d6:	f240 31d7 	movw	r1, #983	; 0x3d7
 80077da:	4847      	ldr	r0, [pc, #284]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 80077dc:	f7fa fc77 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fd33 	bl	8008250 <RTC_Bcd2ToByte>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_RTC_SetDate+0x164>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fd2b 	bl	8008250 <RTC_Bcd2ToByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d904      	bls.n	800780a <HAL_RTC_SetDate+0x16e>
 8007800:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8007804:	483c      	ldr	r0, [pc, #240]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 8007806:	f7fa fc62 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	789b      	ldrb	r3, [r3, #2]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fd1e 	bl	8008250 <RTC_Bcd2ToByte>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_RTC_SetDate+0x18e>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	789b      	ldrb	r3, [r3, #2]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fd16 	bl	8008250 <RTC_Bcd2ToByte>
 8007824:	4603      	mov	r3, r0
 8007826:	2b1f      	cmp	r3, #31
 8007828:	d904      	bls.n	8007834 <HAL_RTC_SetDate+0x198>
 800782a:	f240 31d9 	movw	r1, #985	; 0x3d9
 800782e:	4832      	ldr	r0, [pc, #200]	; (80078f8 <HAL_RTC_SetDate+0x25c>)
 8007830:	f7fa fc4d 	bl	80020ce <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	78db      	ldrb	r3, [r3, #3]
 8007838:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007840:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007846:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	22ca      	movs	r2, #202	; 0xca
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2253      	movs	r2, #83	; 0x53
 8007860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fcaa 	bl	80081bc <RTC_EnterInitMode>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2204      	movs	r2, #4
 800787a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e033      	b.n	80078ee <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007890:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007894:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d111      	bne.n	80078d8 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 fc59 	bl	800816c <HAL_RTC_WaitForSynchro>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2204      	movs	r2, #4
 80078cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e00a      	b.n	80078ee <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	22ff      	movs	r2, #255	; 0xff
 80078de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
  }
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}
 80078f6:	bf00      	nop
 80078f8:	0800c880 	.word	0x0800c880

080078fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <HAL_RTC_GetDate+0x26>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d004      	beq.n	8007922 <HAL_RTC_GetDate+0x26>
 8007918:	f240 4126 	movw	r1, #1062	; 0x426
 800791c:	4824      	ldr	r0, [pc, #144]	; (80079b0 <HAL_RTC_GetDate+0xb4>)
 800791e:	f7fa fbd6 	bl	80020ce <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800792c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007930:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007954:	b2da      	uxtb	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	0b5b      	lsrs	r3, r3, #13
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11a      	bne.n	80079a6 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fc6b 	bl	8008250 <RTC_Bcd2ToByte>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fc62 	bl	8008250 <RTC_Bcd2ToByte>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fc59 	bl	8008250 <RTC_Bcd2ToByte>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	0800c880 	.word	0x0800c880

080079b4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b089      	sub	sp, #36	; 0x24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_RTC_SetAlarm_IT+0x2e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d004      	beq.n	80079e2 <HAL_RTC_SetAlarm_IT+0x2e>
 80079d8:	f240 5153 	movw	r1, #1363	; 0x553
 80079dc:	48a1      	ldr	r0, [pc, #644]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80079de:	f7fa fb76 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ea:	d009      	beq.n	8007a00 <HAL_RTC_SetAlarm_IT+0x4c>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f4:	d004      	beq.n	8007a00 <HAL_RTC_SetAlarm_IT+0x4c>
 80079f6:	f240 5154 	movw	r1, #1364	; 0x554
 80079fa:	489a      	ldr	r0, [pc, #616]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80079fc:	f7fa fb67 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <HAL_RTC_SetAlarm_IT+0x62>
 8007a0c:	f240 5155 	movw	r1, #1365	; 0x555
 8007a10:	4894      	ldr	r0, [pc, #592]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007a12:	f7fa fb5c 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_RTC_SetAlarm_IT+0x7e>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a26:	d004      	beq.n	8007a32 <HAL_RTC_SetAlarm_IT+0x7e>
 8007a28:	f240 5156 	movw	r1, #1366	; 0x556
 8007a2c:	488d      	ldr	r0, [pc, #564]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007a2e:	f7fa fb4e 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3a:	d304      	bcc.n	8007a46 <HAL_RTC_SetAlarm_IT+0x92>
 8007a3c:	f240 5157 	movw	r1, #1367	; 0x557
 8007a40:	4888      	ldr	r0, [pc, #544]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007a42:	f7fa fb44 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d04f      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a56:	d04a      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a60:	d045      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a6a:	d040      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a74:	d03b      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a7e:	d036      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007a88:	d031      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8007a92:	d02c      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a9c:	d027      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8007aa6:	d022      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8007ab0:	d01d      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8007aba:	d018      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ac4:	d013      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8007ace:	d00e      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8007ad8:	d009      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ae2:	d004      	beq.n	8007aee <HAL_RTC_SetAlarm_IT+0x13a>
 8007ae4:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8007ae8:	485e      	ldr	r0, [pc, #376]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007aea:	f7fa faf0 	bl	80020ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	7f1b      	ldrb	r3, [r3, #28]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <HAL_RTC_SetAlarm_IT+0x146>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e242      	b.n	8007f80 <HAL_RTC_SetAlarm_IT+0x5cc>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2202      	movs	r2, #2
 8007b04:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f040 80ad 	bne.w	8007c68 <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d01a      	beq.n	8007b52 <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_RTC_SetAlarm_IT+0x178>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b0c      	cmp	r3, #12
 8007b2a:	d904      	bls.n	8007b36 <HAL_RTC_SetAlarm_IT+0x182>
 8007b2c:	f240 5163 	movw	r1, #1379	; 0x563
 8007b30:	484c      	ldr	r0, [pc, #304]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007b32:	f7fa facc 	bl	80020ce <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	78db      	ldrb	r3, [r3, #3]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d015      	beq.n	8007b6a <HAL_RTC_SetAlarm_IT+0x1b6>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	78db      	ldrb	r3, [r3, #3]
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d011      	beq.n	8007b6a <HAL_RTC_SetAlarm_IT+0x1b6>
 8007b46:	f240 5164 	movw	r1, #1380	; 0x564
 8007b4a:	4846      	ldr	r0, [pc, #280]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007b4c:	f7fa fabf 	bl	80020ce <assert_failed>
 8007b50:	e00b      	b.n	8007b6a <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b17      	cmp	r3, #23
 8007b5e:	d904      	bls.n	8007b6a <HAL_RTC_SetAlarm_IT+0x1b6>
 8007b60:	f240 5169 	movw	r1, #1385	; 0x569
 8007b64:	483f      	ldr	r0, [pc, #252]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007b66:	f7fa fab2 	bl	80020ce <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b3b      	cmp	r3, #59	; 0x3b
 8007b70:	d904      	bls.n	8007b7c <HAL_RTC_SetAlarm_IT+0x1c8>
 8007b72:	f240 516b 	movw	r1, #1387	; 0x56b
 8007b76:	483b      	ldr	r0, [pc, #236]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007b78:	f7fa faa9 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	2b3b      	cmp	r3, #59	; 0x3b
 8007b82:	d904      	bls.n	8007b8e <HAL_RTC_SetAlarm_IT+0x1da>
 8007b84:	f240 516c 	movw	r1, #1388	; 0x56c
 8007b88:	4836      	ldr	r0, [pc, #216]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007b8a:	f7fa faa0 	bl	80020ce <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10f      	bne.n	8007bb6 <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <HAL_RTC_SetAlarm_IT+0x1f6>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ba6:	2b1f      	cmp	r3, #31
 8007ba8:	d92d      	bls.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007baa:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8007bae:	482d      	ldr	r0, [pc, #180]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007bb0:	f7fa fa8d 	bl	80020ce <assert_failed>
 8007bb4:	e027      	b.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d022      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d01d      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d018      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d013      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	d00e      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	d009      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d004      	beq.n	8007c06 <HAL_RTC_SetAlarm_IT+0x252>
 8007bfc:	f240 5174 	movw	r1, #1396	; 0x574
 8007c00:	4818      	ldr	r0, [pc, #96]	; (8007c64 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007c02:	f7fa fa64 	bl	80020ce <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fb02 	bl	8008214 <RTC_ByteToBcd2>
 8007c10:	4603      	mov	r3, r0
 8007c12:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fafb 	bl	8008214 <RTC_ByteToBcd2>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007c22:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 faf3 	bl	8008214 <RTC_ByteToBcd2>
 8007c2e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007c30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c3a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fae5 	bl	8008214 <RTC_ByteToBcd2>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007c4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007c56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	e0d0      	b.n	8007e04 <HAL_RTC_SetAlarm_IT+0x450>
 8007c62:	bf00      	nop
 8007c64:	0800c880 	.word	0x0800c880
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d022      	beq.n	8007cbc <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 fae8 	bl	8008250 <RTC_Bcd2ToByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <HAL_RTC_SetAlarm_IT+0x2e2>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fae0 	bl	8008250 <RTC_Bcd2ToByte>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b0c      	cmp	r3, #12
 8007c94:	d904      	bls.n	8007ca0 <HAL_RTC_SetAlarm_IT+0x2ec>
 8007c96:	f240 5182 	movw	r1, #1410	; 0x582
 8007c9a:	489d      	ldr	r0, [pc, #628]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007c9c:	f7fa fa17 	bl	80020ce <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	78db      	ldrb	r3, [r3, #3]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d019      	beq.n	8007cdc <HAL_RTC_SetAlarm_IT+0x328>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d015      	beq.n	8007cdc <HAL_RTC_SetAlarm_IT+0x328>
 8007cb0:	f240 5183 	movw	r1, #1411	; 0x583
 8007cb4:	4896      	ldr	r0, [pc, #600]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007cb6:	f7fa fa0a 	bl	80020ce <assert_failed>
 8007cba:	e00f      	b.n	8007cdc <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fac2 	bl	8008250 <RTC_Bcd2ToByte>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b17      	cmp	r3, #23
 8007cd0:	d904      	bls.n	8007cdc <HAL_RTC_SetAlarm_IT+0x328>
 8007cd2:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8007cd6:	488e      	ldr	r0, [pc, #568]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007cd8:	f7fa f9f9 	bl	80020ce <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fab5 	bl	8008250 <RTC_Bcd2ToByte>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b3b      	cmp	r3, #59	; 0x3b
 8007cea:	d904      	bls.n	8007cf6 <HAL_RTC_SetAlarm_IT+0x342>
 8007cec:	f240 518b 	movw	r1, #1419	; 0x58b
 8007cf0:	4887      	ldr	r0, [pc, #540]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007cf2:	f7fa f9ec 	bl	80020ce <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	789b      	ldrb	r3, [r3, #2]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 faa8 	bl	8008250 <RTC_Bcd2ToByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b3b      	cmp	r3, #59	; 0x3b
 8007d04:	d904      	bls.n	8007d10 <HAL_RTC_SetAlarm_IT+0x35c>
 8007d06:	f240 518c 	movw	r1, #1420	; 0x58c
 8007d0a:	4881      	ldr	r0, [pc, #516]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007d0c:	f7fa f9df 	bl	80020ce <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d117      	bne.n	8007d48 <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fa96 	bl	8008250 <RTC_Bcd2ToByte>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <HAL_RTC_SetAlarm_IT+0x388>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fa8d 	bl	8008250 <RTC_Bcd2ToByte>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b1f      	cmp	r3, #31
 8007d3a:	d949      	bls.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007d3c:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8007d40:	4873      	ldr	r0, [pc, #460]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007d42:	f7fa f9c4 	bl	80020ce <assert_failed>
 8007d46:	e043      	b.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fa7e 	bl	8008250 <RTC_Bcd2ToByte>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d03a      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fa75 	bl	8008250 <RTC_Bcd2ToByte>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d031      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fa6c 	bl	8008250 <RTC_Bcd2ToByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d028      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fa63 	bl	8008250 <RTC_Bcd2ToByte>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d01f      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fa5a 	bl	8008250 <RTC_Bcd2ToByte>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d016      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fa51 	bl	8008250 <RTC_Bcd2ToByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b06      	cmp	r3, #6
 8007db2:	d00d      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fa48 	bl	8008250 <RTC_Bcd2ToByte>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	d004      	beq.n	8007dd0 <HAL_RTC_SetAlarm_IT+0x41c>
 8007dc6:	f240 5194 	movw	r1, #1428	; 0x594
 8007dca:	4851      	ldr	r0, [pc, #324]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007dcc:	f7fa f97f 	bl	80020ce <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ddc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007de2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	78db      	ldrb	r3, [r3, #3]
 8007de8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007dea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007df2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007df4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007dfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	22ca      	movs	r2, #202	; 0xca
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2253      	movs	r2, #83	; 0x53
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e28:	d148      	bne.n	8007ebc <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e38:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007e4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e4c:	f7fa fd3e 	bl	80028cc <HAL_GetTick>
 8007e50:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007e52:	e013      	b.n	8007e7c <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e54:	f7fa fd3a 	bl	80028cc <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e62:	d90b      	bls.n	8007e7c <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	22ff      	movs	r2, #255	; 0xff
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e081      	b.n	8007f80 <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0e4      	beq.n	8007e54 <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007eb8:	609a      	str	r2, [r3, #8]
 8007eba:	e04a      	b.n	8007f52 <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007eca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007edc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ede:	f7fa fcf5 	bl	80028cc <HAL_GetTick>
 8007ee2:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ee4:	e016      	b.n	8007f14 <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ee6:	f7fa fcf1 	bl	80028cc <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef4:	d90e      	bls.n	8007f14 <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	22ff      	movs	r2, #255	; 0xff
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2203      	movs	r2, #3
 8007f02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e038      	b.n	8007f80 <HAL_RTC_SetAlarm_IT+0x5cc>
 8007f0e:	bf00      	nop
 8007f10:	0800c880 	.word	0x0800c880
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0e1      	beq.n	8007ee6 <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f40:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f50:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007f52:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5c:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	4a09      	ldr	r2, [pc, #36]	; (8007f88 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f68:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	22ff      	movs	r2, #255	; 0xff
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3724      	adds	r7, #36	; 0x24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}
 8007f88:	40010400 	.word	0x40010400

08007f8c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_RTC_GetAlarm+0x2c>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d004      	beq.n	8007fb8 <HAL_RTC_GetAlarm+0x2c>
 8007fae:	f240 6166 	movw	r1, #1638	; 0x666
 8007fb2:	484a      	ldr	r0, [pc, #296]	; (80080dc <HAL_RTC_GetAlarm+0x150>)
 8007fb4:	f7fa f88b 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_ALARM(Alarm));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d008      	beq.n	8007fd2 <HAL_RTC_GetAlarm+0x46>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc6:	d004      	beq.n	8007fd2 <HAL_RTC_GetAlarm+0x46>
 8007fc8:	f240 6167 	movw	r1, #1639	; 0x667
 8007fcc:	4843      	ldr	r0, [pc, #268]	; (80080dc <HAL_RTC_GetAlarm+0x150>)
 8007fce:	f7fa f87e 	bl	80020ce <assert_failed>

  if (Alarm == RTC_ALARM_A)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd8:	d10e      	bne.n	8007ff8 <HAL_RTC_GetAlarm+0x6c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	e00d      	b.n	8008014 <HAL_RTC_GetAlarm+0x88>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffe:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008012:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802e:	b2da      	uxtb	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803c:	b2da      	uxtb	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	0c1b      	lsrs	r3, r3, #16
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	b2da      	uxtb	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	0e1b      	lsrs	r3, r3, #24
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008062:	b2da      	uxtb	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d125      	bne.n	80080d0 <HAL_RTC_GetAlarm+0x144>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f8e1 	bl	8008250 <RTC_Bcd2ToByte>
 800808e:	4603      	mov	r3, r0
 8008090:	461a      	mov	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f8d8 	bl	8008250 <RTC_Bcd2ToByte>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f8cf 	bl	8008250 <RTC_Bcd2ToByte>
 80080b2:	4603      	mov	r3, r0
 80080b4:	461a      	mov	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f8c5 	bl	8008250 <RTC_Bcd2ToByte>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	0800c880 	.word	0x0800c880

080080e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7f8 f8d3 	bl	80002b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800811a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d012      	beq.n	8008150 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa3b 	bl	80085b4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	b2da      	uxtb	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800814e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008156:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	775a      	strb	r2, [r3, #29]
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	40010400 	.word	0x40010400

0800816c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008186:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008188:	f7fa fba0 	bl	80028cc <HAL_GetTick>
 800818c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800818e:	e009      	b.n	80081a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008190:	f7fa fb9c 	bl	80028cc <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800819e:	d901      	bls.n	80081a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e007      	b.n	80081b4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0ee      	beq.n	8008190 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d119      	bne.n	800820a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f04f 32ff 	mov.w	r2, #4294967295
 80081de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081e0:	f7fa fb74 	bl	80028cc <HAL_GetTick>
 80081e4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081e6:	e009      	b.n	80081fc <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081e8:	f7fa fb70 	bl	80028cc <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081f6:	d901      	bls.n	80081fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e007      	b.n	800820c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ee      	beq.n	80081e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008222:	e005      	b.n	8008230 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	3b0a      	subs	r3, #10
 800822e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	2b09      	cmp	r3, #9
 8008234:	d8f6      	bhi.n	8008224 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	b2da      	uxtb	r2, r3
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	4313      	orrs	r3, r2
 8008242:	b2db      	uxtb	r3, r3
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	091b      	lsrs	r3, r3, #4
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	b2da      	uxtb	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	4413      	add	r3, r2
 800827e:	b2db      	uxtb	r3, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d013      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d010      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d00d      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d00a      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d007      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b06      	cmp	r3, #6
 80082be:	d004      	beq.n	80082ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 80082c0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80082c4:	485a      	ldr	r0, [pc, #360]	; (8008430 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80082c6:	f7f9 ff02 	bl	80020ce <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d0:	d304      	bcc.n	80082dc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80082d2:	f240 3161 	movw	r1, #865	; 0x361
 80082d6:	4856      	ldr	r0, [pc, #344]	; (8008430 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80082d8:	f7f9 fef9 	bl	80020ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	7f1b      	ldrb	r3, [r3, #28]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e09e      	b.n	8008426 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2202      	movs	r2, #2
 80082f2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	22ca      	movs	r2, #202	; 0xca
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2253      	movs	r2, #83	; 0x53
 8008302:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01e      	beq.n	8008350 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8008312:	f7fa fadb 	bl	80028cc <HAL_GetTick>
 8008316:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8008318:	e013      	b.n	8008342 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800831a:	f7fa fad7 	bl	80028cc <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008328:	d90b      	bls.n	8008342 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ff      	movs	r2, #255	; 0xff
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2203      	movs	r2, #3
 8008336:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e071      	b.n	8008426 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e4      	bne.n	800831a <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008370:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008372:	f7fa faab 	bl	80028cc <HAL_GetTick>
 8008376:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008378:	e013      	b.n	80083a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800837a:	f7fa faa7 	bl	80028cc <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008388:	d90b      	bls.n	80083a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	22ff      	movs	r2, #255	; 0xff
 8008390:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2203      	movs	r2, #3
 8008396:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e041      	b.n	8008426 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0e4      	beq.n	800837a <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0207 	bic.w	r2, r2, #7
 80083c6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6899      	ldr	r1, [r3, #8]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80083d8:	4b16      	ldr	r3, [pc, #88]	; (8008434 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a15      	ldr	r2, [pc, #84]	; (8008434 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e2:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80083e4:	4b13      	ldr	r3, [pc, #76]	; (8008434 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a12      	ldr	r2, [pc, #72]	; (8008434 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80083ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ee:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fe:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800840e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	0800c8b8 	.word	0x0800c8b8
 8008434:	40010400 	.word	0x40010400

08008438 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7f1b      	ldrb	r3, [r3, #28]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800844c:	2302      	movs	r3, #2
 800844e:	e047      	b.n	80084e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	22ca      	movs	r2, #202	; 0xca
 8008462:	625a      	str	r2, [r3, #36]	; 0x24
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2253      	movs	r2, #83	; 0x53
 800846a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800848a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800848c:	f7fa fa1e 	bl	80028cc <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008492:	e013      	b.n	80084bc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008494:	f7fa fa1a 	bl	80028cc <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084a2:	d90b      	bls.n	80084bc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	22ff      	movs	r2, #255	; 0xff
 80084aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2203      	movs	r2, #3
 80084b0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e011      	b.n	80084e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0e4      	beq.n	8008494 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	22ff      	movs	r2, #255	; 0xff
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7f8 fff2 	bl	80014e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	b2da      	uxtb	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008514:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8008518:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800851c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	775a      	strb	r2, [r3, #29]
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40010400 	.word	0x40010400

08008530 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b0f      	cmp	r3, #15
 8008544:	d904      	bls.n	8008550 <HAL_RTCEx_BKUPWrite+0x20>
 8008546:	f240 4171 	movw	r1, #1137	; 0x471
 800854a:	4809      	ldr	r0, [pc, #36]	; (8008570 <HAL_RTCEx_BKUPWrite+0x40>)
 800854c:	f7f9 fdbf 	bl	80020ce <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3350      	adds	r3, #80	; 0x50
 8008556:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
}
 8008568:	bf00      	nop
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0800c8b8 	.word	0x0800c8b8

08008574 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b0f      	cmp	r3, #15
 8008586:	d904      	bls.n	8008592 <HAL_RTCEx_BKUPRead+0x1e>
 8008588:	f240 4187 	movw	r1, #1159	; 0x487
 800858c:	4808      	ldr	r0, [pc, #32]	; (80085b0 <HAL_RTCEx_BKUPRead+0x3c>)
 800858e:	f7f9 fd9e 	bl	80020ce <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3350      	adds	r3, #80	; 0x50
 8008598:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	0800c8b8 	.word	0x0800c8b8

080085b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e0be      	b.n	8008758 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a60      	ldr	r2, [pc, #384]	; (8008760 <HAL_TIM_Base_Init+0x198>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d036      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ec:	d031      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a5c      	ldr	r2, [pc, #368]	; (8008764 <HAL_TIM_Base_Init+0x19c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d02c      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a5a      	ldr	r2, [pc, #360]	; (8008768 <HAL_TIM_Base_Init+0x1a0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d027      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a59      	ldr	r2, [pc, #356]	; (800876c <HAL_TIM_Base_Init+0x1a4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d022      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a57      	ldr	r2, [pc, #348]	; (8008770 <HAL_TIM_Base_Init+0x1a8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01d      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a56      	ldr	r2, [pc, #344]	; (8008774 <HAL_TIM_Base_Init+0x1ac>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d018      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a54      	ldr	r2, [pc, #336]	; (8008778 <HAL_TIM_Base_Init+0x1b0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a53      	ldr	r2, [pc, #332]	; (800877c <HAL_TIM_Base_Init+0x1b4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00e      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a51      	ldr	r2, [pc, #324]	; (8008780 <HAL_TIM_Base_Init+0x1b8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a50      	ldr	r2, [pc, #320]	; (8008784 <HAL_TIM_Base_Init+0x1bc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <HAL_TIM_Base_Init+0x8a>
 8008648:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800864c:	484e      	ldr	r0, [pc, #312]	; (8008788 <HAL_TIM_Base_Init+0x1c0>)
 800864e:	f7f9 fd3e 	bl	80020ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d014      	beq.n	8008684 <HAL_TIM_Base_Init+0xbc>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2b10      	cmp	r3, #16
 8008660:	d010      	beq.n	8008684 <HAL_TIM_Base_Init+0xbc>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b20      	cmp	r3, #32
 8008668:	d00c      	beq.n	8008684 <HAL_TIM_Base_Init+0xbc>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d008      	beq.n	8008684 <HAL_TIM_Base_Init+0xbc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b60      	cmp	r3, #96	; 0x60
 8008678:	d004      	beq.n	8008684 <HAL_TIM_Base_Init+0xbc>
 800867a:	f240 111b 	movw	r1, #283	; 0x11b
 800867e:	4842      	ldr	r0, [pc, #264]	; (8008788 <HAL_TIM_Base_Init+0x1c0>)
 8008680:	f7f9 fd25 	bl	80020ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <HAL_TIM_Base_Init+0xe2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008694:	d009      	beq.n	80086aa <HAL_TIM_Base_Init+0xe2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800869e:	d004      	beq.n	80086aa <HAL_TIM_Base_Init+0xe2>
 80086a0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80086a4:	4838      	ldr	r0, [pc, #224]	; (8008788 <HAL_TIM_Base_Init+0x1c0>)
 80086a6:	f7f9 fd12 	bl	80020ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <HAL_TIM_Base_Init+0xfc>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b80      	cmp	r3, #128	; 0x80
 80086b8:	d004      	beq.n	80086c4 <HAL_TIM_Base_Init+0xfc>
 80086ba:	f240 111d 	movw	r1, #285	; 0x11d
 80086be:	4832      	ldr	r0, [pc, #200]	; (8008788 <HAL_TIM_Base_Init+0x1c0>)
 80086c0:	f7f9 fd05 	bl	80020ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7f9 ffb7 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f000 fa49 	bl	8008b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40012c00 	.word	0x40012c00
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40001000 	.word	0x40001000
 8008770:	40001400 	.word	0x40001400
 8008774:	40013400 	.word	0x40013400
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800
 8008784:	40015000 	.word	0x40015000
 8008788:	0800c8f4 	.word	0x0800c8f4

0800878c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a46      	ldr	r2, [pc, #280]	; (80088b4 <HAL_TIM_Base_Start+0x128>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d036      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a6:	d031      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a42      	ldr	r2, [pc, #264]	; (80088b8 <HAL_TIM_Base_Start+0x12c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d02c      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a41      	ldr	r2, [pc, #260]	; (80088bc <HAL_TIM_Base_Start+0x130>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d027      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a3f      	ldr	r2, [pc, #252]	; (80088c0 <HAL_TIM_Base_Start+0x134>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d022      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a3e      	ldr	r2, [pc, #248]	; (80088c4 <HAL_TIM_Base_Start+0x138>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d01d      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a3c      	ldr	r2, [pc, #240]	; (80088c8 <HAL_TIM_Base_Start+0x13c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d018      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a3b      	ldr	r2, [pc, #236]	; (80088cc <HAL_TIM_Base_Start+0x140>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d013      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a39      	ldr	r2, [pc, #228]	; (80088d0 <HAL_TIM_Base_Start+0x144>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00e      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a38      	ldr	r2, [pc, #224]	; (80088d4 <HAL_TIM_Base_Start+0x148>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d009      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a36      	ldr	r2, [pc, #216]	; (80088d8 <HAL_TIM_Base_Start+0x14c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIM_Base_Start+0x80>
 8008802:	f240 119b 	movw	r1, #411	; 0x19b
 8008806:	4835      	ldr	r0, [pc, #212]	; (80088dc <HAL_TIM_Base_Start+0x150>)
 8008808:	f7f9 fc61 	bl	80020ce <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e047      	b.n	80088ac <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a22      	ldr	r2, [pc, #136]	; (80088b4 <HAL_TIM_Base_Start+0x128>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01d      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008836:	d018      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <HAL_TIM_Base_Start+0x12c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <HAL_TIM_Base_Start+0x130>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00e      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <HAL_TIM_Base_Start+0x13c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d009      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_TIM_Base_Start+0x140>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d004      	beq.n	800886a <HAL_TIM_Base_Start+0xde>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1c      	ldr	r2, [pc, #112]	; (80088d8 <HAL_TIM_Base_Start+0x14c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d115      	bne.n	8008896 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <HAL_TIM_Base_Start+0x154>)
 8008872:	4013      	ands	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b06      	cmp	r3, #6
 800887a:	d015      	beq.n	80088a8 <HAL_TIM_Base_Start+0x11c>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008882:	d011      	beq.n	80088a8 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008894:	e008      	b.n	80088a8 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e000      	b.n	80088aa <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40001000 	.word	0x40001000
 80088c4:	40001400 	.word	0x40001400
 80088c8:	40013400 	.word	0x40013400
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800
 80088d8:	40015000 	.word	0x40015000
 80088dc:	0800c8f4 	.word	0x0800c8f4
 80088e0:	00010007 	.word	0x00010007

080088e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d122      	bne.n	8008940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b02      	cmp	r3, #2
 8008906:	d11b      	bne.n	8008940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0202 	mvn.w	r2, #2
 8008910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f90f 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 800892c:	e005      	b.n	800893a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f901 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f912 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b04      	cmp	r3, #4
 800894c:	d122      	bne.n	8008994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b04      	cmp	r3, #4
 800895a:	d11b      	bne.n	8008994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0204 	mvn.w	r2, #4
 8008964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8e5 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 8008980:	e005      	b.n	800898e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8d7 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8e8 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f003 0308 	and.w	r3, r3, #8
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d122      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d11b      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0208 	mvn.w	r2, #8
 80089b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f8bb 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8ad 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f8be 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d122      	bne.n	8008a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d11b      	bne.n	8008a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0210 	mvn.w	r2, #16
 8008a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2208      	movs	r2, #8
 8008a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f891 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 8008a28:	e005      	b.n	8008a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f883 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f894 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d10e      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d107      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0201 	mvn.w	r2, #1
 8008a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f85d 	bl	8008b22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d10e      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d107      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fa70 	bl	8008f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa2:	d10e      	bne.n	8008ac2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b80      	cmp	r3, #128	; 0x80
 8008ab0:	d107      	bne.n	8008ac2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fa63 	bl	8008f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008acc:	2b40      	cmp	r3, #64	; 0x40
 8008ace:	d10e      	bne.n	8008aee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d107      	bne.n	8008aee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f842 	bl	8008b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	d10e      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d107      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f06f 0220 	mvn.w	r2, #32
 8008b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fa23 	bl	8008f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
	...

08008b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a42      	ldr	r2, [pc, #264]	; (8008ca4 <TIM_Base_SetConfig+0x11c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d013      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba6:	d00f      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a3f      	ldr	r2, [pc, #252]	; (8008ca8 <TIM_Base_SetConfig+0x120>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00b      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a3e      	ldr	r2, [pc, #248]	; (8008cac <TIM_Base_SetConfig+0x124>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d007      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a3d      	ldr	r2, [pc, #244]	; (8008cb0 <TIM_Base_SetConfig+0x128>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a3c      	ldr	r2, [pc, #240]	; (8008cb4 <TIM_Base_SetConfig+0x12c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d108      	bne.n	8008bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a31      	ldr	r2, [pc, #196]	; (8008ca4 <TIM_Base_SetConfig+0x11c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d01f      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be8:	d01b      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2e      	ldr	r2, [pc, #184]	; (8008ca8 <TIM_Base_SetConfig+0x120>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d017      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a2d      	ldr	r2, [pc, #180]	; (8008cac <TIM_Base_SetConfig+0x124>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d013      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2c      	ldr	r2, [pc, #176]	; (8008cb0 <TIM_Base_SetConfig+0x128>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00f      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a2c      	ldr	r2, [pc, #176]	; (8008cb8 <TIM_Base_SetConfig+0x130>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d00b      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a2b      	ldr	r2, [pc, #172]	; (8008cbc <TIM_Base_SetConfig+0x134>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d007      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a2a      	ldr	r2, [pc, #168]	; (8008cc0 <TIM_Base_SetConfig+0x138>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d003      	beq.n	8008c22 <TIM_Base_SetConfig+0x9a>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a25      	ldr	r2, [pc, #148]	; (8008cb4 <TIM_Base_SetConfig+0x12c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d108      	bne.n	8008c34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689a      	ldr	r2, [r3, #8]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a12      	ldr	r2, [pc, #72]	; (8008ca4 <TIM_Base_SetConfig+0x11c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <TIM_Base_SetConfig+0x100>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <TIM_Base_SetConfig+0x128>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00f      	beq.n	8008c88 <TIM_Base_SetConfig+0x100>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a13      	ldr	r2, [pc, #76]	; (8008cb8 <TIM_Base_SetConfig+0x130>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00b      	beq.n	8008c88 <TIM_Base_SetConfig+0x100>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a12      	ldr	r2, [pc, #72]	; (8008cbc <TIM_Base_SetConfig+0x134>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d007      	beq.n	8008c88 <TIM_Base_SetConfig+0x100>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a11      	ldr	r2, [pc, #68]	; (8008cc0 <TIM_Base_SetConfig+0x138>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <TIM_Base_SetConfig+0x100>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a0c      	ldr	r2, [pc, #48]	; (8008cb4 <TIM_Base_SetConfig+0x12c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d103      	bne.n	8008c90 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	615a      	str	r2, [r3, #20]
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	40012c00 	.word	0x40012c00
 8008ca8:	40000400 	.word	0x40000400
 8008cac:	40000800 	.word	0x40000800
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	40015000 	.word	0x40015000
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40014400 	.word	0x40014400
 8008cc0:	40014800 	.word	0x40014800

08008cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a9a      	ldr	r2, [pc, #616]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d02c      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce0:	d027      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a96      	ldr	r2, [pc, #600]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d022      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a94      	ldr	r2, [pc, #592]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d01d      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a93      	ldr	r2, [pc, #588]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d018      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a91      	ldr	r2, [pc, #580]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d013      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a90      	ldr	r2, [pc, #576]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00e      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a8e      	ldr	r2, [pc, #568]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d009      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a8d      	ldr	r2, [pc, #564]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d004      	beq.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d28:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8008d2c:	488b      	ldr	r0, [pc, #556]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008d2e:	f7f9 f9ce 	bl	80020ce <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d020      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d01c      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d018      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b30      	cmp	r3, #48	; 0x30
 8008d50:	d014      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d010      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b50      	cmp	r3, #80	; 0x50
 8008d60:	d00c      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b60      	cmp	r3, #96	; 0x60
 8008d68:	d008      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b70      	cmp	r3, #112	; 0x70
 8008d70:	d004      	beq.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d72:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8008d76:	4879      	ldr	r0, [pc, #484]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008d78:	f7f9 f9a9 	bl	80020ce <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2b80      	cmp	r3, #128	; 0x80
 8008d82:	d008      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008d8c:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008d90:	4872      	ldr	r0, [pc, #456]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008d92:	f7f9 f99c 	bl	80020ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0c6      	b.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a5c      	ldr	r2, [pc, #368]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d009      	beq.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a5f      	ldr	r2, [pc, #380]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d004      	beq.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a5e      	ldr	r2, [pc, #376]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d161      	bne.n	8008ea6 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d054      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df2:	d04f      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dfc:	d04a      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e06:	d045      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e10:	d040      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008e1a:	d03b      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e24:	d036      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e2e:	d031      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8008e38:	d02c      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e42:	d027      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8008e4c:	d022      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e56:	d01d      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8008e60:	d018      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e6a:	d013      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8008e74:	d00e      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8008e7e:	d009      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8008e88:	d004      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008e8a:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008e8e:	4833      	ldr	r0, [pc, #204]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008e90:	f7f9 f91d 	bl	80020ce <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d01d      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed2:	d018      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d013      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a18      	ldr	r2, [pc, #96]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00e      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d009      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a15      	ldr	r2, [pc, #84]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10c      	bne.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	40012c00 	.word	0x40012c00
 8008f40:	40000400 	.word	0x40000400
 8008f44:	40000800 	.word	0x40000800
 8008f48:	40001000 	.word	0x40001000
 8008f4c:	40001400 	.word	0x40001400
 8008f50:	40013400 	.word	0x40013400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	40015000 	.word	0x40015000
 8008f5c:	0800c92c 	.word	0x0800c92c

08008f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e077      	b.n	800909e <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d014      	beq.n	8008fe0 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a3b      	ldr	r2, [pc, #236]	; (80090a8 <HAL_UART_Init+0x10c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d02d      	beq.n	800901c <HAL_UART_Init+0x80>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a39      	ldr	r2, [pc, #228]	; (80090ac <HAL_UART_Init+0x110>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d028      	beq.n	800901c <HAL_UART_Init+0x80>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a38      	ldr	r2, [pc, #224]	; (80090b0 <HAL_UART_Init+0x114>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d023      	beq.n	800901c <HAL_UART_Init+0x80>
 8008fd4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008fd8:	4836      	ldr	r0, [pc, #216]	; (80090b4 <HAL_UART_Init+0x118>)
 8008fda:	f7f9 f878 	bl	80020ce <assert_failed>
 8008fde:	e01d      	b.n	800901c <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a30      	ldr	r2, [pc, #192]	; (80090a8 <HAL_UART_Init+0x10c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d018      	beq.n	800901c <HAL_UART_Init+0x80>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2f      	ldr	r2, [pc, #188]	; (80090ac <HAL_UART_Init+0x110>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d013      	beq.n	800901c <HAL_UART_Init+0x80>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a2d      	ldr	r2, [pc, #180]	; (80090b0 <HAL_UART_Init+0x114>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00e      	beq.n	800901c <HAL_UART_Init+0x80>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a2d      	ldr	r2, [pc, #180]	; (80090b8 <HAL_UART_Init+0x11c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d009      	beq.n	800901c <HAL_UART_Init+0x80>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a2b      	ldr	r2, [pc, #172]	; (80090bc <HAL_UART_Init+0x120>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_UART_Init+0x80>
 8009012:	f240 1131 	movw	r1, #305	; 0x131
 8009016:	4827      	ldr	r0, [pc, #156]	; (80090b4 <HAL_UART_Init+0x118>)
 8009018:	f7f9 f859 	bl	80020ce <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009020:	2b00      	cmp	r3, #0
 8009022:	d106      	bne.n	8009032 <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7f9 fb7f 	bl	8002730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2224      	movs	r2, #36	; 0x24
 8009036:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fbe9 	bl	8009820 <UART_SetConfig>
 800904e:	4603      	mov	r3, r0
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e022      	b.n	800909e <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fe41 	bl	8009ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009074:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009084:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0201 	orr.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 ff74 	bl	8009f84 <UART_CheckIdleState>
 800909c:	4603      	mov	r3, r0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40013800 	.word	0x40013800
 80090ac:	40004400 	.word	0x40004400
 80090b0:	40004800 	.word	0x40004800
 80090b4:	0800c968 	.word	0x0800c968
 80090b8:	40004c00 	.word	0x40004c00
 80090bc:	40005000 	.word	0x40005000

080090c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b08b      	sub	sp, #44	; 0x2c
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d156      	bne.n	8009184 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_UART_Transmit_IT+0x22>
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e04f      	b.n	8009186 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_UART_Transmit_IT+0x34>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e048      	b.n	8009186 <HAL_UART_Transmit_IT+0xc6>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2221      	movs	r2, #33	; 0x21
 8009124:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912e:	d107      	bne.n	8009140 <HAL_UART_Transmit_IT+0x80>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a16      	ldr	r2, [pc, #88]	; (8009194 <HAL_UART_Transmit_IT+0xd4>)
 800913c:	669a      	str	r2, [r3, #104]	; 0x68
 800913e:	e002      	b.n	8009146 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a15      	ldr	r2, [pc, #84]	; (8009198 <HAL_UART_Transmit_IT+0xd8>)
 8009144:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	613b      	str	r3, [r7, #16]
   return(result);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	623b      	str	r3, [r7, #32]
 800916e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	6a3a      	ldr	r2, [r7, #32]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	61bb      	str	r3, [r7, #24]
   return(result);
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e6      	bne.n	800914e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	e000      	b.n	8009186 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009184:	2302      	movs	r3, #2
  }
}
 8009186:	4618      	mov	r0, r3
 8009188:	372c      	adds	r7, #44	; 0x2c
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	0800a4a3 	.word	0x0800a4a3
 8009198:	0800a3eb 	.word	0x0800a3eb

0800919c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d13d      	bne.n	800922e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_UART_Receive_IT+0x22>
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e036      	b.n	8009230 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_UART_Receive_IT+0x34>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e02f      	b.n	8009230 <HAL_UART_Receive_IT+0x94>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d018      	beq.n	800921e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	613b      	str	r3, [r7, #16]
   return(result);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	623b      	str	r3, [r7, #32]
 800920c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	69f9      	ldr	r1, [r7, #28]
 8009210:	6a3a      	ldr	r2, [r7, #32]
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	61bb      	str	r3, [r7, #24]
   return(result);
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 ffbb 	bl	800a1a0 <UART_Start_Receive_IT>
 800922a:	4603      	mov	r3, r0
 800922c:	e000      	b.n	8009230 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800922e:	2302      	movs	r3, #2
  }
}
 8009230:	4618      	mov	r0, r3
 8009232:	3728      	adds	r7, #40	; 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b0ba      	sub	sp, #232	; 0xe8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800925e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009262:	f640 030f 	movw	r3, #2063	; 0x80f
 8009266:	4013      	ands	r3, r2
 8009268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800926c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d115      	bne.n	80092a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00f      	beq.n	80092a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 82a3 	beq.w	80097dc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
      }
      return;
 800929e:	e29d      	b.n	80097dc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8117 	beq.w	80094d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80092aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d106      	bne.n	80092c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80092b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80092ba:	4b85      	ldr	r3, [pc, #532]	; (80094d0 <HAL_UART_IRQHandler+0x298>)
 80092bc:	4013      	ands	r3, r2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 810a 	beq.w	80094d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d011      	beq.n	80092f4 <HAL_UART_IRQHandler+0xbc>
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ea:	f043 0201 	orr.w	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d011      	beq.n	8009324 <HAL_UART_IRQHandler+0xec>
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2202      	movs	r2, #2
 8009312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800931a:	f043 0204 	orr.w	r2, r3, #4
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	d011      	beq.n	8009354 <HAL_UART_IRQHandler+0x11c>
 8009330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2204      	movs	r2, #4
 8009342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800934a:	f043 0202 	orr.w	r2, r3, #2
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	2b00      	cmp	r3, #0
 800935e:	d017      	beq.n	8009390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800936c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2208      	movs	r2, #8
 800937e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009386:	f043 0208 	orr.w	r2, r3, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009398:	2b00      	cmp	r3, #0
 800939a:	d012      	beq.n	80093c2 <HAL_UART_IRQHandler+0x18a>
 800939c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b8:	f043 0220 	orr.w	r2, r3, #32
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 8209 	beq.w	80097e0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80093ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940a:	2b40      	cmp	r3, #64	; 0x40
 800940c:	d005      	beq.n	800941a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800940e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009416:	2b00      	cmp	r3, #0
 8009418:	d04f      	beq.n	80094ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 ff6c 	bl	800a2f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d141      	bne.n	80094b2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800944c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800945a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800945e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1d9      	bne.n	800942e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	2b00      	cmp	r3, #0
 8009480:	d013      	beq.n	80094aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009486:	4a13      	ldr	r2, [pc, #76]	; (80094d4 <HAL_UART_IRQHandler+0x29c>)
 8009488:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	4618      	mov	r0, r3
 8009490:	f7f9 fbc5 	bl	8002c1e <HAL_DMA_Abort_IT>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d017      	beq.n	80094ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80094a4:	4610      	mov	r0, r2
 80094a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a8:	e00f      	b.n	80094ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9a2 	bl	80097f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b0:	e00b      	b.n	80094ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f99e 	bl	80097f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b8:	e007      	b.n	80094ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f99a 	bl	80097f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80094c8:	e18a      	b.n	80097e0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ca:	bf00      	nop
    return;
 80094cc:	e188      	b.n	80097e0 <HAL_UART_IRQHandler+0x5a8>
 80094ce:	bf00      	nop
 80094d0:	04000120 	.word	0x04000120
 80094d4:	0800a3bf 	.word	0x0800a3bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094dc:	2b01      	cmp	r3, #1
 80094de:	f040 8143 	bne.w	8009768 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 813c 	beq.w	8009768 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8135 	beq.w	8009768 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2210      	movs	r2, #16
 8009504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009510:	2b40      	cmp	r3, #64	; 0x40
 8009512:	f040 80b1 	bne.w	8009678 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 815c 	beq.w	80097e4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009536:	429a      	cmp	r2, r3
 8009538:	f080 8154 	bcs.w	80097e4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	2b20      	cmp	r3, #32
 800954e:	f000 8085 	beq.w	800965c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800956a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800956e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800957c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009580:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009588:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1da      	bne.n	8009552 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3308      	adds	r3, #8
 80095bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e1      	bne.n	800959c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009602:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800960a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e3      	bne.n	80095d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800962a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962c:	f023 0310 	bic.w	r3, r3, #16
 8009630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800963e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009640:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800964c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e4      	bne.n	800961c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	4618      	mov	r0, r3
 8009658:	f7f9 faa8 	bl	8002bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009668:	b29b      	uxth	r3, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f8c9 	bl	8009808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009676:	e0b5      	b.n	80097e4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009684:	b29b      	uxth	r3, r3
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009692:	b29b      	uxth	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80a7 	beq.w	80097e8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800969a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a2 	beq.w	80097e8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096c6:	647b      	str	r3, [r7, #68]	; 0x44
 80096c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e4      	bne.n	80096a4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	623b      	str	r3, [r7, #32]
   return(result);
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e3      	bne.n	80096da <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	60fb      	str	r3, [r7, #12]
   return(result);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f023 0310 	bic.w	r3, r3, #16
 8009738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	69b9      	ldr	r1, [r7, #24]
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	617b      	str	r3, [r7, #20]
   return(result);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e4      	bne.n	8009724 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800975a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f851 	bl	8009808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009766:	e03f      	b.n	80097e8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00e      	beq.n	8009792 <HAL_UART_IRQHandler+0x55a>
 8009774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f86f 	bl	800a86e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009790:	e02d      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800979e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d01c      	beq.n	80097ec <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
    }
    return;
 80097ba:	e017      	b.n	80097ec <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d012      	beq.n	80097ee <HAL_UART_IRQHandler+0x5b6>
 80097c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00c      	beq.n	80097ee <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fec4 	bl	800a562 <UART_EndTransmit_IT>
    return;
 80097da:	e008      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80097dc:	bf00      	nop
 80097de:	e006      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
    return;
 80097e0:	bf00      	nop
 80097e2:	e004      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80097e4:	bf00      	nop
 80097e6:	e002      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <HAL_UART_IRQHandler+0x5b6>
    return;
 80097ec:	bf00      	nop
  }

}
 80097ee:	37e8      	adds	r7, #232	; 0xe8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a9a      	ldr	r2, [pc, #616]	; (8009a9c <UART_SetConfig+0x27c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d904      	bls.n	8009840 <UART_SetConfig+0x20>
 8009836:	f640 313f 	movw	r1, #2879	; 0xb3f
 800983a:	4899      	ldr	r0, [pc, #612]	; (8009aa0 <UART_SetConfig+0x280>)
 800983c:	f7f8 fc47 	bl	80020ce <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009848:	d00d      	beq.n	8009866 <UART_SetConfig+0x46>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <UART_SetConfig+0x46>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985a:	d004      	beq.n	8009866 <UART_SetConfig+0x46>
 800985c:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8009860:	488f      	ldr	r0, [pc, #572]	; (8009aa0 <UART_SetConfig+0x280>)
 8009862:	f7f8 fc34 	bl	80020ce <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986e:	d012      	beq.n	8009896 <UART_SetConfig+0x76>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <UART_SetConfig+0x76>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009880:	d009      	beq.n	8009896 <UART_SetConfig+0x76>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d004      	beq.n	8009896 <UART_SetConfig+0x76>
 800988c:	f640 3141 	movw	r1, #2881	; 0xb41
 8009890:	4883      	ldr	r0, [pc, #524]	; (8009aa0 <UART_SetConfig+0x280>)
 8009892:	f7f8 fc1c 	bl	80020ce <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <UART_SetConfig+0x92>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098a6:	d004      	beq.n	80098b2 <UART_SetConfig+0x92>
 80098a8:	f640 3142 	movw	r1, #2882	; 0xb42
 80098ac:	487c      	ldr	r0, [pc, #496]	; (8009aa0 <UART_SetConfig+0x280>)
 80098ae:	f7f8 fc0e 	bl	80020ce <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00e      	beq.n	80098d8 <UART_SetConfig+0xb8>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c2:	d009      	beq.n	80098d8 <UART_SetConfig+0xb8>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80098cc:	d004      	beq.n	80098d8 <UART_SetConfig+0xb8>
 80098ce:	f640 3144 	movw	r1, #2884	; 0xb44
 80098d2:	4873      	ldr	r0, [pc, #460]	; (8009aa0 <UART_SetConfig+0x280>)
 80098d4:	f7f8 fbfb 	bl	80020ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	f023 030c 	bic.w	r3, r3, #12
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <UART_SetConfig+0xcc>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <UART_SetConfig+0xd6>
 80098ec:	f640 3145 	movw	r1, #2885	; 0xb45
 80098f0:	486b      	ldr	r0, [pc, #428]	; (8009aa0 <UART_SetConfig+0x280>)
 80098f2:	f7f8 fbec 	bl	80020ce <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d013      	beq.n	8009926 <UART_SetConfig+0x106>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009906:	d00e      	beq.n	8009926 <UART_SetConfig+0x106>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009910:	d009      	beq.n	8009926 <UART_SetConfig+0x106>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800991a:	d004      	beq.n	8009926 <UART_SetConfig+0x106>
 800991c:	f640 3146 	movw	r1, #2886	; 0xb46
 8009920:	485f      	ldr	r0, [pc, #380]	; (8009aa0 <UART_SetConfig+0x280>)
 8009922:	f7f8 fbd4 	bl	80020ce <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <UART_SetConfig+0x122>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009936:	d004      	beq.n	8009942 <UART_SetConfig+0x122>
 8009938:	f640 3147 	movw	r1, #2887	; 0xb47
 800993c:	4858      	ldr	r0, [pc, #352]	; (8009aa0 <UART_SetConfig+0x280>)
 800993e:	f7f8 fbc6 	bl	80020ce <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	4b50      	ldr	r3, [pc, #320]	; (8009aa4 <UART_SetConfig+0x284>)
 8009962:	4013      	ands	r3, r2
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6812      	ldr	r2, [r2, #0]
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	430b      	orrs	r3, r1
 800996c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a3e      	ldr	r2, [pc, #248]	; (8009aa8 <UART_SetConfig+0x288>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d11f      	bne.n	80099f2 <UART_SetConfig+0x1d2>
 80099b2:	4b3e      	ldr	r3, [pc, #248]	; (8009aac <UART_SetConfig+0x28c>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d816      	bhi.n	80099ec <UART_SetConfig+0x1cc>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x1a4>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099d5 	.word	0x080099d5
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	080099e7 	.word	0x080099e7
 80099d0:	080099db 	.word	0x080099db
 80099d4:	2301      	movs	r3, #1
 80099d6:	77fb      	strb	r3, [r7, #31]
 80099d8:	e0c4      	b.n	8009b64 <UART_SetConfig+0x344>
 80099da:	2302      	movs	r3, #2
 80099dc:	77fb      	strb	r3, [r7, #31]
 80099de:	e0c1      	b.n	8009b64 <UART_SetConfig+0x344>
 80099e0:	2304      	movs	r3, #4
 80099e2:	77fb      	strb	r3, [r7, #31]
 80099e4:	e0be      	b.n	8009b64 <UART_SetConfig+0x344>
 80099e6:	2308      	movs	r3, #8
 80099e8:	77fb      	strb	r3, [r7, #31]
 80099ea:	e0bb      	b.n	8009b64 <UART_SetConfig+0x344>
 80099ec:	2310      	movs	r3, #16
 80099ee:	77fb      	strb	r3, [r7, #31]
 80099f0:	e0b8      	b.n	8009b64 <UART_SetConfig+0x344>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a2e      	ldr	r2, [pc, #184]	; (8009ab0 <UART_SetConfig+0x290>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d124      	bne.n	8009a46 <UART_SetConfig+0x226>
 80099fc:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <UART_SetConfig+0x28c>)
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a08:	d011      	beq.n	8009a2e <UART_SetConfig+0x20e>
 8009a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a0e:	d817      	bhi.n	8009a40 <UART_SetConfig+0x220>
 8009a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a14:	d011      	beq.n	8009a3a <UART_SetConfig+0x21a>
 8009a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1a:	d811      	bhi.n	8009a40 <UART_SetConfig+0x220>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <UART_SetConfig+0x208>
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a24:	d006      	beq.n	8009a34 <UART_SetConfig+0x214>
 8009a26:	e00b      	b.n	8009a40 <UART_SetConfig+0x220>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e09a      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e097      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a34:	2304      	movs	r3, #4
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e094      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	77fb      	strb	r3, [r7, #31]
 8009a3e:	e091      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a40:	2310      	movs	r3, #16
 8009a42:	77fb      	strb	r3, [r7, #31]
 8009a44:	e08e      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1a      	ldr	r2, [pc, #104]	; (8009ab4 <UART_SetConfig+0x294>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d133      	bne.n	8009ab8 <UART_SetConfig+0x298>
 8009a50:	4b16      	ldr	r3, [pc, #88]	; (8009aac <UART_SetConfig+0x28c>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009a58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a5c:	d011      	beq.n	8009a82 <UART_SetConfig+0x262>
 8009a5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a62:	d817      	bhi.n	8009a94 <UART_SetConfig+0x274>
 8009a64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a68:	d011      	beq.n	8009a8e <UART_SetConfig+0x26e>
 8009a6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a6e:	d811      	bhi.n	8009a94 <UART_SetConfig+0x274>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <UART_SetConfig+0x25c>
 8009a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a78:	d006      	beq.n	8009a88 <UART_SetConfig+0x268>
 8009a7a:	e00b      	b.n	8009a94 <UART_SetConfig+0x274>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e070      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a82:	2302      	movs	r3, #2
 8009a84:	77fb      	strb	r3, [r7, #31]
 8009a86:	e06d      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a88:	2304      	movs	r3, #4
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e06a      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a8e:	2308      	movs	r3, #8
 8009a90:	77fb      	strb	r3, [r7, #31]
 8009a92:	e067      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a94:	2310      	movs	r3, #16
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e064      	b.n	8009b64 <UART_SetConfig+0x344>
 8009a9a:	bf00      	nop
 8009a9c:	00895440 	.word	0x00895440
 8009aa0:	0800c968 	.word	0x0800c968
 8009aa4:	efff69f3 	.word	0xefff69f3
 8009aa8:	40013800 	.word	0x40013800
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	40004400 	.word	0x40004400
 8009ab4:	40004800 	.word	0x40004800
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a86      	ldr	r2, [pc, #536]	; (8009cd8 <UART_SetConfig+0x4b8>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d124      	bne.n	8009b0c <UART_SetConfig+0x2ec>
 8009ac2:	4b86      	ldr	r3, [pc, #536]	; (8009cdc <UART_SetConfig+0x4bc>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009aca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ace:	d011      	beq.n	8009af4 <UART_SetConfig+0x2d4>
 8009ad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ad4:	d817      	bhi.n	8009b06 <UART_SetConfig+0x2e6>
 8009ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ada:	d011      	beq.n	8009b00 <UART_SetConfig+0x2e0>
 8009adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ae0:	d811      	bhi.n	8009b06 <UART_SetConfig+0x2e6>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <UART_SetConfig+0x2ce>
 8009ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aea:	d006      	beq.n	8009afa <UART_SetConfig+0x2da>
 8009aec:	e00b      	b.n	8009b06 <UART_SetConfig+0x2e6>
 8009aee:	2300      	movs	r3, #0
 8009af0:	77fb      	strb	r3, [r7, #31]
 8009af2:	e037      	b.n	8009b64 <UART_SetConfig+0x344>
 8009af4:	2302      	movs	r3, #2
 8009af6:	77fb      	strb	r3, [r7, #31]
 8009af8:	e034      	b.n	8009b64 <UART_SetConfig+0x344>
 8009afa:	2304      	movs	r3, #4
 8009afc:	77fb      	strb	r3, [r7, #31]
 8009afe:	e031      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b00:	2308      	movs	r3, #8
 8009b02:	77fb      	strb	r3, [r7, #31]
 8009b04:	e02e      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b06:	2310      	movs	r3, #16
 8009b08:	77fb      	strb	r3, [r7, #31]
 8009b0a:	e02b      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a73      	ldr	r2, [pc, #460]	; (8009ce0 <UART_SetConfig+0x4c0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d124      	bne.n	8009b60 <UART_SetConfig+0x340>
 8009b16:	4b71      	ldr	r3, [pc, #452]	; (8009cdc <UART_SetConfig+0x4bc>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009b1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b22:	d011      	beq.n	8009b48 <UART_SetConfig+0x328>
 8009b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b28:	d817      	bhi.n	8009b5a <UART_SetConfig+0x33a>
 8009b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b2e:	d011      	beq.n	8009b54 <UART_SetConfig+0x334>
 8009b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b34:	d811      	bhi.n	8009b5a <UART_SetConfig+0x33a>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <UART_SetConfig+0x322>
 8009b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b3e:	d006      	beq.n	8009b4e <UART_SetConfig+0x32e>
 8009b40:	e00b      	b.n	8009b5a <UART_SetConfig+0x33a>
 8009b42:	2300      	movs	r3, #0
 8009b44:	77fb      	strb	r3, [r7, #31]
 8009b46:	e00d      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	77fb      	strb	r3, [r7, #31]
 8009b4c:	e00a      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b4e:	2304      	movs	r3, #4
 8009b50:	77fb      	strb	r3, [r7, #31]
 8009b52:	e007      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b54:	2308      	movs	r3, #8
 8009b56:	77fb      	strb	r3, [r7, #31]
 8009b58:	e004      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b5a:	2310      	movs	r3, #16
 8009b5c:	77fb      	strb	r3, [r7, #31]
 8009b5e:	e001      	b.n	8009b64 <UART_SetConfig+0x344>
 8009b60:	2310      	movs	r3, #16
 8009b62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b6c:	d15c      	bne.n	8009c28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009b6e:	7ffb      	ldrb	r3, [r7, #31]
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d828      	bhi.n	8009bc6 <UART_SetConfig+0x3a6>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <UART_SetConfig+0x35c>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	08009bc7 	.word	0x08009bc7
 8009b8c:	08009bb7 	.word	0x08009bb7
 8009b90:	08009bc7 	.word	0x08009bc7
 8009b94:	08009bc7 	.word	0x08009bc7
 8009b98:	08009bc7 	.word	0x08009bc7
 8009b9c:	08009bbf 	.word	0x08009bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ba0:	f7fc fe74 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 8009ba4:	61b8      	str	r0, [r7, #24]
        break;
 8009ba6:	e013      	b.n	8009bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba8:	f7fc fe92 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 8009bac:	61b8      	str	r0, [r7, #24]
        break;
 8009bae:	e00f      	b.n	8009bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bb0:	4b4c      	ldr	r3, [pc, #304]	; (8009ce4 <UART_SetConfig+0x4c4>)
 8009bb2:	61bb      	str	r3, [r7, #24]
        break;
 8009bb4:	e00c      	b.n	8009bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bb6:	f7fc fdf3 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8009bba:	61b8      	str	r0, [r7, #24]
        break;
 8009bbc:	e008      	b.n	8009bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc2:	61bb      	str	r3, [r7, #24]
        break;
 8009bc4:	e004      	b.n	8009bd0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8009bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d074      	beq.n	8009cc0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	005a      	lsls	r2, r3, #1
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	085b      	lsrs	r3, r3, #1
 8009be0:	441a      	add	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2b0f      	cmp	r3, #15
 8009bf2:	d916      	bls.n	8009c22 <UART_SetConfig+0x402>
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bfa:	d212      	bcs.n	8009c22 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	f023 030f 	bic.w	r3, r3, #15
 8009c04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	085b      	lsrs	r3, r3, #1
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	89fb      	ldrh	r3, [r7, #14]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	89fa      	ldrh	r2, [r7, #14]
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	e04e      	b.n	8009cc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	77bb      	strb	r3, [r7, #30]
 8009c26:	e04b      	b.n	8009cc0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c28:	7ffb      	ldrb	r3, [r7, #31]
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d827      	bhi.n	8009c7e <UART_SetConfig+0x45e>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <UART_SetConfig+0x414>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	08009c7f 	.word	0x08009c7f
 8009c44:	08009c6f 	.word	0x08009c6f
 8009c48:	08009c7f 	.word	0x08009c7f
 8009c4c:	08009c7f 	.word	0x08009c7f
 8009c50:	08009c7f 	.word	0x08009c7f
 8009c54:	08009c77 	.word	0x08009c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c58:	f7fc fe18 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 8009c5c:	61b8      	str	r0, [r7, #24]
        break;
 8009c5e:	e013      	b.n	8009c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c60:	f7fc fe36 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 8009c64:	61b8      	str	r0, [r7, #24]
        break;
 8009c66:	e00f      	b.n	8009c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c68:	4b1e      	ldr	r3, [pc, #120]	; (8009ce4 <UART_SetConfig+0x4c4>)
 8009c6a:	61bb      	str	r3, [r7, #24]
        break;
 8009c6c:	e00c      	b.n	8009c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c6e:	f7fc fd97 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8009c72:	61b8      	str	r0, [r7, #24]
        break;
 8009c74:	e008      	b.n	8009c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c7a:	61bb      	str	r3, [r7, #24]
        break;
 8009c7c:	e004      	b.n	8009c88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	77bb      	strb	r3, [r7, #30]
        break;
 8009c86:	bf00      	nop
    }

    if (pclk != 0U)
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d018      	beq.n	8009cc0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	085a      	lsrs	r2, r3, #1
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	441a      	add	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d908      	bls.n	8009cbc <UART_SetConfig+0x49c>
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb0:	d204      	bcs.n	8009cbc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	e001      	b.n	8009cc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ccc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40004c00 	.word	0x40004c00
 8009cdc:	40021000 	.word	0x40021000
 8009ce0:	40005000 	.word	0x40005000
 8009ce4:	007a1200 	.word	0x007a1200

08009ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2bff      	cmp	r3, #255	; 0xff
 8009cf6:	d904      	bls.n	8009d02 <UART_AdvFeatureConfig+0x1a>
 8009cf8:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8009cfc:	489d      	ldr	r0, [pc, #628]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009cfe:	f7f8 f9e6 	bl	80020ce <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d018      	beq.n	8009d40 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <UART_AdvFeatureConfig+0x42>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d1e:	d004      	beq.n	8009d2a <UART_AdvFeatureConfig+0x42>
 8009d20:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8009d24:	4893      	ldr	r0, [pc, #588]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009d26:	f7f8 f9d2 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d018      	beq.n	8009d7e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <UART_AdvFeatureConfig+0x80>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d5c:	d004      	beq.n	8009d68 <UART_AdvFeatureConfig+0x80>
 8009d5e:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8009d62:	4884      	ldr	r0, [pc, #528]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009d64:	f7f8 f9b3 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d018      	beq.n	8009dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <UART_AdvFeatureConfig+0xbe>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d9a:	d004      	beq.n	8009da6 <UART_AdvFeatureConfig+0xbe>
 8009d9c:	f640 31db 	movw	r1, #3035	; 0xbdb
 8009da0:	4874      	ldr	r0, [pc, #464]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009da2:	f7f8 f994 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	f003 0308 	and.w	r3, r3, #8
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d018      	beq.n	8009dfa <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <UART_AdvFeatureConfig+0xfc>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dd8:	d004      	beq.n	8009de4 <UART_AdvFeatureConfig+0xfc>
 8009dda:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8009dde:	4865      	ldr	r0, [pc, #404]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009de0:	f7f8 f975 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d018      	beq.n	8009e38 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <UART_AdvFeatureConfig+0x13a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e16:	d004      	beq.n	8009e22 <UART_AdvFeatureConfig+0x13a>
 8009e18:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8009e1c:	4855      	ldr	r0, [pc, #340]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009e1e:	f7f8 f956 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	f003 0320 	and.w	r3, r3, #32
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d018      	beq.n	8009e76 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d009      	beq.n	8009e60 <UART_AdvFeatureConfig+0x178>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e54:	d004      	beq.n	8009e60 <UART_AdvFeatureConfig+0x178>
 8009e56:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8009e5a:	4846      	ldr	r0, [pc, #280]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009e5c:	f7f8 f937 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d054      	beq.n	8009f2c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a3c      	ldr	r2, [pc, #240]	; (8009f78 <UART_AdvFeatureConfig+0x290>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00e      	beq.n	8009eaa <UART_AdvFeatureConfig+0x1c2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a3a      	ldr	r2, [pc, #232]	; (8009f7c <UART_AdvFeatureConfig+0x294>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d009      	beq.n	8009eaa <UART_AdvFeatureConfig+0x1c2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a39      	ldr	r2, [pc, #228]	; (8009f80 <UART_AdvFeatureConfig+0x298>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d004      	beq.n	8009eaa <UART_AdvFeatureConfig+0x1c2>
 8009ea0:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009ea4:	4833      	ldr	r0, [pc, #204]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009ea6:	f7f8 f912 	bl	80020ce <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <UART_AdvFeatureConfig+0x1de>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eba:	d004      	beq.n	8009ec6 <UART_AdvFeatureConfig+0x1de>
 8009ebc:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8009ec0:	482c      	ldr	r0, [pc, #176]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009ec2:	f7f8 f904 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee4:	d122      	bne.n	8009f2c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d013      	beq.n	8009f16 <UART_AdvFeatureConfig+0x22e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef6:	d00e      	beq.n	8009f16 <UART_AdvFeatureConfig+0x22e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f00:	d009      	beq.n	8009f16 <UART_AdvFeatureConfig+0x22e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f0a:	d004      	beq.n	8009f16 <UART_AdvFeatureConfig+0x22e>
 8009f0c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009f10:	4818      	ldr	r0, [pc, #96]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009f12:	f7f8 f8dc 	bl	80020ce <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d018      	beq.n	8009f6a <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <UART_AdvFeatureConfig+0x26c>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f48:	d004      	beq.n	8009f54 <UART_AdvFeatureConfig+0x26c>
 8009f4a:	f640 4105 	movw	r1, #3077	; 0xc05
 8009f4e:	4809      	ldr	r0, [pc, #36]	; (8009f74 <UART_AdvFeatureConfig+0x28c>)
 8009f50:	f7f8 f8bd 	bl	80020ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	0800c968 	.word	0x0800c968
 8009f78:	40013800 	.word	0x40013800
 8009f7c:	40004400 	.word	0x40004400
 8009f80:	40004800 	.word	0x40004800

08009f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f94:	f7f8 fc9a 	bl	80028cc <HAL_GetTick>
 8009f98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d10e      	bne.n	8009fc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f82d 	bl	800a016 <UART_WaitOnFlagUntilTimeout>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e023      	b.n	800a00e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	d10e      	bne.n	8009ff2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f817 	bl	800a016 <UART_WaitOnFlagUntilTimeout>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e00d      	b.n	800a00e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b09c      	sub	sp, #112	; 0x70
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	603b      	str	r3, [r7, #0]
 800a022:	4613      	mov	r3, r2
 800a024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a026:	e0a5      	b.n	800a174 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	f000 80a1 	beq.w	800a174 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a032:	f7f8 fc4b 	bl	80028cc <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a03e:	429a      	cmp	r2, r3
 800a040:	d302      	bcc.n	800a048 <UART_WaitOnFlagUntilTimeout+0x32>
 800a042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a044:	2b00      	cmp	r3, #0
 800a046:	d13e      	bne.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a05c:	667b      	str	r3, [r7, #100]	; 0x64
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a066:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a068:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a06c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e6      	bne.n	800a048 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	f023 0301 	bic.w	r3, r3, #1
 800a090:	663b      	str	r3, [r7, #96]	; 0x60
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a09a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a09c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e5      	bne.n	800a07a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e067      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d04f      	beq.n	800a174 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0e2:	d147      	bne.n	800a174 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a102:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10c:	637b      	str	r3, [r7, #52]	; 0x34
 800a10e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3308      	adds	r3, #8
 800a126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	e853 3f00 	ldrex	r3, [r3]
 800a12e:	613b      	str	r3, [r7, #16]
   return(result);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f023 0301 	bic.w	r3, r3, #1
 800a136:	66bb      	str	r3, [r7, #104]	; 0x68
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3308      	adds	r3, #8
 800a13e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a140:	623a      	str	r2, [r7, #32]
 800a142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a144:	69f9      	ldr	r1, [r7, #28]
 800a146:	6a3a      	ldr	r2, [r7, #32]
 800a148:	e841 2300 	strex	r3, r2, [r1]
 800a14c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e5      	bne.n	800a120 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2220      	movs	r2, #32
 800a158:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e010      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	69da      	ldr	r2, [r3, #28]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	4013      	ands	r3, r2
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	429a      	cmp	r2, r3
 800a182:	bf0c      	ite	eq
 800a184:	2301      	moveq	r3, #1
 800a186:	2300      	movne	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	429a      	cmp	r2, r3
 800a190:	f43f af4a 	beq.w	800a028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3770      	adds	r7, #112	; 0x70
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b091      	sub	sp, #68	; 0x44
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	88fa      	ldrh	r2, [r7, #6]
 800a1b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	88fa      	ldrh	r2, [r7, #6]
 800a1c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d2:	d10e      	bne.n	800a1f2 <UART_Start_Receive_IT+0x52>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <UART_Start_Receive_IT+0x48>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a1e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1e6:	e02d      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	22ff      	movs	r2, #255	; 0xff
 800a1ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1f0:	e028      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10d      	bne.n	800a216 <UART_Start_Receive_IT+0x76>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d104      	bne.n	800a20c <UART_Start_Receive_IT+0x6c>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	22ff      	movs	r2, #255	; 0xff
 800a206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a20a:	e01b      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	227f      	movs	r2, #127	; 0x7f
 800a210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a214:	e016      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a21e:	d10d      	bne.n	800a23c <UART_Start_Receive_IT+0x9c>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <UART_Start_Receive_IT+0x92>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	227f      	movs	r2, #127	; 0x7f
 800a22c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a230:	e008      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	223f      	movs	r2, #63	; 0x3f
 800a236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a23a:	e003      	b.n	800a244 <UART_Start_Receive_IT+0xa4>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2222      	movs	r2, #34	; 0x22
 800a250:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	f043 0301 	orr.w	r3, r3, #1
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a272:	637a      	str	r2, [r7, #52]	; 0x34
 800a274:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e5      	bne.n	800a252 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28e:	d107      	bne.n	800a2a0 <UART_Start_Receive_IT+0x100>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4a15      	ldr	r2, [pc, #84]	; (800a2f0 <UART_Start_Receive_IT+0x150>)
 800a29c:	665a      	str	r2, [r3, #100]	; 0x64
 800a29e:	e002      	b.n	800a2a6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a14      	ldr	r2, [pc, #80]	; (800a2f4 <UART_Start_Receive_IT+0x154>)
 800a2a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a2c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	623b      	str	r3, [r7, #32]
 800a2ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	69f9      	ldr	r1, [r7, #28]
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e6      	bne.n	800a2ae <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3744      	adds	r7, #68	; 0x44
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	0800a713 	.word	0x0800a713
 800a2f4:	0800a5b7 	.word	0x0800a5b7

0800a2f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b095      	sub	sp, #84	; 0x54
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a314:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a31e:	643b      	str	r3, [r7, #64]	; 0x40
 800a320:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e6      	bne.n	800a300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	61fb      	str	r3, [r7, #28]
   return(result);
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	64bb      	str	r3, [r7, #72]	; 0x48
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a352:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d118      	bne.n	800a3a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0310 	bic.w	r3, r3, #16
 800a382:	647b      	str	r3, [r7, #68]	; 0x44
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a38c:	61bb      	str	r3, [r7, #24]
 800a38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	e841 2300 	strex	r3, r2, [r1]
 800a398:	613b      	str	r3, [r7, #16]
   return(result);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e6      	bne.n	800a36e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a3b2:	bf00      	nop
 800a3b4:	3754      	adds	r7, #84	; 0x54
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff fa09 	bl	80097f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b08f      	sub	sp, #60	; 0x3c
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3f6:	2b21      	cmp	r3, #33	; 0x21
 800a3f8:	d14d      	bne.n	800a496 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a400:	b29b      	uxth	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d132      	bne.n	800a46c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	61fb      	str	r3, [r7, #28]
   return(result);
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a41a:	637b      	str	r3, [r7, #52]	; 0x34
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a426:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	60bb      	str	r3, [r7, #8]
   return(result);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44c:	633b      	str	r3, [r7, #48]	; 0x30
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6979      	ldr	r1, [r7, #20]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	613b      	str	r3, [r7, #16]
   return(result);
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e6      	bne.n	800a438 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a46a:	e014      	b.n	800a496 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a470:	781a      	ldrb	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	b292      	uxth	r2, r2
 800a478:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	b29a      	uxth	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a496:	bf00      	nop
 800a498:	373c      	adds	r7, #60	; 0x3c
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b091      	sub	sp, #68	; 0x44
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ae:	2b21      	cmp	r3, #33	; 0x21
 800a4b0:	d151      	bne.n	800a556 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d132      	bne.n	800a524 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	69b9      	ldr	r1, [r7, #24]
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	617b      	str	r3, [r7, #20]
   return(result);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e6      	bne.n	800a4f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a522:	e018      	b.n	800a556 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52c:	881a      	ldrh	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a536:	b292      	uxth	r2, r2
 800a538:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53e:	1c9a      	adds	r2, r3, #2
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a556:	bf00      	nop
 800a558:	3744      	adds	r7, #68	; 0x44
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b088      	sub	sp, #32
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	60bb      	str	r3, [r7, #8]
   return(result);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a57e:	61fb      	str	r3, [r7, #28]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	61bb      	str	r3, [r7, #24]
 800a58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	6979      	ldr	r1, [r7, #20]
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	613b      	str	r3, [r7, #16]
   return(result);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e6      	bne.n	800a56a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7f6 ff21 	bl	80013f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ae:	bf00      	nop
 800a5b0:	3720      	adds	r7, #32
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b096      	sub	sp, #88	; 0x58
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5cc:	2b22      	cmp	r3, #34	; 0x22
 800a5ce:	f040 8094 	bne.w	800a6fa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a5d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5dc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a5e0:	b2d9      	uxtb	r1, r3
 800a5e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ec:	400a      	ands	r2, r1
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a602:	b29b      	uxth	r3, r3
 800a604:	3b01      	subs	r3, #1
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d177      	bne.n	800a70a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a62e:	653b      	str	r3, [r7, #80]	; 0x50
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a638:	647b      	str	r3, [r7, #68]	; 0x44
 800a63a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a63e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3308      	adds	r3, #8
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	623b      	str	r3, [r7, #32]
   return(result);
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	f023 0301 	bic.w	r3, r3, #1
 800a662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3308      	adds	r3, #8
 800a66a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a66c:	633a      	str	r2, [r7, #48]	; 0x30
 800a66e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e5      	bne.n	800a64c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a690:	2b01      	cmp	r3, #1
 800a692:	d12e      	bne.n	800a6f2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0310 	bic.w	r3, r3, #16
 800a6ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	69b9      	ldr	r1, [r7, #24]
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e6      	bne.n	800a69a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d103      	bne.n	800a6e2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2210      	movs	r2, #16
 800a6e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff f88c 	bl	8009808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6f0:	e00b      	b.n	800a70a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7f6 feb2 	bl	800145c <HAL_UART_RxCpltCallback>
}
 800a6f8:	e007      	b.n	800a70a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	699a      	ldr	r2, [r3, #24]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0208 	orr.w	r2, r2, #8
 800a708:	619a      	str	r2, [r3, #24]
}
 800a70a:	bf00      	nop
 800a70c:	3758      	adds	r7, #88	; 0x58
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b096      	sub	sp, #88	; 0x58
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a728:	2b22      	cmp	r3, #34	; 0x22
 800a72a:	f040 8094 	bne.w	800a856 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a734:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a73e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a742:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a746:	4013      	ands	r3, r2
 800a748:	b29a      	uxth	r2, r3
 800a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a752:	1c9a      	adds	r2, r3, #2
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	b29a      	uxth	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a770:	b29b      	uxth	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d177      	bne.n	800a866 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a794:	643b      	str	r3, [r7, #64]	; 0x40
 800a796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a79a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e6      	bne.n	800a776 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7d0:	e841 2300 	strex	r3, r2, [r1]
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e5      	bne.n	800a7a8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d12e      	bne.n	800a84e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	60bb      	str	r3, [r7, #8]
   return(result);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f023 0310 	bic.w	r3, r3, #16
 800a80a:	647b      	str	r3, [r7, #68]	; 0x44
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6979      	ldr	r1, [r7, #20]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	613b      	str	r3, [r7, #16]
   return(result);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e6      	bne.n	800a7f6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	2b10      	cmp	r3, #16
 800a834:	d103      	bne.n	800a83e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2210      	movs	r2, #16
 800a83c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7fe ffde 	bl	8009808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a84c:	e00b      	b.n	800a866 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7f6 fe04 	bl	800145c <HAL_UART_RxCpltCallback>
}
 800a854:	e007      	b.n	800a866 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699a      	ldr	r2, [r3, #24]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f042 0208 	orr.w	r2, r2, #8
 800a864:	619a      	str	r2, [r3, #24]
}
 800a866:	bf00      	nop
 800a868:	3758      	adds	r7, #88	; 0x58
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
	...

0800a884 <__errno>:
 800a884:	4b01      	ldr	r3, [pc, #4]	; (800a88c <__errno+0x8>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20000088 	.word	0x20000088

0800a890 <__libc_init_array>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4d0d      	ldr	r5, [pc, #52]	; (800a8c8 <__libc_init_array+0x38>)
 800a894:	4c0d      	ldr	r4, [pc, #52]	; (800a8cc <__libc_init_array+0x3c>)
 800a896:	1b64      	subs	r4, r4, r5
 800a898:	10a4      	asrs	r4, r4, #2
 800a89a:	2600      	movs	r6, #0
 800a89c:	42a6      	cmp	r6, r4
 800a89e:	d109      	bne.n	800a8b4 <__libc_init_array+0x24>
 800a8a0:	4d0b      	ldr	r5, [pc, #44]	; (800a8d0 <__libc_init_array+0x40>)
 800a8a2:	4c0c      	ldr	r4, [pc, #48]	; (800a8d4 <__libc_init_array+0x44>)
 800a8a4:	f001 fe0c 	bl	800c4c0 <_init>
 800a8a8:	1b64      	subs	r4, r4, r5
 800a8aa:	10a4      	asrs	r4, r4, #2
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	42a6      	cmp	r6, r4
 800a8b0:	d105      	bne.n	800a8be <__libc_init_array+0x2e>
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
 800a8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b8:	4798      	blx	r3
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	e7ee      	b.n	800a89c <__libc_init_array+0xc>
 800a8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c2:	4798      	blx	r3
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	e7f2      	b.n	800a8ae <__libc_init_array+0x1e>
 800a8c8:	0800cb9c 	.word	0x0800cb9c
 800a8cc:	0800cb9c 	.word	0x0800cb9c
 800a8d0:	0800cb9c 	.word	0x0800cb9c
 800a8d4:	0800cba0 	.word	0x0800cba0

0800a8d8 <memset>:
 800a8d8:	4402      	add	r2, r0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d100      	bne.n	800a8e2 <memset+0xa>
 800a8e0:	4770      	bx	lr
 800a8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e6:	e7f9      	b.n	800a8dc <memset+0x4>

0800a8e8 <iprintf>:
 800a8e8:	b40f      	push	{r0, r1, r2, r3}
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <iprintf+0x2c>)
 800a8ec:	b513      	push	{r0, r1, r4, lr}
 800a8ee:	681c      	ldr	r4, [r3, #0]
 800a8f0:	b124      	cbz	r4, 800a8fc <iprintf+0x14>
 800a8f2:	69a3      	ldr	r3, [r4, #24]
 800a8f4:	b913      	cbnz	r3, 800a8fc <iprintf+0x14>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 f91a 	bl	800ab30 <__sinit>
 800a8fc:	ab05      	add	r3, sp, #20
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	68a1      	ldr	r1, [r4, #8]
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	4620      	mov	r0, r4
 800a906:	f000 fd77 	bl	800b3f8 <_vfiprintf_r>
 800a90a:	b002      	add	sp, #8
 800a90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a910:	b004      	add	sp, #16
 800a912:	4770      	bx	lr
 800a914:	20000088 	.word	0x20000088

0800a918 <siscanf>:
 800a918:	b40e      	push	{r1, r2, r3}
 800a91a:	b510      	push	{r4, lr}
 800a91c:	b09f      	sub	sp, #124	; 0x7c
 800a91e:	ac21      	add	r4, sp, #132	; 0x84
 800a920:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a924:	f854 2b04 	ldr.w	r2, [r4], #4
 800a928:	9201      	str	r2, [sp, #4]
 800a92a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a92e:	9004      	str	r0, [sp, #16]
 800a930:	9008      	str	r0, [sp, #32]
 800a932:	f7f5 fc5f 	bl	80001f4 <strlen>
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <siscanf+0x50>)
 800a938:	9005      	str	r0, [sp, #20]
 800a93a:	9009      	str	r0, [sp, #36]	; 0x24
 800a93c:	930d      	str	r3, [sp, #52]	; 0x34
 800a93e:	480b      	ldr	r0, [pc, #44]	; (800a96c <siscanf+0x54>)
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	6800      	ldr	r0, [r0, #0]
 800a944:	9403      	str	r4, [sp, #12]
 800a946:	2300      	movs	r3, #0
 800a948:	9311      	str	r3, [sp, #68]	; 0x44
 800a94a:	9316      	str	r3, [sp, #88]	; 0x58
 800a94c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a950:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a954:	a904      	add	r1, sp, #16
 800a956:	4623      	mov	r3, r4
 800a958:	f000 fbac 	bl	800b0b4 <__ssvfiscanf_r>
 800a95c:	b01f      	add	sp, #124	; 0x7c
 800a95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a962:	b003      	add	sp, #12
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	0800a993 	.word	0x0800a993
 800a96c:	20000088 	.word	0x20000088

0800a970 <__sread>:
 800a970:	b510      	push	{r4, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	f001 f94e 	bl	800bc18 <_read_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	bfab      	itete	ge
 800a980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a982:	89a3      	ldrhlt	r3, [r4, #12]
 800a984:	181b      	addge	r3, r3, r0
 800a986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98a:	bfac      	ite	ge
 800a98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a98e:	81a3      	strhlt	r3, [r4, #12]
 800a990:	bd10      	pop	{r4, pc}

0800a992 <__seofread>:
 800a992:	2000      	movs	r0, #0
 800a994:	4770      	bx	lr

0800a996 <__swrite>:
 800a996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	461f      	mov	r7, r3
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	05db      	lsls	r3, r3, #23
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	d505      	bpl.n	800a9b4 <__swrite+0x1e>
 800a9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f000 f95e 	bl	800ac70 <_lseek_r>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	f000 b837 	b.w	800aa3c <_write_r>

0800a9ce <__sseek>:
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d6:	f000 f94b 	bl	800ac70 <_lseek_r>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	bf15      	itete	ne
 800a9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ea:	81a3      	strheq	r3, [r4, #12]
 800a9ec:	bf18      	it	ne
 800a9ee:	81a3      	strhne	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__sclose>:
 800a9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f6:	f000 b833 	b.w	800aa60 <_close_r>
	...

0800a9fc <_vsiprintf_r>:
 800a9fc:	b500      	push	{lr}
 800a9fe:	b09b      	sub	sp, #108	; 0x6c
 800aa00:	9100      	str	r1, [sp, #0]
 800aa02:	9104      	str	r1, [sp, #16]
 800aa04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa08:	9105      	str	r1, [sp, #20]
 800aa0a:	9102      	str	r1, [sp, #8]
 800aa0c:	4905      	ldr	r1, [pc, #20]	; (800aa24 <_vsiprintf_r+0x28>)
 800aa0e:	9103      	str	r1, [sp, #12]
 800aa10:	4669      	mov	r1, sp
 800aa12:	f000 f9f5 	bl	800ae00 <_svfiprintf_r>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	b01b      	add	sp, #108	; 0x6c
 800aa1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa22:	bf00      	nop
 800aa24:	ffff0208 	.word	0xffff0208

0800aa28 <vsiprintf>:
 800aa28:	4613      	mov	r3, r2
 800aa2a:	460a      	mov	r2, r1
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4802      	ldr	r0, [pc, #8]	; (800aa38 <vsiprintf+0x10>)
 800aa30:	6800      	ldr	r0, [r0, #0]
 800aa32:	f7ff bfe3 	b.w	800a9fc <_vsiprintf_r>
 800aa36:	bf00      	nop
 800aa38:	20000088 	.word	0x20000088

0800aa3c <_write_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_write_r+0x20>)
 800aa40:	4604      	mov	r4, r0
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	602a      	str	r2, [r5, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f7f7 fcf7 	bl	800243e <_write>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_write_r+0x1e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_write_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000a98 	.word	0x20000a98

0800aa60 <_close_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_close_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f7 fd03 	bl	8002476 <_close>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_close_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_close_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000a98 	.word	0x20000a98

0800aa80 <std>:
 800aa80:	2300      	movs	r3, #0
 800aa82:	b510      	push	{r4, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	e9c0 3300 	strd	r3, r3, [r0]
 800aa8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa8e:	6083      	str	r3, [r0, #8]
 800aa90:	8181      	strh	r1, [r0, #12]
 800aa92:	6643      	str	r3, [r0, #100]	; 0x64
 800aa94:	81c2      	strh	r2, [r0, #14]
 800aa96:	6183      	str	r3, [r0, #24]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	305c      	adds	r0, #92	; 0x5c
 800aa9e:	f7ff ff1b 	bl	800a8d8 <memset>
 800aaa2:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <std+0x38>)
 800aaa4:	6263      	str	r3, [r4, #36]	; 0x24
 800aaa6:	4b05      	ldr	r3, [pc, #20]	; (800aabc <std+0x3c>)
 800aaa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <std+0x40>)
 800aaac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <std+0x44>)
 800aab0:	6224      	str	r4, [r4, #32]
 800aab2:	6323      	str	r3, [r4, #48]	; 0x30
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	bf00      	nop
 800aab8:	0800a971 	.word	0x0800a971
 800aabc:	0800a997 	.word	0x0800a997
 800aac0:	0800a9cf 	.word	0x0800a9cf
 800aac4:	0800a9f3 	.word	0x0800a9f3

0800aac8 <_cleanup_r>:
 800aac8:	4901      	ldr	r1, [pc, #4]	; (800aad0 <_cleanup_r+0x8>)
 800aaca:	f000 b8af 	b.w	800ac2c <_fwalk_reent>
 800aace:	bf00      	nop
 800aad0:	0800c1d9 	.word	0x0800c1d9

0800aad4 <__sfmoreglue>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	1e4a      	subs	r2, r1, #1
 800aad8:	2568      	movs	r5, #104	; 0x68
 800aada:	4355      	muls	r5, r2
 800aadc:	460e      	mov	r6, r1
 800aade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aae2:	f000 f8d7 	bl	800ac94 <_malloc_r>
 800aae6:	4604      	mov	r4, r0
 800aae8:	b140      	cbz	r0, 800aafc <__sfmoreglue+0x28>
 800aaea:	2100      	movs	r1, #0
 800aaec:	e9c0 1600 	strd	r1, r6, [r0]
 800aaf0:	300c      	adds	r0, #12
 800aaf2:	60a0      	str	r0, [r4, #8]
 800aaf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaf8:	f7ff feee 	bl	800a8d8 <memset>
 800aafc:	4620      	mov	r0, r4
 800aafe:	bd70      	pop	{r4, r5, r6, pc}

0800ab00 <__sfp_lock_acquire>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sfp_lock_acquire+0x8>)
 800ab02:	f000 b8b3 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800ab06:	bf00      	nop
 800ab08:	20000a94 	.word	0x20000a94

0800ab0c <__sfp_lock_release>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	; (800ab14 <__sfp_lock_release+0x8>)
 800ab0e:	f000 b8ae 	b.w	800ac6e <__retarget_lock_release_recursive>
 800ab12:	bf00      	nop
 800ab14:	20000a94 	.word	0x20000a94

0800ab18 <__sinit_lock_acquire>:
 800ab18:	4801      	ldr	r0, [pc, #4]	; (800ab20 <__sinit_lock_acquire+0x8>)
 800ab1a:	f000 b8a7 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800ab1e:	bf00      	nop
 800ab20:	20000a8f 	.word	0x20000a8f

0800ab24 <__sinit_lock_release>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__sinit_lock_release+0x8>)
 800ab26:	f000 b8a2 	b.w	800ac6e <__retarget_lock_release_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20000a8f 	.word	0x20000a8f

0800ab30 <__sinit>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	f7ff fff0 	bl	800ab18 <__sinit_lock_acquire>
 800ab38:	69a3      	ldr	r3, [r4, #24]
 800ab3a:	b11b      	cbz	r3, 800ab44 <__sinit+0x14>
 800ab3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab40:	f7ff bff0 	b.w	800ab24 <__sinit_lock_release>
 800ab44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab48:	6523      	str	r3, [r4, #80]	; 0x50
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <__sinit+0x68>)
 800ab4c:	4a13      	ldr	r2, [pc, #76]	; (800ab9c <__sinit+0x6c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab52:	42a3      	cmp	r3, r4
 800ab54:	bf04      	itt	eq
 800ab56:	2301      	moveq	r3, #1
 800ab58:	61a3      	streq	r3, [r4, #24]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f820 	bl	800aba0 <__sfp>
 800ab60:	6060      	str	r0, [r4, #4]
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 f81c 	bl	800aba0 <__sfp>
 800ab68:	60a0      	str	r0, [r4, #8]
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f818 	bl	800aba0 <__sfp>
 800ab70:	2200      	movs	r2, #0
 800ab72:	60e0      	str	r0, [r4, #12]
 800ab74:	2104      	movs	r1, #4
 800ab76:	6860      	ldr	r0, [r4, #4]
 800ab78:	f7ff ff82 	bl	800aa80 <std>
 800ab7c:	68a0      	ldr	r0, [r4, #8]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	2109      	movs	r1, #9
 800ab82:	f7ff ff7d 	bl	800aa80 <std>
 800ab86:	68e0      	ldr	r0, [r4, #12]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	2112      	movs	r1, #18
 800ab8c:	f7ff ff78 	bl	800aa80 <std>
 800ab90:	2301      	movs	r3, #1
 800ab92:	61a3      	str	r3, [r4, #24]
 800ab94:	e7d2      	b.n	800ab3c <__sinit+0xc>
 800ab96:	bf00      	nop
 800ab98:	0800c9e8 	.word	0x0800c9e8
 800ab9c:	0800aac9 	.word	0x0800aac9

0800aba0 <__sfp>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	4607      	mov	r7, r0
 800aba4:	f7ff ffac 	bl	800ab00 <__sfp_lock_acquire>
 800aba8:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <__sfp+0x84>)
 800abaa:	681e      	ldr	r6, [r3, #0]
 800abac:	69b3      	ldr	r3, [r6, #24]
 800abae:	b913      	cbnz	r3, 800abb6 <__sfp+0x16>
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff ffbd 	bl	800ab30 <__sinit>
 800abb6:	3648      	adds	r6, #72	; 0x48
 800abb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	d503      	bpl.n	800abc8 <__sfp+0x28>
 800abc0:	6833      	ldr	r3, [r6, #0]
 800abc2:	b30b      	cbz	r3, 800ac08 <__sfp+0x68>
 800abc4:	6836      	ldr	r6, [r6, #0]
 800abc6:	e7f7      	b.n	800abb8 <__sfp+0x18>
 800abc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abcc:	b9d5      	cbnz	r5, 800ac04 <__sfp+0x64>
 800abce:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <__sfp+0x88>)
 800abd0:	60e3      	str	r3, [r4, #12]
 800abd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abd6:	6665      	str	r5, [r4, #100]	; 0x64
 800abd8:	f000 f847 	bl	800ac6a <__retarget_lock_init_recursive>
 800abdc:	f7ff ff96 	bl	800ab0c <__sfp_lock_release>
 800abe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abe8:	6025      	str	r5, [r4, #0]
 800abea:	61a5      	str	r5, [r4, #24]
 800abec:	2208      	movs	r2, #8
 800abee:	4629      	mov	r1, r5
 800abf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abf4:	f7ff fe70 	bl	800a8d8 <memset>
 800abf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac00:	4620      	mov	r0, r4
 800ac02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac04:	3468      	adds	r4, #104	; 0x68
 800ac06:	e7d9      	b.n	800abbc <__sfp+0x1c>
 800ac08:	2104      	movs	r1, #4
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f7ff ff62 	bl	800aad4 <__sfmoreglue>
 800ac10:	4604      	mov	r4, r0
 800ac12:	6030      	str	r0, [r6, #0]
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d1d5      	bne.n	800abc4 <__sfp+0x24>
 800ac18:	f7ff ff78 	bl	800ab0c <__sfp_lock_release>
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	e7ee      	b.n	800ac00 <__sfp+0x60>
 800ac22:	bf00      	nop
 800ac24:	0800c9e8 	.word	0x0800c9e8
 800ac28:	ffff0001 	.word	0xffff0001

0800ac2c <_fwalk_reent>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4606      	mov	r6, r0
 800ac32:	4688      	mov	r8, r1
 800ac34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac38:	2700      	movs	r7, #0
 800ac3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac42:	d505      	bpl.n	800ac50 <_fwalk_reent+0x24>
 800ac44:	6824      	ldr	r4, [r4, #0]
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d1f7      	bne.n	800ac3a <_fwalk_reent+0xe>
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac50:	89ab      	ldrh	r3, [r5, #12]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d907      	bls.n	800ac66 <_fwalk_reent+0x3a>
 800ac56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	d003      	beq.n	800ac66 <_fwalk_reent+0x3a>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	47c0      	blx	r8
 800ac64:	4307      	orrs	r7, r0
 800ac66:	3568      	adds	r5, #104	; 0x68
 800ac68:	e7e9      	b.n	800ac3e <_fwalk_reent+0x12>

0800ac6a <__retarget_lock_init_recursive>:
 800ac6a:	4770      	bx	lr

0800ac6c <__retarget_lock_acquire_recursive>:
 800ac6c:	4770      	bx	lr

0800ac6e <__retarget_lock_release_recursive>:
 800ac6e:	4770      	bx	lr

0800ac70 <_lseek_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d07      	ldr	r5, [pc, #28]	; (800ac90 <_lseek_r+0x20>)
 800ac74:	4604      	mov	r4, r0
 800ac76:	4608      	mov	r0, r1
 800ac78:	4611      	mov	r1, r2
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	602a      	str	r2, [r5, #0]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f7f7 fc20 	bl	80024c4 <_lseek>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	d102      	bne.n	800ac8e <_lseek_r+0x1e>
 800ac88:	682b      	ldr	r3, [r5, #0]
 800ac8a:	b103      	cbz	r3, 800ac8e <_lseek_r+0x1e>
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	20000a98 	.word	0x20000a98

0800ac94 <_malloc_r>:
 800ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac96:	1ccd      	adds	r5, r1, #3
 800ac98:	f025 0503 	bic.w	r5, r5, #3
 800ac9c:	3508      	adds	r5, #8
 800ac9e:	2d0c      	cmp	r5, #12
 800aca0:	bf38      	it	cc
 800aca2:	250c      	movcc	r5, #12
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	4606      	mov	r6, r0
 800aca8:	db01      	blt.n	800acae <_malloc_r+0x1a>
 800acaa:	42a9      	cmp	r1, r5
 800acac:	d903      	bls.n	800acb6 <_malloc_r+0x22>
 800acae:	230c      	movs	r3, #12
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	2000      	movs	r0, #0
 800acb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb6:	f001 fb57 	bl	800c368 <__malloc_lock>
 800acba:	4921      	ldr	r1, [pc, #132]	; (800ad40 <_malloc_r+0xac>)
 800acbc:	680a      	ldr	r2, [r1, #0]
 800acbe:	4614      	mov	r4, r2
 800acc0:	b99c      	cbnz	r4, 800acea <_malloc_r+0x56>
 800acc2:	4f20      	ldr	r7, [pc, #128]	; (800ad44 <_malloc_r+0xb0>)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	b923      	cbnz	r3, 800acd2 <_malloc_r+0x3e>
 800acc8:	4621      	mov	r1, r4
 800acca:	4630      	mov	r0, r6
 800accc:	f000 ffb6 	bl	800bc3c <_sbrk_r>
 800acd0:	6038      	str	r0, [r7, #0]
 800acd2:	4629      	mov	r1, r5
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 ffb1 	bl	800bc3c <_sbrk_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d123      	bne.n	800ad26 <_malloc_r+0x92>
 800acde:	230c      	movs	r3, #12
 800ace0:	6033      	str	r3, [r6, #0]
 800ace2:	4630      	mov	r0, r6
 800ace4:	f001 fb46 	bl	800c374 <__malloc_unlock>
 800ace8:	e7e3      	b.n	800acb2 <_malloc_r+0x1e>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	1b5b      	subs	r3, r3, r5
 800acee:	d417      	bmi.n	800ad20 <_malloc_r+0x8c>
 800acf0:	2b0b      	cmp	r3, #11
 800acf2:	d903      	bls.n	800acfc <_malloc_r+0x68>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	441c      	add	r4, r3
 800acf8:	6025      	str	r5, [r4, #0]
 800acfa:	e004      	b.n	800ad06 <_malloc_r+0x72>
 800acfc:	6863      	ldr	r3, [r4, #4]
 800acfe:	42a2      	cmp	r2, r4
 800ad00:	bf0c      	ite	eq
 800ad02:	600b      	streq	r3, [r1, #0]
 800ad04:	6053      	strne	r3, [r2, #4]
 800ad06:	4630      	mov	r0, r6
 800ad08:	f001 fb34 	bl	800c374 <__malloc_unlock>
 800ad0c:	f104 000b 	add.w	r0, r4, #11
 800ad10:	1d23      	adds	r3, r4, #4
 800ad12:	f020 0007 	bic.w	r0, r0, #7
 800ad16:	1ac2      	subs	r2, r0, r3
 800ad18:	d0cc      	beq.n	800acb4 <_malloc_r+0x20>
 800ad1a:	1a1b      	subs	r3, r3, r0
 800ad1c:	50a3      	str	r3, [r4, r2]
 800ad1e:	e7c9      	b.n	800acb4 <_malloc_r+0x20>
 800ad20:	4622      	mov	r2, r4
 800ad22:	6864      	ldr	r4, [r4, #4]
 800ad24:	e7cc      	b.n	800acc0 <_malloc_r+0x2c>
 800ad26:	1cc4      	adds	r4, r0, #3
 800ad28:	f024 0403 	bic.w	r4, r4, #3
 800ad2c:	42a0      	cmp	r0, r4
 800ad2e:	d0e3      	beq.n	800acf8 <_malloc_r+0x64>
 800ad30:	1a21      	subs	r1, r4, r0
 800ad32:	4630      	mov	r0, r6
 800ad34:	f000 ff82 	bl	800bc3c <_sbrk_r>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d1dd      	bne.n	800acf8 <_malloc_r+0x64>
 800ad3c:	e7cf      	b.n	800acde <_malloc_r+0x4a>
 800ad3e:	bf00      	nop
 800ad40:	20000160 	.word	0x20000160
 800ad44:	20000164 	.word	0x20000164

0800ad48 <__ssputs_r>:
 800ad48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4c:	688e      	ldr	r6, [r1, #8]
 800ad4e:	429e      	cmp	r6, r3
 800ad50:	4682      	mov	sl, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	4690      	mov	r8, r2
 800ad56:	461f      	mov	r7, r3
 800ad58:	d838      	bhi.n	800adcc <__ssputs_r+0x84>
 800ad5a:	898a      	ldrh	r2, [r1, #12]
 800ad5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad60:	d032      	beq.n	800adc8 <__ssputs_r+0x80>
 800ad62:	6825      	ldr	r5, [r4, #0]
 800ad64:	6909      	ldr	r1, [r1, #16]
 800ad66:	eba5 0901 	sub.w	r9, r5, r1
 800ad6a:	6965      	ldr	r5, [r4, #20]
 800ad6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad74:	3301      	adds	r3, #1
 800ad76:	444b      	add	r3, r9
 800ad78:	106d      	asrs	r5, r5, #1
 800ad7a:	429d      	cmp	r5, r3
 800ad7c:	bf38      	it	cc
 800ad7e:	461d      	movcc	r5, r3
 800ad80:	0553      	lsls	r3, r2, #21
 800ad82:	d531      	bpl.n	800ade8 <__ssputs_r+0xa0>
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7ff ff85 	bl	800ac94 <_malloc_r>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	b950      	cbnz	r0, 800ada4 <__ssputs_r+0x5c>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	f8ca 3000 	str.w	r3, [sl]
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9a:	81a3      	strh	r3, [r4, #12]
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada4:	6921      	ldr	r1, [r4, #16]
 800ada6:	464a      	mov	r2, r9
 800ada8:	f001 fab6 	bl	800c318 <memcpy>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	6126      	str	r6, [r4, #16]
 800adba:	6165      	str	r5, [r4, #20]
 800adbc:	444e      	add	r6, r9
 800adbe:	eba5 0509 	sub.w	r5, r5, r9
 800adc2:	6026      	str	r6, [r4, #0]
 800adc4:	60a5      	str	r5, [r4, #8]
 800adc6:	463e      	mov	r6, r7
 800adc8:	42be      	cmp	r6, r7
 800adca:	d900      	bls.n	800adce <__ssputs_r+0x86>
 800adcc:	463e      	mov	r6, r7
 800adce:	4632      	mov	r2, r6
 800add0:	6820      	ldr	r0, [r4, #0]
 800add2:	4641      	mov	r1, r8
 800add4:	f001 faae 	bl	800c334 <memmove>
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	1b9b      	subs	r3, r3, r6
 800adde:	4432      	add	r2, r6
 800ade0:	60a3      	str	r3, [r4, #8]
 800ade2:	6022      	str	r2, [r4, #0]
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7db      	b.n	800ada0 <__ssputs_r+0x58>
 800ade8:	462a      	mov	r2, r5
 800adea:	f001 fb19 	bl	800c420 <_realloc_r>
 800adee:	4606      	mov	r6, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d1e1      	bne.n	800adb8 <__ssputs_r+0x70>
 800adf4:	6921      	ldr	r1, [r4, #16]
 800adf6:	4650      	mov	r0, sl
 800adf8:	f001 fac2 	bl	800c380 <_free_r>
 800adfc:	e7c7      	b.n	800ad8e <__ssputs_r+0x46>
	...

0800ae00 <_svfiprintf_r>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4698      	mov	r8, r3
 800ae06:	898b      	ldrh	r3, [r1, #12]
 800ae08:	061b      	lsls	r3, r3, #24
 800ae0a:	b09d      	sub	sp, #116	; 0x74
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	4614      	mov	r4, r2
 800ae12:	d50e      	bpl.n	800ae32 <_svfiprintf_r+0x32>
 800ae14:	690b      	ldr	r3, [r1, #16]
 800ae16:	b963      	cbnz	r3, 800ae32 <_svfiprintf_r+0x32>
 800ae18:	2140      	movs	r1, #64	; 0x40
 800ae1a:	f7ff ff3b 	bl	800ac94 <_malloc_r>
 800ae1e:	6028      	str	r0, [r5, #0]
 800ae20:	6128      	str	r0, [r5, #16]
 800ae22:	b920      	cbnz	r0, 800ae2e <_svfiprintf_r+0x2e>
 800ae24:	230c      	movs	r3, #12
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	e0d1      	b.n	800afd2 <_svfiprintf_r+0x1d2>
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	616b      	str	r3, [r5, #20]
 800ae32:	2300      	movs	r3, #0
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	2320      	movs	r3, #32
 800ae38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae40:	2330      	movs	r3, #48	; 0x30
 800ae42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afec <_svfiprintf_r+0x1ec>
 800ae46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae4a:	f04f 0901 	mov.w	r9, #1
 800ae4e:	4623      	mov	r3, r4
 800ae50:	469a      	mov	sl, r3
 800ae52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae56:	b10a      	cbz	r2, 800ae5c <_svfiprintf_r+0x5c>
 800ae58:	2a25      	cmp	r2, #37	; 0x25
 800ae5a:	d1f9      	bne.n	800ae50 <_svfiprintf_r+0x50>
 800ae5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae60:	d00b      	beq.n	800ae7a <_svfiprintf_r+0x7a>
 800ae62:	465b      	mov	r3, fp
 800ae64:	4622      	mov	r2, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f7ff ff6d 	bl	800ad48 <__ssputs_r>
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f000 80aa 	beq.w	800afc8 <_svfiprintf_r+0x1c8>
 800ae74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae76:	445a      	add	r2, fp
 800ae78:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 80a2 	beq.w	800afc8 <_svfiprintf_r+0x1c8>
 800ae84:	2300      	movs	r3, #0
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8e:	f10a 0a01 	add.w	sl, sl, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	9307      	str	r3, [sp, #28]
 800ae96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae9c:	4654      	mov	r4, sl
 800ae9e:	2205      	movs	r2, #5
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	4851      	ldr	r0, [pc, #324]	; (800afec <_svfiprintf_r+0x1ec>)
 800aea6:	f7f5 f9b3 	bl	8000210 <memchr>
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	b9d8      	cbnz	r0, 800aee6 <_svfiprintf_r+0xe6>
 800aeae:	06d0      	lsls	r0, r2, #27
 800aeb0:	bf44      	itt	mi
 800aeb2:	2320      	movmi	r3, #32
 800aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb8:	0711      	lsls	r1, r2, #28
 800aeba:	bf44      	itt	mi
 800aebc:	232b      	movmi	r3, #43	; 0x2b
 800aebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec2:	f89a 3000 	ldrb.w	r3, [sl]
 800aec6:	2b2a      	cmp	r3, #42	; 0x2a
 800aec8:	d015      	beq.n	800aef6 <_svfiprintf_r+0xf6>
 800aeca:	9a07      	ldr	r2, [sp, #28]
 800aecc:	4654      	mov	r4, sl
 800aece:	2000      	movs	r0, #0
 800aed0:	f04f 0c0a 	mov.w	ip, #10
 800aed4:	4621      	mov	r1, r4
 800aed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeda:	3b30      	subs	r3, #48	; 0x30
 800aedc:	2b09      	cmp	r3, #9
 800aede:	d94e      	bls.n	800af7e <_svfiprintf_r+0x17e>
 800aee0:	b1b0      	cbz	r0, 800af10 <_svfiprintf_r+0x110>
 800aee2:	9207      	str	r2, [sp, #28]
 800aee4:	e014      	b.n	800af10 <_svfiprintf_r+0x110>
 800aee6:	eba0 0308 	sub.w	r3, r0, r8
 800aeea:	fa09 f303 	lsl.w	r3, r9, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	46a2      	mov	sl, r4
 800aef4:	e7d2      	b.n	800ae9c <_svfiprintf_r+0x9c>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	1d19      	adds	r1, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	9103      	str	r1, [sp, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfbb      	ittet	lt
 800af02:	425b      	neglt	r3, r3
 800af04:	f042 0202 	orrlt.w	r2, r2, #2
 800af08:	9307      	strge	r3, [sp, #28]
 800af0a:	9307      	strlt	r3, [sp, #28]
 800af0c:	bfb8      	it	lt
 800af0e:	9204      	strlt	r2, [sp, #16]
 800af10:	7823      	ldrb	r3, [r4, #0]
 800af12:	2b2e      	cmp	r3, #46	; 0x2e
 800af14:	d10c      	bne.n	800af30 <_svfiprintf_r+0x130>
 800af16:	7863      	ldrb	r3, [r4, #1]
 800af18:	2b2a      	cmp	r3, #42	; 0x2a
 800af1a:	d135      	bne.n	800af88 <_svfiprintf_r+0x188>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	1d1a      	adds	r2, r3, #4
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	9203      	str	r2, [sp, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfb8      	it	lt
 800af28:	f04f 33ff 	movlt.w	r3, #4294967295
 800af2c:	3402      	adds	r4, #2
 800af2e:	9305      	str	r3, [sp, #20]
 800af30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800affc <_svfiprintf_r+0x1fc>
 800af34:	7821      	ldrb	r1, [r4, #0]
 800af36:	2203      	movs	r2, #3
 800af38:	4650      	mov	r0, sl
 800af3a:	f7f5 f969 	bl	8000210 <memchr>
 800af3e:	b140      	cbz	r0, 800af52 <_svfiprintf_r+0x152>
 800af40:	2340      	movs	r3, #64	; 0x40
 800af42:	eba0 000a 	sub.w	r0, r0, sl
 800af46:	fa03 f000 	lsl.w	r0, r3, r0
 800af4a:	9b04      	ldr	r3, [sp, #16]
 800af4c:	4303      	orrs	r3, r0
 800af4e:	3401      	adds	r4, #1
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af56:	4826      	ldr	r0, [pc, #152]	; (800aff0 <_svfiprintf_r+0x1f0>)
 800af58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5c:	2206      	movs	r2, #6
 800af5e:	f7f5 f957 	bl	8000210 <memchr>
 800af62:	2800      	cmp	r0, #0
 800af64:	d038      	beq.n	800afd8 <_svfiprintf_r+0x1d8>
 800af66:	4b23      	ldr	r3, [pc, #140]	; (800aff4 <_svfiprintf_r+0x1f4>)
 800af68:	bb1b      	cbnz	r3, 800afb2 <_svfiprintf_r+0x1b2>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	3307      	adds	r3, #7
 800af6e:	f023 0307 	bic.w	r3, r3, #7
 800af72:	3308      	adds	r3, #8
 800af74:	9303      	str	r3, [sp, #12]
 800af76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af78:	4433      	add	r3, r6
 800af7a:	9309      	str	r3, [sp, #36]	; 0x24
 800af7c:	e767      	b.n	800ae4e <_svfiprintf_r+0x4e>
 800af7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af82:	460c      	mov	r4, r1
 800af84:	2001      	movs	r0, #1
 800af86:	e7a5      	b.n	800aed4 <_svfiprintf_r+0xd4>
 800af88:	2300      	movs	r3, #0
 800af8a:	3401      	adds	r4, #1
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	4619      	mov	r1, r3
 800af90:	f04f 0c0a 	mov.w	ip, #10
 800af94:	4620      	mov	r0, r4
 800af96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af9a:	3a30      	subs	r2, #48	; 0x30
 800af9c:	2a09      	cmp	r2, #9
 800af9e:	d903      	bls.n	800afa8 <_svfiprintf_r+0x1a8>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0c5      	beq.n	800af30 <_svfiprintf_r+0x130>
 800afa4:	9105      	str	r1, [sp, #20]
 800afa6:	e7c3      	b.n	800af30 <_svfiprintf_r+0x130>
 800afa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afac:	4604      	mov	r4, r0
 800afae:	2301      	movs	r3, #1
 800afb0:	e7f0      	b.n	800af94 <_svfiprintf_r+0x194>
 800afb2:	ab03      	add	r3, sp, #12
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	462a      	mov	r2, r5
 800afb8:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <_svfiprintf_r+0x1f8>)
 800afba:	a904      	add	r1, sp, #16
 800afbc:	4638      	mov	r0, r7
 800afbe:	f3af 8000 	nop.w
 800afc2:	1c42      	adds	r2, r0, #1
 800afc4:	4606      	mov	r6, r0
 800afc6:	d1d6      	bne.n	800af76 <_svfiprintf_r+0x176>
 800afc8:	89ab      	ldrh	r3, [r5, #12]
 800afca:	065b      	lsls	r3, r3, #25
 800afcc:	f53f af2c 	bmi.w	800ae28 <_svfiprintf_r+0x28>
 800afd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd2:	b01d      	add	sp, #116	; 0x74
 800afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	462a      	mov	r2, r5
 800afde:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <_svfiprintf_r+0x1f8>)
 800afe0:	a904      	add	r1, sp, #16
 800afe2:	4638      	mov	r0, r7
 800afe4:	f000 fba6 	bl	800b734 <_printf_i>
 800afe8:	e7eb      	b.n	800afc2 <_svfiprintf_r+0x1c2>
 800afea:	bf00      	nop
 800afec:	0800ca4c 	.word	0x0800ca4c
 800aff0:	0800ca56 	.word	0x0800ca56
 800aff4:	00000000 	.word	0x00000000
 800aff8:	0800ad49 	.word	0x0800ad49
 800affc:	0800ca52 	.word	0x0800ca52

0800b000 <_sungetc_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	1c4b      	adds	r3, r1, #1
 800b004:	4614      	mov	r4, r2
 800b006:	d103      	bne.n	800b010 <_sungetc_r+0x10>
 800b008:	f04f 35ff 	mov.w	r5, #4294967295
 800b00c:	4628      	mov	r0, r5
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	8993      	ldrh	r3, [r2, #12]
 800b012:	f023 0320 	bic.w	r3, r3, #32
 800b016:	8193      	strh	r3, [r2, #12]
 800b018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	b2cd      	uxtb	r5, r1
 800b01e:	b18b      	cbz	r3, 800b044 <_sungetc_r+0x44>
 800b020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b022:	4293      	cmp	r3, r2
 800b024:	dd08      	ble.n	800b038 <_sungetc_r+0x38>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	1e5a      	subs	r2, r3, #1
 800b02a:	6022      	str	r2, [r4, #0]
 800b02c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b030:	6863      	ldr	r3, [r4, #4]
 800b032:	3301      	adds	r3, #1
 800b034:	6063      	str	r3, [r4, #4]
 800b036:	e7e9      	b.n	800b00c <_sungetc_r+0xc>
 800b038:	4621      	mov	r1, r4
 800b03a:	f000 ff4d 	bl	800bed8 <__submore>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d0f1      	beq.n	800b026 <_sungetc_r+0x26>
 800b042:	e7e1      	b.n	800b008 <_sungetc_r+0x8>
 800b044:	6921      	ldr	r1, [r4, #16]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	b151      	cbz	r1, 800b060 <_sungetc_r+0x60>
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d208      	bcs.n	800b060 <_sungetc_r+0x60>
 800b04e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b052:	42a9      	cmp	r1, r5
 800b054:	d104      	bne.n	800b060 <_sungetc_r+0x60>
 800b056:	3b01      	subs	r3, #1
 800b058:	3201      	adds	r2, #1
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	6062      	str	r2, [r4, #4]
 800b05e:	e7d5      	b.n	800b00c <_sungetc_r+0xc>
 800b060:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b068:	6363      	str	r3, [r4, #52]	; 0x34
 800b06a:	2303      	movs	r3, #3
 800b06c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b06e:	4623      	mov	r3, r4
 800b070:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	2301      	movs	r3, #1
 800b078:	e7dc      	b.n	800b034 <_sungetc_r+0x34>

0800b07a <__ssrefill_r>:
 800b07a:	b510      	push	{r4, lr}
 800b07c:	460c      	mov	r4, r1
 800b07e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b080:	b169      	cbz	r1, 800b09e <__ssrefill_r+0x24>
 800b082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b086:	4299      	cmp	r1, r3
 800b088:	d001      	beq.n	800b08e <__ssrefill_r+0x14>
 800b08a:	f001 f979 	bl	800c380 <_free_r>
 800b08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	2000      	movs	r0, #0
 800b094:	6360      	str	r0, [r4, #52]	; 0x34
 800b096:	b113      	cbz	r3, 800b09e <__ssrefill_r+0x24>
 800b098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6063      	str	r3, [r4, #4]
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f043 0320 	orr.w	r3, r3, #32
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	e7f3      	b.n	800b09c <__ssrefill_r+0x22>

0800b0b4 <__ssvfiscanf_r>:
 800b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b0be:	2100      	movs	r1, #0
 800b0c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b0c4:	49b2      	ldr	r1, [pc, #712]	; (800b390 <__ssvfiscanf_r+0x2dc>)
 800b0c6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b0c8:	f10d 0804 	add.w	r8, sp, #4
 800b0cc:	49b1      	ldr	r1, [pc, #708]	; (800b394 <__ssvfiscanf_r+0x2e0>)
 800b0ce:	4fb2      	ldr	r7, [pc, #712]	; (800b398 <__ssvfiscanf_r+0x2e4>)
 800b0d0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b39c <__ssvfiscanf_r+0x2e8>
 800b0d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b0d8:	4606      	mov	r6, r0
 800b0da:	91a1      	str	r1, [sp, #644]	; 0x284
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	f892 a000 	ldrb.w	sl, [r2]
 800b0e2:	f1ba 0f00 	cmp.w	sl, #0
 800b0e6:	f000 8151 	beq.w	800b38c <__ssvfiscanf_r+0x2d8>
 800b0ea:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b0ee:	f013 0308 	ands.w	r3, r3, #8
 800b0f2:	f102 0501 	add.w	r5, r2, #1
 800b0f6:	d019      	beq.n	800b12c <__ssvfiscanf_r+0x78>
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dd0f      	ble.n	800b11e <__ssvfiscanf_r+0x6a>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	781a      	ldrb	r2, [r3, #0]
 800b102:	5cba      	ldrb	r2, [r7, r2]
 800b104:	0712      	lsls	r2, r2, #28
 800b106:	d401      	bmi.n	800b10c <__ssvfiscanf_r+0x58>
 800b108:	462a      	mov	r2, r5
 800b10a:	e7e8      	b.n	800b0de <__ssvfiscanf_r+0x2a>
 800b10c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b10e:	3201      	adds	r2, #1
 800b110:	9245      	str	r2, [sp, #276]	; 0x114
 800b112:	6862      	ldr	r2, [r4, #4]
 800b114:	3301      	adds	r3, #1
 800b116:	3a01      	subs	r2, #1
 800b118:	6062      	str	r2, [r4, #4]
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	e7ec      	b.n	800b0f8 <__ssvfiscanf_r+0x44>
 800b11e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b120:	4621      	mov	r1, r4
 800b122:	4630      	mov	r0, r6
 800b124:	4798      	blx	r3
 800b126:	2800      	cmp	r0, #0
 800b128:	d0e9      	beq.n	800b0fe <__ssvfiscanf_r+0x4a>
 800b12a:	e7ed      	b.n	800b108 <__ssvfiscanf_r+0x54>
 800b12c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b130:	f040 8083 	bne.w	800b23a <__ssvfiscanf_r+0x186>
 800b134:	9341      	str	r3, [sp, #260]	; 0x104
 800b136:	9343      	str	r3, [sp, #268]	; 0x10c
 800b138:	7853      	ldrb	r3, [r2, #1]
 800b13a:	2b2a      	cmp	r3, #42	; 0x2a
 800b13c:	bf02      	ittt	eq
 800b13e:	2310      	moveq	r3, #16
 800b140:	1c95      	addeq	r5, r2, #2
 800b142:	9341      	streq	r3, [sp, #260]	; 0x104
 800b144:	220a      	movs	r2, #10
 800b146:	46ab      	mov	fp, r5
 800b148:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b14c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b150:	2b09      	cmp	r3, #9
 800b152:	d91d      	bls.n	800b190 <__ssvfiscanf_r+0xdc>
 800b154:	4891      	ldr	r0, [pc, #580]	; (800b39c <__ssvfiscanf_r+0x2e8>)
 800b156:	2203      	movs	r2, #3
 800b158:	f7f5 f85a 	bl	8000210 <memchr>
 800b15c:	b140      	cbz	r0, 800b170 <__ssvfiscanf_r+0xbc>
 800b15e:	2301      	movs	r3, #1
 800b160:	eba0 0009 	sub.w	r0, r0, r9
 800b164:	fa03 f000 	lsl.w	r0, r3, r0
 800b168:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b16a:	4318      	orrs	r0, r3
 800b16c:	9041      	str	r0, [sp, #260]	; 0x104
 800b16e:	465d      	mov	r5, fp
 800b170:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b174:	2b78      	cmp	r3, #120	; 0x78
 800b176:	d806      	bhi.n	800b186 <__ssvfiscanf_r+0xd2>
 800b178:	2b57      	cmp	r3, #87	; 0x57
 800b17a:	d810      	bhi.n	800b19e <__ssvfiscanf_r+0xea>
 800b17c:	2b25      	cmp	r3, #37	; 0x25
 800b17e:	d05c      	beq.n	800b23a <__ssvfiscanf_r+0x186>
 800b180:	d856      	bhi.n	800b230 <__ssvfiscanf_r+0x17c>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d074      	beq.n	800b270 <__ssvfiscanf_r+0x1bc>
 800b186:	2303      	movs	r3, #3
 800b188:	9347      	str	r3, [sp, #284]	; 0x11c
 800b18a:	230a      	movs	r3, #10
 800b18c:	9342      	str	r3, [sp, #264]	; 0x108
 800b18e:	e081      	b.n	800b294 <__ssvfiscanf_r+0x1e0>
 800b190:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b192:	fb02 1303 	mla	r3, r2, r3, r1
 800b196:	3b30      	subs	r3, #48	; 0x30
 800b198:	9343      	str	r3, [sp, #268]	; 0x10c
 800b19a:	465d      	mov	r5, fp
 800b19c:	e7d3      	b.n	800b146 <__ssvfiscanf_r+0x92>
 800b19e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b1a2:	2a20      	cmp	r2, #32
 800b1a4:	d8ef      	bhi.n	800b186 <__ssvfiscanf_r+0xd2>
 800b1a6:	a101      	add	r1, pc, #4	; (adr r1, 800b1ac <__ssvfiscanf_r+0xf8>)
 800b1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1ac:	0800b27f 	.word	0x0800b27f
 800b1b0:	0800b187 	.word	0x0800b187
 800b1b4:	0800b187 	.word	0x0800b187
 800b1b8:	0800b2dd 	.word	0x0800b2dd
 800b1bc:	0800b187 	.word	0x0800b187
 800b1c0:	0800b187 	.word	0x0800b187
 800b1c4:	0800b187 	.word	0x0800b187
 800b1c8:	0800b187 	.word	0x0800b187
 800b1cc:	0800b187 	.word	0x0800b187
 800b1d0:	0800b187 	.word	0x0800b187
 800b1d4:	0800b187 	.word	0x0800b187
 800b1d8:	0800b2f3 	.word	0x0800b2f3
 800b1dc:	0800b2c9 	.word	0x0800b2c9
 800b1e0:	0800b237 	.word	0x0800b237
 800b1e4:	0800b237 	.word	0x0800b237
 800b1e8:	0800b237 	.word	0x0800b237
 800b1ec:	0800b187 	.word	0x0800b187
 800b1f0:	0800b2cd 	.word	0x0800b2cd
 800b1f4:	0800b187 	.word	0x0800b187
 800b1f8:	0800b187 	.word	0x0800b187
 800b1fc:	0800b187 	.word	0x0800b187
 800b200:	0800b187 	.word	0x0800b187
 800b204:	0800b303 	.word	0x0800b303
 800b208:	0800b2d5 	.word	0x0800b2d5
 800b20c:	0800b277 	.word	0x0800b277
 800b210:	0800b187 	.word	0x0800b187
 800b214:	0800b187 	.word	0x0800b187
 800b218:	0800b2ff 	.word	0x0800b2ff
 800b21c:	0800b187 	.word	0x0800b187
 800b220:	0800b2c9 	.word	0x0800b2c9
 800b224:	0800b187 	.word	0x0800b187
 800b228:	0800b187 	.word	0x0800b187
 800b22c:	0800b27f 	.word	0x0800b27f
 800b230:	3b45      	subs	r3, #69	; 0x45
 800b232:	2b02      	cmp	r3, #2
 800b234:	d8a7      	bhi.n	800b186 <__ssvfiscanf_r+0xd2>
 800b236:	2305      	movs	r3, #5
 800b238:	e02b      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b23a:	6863      	ldr	r3, [r4, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd0d      	ble.n	800b25c <__ssvfiscanf_r+0x1a8>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	4552      	cmp	r2, sl
 800b246:	f040 80a1 	bne.w	800b38c <__ssvfiscanf_r+0x2d8>
 800b24a:	3301      	adds	r3, #1
 800b24c:	6862      	ldr	r2, [r4, #4]
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b252:	3a01      	subs	r2, #1
 800b254:	3301      	adds	r3, #1
 800b256:	6062      	str	r2, [r4, #4]
 800b258:	9345      	str	r3, [sp, #276]	; 0x114
 800b25a:	e755      	b.n	800b108 <__ssvfiscanf_r+0x54>
 800b25c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b25e:	4621      	mov	r1, r4
 800b260:	4630      	mov	r0, r6
 800b262:	4798      	blx	r3
 800b264:	2800      	cmp	r0, #0
 800b266:	d0eb      	beq.n	800b240 <__ssvfiscanf_r+0x18c>
 800b268:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f040 8084 	bne.w	800b378 <__ssvfiscanf_r+0x2c4>
 800b270:	f04f 30ff 	mov.w	r0, #4294967295
 800b274:	e086      	b.n	800b384 <__ssvfiscanf_r+0x2d0>
 800b276:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b278:	f042 0220 	orr.w	r2, r2, #32
 800b27c:	9241      	str	r2, [sp, #260]	; 0x104
 800b27e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b284:	9241      	str	r2, [sp, #260]	; 0x104
 800b286:	2210      	movs	r2, #16
 800b288:	2b6f      	cmp	r3, #111	; 0x6f
 800b28a:	9242      	str	r2, [sp, #264]	; 0x108
 800b28c:	bf34      	ite	cc
 800b28e:	2303      	movcc	r3, #3
 800b290:	2304      	movcs	r3, #4
 800b292:	9347      	str	r3, [sp, #284]	; 0x11c
 800b294:	6863      	ldr	r3, [r4, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd41      	ble.n	800b31e <__ssvfiscanf_r+0x26a>
 800b29a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b29c:	0659      	lsls	r1, r3, #25
 800b29e:	d404      	bmi.n	800b2aa <__ssvfiscanf_r+0x1f6>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	781a      	ldrb	r2, [r3, #0]
 800b2a4:	5cba      	ldrb	r2, [r7, r2]
 800b2a6:	0712      	lsls	r2, r2, #28
 800b2a8:	d440      	bmi.n	800b32c <__ssvfiscanf_r+0x278>
 800b2aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	dc4f      	bgt.n	800b350 <__ssvfiscanf_r+0x29c>
 800b2b0:	466b      	mov	r3, sp
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	a941      	add	r1, sp, #260	; 0x104
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f000 fb62 	bl	800b980 <_scanf_chars>
 800b2bc:	2801      	cmp	r0, #1
 800b2be:	d065      	beq.n	800b38c <__ssvfiscanf_r+0x2d8>
 800b2c0:	2802      	cmp	r0, #2
 800b2c2:	f47f af21 	bne.w	800b108 <__ssvfiscanf_r+0x54>
 800b2c6:	e7cf      	b.n	800b268 <__ssvfiscanf_r+0x1b4>
 800b2c8:	220a      	movs	r2, #10
 800b2ca:	e7dd      	b.n	800b288 <__ssvfiscanf_r+0x1d4>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9342      	str	r3, [sp, #264]	; 0x108
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e7de      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	9342      	str	r3, [sp, #264]	; 0x108
 800b2d8:	2304      	movs	r3, #4
 800b2da:	e7da      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f000 fcbc 	bl	800bc5c <__sccl>
 800b2e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ea:	9341      	str	r3, [sp, #260]	; 0x104
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e7cf      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b2f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f8:	9341      	str	r3, [sp, #260]	; 0x104
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e7c9      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b2fe:	2302      	movs	r3, #2
 800b300:	e7c7      	b.n	800b292 <__ssvfiscanf_r+0x1de>
 800b302:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b304:	06c3      	lsls	r3, r0, #27
 800b306:	f53f aeff 	bmi.w	800b108 <__ssvfiscanf_r+0x54>
 800b30a:	9b00      	ldr	r3, [sp, #0]
 800b30c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b30e:	1d19      	adds	r1, r3, #4
 800b310:	9100      	str	r1, [sp, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	07c0      	lsls	r0, r0, #31
 800b316:	bf4c      	ite	mi
 800b318:	801a      	strhmi	r2, [r3, #0]
 800b31a:	601a      	strpl	r2, [r3, #0]
 800b31c:	e6f4      	b.n	800b108 <__ssvfiscanf_r+0x54>
 800b31e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b320:	4621      	mov	r1, r4
 800b322:	4630      	mov	r0, r6
 800b324:	4798      	blx	r3
 800b326:	2800      	cmp	r0, #0
 800b328:	d0b7      	beq.n	800b29a <__ssvfiscanf_r+0x1e6>
 800b32a:	e79d      	b.n	800b268 <__ssvfiscanf_r+0x1b4>
 800b32c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b32e:	3201      	adds	r2, #1
 800b330:	9245      	str	r2, [sp, #276]	; 0x114
 800b332:	6862      	ldr	r2, [r4, #4]
 800b334:	3a01      	subs	r2, #1
 800b336:	2a00      	cmp	r2, #0
 800b338:	6062      	str	r2, [r4, #4]
 800b33a:	dd02      	ble.n	800b342 <__ssvfiscanf_r+0x28e>
 800b33c:	3301      	adds	r3, #1
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	e7ae      	b.n	800b2a0 <__ssvfiscanf_r+0x1ec>
 800b342:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b344:	4621      	mov	r1, r4
 800b346:	4630      	mov	r0, r6
 800b348:	4798      	blx	r3
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d0a8      	beq.n	800b2a0 <__ssvfiscanf_r+0x1ec>
 800b34e:	e78b      	b.n	800b268 <__ssvfiscanf_r+0x1b4>
 800b350:	2b04      	cmp	r3, #4
 800b352:	dc06      	bgt.n	800b362 <__ssvfiscanf_r+0x2ae>
 800b354:	466b      	mov	r3, sp
 800b356:	4622      	mov	r2, r4
 800b358:	a941      	add	r1, sp, #260	; 0x104
 800b35a:	4630      	mov	r0, r6
 800b35c:	f000 fb68 	bl	800ba30 <_scanf_i>
 800b360:	e7ac      	b.n	800b2bc <__ssvfiscanf_r+0x208>
 800b362:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <__ssvfiscanf_r+0x2ec>)
 800b364:	2b00      	cmp	r3, #0
 800b366:	f43f aecf 	beq.w	800b108 <__ssvfiscanf_r+0x54>
 800b36a:	466b      	mov	r3, sp
 800b36c:	4622      	mov	r2, r4
 800b36e:	a941      	add	r1, sp, #260	; 0x104
 800b370:	4630      	mov	r0, r6
 800b372:	f3af 8000 	nop.w
 800b376:	e7a1      	b.n	800b2bc <__ssvfiscanf_r+0x208>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b37e:	bf18      	it	ne
 800b380:	f04f 30ff 	movne.w	r0, #4294967295
 800b384:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b38e:	e7f9      	b.n	800b384 <__ssvfiscanf_r+0x2d0>
 800b390:	0800b001 	.word	0x0800b001
 800b394:	0800b07b 	.word	0x0800b07b
 800b398:	0800ca9b 	.word	0x0800ca9b
 800b39c:	0800ca52 	.word	0x0800ca52
 800b3a0:	00000000 	.word	0x00000000

0800b3a4 <__sfputc_r>:
 800b3a4:	6893      	ldr	r3, [r2, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	b410      	push	{r4}
 800b3ac:	6093      	str	r3, [r2, #8]
 800b3ae:	da08      	bge.n	800b3c2 <__sfputc_r+0x1e>
 800b3b0:	6994      	ldr	r4, [r2, #24]
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	db01      	blt.n	800b3ba <__sfputc_r+0x16>
 800b3b6:	290a      	cmp	r1, #10
 800b3b8:	d103      	bne.n	800b3c2 <__sfputc_r+0x1e>
 800b3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3be:	f000 bdc5 	b.w	800bf4c <__swbuf_r>
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	1c58      	adds	r0, r3, #1
 800b3c6:	6010      	str	r0, [r2, #0]
 800b3c8:	7019      	strb	r1, [r3, #0]
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <__sfputs_r>:
 800b3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	4614      	mov	r4, r2
 800b3da:	18d5      	adds	r5, r2, r3
 800b3dc:	42ac      	cmp	r4, r5
 800b3de:	d101      	bne.n	800b3e4 <__sfputs_r+0x12>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e007      	b.n	800b3f4 <__sfputs_r+0x22>
 800b3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e8:	463a      	mov	r2, r7
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ffda 	bl	800b3a4 <__sfputc_r>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d1f3      	bne.n	800b3dc <__sfputs_r+0xa>
 800b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f8 <_vfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	b09d      	sub	sp, #116	; 0x74
 800b400:	4614      	mov	r4, r2
 800b402:	4698      	mov	r8, r3
 800b404:	4606      	mov	r6, r0
 800b406:	b118      	cbz	r0, 800b410 <_vfiprintf_r+0x18>
 800b408:	6983      	ldr	r3, [r0, #24]
 800b40a:	b90b      	cbnz	r3, 800b410 <_vfiprintf_r+0x18>
 800b40c:	f7ff fb90 	bl	800ab30 <__sinit>
 800b410:	4b89      	ldr	r3, [pc, #548]	; (800b638 <_vfiprintf_r+0x240>)
 800b412:	429d      	cmp	r5, r3
 800b414:	d11b      	bne.n	800b44e <_vfiprintf_r+0x56>
 800b416:	6875      	ldr	r5, [r6, #4]
 800b418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d405      	bmi.n	800b42a <_vfiprintf_r+0x32>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d402      	bmi.n	800b42a <_vfiprintf_r+0x32>
 800b424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b426:	f7ff fc21 	bl	800ac6c <__retarget_lock_acquire_recursive>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	071b      	lsls	r3, r3, #28
 800b42e:	d501      	bpl.n	800b434 <_vfiprintf_r+0x3c>
 800b430:	692b      	ldr	r3, [r5, #16]
 800b432:	b9eb      	cbnz	r3, 800b470 <_vfiprintf_r+0x78>
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f000 fdda 	bl	800bff0 <__swsetup_r>
 800b43c:	b1c0      	cbz	r0, 800b470 <_vfiprintf_r+0x78>
 800b43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b440:	07dc      	lsls	r4, r3, #31
 800b442:	d50e      	bpl.n	800b462 <_vfiprintf_r+0x6a>
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	b01d      	add	sp, #116	; 0x74
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	4b7b      	ldr	r3, [pc, #492]	; (800b63c <_vfiprintf_r+0x244>)
 800b450:	429d      	cmp	r5, r3
 800b452:	d101      	bne.n	800b458 <_vfiprintf_r+0x60>
 800b454:	68b5      	ldr	r5, [r6, #8]
 800b456:	e7df      	b.n	800b418 <_vfiprintf_r+0x20>
 800b458:	4b79      	ldr	r3, [pc, #484]	; (800b640 <_vfiprintf_r+0x248>)
 800b45a:	429d      	cmp	r5, r3
 800b45c:	bf08      	it	eq
 800b45e:	68f5      	ldreq	r5, [r6, #12]
 800b460:	e7da      	b.n	800b418 <_vfiprintf_r+0x20>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	0598      	lsls	r0, r3, #22
 800b466:	d4ed      	bmi.n	800b444 <_vfiprintf_r+0x4c>
 800b468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46a:	f7ff fc00 	bl	800ac6e <__retarget_lock_release_recursive>
 800b46e:	e7e9      	b.n	800b444 <_vfiprintf_r+0x4c>
 800b470:	2300      	movs	r3, #0
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	2320      	movs	r3, #32
 800b476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47e:	2330      	movs	r3, #48	; 0x30
 800b480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b644 <_vfiprintf_r+0x24c>
 800b484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b488:	f04f 0901 	mov.w	r9, #1
 800b48c:	4623      	mov	r3, r4
 800b48e:	469a      	mov	sl, r3
 800b490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b494:	b10a      	cbz	r2, 800b49a <_vfiprintf_r+0xa2>
 800b496:	2a25      	cmp	r2, #37	; 0x25
 800b498:	d1f9      	bne.n	800b48e <_vfiprintf_r+0x96>
 800b49a:	ebba 0b04 	subs.w	fp, sl, r4
 800b49e:	d00b      	beq.n	800b4b8 <_vfiprintf_r+0xc0>
 800b4a0:	465b      	mov	r3, fp
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f7ff ff93 	bl	800b3d2 <__sfputs_r>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	f000 80aa 	beq.w	800b606 <_vfiprintf_r+0x20e>
 800b4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b4:	445a      	add	r2, fp
 800b4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80a2 	beq.w	800b606 <_vfiprintf_r+0x20e>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4cc:	f10a 0a01 	add.w	sl, sl, #1
 800b4d0:	9304      	str	r3, [sp, #16]
 800b4d2:	9307      	str	r3, [sp, #28]
 800b4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b4da:	4654      	mov	r4, sl
 800b4dc:	2205      	movs	r2, #5
 800b4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e2:	4858      	ldr	r0, [pc, #352]	; (800b644 <_vfiprintf_r+0x24c>)
 800b4e4:	f7f4 fe94 	bl	8000210 <memchr>
 800b4e8:	9a04      	ldr	r2, [sp, #16]
 800b4ea:	b9d8      	cbnz	r0, 800b524 <_vfiprintf_r+0x12c>
 800b4ec:	06d1      	lsls	r1, r2, #27
 800b4ee:	bf44      	itt	mi
 800b4f0:	2320      	movmi	r3, #32
 800b4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f6:	0713      	lsls	r3, r2, #28
 800b4f8:	bf44      	itt	mi
 800b4fa:	232b      	movmi	r3, #43	; 0x2b
 800b4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b500:	f89a 3000 	ldrb.w	r3, [sl]
 800b504:	2b2a      	cmp	r3, #42	; 0x2a
 800b506:	d015      	beq.n	800b534 <_vfiprintf_r+0x13c>
 800b508:	9a07      	ldr	r2, [sp, #28]
 800b50a:	4654      	mov	r4, sl
 800b50c:	2000      	movs	r0, #0
 800b50e:	f04f 0c0a 	mov.w	ip, #10
 800b512:	4621      	mov	r1, r4
 800b514:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b518:	3b30      	subs	r3, #48	; 0x30
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d94e      	bls.n	800b5bc <_vfiprintf_r+0x1c4>
 800b51e:	b1b0      	cbz	r0, 800b54e <_vfiprintf_r+0x156>
 800b520:	9207      	str	r2, [sp, #28]
 800b522:	e014      	b.n	800b54e <_vfiprintf_r+0x156>
 800b524:	eba0 0308 	sub.w	r3, r0, r8
 800b528:	fa09 f303 	lsl.w	r3, r9, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	46a2      	mov	sl, r4
 800b532:	e7d2      	b.n	800b4da <_vfiprintf_r+0xe2>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	1d19      	adds	r1, r3, #4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	9103      	str	r1, [sp, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bfbb      	ittet	lt
 800b540:	425b      	neglt	r3, r3
 800b542:	f042 0202 	orrlt.w	r2, r2, #2
 800b546:	9307      	strge	r3, [sp, #28]
 800b548:	9307      	strlt	r3, [sp, #28]
 800b54a:	bfb8      	it	lt
 800b54c:	9204      	strlt	r2, [sp, #16]
 800b54e:	7823      	ldrb	r3, [r4, #0]
 800b550:	2b2e      	cmp	r3, #46	; 0x2e
 800b552:	d10c      	bne.n	800b56e <_vfiprintf_r+0x176>
 800b554:	7863      	ldrb	r3, [r4, #1]
 800b556:	2b2a      	cmp	r3, #42	; 0x2a
 800b558:	d135      	bne.n	800b5c6 <_vfiprintf_r+0x1ce>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	1d1a      	adds	r2, r3, #4
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	9203      	str	r2, [sp, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	bfb8      	it	lt
 800b566:	f04f 33ff 	movlt.w	r3, #4294967295
 800b56a:	3402      	adds	r4, #2
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b654 <_vfiprintf_r+0x25c>
 800b572:	7821      	ldrb	r1, [r4, #0]
 800b574:	2203      	movs	r2, #3
 800b576:	4650      	mov	r0, sl
 800b578:	f7f4 fe4a 	bl	8000210 <memchr>
 800b57c:	b140      	cbz	r0, 800b590 <_vfiprintf_r+0x198>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	eba0 000a 	sub.w	r0, r0, sl
 800b584:	fa03 f000 	lsl.w	r0, r3, r0
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	4303      	orrs	r3, r0
 800b58c:	3401      	adds	r4, #1
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b594:	482c      	ldr	r0, [pc, #176]	; (800b648 <_vfiprintf_r+0x250>)
 800b596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59a:	2206      	movs	r2, #6
 800b59c:	f7f4 fe38 	bl	8000210 <memchr>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d03f      	beq.n	800b624 <_vfiprintf_r+0x22c>
 800b5a4:	4b29      	ldr	r3, [pc, #164]	; (800b64c <_vfiprintf_r+0x254>)
 800b5a6:	bb1b      	cbnz	r3, 800b5f0 <_vfiprintf_r+0x1f8>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	3307      	adds	r3, #7
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b6:	443b      	add	r3, r7
 800b5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ba:	e767      	b.n	800b48c <_vfiprintf_r+0x94>
 800b5bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7a5      	b.n	800b512 <_vfiprintf_r+0x11a>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	3401      	adds	r4, #1
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	f04f 0c0a 	mov.w	ip, #10
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d8:	3a30      	subs	r2, #48	; 0x30
 800b5da:	2a09      	cmp	r2, #9
 800b5dc:	d903      	bls.n	800b5e6 <_vfiprintf_r+0x1ee>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0c5      	beq.n	800b56e <_vfiprintf_r+0x176>
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	e7c3      	b.n	800b56e <_vfiprintf_r+0x176>
 800b5e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e7f0      	b.n	800b5d2 <_vfiprintf_r+0x1da>
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4b16      	ldr	r3, [pc, #88]	; (800b650 <_vfiprintf_r+0x258>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f3af 8000 	nop.w
 800b600:	4607      	mov	r7, r0
 800b602:	1c78      	adds	r0, r7, #1
 800b604:	d1d6      	bne.n	800b5b4 <_vfiprintf_r+0x1bc>
 800b606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b608:	07d9      	lsls	r1, r3, #31
 800b60a:	d405      	bmi.n	800b618 <_vfiprintf_r+0x220>
 800b60c:	89ab      	ldrh	r3, [r5, #12]
 800b60e:	059a      	lsls	r2, r3, #22
 800b610:	d402      	bmi.n	800b618 <_vfiprintf_r+0x220>
 800b612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b614:	f7ff fb2b 	bl	800ac6e <__retarget_lock_release_recursive>
 800b618:	89ab      	ldrh	r3, [r5, #12]
 800b61a:	065b      	lsls	r3, r3, #25
 800b61c:	f53f af12 	bmi.w	800b444 <_vfiprintf_r+0x4c>
 800b620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b622:	e711      	b.n	800b448 <_vfiprintf_r+0x50>
 800b624:	ab03      	add	r3, sp, #12
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	462a      	mov	r2, r5
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <_vfiprintf_r+0x258>)
 800b62c:	a904      	add	r1, sp, #16
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f880 	bl	800b734 <_printf_i>
 800b634:	e7e4      	b.n	800b600 <_vfiprintf_r+0x208>
 800b636:	bf00      	nop
 800b638:	0800ca0c 	.word	0x0800ca0c
 800b63c:	0800ca2c 	.word	0x0800ca2c
 800b640:	0800c9ec 	.word	0x0800c9ec
 800b644:	0800ca4c 	.word	0x0800ca4c
 800b648:	0800ca56 	.word	0x0800ca56
 800b64c:	00000000 	.word	0x00000000
 800b650:	0800b3d3 	.word	0x0800b3d3
 800b654:	0800ca52 	.word	0x0800ca52

0800b658 <_printf_common>:
 800b658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	4616      	mov	r6, r2
 800b65e:	4699      	mov	r9, r3
 800b660:	688a      	ldr	r2, [r1, #8]
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b668:	4293      	cmp	r3, r2
 800b66a:	bfb8      	it	lt
 800b66c:	4613      	movlt	r3, r2
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b674:	4607      	mov	r7, r0
 800b676:	460c      	mov	r4, r1
 800b678:	b10a      	cbz	r2, 800b67e <_printf_common+0x26>
 800b67a:	3301      	adds	r3, #1
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	0699      	lsls	r1, r3, #26
 800b682:	bf42      	ittt	mi
 800b684:	6833      	ldrmi	r3, [r6, #0]
 800b686:	3302      	addmi	r3, #2
 800b688:	6033      	strmi	r3, [r6, #0]
 800b68a:	6825      	ldr	r5, [r4, #0]
 800b68c:	f015 0506 	ands.w	r5, r5, #6
 800b690:	d106      	bne.n	800b6a0 <_printf_common+0x48>
 800b692:	f104 0a19 	add.w	sl, r4, #25
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	6832      	ldr	r2, [r6, #0]
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dc26      	bgt.n	800b6ee <_printf_common+0x96>
 800b6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6a4:	1e13      	subs	r3, r2, #0
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	2301      	movne	r3, #1
 800b6ac:	0692      	lsls	r2, r2, #26
 800b6ae:	d42b      	bmi.n	800b708 <_printf_common+0xb0>
 800b6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	47c0      	blx	r8
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d01e      	beq.n	800b6fc <_printf_common+0xa4>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	68e5      	ldr	r5, [r4, #12]
 800b6c2:	6832      	ldr	r2, [r6, #0]
 800b6c4:	f003 0306 	and.w	r3, r3, #6
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	bf08      	it	eq
 800b6cc:	1aad      	subeq	r5, r5, r2
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	6922      	ldr	r2, [r4, #16]
 800b6d2:	bf0c      	ite	eq
 800b6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d8:	2500      	movne	r5, #0
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	bfc4      	itt	gt
 800b6de:	1a9b      	subgt	r3, r3, r2
 800b6e0:	18ed      	addgt	r5, r5, r3
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	341a      	adds	r4, #26
 800b6e6:	42b5      	cmp	r5, r6
 800b6e8:	d11a      	bne.n	800b720 <_printf_common+0xc8>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e008      	b.n	800b700 <_printf_common+0xa8>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	47c0      	blx	r8
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d103      	bne.n	800b704 <_printf_common+0xac>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b704:	3501      	adds	r5, #1
 800b706:	e7c6      	b.n	800b696 <_printf_common+0x3e>
 800b708:	18e1      	adds	r1, r4, r3
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	2030      	movs	r0, #48	; 0x30
 800b70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b712:	4422      	add	r2, r4
 800b714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b71c:	3302      	adds	r3, #2
 800b71e:	e7c7      	b.n	800b6b0 <_printf_common+0x58>
 800b720:	2301      	movs	r3, #1
 800b722:	4622      	mov	r2, r4
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0e6      	beq.n	800b6fc <_printf_common+0xa4>
 800b72e:	3601      	adds	r6, #1
 800b730:	e7d9      	b.n	800b6e6 <_printf_common+0x8e>
	...

0800b734 <_printf_i>:
 800b734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	460c      	mov	r4, r1
 800b73a:	4691      	mov	r9, r2
 800b73c:	7e27      	ldrb	r7, [r4, #24]
 800b73e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b740:	2f78      	cmp	r7, #120	; 0x78
 800b742:	4680      	mov	r8, r0
 800b744:	469a      	mov	sl, r3
 800b746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b74a:	d807      	bhi.n	800b75c <_printf_i+0x28>
 800b74c:	2f62      	cmp	r7, #98	; 0x62
 800b74e:	d80a      	bhi.n	800b766 <_printf_i+0x32>
 800b750:	2f00      	cmp	r7, #0
 800b752:	f000 80d8 	beq.w	800b906 <_printf_i+0x1d2>
 800b756:	2f58      	cmp	r7, #88	; 0x58
 800b758:	f000 80a3 	beq.w	800b8a2 <_printf_i+0x16e>
 800b75c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b764:	e03a      	b.n	800b7dc <_printf_i+0xa8>
 800b766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b76a:	2b15      	cmp	r3, #21
 800b76c:	d8f6      	bhi.n	800b75c <_printf_i+0x28>
 800b76e:	a001      	add	r0, pc, #4	; (adr r0, 800b774 <_printf_i+0x40>)
 800b770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b75d 	.word	0x0800b75d
 800b780:	0800b75d 	.word	0x0800b75d
 800b784:	0800b75d 	.word	0x0800b75d
 800b788:	0800b75d 	.word	0x0800b75d
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b75d 	.word	0x0800b75d
 800b794:	0800b75d 	.word	0x0800b75d
 800b798:	0800b75d 	.word	0x0800b75d
 800b79c:	0800b75d 	.word	0x0800b75d
 800b7a0:	0800b8ed 	.word	0x0800b8ed
 800b7a4:	0800b811 	.word	0x0800b811
 800b7a8:	0800b8cf 	.word	0x0800b8cf
 800b7ac:	0800b75d 	.word	0x0800b75d
 800b7b0:	0800b75d 	.word	0x0800b75d
 800b7b4:	0800b90f 	.word	0x0800b90f
 800b7b8:	0800b75d 	.word	0x0800b75d
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b75d 	.word	0x0800b75d
 800b7c4:	0800b75d 	.word	0x0800b75d
 800b7c8:	0800b8d7 	.word	0x0800b8d7
 800b7cc:	680b      	ldr	r3, [r1, #0]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	600a      	str	r2, [r1, #0]
 800b7d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e0a3      	b.n	800b928 <_printf_i+0x1f4>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	6808      	ldr	r0, [r1, #0]
 800b7e4:	062e      	lsls	r6, r5, #24
 800b7e6:	f100 0304 	add.w	r3, r0, #4
 800b7ea:	d50a      	bpl.n	800b802 <_printf_i+0xce>
 800b7ec:	6805      	ldr	r5, [r0, #0]
 800b7ee:	600b      	str	r3, [r1, #0]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	da03      	bge.n	800b7fc <_printf_i+0xc8>
 800b7f4:	232d      	movs	r3, #45	; 0x2d
 800b7f6:	426d      	negs	r5, r5
 800b7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7fc:	485e      	ldr	r0, [pc, #376]	; (800b978 <_printf_i+0x244>)
 800b7fe:	230a      	movs	r3, #10
 800b800:	e019      	b.n	800b836 <_printf_i+0x102>
 800b802:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b806:	6805      	ldr	r5, [r0, #0]
 800b808:	600b      	str	r3, [r1, #0]
 800b80a:	bf18      	it	ne
 800b80c:	b22d      	sxthne	r5, r5
 800b80e:	e7ef      	b.n	800b7f0 <_printf_i+0xbc>
 800b810:	680b      	ldr	r3, [r1, #0]
 800b812:	6825      	ldr	r5, [r4, #0]
 800b814:	1d18      	adds	r0, r3, #4
 800b816:	6008      	str	r0, [r1, #0]
 800b818:	0628      	lsls	r0, r5, #24
 800b81a:	d501      	bpl.n	800b820 <_printf_i+0xec>
 800b81c:	681d      	ldr	r5, [r3, #0]
 800b81e:	e002      	b.n	800b826 <_printf_i+0xf2>
 800b820:	0669      	lsls	r1, r5, #25
 800b822:	d5fb      	bpl.n	800b81c <_printf_i+0xe8>
 800b824:	881d      	ldrh	r5, [r3, #0]
 800b826:	4854      	ldr	r0, [pc, #336]	; (800b978 <_printf_i+0x244>)
 800b828:	2f6f      	cmp	r7, #111	; 0x6f
 800b82a:	bf0c      	ite	eq
 800b82c:	2308      	moveq	r3, #8
 800b82e:	230a      	movne	r3, #10
 800b830:	2100      	movs	r1, #0
 800b832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b836:	6866      	ldr	r6, [r4, #4]
 800b838:	60a6      	str	r6, [r4, #8]
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	bfa2      	ittt	ge
 800b83e:	6821      	ldrge	r1, [r4, #0]
 800b840:	f021 0104 	bicge.w	r1, r1, #4
 800b844:	6021      	strge	r1, [r4, #0]
 800b846:	b90d      	cbnz	r5, 800b84c <_printf_i+0x118>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	d04d      	beq.n	800b8e8 <_printf_i+0x1b4>
 800b84c:	4616      	mov	r6, r2
 800b84e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b852:	fb03 5711 	mls	r7, r3, r1, r5
 800b856:	5dc7      	ldrb	r7, [r0, r7]
 800b858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b85c:	462f      	mov	r7, r5
 800b85e:	42bb      	cmp	r3, r7
 800b860:	460d      	mov	r5, r1
 800b862:	d9f4      	bls.n	800b84e <_printf_i+0x11a>
 800b864:	2b08      	cmp	r3, #8
 800b866:	d10b      	bne.n	800b880 <_printf_i+0x14c>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	07df      	lsls	r7, r3, #31
 800b86c:	d508      	bpl.n	800b880 <_printf_i+0x14c>
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	6861      	ldr	r1, [r4, #4]
 800b872:	4299      	cmp	r1, r3
 800b874:	bfde      	ittt	le
 800b876:	2330      	movle	r3, #48	; 0x30
 800b878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b87c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b880:	1b92      	subs	r2, r2, r6
 800b882:	6122      	str	r2, [r4, #16]
 800b884:	f8cd a000 	str.w	sl, [sp]
 800b888:	464b      	mov	r3, r9
 800b88a:	aa03      	add	r2, sp, #12
 800b88c:	4621      	mov	r1, r4
 800b88e:	4640      	mov	r0, r8
 800b890:	f7ff fee2 	bl	800b658 <_printf_common>
 800b894:	3001      	adds	r0, #1
 800b896:	d14c      	bne.n	800b932 <_printf_i+0x1fe>
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	b004      	add	sp, #16
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	4835      	ldr	r0, [pc, #212]	; (800b978 <_printf_i+0x244>)
 800b8a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	680e      	ldr	r6, [r1, #0]
 800b8ac:	061f      	lsls	r7, r3, #24
 800b8ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800b8b2:	600e      	str	r6, [r1, #0]
 800b8b4:	d514      	bpl.n	800b8e0 <_printf_i+0x1ac>
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	bf44      	itt	mi
 800b8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800b8be:	6023      	strmi	r3, [r4, #0]
 800b8c0:	b91d      	cbnz	r5, 800b8ca <_printf_i+0x196>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	f023 0320 	bic.w	r3, r3, #32
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	2310      	movs	r3, #16
 800b8cc:	e7b0      	b.n	800b830 <_printf_i+0xfc>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	f043 0320 	orr.w	r3, r3, #32
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	2378      	movs	r3, #120	; 0x78
 800b8d8:	4828      	ldr	r0, [pc, #160]	; (800b97c <_printf_i+0x248>)
 800b8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8de:	e7e3      	b.n	800b8a8 <_printf_i+0x174>
 800b8e0:	065e      	lsls	r6, r3, #25
 800b8e2:	bf48      	it	mi
 800b8e4:	b2ad      	uxthmi	r5, r5
 800b8e6:	e7e6      	b.n	800b8b6 <_printf_i+0x182>
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	e7bb      	b.n	800b864 <_printf_i+0x130>
 800b8ec:	680b      	ldr	r3, [r1, #0]
 800b8ee:	6826      	ldr	r6, [r4, #0]
 800b8f0:	6960      	ldr	r0, [r4, #20]
 800b8f2:	1d1d      	adds	r5, r3, #4
 800b8f4:	600d      	str	r5, [r1, #0]
 800b8f6:	0635      	lsls	r5, r6, #24
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0x1cc>
 800b8fc:	6018      	str	r0, [r3, #0]
 800b8fe:	e002      	b.n	800b906 <_printf_i+0x1d2>
 800b900:	0671      	lsls	r1, r6, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0x1c8>
 800b904:	8018      	strh	r0, [r3, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	4616      	mov	r6, r2
 800b90c:	e7ba      	b.n	800b884 <_printf_i+0x150>
 800b90e:	680b      	ldr	r3, [r1, #0]
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	600a      	str	r2, [r1, #0]
 800b914:	681e      	ldr	r6, [r3, #0]
 800b916:	6862      	ldr	r2, [r4, #4]
 800b918:	2100      	movs	r1, #0
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7f4 fc78 	bl	8000210 <memchr>
 800b920:	b108      	cbz	r0, 800b926 <_printf_i+0x1f2>
 800b922:	1b80      	subs	r0, r0, r6
 800b924:	6060      	str	r0, [r4, #4]
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	2300      	movs	r3, #0
 800b92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b930:	e7a8      	b.n	800b884 <_printf_i+0x150>
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	4632      	mov	r2, r6
 800b936:	4649      	mov	r1, r9
 800b938:	4640      	mov	r0, r8
 800b93a:	47d0      	blx	sl
 800b93c:	3001      	adds	r0, #1
 800b93e:	d0ab      	beq.n	800b898 <_printf_i+0x164>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	079b      	lsls	r3, r3, #30
 800b944:	d413      	bmi.n	800b96e <_printf_i+0x23a>
 800b946:	68e0      	ldr	r0, [r4, #12]
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	4298      	cmp	r0, r3
 800b94c:	bfb8      	it	lt
 800b94e:	4618      	movlt	r0, r3
 800b950:	e7a4      	b.n	800b89c <_printf_i+0x168>
 800b952:	2301      	movs	r3, #1
 800b954:	4632      	mov	r2, r6
 800b956:	4649      	mov	r1, r9
 800b958:	4640      	mov	r0, r8
 800b95a:	47d0      	blx	sl
 800b95c:	3001      	adds	r0, #1
 800b95e:	d09b      	beq.n	800b898 <_printf_i+0x164>
 800b960:	3501      	adds	r5, #1
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	9903      	ldr	r1, [sp, #12]
 800b966:	1a5b      	subs	r3, r3, r1
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dcf2      	bgt.n	800b952 <_printf_i+0x21e>
 800b96c:	e7eb      	b.n	800b946 <_printf_i+0x212>
 800b96e:	2500      	movs	r5, #0
 800b970:	f104 0619 	add.w	r6, r4, #25
 800b974:	e7f5      	b.n	800b962 <_printf_i+0x22e>
 800b976:	bf00      	nop
 800b978:	0800ca5d 	.word	0x0800ca5d
 800b97c:	0800ca6e 	.word	0x0800ca6e

0800b980 <_scanf_chars>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4615      	mov	r5, r2
 800b986:	688a      	ldr	r2, [r1, #8]
 800b988:	4680      	mov	r8, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b932      	cbnz	r2, 800b99c <_scanf_chars+0x1c>
 800b98e:	698a      	ldr	r2, [r1, #24]
 800b990:	2a00      	cmp	r2, #0
 800b992:	bf0c      	ite	eq
 800b994:	2201      	moveq	r2, #1
 800b996:	f04f 32ff 	movne.w	r2, #4294967295
 800b99a:	608a      	str	r2, [r1, #8]
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ba2c <_scanf_chars+0xac>
 800b9a2:	06d1      	lsls	r1, r2, #27
 800b9a4:	bf5f      	itttt	pl
 800b9a6:	681a      	ldrpl	r2, [r3, #0]
 800b9a8:	1d11      	addpl	r1, r2, #4
 800b9aa:	6019      	strpl	r1, [r3, #0]
 800b9ac:	6816      	ldrpl	r6, [r2, #0]
 800b9ae:	2700      	movs	r7, #0
 800b9b0:	69a0      	ldr	r0, [r4, #24]
 800b9b2:	b188      	cbz	r0, 800b9d8 <_scanf_chars+0x58>
 800b9b4:	2801      	cmp	r0, #1
 800b9b6:	d107      	bne.n	800b9c8 <_scanf_chars+0x48>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	781a      	ldrb	r2, [r3, #0]
 800b9bc:	6963      	ldr	r3, [r4, #20]
 800b9be:	5c9b      	ldrb	r3, [r3, r2]
 800b9c0:	b953      	cbnz	r3, 800b9d8 <_scanf_chars+0x58>
 800b9c2:	bb27      	cbnz	r7, 800ba0e <_scanf_chars+0x8e>
 800b9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c8:	2802      	cmp	r0, #2
 800b9ca:	d120      	bne.n	800ba0e <_scanf_chars+0x8e>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b9d4:	071b      	lsls	r3, r3, #28
 800b9d6:	d41a      	bmi.n	800ba0e <_scanf_chars+0x8e>
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	06da      	lsls	r2, r3, #27
 800b9dc:	bf5e      	ittt	pl
 800b9de:	682b      	ldrpl	r3, [r5, #0]
 800b9e0:	781b      	ldrbpl	r3, [r3, #0]
 800b9e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b9e6:	682a      	ldr	r2, [r5, #0]
 800b9e8:	686b      	ldr	r3, [r5, #4]
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	3a01      	subs	r2, #1
 800b9f4:	606b      	str	r3, [r5, #4]
 800b9f6:	3701      	adds	r7, #1
 800b9f8:	60a2      	str	r2, [r4, #8]
 800b9fa:	b142      	cbz	r2, 800ba0e <_scanf_chars+0x8e>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dcd7      	bgt.n	800b9b0 <_scanf_chars+0x30>
 800ba00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba04:	4629      	mov	r1, r5
 800ba06:	4640      	mov	r0, r8
 800ba08:	4798      	blx	r3
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d0d0      	beq.n	800b9b0 <_scanf_chars+0x30>
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	f013 0310 	ands.w	r3, r3, #16
 800ba14:	d105      	bne.n	800ba22 <_scanf_chars+0xa2>
 800ba16:	68e2      	ldr	r2, [r4, #12]
 800ba18:	3201      	adds	r2, #1
 800ba1a:	60e2      	str	r2, [r4, #12]
 800ba1c:	69a2      	ldr	r2, [r4, #24]
 800ba1e:	b102      	cbz	r2, 800ba22 <_scanf_chars+0xa2>
 800ba20:	7033      	strb	r3, [r6, #0]
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	441f      	add	r7, r3
 800ba26:	6127      	str	r7, [r4, #16]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7cb      	b.n	800b9c4 <_scanf_chars+0x44>
 800ba2c:	0800ca9b 	.word	0x0800ca9b

0800ba30 <_scanf_i>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4698      	mov	r8, r3
 800ba36:	4b74      	ldr	r3, [pc, #464]	; (800bc08 <_scanf_i+0x1d8>)
 800ba38:	460c      	mov	r4, r1
 800ba3a:	4682      	mov	sl, r0
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba42:	b087      	sub	sp, #28
 800ba44:	ab03      	add	r3, sp, #12
 800ba46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba4a:	4b70      	ldr	r3, [pc, #448]	; (800bc0c <_scanf_i+0x1dc>)
 800ba4c:	69a1      	ldr	r1, [r4, #24]
 800ba4e:	4a70      	ldr	r2, [pc, #448]	; (800bc10 <_scanf_i+0x1e0>)
 800ba50:	2903      	cmp	r1, #3
 800ba52:	bf18      	it	ne
 800ba54:	461a      	movne	r2, r3
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	9201      	str	r2, [sp, #4]
 800ba5a:	1e5a      	subs	r2, r3, #1
 800ba5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba60:	bf88      	it	hi
 800ba62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba66:	4627      	mov	r7, r4
 800ba68:	bf82      	ittt	hi
 800ba6a:	eb03 0905 	addhi.w	r9, r3, r5
 800ba6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba72:	60a3      	strhi	r3, [r4, #8]
 800ba74:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ba78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ba7c:	bf98      	it	ls
 800ba7e:	f04f 0900 	movls.w	r9, #0
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	463d      	mov	r5, r7
 800ba86:	f04f 0b00 	mov.w	fp, #0
 800ba8a:	6831      	ldr	r1, [r6, #0]
 800ba8c:	ab03      	add	r3, sp, #12
 800ba8e:	7809      	ldrb	r1, [r1, #0]
 800ba90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ba94:	2202      	movs	r2, #2
 800ba96:	f7f4 fbbb 	bl	8000210 <memchr>
 800ba9a:	b328      	cbz	r0, 800bae8 <_scanf_i+0xb8>
 800ba9c:	f1bb 0f01 	cmp.w	fp, #1
 800baa0:	d159      	bne.n	800bb56 <_scanf_i+0x126>
 800baa2:	6862      	ldr	r2, [r4, #4]
 800baa4:	b92a      	cbnz	r2, 800bab2 <_scanf_i+0x82>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	2308      	movs	r3, #8
 800baaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baae:	6063      	str	r3, [r4, #4]
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	6822      	ldr	r2, [r4, #0]
 800bab4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bab8:	6022      	str	r2, [r4, #0]
 800baba:	68a2      	ldr	r2, [r4, #8]
 800babc:	1e51      	subs	r1, r2, #1
 800babe:	60a1      	str	r1, [r4, #8]
 800bac0:	b192      	cbz	r2, 800bae8 <_scanf_i+0xb8>
 800bac2:	6832      	ldr	r2, [r6, #0]
 800bac4:	1c51      	adds	r1, r2, #1
 800bac6:	6031      	str	r1, [r6, #0]
 800bac8:	7812      	ldrb	r2, [r2, #0]
 800baca:	f805 2b01 	strb.w	r2, [r5], #1
 800bace:	6872      	ldr	r2, [r6, #4]
 800bad0:	3a01      	subs	r2, #1
 800bad2:	2a00      	cmp	r2, #0
 800bad4:	6072      	str	r2, [r6, #4]
 800bad6:	dc07      	bgt.n	800bae8 <_scanf_i+0xb8>
 800bad8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800badc:	4631      	mov	r1, r6
 800bade:	4650      	mov	r0, sl
 800bae0:	4790      	blx	r2
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f040 8085 	bne.w	800bbf2 <_scanf_i+0x1c2>
 800bae8:	f10b 0b01 	add.w	fp, fp, #1
 800baec:	f1bb 0f03 	cmp.w	fp, #3
 800baf0:	d1cb      	bne.n	800ba8a <_scanf_i+0x5a>
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	b90b      	cbnz	r3, 800bafa <_scanf_i+0xca>
 800baf6:	230a      	movs	r3, #10
 800baf8:	6063      	str	r3, [r4, #4]
 800bafa:	6863      	ldr	r3, [r4, #4]
 800bafc:	4945      	ldr	r1, [pc, #276]	; (800bc14 <_scanf_i+0x1e4>)
 800bafe:	6960      	ldr	r0, [r4, #20]
 800bb00:	1ac9      	subs	r1, r1, r3
 800bb02:	f000 f8ab 	bl	800bc5c <__sccl>
 800bb06:	f04f 0b00 	mov.w	fp, #0
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	6822      	ldr	r2, [r4, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d03d      	beq.n	800bb8e <_scanf_i+0x15e>
 800bb12:	6831      	ldr	r1, [r6, #0]
 800bb14:	6960      	ldr	r0, [r4, #20]
 800bb16:	f891 c000 	ldrb.w	ip, [r1]
 800bb1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d035      	beq.n	800bb8e <_scanf_i+0x15e>
 800bb22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bb26:	d124      	bne.n	800bb72 <_scanf_i+0x142>
 800bb28:	0510      	lsls	r0, r2, #20
 800bb2a:	d522      	bpl.n	800bb72 <_scanf_i+0x142>
 800bb2c:	f10b 0b01 	add.w	fp, fp, #1
 800bb30:	f1b9 0f00 	cmp.w	r9, #0
 800bb34:	d003      	beq.n	800bb3e <_scanf_i+0x10e>
 800bb36:	3301      	adds	r3, #1
 800bb38:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb3c:	60a3      	str	r3, [r4, #8]
 800bb3e:	6873      	ldr	r3, [r6, #4]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	6073      	str	r3, [r6, #4]
 800bb46:	dd1b      	ble.n	800bb80 <_scanf_i+0x150>
 800bb48:	6833      	ldr	r3, [r6, #0]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	6033      	str	r3, [r6, #0]
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	60a3      	str	r3, [r4, #8]
 800bb54:	e7d9      	b.n	800bb0a <_scanf_i+0xda>
 800bb56:	f1bb 0f02 	cmp.w	fp, #2
 800bb5a:	d1ae      	bne.n	800baba <_scanf_i+0x8a>
 800bb5c:	6822      	ldr	r2, [r4, #0]
 800bb5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bb62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bb66:	d1bf      	bne.n	800bae8 <_scanf_i+0xb8>
 800bb68:	2310      	movs	r3, #16
 800bb6a:	6063      	str	r3, [r4, #4]
 800bb6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb70:	e7a2      	b.n	800bab8 <_scanf_i+0x88>
 800bb72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bb76:	6022      	str	r2, [r4, #0]
 800bb78:	780b      	ldrb	r3, [r1, #0]
 800bb7a:	f805 3b01 	strb.w	r3, [r5], #1
 800bb7e:	e7de      	b.n	800bb3e <_scanf_i+0x10e>
 800bb80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb84:	4631      	mov	r1, r6
 800bb86:	4650      	mov	r0, sl
 800bb88:	4798      	blx	r3
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0df      	beq.n	800bb4e <_scanf_i+0x11e>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	05d9      	lsls	r1, r3, #23
 800bb92:	d50d      	bpl.n	800bbb0 <_scanf_i+0x180>
 800bb94:	42bd      	cmp	r5, r7
 800bb96:	d909      	bls.n	800bbac <_scanf_i+0x17c>
 800bb98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bb9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bba0:	4632      	mov	r2, r6
 800bba2:	4650      	mov	r0, sl
 800bba4:	4798      	blx	r3
 800bba6:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbaa:	464d      	mov	r5, r9
 800bbac:	42bd      	cmp	r5, r7
 800bbae:	d028      	beq.n	800bc02 <_scanf_i+0x1d2>
 800bbb0:	6822      	ldr	r2, [r4, #0]
 800bbb2:	f012 0210 	ands.w	r2, r2, #16
 800bbb6:	d113      	bne.n	800bbe0 <_scanf_i+0x1b0>
 800bbb8:	702a      	strb	r2, [r5, #0]
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	9e01      	ldr	r6, [sp, #4]
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	4650      	mov	r0, sl
 800bbc2:	47b0      	blx	r6
 800bbc4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbc8:	6821      	ldr	r1, [r4, #0]
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	f8c8 2000 	str.w	r2, [r8]
 800bbd0:	f011 0f20 	tst.w	r1, #32
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	d00f      	beq.n	800bbf8 <_scanf_i+0x1c8>
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	68e3      	ldr	r3, [r4, #12]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	60e3      	str	r3, [r4, #12]
 800bbe0:	1bed      	subs	r5, r5, r7
 800bbe2:	44ab      	add	fp, r5
 800bbe4:	6925      	ldr	r5, [r4, #16]
 800bbe6:	445d      	add	r5, fp
 800bbe8:	6125      	str	r5, [r4, #16]
 800bbea:	2000      	movs	r0, #0
 800bbec:	b007      	add	sp, #28
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	f04f 0b00 	mov.w	fp, #0
 800bbf6:	e7ca      	b.n	800bb8e <_scanf_i+0x15e>
 800bbf8:	07ca      	lsls	r2, r1, #31
 800bbfa:	bf4c      	ite	mi
 800bbfc:	8018      	strhmi	r0, [r3, #0]
 800bbfe:	6018      	strpl	r0, [r3, #0]
 800bc00:	e7eb      	b.n	800bbda <_scanf_i+0x1aa>
 800bc02:	2001      	movs	r0, #1
 800bc04:	e7f2      	b.n	800bbec <_scanf_i+0x1bc>
 800bc06:	bf00      	nop
 800bc08:	0800c9a4 	.word	0x0800c9a4
 800bc0c:	0800bed5 	.word	0x0800bed5
 800bc10:	0800bdd9 	.word	0x0800bdd9
 800bc14:	0800ca98 	.word	0x0800ca98

0800bc18 <_read_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4d07      	ldr	r5, [pc, #28]	; (800bc38 <_read_r+0x20>)
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	4608      	mov	r0, r1
 800bc20:	4611      	mov	r1, r2
 800bc22:	2200      	movs	r2, #0
 800bc24:	602a      	str	r2, [r5, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f7f6 fbec 	bl	8002404 <_read>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_read_r+0x1e>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_read_r+0x1e>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	20000a98 	.word	0x20000a98

0800bc3c <_sbrk_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d06      	ldr	r5, [pc, #24]	; (800bc58 <_sbrk_r+0x1c>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	602b      	str	r3, [r5, #0]
 800bc48:	f7f6 fc4a 	bl	80024e0 <_sbrk>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_sbrk_r+0x1a>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_sbrk_r+0x1a>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	20000a98 	.word	0x20000a98

0800bc5c <__sccl>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	780b      	ldrb	r3, [r1, #0]
 800bc60:	4604      	mov	r4, r0
 800bc62:	2b5e      	cmp	r3, #94	; 0x5e
 800bc64:	bf0b      	itete	eq
 800bc66:	784b      	ldrbeq	r3, [r1, #1]
 800bc68:	1c48      	addne	r0, r1, #1
 800bc6a:	1c88      	addeq	r0, r1, #2
 800bc6c:	2200      	movne	r2, #0
 800bc6e:	bf08      	it	eq
 800bc70:	2201      	moveq	r2, #1
 800bc72:	1e61      	subs	r1, r4, #1
 800bc74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bc78:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bc7c:	42a9      	cmp	r1, r5
 800bc7e:	d1fb      	bne.n	800bc78 <__sccl+0x1c>
 800bc80:	b90b      	cbnz	r3, 800bc86 <__sccl+0x2a>
 800bc82:	3801      	subs	r0, #1
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	f082 0101 	eor.w	r1, r2, #1
 800bc8a:	54e1      	strb	r1, [r4, r3]
 800bc8c:	1c42      	adds	r2, r0, #1
 800bc8e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bc92:	2d2d      	cmp	r5, #45	; 0x2d
 800bc94:	f102 36ff 	add.w	r6, r2, #4294967295
 800bc98:	4610      	mov	r0, r2
 800bc9a:	d006      	beq.n	800bcaa <__sccl+0x4e>
 800bc9c:	2d5d      	cmp	r5, #93	; 0x5d
 800bc9e:	d0f1      	beq.n	800bc84 <__sccl+0x28>
 800bca0:	b90d      	cbnz	r5, 800bca6 <__sccl+0x4a>
 800bca2:	4630      	mov	r0, r6
 800bca4:	e7ee      	b.n	800bc84 <__sccl+0x28>
 800bca6:	462b      	mov	r3, r5
 800bca8:	e7ef      	b.n	800bc8a <__sccl+0x2e>
 800bcaa:	7816      	ldrb	r6, [r2, #0]
 800bcac:	2e5d      	cmp	r6, #93	; 0x5d
 800bcae:	d0fa      	beq.n	800bca6 <__sccl+0x4a>
 800bcb0:	42b3      	cmp	r3, r6
 800bcb2:	dcf8      	bgt.n	800bca6 <__sccl+0x4a>
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	4286      	cmp	r6, r0
 800bcba:	5421      	strb	r1, [r4, r0]
 800bcbc:	dcfb      	bgt.n	800bcb6 <__sccl+0x5a>
 800bcbe:	43d8      	mvns	r0, r3
 800bcc0:	4430      	add	r0, r6
 800bcc2:	1c5d      	adds	r5, r3, #1
 800bcc4:	42b3      	cmp	r3, r6
 800bcc6:	bfa8      	it	ge
 800bcc8:	2000      	movge	r0, #0
 800bcca:	182b      	adds	r3, r5, r0
 800bccc:	3202      	adds	r2, #2
 800bcce:	e7de      	b.n	800bc8e <__sccl+0x32>

0800bcd0 <_strtol_l.isra.0>:
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd6:	d001      	beq.n	800bcdc <_strtol_l.isra.0+0xc>
 800bcd8:	2b24      	cmp	r3, #36	; 0x24
 800bcda:	d906      	bls.n	800bcea <_strtol_l.isra.0+0x1a>
 800bcdc:	f7fe fdd2 	bl	800a884 <__errno>
 800bce0:	2316      	movs	r3, #22
 800bce2:	6003      	str	r3, [r0, #0]
 800bce4:	2000      	movs	r0, #0
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	4f3a      	ldr	r7, [pc, #232]	; (800bdd4 <_strtol_l.isra.0+0x104>)
 800bcec:	468e      	mov	lr, r1
 800bcee:	4676      	mov	r6, lr
 800bcf0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bcf4:	5de5      	ldrb	r5, [r4, r7]
 800bcf6:	f015 0508 	ands.w	r5, r5, #8
 800bcfa:	d1f8      	bne.n	800bcee <_strtol_l.isra.0+0x1e>
 800bcfc:	2c2d      	cmp	r4, #45	; 0x2d
 800bcfe:	d134      	bne.n	800bd6a <_strtol_l.isra.0+0x9a>
 800bd00:	f89e 4000 	ldrb.w	r4, [lr]
 800bd04:	f04f 0801 	mov.w	r8, #1
 800bd08:	f106 0e02 	add.w	lr, r6, #2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d05c      	beq.n	800bdca <_strtol_l.isra.0+0xfa>
 800bd10:	2b10      	cmp	r3, #16
 800bd12:	d10c      	bne.n	800bd2e <_strtol_l.isra.0+0x5e>
 800bd14:	2c30      	cmp	r4, #48	; 0x30
 800bd16:	d10a      	bne.n	800bd2e <_strtol_l.isra.0+0x5e>
 800bd18:	f89e 4000 	ldrb.w	r4, [lr]
 800bd1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd20:	2c58      	cmp	r4, #88	; 0x58
 800bd22:	d14d      	bne.n	800bdc0 <_strtol_l.isra.0+0xf0>
 800bd24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bd28:	2310      	movs	r3, #16
 800bd2a:	f10e 0e02 	add.w	lr, lr, #2
 800bd2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bd32:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd36:	2600      	movs	r6, #0
 800bd38:	fbbc f9f3 	udiv	r9, ip, r3
 800bd3c:	4635      	mov	r5, r6
 800bd3e:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bd46:	2f09      	cmp	r7, #9
 800bd48:	d818      	bhi.n	800bd7c <_strtol_l.isra.0+0xac>
 800bd4a:	463c      	mov	r4, r7
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	dd24      	ble.n	800bd9a <_strtol_l.isra.0+0xca>
 800bd50:	2e00      	cmp	r6, #0
 800bd52:	db1f      	blt.n	800bd94 <_strtol_l.isra.0+0xc4>
 800bd54:	45a9      	cmp	r9, r5
 800bd56:	d31d      	bcc.n	800bd94 <_strtol_l.isra.0+0xc4>
 800bd58:	d101      	bne.n	800bd5e <_strtol_l.isra.0+0x8e>
 800bd5a:	45a2      	cmp	sl, r4
 800bd5c:	db1a      	blt.n	800bd94 <_strtol_l.isra.0+0xc4>
 800bd5e:	fb05 4503 	mla	r5, r5, r3, r4
 800bd62:	2601      	movs	r6, #1
 800bd64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bd68:	e7eb      	b.n	800bd42 <_strtol_l.isra.0+0x72>
 800bd6a:	2c2b      	cmp	r4, #43	; 0x2b
 800bd6c:	bf08      	it	eq
 800bd6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bd72:	46a8      	mov	r8, r5
 800bd74:	bf08      	it	eq
 800bd76:	f106 0e02 	addeq.w	lr, r6, #2
 800bd7a:	e7c7      	b.n	800bd0c <_strtol_l.isra.0+0x3c>
 800bd7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bd80:	2f19      	cmp	r7, #25
 800bd82:	d801      	bhi.n	800bd88 <_strtol_l.isra.0+0xb8>
 800bd84:	3c37      	subs	r4, #55	; 0x37
 800bd86:	e7e1      	b.n	800bd4c <_strtol_l.isra.0+0x7c>
 800bd88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bd8c:	2f19      	cmp	r7, #25
 800bd8e:	d804      	bhi.n	800bd9a <_strtol_l.isra.0+0xca>
 800bd90:	3c57      	subs	r4, #87	; 0x57
 800bd92:	e7db      	b.n	800bd4c <_strtol_l.isra.0+0x7c>
 800bd94:	f04f 36ff 	mov.w	r6, #4294967295
 800bd98:	e7e4      	b.n	800bd64 <_strtol_l.isra.0+0x94>
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	da05      	bge.n	800bdaa <_strtol_l.isra.0+0xda>
 800bd9e:	2322      	movs	r3, #34	; 0x22
 800bda0:	6003      	str	r3, [r0, #0]
 800bda2:	4665      	mov	r5, ip
 800bda4:	b942      	cbnz	r2, 800bdb8 <_strtol_l.isra.0+0xe8>
 800bda6:	4628      	mov	r0, r5
 800bda8:	e79d      	b.n	800bce6 <_strtol_l.isra.0+0x16>
 800bdaa:	f1b8 0f00 	cmp.w	r8, #0
 800bdae:	d000      	beq.n	800bdb2 <_strtol_l.isra.0+0xe2>
 800bdb0:	426d      	negs	r5, r5
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	d0f7      	beq.n	800bda6 <_strtol_l.isra.0+0xd6>
 800bdb6:	b10e      	cbz	r6, 800bdbc <_strtol_l.isra.0+0xec>
 800bdb8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bdbc:	6011      	str	r1, [r2, #0]
 800bdbe:	e7f2      	b.n	800bda6 <_strtol_l.isra.0+0xd6>
 800bdc0:	2430      	movs	r4, #48	; 0x30
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1b3      	bne.n	800bd2e <_strtol_l.isra.0+0x5e>
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	e7b1      	b.n	800bd2e <_strtol_l.isra.0+0x5e>
 800bdca:	2c30      	cmp	r4, #48	; 0x30
 800bdcc:	d0a4      	beq.n	800bd18 <_strtol_l.isra.0+0x48>
 800bdce:	230a      	movs	r3, #10
 800bdd0:	e7ad      	b.n	800bd2e <_strtol_l.isra.0+0x5e>
 800bdd2:	bf00      	nop
 800bdd4:	0800ca9b 	.word	0x0800ca9b

0800bdd8 <_strtol_r>:
 800bdd8:	f7ff bf7a 	b.w	800bcd0 <_strtol_l.isra.0>

0800bddc <_strtoul_l.isra.0>:
 800bddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bde0:	4e3b      	ldr	r6, [pc, #236]	; (800bed0 <_strtoul_l.isra.0+0xf4>)
 800bde2:	4686      	mov	lr, r0
 800bde4:	468c      	mov	ip, r1
 800bde6:	4660      	mov	r0, ip
 800bde8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bdec:	5da5      	ldrb	r5, [r4, r6]
 800bdee:	f015 0508 	ands.w	r5, r5, #8
 800bdf2:	d1f8      	bne.n	800bde6 <_strtoul_l.isra.0+0xa>
 800bdf4:	2c2d      	cmp	r4, #45	; 0x2d
 800bdf6:	d134      	bne.n	800be62 <_strtoul_l.isra.0+0x86>
 800bdf8:	f89c 4000 	ldrb.w	r4, [ip]
 800bdfc:	f04f 0801 	mov.w	r8, #1
 800be00:	f100 0c02 	add.w	ip, r0, #2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d05e      	beq.n	800bec6 <_strtoul_l.isra.0+0xea>
 800be08:	2b10      	cmp	r3, #16
 800be0a:	d10c      	bne.n	800be26 <_strtoul_l.isra.0+0x4a>
 800be0c:	2c30      	cmp	r4, #48	; 0x30
 800be0e:	d10a      	bne.n	800be26 <_strtoul_l.isra.0+0x4a>
 800be10:	f89c 0000 	ldrb.w	r0, [ip]
 800be14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800be18:	2858      	cmp	r0, #88	; 0x58
 800be1a:	d14f      	bne.n	800bebc <_strtoul_l.isra.0+0xe0>
 800be1c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800be20:	2310      	movs	r3, #16
 800be22:	f10c 0c02 	add.w	ip, ip, #2
 800be26:	f04f 37ff 	mov.w	r7, #4294967295
 800be2a:	2500      	movs	r5, #0
 800be2c:	fbb7 f7f3 	udiv	r7, r7, r3
 800be30:	fb03 f907 	mul.w	r9, r3, r7
 800be34:	ea6f 0909 	mvn.w	r9, r9
 800be38:	4628      	mov	r0, r5
 800be3a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800be3e:	2e09      	cmp	r6, #9
 800be40:	d818      	bhi.n	800be74 <_strtoul_l.isra.0+0x98>
 800be42:	4634      	mov	r4, r6
 800be44:	42a3      	cmp	r3, r4
 800be46:	dd24      	ble.n	800be92 <_strtoul_l.isra.0+0xb6>
 800be48:	2d00      	cmp	r5, #0
 800be4a:	db1f      	blt.n	800be8c <_strtoul_l.isra.0+0xb0>
 800be4c:	4287      	cmp	r7, r0
 800be4e:	d31d      	bcc.n	800be8c <_strtoul_l.isra.0+0xb0>
 800be50:	d101      	bne.n	800be56 <_strtoul_l.isra.0+0x7a>
 800be52:	45a1      	cmp	r9, r4
 800be54:	db1a      	blt.n	800be8c <_strtoul_l.isra.0+0xb0>
 800be56:	fb00 4003 	mla	r0, r0, r3, r4
 800be5a:	2501      	movs	r5, #1
 800be5c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800be60:	e7eb      	b.n	800be3a <_strtoul_l.isra.0+0x5e>
 800be62:	2c2b      	cmp	r4, #43	; 0x2b
 800be64:	bf08      	it	eq
 800be66:	f89c 4000 	ldrbeq.w	r4, [ip]
 800be6a:	46a8      	mov	r8, r5
 800be6c:	bf08      	it	eq
 800be6e:	f100 0c02 	addeq.w	ip, r0, #2
 800be72:	e7c7      	b.n	800be04 <_strtoul_l.isra.0+0x28>
 800be74:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800be78:	2e19      	cmp	r6, #25
 800be7a:	d801      	bhi.n	800be80 <_strtoul_l.isra.0+0xa4>
 800be7c:	3c37      	subs	r4, #55	; 0x37
 800be7e:	e7e1      	b.n	800be44 <_strtoul_l.isra.0+0x68>
 800be80:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800be84:	2e19      	cmp	r6, #25
 800be86:	d804      	bhi.n	800be92 <_strtoul_l.isra.0+0xb6>
 800be88:	3c57      	subs	r4, #87	; 0x57
 800be8a:	e7db      	b.n	800be44 <_strtoul_l.isra.0+0x68>
 800be8c:	f04f 35ff 	mov.w	r5, #4294967295
 800be90:	e7e4      	b.n	800be5c <_strtoul_l.isra.0+0x80>
 800be92:	2d00      	cmp	r5, #0
 800be94:	da07      	bge.n	800bea6 <_strtoul_l.isra.0+0xca>
 800be96:	2322      	movs	r3, #34	; 0x22
 800be98:	f8ce 3000 	str.w	r3, [lr]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	b942      	cbnz	r2, 800beb4 <_strtoul_l.isra.0+0xd8>
 800bea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bea6:	f1b8 0f00 	cmp.w	r8, #0
 800beaa:	d000      	beq.n	800beae <_strtoul_l.isra.0+0xd2>
 800beac:	4240      	negs	r0, r0
 800beae:	2a00      	cmp	r2, #0
 800beb0:	d0f7      	beq.n	800bea2 <_strtoul_l.isra.0+0xc6>
 800beb2:	b10d      	cbz	r5, 800beb8 <_strtoul_l.isra.0+0xdc>
 800beb4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800beb8:	6011      	str	r1, [r2, #0]
 800beba:	e7f2      	b.n	800bea2 <_strtoul_l.isra.0+0xc6>
 800bebc:	2430      	movs	r4, #48	; 0x30
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1b1      	bne.n	800be26 <_strtoul_l.isra.0+0x4a>
 800bec2:	2308      	movs	r3, #8
 800bec4:	e7af      	b.n	800be26 <_strtoul_l.isra.0+0x4a>
 800bec6:	2c30      	cmp	r4, #48	; 0x30
 800bec8:	d0a2      	beq.n	800be10 <_strtoul_l.isra.0+0x34>
 800beca:	230a      	movs	r3, #10
 800becc:	e7ab      	b.n	800be26 <_strtoul_l.isra.0+0x4a>
 800bece:	bf00      	nop
 800bed0:	0800ca9b 	.word	0x0800ca9b

0800bed4 <_strtoul_r>:
 800bed4:	f7ff bf82 	b.w	800bddc <_strtoul_l.isra.0>

0800bed8 <__submore>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	460c      	mov	r4, r1
 800bede:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee4:	4299      	cmp	r1, r3
 800bee6:	d11d      	bne.n	800bf24 <__submore+0x4c>
 800bee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800beec:	f7fe fed2 	bl	800ac94 <_malloc_r>
 800bef0:	b918      	cbnz	r0, 800befa <__submore+0x22>
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800befe:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bf04:	6360      	str	r0, [r4, #52]	; 0x34
 800bf06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bf0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bf0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bf12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bf16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bf1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bf1e:	6020      	str	r0, [r4, #0]
 800bf20:	2000      	movs	r0, #0
 800bf22:	e7e8      	b.n	800bef6 <__submore+0x1e>
 800bf24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bf26:	0077      	lsls	r7, r6, #1
 800bf28:	463a      	mov	r2, r7
 800bf2a:	f000 fa79 	bl	800c420 <_realloc_r>
 800bf2e:	4605      	mov	r5, r0
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0de      	beq.n	800bef2 <__submore+0x1a>
 800bf34:	eb00 0806 	add.w	r8, r0, r6
 800bf38:	4601      	mov	r1, r0
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	f000 f9eb 	bl	800c318 <memcpy>
 800bf42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bf46:	f8c4 8000 	str.w	r8, [r4]
 800bf4a:	e7e9      	b.n	800bf20 <__submore+0x48>

0800bf4c <__swbuf_r>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	460e      	mov	r6, r1
 800bf50:	4614      	mov	r4, r2
 800bf52:	4605      	mov	r5, r0
 800bf54:	b118      	cbz	r0, 800bf5e <__swbuf_r+0x12>
 800bf56:	6983      	ldr	r3, [r0, #24]
 800bf58:	b90b      	cbnz	r3, 800bf5e <__swbuf_r+0x12>
 800bf5a:	f7fe fde9 	bl	800ab30 <__sinit>
 800bf5e:	4b21      	ldr	r3, [pc, #132]	; (800bfe4 <__swbuf_r+0x98>)
 800bf60:	429c      	cmp	r4, r3
 800bf62:	d12b      	bne.n	800bfbc <__swbuf_r+0x70>
 800bf64:	686c      	ldr	r4, [r5, #4]
 800bf66:	69a3      	ldr	r3, [r4, #24]
 800bf68:	60a3      	str	r3, [r4, #8]
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	071a      	lsls	r2, r3, #28
 800bf6e:	d52f      	bpl.n	800bfd0 <__swbuf_r+0x84>
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	b36b      	cbz	r3, 800bfd0 <__swbuf_r+0x84>
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	6820      	ldr	r0, [r4, #0]
 800bf78:	1ac0      	subs	r0, r0, r3
 800bf7a:	6963      	ldr	r3, [r4, #20]
 800bf7c:	b2f6      	uxtb	r6, r6
 800bf7e:	4283      	cmp	r3, r0
 800bf80:	4637      	mov	r7, r6
 800bf82:	dc04      	bgt.n	800bf8e <__swbuf_r+0x42>
 800bf84:	4621      	mov	r1, r4
 800bf86:	4628      	mov	r0, r5
 800bf88:	f000 f926 	bl	800c1d8 <_fflush_r>
 800bf8c:	bb30      	cbnz	r0, 800bfdc <__swbuf_r+0x90>
 800bf8e:	68a3      	ldr	r3, [r4, #8]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	60a3      	str	r3, [r4, #8]
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	6022      	str	r2, [r4, #0]
 800bf9a:	701e      	strb	r6, [r3, #0]
 800bf9c:	6963      	ldr	r3, [r4, #20]
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	d004      	beq.n	800bfae <__swbuf_r+0x62>
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	07db      	lsls	r3, r3, #31
 800bfa8:	d506      	bpl.n	800bfb8 <__swbuf_r+0x6c>
 800bfaa:	2e0a      	cmp	r6, #10
 800bfac:	d104      	bne.n	800bfb8 <__swbuf_r+0x6c>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f000 f911 	bl	800c1d8 <_fflush_r>
 800bfb6:	b988      	cbnz	r0, 800bfdc <__swbuf_r+0x90>
 800bfb8:	4638      	mov	r0, r7
 800bfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfbc:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <__swbuf_r+0x9c>)
 800bfbe:	429c      	cmp	r4, r3
 800bfc0:	d101      	bne.n	800bfc6 <__swbuf_r+0x7a>
 800bfc2:	68ac      	ldr	r4, [r5, #8]
 800bfc4:	e7cf      	b.n	800bf66 <__swbuf_r+0x1a>
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <__swbuf_r+0xa0>)
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	bf08      	it	eq
 800bfcc:	68ec      	ldreq	r4, [r5, #12]
 800bfce:	e7ca      	b.n	800bf66 <__swbuf_r+0x1a>
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f000 f80c 	bl	800bff0 <__swsetup_r>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0cb      	beq.n	800bf74 <__swbuf_r+0x28>
 800bfdc:	f04f 37ff 	mov.w	r7, #4294967295
 800bfe0:	e7ea      	b.n	800bfb8 <__swbuf_r+0x6c>
 800bfe2:	bf00      	nop
 800bfe4:	0800ca0c 	.word	0x0800ca0c
 800bfe8:	0800ca2c 	.word	0x0800ca2c
 800bfec:	0800c9ec 	.word	0x0800c9ec

0800bff0 <__swsetup_r>:
 800bff0:	4b32      	ldr	r3, [pc, #200]	; (800c0bc <__swsetup_r+0xcc>)
 800bff2:	b570      	push	{r4, r5, r6, lr}
 800bff4:	681d      	ldr	r5, [r3, #0]
 800bff6:	4606      	mov	r6, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	b125      	cbz	r5, 800c006 <__swsetup_r+0x16>
 800bffc:	69ab      	ldr	r3, [r5, #24]
 800bffe:	b913      	cbnz	r3, 800c006 <__swsetup_r+0x16>
 800c000:	4628      	mov	r0, r5
 800c002:	f7fe fd95 	bl	800ab30 <__sinit>
 800c006:	4b2e      	ldr	r3, [pc, #184]	; (800c0c0 <__swsetup_r+0xd0>)
 800c008:	429c      	cmp	r4, r3
 800c00a:	d10f      	bne.n	800c02c <__swsetup_r+0x3c>
 800c00c:	686c      	ldr	r4, [r5, #4]
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c014:	0719      	lsls	r1, r3, #28
 800c016:	d42c      	bmi.n	800c072 <__swsetup_r+0x82>
 800c018:	06dd      	lsls	r5, r3, #27
 800c01a:	d411      	bmi.n	800c040 <__swsetup_r+0x50>
 800c01c:	2309      	movs	r3, #9
 800c01e:	6033      	str	r3, [r6, #0]
 800c020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	e03e      	b.n	800c0aa <__swsetup_r+0xba>
 800c02c:	4b25      	ldr	r3, [pc, #148]	; (800c0c4 <__swsetup_r+0xd4>)
 800c02e:	429c      	cmp	r4, r3
 800c030:	d101      	bne.n	800c036 <__swsetup_r+0x46>
 800c032:	68ac      	ldr	r4, [r5, #8]
 800c034:	e7eb      	b.n	800c00e <__swsetup_r+0x1e>
 800c036:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <__swsetup_r+0xd8>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	bf08      	it	eq
 800c03c:	68ec      	ldreq	r4, [r5, #12]
 800c03e:	e7e6      	b.n	800c00e <__swsetup_r+0x1e>
 800c040:	0758      	lsls	r0, r3, #29
 800c042:	d512      	bpl.n	800c06a <__swsetup_r+0x7a>
 800c044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c046:	b141      	cbz	r1, 800c05a <__swsetup_r+0x6a>
 800c048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c04c:	4299      	cmp	r1, r3
 800c04e:	d002      	beq.n	800c056 <__swsetup_r+0x66>
 800c050:	4630      	mov	r0, r6
 800c052:	f000 f995 	bl	800c380 <_free_r>
 800c056:	2300      	movs	r3, #0
 800c058:	6363      	str	r3, [r4, #52]	; 0x34
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	2300      	movs	r3, #0
 800c064:	6063      	str	r3, [r4, #4]
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f043 0308 	orr.w	r3, r3, #8
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	b94b      	cbnz	r3, 800c08a <__swsetup_r+0x9a>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c080:	d003      	beq.n	800c08a <__swsetup_r+0x9a>
 800c082:	4621      	mov	r1, r4
 800c084:	4630      	mov	r0, r6
 800c086:	f000 f907 	bl	800c298 <__smakebuf_r>
 800c08a:	89a0      	ldrh	r0, [r4, #12]
 800c08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c090:	f010 0301 	ands.w	r3, r0, #1
 800c094:	d00a      	beq.n	800c0ac <__swsetup_r+0xbc>
 800c096:	2300      	movs	r3, #0
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6963      	ldr	r3, [r4, #20]
 800c09c:	425b      	negs	r3, r3
 800c09e:	61a3      	str	r3, [r4, #24]
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	b943      	cbnz	r3, 800c0b6 <__swsetup_r+0xc6>
 800c0a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0a8:	d1ba      	bne.n	800c020 <__swsetup_r+0x30>
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	0781      	lsls	r1, r0, #30
 800c0ae:	bf58      	it	pl
 800c0b0:	6963      	ldrpl	r3, [r4, #20]
 800c0b2:	60a3      	str	r3, [r4, #8]
 800c0b4:	e7f4      	b.n	800c0a0 <__swsetup_r+0xb0>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	e7f7      	b.n	800c0aa <__swsetup_r+0xba>
 800c0ba:	bf00      	nop
 800c0bc:	20000088 	.word	0x20000088
 800c0c0:	0800ca0c 	.word	0x0800ca0c
 800c0c4:	0800ca2c 	.word	0x0800ca2c
 800c0c8:	0800c9ec 	.word	0x0800c9ec

0800c0cc <__sflush_r>:
 800c0cc:	898a      	ldrh	r2, [r1, #12]
 800c0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	0710      	lsls	r0, r2, #28
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	d458      	bmi.n	800c18c <__sflush_r+0xc0>
 800c0da:	684b      	ldr	r3, [r1, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dc05      	bgt.n	800c0ec <__sflush_r+0x20>
 800c0e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	dc02      	bgt.n	800c0ec <__sflush_r+0x20>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	d0f9      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0f8:	682f      	ldr	r7, [r5, #0]
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	d032      	beq.n	800c164 <__sflush_r+0x98>
 800c0fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	075a      	lsls	r2, r3, #29
 800c104:	d505      	bpl.n	800c112 <__sflush_r+0x46>
 800c106:	6863      	ldr	r3, [r4, #4]
 800c108:	1ac0      	subs	r0, r0, r3
 800c10a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c10c:	b10b      	cbz	r3, 800c112 <__sflush_r+0x46>
 800c10e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c110:	1ac0      	subs	r0, r0, r3
 800c112:	2300      	movs	r3, #0
 800c114:	4602      	mov	r2, r0
 800c116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c118:	6a21      	ldr	r1, [r4, #32]
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b0      	blx	r6
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	d106      	bne.n	800c132 <__sflush_r+0x66>
 800c124:	6829      	ldr	r1, [r5, #0]
 800c126:	291d      	cmp	r1, #29
 800c128:	d82c      	bhi.n	800c184 <__sflush_r+0xb8>
 800c12a:	4a2a      	ldr	r2, [pc, #168]	; (800c1d4 <__sflush_r+0x108>)
 800c12c:	40ca      	lsrs	r2, r1
 800c12e:	07d6      	lsls	r6, r2, #31
 800c130:	d528      	bpl.n	800c184 <__sflush_r+0xb8>
 800c132:	2200      	movs	r2, #0
 800c134:	6062      	str	r2, [r4, #4]
 800c136:	04d9      	lsls	r1, r3, #19
 800c138:	6922      	ldr	r2, [r4, #16]
 800c13a:	6022      	str	r2, [r4, #0]
 800c13c:	d504      	bpl.n	800c148 <__sflush_r+0x7c>
 800c13e:	1c42      	adds	r2, r0, #1
 800c140:	d101      	bne.n	800c146 <__sflush_r+0x7a>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	b903      	cbnz	r3, 800c148 <__sflush_r+0x7c>
 800c146:	6560      	str	r0, [r4, #84]	; 0x54
 800c148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c14a:	602f      	str	r7, [r5, #0]
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d0ca      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c154:	4299      	cmp	r1, r3
 800c156:	d002      	beq.n	800c15e <__sflush_r+0x92>
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f911 	bl	800c380 <_free_r>
 800c15e:	2000      	movs	r0, #0
 800c160:	6360      	str	r0, [r4, #52]	; 0x34
 800c162:	e7c1      	b.n	800c0e8 <__sflush_r+0x1c>
 800c164:	6a21      	ldr	r1, [r4, #32]
 800c166:	2301      	movs	r3, #1
 800c168:	4628      	mov	r0, r5
 800c16a:	47b0      	blx	r6
 800c16c:	1c41      	adds	r1, r0, #1
 800c16e:	d1c7      	bne.n	800c100 <__sflush_r+0x34>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0c4      	beq.n	800c100 <__sflush_r+0x34>
 800c176:	2b1d      	cmp	r3, #29
 800c178:	d001      	beq.n	800c17e <__sflush_r+0xb2>
 800c17a:	2b16      	cmp	r3, #22
 800c17c:	d101      	bne.n	800c182 <__sflush_r+0xb6>
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	e7b1      	b.n	800c0e6 <__sflush_r+0x1a>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	e7ad      	b.n	800c0e8 <__sflush_r+0x1c>
 800c18c:	690f      	ldr	r7, [r1, #16]
 800c18e:	2f00      	cmp	r7, #0
 800c190:	d0a9      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c192:	0793      	lsls	r3, r2, #30
 800c194:	680e      	ldr	r6, [r1, #0]
 800c196:	bf08      	it	eq
 800c198:	694b      	ldreq	r3, [r1, #20]
 800c19a:	600f      	str	r7, [r1, #0]
 800c19c:	bf18      	it	ne
 800c19e:	2300      	movne	r3, #0
 800c1a0:	eba6 0807 	sub.w	r8, r6, r7
 800c1a4:	608b      	str	r3, [r1, #8]
 800c1a6:	f1b8 0f00 	cmp.w	r8, #0
 800c1aa:	dd9c      	ble.n	800c0e6 <__sflush_r+0x1a>
 800c1ac:	6a21      	ldr	r1, [r4, #32]
 800c1ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1b0:	4643      	mov	r3, r8
 800c1b2:	463a      	mov	r2, r7
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b0      	blx	r6
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	dc06      	bgt.n	800c1ca <__sflush_r+0xfe>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c8:	e78e      	b.n	800c0e8 <__sflush_r+0x1c>
 800c1ca:	4407      	add	r7, r0
 800c1cc:	eba8 0800 	sub.w	r8, r8, r0
 800c1d0:	e7e9      	b.n	800c1a6 <__sflush_r+0xda>
 800c1d2:	bf00      	nop
 800c1d4:	20400001 	.word	0x20400001

0800c1d8 <_fflush_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	690b      	ldr	r3, [r1, #16]
 800c1dc:	4605      	mov	r5, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	b913      	cbnz	r3, 800c1e8 <_fflush_r+0x10>
 800c1e2:	2500      	movs	r5, #0
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	b118      	cbz	r0, 800c1f2 <_fflush_r+0x1a>
 800c1ea:	6983      	ldr	r3, [r0, #24]
 800c1ec:	b90b      	cbnz	r3, 800c1f2 <_fflush_r+0x1a>
 800c1ee:	f7fe fc9f 	bl	800ab30 <__sinit>
 800c1f2:	4b14      	ldr	r3, [pc, #80]	; (800c244 <_fflush_r+0x6c>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	d11b      	bne.n	800c230 <_fflush_r+0x58>
 800c1f8:	686c      	ldr	r4, [r5, #4]
 800c1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0ef      	beq.n	800c1e2 <_fflush_r+0xa>
 800c202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c204:	07d0      	lsls	r0, r2, #31
 800c206:	d404      	bmi.n	800c212 <_fflush_r+0x3a>
 800c208:	0599      	lsls	r1, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_fflush_r+0x3a>
 800c20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c20e:	f7fe fd2d 	bl	800ac6c <__retarget_lock_acquire_recursive>
 800c212:	4628      	mov	r0, r5
 800c214:	4621      	mov	r1, r4
 800c216:	f7ff ff59 	bl	800c0cc <__sflush_r>
 800c21a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c21c:	07da      	lsls	r2, r3, #31
 800c21e:	4605      	mov	r5, r0
 800c220:	d4e0      	bmi.n	800c1e4 <_fflush_r+0xc>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	059b      	lsls	r3, r3, #22
 800c226:	d4dd      	bmi.n	800c1e4 <_fflush_r+0xc>
 800c228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22a:	f7fe fd20 	bl	800ac6e <__retarget_lock_release_recursive>
 800c22e:	e7d9      	b.n	800c1e4 <_fflush_r+0xc>
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <_fflush_r+0x70>)
 800c232:	429c      	cmp	r4, r3
 800c234:	d101      	bne.n	800c23a <_fflush_r+0x62>
 800c236:	68ac      	ldr	r4, [r5, #8]
 800c238:	e7df      	b.n	800c1fa <_fflush_r+0x22>
 800c23a:	4b04      	ldr	r3, [pc, #16]	; (800c24c <_fflush_r+0x74>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	bf08      	it	eq
 800c240:	68ec      	ldreq	r4, [r5, #12]
 800c242:	e7da      	b.n	800c1fa <_fflush_r+0x22>
 800c244:	0800ca0c 	.word	0x0800ca0c
 800c248:	0800ca2c 	.word	0x0800ca2c
 800c24c:	0800c9ec 	.word	0x0800c9ec

0800c250 <__swhatbuf_r>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	460e      	mov	r6, r1
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	2900      	cmp	r1, #0
 800c25a:	b096      	sub	sp, #88	; 0x58
 800c25c:	4614      	mov	r4, r2
 800c25e:	461d      	mov	r5, r3
 800c260:	da07      	bge.n	800c272 <__swhatbuf_r+0x22>
 800c262:	2300      	movs	r3, #0
 800c264:	602b      	str	r3, [r5, #0]
 800c266:	89b3      	ldrh	r3, [r6, #12]
 800c268:	061a      	lsls	r2, r3, #24
 800c26a:	d410      	bmi.n	800c28e <__swhatbuf_r+0x3e>
 800c26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c270:	e00e      	b.n	800c290 <__swhatbuf_r+0x40>
 800c272:	466a      	mov	r2, sp
 800c274:	f000 f8fa 	bl	800c46c <_fstat_r>
 800c278:	2800      	cmp	r0, #0
 800c27a:	dbf2      	blt.n	800c262 <__swhatbuf_r+0x12>
 800c27c:	9a01      	ldr	r2, [sp, #4]
 800c27e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c286:	425a      	negs	r2, r3
 800c288:	415a      	adcs	r2, r3
 800c28a:	602a      	str	r2, [r5, #0]
 800c28c:	e7ee      	b.n	800c26c <__swhatbuf_r+0x1c>
 800c28e:	2340      	movs	r3, #64	; 0x40
 800c290:	2000      	movs	r0, #0
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	b016      	add	sp, #88	; 0x58
 800c296:	bd70      	pop	{r4, r5, r6, pc}

0800c298 <__smakebuf_r>:
 800c298:	898b      	ldrh	r3, [r1, #12]
 800c29a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c29c:	079d      	lsls	r5, r3, #30
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	d507      	bpl.n	800c2b4 <__smakebuf_r+0x1c>
 800c2a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	6123      	str	r3, [r4, #16]
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	6163      	str	r3, [r4, #20]
 800c2b0:	b002      	add	sp, #8
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}
 800c2b4:	ab01      	add	r3, sp, #4
 800c2b6:	466a      	mov	r2, sp
 800c2b8:	f7ff ffca 	bl	800c250 <__swhatbuf_r>
 800c2bc:	9900      	ldr	r1, [sp, #0]
 800c2be:	4605      	mov	r5, r0
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7fe fce7 	bl	800ac94 <_malloc_r>
 800c2c6:	b948      	cbnz	r0, 800c2dc <__smakebuf_r+0x44>
 800c2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2cc:	059a      	lsls	r2, r3, #22
 800c2ce:	d4ef      	bmi.n	800c2b0 <__smakebuf_r+0x18>
 800c2d0:	f023 0303 	bic.w	r3, r3, #3
 800c2d4:	f043 0302 	orr.w	r3, r3, #2
 800c2d8:	81a3      	strh	r3, [r4, #12]
 800c2da:	e7e3      	b.n	800c2a4 <__smakebuf_r+0xc>
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <__smakebuf_r+0x7c>)
 800c2de:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	6020      	str	r0, [r4, #0]
 800c2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	9b00      	ldr	r3, [sp, #0]
 800c2ec:	6163      	str	r3, [r4, #20]
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	6120      	str	r0, [r4, #16]
 800c2f2:	b15b      	cbz	r3, 800c30c <__smakebuf_r+0x74>
 800c2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f000 f8c9 	bl	800c490 <_isatty_r>
 800c2fe:	b128      	cbz	r0, 800c30c <__smakebuf_r+0x74>
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f023 0303 	bic.w	r3, r3, #3
 800c306:	f043 0301 	orr.w	r3, r3, #1
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	89a0      	ldrh	r0, [r4, #12]
 800c30e:	4305      	orrs	r5, r0
 800c310:	81a5      	strh	r5, [r4, #12]
 800c312:	e7cd      	b.n	800c2b0 <__smakebuf_r+0x18>
 800c314:	0800aac9 	.word	0x0800aac9

0800c318 <memcpy>:
 800c318:	440a      	add	r2, r1
 800c31a:	4291      	cmp	r1, r2
 800c31c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c320:	d100      	bne.n	800c324 <memcpy+0xc>
 800c322:	4770      	bx	lr
 800c324:	b510      	push	{r4, lr}
 800c326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c32a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c32e:	4291      	cmp	r1, r2
 800c330:	d1f9      	bne.n	800c326 <memcpy+0xe>
 800c332:	bd10      	pop	{r4, pc}

0800c334 <memmove>:
 800c334:	4288      	cmp	r0, r1
 800c336:	b510      	push	{r4, lr}
 800c338:	eb01 0402 	add.w	r4, r1, r2
 800c33c:	d902      	bls.n	800c344 <memmove+0x10>
 800c33e:	4284      	cmp	r4, r0
 800c340:	4623      	mov	r3, r4
 800c342:	d807      	bhi.n	800c354 <memmove+0x20>
 800c344:	1e43      	subs	r3, r0, #1
 800c346:	42a1      	cmp	r1, r4
 800c348:	d008      	beq.n	800c35c <memmove+0x28>
 800c34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c352:	e7f8      	b.n	800c346 <memmove+0x12>
 800c354:	4402      	add	r2, r0
 800c356:	4601      	mov	r1, r0
 800c358:	428a      	cmp	r2, r1
 800c35a:	d100      	bne.n	800c35e <memmove+0x2a>
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c366:	e7f7      	b.n	800c358 <memmove+0x24>

0800c368 <__malloc_lock>:
 800c368:	4801      	ldr	r0, [pc, #4]	; (800c370 <__malloc_lock+0x8>)
 800c36a:	f7fe bc7f 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800c36e:	bf00      	nop
 800c370:	20000a90 	.word	0x20000a90

0800c374 <__malloc_unlock>:
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <__malloc_unlock+0x8>)
 800c376:	f7fe bc7a 	b.w	800ac6e <__retarget_lock_release_recursive>
 800c37a:	bf00      	nop
 800c37c:	20000a90 	.word	0x20000a90

0800c380 <_free_r>:
 800c380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c382:	2900      	cmp	r1, #0
 800c384:	d048      	beq.n	800c418 <_free_r+0x98>
 800c386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c38a:	9001      	str	r0, [sp, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f1a1 0404 	sub.w	r4, r1, #4
 800c392:	bfb8      	it	lt
 800c394:	18e4      	addlt	r4, r4, r3
 800c396:	f7ff ffe7 	bl	800c368 <__malloc_lock>
 800c39a:	4a20      	ldr	r2, [pc, #128]	; (800c41c <_free_r+0x9c>)
 800c39c:	9801      	ldr	r0, [sp, #4]
 800c39e:	6813      	ldr	r3, [r2, #0]
 800c3a0:	4615      	mov	r5, r2
 800c3a2:	b933      	cbnz	r3, 800c3b2 <_free_r+0x32>
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	6014      	str	r4, [r2, #0]
 800c3a8:	b003      	add	sp, #12
 800c3aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3ae:	f7ff bfe1 	b.w	800c374 <__malloc_unlock>
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	d90b      	bls.n	800c3ce <_free_r+0x4e>
 800c3b6:	6821      	ldr	r1, [r4, #0]
 800c3b8:	1862      	adds	r2, r4, r1
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	bf04      	itt	eq
 800c3be:	681a      	ldreq	r2, [r3, #0]
 800c3c0:	685b      	ldreq	r3, [r3, #4]
 800c3c2:	6063      	str	r3, [r4, #4]
 800c3c4:	bf04      	itt	eq
 800c3c6:	1852      	addeq	r2, r2, r1
 800c3c8:	6022      	streq	r2, [r4, #0]
 800c3ca:	602c      	str	r4, [r5, #0]
 800c3cc:	e7ec      	b.n	800c3a8 <_free_r+0x28>
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	b10b      	cbz	r3, 800c3d8 <_free_r+0x58>
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d9fa      	bls.n	800c3ce <_free_r+0x4e>
 800c3d8:	6811      	ldr	r1, [r2, #0]
 800c3da:	1855      	adds	r5, r2, r1
 800c3dc:	42a5      	cmp	r5, r4
 800c3de:	d10b      	bne.n	800c3f8 <_free_r+0x78>
 800c3e0:	6824      	ldr	r4, [r4, #0]
 800c3e2:	4421      	add	r1, r4
 800c3e4:	1854      	adds	r4, r2, r1
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	6011      	str	r1, [r2, #0]
 800c3ea:	d1dd      	bne.n	800c3a8 <_free_r+0x28>
 800c3ec:	681c      	ldr	r4, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	6053      	str	r3, [r2, #4]
 800c3f2:	4421      	add	r1, r4
 800c3f4:	6011      	str	r1, [r2, #0]
 800c3f6:	e7d7      	b.n	800c3a8 <_free_r+0x28>
 800c3f8:	d902      	bls.n	800c400 <_free_r+0x80>
 800c3fa:	230c      	movs	r3, #12
 800c3fc:	6003      	str	r3, [r0, #0]
 800c3fe:	e7d3      	b.n	800c3a8 <_free_r+0x28>
 800c400:	6825      	ldr	r5, [r4, #0]
 800c402:	1961      	adds	r1, r4, r5
 800c404:	428b      	cmp	r3, r1
 800c406:	bf04      	itt	eq
 800c408:	6819      	ldreq	r1, [r3, #0]
 800c40a:	685b      	ldreq	r3, [r3, #4]
 800c40c:	6063      	str	r3, [r4, #4]
 800c40e:	bf04      	itt	eq
 800c410:	1949      	addeq	r1, r1, r5
 800c412:	6021      	streq	r1, [r4, #0]
 800c414:	6054      	str	r4, [r2, #4]
 800c416:	e7c7      	b.n	800c3a8 <_free_r+0x28>
 800c418:	b003      	add	sp, #12
 800c41a:	bd30      	pop	{r4, r5, pc}
 800c41c:	20000160 	.word	0x20000160

0800c420 <_realloc_r>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	4607      	mov	r7, r0
 800c424:	4614      	mov	r4, r2
 800c426:	460e      	mov	r6, r1
 800c428:	b921      	cbnz	r1, 800c434 <_realloc_r+0x14>
 800c42a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c42e:	4611      	mov	r1, r2
 800c430:	f7fe bc30 	b.w	800ac94 <_malloc_r>
 800c434:	b922      	cbnz	r2, 800c440 <_realloc_r+0x20>
 800c436:	f7ff ffa3 	bl	800c380 <_free_r>
 800c43a:	4625      	mov	r5, r4
 800c43c:	4628      	mov	r0, r5
 800c43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c440:	f000 f836 	bl	800c4b0 <_malloc_usable_size_r>
 800c444:	42a0      	cmp	r0, r4
 800c446:	d20f      	bcs.n	800c468 <_realloc_r+0x48>
 800c448:	4621      	mov	r1, r4
 800c44a:	4638      	mov	r0, r7
 800c44c:	f7fe fc22 	bl	800ac94 <_malloc_r>
 800c450:	4605      	mov	r5, r0
 800c452:	2800      	cmp	r0, #0
 800c454:	d0f2      	beq.n	800c43c <_realloc_r+0x1c>
 800c456:	4631      	mov	r1, r6
 800c458:	4622      	mov	r2, r4
 800c45a:	f7ff ff5d 	bl	800c318 <memcpy>
 800c45e:	4631      	mov	r1, r6
 800c460:	4638      	mov	r0, r7
 800c462:	f7ff ff8d 	bl	800c380 <_free_r>
 800c466:	e7e9      	b.n	800c43c <_realloc_r+0x1c>
 800c468:	4635      	mov	r5, r6
 800c46a:	e7e7      	b.n	800c43c <_realloc_r+0x1c>

0800c46c <_fstat_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	; (800c48c <_fstat_r+0x20>)
 800c470:	2300      	movs	r3, #0
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	f7f6 f808 	bl	800248e <_fstat>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d102      	bne.n	800c488 <_fstat_r+0x1c>
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	b103      	cbz	r3, 800c488 <_fstat_r+0x1c>
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	20000a98 	.word	0x20000a98

0800c490 <_isatty_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d06      	ldr	r5, [pc, #24]	; (800c4ac <_isatty_r+0x1c>)
 800c494:	2300      	movs	r3, #0
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	602b      	str	r3, [r5, #0]
 800c49c:	f7f6 f807 	bl	80024ae <_isatty>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_isatty_r+0x1a>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_isatty_r+0x1a>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	20000a98 	.word	0x20000a98

0800c4b0 <_malloc_usable_size_r>:
 800c4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b4:	1f18      	subs	r0, r3, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfbc      	itt	lt
 800c4ba:	580b      	ldrlt	r3, [r1, r0]
 800c4bc:	18c0      	addlt	r0, r0, r3
 800c4be:	4770      	bx	lr

0800c4c0 <_init>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	bf00      	nop
 800c4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c6:	bc08      	pop	{r3}
 800c4c8:	469e      	mov	lr, r3
 800c4ca:	4770      	bx	lr

0800c4cc <_fini>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr
