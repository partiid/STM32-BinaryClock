
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080061fc  080061fc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061fc  080061fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000002d4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb15  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002558  00000000  00000000  0002fbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000930  00000000  00000000  00032b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219f5  00000000  00000000  00033470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012175  00000000  00000000  00054e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c845e  00000000  00000000  00066fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f438  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b78  00000000  00000000  0012f48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f58 	.word	0x08005f58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005f58 	.word	0x08005f58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b5a      	ldr	r3, [pc, #360]	; (8000400 <MX_GPIO_Init+0x180>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a59      	ldr	r2, [pc, #356]	; (8000400 <MX_GPIO_Init+0x180>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <MX_GPIO_Init+0x180>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b54      	ldr	r3, [pc, #336]	; (8000400 <MX_GPIO_Init+0x180>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a53      	ldr	r2, [pc, #332]	; (8000400 <MX_GPIO_Init+0x180>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b51      	ldr	r3, [pc, #324]	; (8000400 <MX_GPIO_Init+0x180>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b4e      	ldr	r3, [pc, #312]	; (8000400 <MX_GPIO_Init+0x180>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a4d      	ldr	r2, [pc, #308]	; (8000400 <MX_GPIO_Init+0x180>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b4b      	ldr	r3, [pc, #300]	; (8000400 <MX_GPIO_Init+0x180>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b48      	ldr	r3, [pc, #288]	; (8000400 <MX_GPIO_Init+0x180>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a47      	ldr	r2, [pc, #284]	; (8000400 <MX_GPIO_Init+0x180>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b45      	ldr	r3, [pc, #276]	; (8000400 <MX_GPIO_Init+0x180>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f6:	4b42      	ldr	r3, [pc, #264]	; (8000400 <MX_GPIO_Init+0x180>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a41      	ldr	r2, [pc, #260]	; (8000400 <MX_GPIO_Init+0x180>)
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b3f      	ldr	r3, [pc, #252]	; (8000400 <MX_GPIO_Init+0x180>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ZIE_Pin|FIO_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f001 f8ea 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOL_Pin|NIE_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000322:	4838      	ldr	r0, [pc, #224]	; (8000404 <MX_GPIO_Init+0x184>)
 8000324:	f001 f8e4 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRO_Pin|BIA_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800032e:	4836      	ldr	r0, [pc, #216]	; (8000408 <MX_GPIO_Init+0x188>)
 8000330:	f001 f8de 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC7
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000334:	f643 63bf 	movw	r3, #16063	; 0x3ebf
 8000338:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033a:	2303      	movs	r3, #3
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	482f      	ldr	r0, [pc, #188]	; (8000408 <MX_GPIO_Init+0x188>)
 800034a:	f000 fe65 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800034e:	f248 73d3 	movw	r3, #34771	; 0x87d3
 8000352:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4619      	mov	r1, r3
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fe57 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ZIE_Pin|FIO_Pin;
 800036a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fe47 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800038a:	f24e 73f7 	movw	r3, #59383	; 0xe7f7
 800038e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	2303      	movs	r3, #3
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	4819      	ldr	r0, [pc, #100]	; (8000404 <MX_GPIO_Init+0x184>)
 80003a0:	f000 fe3a 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ZOL_Pin|NIE_Pin;
 80003a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <MX_GPIO_Init+0x184>)
 80003be:	f000 fe2b 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BRO_Pin|BIA_Pin;
 80003c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_GPIO_Init+0x188>)
 80003dc:	f000 fe1c 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <MX_GPIO_Init+0x18c>)
 80003f4:	f000 fe10 	bl	8001018 <HAL_GPIO_Init>

}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	; 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400
 8000408:	48000800 	.word	0x48000800
 800040c:	48000c00 	.word	0x48000c00

08000410 <splitNumber>:
/* USER CODE BEGIN PFP */




int splitNumber(int num){
 8000410:	b480      	push	{r7}
 8000412:	b087      	sub	sp, #28
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	      int arr[2];

	      while(num != 0){
 8000418:	e023      	b.n	8000462 <splitNumber+0x52>
	          for(int i = 0; i < 2; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e015      	b.n	800044c <splitNumber+0x3c>
	              arr[i] = num % 10;
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <splitNumber+0x68>)
 8000424:	fb83 2301 	smull	r2, r3, r3, r1
 8000428:	109a      	asrs	r2, r3, #2
 800042a:	17cb      	asrs	r3, r1, #31
 800042c:	1ad2      	subs	r2, r2, r3
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	1aca      	subs	r2, r1, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	f107 0118 	add.w	r1, r7, #24
 8000440:	440b      	add	r3, r1
 8000442:	f843 2c0c 	str.w	r2, [r3, #-12]
	          for(int i = 0; i < 2; i++){
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	2b01      	cmp	r3, #1
 8000450:	dde6      	ble.n	8000420 <splitNumber+0x10>
	          }
	          num = num / 10;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <splitNumber+0x68>)
 8000456:	fb82 1203 	smull	r1, r2, r2, r3
 800045a:	1092      	asrs	r2, r2, #2
 800045c:	17db      	asrs	r3, r3, #31
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	607b      	str	r3, [r7, #4]
	      while(num != 0){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1d8      	bne.n	800041a <splitNumber+0xa>
	      }
	      return arr[1];
 8000468:	693b      	ldr	r3, [r7, #16]

}
 800046a:	4618      	mov	r0, r3
 800046c:	371c      	adds	r7, #28
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	66666667 	.word	0x66666667

0800047c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af02      	add	r7, sp, #8
 8000482:	6078      	str	r0, [r7, #4]
	static RTC_TimeTypeDef sTime;
	static char mess[30];
	 size_t size;

	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000484:	2200      	movs	r2, #0
 8000486:	4914      	ldr	r1, [pc, #80]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f003 fa2d 	bl	80038e8 <HAL_RTC_GetTime>

	size = sprintf(mess, "%2.2u:%2.2u:%2.2u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	4619      	mov	r1, r3
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 800049c:	789b      	ldrb	r3, [r3, #2]
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	460b      	mov	r3, r1
 80004a2:	490e      	ldr	r1, [pc, #56]	; (80004dc <HAL_RTCEx_WakeUpTimerEventCallback+0x60>)
 80004a4:	480e      	ldr	r0, [pc, #56]	; (80004e0 <HAL_RTCEx_WakeUpTimerEventCallback+0x64>)
 80004a6:	f005 f913 	bl	80056d0 <siprintf>
 80004aa:	4603      	mov	r3, r0
 80004ac:	617b      	str	r3, [r7, #20]
	//HAL_UART_Transmit_IT(&huart2, (uint8_t*)mess, size);

	 uint8_t hours = sTime.Hours;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	74fb      	strb	r3, [r7, #19]
	 uint8_t seconds = sTime.Seconds;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	74bb      	strb	r3, [r7, #18]


	 int hour = splitNumber(seconds);
 80004ba:	7cbb      	ldrb	r3, [r7, #18]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ffa7 	bl	8000410 <splitNumber>
 80004c2:	4603      	mov	r3, r0
 80004c4:	60fb      	str	r3, [r7, #12]
	 hr = &hour;
 80004c6:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	6013      	str	r3, [r2, #0]
	 //size = sprintf(mess, "Split number: %d\n", *hr);
	 //HAL_UART_Transmit_IT(&huart2, (uint8_t*)mess, size);



}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000009c 	.word	0x2000009c
 80004dc:	08005f70 	.word	0x08005f70
 80004e0:	200000b0 	.word	0x200000b0
 80004e4:	2000022c 	.word	0x2000022c

080004e8 <checkDelay>:
uint8_t delay_done = 0;
uint8_t led_blink_mode = 0;



void checkDelay(){
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	time_passed++;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <checkDelay+0x30>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <checkDelay+0x30>)
 80004f6:	801a      	strh	r2, [r3, #0]
	if(time_passed > 500){
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <checkDelay+0x30>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000500:	d905      	bls.n	800050e <checkDelay+0x26>
		time_passed = 0;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <checkDelay+0x30>)
 8000504:	2200      	movs	r2, #0
 8000506:	801a      	strh	r2, [r3, #0]
		delay_done = 1;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <checkDelay+0x34>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]

	}
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000096 	.word	0x20000096
 800051c:	20000098 	.word	0x20000098

08000520 <find_command>:


void find_command(){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
	char *led_off;
	char *led_blink;

		//strcpy(command, Rx_data);

		if(Rx_busy != Rx_empty){
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <find_command+0xec>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b38      	ldr	r3, [pc, #224]	; (8000610 <find_command+0xf0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	429a      	cmp	r2, r3
 8000534:	d066      	beq.n	8000604 <find_command+0xe4>


			Rx_byte = Rx_buff[Rx_busy]; //get single char from array
 8000536:	4b35      	ldr	r3, [pc, #212]	; (800060c <find_command+0xec>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <find_command+0xf4>)
 8000540:	5c9b      	ldrb	r3, [r3, r2]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b34      	ldr	r3, [pc, #208]	; (8000618 <find_command+0xf8>)
 8000546:	701a      	strb	r2, [r3, #0]

			Rx_busy++;
 8000548:	4b30      	ldr	r3, [pc, #192]	; (800060c <find_command+0xec>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <find_command+0xec>)
 8000554:	701a      	strb	r2, [r3, #0]

			if(Rx_busy >= RX_BUFF_SIZE){
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <find_command+0xec>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	da02      	bge.n	8000568 <find_command+0x48>
				Rx_busy = 0;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <find_command+0xec>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
			}

			if(Rx_byte == 0x3B /* ; */){
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <find_command+0xf8>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b3b      	cmp	r3, #59	; 0x3b
 800056e:	d149      	bne.n	8000604 <find_command+0xe4>



							led_on = strstr(Rx_buff, "LED[ON]");
 8000570:	492a      	ldr	r1, [pc, #168]	; (800061c <find_command+0xfc>)
 8000572:	4828      	ldr	r0, [pc, #160]	; (8000614 <find_command+0xf4>)
 8000574:	f005 f8cc 	bl	8005710 <strstr>
 8000578:	60f8      	str	r0, [r7, #12]
							led_off = strstr(Rx_buff, "LED[OFF]");
 800057a:	4929      	ldr	r1, [pc, #164]	; (8000620 <find_command+0x100>)
 800057c:	4825      	ldr	r0, [pc, #148]	; (8000614 <find_command+0xf4>)
 800057e:	f005 f8c7 	bl	8005710 <strstr>
 8000582:	60b8      	str	r0, [r7, #8]
							led_blink = strstr(Rx_buff, "LED[BLINK");
 8000584:	4927      	ldr	r1, [pc, #156]	; (8000624 <find_command+0x104>)
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <find_command+0xf4>)
 8000588:	f005 f8c2 	bl	8005710 <strstr>
 800058c:	6078      	str	r0, [r7, #4]

						if(led_on != NULL){
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d007      	beq.n	80005a4 <find_command+0x84>

								HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 ffa8 	bl	80014f0 <HAL_GPIO_WritePin>
								resetBuffers();
 80005a0:	f000 f84a 	bl	8000638 <resetBuffers>


							}

						  if(led_off != NULL){
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d007      	beq.n	80005ba <find_command+0x9a>
							HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2120      	movs	r1, #32
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 ff9d 	bl	80014f0 <HAL_GPIO_WritePin>
							resetBuffers();
 80005b6:	f000 f83f 	bl	8000638 <resetBuffers>


							}
						  if(led_blink != NULL){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00b      	beq.n	80005d8 <find_command+0xb8>
							  led_blink_mode = !led_blink_mode;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <find_command+0x108>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <find_command+0x108>)
 80005d2:	701a      	strb	r2, [r3, #0]





							  resetBuffers();
 80005d4:	f000 f830 	bl	8000638 <resetBuffers>
						  }

							if(led_off == NULL && led_on == NULL && led_blink == NULL){
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d112      	bne.n	8000604 <find_command+0xe4>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <find_command+0xe4>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10c      	bne.n	8000604 <find_command+0xe4>
								uint8_t siz = sprintf(Tx_data, "Niepoprawna komenda\r\n");
 80005ea:	4910      	ldr	r1, [pc, #64]	; (800062c <find_command+0x10c>)
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <find_command+0x110>)
 80005ee:	f005 f86f 	bl	80056d0 <siprintf>
 80005f2:	4603      	mov	r3, r0
 80005f4:	70fb      	strb	r3, [r7, #3]
							    HAL_UART_Transmit_IT(&huart2, Tx_data, siz);
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <find_command+0x110>)
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <find_command+0x114>)
 8000600:	f003 fc52 	bl	8003ea8 <HAL_UART_Transmit_IT>





}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000095 	.word	0x20000095
 8000610:	20000094 	.word	0x20000094
 8000614:	20000234 	.word	0x20000234
 8000618:	20000230 	.word	0x20000230
 800061c:	08005f84 	.word	0x08005f84
 8000620:	08005f8c 	.word	0x08005f8c
 8000624:	08005f98 	.word	0x08005f98
 8000628:	20000099 	.word	0x20000099
 800062c:	08005fa4 	.word	0x08005fa4
 8000630:	200000dc 	.word	0x200000dc
 8000634:	200002b4 	.word	0x200002b4

08000638 <resetBuffers>:

void resetBuffers(){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0


	//memset(Rx_buff, 0, RX_BUFF_SIZE);
	Rx_busy = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <resetBuffers+0x20>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	Rx_empty = 0;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <resetBuffers+0x24>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	Rx_byte = 0;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <resetBuffers+0x28>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]



}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000095 	.word	0x20000095
 800065c:	20000094 	.word	0x20000094
 8000660:	20000230 	.word	0x20000230

08000664 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart ){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <HAL_UART_RxCpltCallback+0x50>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d11a      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x48>

			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);

		//Rx_data[Rx_idx++] = Rx_byte;
		//Rx_data_size = sprintf(data, Rx_data);
		Rx_empty++;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_UART_RxCpltCallback+0x54>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_UART_RxCpltCallback+0x54>)
 8000682:	701a      	strb	r2, [r3, #0]

		if(Rx_empty >= RX_BUFF_SIZE){
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_UART_RxCpltCallback+0x54>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	da02      	bge.n	8000696 <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_UART_RxCpltCallback+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		   memset(&Rx_data, 0, sizeof(Rx_data));
		 } */


		//HAL_UART_Transmit_IT(&huart2, kom, dl_kom);
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_UART_RxCpltCallback+0x54>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <HAL_UART_RxCpltCallback+0x58>)
 80006a0:	4413      	add	r3, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <HAL_UART_RxCpltCallback+0x5c>)
 80006a8:	f003 fc6c 	bl	8003f84 <HAL_UART_Receive_IT>



	}
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40004400 	.word	0x40004400
 80006b8:	20000094 	.word	0x20000094
 80006bc:	20000234 	.word	0x20000234
 80006c0:	200002b4 	.word	0x200002b4

080006c4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b092      	sub	sp, #72	; 0x48
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fa7d 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f859 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f7ff fdcb 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f9d3 	bl	8000a94 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80006ee:	f000 f8c9 	bl	8000884 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit_IT(&huart2, "Hello, i am stm32!!!", 20);
 80006f2:	2214      	movs	r2, #20
 80006f4:	4920      	ldr	r1, [pc, #128]	; (8000778 <main+0xa0>)
 80006f6:	4821      	ldr	r0, [pc, #132]	; (800077c <main+0xa4>)
 80006f8:	f003 fbd6 	bl	8003ea8 <HAL_UART_Transmit_IT>

  //rx_buff

  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <main+0xa8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <main+0xac>)
 8000706:	4413      	add	r3, r2
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <main+0xa4>)
 800070e:	f003 fc39 	bl	8003f84 <HAL_UART_Receive_IT>
  char mess[50];
  uint8_t size;



  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <main+0xb0>)
 8000714:	f003 faba 	bl	8003c8c <HAL_RTCEx_DeactivateWakeUpTimer>

  sTime.Hours = 20;
 8000718:	2314      	movs	r3, #20
 800071a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 25;
 800071e:	2319      	movs	r3, #25
 8000720:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 15;
 8000724:	230f      	movs	r3, #15
 8000726:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800072a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <main+0xb0>)
 8000734:	f002 ff6c 	bl	8003610 <HAL_RTC_SetTime>

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000738:	2200      	movs	r2, #0
 800073a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <main+0xb0>)
 8000740:	f003 f9ce 	bl	8003ae0 <HAL_RTCEx_SetWakeUpTimer_IT>
  {
	  //HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);


	  if(*hr == 2 || 6){
		  HAL_GPIO_TogglePin(leds0[0], BIA_Pin);
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <main+0xb4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4618      	mov	r0, r3
 800074e:	f000 feff 	bl	8001550 <HAL_GPIO_TogglePin>
		  //

	  }
	  //TURN On led blinkin mode
	  if(led_blink_mode == 1){
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0xb8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d10b      	bne.n	8000772 <main+0x9a>
		  if(delay_done == 1){
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <main+0xbc>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d107      	bne.n	8000772 <main+0x9a>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000762:	2120      	movs	r1, #32
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fef2 	bl	8001550 <HAL_GPIO_TogglePin>
			  delay_done = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <main+0xbc>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  find_command();
 8000772:	f7ff fed5 	bl	8000520 <find_command>
	  if(*hr == 2 || 6){
 8000776:	e7e5      	b.n	8000744 <main+0x6c>
 8000778:	08005fbc 	.word	0x08005fbc
 800077c:	200002b4 	.word	0x200002b4
 8000780:	20000094 	.word	0x20000094
 8000784:	20000234 	.word	0x20000234
 8000788:	2000020c 	.word	0x2000020c
 800078c:	20000000 	.word	0x20000000
 8000790:	20000099 	.word	0x20000099
 8000794:	20000098 	.word	0x20000098

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a6      	sub	sp, #152	; 0x98
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 ff8a 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2258      	movs	r2, #88	; 0x58
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 ff7c 	bl	80056c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007c8:	230a      	movs	r3, #10
 80007ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fecf 	bl	80015a0 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000808:	f000 f82c 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000822:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000826:	2102      	movs	r1, #2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 ff2b 	bl	8002684 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000834:	f000 f816 	bl	8000864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <SystemClock_Config+0xc8>)
 800083a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f002 f9f5 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000854:	f000 f806 	bl	8000864 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3798      	adds	r7, #152	; 0x98
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	00010002 	.word	0x00010002

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>

0800086e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_RTC_Init+0x58>)
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <MX_RTC_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_RTC_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_RTC_Init+0x58>)
 80008aa:	227f      	movs	r2, #127	; 0x7f
 80008ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_RTC_Init+0x58>)
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_RTC_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_RTC_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_RTC_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_RTC_Init+0x58>)
 80008c8:	f002 fdae 	bl	8003428 <HAL_RTC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008d2:	f7ff ffc7 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000020c 	.word	0x2000020c
 80008e0:	40002800 	.word	0x40002800

080008e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_RTC_MspInit+0x50>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d119      	bne.n	800092a <HAL_RTC_MspInit+0x46>
 80008f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008fa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000904:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_RTC_MspInit+0x54>)
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	461a      	mov	r2, r3
 8000916:	2301      	movs	r3, #1
 8000918:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2003      	movs	r0, #3
 8000920:	f000 fab2 	bl	8000e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 fadb 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40002800 	.word	0x40002800
 8000938:	10908100 	.word	0x10908100

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fa68 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  checkDelay();
 80009d0:	f7ff fd8a 	bl	80004e8 <checkDelay>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f948 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <RTC_WKUP_IRQHandler+0x10>)
 80009e2:	f003 f9ab 	bl	8003d3c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000020c 	.word	0x2000020c

080009f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USART2_IRQHandler+0x10>)
 80009f6:	f003 fb13 	bl	8004020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002b4 	.word	0x200002b4

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f004 fe1a 	bl	800566c <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20010000 	.word	0x20010000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	200000d0 	.word	0x200000d0
 8000a6c:	20000350 	.word	0x20000350

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_USART2_UART_Init+0x5c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad8:	f003 f954 	bl	8003d84 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f7ff febf 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200002b4 	.word	0x200002b4
 8000af0:	40004400 	.word	0x40004400

08000af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <HAL_UART_MspInit+0x8c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d130      	bne.n	8000b78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0x90>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fa58 	bl	8001018 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2026      	movs	r0, #38	; 0x26
 8000b6e:	f000 f98b 	bl	8000e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b72:	2026      	movs	r0, #38	; 0x26
 8000b74:	f000 f9b4 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ff5d 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fd5f 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fd8d 	bl	80006d8 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bcc:	08006204 	.word	0x08006204
  ldr r2, =_sbss
 8000bd0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bd4:	2000034c 	.word	0x2000034c

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f92b 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fea0 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f972 	bl	8000f10 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f920 	bl	8000e88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000010 	.word	0x20000010
 8000c64:	2000000c 	.word	0x2000000c

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000010 	.word	0x20000010
 8000c8c:	20000338 	.word	0x20000338

08000c90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000338 	.word	0x20000338

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	d00f      	beq.n	8000e76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d00c      	beq.n	8000e76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d009      	beq.n	8000e76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d006      	beq.n	8000e76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d003      	beq.n	8000e76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e6e:	21ac      	movs	r1, #172	; 0xac
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000e72:	f7ff fcfc 	bl	800086e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff16 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08005fd4 	.word	0x08005fd4

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d903      	bls.n	8000ea8 <HAL_NVIC_SetPriority+0x20>
 8000ea0:	21c4      	movs	r1, #196	; 0xc4
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <HAL_NVIC_SetPriority+0x54>)
 8000ea4:	f7ff fce3 	bl	800086e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d903      	bls.n	8000eb6 <HAL_NVIC_SetPriority+0x2e>
 8000eae:	21c5      	movs	r1, #197	; 0xc5
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <HAL_NVIC_SetPriority+0x54>)
 8000eb2:	f7ff fcdc 	bl	800086e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff1b 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ff6b 	bl	8000d9c <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff3a 	bl	8000d48 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08005fd4 	.word	0x08005fd4

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da03      	bge.n	8000efa <HAL_NVIC_EnableIRQ+0x1a>
 8000ef2:	21d8      	movs	r1, #216	; 0xd8
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_NVIC_EnableIRQ+0x2c>)
 8000ef6:	f7ff fcba 	bl	800086e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff04 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08005fd4 	.word	0x08005fd4

08000f10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff73 	bl	8000e04 <SysTick_Config>
 8000f1e:	4603      	mov	r3, r0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e020      	b.n	8000f8e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020e 	bic.w	r2, r2, #14
 8000f5a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e027      	b.n	800100c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
    } 
  }
  return status;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x56>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <HAL_GPIO_Init+0x104>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01b      	beq.n	800106e <HAL_GPIO_Init+0x56>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a39      	ldr	r2, [pc, #228]	; (8001120 <HAL_GPIO_Init+0x108>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0x56>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <HAL_GPIO_Init+0x10c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x56>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a37      	ldr	r2, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x110>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00f      	beq.n	800106e <HAL_GPIO_Init+0x56>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <HAL_GPIO_Init+0x114>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00b      	beq.n	800106e <HAL_GPIO_Init+0x56>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a35      	ldr	r2, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x118>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x56>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a34      	ldr	r2, [pc, #208]	; (8001134 <HAL_GPIO_Init+0x11c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x56>
 8001066:	21b2      	movs	r1, #178	; 0xb2
 8001068:	4833      	ldr	r0, [pc, #204]	; (8001138 <HAL_GPIO_Init+0x120>)
 800106a:	f7ff fc00 	bl	800086e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x6c>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1b      	lsrs	r3, r3, #16
 800107e:	041b      	lsls	r3, r3, #16
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x74>
 8001084:	21b3      	movs	r1, #179	; 0xb3
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <HAL_GPIO_Init+0x120>)
 8001088:	f7ff fbf1 	bl	800086e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 821c 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	f000 8217 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	f000 8212 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f000 820d 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	f000 8208 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80010c6:	f000 8202 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010d2:	f000 81fc 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80010de:	f000 81f6 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010ea:	f000 81f0 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010f6:	f000 81ea 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001102:	f000 81e4 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b03      	cmp	r3, #3
 800110c:	f000 81df 	beq.w	80014ce <HAL_GPIO_Init+0x4b6>
 8001110:	21b4      	movs	r1, #180	; 0xb4
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_GPIO_Init+0x120>)
 8001114:	f7ff fbab 	bl	800086e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	e1d9      	b.n	80014ce <HAL_GPIO_Init+0x4b6>
 800111a:	bf00      	nop
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	48001400 	.word	0x48001400
 8001130:	48001800 	.word	0x48001800
 8001134:	48001c00 	.word	0x48001c00
 8001138:	08006010 	.word	0x08006010
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 81ba 	beq.w	80014c8 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x154>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d140      	bne.n	80011ee <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <HAL_GPIO_Init+0x174>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x174>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x174>
 8001184:	21c3      	movs	r1, #195	; 0xc3
 8001186:	4894      	ldr	r0, [pc, #592]	; (80013d8 <HAL_GPIO_Init+0x3c0>)
 8001188:	f7ff fb71 	bl	800086e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 0201 	and.w	r2, r3, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d027      	beq.n	800124a <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_GPIO_Init+0x202>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x202>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x202>
 8001212:	21d4      	movs	r1, #212	; 0xd4
 8001214:	4870      	ldr	r0, [pc, #448]	; (80013d8 <HAL_GPIO_Init+0x3c0>)
 8001216:	f7ff fb2a 	bl	800086e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d157      	bne.n	8001306 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x286>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a5e      	ldr	r2, [pc, #376]	; (80013dc <HAL_GPIO_Init+0x3c4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01b      	beq.n	800129e <HAL_GPIO_Init+0x286>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <HAL_GPIO_Init+0x3c8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d017      	beq.n	800129e <HAL_GPIO_Init+0x286>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a5c      	ldr	r2, [pc, #368]	; (80013e4 <HAL_GPIO_Init+0x3cc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x286>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a5b      	ldr	r2, [pc, #364]	; (80013e8 <HAL_GPIO_Init+0x3d0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00f      	beq.n	800129e <HAL_GPIO_Init+0x286>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <HAL_GPIO_Init+0x3d4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00b      	beq.n	800129e <HAL_GPIO_Init+0x286>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a59      	ldr	r2, [pc, #356]	; (80013f0 <HAL_GPIO_Init+0x3d8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x286>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_GPIO_Init+0x3dc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x286>
 8001296:	21e2      	movs	r1, #226	; 0xe2
 8001298:	484f      	ldr	r0, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x3c0>)
 800129a:	f7ff fae8 	bl	800086e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d90b      	bls.n	80012be <HAL_GPIO_Init+0x2a6>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b0e      	cmp	r3, #14
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x2a6>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2a6>
 80012b6:	21e3      	movs	r1, #227	; 0xe3
 80012b8:	4847      	ldr	r0, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x3c0>)
 80012ba:	f7ff fad8 	bl	800086e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80c0 	beq.w	80014c8 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_GPIO_Init+0x3e0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <HAL_GPIO_Init+0x3e0>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_GPIO_Init+0x3e0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x3e4>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800138a:	d039      	beq.n	8001400 <HAL_GPIO_Init+0x3e8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_GPIO_Init+0x3c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d01f      	beq.n	80013d4 <HAL_GPIO_Init+0x3bc>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <HAL_GPIO_Init+0x3c8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d019      	beq.n	80013d0 <HAL_GPIO_Init+0x3b8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_GPIO_Init+0x3cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d013      	beq.n	80013cc <HAL_GPIO_Init+0x3b4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_GPIO_Init+0x3d0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d00d      	beq.n	80013c8 <HAL_GPIO_Init+0x3b0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_GPIO_Init+0x3d4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d007      	beq.n	80013c4 <HAL_GPIO_Init+0x3ac>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_GPIO_Init+0x3d8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d101      	bne.n	80013c0 <HAL_GPIO_Init+0x3a8>
 80013bc:	2306      	movs	r3, #6
 80013be:	e020      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013c0:	2307      	movs	r3, #7
 80013c2:	e01e      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013c4:	2305      	movs	r3, #5
 80013c6:	e01c      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e01a      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013cc:	2303      	movs	r3, #3
 80013ce:	e018      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e016      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e014      	b.n	8001402 <HAL_GPIO_Init+0x3ea>
 80013d8:	08006010 	.word	0x08006010
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000c00 	.word	0x48000c00
 80013e8:	48001000 	.word	0x48001000
 80013ec:	48001400 	.word	0x48001400
 80013f0:	48001800 	.word	0x48001800
 80013f4:	48001c00 	.word	0x48001c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	2300      	movs	r3, #0
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x4d0>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_GPIO_Init+0x4d4>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f ae2f 	bne.w	800113c <HAL_GPIO_Init+0x124>
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <HAL_GPIO_WritePin+0x20>
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_GPIO_WritePin+0x2a>
 8001510:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <HAL_GPIO_WritePin+0x5c>)
 8001516:	f7ff f9aa 	bl	800086e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800151a:	787b      	ldrb	r3, [r7, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_WritePin+0x40>
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d004      	beq.n	8001530 <HAL_GPIO_WritePin+0x40>
 8001526:	f240 11a5 	movw	r1, #421	; 0x1a5
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <HAL_GPIO_WritePin+0x5c>)
 800152c:	f7ff f99f 	bl	800086e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	08006010 	.word	0x08006010

08001550 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_GPIO_TogglePin+0x1c>
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	0c1b      	lsrs	r3, r3, #16
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_GPIO_TogglePin+0x26>
 800156c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <HAL_GPIO_TogglePin+0x4c>)
 8001572:	f7ff f97c 	bl	800086e <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800157c:	887a      	ldrh	r2, [r7, #2]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	041a      	lsls	r2, r3, #16
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43d9      	mvns	r1, r3
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	400b      	ands	r3, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	08006010 	.word	0x08006010

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f001 b85e 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_OscConfig+0x66>
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_OscConfig+0x66>
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x66>
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10b      	bne.n	8001606 <HAL_RCC_OscConfig+0x66>
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <HAL_RCC_OscConfig+0x66>
 80015fc:	f240 114b 	movw	r1, #331	; 0x14b
 8001600:	48be      	ldr	r0, [pc, #760]	; (80018fc <HAL_RCC_OscConfig+0x35c>)
 8001602:	f7ff f934 	bl	800086e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8178 	beq.w	8001906 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d010      	beq.n	8001642 <HAL_RCC_OscConfig+0xa2>
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d00a      	beq.n	8001642 <HAL_RCC_OscConfig+0xa2>
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001636:	d004      	beq.n	8001642 <HAL_RCC_OscConfig+0xa2>
 8001638:	f240 1151 	movw	r1, #337	; 0x151
 800163c:	48af      	ldr	r0, [pc, #700]	; (80018fc <HAL_RCC_OscConfig+0x35c>)
 800163e:	f7ff f916 	bl	800086e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001642:	4baf      	ldr	r3, [pc, #700]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d00c      	beq.n	8001668 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800164e:	4bac      	ldr	r3, [pc, #688]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d159      	bne.n	800170e <HAL_RCC_OscConfig+0x16e>
 800165a:	4ba9      	ldr	r3, [pc, #676]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d152      	bne.n	800170e <HAL_RCC_OscConfig+0x16e>
 8001668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800167c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0xfa>
 8001694:	4b9a      	ldr	r3, [pc, #616]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x126>
 800169a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016c2:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80016ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80016d2:	fa92 f2a2 	rbit	r2, r2
 80016d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80016da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016de:	fab2 f282 	clz	r2, r2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f042 0220 	orr.w	r2, r2, #32
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	f002 021f 	and.w	r2, r2, #31
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8104 	beq.w	8001904 <HAL_RCC_OscConfig+0x364>
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80fe 	bne.w	8001904 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	f000 bfb4 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x188>
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a78      	ldr	r2, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e030      	b.n	800178a <HAL_RCC_OscConfig+0x1ea>
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x1ac>
 8001732:	4b73      	ldr	r3, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a72      	ldr	r2, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6f      	ldr	r2, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01e      	b.n	800178a <HAL_RCC_OscConfig+0x1ea>
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x1d2>
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a68      	ldr	r2, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 800175e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a65      	ldr	r2, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x1ea>
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a62      	ldr	r2, [pc, #392]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d059      	beq.n	8001848 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa7c 	bl	8000c90 <HAL_GetTick>
 8001798:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fa77 	bl	8000c90 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 bf61 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x246>
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x272>
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001802:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001816:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800181a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001826:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ab      	beq.n	800179e <HAL_RCC_OscConfig+0x1fe>
 8001846:	e05e      	b.n	8001906 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fa22 	bl	8000c90 <HAL_GetTick>
 800184c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001852:	f7ff fa1d 	bl	8000c90 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 bf07 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800187c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x2fa>
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x326>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_OscConfig+0x360>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ab      	bne.n	8001852 <HAL_RCC_OscConfig+0x2b2>
 80018fa:	e004      	b.n	8001906 <HAL_RCC_OscConfig+0x366>
 80018fc:	0800604c 	.word	0x0800604c
 8001900:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 818e 	beq.w	8001c32 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_RCC_OscConfig+0x394>
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d004      	beq.n	8001934 <HAL_RCC_OscConfig+0x394>
 800192a:	f240 1189 	movw	r1, #393	; 0x189
 800192e:	48a8      	ldr	r0, [pc, #672]	; (8001bd0 <HAL_RCC_OscConfig+0x630>)
 8001930:	f7fe ff9d 	bl	800086e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b1f      	cmp	r3, #31
 800193c:	d904      	bls.n	8001948 <HAL_RCC_OscConfig+0x3a8>
 800193e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001942:	48a3      	ldr	r0, [pc, #652]	; (8001bd0 <HAL_RCC_OscConfig+0x630>)
 8001944:	f7fe ff93 	bl	800086e <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001948:	4ba2      	ldr	r3, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001954:	4b9f      	ldr	r3, [pc, #636]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d16d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x49c>
 8001960:	4b9c      	ldr	r3, [pc, #624]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800196c:	d166      	bne.n	8001a3c <HAL_RCC_OscConfig+0x49c>
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001980:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d102      	bne.n	800199e <HAL_RCC_OscConfig+0x3fe>
 8001998:	4b8e      	ldr	r3, [pc, #568]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	e013      	b.n	80019c6 <HAL_RCC_OscConfig+0x426>
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019c2:	4b84      	ldr	r3, [pc, #528]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	2202      	movs	r2, #2
 80019c8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019d0:	fa92 f2a2 	rbit	r2, r2
 80019d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f002 021f 	and.w	r2, r2, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_OscConfig+0x468>
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f000 be37 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	21f8      	movs	r1, #248	; 0xf8
 8001a18:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a20:	fa91 f1a1 	rbit	r1, r1
 8001a24:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a28:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a2c:	fab1 f181 	clz	r1, r1
 8001a30:	b2c9      	uxtb	r1, r1
 8001a32:	408b      	lsls	r3, r1
 8001a34:	4967      	ldr	r1, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	e0fa      	b.n	8001c32 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8085 	beq.w	8001b52 <HAL_RCC_OscConfig+0x5b2>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2301      	movs	r3, #1
 8001a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f90c 	bl	8000c90 <HAL_GetTick>
 8001a78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f907 	bl	8000c90 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d902      	bls.n	8001a94 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f000 bdf1 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001a94:	2302      	movs	r3, #2
 8001a96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001aa6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	095b      	lsrs	r3, r3, #5
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x524>
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e013      	b.n	8001aec <HAL_RCC_OscConfig+0x54c>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001adc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001af2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001af6:	fa92 f2a2 	rbit	r2, r2
 8001afa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001afe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b02:	fab2 f282 	clz	r2, r2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f002 021f 	and.w	r2, r2, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0af      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	21f8      	movs	r1, #248	; 0xf8
 8001b2e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b36:	fa91 f1a1 	rbit	r1, r1
 8001b3a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b42:	fab1 f181 	clz	r1, r1
 8001b46:	b2c9      	uxtb	r1, r1
 8001b48:	408b      	lsls	r3, r1
 8001b4a:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e06f      	b.n	8001c32 <HAL_RCC_OscConfig+0x692>
 8001b52:	2301      	movs	r3, #1
 8001b54:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f887 	bl	8000c90 <HAL_GetTick>
 8001b82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff f882 	bl	8000c90 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d902      	bls.n	8001b9e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f000 bd6c 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x638>
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e018      	b.n	8001c00 <HAL_RCC_OscConfig+0x660>
 8001bce:	bf00      	nop
 8001bd0:	0800604c 	.word	0x0800604c
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bfc:	4bc0      	ldr	r3, [pc, #768]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2202      	movs	r2, #2
 8001c02:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c0a:	fa92 f2a2 	rbit	r2, r2
 8001c0e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1aa      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80e7 	beq.w	8001e10 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCC_OscConfig+0x6c0>
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d004      	beq.n	8001c60 <HAL_RCC_OscConfig+0x6c0>
 8001c56:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8001c5a:	48aa      	ldr	r0, [pc, #680]	; (8001f04 <HAL_RCC_OscConfig+0x964>)
 8001c5c:	f7fe fe07 	bl	800086e <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d066      	beq.n	8001d38 <HAL_RCC_OscConfig+0x798>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <HAL_RCC_OscConfig+0x968>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2301      	movs	r3, #1
 8001c92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7fe fffc 	bl	8000c90 <HAL_GetTick>
 8001c98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7fe fff7 	bl	8000c90 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bce1 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d00:	2102      	movs	r1, #2
 8001d02:	6019      	str	r1, [r3, #0]
 8001d04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f1a3 	rbit	r1, r3
 8001d0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d12:	6019      	str	r1, [r3, #0]
  return result;
 8001d14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0b3      	beq.n	8001c9e <HAL_RCC_OscConfig+0x6fe>
 8001d36:	e06b      	b.n	8001e10 <HAL_RCC_OscConfig+0x870>
 8001d38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d4e:	601a      	str	r2, [r3, #0]
  return result;
 8001d50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x968>)
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	461a      	mov	r2, r3
 8001d66:	2300      	movs	r3, #0
 8001d68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ff91 	bl	8000c90 <HAL_GetTick>
 8001d6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d74:	f7fe ff8c 	bl	8000c90 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d902      	bls.n	8001d8a <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f000 bc76 	b.w	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001d8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dda:	2102      	movs	r1, #2
 8001ddc:	6019      	str	r1, [r3, #0]
 8001dde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f1a3 	rbit	r1, r3
 8001de8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dec:	6019      	str	r1, [r3, #0]
  return result;
 8001dee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1b1      	bne.n	8001d74 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8171 	beq.w	8002102 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <HAL_RCC_OscConfig+0x8ae>
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_OscConfig+0x8ae>
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d004      	beq.n	8001e4e <HAL_RCC_OscConfig+0x8ae>
 8001e44:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001e48:	482e      	ldr	r0, [pc, #184]	; (8001f04 <HAL_RCC_OscConfig+0x964>)
 8001e4a:	f7fe fd10 	bl	800086e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_OscConfig+0x96c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11a      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x96c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_RCC_OscConfig+0x96c>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e98:	f7fe fefa 	bl	8000c90 <HAL_GetTick>
 8001e9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7fe fef5 	bl	8000c90 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e3df      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x96c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ef      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x93a>
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e038      	b.n	8001f4c <HAL_RCC_OscConfig+0x9ac>
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d115      	bne.n	8001f10 <HAL_RCC_OscConfig+0x970>
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a02      	ldr	r2, [pc, #8]	; (8001f00 <HAL_RCC_OscConfig+0x960>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e026      	b.n	8001f4c <HAL_RCC_OscConfig+0x9ac>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	0800604c 	.word	0x0800604c
 8001f08:	10908120 	.word	0x10908120
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x994>
 8001f1a:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x9ac>
 8001f34:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d064      	beq.n	8002020 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fe9b 	bl	8000c90 <HAL_GetTick>
 8001f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe fe96 	bl	8000c90 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e37e      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
 8001f78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fa6:	601a      	str	r2, [r3, #0]
  return result;
 8001fa8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xa28>
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	e00d      	b.n	8001fe4 <HAL_RCC_OscConfig+0xa44>
 8001fc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001fe8:	2102      	movs	r1, #2
 8001fea:	6011      	str	r1, [r2, #0]
 8001fec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	fa92 f1a2 	rbit	r1, r2
 8001ff6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ffa:	6011      	str	r1, [r2, #0]
  return result;
 8001ffc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0a0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x9c0>
 800201e:	e066      	b.n	80020ee <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe fe36 	bl	8000c90 <HAL_GetTick>
 8002024:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fe31 	bl	8000c90 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e319      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
 8002042:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205e:	2202      	movs	r2, #2
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002070:	601a      	str	r2, [r3, #0]
  return result;
 8002072:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002076:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0xaf8>
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <HAL_RCC_OscConfig+0xaf4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	e010      	b.n	80020b4 <HAL_RCC_OscConfig+0xb14>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	4bad      	ldr	r3, [pc, #692]	; (8002368 <HAL_RCC_OscConfig+0xdc8>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020b8:	2102      	movs	r1, #2
 80020ba:	6011      	str	r1, [r2, #0]
 80020bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	fa92 f1a2 	rbit	r1, r2
 80020c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020ca:	6011      	str	r1, [r2, #0]
  return result;
 80020cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d19d      	bne.n	800202a <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <HAL_RCC_OscConfig+0xdc8>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a9b      	ldr	r2, [pc, #620]	; (8002368 <HAL_RCC_OscConfig+0xdc8>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00e      	beq.n	800212a <HAL_RCC_OscConfig+0xb8a>
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d009      	beq.n	800212a <HAL_RCC_OscConfig+0xb8a>
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d004      	beq.n	800212a <HAL_RCC_OscConfig+0xb8a>
 8002120:	f240 213a 	movw	r1, #570	; 0x23a
 8002124:	4891      	ldr	r0, [pc, #580]	; (800236c <HAL_RCC_OscConfig+0xdcc>)
 8002126:	f7fe fba2 	bl	800086e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 829f 	beq.w	8002674 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <HAL_RCC_OscConfig+0xdc8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	f000 826c 	beq.w	800261c <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	f040 81e4 	bne.w	8002518 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215a:	d00a      	beq.n	8002172 <HAL_RCC_OscConfig+0xbd2>
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d004      	beq.n	8002172 <HAL_RCC_OscConfig+0xbd2>
 8002168:	f240 2143 	movw	r1, #579	; 0x243
 800216c:	487f      	ldr	r0, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0xdcc>)
 800216e:	f7fe fb7e 	bl	800086e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d058      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002186:	d052      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002192:	d04c      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800219e:	d046      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021aa:	d040      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021b6:	d03a      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021c2:	d034      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021ce:	d02e      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021da:	d028      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021e6:	d022      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021f2:	d01c      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021fe:	d016      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800220a:	d010      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002216:	d00a      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002222:	d004      	beq.n	800222e <HAL_RCC_OscConfig+0xc8e>
 8002224:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002228:	4850      	ldr	r0, [pc, #320]	; (800236c <HAL_RCC_OscConfig+0xdcc>)
 800222a:	f7fe fb20 	bl	800086e <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d04f      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	d04a      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2b02      	cmp	r3, #2
 800224a:	d045      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b03      	cmp	r3, #3
 8002254:	d040      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2b04      	cmp	r3, #4
 800225e:	d03b      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b05      	cmp	r3, #5
 8002268:	d036      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2b06      	cmp	r3, #6
 8002272:	d031      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2b07      	cmp	r3, #7
 800227c:	d02c      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b08      	cmp	r3, #8
 8002286:	d027      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2b09      	cmp	r3, #9
 8002290:	d022      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2b0a      	cmp	r3, #10
 800229a:	d01d      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2b0b      	cmp	r3, #11
 80022a4:	d018      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b0d      	cmp	r3, #13
 80022b8:	d00e      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b0e      	cmp	r3, #14
 80022c2:	d009      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	d004      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd38>
 80022ce:	f240 2146 	movw	r1, #582	; 0x246
 80022d2:	4826      	ldr	r0, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0xdcc>)
 80022d4:	f7fe facb 	bl	800086e <assert_failed>
 80022d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022f0:	601a      	str	r2, [r3, #0]
  return result;
 80022f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022f6:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002302:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2300      	movs	r3, #0
 800230c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fcbf 	bl	8000c90 <HAL_GetTick>
 8002312:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e009      	b.n	800232c <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fcba 	bl	8000c90 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a4      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
 800232c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800234a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0xdd0>
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <HAL_RCC_OscConfig+0xdc8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e020      	b.n	80023a8 <HAL_RCC_OscConfig+0xe08>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	0800604c 	.word	0x0800604c
 8002370:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800238e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	4bb6      	ldr	r3, [pc, #728]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b0:	6011      	str	r1, [r2, #0]
 80023b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	fa92 f1a2 	rbit	r1, r2
 80023bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023c0:	6011      	str	r1, [r2, #0]
  return result;
 80023c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d199      	bne.n	8002318 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e4:	4ba6      	ldr	r3, [pc, #664]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f023 020f 	bic.w	r2, r3, #15
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	49a3      	ldr	r1, [pc, #652]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023f8:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a19      	ldr	r1, [r3, #32]
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	430b      	orrs	r3, r1
 800240e:	499c      	ldr	r1, [pc, #624]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800242c:	601a      	str	r2, [r3, #0]
  return result;
 800242e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002432:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800243e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fc21 	bl	8000c90 <HAL_GetTick>
 800244e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002452:	e009      	b.n	8002468 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fc1c 	bl	8000c90 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e106      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
 8002468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800246c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002480:	601a      	str	r2, [r3, #0]
  return result;
 8002482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002486:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d102      	bne.n	80024a2 <HAL_RCC_OscConfig+0xf02>
 800249c:	4b78      	ldr	r3, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	e01b      	b.n	80024da <HAL_RCC_OscConfig+0xf3a>
 80024a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e2:	6011      	str	r1, [r2, #0]
 80024e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	fa92 f1a2 	rbit	r1, r2
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	6011      	str	r1, [r2, #0]
  return result;
 80024f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d09e      	beq.n	8002454 <HAL_RCC_OscConfig+0xeb4>
 8002516:	e0ad      	b.n	8002674 <HAL_RCC_OscConfig+0x10d4>
 8002518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800251c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002536:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002542:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	461a      	mov	r2, r3
 800254a:	2300      	movs	r3, #0
 800254c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fb9f 	bl	8000c90 <HAL_GetTick>
 8002552:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fb9a 	bl	8000c90 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e084      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
 800256c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002584:	601a      	str	r2, [r3, #0]
  return result;
 8002586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1006>
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x103e>
 80025a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f107 0320 	add.w	r3, r7, #32
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f107 0214 	add.w	r2, r7, #20
 80025e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e6:	6011      	str	r1, [r2, #0]
 80025e8:	f107 0214 	add.w	r2, r7, #20
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	fa92 f1a2 	rbit	r1, r2
 80025f2:	f107 0210 	add.w	r2, r7, #16
 80025f6:	6011      	str	r1, [r2, #0]
  return result;
 80025f8:	f107 0210 	add.w	r2, r7, #16
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d19e      	bne.n	8002558 <HAL_RCC_OscConfig+0xfb8>
 800261a:	e02b      	b.n	8002674 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e025      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_OscConfig+0x10e0>)
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800263a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800263e:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800264c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002650:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800265a:	429a      	cmp	r2, r3
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b09e      	sub	sp, #120	; 0x78
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e203      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d116      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x52>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d110      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x52>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x52>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x52>
 80026cc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80026d0:	48a5      	ldr	r0, [pc, #660]	; (8002968 <HAL_RCC_ClockConfig+0x2e4>)
 80026d2:	f7fe f8cc 	bl	800086e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x6e>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x6e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d004      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x6e>
 80026e8:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80026ec:	489e      	ldr	r0, [pc, #632]	; (8002968 <HAL_RCC_ClockConfig+0x2e4>)
 80026ee:	f7fe f8be 	bl	800086e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f2:	4b9e      	ldr	r3, [pc, #632]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d910      	bls.n	8002722 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002700:	4b9a      	ldr	r3, [pc, #616]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4998      	ldr	r1, [pc, #608]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b96      	ldr	r3, [pc, #600]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c0      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d031      	beq.n	8002792 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d024      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d020      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b90      	cmp	r3, #144	; 0x90
 8002744:	d01c      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2ba0      	cmp	r3, #160	; 0xa0
 800274c:	d018      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2bb0      	cmp	r3, #176	; 0xb0
 8002754:	d014      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2bc0      	cmp	r3, #192	; 0xc0
 800275c:	d010      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2bd0      	cmp	r3, #208	; 0xd0
 8002764:	d00c      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2be0      	cmp	r3, #224	; 0xe0
 800276c:	d008      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2bf0      	cmp	r3, #240	; 0xf0
 8002774:	d004      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
 8002776:	f240 21db 	movw	r1, #731	; 0x2db
 800277a:	487b      	ldr	r0, [pc, #492]	; (8002968 <HAL_RCC_ClockConfig+0x2e4>)
 800277c:	f7fe f877 	bl	800086e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4978      	ldr	r1, [pc, #480]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80f3 	beq.w	8002986 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x13e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x13e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d004      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x13e>
 80027b8:	f240 21e2 	movw	r1, #738	; 0x2e2
 80027bc:	486a      	ldr	r0, [pc, #424]	; (8002968 <HAL_RCC_ClockConfig+0x2e4>)
 80027be:	f7fe f856 	bl	800086e <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d13c      	bne.n	8002844 <HAL_RCC_ClockConfig+0x1c0>
 80027ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x170>
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_ClockConfig+0x190>
 80027f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	667b      	str	r3, [r7, #100]	; 0x64
 8002802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
 8002808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002818:	65ba      	str	r2, [r7, #88]	; 0x58
 800281a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d17b      	bne.n	8002938 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e12f      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d13c      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x242>
 800284c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1f2>
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e00f      	b.n	8002896 <HAL_RCC_ClockConfig+0x212>
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
 8002884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289a:	63ba      	str	r2, [r7, #56]	; 0x38
 800289c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d13a      	bne.n	8002938 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0ee      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
 80028c6:	2302      	movs	r3, #2
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_ClockConfig+0x26a>
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e00d      	b.n	800290a <HAL_RCC_ClockConfig+0x286>
 80028ee:	2302      	movs	r3, #2
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	2302      	movs	r3, #2
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2202      	movs	r2, #2
 800290c:	61ba      	str	r2, [r7, #24]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	fa92 f2a2 	rbit	r2, r2
 8002914:	617a      	str	r2, [r7, #20]
  return result;
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f042 0220 	orr.w	r2, r2, #32
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f002 021f 	and.w	r2, r2, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b5      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 0203 	bic.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	490a      	ldr	r1, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294a:	f7fe f9a1 	bl	8000c90 <HAL_GetTick>
 800294e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002950:	e010      	b.n	8002974 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002952:	f7fe f99d 	bl	8000c90 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d907      	bls.n	8002974 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09d      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
 8002968:	0800604c 	.word	0x0800604c
 800296c:	40022000 	.word	0x40022000
 8002970:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 020c 	and.w	r2, r3, #12
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	429a      	cmp	r2, r3
 8002984:	d1e5      	bne.n	8002952 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002986:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_ClockConfig+0x42c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d210      	bcs.n	80029b6 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCC_ClockConfig+0x42c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 0207 	bic.w	r2, r3, #7
 800299c:	4944      	ldr	r1, [pc, #272]	; (8002ab0 <HAL_RCC_ClockConfig+0x42c>)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCC_ClockConfig+0x42c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e076      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d025      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <HAL_RCC_ClockConfig+0x378>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_ClockConfig+0x378>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029dc:	d00e      	beq.n	80029fc <HAL_RCC_ClockConfig+0x378>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029e6:	d009      	beq.n	80029fc <HAL_RCC_ClockConfig+0x378>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f0:	d004      	beq.n	80029fc <HAL_RCC_ClockConfig+0x378>
 80029f2:	f240 311e 	movw	r1, #798	; 0x31e
 80029f6:	482f      	ldr	r0, [pc, #188]	; (8002ab4 <HAL_RCC_ClockConfig+0x430>)
 80029f8:	f7fd ff39 	bl	800086e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4928      	ldr	r1, [pc, #160]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d026      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d018      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3d0>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3d0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002a34:	d00e      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3d0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a3e:	d009      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3d0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a48:	d004      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3d0>
 8002a4a:	f240 3125 	movw	r1, #805	; 0x325
 8002a4e:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x430>)
 8002a50:	f7fd ff0d 	bl	800086e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4912      	ldr	r1, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a68:	f000 f82c 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_ClockConfig+0x428>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a76:	22f0      	movs	r2, #240	; 0xf0
 8002a78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	fa92 f2a2 	rbit	r2, r2
 8002a80:	60fa      	str	r2, [r7, #12]
  return result;
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	fab2 f282 	clz	r2, r2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	40d3      	lsrs	r3, r2
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x434>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	fa21 f303 	lsr.w	r3, r1, r3
 8002a94:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x438>)
 8002a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x43c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f8b3 	bl	8000c08 <HAL_InitTick>
  
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3778      	adds	r7, #120	; 0x78
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	0800604c 	.word	0x0800604c
 8002ab8:	08006190 	.word	0x08006190
 8002abc:	20000008 	.word	0x20000008
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x36>
 8002af2:	e03f      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	e03f      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	fa92 f2a2 	rbit	r2, r2
 8002b0c:	607a      	str	r2, [r7, #4]
  return result;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	40d3      	lsrs	r3, r2
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	220f      	movs	r2, #15
 8002b28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	fa92 f2a2 	rbit	r2, r2
 8002b30:	60fa      	str	r2, [r7, #12]
  return result;
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	40d3      	lsrs	r3, r2
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e007      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	623b      	str	r3, [r7, #32]
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b76:	623b      	str	r3, [r7, #32]
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	372c      	adds	r7, #44	; 0x2c
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	080061a8 	.word	0x080061a8
 8002b94:	080061b8 	.word	0x080061b8

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bb6:	f7ff ffef 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	603a      	str	r2, [r7, #0]
  return result;
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	40d3      	lsrs	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080061a0 	.word	0x080061a0

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bfa:	f7ff ffcd 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bfe:	4601      	mov	r1, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	603a      	str	r2, [r7, #0]
  return result;
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	080061a0 	.word	0x080061a0

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a62      	ldr	r2, [pc, #392]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d303      	bcc.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002c58:	2172      	movs	r1, #114	; 0x72
 8002c5a:	4861      	ldr	r0, [pc, #388]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c5c:	f7fd fe07 	bl	800086e <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80f1 	beq.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d00d      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c92:	d003      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c94:	2178      	movs	r1, #120	; 0x78
 8002c96:	4852      	ldr	r0, [pc, #328]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c98:	f7fd fde9 	bl	800086e <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9c:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a44      	ldr	r2, [pc, #272]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fd ffd7 	bl	8000c90 <HAL_GetTick>
 8002ce2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fd ffd3 	bl	8000c90 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e38f      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d04:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 808a 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f000 8082 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	461a      	mov	r2, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d78:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d050      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fd ff82 	bl	8000c90 <HAL_GetTick>
 8002d8c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fd ff7e 	bl	8000c90 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e338      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8002da6:	2302      	movs	r3, #2
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	2302      	movs	r3, #2
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d10d      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	e012      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002dda:	bf00      	nop
 8002ddc:	03f73400 	.word	0x03f73400
 8002de0:	08006084 	.word	0x08006084
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
 8002dec:	10908100 	.word	0x10908100
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	4b97      	ldr	r3, [pc, #604]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2202      	movs	r2, #2
 8002e02:	613a      	str	r2, [r7, #16]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f002 021f 	and.w	r2, r2, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0b2      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e2a:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4989      	ldr	r1, [pc, #548]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a84      	ldr	r2, [pc, #528]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00f      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d007      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002e7c:	21be      	movs	r1, #190	; 0xbe
 8002e7e:	4878      	ldr	r0, [pc, #480]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e80:	f7fd fcf5 	bl	800086e <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f023 0203 	bic.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4972      	ldr	r1, [pc, #456]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01f      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ec6:	d003      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ec8:	21c9      	movs	r1, #201	; 0xc9
 8002eca:	4865      	ldr	r0, [pc, #404]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ecc:	f7fd fccf 	bl	800086e <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed0:	4b62      	ldr	r3, [pc, #392]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	495f      	ldr	r1, [pc, #380]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01f      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002efe:	d00d      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f12:	d003      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002f14:	21d5      	movs	r1, #213	; 0xd5
 8002f16:	4852      	ldr	r0, [pc, #328]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f18:	f7fd fca9 	bl	800086e <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1c:	4b4f      	ldr	r3, [pc, #316]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	494c      	ldr	r1, [pc, #304]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d014      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d003      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8002f4a:	21e0      	movs	r1, #224	; 0xe0
 8002f4c:	4844      	ldr	r0, [pc, #272]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f4e:	f7fd fc8e 	bl	800086e <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f023 0210 	bic.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	493f      	ldr	r1, [pc, #252]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f78:	d007      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002f82:	21ee      	movs	r1, #238	; 0xee
 8002f84:	4836      	ldr	r0, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f86:	f7fd fc72 	bl	800086e <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	4931      	ldr	r1, [pc, #196]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d004      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8002fb8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002fbc:	4828      	ldr	r0, [pc, #160]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fbe:	f7fd fc56 	bl	800086e <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f023 0220 	bic.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4923      	ldr	r1, [pc, #140]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d004      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002ff0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002ff4:	481a      	ldr	r0, [pc, #104]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ff6:	f7fd fc3a 	bl	800086e <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	4915      	ldr	r1, [pc, #84]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003008:	4313      	orrs	r3, r2
 800300a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d025      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003028:	d00e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003032:	d009      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800303c:	d004      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800303e:	f240 1123 	movw	r1, #291	; 0x123
 8003042:	4807      	ldr	r0, [pc, #28]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003044:	f7fd fc13 	bl	800086e <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4901      	ldr	r1, [pc, #4]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800305c:	40021000 	.word	0x40021000
 8003060:	08006084 	.word	0x08006084
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003080:	d00e      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800308a:	d009      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003094:	d004      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003096:	f240 112d 	movw	r1, #301	; 0x12d
 800309a:	48a1      	ldr	r0, [pc, #644]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800309c:	f7fd fbe7 	bl	800086e <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030a0:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	499d      	ldr	r1, [pc, #628]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80030d0:	f240 113d 	movw	r1, #317	; 0x13d
 80030d4:	4892      	ldr	r0, [pc, #584]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80030d6:	f7fd fbca 	bl	800086e <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030da:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	498f      	ldr	r1, [pc, #572]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d04d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d040      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d03b      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003112:	d036      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800311c:	d031      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003126:	d02c      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003130:	d027      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800313a:	d022      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8003144:	d01d      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800314e:	d018      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003158:	d013      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003162:	d00e      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800316c:	d009      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003176:	d004      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8003178:	f240 115d 	movw	r1, #349	; 0x15d
 800317c:	4868      	ldr	r0, [pc, #416]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800317e:	f7fd fb76 	bl	800086e <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	4965      	ldr	r1, [pc, #404]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003190:	4313      	orrs	r3, r2
 8003192:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d04d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d040      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	d03b      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80031ba:	d036      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80031c4:	d031      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80031ce:	d02c      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80031d8:	d027      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80031e2:	d022      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 80031ec:	d01d      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 80031f6:	d018      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003200:	d013      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800320a:	d00e      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8003214:	d009      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 800321e:	d004      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003220:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8003224:	483e      	ldr	r0, [pc, #248]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003226:	f7fd fb22 	bl	800086e <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	493b      	ldr	r1, [pc, #236]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003238:	4313      	orrs	r3, r2
 800323a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d016      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003258:	d004      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800325a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800325e:	4830      	ldr	r0, [pc, #192]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003260:	f7fd fb05 	bl	800086e <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	492c      	ldr	r1, [pc, #176]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x666>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d004      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8003294:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003298:	4821      	ldr	r0, [pc, #132]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800329a:	f7fd fae8 	bl	800086e <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	491e      	ldr	r1, [pc, #120]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80032ce:	f240 11f7 	movw	r1, #503	; 0x1f7
 80032d2:	4813      	ldr	r0, [pc, #76]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80032d4:	f7fd facb 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	490f      	ldr	r1, [pc, #60]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01b      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003306:	d004      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003308:	f240 2101 	movw	r1, #513	; 0x201
 800330c:	4804      	ldr	r0, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800330e:	f7fd faae 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003320:	08006084 	.word	0x08006084
 8003324:	40021000 	.word	0x40021000
 8003328:	493d      	ldr	r1, [pc, #244]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d004      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800334c:	f240 210b 	movw	r1, #523	; 0x20b
 8003350:	4834      	ldr	r0, [pc, #208]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8003352:	f7fd fa8c 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	492f      	ldr	r1, [pc, #188]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d016      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003384:	d004      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8003386:	f240 2115 	movw	r1, #533	; 0x215
 800338a:	4826      	ldr	r0, [pc, #152]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800338c:	f7fd fa6f 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	4920      	ldr	r1, [pc, #128]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x792>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	d004      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x792>
 80033c0:	f240 211f 	movw	r1, #543	; 0x21f
 80033c4:	4817      	ldr	r0, [pc, #92]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80033c6:	f7fd fa52 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	4912      	ldr	r1, [pc, #72]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f8:	d004      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80033fa:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80033fe:	4809      	ldr	r0, [pc, #36]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8003400:	f7fd fa35 	bl	800086e <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3748      	adds	r7, #72	; 0x48
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08006084 	.word	0x08006084

08003428 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0e1      	b.n	80035fe <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <HAL_RTC_Init+0x1e0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_RTC_Init+0x26>
 8003444:	f240 1121 	movw	r1, #289	; 0x121
 8003448:	4870      	ldr	r0, [pc, #448]	; (800360c <HAL_RTC_Init+0x1e4>)
 800344a:	f7fd fa10 	bl	800086e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d008      	beq.n	8003468 <HAL_RTC_Init+0x40>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_RTC_Init+0x40>
 800345e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003462:	486a      	ldr	r0, [pc, #424]	; (800360c <HAL_RTC_Init+0x1e4>)
 8003464:	f7fd fa03 	bl	800086e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b7f      	cmp	r3, #127	; 0x7f
 800346e:	d904      	bls.n	800347a <HAL_RTC_Init+0x52>
 8003470:	f240 1123 	movw	r1, #291	; 0x123
 8003474:	4865      	ldr	r0, [pc, #404]	; (800360c <HAL_RTC_Init+0x1e4>)
 8003476:	f7fd f9fa 	bl	800086e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003482:	d304      	bcc.n	800348e <HAL_RTC_Init+0x66>
 8003484:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003488:	4860      	ldr	r0, [pc, #384]	; (800360c <HAL_RTC_Init+0x1e4>)
 800348a:	f7fd f9f0 	bl	800086e <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <HAL_RTC_Init+0x96>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349e:	d00e      	beq.n	80034be <HAL_RTC_Init+0x96>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a8:	d009      	beq.n	80034be <HAL_RTC_Init+0x96>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034b2:	d004      	beq.n	80034be <HAL_RTC_Init+0x96>
 80034b4:	f240 1125 	movw	r1, #293	; 0x125
 80034b8:	4854      	ldr	r0, [pc, #336]	; (800360c <HAL_RTC_Init+0x1e4>)
 80034ba:	f7fd f9d8 	bl	800086e <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RTC_Init+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d004      	beq.n	80034da <HAL_RTC_Init+0xb2>
 80034d0:	f44f 7193 	mov.w	r1, #294	; 0x126
 80034d4:	484d      	ldr	r0, [pc, #308]	; (800360c <HAL_RTC_Init+0x1e4>)
 80034d6:	f7fd f9ca 	bl	800086e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RTC_Init+0xce>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ea:	d004      	beq.n	80034f6 <HAL_RTC_Init+0xce>
 80034ec:	f240 1127 	movw	r1, #295	; 0x127
 80034f0:	4846      	ldr	r0, [pc, #280]	; (800360c <HAL_RTC_Init+0x1e4>)
 80034f2:	f7fd f9bc 	bl	800086e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7f5b      	ldrb	r3, [r3, #29]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fd f9ec 	bl	80008e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	22ca      	movs	r2, #202	; 0xca
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2253      	movs	r2, #83	; 0x53
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa74 	bl	8003a10 <RTC_EnterInitMode>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	22ff      	movs	r2, #255	; 0xff
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e05e      	b.n	80035fe <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800354e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003552:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	041a      	lsls	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa06 	bl	80039c0 <HAL_RTC_WaitForSynchro>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2204      	movs	r2, #4
 80035c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e018      	b.n	80035fe <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	22ff      	movs	r2, #255	; 0xff
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40002800 	.word	0x40002800
 800360c:	080060e0 	.word	0x080060e0

08003610 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_RTC_SetTime+0x26>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d004      	beq.n	8003636 <HAL_RTC_SetTime+0x26>
 800362c:	f240 310f 	movw	r1, #783	; 0x30f
 8003630:	48a4      	ldr	r0, [pc, #656]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003632:	f7fd f91c 	bl	800086e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363e:	d00d      	beq.n	800365c <HAL_RTC_SetTime+0x4c>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d008      	beq.n	800365c <HAL_RTC_SetTime+0x4c>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_RTC_SetTime+0x4c>
 8003652:	f44f 7144 	mov.w	r1, #784	; 0x310
 8003656:	489b      	ldr	r0, [pc, #620]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003658:	f7fd f909 	bl	800086e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RTC_SetTime+0x68>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800366c:	d004      	beq.n	8003678 <HAL_RTC_SetTime+0x68>
 800366e:	f240 3111 	movw	r1, #785	; 0x311
 8003672:	4894      	ldr	r0, [pc, #592]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003674:	f7fd f8fb 	bl	800086e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	7f1b      	ldrb	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_RTC_SetTime+0x74>
 8003680:	2302      	movs	r3, #2
 8003682:	e12c      	b.n	80038de <HAL_RTC_SetTime+0x2ce>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15c      	bne.n	8003750 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RTC_SetTime+0xa4>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d904      	bls.n	80036be <HAL_RTC_SetTime+0xae>
 80036b4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80036b8:	4882      	ldr	r0, [pc, #520]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80036ba:	f7fd f8d8 	bl	800086e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	78db      	ldrb	r3, [r3, #3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RTC_SetTime+0xe2>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d011      	beq.n	80036f2 <HAL_RTC_SetTime+0xe2>
 80036ce:	f240 311d 	movw	r1, #797	; 0x31d
 80036d2:	487c      	ldr	r0, [pc, #496]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80036d4:	f7fd f8cb 	bl	800086e <assert_failed>
 80036d8:	e00b      	b.n	80036f2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b17      	cmp	r3, #23
 80036e6:	d904      	bls.n	80036f2 <HAL_RTC_SetTime+0xe2>
 80036e8:	f240 3122 	movw	r1, #802	; 0x322
 80036ec:	4875      	ldr	r0, [pc, #468]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80036ee:	f7fd f8be 	bl	800086e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b3b      	cmp	r3, #59	; 0x3b
 80036f8:	d904      	bls.n	8003704 <HAL_RTC_SetTime+0xf4>
 80036fa:	f44f 7149 	mov.w	r1, #804	; 0x324
 80036fe:	4871      	ldr	r0, [pc, #452]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003700:	f7fd f8b5 	bl	800086e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	789b      	ldrb	r3, [r3, #2]
 8003708:	2b3b      	cmp	r3, #59	; 0x3b
 800370a:	d904      	bls.n	8003716 <HAL_RTC_SetTime+0x106>
 800370c:	f240 3125 	movw	r1, #805	; 0x325
 8003710:	486c      	ldr	r0, [pc, #432]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003712:	f7fd f8ac 	bl	800086e <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f9a4 	bl	8003a68 <RTC_ByteToBcd2>
 8003720:	4603      	mov	r3, r0
 8003722:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f99d 	bl	8003a68 <RTC_ByteToBcd2>
 800372e:	4603      	mov	r3, r0
 8003730:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003732:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	789b      	ldrb	r3, [r3, #2]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f995 	bl	8003a68 <RTC_ByteToBcd2>
 800373e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003740:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	78db      	ldrb	r3, [r3, #3]
 8003748:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e062      	b.n	8003816 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d022      	beq.n	80037a4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f99e 	bl	8003aa4 <RTC_Bcd2ToByte>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <HAL_RTC_SetTime+0x16e>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f996 	bl	8003aa4 <RTC_Bcd2ToByte>
 8003778:	4603      	mov	r3, r0
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d904      	bls.n	8003788 <HAL_RTC_SetTime+0x178>
 800377e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8003782:	4850      	ldr	r0, [pc, #320]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 8003784:	f7fd f873 	bl	800086e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	78db      	ldrb	r3, [r3, #3]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d019      	beq.n	80037c4 <HAL_RTC_SetTime+0x1b4>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	78db      	ldrb	r3, [r3, #3]
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d015      	beq.n	80037c4 <HAL_RTC_SetTime+0x1b4>
 8003798:	f240 3131 	movw	r1, #817	; 0x331
 800379c:	4849      	ldr	r0, [pc, #292]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 800379e:	f7fd f866 	bl	800086e <assert_failed>
 80037a2:	e00f      	b.n	80037c4 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f978 	bl	8003aa4 <RTC_Bcd2ToByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b17      	cmp	r3, #23
 80037b8:	d904      	bls.n	80037c4 <HAL_RTC_SetTime+0x1b4>
 80037ba:	f240 3136 	movw	r1, #822	; 0x336
 80037be:	4841      	ldr	r0, [pc, #260]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80037c0:	f7fd f855 	bl	800086e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f96b 	bl	8003aa4 <RTC_Bcd2ToByte>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b3b      	cmp	r3, #59	; 0x3b
 80037d2:	d904      	bls.n	80037de <HAL_RTC_SetTime+0x1ce>
 80037d4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80037d8:	483a      	ldr	r0, [pc, #232]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80037da:	f7fd f848 	bl	800086e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	789b      	ldrb	r3, [r3, #2]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f95e 	bl	8003aa4 <RTC_Bcd2ToByte>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b3b      	cmp	r3, #59	; 0x3b
 80037ec:	d904      	bls.n	80037f8 <HAL_RTC_SetTime+0x1e8>
 80037ee:	f240 3139 	movw	r1, #825	; 0x339
 80037f2:	4834      	ldr	r0, [pc, #208]	; (80038c4 <HAL_RTC_SetTime+0x2b4>)
 80037f4:	f7fd f83b 	bl	800086e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003804:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800380a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	78db      	ldrb	r3, [r3, #3]
 8003810:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	22ca      	movs	r2, #202	; 0xca
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2253      	movs	r2, #83	; 0x53
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f8f2 	bl	8003a10 <RTC_EnterInitMode>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2204      	movs	r2, #4
 800383e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e049      	b.n	80038de <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003854:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003858:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003868:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003890:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f88d 	bl	80039c0 <HAL_RTC_WaitForSynchro>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2204      	movs	r2, #4
 80038b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e00c      	b.n	80038de <HAL_RTC_SetTime+0x2ce>
 80038c4:	080060e0 	.word	0x080060e0
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	bf00      	nop

080038e8 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_RTC_GetTime+0x26>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d004      	beq.n	800390e <HAL_RTC_GetTime+0x26>
 8003904:	f44f 7164 	mov.w	r1, #912	; 0x390
 8003908:	482c      	ldr	r0, [pc, #176]	; (80039bc <HAL_RTC_GetTime+0xd4>)
 800390a:	f7fc ffb0 	bl	800086e <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003930:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003934:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11a      	bne.n	80039b0 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f890 	bl	8003aa4 <RTC_Bcd2ToByte>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f887 	bl	8003aa4 <RTC_Bcd2ToByte>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	789b      	ldrb	r3, [r3, #2]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f87e 	bl	8003aa4 <RTC_Bcd2ToByte>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	080060e0 	.word	0x080060e0

080039c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80039dc:	f7fd f958 	bl	8000c90 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039e2:	e009      	b.n	80039f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039e4:	f7fd f954 	bl	8000c90 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f2:	d901      	bls.n	80039f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e007      	b.n	8003a08 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d119      	bne.n	8003a5e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a34:	f7fd f92c 	bl	8000c90 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a3a:	e009      	b.n	8003a50 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a3c:	f7fd f928 	bl	8000c90 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4a:	d901      	bls.n	8003a50 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e007      	b.n	8003a60 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ee      	beq.n	8003a3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003a76:	e005      	b.n	8003a84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	3b0a      	subs	r3, #10
 8003a82:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d8f6      	bhi.n	8003a78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b2db      	uxtb	r3, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d010      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d00d      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d00a      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d007      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d004      	beq.n	8003b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8003b14:	f44f 7158 	mov.w	r1, #864	; 0x360
 8003b18:	485a      	ldr	r0, [pc, #360]	; (8003c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003b1a:	f7fc fea8 	bl	800086e <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d304      	bcc.n	8003b30 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8003b26:	f240 3161 	movw	r1, #865	; 0x361
 8003b2a:	4856      	ldr	r0, [pc, #344]	; (8003c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003b2c:	f7fc fe9f 	bl	800086e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	7f1b      	ldrb	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e09e      	b.n	8003c7a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2202      	movs	r2, #2
 8003b46:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	22ca      	movs	r2, #202	; 0xca
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2253      	movs	r2, #83	; 0x53
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01e      	beq.n	8003ba4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8003b66:	f7fd f893 	bl	8000c90 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003b6c:	e013      	b.n	8003b96 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b6e:	f7fd f88f 	bl	8000c90 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7c:	d90b      	bls.n	8003b96 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2203      	movs	r2, #3
 8003b8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e071      	b.n	8003c7a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e4      	bne.n	8003b6e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003bc4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003bc6:	f7fd f863 	bl	8000c90 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003bcc:	e013      	b.n	8003bf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bce:	f7fd f85f 	bl	8000c90 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bdc:	d90b      	bls.n	8003bf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2203      	movs	r2, #3
 8003bea:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e041      	b.n	8003c7a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0e4      	beq.n	8003bce <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0207 	bic.w	r2, r2, #7
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c36:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c42:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c62:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	08006118 	.word	0x08006118
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7f1b      	ldrb	r3, [r3, #28]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e047      	b.n	8003d34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	22ca      	movs	r2, #202	; 0xca
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2253      	movs	r2, #83	; 0x53
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cde:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003ce0:	f7fc ffd6 	bl	8000c90 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003ce6:	e013      	b.n	8003d10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ce8:	f7fc ffd2 	bl	8000c90 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf6:	d90b      	bls.n	8003d10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e011      	b.n	8003d34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0e4      	beq.n	8003ce8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc fb92 	bl	800047c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d68:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003d6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d70:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	775a      	strb	r2, [r3, #29]
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40010400 	.word	0x40010400

08003d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e077      	b.n	8003e86 <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d014      	beq.n	8003dc8 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <HAL_UART_Init+0x10c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02d      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <HAL_UART_Init+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d028      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a38      	ldr	r2, [pc, #224]	; (8003e98 <HAL_UART_Init+0x114>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d023      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003dbc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dc0:	4836      	ldr	r0, [pc, #216]	; (8003e9c <HAL_UART_Init+0x118>)
 8003dc2:	f7fc fd54 	bl	800086e <assert_failed>
 8003dc6:	e01d      	b.n	8003e04 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <HAL_UART_Init+0x10c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <HAL_UART_Init+0x110>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <HAL_UART_Init+0x114>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_UART_Init+0x11c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_UART_Init+0x120>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_UART_Init+0x80>
 8003dfa:	f240 1131 	movw	r1, #305	; 0x131
 8003dfe:	4827      	ldr	r0, [pc, #156]	; (8003e9c <HAL_UART_Init+0x118>)
 8003e00:	f7fc fd35 	bl	800086e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fc fe6d 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fbe9 	bl	8004608 <UART_SetConfig>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e022      	b.n	8003e86 <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fe41 	bl	8004ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 ff74 	bl	8004d6c <UART_CheckIdleState>
 8003e84:	4603      	mov	r3, r0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	08006154 	.word	0x08006154
 8003ea0:	40004c00 	.word	0x40004c00
 8003ea4:	40005000 	.word	0x40005000

08003ea8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b08b      	sub	sp, #44	; 0x2c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d156      	bne.n	8003f6c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_UART_Transmit_IT+0x22>
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e04f      	b.n	8003f6e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_UART_Transmit_IT+0x34>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e048      	b.n	8003f6e <HAL_UART_Transmit_IT+0xc6>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2221      	movs	r2, #33	; 0x21
 8003f0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d107      	bne.n	8003f28 <HAL_UART_Transmit_IT+0x80>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <HAL_UART_Transmit_IT+0xd4>)
 8003f24:	669a      	str	r2, [r3, #104]	; 0x68
 8003f26:	e002      	b.n	8003f2e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_UART_Transmit_IT+0xd8>)
 8003f2c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	613b      	str	r3, [r7, #16]
   return(result);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	69f9      	ldr	r1, [r7, #28]
 8003f5a:	6a3a      	ldr	r2, [r7, #32]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	372c      	adds	r7, #44	; 0x2c
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	0800528b 	.word	0x0800528b
 8003f80:	080051d3 	.word	0x080051d3

08003f84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d13d      	bne.n	8004016 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_UART_Receive_IT+0x22>
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e036      	b.n	8004018 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_UART_Receive_IT+0x34>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e02f      	b.n	8004018 <HAL_UART_Receive_IT+0x94>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d018      	beq.n	8004006 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	69f9      	ldr	r1, [r7, #28]
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e6      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	461a      	mov	r2, r3
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 ffbb 	bl	8004f88 <UART_Start_Receive_IT>
 8004012:	4603      	mov	r3, r0
 8004014:	e000      	b.n	8004018 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0ba      	sub	sp, #232	; 0xe8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800404a:	f640 030f 	movw	r3, #2063	; 0x80f
 800404e:	4013      	ands	r3, r2
 8004050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d115      	bne.n	8004088 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00f      	beq.n	8004088 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 82a3 	beq.w	80045c4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
      }
      return;
 8004086:	e29d      	b.n	80045c4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8117 	beq.w	80042c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800409e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040a2:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <HAL_UART_IRQHandler+0x298>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 810a 	beq.w	80042c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d011      	beq.n	80040dc <HAL_UART_IRQHandler+0xbc>
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2201      	movs	r2, #1
 80040ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d011      	beq.n	800410c <HAL_UART_IRQHandler+0xec>
 80040e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2202      	movs	r2, #2
 80040fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d011      	beq.n	800413c <HAL_UART_IRQHandler+0x11c>
 8004118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2204      	movs	r2, #4
 800412a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d017      	beq.n	8004178 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004158:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2208      	movs	r2, #8
 8004166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	f043 0208 	orr.w	r2, r3, #8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_UART_IRQHandler+0x18a>
 8004184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8209 	beq.w	80045c8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d005      	beq.n	8004202 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04f      	beq.n	80042a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 ff6c 	bl	80050e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d141      	bne.n	800429a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800422c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004242:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800424e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800425a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1d9      	bne.n	8004216 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <HAL_UART_IRQHandler+0x29c>)
 8004270:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fe8f 	bl	8000f9a <HAL_DMA_Abort_IT>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d017      	beq.n	80042b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e00f      	b.n	80042b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9a2 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e00b      	b.n	80042b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f99e 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	e007      	b.n	80042b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f99a 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042b0:	e18a      	b.n	80045c8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b2:	bf00      	nop
    return;
 80042b4:	e188      	b.n	80045c8 <HAL_UART_IRQHandler+0x5a8>
 80042b6:	bf00      	nop
 80042b8:	04000120 	.word	0x04000120
 80042bc:	080051a7 	.word	0x080051a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8143 	bne.w	8004550 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 813c 	beq.w	8004550 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8135 	beq.w	8004550 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2210      	movs	r2, #16
 80042ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	f040 80b1 	bne.w	8004460 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800430a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 815c 	beq.w	80045cc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800431a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800431e:	429a      	cmp	r2, r3
 8004320:	f080 8154 	bcs.w	80045cc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800432a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b20      	cmp	r3, #32
 8004336:	f000 8085 	beq.w	8004444 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800434e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004368:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004370:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1da      	bne.n	800433a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e1      	bne.n	8004384 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e3      	bne.n	80043c0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004426:	65bb      	str	r3, [r7, #88]	; 0x58
 8004428:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800442c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e4      	bne.n	8004404 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fd72 	bl	8000f28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004450:	b29b      	uxth	r3, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f8c9 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800445e:	e0b5      	b.n	80045cc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800446c:	b29b      	uxth	r3, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80a7 	beq.w	80045d0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80a2 	beq.w	80045d0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e4      	bne.n	800448c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	623b      	str	r3, [r7, #32]
   return(result);
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044e6:	633a      	str	r2, [r7, #48]	; 0x30
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	60fb      	str	r3, [r7, #12]
   return(result);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	617b      	str	r3, [r7, #20]
   return(result);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e4      	bne.n	800450c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f851 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800454e:	e03f      	b.n	80045d0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <HAL_UART_IRQHandler+0x55a>
 800455c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 f86f 	bl	8005656 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004578:	e02d      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01c      	beq.n	80045d4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
    }
    return;
 80045a2:	e017      	b.n	80045d4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fec4 	bl	800534a <UART_EndTransmit_IT>
    return;
 80045c2:	e008      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80045c4:	bf00      	nop
 80045c6:	e006      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80045c8:	bf00      	nop
 80045ca:	e004      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80045cc:	bf00      	nop
 80045ce:	e002      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80045d0:	bf00      	nop
 80045d2:	e000      	b.n	80045d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80045d4:	bf00      	nop
  }

}
 80045d6:	37e8      	adds	r7, #232	; 0xe8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a9a      	ldr	r2, [pc, #616]	; (8004884 <UART_SetConfig+0x27c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d904      	bls.n	8004628 <UART_SetConfig+0x20>
 800461e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8004622:	4899      	ldr	r0, [pc, #612]	; (8004888 <UART_SetConfig+0x280>)
 8004624:	f7fc f923 	bl	800086e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004630:	d00d      	beq.n	800464e <UART_SetConfig+0x46>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <UART_SetConfig+0x46>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d004      	beq.n	800464e <UART_SetConfig+0x46>
 8004644:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8004648:	488f      	ldr	r0, [pc, #572]	; (8004888 <UART_SetConfig+0x280>)
 800464a:	f7fc f910 	bl	800086e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d012      	beq.n	800467e <UART_SetConfig+0x76>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <UART_SetConfig+0x76>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004668:	d009      	beq.n	800467e <UART_SetConfig+0x76>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004672:	d004      	beq.n	800467e <UART_SetConfig+0x76>
 8004674:	f640 3141 	movw	r1, #2881	; 0xb41
 8004678:	4883      	ldr	r0, [pc, #524]	; (8004888 <UART_SetConfig+0x280>)
 800467a:	f7fc f8f8 	bl	800086e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <UART_SetConfig+0x92>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468e:	d004      	beq.n	800469a <UART_SetConfig+0x92>
 8004690:	f640 3142 	movw	r1, #2882	; 0xb42
 8004694:	487c      	ldr	r0, [pc, #496]	; (8004888 <UART_SetConfig+0x280>)
 8004696:	f7fc f8ea 	bl	800086e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <UART_SetConfig+0xb8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d009      	beq.n	80046c0 <UART_SetConfig+0xb8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0xb8>
 80046b6:	f640 3144 	movw	r1, #2884	; 0xb44
 80046ba:	4873      	ldr	r0, [pc, #460]	; (8004888 <UART_SetConfig+0x280>)
 80046bc:	f7fc f8d7 	bl	800086e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f023 030c 	bic.w	r3, r3, #12
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <UART_SetConfig+0xcc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <UART_SetConfig+0xd6>
 80046d4:	f640 3145 	movw	r1, #2885	; 0xb45
 80046d8:	486b      	ldr	r0, [pc, #428]	; (8004888 <UART_SetConfig+0x280>)
 80046da:	f7fc f8c8 	bl	800086e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d013      	beq.n	800470e <UART_SetConfig+0x106>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d00e      	beq.n	800470e <UART_SetConfig+0x106>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d009      	beq.n	800470e <UART_SetConfig+0x106>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d004      	beq.n	800470e <UART_SetConfig+0x106>
 8004704:	f640 3146 	movw	r1, #2886	; 0xb46
 8004708:	485f      	ldr	r0, [pc, #380]	; (8004888 <UART_SetConfig+0x280>)
 800470a:	f7fc f8b0 	bl	800086e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <UART_SetConfig+0x122>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d004      	beq.n	800472a <UART_SetConfig+0x122>
 8004720:	f640 3147 	movw	r1, #2887	; 0xb47
 8004724:	4858      	ldr	r0, [pc, #352]	; (8004888 <UART_SetConfig+0x280>)
 8004726:	f7fc f8a2 	bl	800086e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b50      	ldr	r3, [pc, #320]	; (800488c <UART_SetConfig+0x284>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	430b      	orrs	r3, r1
 8004754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3e      	ldr	r2, [pc, #248]	; (8004890 <UART_SetConfig+0x288>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d11f      	bne.n	80047da <UART_SetConfig+0x1d2>
 800479a:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <UART_SetConfig+0x28c>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d816      	bhi.n	80047d4 <UART_SetConfig+0x1cc>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x1a4>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047cf 	.word	0x080047cf
 80047b8:	080047c3 	.word	0x080047c3
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0c4      	b.n	800494c <UART_SetConfig+0x344>
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e0c1      	b.n	800494c <UART_SetConfig+0x344>
 80047c8:	2304      	movs	r3, #4
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e0be      	b.n	800494c <UART_SetConfig+0x344>
 80047ce:	2308      	movs	r3, #8
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e0bb      	b.n	800494c <UART_SetConfig+0x344>
 80047d4:	2310      	movs	r3, #16
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e0b8      	b.n	800494c <UART_SetConfig+0x344>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <UART_SetConfig+0x290>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d124      	bne.n	800482e <UART_SetConfig+0x226>
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <UART_SetConfig+0x28c>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047f0:	d011      	beq.n	8004816 <UART_SetConfig+0x20e>
 80047f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047f6:	d817      	bhi.n	8004828 <UART_SetConfig+0x220>
 80047f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047fc:	d011      	beq.n	8004822 <UART_SetConfig+0x21a>
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004802:	d811      	bhi.n	8004828 <UART_SetConfig+0x220>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <UART_SetConfig+0x208>
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d006      	beq.n	800481c <UART_SetConfig+0x214>
 800480e:	e00b      	b.n	8004828 <UART_SetConfig+0x220>
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e09a      	b.n	800494c <UART_SetConfig+0x344>
 8004816:	2302      	movs	r3, #2
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e097      	b.n	800494c <UART_SetConfig+0x344>
 800481c:	2304      	movs	r3, #4
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e094      	b.n	800494c <UART_SetConfig+0x344>
 8004822:	2308      	movs	r3, #8
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e091      	b.n	800494c <UART_SetConfig+0x344>
 8004828:	2310      	movs	r3, #16
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e08e      	b.n	800494c <UART_SetConfig+0x344>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <UART_SetConfig+0x294>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d133      	bne.n	80048a0 <UART_SetConfig+0x298>
 8004838:	4b16      	ldr	r3, [pc, #88]	; (8004894 <UART_SetConfig+0x28c>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004840:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004844:	d011      	beq.n	800486a <UART_SetConfig+0x262>
 8004846:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800484a:	d817      	bhi.n	800487c <UART_SetConfig+0x274>
 800484c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004850:	d011      	beq.n	8004876 <UART_SetConfig+0x26e>
 8004852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004856:	d811      	bhi.n	800487c <UART_SetConfig+0x274>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <UART_SetConfig+0x25c>
 800485c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004860:	d006      	beq.n	8004870 <UART_SetConfig+0x268>
 8004862:	e00b      	b.n	800487c <UART_SetConfig+0x274>
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e070      	b.n	800494c <UART_SetConfig+0x344>
 800486a:	2302      	movs	r3, #2
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e06d      	b.n	800494c <UART_SetConfig+0x344>
 8004870:	2304      	movs	r3, #4
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e06a      	b.n	800494c <UART_SetConfig+0x344>
 8004876:	2308      	movs	r3, #8
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e067      	b.n	800494c <UART_SetConfig+0x344>
 800487c:	2310      	movs	r3, #16
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e064      	b.n	800494c <UART_SetConfig+0x344>
 8004882:	bf00      	nop
 8004884:	00895440 	.word	0x00895440
 8004888:	08006154 	.word	0x08006154
 800488c:	efff69f3 	.word	0xefff69f3
 8004890:	40013800 	.word	0x40013800
 8004894:	40021000 	.word	0x40021000
 8004898:	40004400 	.word	0x40004400
 800489c:	40004800 	.word	0x40004800
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a86      	ldr	r2, [pc, #536]	; (8004ac0 <UART_SetConfig+0x4b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d124      	bne.n	80048f4 <UART_SetConfig+0x2ec>
 80048aa:	4b86      	ldr	r3, [pc, #536]	; (8004ac4 <UART_SetConfig+0x4bc>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b6:	d011      	beq.n	80048dc <UART_SetConfig+0x2d4>
 80048b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048bc:	d817      	bhi.n	80048ee <UART_SetConfig+0x2e6>
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c2:	d011      	beq.n	80048e8 <UART_SetConfig+0x2e0>
 80048c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c8:	d811      	bhi.n	80048ee <UART_SetConfig+0x2e6>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <UART_SetConfig+0x2ce>
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d2:	d006      	beq.n	80048e2 <UART_SetConfig+0x2da>
 80048d4:	e00b      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048d6:	2300      	movs	r3, #0
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e037      	b.n	800494c <UART_SetConfig+0x344>
 80048dc:	2302      	movs	r3, #2
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e034      	b.n	800494c <UART_SetConfig+0x344>
 80048e2:	2304      	movs	r3, #4
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e031      	b.n	800494c <UART_SetConfig+0x344>
 80048e8:	2308      	movs	r3, #8
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e02e      	b.n	800494c <UART_SetConfig+0x344>
 80048ee:	2310      	movs	r3, #16
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e02b      	b.n	800494c <UART_SetConfig+0x344>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a73      	ldr	r2, [pc, #460]	; (8004ac8 <UART_SetConfig+0x4c0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d124      	bne.n	8004948 <UART_SetConfig+0x340>
 80048fe:	4b71      	ldr	r3, [pc, #452]	; (8004ac4 <UART_SetConfig+0x4bc>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004906:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800490a:	d011      	beq.n	8004930 <UART_SetConfig+0x328>
 800490c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004910:	d817      	bhi.n	8004942 <UART_SetConfig+0x33a>
 8004912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004916:	d011      	beq.n	800493c <UART_SetConfig+0x334>
 8004918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491c:	d811      	bhi.n	8004942 <UART_SetConfig+0x33a>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <UART_SetConfig+0x322>
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004926:	d006      	beq.n	8004936 <UART_SetConfig+0x32e>
 8004928:	e00b      	b.n	8004942 <UART_SetConfig+0x33a>
 800492a:	2300      	movs	r3, #0
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e00d      	b.n	800494c <UART_SetConfig+0x344>
 8004930:	2302      	movs	r3, #2
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e00a      	b.n	800494c <UART_SetConfig+0x344>
 8004936:	2304      	movs	r3, #4
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e007      	b.n	800494c <UART_SetConfig+0x344>
 800493c:	2308      	movs	r3, #8
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e004      	b.n	800494c <UART_SetConfig+0x344>
 8004942:	2310      	movs	r3, #16
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e001      	b.n	800494c <UART_SetConfig+0x344>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004954:	d15c      	bne.n	8004a10 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004956:	7ffb      	ldrb	r3, [r7, #31]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d828      	bhi.n	80049ae <UART_SetConfig+0x3a6>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x35c>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004989 	.word	0x08004989
 8004968:	08004991 	.word	0x08004991
 800496c:	08004999 	.word	0x08004999
 8004970:	080049af 	.word	0x080049af
 8004974:	0800499f 	.word	0x0800499f
 8004978:	080049af 	.word	0x080049af
 800497c:	080049af 	.word	0x080049af
 8004980:	080049af 	.word	0x080049af
 8004984:	080049a7 	.word	0x080049a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe f912 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 800498c:	61b8      	str	r0, [r7, #24]
        break;
 800498e:	e013      	b.n	80049b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7fe f930 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8004994:	61b8      	str	r0, [r7, #24]
        break;
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004998:	4b4c      	ldr	r3, [pc, #304]	; (8004acc <UART_SetConfig+0x4c4>)
 800499a:	61bb      	str	r3, [r7, #24]
        break;
 800499c:	e00c      	b.n	80049b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499e:	f7fe f891 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 80049a2:	61b8      	str	r0, [r7, #24]
        break;
 80049a4:	e008      	b.n	80049b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049aa:	61bb      	str	r3, [r7, #24]
        break;
 80049ac:	e004      	b.n	80049b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77bb      	strb	r3, [r7, #30]
        break;
 80049b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d074      	beq.n	8004aa8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	005a      	lsls	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	441a      	add	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d916      	bls.n	8004a0a <UART_SetConfig+0x402>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d212      	bcs.n	8004a0a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f023 030f 	bic.w	r3, r3, #15
 80049ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	89fa      	ldrh	r2, [r7, #14]
 8004a06:	60da      	str	r2, [r3, #12]
 8004a08:	e04e      	b.n	8004aa8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77bb      	strb	r3, [r7, #30]
 8004a0e:	e04b      	b.n	8004aa8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d827      	bhi.n	8004a66 <UART_SetConfig+0x45e>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x414>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fe f8b6 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004a44:	61b8      	str	r0, [r7, #24]
        break;
 8004a46:	e013      	b.n	8004a70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fe f8d4 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e00f      	b.n	8004a70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <UART_SetConfig+0x4c4>)
 8004a52:	61bb      	str	r3, [r7, #24]
        break;
 8004a54:	e00c      	b.n	8004a70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fe f835 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8004a5a:	61b8      	str	r0, [r7, #24]
        break;
 8004a5c:	e008      	b.n	8004a70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e004      	b.n	8004a70 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a6e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d018      	beq.n	8004aa8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	085a      	lsrs	r2, r3, #1
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	441a      	add	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d908      	bls.n	8004aa4 <UART_SetConfig+0x49c>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d204      	bcs.n	8004aa4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e001      	b.n	8004aa8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ab4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40004c00 	.word	0x40004c00
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40005000 	.word	0x40005000
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2bff      	cmp	r3, #255	; 0xff
 8004ade:	d904      	bls.n	8004aea <UART_AdvFeatureConfig+0x1a>
 8004ae0:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8004ae4:	489d      	ldr	r0, [pc, #628]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004ae6:	f7fb fec2 	bl	800086e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d018      	beq.n	8004b28 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <UART_AdvFeatureConfig+0x42>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b06:	d004      	beq.n	8004b12 <UART_AdvFeatureConfig+0x42>
 8004b08:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8004b0c:	4893      	ldr	r0, [pc, #588]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004b0e:	f7fb feae 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d018      	beq.n	8004b66 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <UART_AdvFeatureConfig+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d004      	beq.n	8004b50 <UART_AdvFeatureConfig+0x80>
 8004b46:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8004b4a:	4884      	ldr	r0, [pc, #528]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004b4c:	f7fb fe8f 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <UART_AdvFeatureConfig+0xbe>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b82:	d004      	beq.n	8004b8e <UART_AdvFeatureConfig+0xbe>
 8004b84:	f640 31db 	movw	r1, #3035	; 0xbdb
 8004b88:	4874      	ldr	r0, [pc, #464]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004b8a:	f7fb fe70 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d018      	beq.n	8004be2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <UART_AdvFeatureConfig+0xfc>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc0:	d004      	beq.n	8004bcc <UART_AdvFeatureConfig+0xfc>
 8004bc2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8004bc6:	4865      	ldr	r0, [pc, #404]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004bc8:	f7fb fe51 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <UART_AdvFeatureConfig+0x13a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d004      	beq.n	8004c0a <UART_AdvFeatureConfig+0x13a>
 8004c00:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8004c04:	4855      	ldr	r0, [pc, #340]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004c06:	f7fb fe32 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d018      	beq.n	8004c5e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <UART_AdvFeatureConfig+0x178>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d004      	beq.n	8004c48 <UART_AdvFeatureConfig+0x178>
 8004c3e:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8004c42:	4846      	ldr	r0, [pc, #280]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004c44:	f7fb fe13 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d054      	beq.n	8004d14 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <UART_AdvFeatureConfig+0x290>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <UART_AdvFeatureConfig+0x1c2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <UART_AdvFeatureConfig+0x294>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <UART_AdvFeatureConfig+0x1c2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <UART_AdvFeatureConfig+0x298>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <UART_AdvFeatureConfig+0x1c2>
 8004c88:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8004c8c:	4833      	ldr	r0, [pc, #204]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004c8e:	f7fb fdee 	bl	800086e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <UART_AdvFeatureConfig+0x1de>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca2:	d004      	beq.n	8004cae <UART_AdvFeatureConfig+0x1de>
 8004ca4:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004caa:	f7fb fde0 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	d122      	bne.n	8004d14 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d013      	beq.n	8004cfe <UART_AdvFeatureConfig+0x22e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cde:	d00e      	beq.n	8004cfe <UART_AdvFeatureConfig+0x22e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce8:	d009      	beq.n	8004cfe <UART_AdvFeatureConfig+0x22e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cf2:	d004      	beq.n	8004cfe <UART_AdvFeatureConfig+0x22e>
 8004cf4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004cf8:	4818      	ldr	r0, [pc, #96]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004cfa:	f7fb fdb8 	bl	800086e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d018      	beq.n	8004d52 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <UART_AdvFeatureConfig+0x26c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d30:	d004      	beq.n	8004d3c <UART_AdvFeatureConfig+0x26c>
 8004d32:	f640 4105 	movw	r1, #3077	; 0xc05
 8004d36:	4809      	ldr	r0, [pc, #36]	; (8004d5c <UART_AdvFeatureConfig+0x28c>)
 8004d38:	f7fb fd99 	bl	800086e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08006154 	.word	0x08006154
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40004800 	.word	0x40004800

08004d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d7c:	f7fb ff88 	bl	8000c90 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d10e      	bne.n	8004dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f82d 	bl	8004dfe <UART_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e023      	b.n	8004df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d10e      	bne.n	8004dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f817 	bl	8004dfe <UART_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00d      	b.n	8004df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b09c      	sub	sp, #112	; 0x70
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0e:	e0a5      	b.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	f000 80a1 	beq.w	8004f5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fb ff39 	bl	8000c90 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d13e      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e44:	667b      	str	r3, [r7, #100]	; 0x64
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e6      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e5      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e067      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d04f      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eca:	d147      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e6      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	613b      	str	r3, [r7, #16]
   return(result);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f28:	623a      	str	r2, [r7, #32]
 8004f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e010      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	f43f af4a 	beq.w	8004e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3770      	adds	r7, #112	; 0x70
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b091      	sub	sp, #68	; 0x44
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d10e      	bne.n	8004fda <UART_Start_Receive_IT+0x52>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <UART_Start_Receive_IT+0x48>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fce:	e02d      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	22ff      	movs	r2, #255	; 0xff
 8004fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd8:	e028      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <UART_Start_Receive_IT+0x76>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <UART_Start_Receive_IT+0x6c>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ff2:	e01b      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	227f      	movs	r2, #127	; 0x7f
 8004ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ffc:	e016      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005006:	d10d      	bne.n	8005024 <UART_Start_Receive_IT+0x9c>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <UART_Start_Receive_IT+0x92>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	227f      	movs	r2, #127	; 0x7f
 8005014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005018:	e008      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	223f      	movs	r2, #63	; 0x3f
 800501e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005022:	e003      	b.n	800502c <UART_Start_Receive_IT+0xa4>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2222      	movs	r2, #34	; 0x22
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800505a:	637a      	str	r2, [r7, #52]	; 0x34
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d107      	bne.n	8005088 <UART_Start_Receive_IT+0x100>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_Start_Receive_IT+0x150>)
 8005084:	665a      	str	r2, [r3, #100]	; 0x64
 8005086:	e002      	b.n	800508e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a14      	ldr	r2, [pc, #80]	; (80050dc <UART_Start_Receive_IT+0x154>)
 800508c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	613b      	str	r3, [r7, #16]
   return(result);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	69f9      	ldr	r1, [r7, #28]
 80050ba:	6a3a      	ldr	r2, [r7, #32]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3744      	adds	r7, #68	; 0x44
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	080054fb 	.word	0x080054fb
 80050dc:	0800539f 	.word	0x0800539f

080050e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b095      	sub	sp, #84	; 0x54
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	643b      	str	r3, [r7, #64]	; 0x40
 8005108:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800510c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	61fb      	str	r3, [r7, #28]
   return(result);
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	64bb      	str	r3, [r7, #72]	; 0x48
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800513a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	2b01      	cmp	r3, #1
 8005154:	d118      	bne.n	8005188 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60bb      	str	r3, [r7, #8]
   return(result);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	613b      	str	r3, [r7, #16]
   return(result);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	665a      	str	r2, [r3, #100]	; 0x64
}
 800519a:	bf00      	nop
 800519c:	3754      	adds	r7, #84	; 0x54
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fa09 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b08f      	sub	sp, #60	; 0x3c
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051de:	2b21      	cmp	r3, #33	; 0x21
 80051e0:	d14d      	bne.n	800527e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d132      	bne.n	8005254 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60bb      	str	r3, [r7, #8]
   return(result);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e6      	bne.n	8005220 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005252:	e014      	b.n	800527e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	b292      	uxth	r2, r2
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800527e:	bf00      	nop
 8005280:	373c      	adds	r7, #60	; 0x3c
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800528a:	b480      	push	{r7}
 800528c:	b091      	sub	sp, #68	; 0x44
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	2b21      	cmp	r3, #33	; 0x21
 8005298:	d151      	bne.n	800533e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d132      	bne.n	800530c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	623b      	str	r3, [r7, #32]
   return(result);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
 80052c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e6      	bne.n	80052a6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	617b      	str	r3, [r7, #20]
   return(result);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800530a:	e018      	b.n	800533e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800531e:	b292      	uxth	r2, r2
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	1c9a      	adds	r2, r3, #2
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800533e:	bf00      	nop
 8005340:	3744      	adds	r7, #68	; 0x44
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b088      	sub	sp, #32
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6979      	ldr	r1, [r7, #20]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	613b      	str	r3, [r7, #16]
   return(result);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fb f997 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b096      	sub	sp, #88	; 0x58
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b4:	2b22      	cmp	r3, #34	; 0x22
 80053b6:	f040 8094 	bne.w	80054e2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80053c8:	b2d9      	uxtb	r1, r3
 80053ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	400a      	ands	r2, r1
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d177      	bne.n	80054f2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005416:	653b      	str	r3, [r7, #80]	; 0x50
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005420:	647b      	str	r3, [r7, #68]	; 0x44
 8005422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	623b      	str	r3, [r7, #32]
   return(result);
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005454:	633a      	str	r2, [r7, #48]	; 0x30
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800545a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b01      	cmp	r3, #1
 800547a:	d12e      	bne.n	80054da <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0310 	bic.w	r3, r3, #16
 8005496:	64bb      	str	r3, [r7, #72]	; 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	617b      	str	r3, [r7, #20]
   return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d103      	bne.n	80054ca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff f88c 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054d8:	e00b      	b.n	80054f2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb f8c2 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 80054e0:	e007      	b.n	80054f2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	619a      	str	r2, [r3, #24]
}
 80054f2:	bf00      	nop
 80054f4:	3758      	adds	r7, #88	; 0x58
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b096      	sub	sp, #88	; 0x58
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005508:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005510:	2b22      	cmp	r3, #34	; 0x22
 8005512:	f040 8094 	bne.w	800563e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800551c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005526:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800552a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800552e:	4013      	ands	r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005534:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d177      	bne.n	800564e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557c:	643b      	str	r3, [r7, #64]	; 0x40
 800557e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e6      	bne.n	800555e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d12e      	bne.n	8005636 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6979      	ldr	r1, [r7, #20]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	613b      	str	r3, [r7, #16]
   return(result);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d103      	bne.n	8005626 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2210      	movs	r2, #16
 8005624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fe ffde 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005634:	e00b      	b.n	800564e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fb f814 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 800563c:	e007      	b.n	800564e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0208 	orr.w	r2, r2, #8
 800564c:	619a      	str	r2, [r3, #24]
}
 800564e:	bf00      	nop
 8005650:	3758      	adds	r7, #88	; 0x58
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000014 	.word	0x20000014

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f000 fc64 	bl	8005f58 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	080061fc 	.word	0x080061fc
 80056b4:	080061fc 	.word	0x080061fc
 80056b8:	080061fc 	.word	0x080061fc
 80056bc:	08006200 	.word	0x08006200

080056c0 <memset>:
 80056c0:	4402      	add	r2, r0
 80056c2:	4603      	mov	r3, r0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	f803 1b01 	strb.w	r1, [r3], #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <siprintf>:
 80056d0:	b40e      	push	{r1, r2, r3}
 80056d2:	b500      	push	{lr}
 80056d4:	b09c      	sub	sp, #112	; 0x70
 80056d6:	ab1d      	add	r3, sp, #116	; 0x74
 80056d8:	9002      	str	r0, [sp, #8]
 80056da:	9006      	str	r0, [sp, #24]
 80056dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056e0:	4809      	ldr	r0, [pc, #36]	; (8005708 <siprintf+0x38>)
 80056e2:	9107      	str	r1, [sp, #28]
 80056e4:	9104      	str	r1, [sp, #16]
 80056e6:	4909      	ldr	r1, [pc, #36]	; (800570c <siprintf+0x3c>)
 80056e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ec:	9105      	str	r1, [sp, #20]
 80056ee:	6800      	ldr	r0, [r0, #0]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	a902      	add	r1, sp, #8
 80056f4:	f000 f87e 	bl	80057f4 <_svfiprintf_r>
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	b01c      	add	sp, #112	; 0x70
 8005700:	f85d eb04 	ldr.w	lr, [sp], #4
 8005704:	b003      	add	sp, #12
 8005706:	4770      	bx	lr
 8005708:	20000014 	.word	0x20000014
 800570c:	ffff0208 	.word	0xffff0208

08005710 <strstr>:
 8005710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005712:	780c      	ldrb	r4, [r1, #0]
 8005714:	b164      	cbz	r4, 8005730 <strstr+0x20>
 8005716:	4603      	mov	r3, r0
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	1c5e      	adds	r6, r3, #1
 800571e:	b90a      	cbnz	r2, 8005724 <strstr+0x14>
 8005720:	4610      	mov	r0, r2
 8005722:	e005      	b.n	8005730 <strstr+0x20>
 8005724:	4294      	cmp	r4, r2
 8005726:	d108      	bne.n	800573a <strstr+0x2a>
 8005728:	460d      	mov	r5, r1
 800572a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800572e:	b902      	cbnz	r2, 8005732 <strstr+0x22>
 8005730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005732:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005736:	4297      	cmp	r7, r2
 8005738:	d0f7      	beq.n	800572a <strstr+0x1a>
 800573a:	4633      	mov	r3, r6
 800573c:	e7ec      	b.n	8005718 <strstr+0x8>

0800573e <__ssputs_r>:
 800573e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005742:	688e      	ldr	r6, [r1, #8]
 8005744:	429e      	cmp	r6, r3
 8005746:	4682      	mov	sl, r0
 8005748:	460c      	mov	r4, r1
 800574a:	4690      	mov	r8, r2
 800574c:	461f      	mov	r7, r3
 800574e:	d838      	bhi.n	80057c2 <__ssputs_r+0x84>
 8005750:	898a      	ldrh	r2, [r1, #12]
 8005752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005756:	d032      	beq.n	80057be <__ssputs_r+0x80>
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	6909      	ldr	r1, [r1, #16]
 800575c:	eba5 0901 	sub.w	r9, r5, r1
 8005760:	6965      	ldr	r5, [r4, #20]
 8005762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800576a:	3301      	adds	r3, #1
 800576c:	444b      	add	r3, r9
 800576e:	106d      	asrs	r5, r5, #1
 8005770:	429d      	cmp	r5, r3
 8005772:	bf38      	it	cc
 8005774:	461d      	movcc	r5, r3
 8005776:	0553      	lsls	r3, r2, #21
 8005778:	d531      	bpl.n	80057de <__ssputs_r+0xa0>
 800577a:	4629      	mov	r1, r5
 800577c:	f000 fb46 	bl	8005e0c <_malloc_r>
 8005780:	4606      	mov	r6, r0
 8005782:	b950      	cbnz	r0, 800579a <__ssputs_r+0x5c>
 8005784:	230c      	movs	r3, #12
 8005786:	f8ca 3000 	str.w	r3, [sl]
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	6921      	ldr	r1, [r4, #16]
 800579c:	464a      	mov	r2, r9
 800579e:	f000 fabd 	bl	8005d1c <memcpy>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	6126      	str	r6, [r4, #16]
 80057b0:	6165      	str	r5, [r4, #20]
 80057b2:	444e      	add	r6, r9
 80057b4:	eba5 0509 	sub.w	r5, r5, r9
 80057b8:	6026      	str	r6, [r4, #0]
 80057ba:	60a5      	str	r5, [r4, #8]
 80057bc:	463e      	mov	r6, r7
 80057be:	42be      	cmp	r6, r7
 80057c0:	d900      	bls.n	80057c4 <__ssputs_r+0x86>
 80057c2:	463e      	mov	r6, r7
 80057c4:	4632      	mov	r2, r6
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	4641      	mov	r1, r8
 80057ca:	f000 fab5 	bl	8005d38 <memmove>
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	1b9b      	subs	r3, r3, r6
 80057d4:	4432      	add	r2, r6
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	2000      	movs	r0, #0
 80057dc:	e7db      	b.n	8005796 <__ssputs_r+0x58>
 80057de:	462a      	mov	r2, r5
 80057e0:	f000 fb6e 	bl	8005ec0 <_realloc_r>
 80057e4:	4606      	mov	r6, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d1e1      	bne.n	80057ae <__ssputs_r+0x70>
 80057ea:	6921      	ldr	r1, [r4, #16]
 80057ec:	4650      	mov	r0, sl
 80057ee:	f000 fabd 	bl	8005d6c <_free_r>
 80057f2:	e7c7      	b.n	8005784 <__ssputs_r+0x46>

080057f4 <_svfiprintf_r>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4698      	mov	r8, r3
 80057fa:	898b      	ldrh	r3, [r1, #12]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	b09d      	sub	sp, #116	; 0x74
 8005800:	4607      	mov	r7, r0
 8005802:	460d      	mov	r5, r1
 8005804:	4614      	mov	r4, r2
 8005806:	d50e      	bpl.n	8005826 <_svfiprintf_r+0x32>
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	b963      	cbnz	r3, 8005826 <_svfiprintf_r+0x32>
 800580c:	2140      	movs	r1, #64	; 0x40
 800580e:	f000 fafd 	bl	8005e0c <_malloc_r>
 8005812:	6028      	str	r0, [r5, #0]
 8005814:	6128      	str	r0, [r5, #16]
 8005816:	b920      	cbnz	r0, 8005822 <_svfiprintf_r+0x2e>
 8005818:	230c      	movs	r3, #12
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	e0d1      	b.n	80059c6 <_svfiprintf_r+0x1d2>
 8005822:	2340      	movs	r3, #64	; 0x40
 8005824:	616b      	str	r3, [r5, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	9309      	str	r3, [sp, #36]	; 0x24
 800582a:	2320      	movs	r3, #32
 800582c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005830:	f8cd 800c 	str.w	r8, [sp, #12]
 8005834:	2330      	movs	r3, #48	; 0x30
 8005836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059e0 <_svfiprintf_r+0x1ec>
 800583a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800583e:	f04f 0901 	mov.w	r9, #1
 8005842:	4623      	mov	r3, r4
 8005844:	469a      	mov	sl, r3
 8005846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800584a:	b10a      	cbz	r2, 8005850 <_svfiprintf_r+0x5c>
 800584c:	2a25      	cmp	r2, #37	; 0x25
 800584e:	d1f9      	bne.n	8005844 <_svfiprintf_r+0x50>
 8005850:	ebba 0b04 	subs.w	fp, sl, r4
 8005854:	d00b      	beq.n	800586e <_svfiprintf_r+0x7a>
 8005856:	465b      	mov	r3, fp
 8005858:	4622      	mov	r2, r4
 800585a:	4629      	mov	r1, r5
 800585c:	4638      	mov	r0, r7
 800585e:	f7ff ff6e 	bl	800573e <__ssputs_r>
 8005862:	3001      	adds	r0, #1
 8005864:	f000 80aa 	beq.w	80059bc <_svfiprintf_r+0x1c8>
 8005868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800586a:	445a      	add	r2, fp
 800586c:	9209      	str	r2, [sp, #36]	; 0x24
 800586e:	f89a 3000 	ldrb.w	r3, [sl]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a2 	beq.w	80059bc <_svfiprintf_r+0x1c8>
 8005878:	2300      	movs	r3, #0
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005882:	f10a 0a01 	add.w	sl, sl, #1
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800588e:	931a      	str	r3, [sp, #104]	; 0x68
 8005890:	4654      	mov	r4, sl
 8005892:	2205      	movs	r2, #5
 8005894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005898:	4851      	ldr	r0, [pc, #324]	; (80059e0 <_svfiprintf_r+0x1ec>)
 800589a:	f7fa fca1 	bl	80001e0 <memchr>
 800589e:	9a04      	ldr	r2, [sp, #16]
 80058a0:	b9d8      	cbnz	r0, 80058da <_svfiprintf_r+0xe6>
 80058a2:	06d0      	lsls	r0, r2, #27
 80058a4:	bf44      	itt	mi
 80058a6:	2320      	movmi	r3, #32
 80058a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ac:	0711      	lsls	r1, r2, #28
 80058ae:	bf44      	itt	mi
 80058b0:	232b      	movmi	r3, #43	; 0x2b
 80058b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d015      	beq.n	80058ea <_svfiprintf_r+0xf6>
 80058be:	9a07      	ldr	r2, [sp, #28]
 80058c0:	4654      	mov	r4, sl
 80058c2:	2000      	movs	r0, #0
 80058c4:	f04f 0c0a 	mov.w	ip, #10
 80058c8:	4621      	mov	r1, r4
 80058ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ce:	3b30      	subs	r3, #48	; 0x30
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d94e      	bls.n	8005972 <_svfiprintf_r+0x17e>
 80058d4:	b1b0      	cbz	r0, 8005904 <_svfiprintf_r+0x110>
 80058d6:	9207      	str	r2, [sp, #28]
 80058d8:	e014      	b.n	8005904 <_svfiprintf_r+0x110>
 80058da:	eba0 0308 	sub.w	r3, r0, r8
 80058de:	fa09 f303 	lsl.w	r3, r9, r3
 80058e2:	4313      	orrs	r3, r2
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	46a2      	mov	sl, r4
 80058e8:	e7d2      	b.n	8005890 <_svfiprintf_r+0x9c>
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	1d19      	adds	r1, r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9103      	str	r1, [sp, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfbb      	ittet	lt
 80058f6:	425b      	neglt	r3, r3
 80058f8:	f042 0202 	orrlt.w	r2, r2, #2
 80058fc:	9307      	strge	r3, [sp, #28]
 80058fe:	9307      	strlt	r3, [sp, #28]
 8005900:	bfb8      	it	lt
 8005902:	9204      	strlt	r2, [sp, #16]
 8005904:	7823      	ldrb	r3, [r4, #0]
 8005906:	2b2e      	cmp	r3, #46	; 0x2e
 8005908:	d10c      	bne.n	8005924 <_svfiprintf_r+0x130>
 800590a:	7863      	ldrb	r3, [r4, #1]
 800590c:	2b2a      	cmp	r3, #42	; 0x2a
 800590e:	d135      	bne.n	800597c <_svfiprintf_r+0x188>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	9203      	str	r2, [sp, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	bfb8      	it	lt
 800591c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005920:	3402      	adds	r4, #2
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059f0 <_svfiprintf_r+0x1fc>
 8005928:	7821      	ldrb	r1, [r4, #0]
 800592a:	2203      	movs	r2, #3
 800592c:	4650      	mov	r0, sl
 800592e:	f7fa fc57 	bl	80001e0 <memchr>
 8005932:	b140      	cbz	r0, 8005946 <_svfiprintf_r+0x152>
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	eba0 000a 	sub.w	r0, r0, sl
 800593a:	fa03 f000 	lsl.w	r0, r3, r0
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	4303      	orrs	r3, r0
 8005942:	3401      	adds	r4, #1
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594a:	4826      	ldr	r0, [pc, #152]	; (80059e4 <_svfiprintf_r+0x1f0>)
 800594c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005950:	2206      	movs	r2, #6
 8005952:	f7fa fc45 	bl	80001e0 <memchr>
 8005956:	2800      	cmp	r0, #0
 8005958:	d038      	beq.n	80059cc <_svfiprintf_r+0x1d8>
 800595a:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <_svfiprintf_r+0x1f4>)
 800595c:	bb1b      	cbnz	r3, 80059a6 <_svfiprintf_r+0x1b2>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	3307      	adds	r3, #7
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	3308      	adds	r3, #8
 8005968:	9303      	str	r3, [sp, #12]
 800596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596c:	4433      	add	r3, r6
 800596e:	9309      	str	r3, [sp, #36]	; 0x24
 8005970:	e767      	b.n	8005842 <_svfiprintf_r+0x4e>
 8005972:	fb0c 3202 	mla	r2, ip, r2, r3
 8005976:	460c      	mov	r4, r1
 8005978:	2001      	movs	r0, #1
 800597a:	e7a5      	b.n	80058c8 <_svfiprintf_r+0xd4>
 800597c:	2300      	movs	r3, #0
 800597e:	3401      	adds	r4, #1
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	4619      	mov	r1, r3
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4620      	mov	r0, r4
 800598a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800598e:	3a30      	subs	r2, #48	; 0x30
 8005990:	2a09      	cmp	r2, #9
 8005992:	d903      	bls.n	800599c <_svfiprintf_r+0x1a8>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0c5      	beq.n	8005924 <_svfiprintf_r+0x130>
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	e7c3      	b.n	8005924 <_svfiprintf_r+0x130>
 800599c:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a0:	4604      	mov	r4, r0
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f0      	b.n	8005988 <_svfiprintf_r+0x194>
 80059a6:	ab03      	add	r3, sp, #12
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	462a      	mov	r2, r5
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <_svfiprintf_r+0x1f8>)
 80059ae:	a904      	add	r1, sp, #16
 80059b0:	4638      	mov	r0, r7
 80059b2:	f3af 8000 	nop.w
 80059b6:	1c42      	adds	r2, r0, #1
 80059b8:	4606      	mov	r6, r0
 80059ba:	d1d6      	bne.n	800596a <_svfiprintf_r+0x176>
 80059bc:	89ab      	ldrh	r3, [r5, #12]
 80059be:	065b      	lsls	r3, r3, #25
 80059c0:	f53f af2c 	bmi.w	800581c <_svfiprintf_r+0x28>
 80059c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c6:	b01d      	add	sp, #116	; 0x74
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	ab03      	add	r3, sp, #12
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	462a      	mov	r2, r5
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <_svfiprintf_r+0x1f8>)
 80059d4:	a904      	add	r1, sp, #16
 80059d6:	4638      	mov	r0, r7
 80059d8:	f000 f87a 	bl	8005ad0 <_printf_i>
 80059dc:	e7eb      	b.n	80059b6 <_svfiprintf_r+0x1c2>
 80059de:	bf00      	nop
 80059e0:	080061c8 	.word	0x080061c8
 80059e4:	080061d2 	.word	0x080061d2
 80059e8:	00000000 	.word	0x00000000
 80059ec:	0800573f 	.word	0x0800573f
 80059f0:	080061ce 	.word	0x080061ce

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4699      	mov	r9, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a40:	1e13      	subs	r3, r2, #0
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	68e5      	ldr	r5, [r4, #12]
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	f003 0306 	and.w	r3, r3, #6
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	bf08      	it	eq
 8005a68:	1aad      	subeq	r5, r5, r2
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	; 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	7e27      	ldrb	r7, [r4, #24]
 8005ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005adc:	2f78      	cmp	r7, #120	; 0x78
 8005ade:	4680      	mov	r8, r0
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	; 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d8 	beq.w	8005ca2 <_printf_i+0x1d2>
 8005af2:	2f58      	cmp	r7, #88	; 0x58
 8005af4:	f000 80a3 	beq.w	8005c3e <_printf_i+0x16e>
 8005af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a001      	add	r0, pc, #4	; (adr r0, 8005b10 <_printf_i+0x40>)
 8005b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005c6b 	.word	0x08005c6b
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005cab 	.word	0x08005cab
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c73 	.word	0x08005c73
 8005b68:	680b      	ldr	r3, [r1, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	600a      	str	r2, [r1, #0]
 8005b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0a3      	b.n	8005cc4 <_printf_i+0x1f4>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	6808      	ldr	r0, [r1, #0]
 8005b80:	062e      	lsls	r6, r5, #24
 8005b82:	f100 0304 	add.w	r3, r0, #4
 8005b86:	d50a      	bpl.n	8005b9e <_printf_i+0xce>
 8005b88:	6805      	ldr	r5, [r0, #0]
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xc8>
 8005b90:	232d      	movs	r3, #45	; 0x2d
 8005b92:	426d      	negs	r5, r5
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	485e      	ldr	r0, [pc, #376]	; (8005d14 <_printf_i+0x244>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e019      	b.n	8005bd2 <_printf_i+0x102>
 8005b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ba2:	6805      	ldr	r5, [r0, #0]
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	bf18      	it	ne
 8005ba8:	b22d      	sxthne	r5, r5
 8005baa:	e7ef      	b.n	8005b8c <_printf_i+0xbc>
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6008      	str	r0, [r1, #0]
 8005bb4:	0628      	lsls	r0, r5, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xec>
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0xf2>
 8005bbc:	0669      	lsls	r1, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xe8>
 8005bc0:	881d      	ldrh	r5, [r3, #0]
 8005bc2:	4854      	ldr	r0, [pc, #336]	; (8005d14 <_printf_i+0x244>)
 8005bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2308      	moveq	r3, #8
 8005bca:	230a      	movne	r3, #10
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd2:	6866      	ldr	r6, [r4, #4]
 8005bd4:	60a6      	str	r6, [r4, #8]
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	bfa2      	ittt	ge
 8005bda:	6821      	ldrge	r1, [r4, #0]
 8005bdc:	f021 0104 	bicge.w	r1, r1, #4
 8005be0:	6021      	strge	r1, [r4, #0]
 8005be2:	b90d      	cbnz	r5, 8005be8 <_printf_i+0x118>
 8005be4:	2e00      	cmp	r6, #0
 8005be6:	d04d      	beq.n	8005c84 <_printf_i+0x1b4>
 8005be8:	4616      	mov	r6, r2
 8005bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bee:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf2:	5dc7      	ldrb	r7, [r0, r7]
 8005bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf8:	462f      	mov	r7, r5
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	d9f4      	bls.n	8005bea <_printf_i+0x11a>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d10b      	bne.n	8005c1c <_printf_i+0x14c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07df      	lsls	r7, r3, #31
 8005c08:	d508      	bpl.n	8005c1c <_printf_i+0x14c>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	bfde      	ittt	le
 8005c12:	2330      	movle	r3, #48	; 0x30
 8005c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c1c:	1b92      	subs	r2, r2, r6
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	464b      	mov	r3, r9
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fee2 	bl	80059f4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14c      	bne.n	8005cce <_printf_i+0x1fe>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b004      	add	sp, #16
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	4835      	ldr	r0, [pc, #212]	; (8005d14 <_printf_i+0x244>)
 8005c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	061f      	lsls	r7, r3, #24
 8005c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c4e:	600e      	str	r6, [r1, #0]
 8005c50:	d514      	bpl.n	8005c7c <_printf_i+0x1ac>
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91d      	cbnz	r5, 8005c66 <_printf_i+0x196>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7b0      	b.n	8005bcc <_printf_i+0xfc>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2378      	movs	r3, #120	; 0x78
 8005c74:	4828      	ldr	r0, [pc, #160]	; (8005d18 <_printf_i+0x248>)
 8005c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c7a:	e7e3      	b.n	8005c44 <_printf_i+0x174>
 8005c7c:	065e      	lsls	r6, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2ad      	uxthmi	r5, r5
 8005c82:	e7e6      	b.n	8005c52 <_printf_i+0x182>
 8005c84:	4616      	mov	r6, r2
 8005c86:	e7bb      	b.n	8005c00 <_printf_i+0x130>
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	6826      	ldr	r6, [r4, #0]
 8005c8c:	6960      	ldr	r0, [r4, #20]
 8005c8e:	1d1d      	adds	r5, r3, #4
 8005c90:	600d      	str	r5, [r1, #0]
 8005c92:	0635      	lsls	r5, r6, #24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0x1cc>
 8005c98:	6018      	str	r0, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0x1d2>
 8005c9c:	0671      	lsls	r1, r6, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0x1c8>
 8005ca0:	8018      	strh	r0, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	4616      	mov	r6, r2
 8005ca8:	e7ba      	b.n	8005c20 <_printf_i+0x150>
 8005caa:	680b      	ldr	r3, [r1, #0]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	600a      	str	r2, [r1, #0]
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7fa fa92 	bl	80001e0 <memchr>
 8005cbc:	b108      	cbz	r0, 8005cc2 <_printf_i+0x1f2>
 8005cbe:	1b80      	subs	r0, r0, r6
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	e7a8      	b.n	8005c20 <_printf_i+0x150>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d0ab      	beq.n	8005c34 <_printf_i+0x164>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d413      	bmi.n	8005d0a <_printf_i+0x23a>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e7a4      	b.n	8005c38 <_printf_i+0x168>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d09b      	beq.n	8005c34 <_printf_i+0x164>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dcf2      	bgt.n	8005cee <_printf_i+0x21e>
 8005d08:	e7eb      	b.n	8005ce2 <_printf_i+0x212>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	f104 0619 	add.w	r6, r4, #25
 8005d10:	e7f5      	b.n	8005cfe <_printf_i+0x22e>
 8005d12:	bf00      	nop
 8005d14:	080061d9 	.word	0x080061d9
 8005d18:	080061ea 	.word	0x080061ea

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <memmove>:
 8005d38:	4288      	cmp	r0, r1
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	eb01 0402 	add.w	r4, r1, r2
 8005d40:	d902      	bls.n	8005d48 <memmove+0x10>
 8005d42:	4284      	cmp	r4, r0
 8005d44:	4623      	mov	r3, r4
 8005d46:	d807      	bhi.n	8005d58 <memmove+0x20>
 8005d48:	1e43      	subs	r3, r0, #1
 8005d4a:	42a1      	cmp	r1, r4
 8005d4c:	d008      	beq.n	8005d60 <memmove+0x28>
 8005d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d56:	e7f8      	b.n	8005d4a <memmove+0x12>
 8005d58:	4402      	add	r2, r0
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	428a      	cmp	r2, r1
 8005d5e:	d100      	bne.n	8005d62 <memmove+0x2a>
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d6a:	e7f7      	b.n	8005d5c <memmove+0x24>

08005d6c <_free_r>:
 8005d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	d048      	beq.n	8005e04 <_free_r+0x98>
 8005d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d76:	9001      	str	r0, [sp, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d7e:	bfb8      	it	lt
 8005d80:	18e4      	addlt	r4, r4, r3
 8005d82:	f000 f8d3 	bl	8005f2c <__malloc_lock>
 8005d86:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <_free_r+0x9c>)
 8005d88:	9801      	ldr	r0, [sp, #4]
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	4615      	mov	r5, r2
 8005d8e:	b933      	cbnz	r3, 8005d9e <_free_r+0x32>
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6014      	str	r4, [r2, #0]
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d9a:	f000 b8cd 	b.w	8005f38 <__malloc_unlock>
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d90b      	bls.n	8005dba <_free_r+0x4e>
 8005da2:	6821      	ldr	r1, [r4, #0]
 8005da4:	1862      	adds	r2, r4, r1
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bf04      	itt	eq
 8005daa:	681a      	ldreq	r2, [r3, #0]
 8005dac:	685b      	ldreq	r3, [r3, #4]
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	bf04      	itt	eq
 8005db2:	1852      	addeq	r2, r2, r1
 8005db4:	6022      	streq	r2, [r4, #0]
 8005db6:	602c      	str	r4, [r5, #0]
 8005db8:	e7ec      	b.n	8005d94 <_free_r+0x28>
 8005dba:	461a      	mov	r2, r3
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b10b      	cbz	r3, 8005dc4 <_free_r+0x58>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d9fa      	bls.n	8005dba <_free_r+0x4e>
 8005dc4:	6811      	ldr	r1, [r2, #0]
 8005dc6:	1855      	adds	r5, r2, r1
 8005dc8:	42a5      	cmp	r5, r4
 8005dca:	d10b      	bne.n	8005de4 <_free_r+0x78>
 8005dcc:	6824      	ldr	r4, [r4, #0]
 8005dce:	4421      	add	r1, r4
 8005dd0:	1854      	adds	r4, r2, r1
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	d1dd      	bne.n	8005d94 <_free_r+0x28>
 8005dd8:	681c      	ldr	r4, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	6053      	str	r3, [r2, #4]
 8005dde:	4421      	add	r1, r4
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	e7d7      	b.n	8005d94 <_free_r+0x28>
 8005de4:	d902      	bls.n	8005dec <_free_r+0x80>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	e7d3      	b.n	8005d94 <_free_r+0x28>
 8005dec:	6825      	ldr	r5, [r4, #0]
 8005dee:	1961      	adds	r1, r4, r5
 8005df0:	428b      	cmp	r3, r1
 8005df2:	bf04      	itt	eq
 8005df4:	6819      	ldreq	r1, [r3, #0]
 8005df6:	685b      	ldreq	r3, [r3, #4]
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	bf04      	itt	eq
 8005dfc:	1949      	addeq	r1, r1, r5
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	6054      	str	r4, [r2, #4]
 8005e02:	e7c7      	b.n	8005d94 <_free_r+0x28>
 8005e04:	b003      	add	sp, #12
 8005e06:	bd30      	pop	{r4, r5, pc}
 8005e08:	200000d4 	.word	0x200000d4

08005e0c <_malloc_r>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	1ccd      	adds	r5, r1, #3
 8005e10:	f025 0503 	bic.w	r5, r5, #3
 8005e14:	3508      	adds	r5, #8
 8005e16:	2d0c      	cmp	r5, #12
 8005e18:	bf38      	it	cc
 8005e1a:	250c      	movcc	r5, #12
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	4606      	mov	r6, r0
 8005e20:	db01      	blt.n	8005e26 <_malloc_r+0x1a>
 8005e22:	42a9      	cmp	r1, r5
 8005e24:	d903      	bls.n	8005e2e <_malloc_r+0x22>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2e:	f000 f87d 	bl	8005f2c <__malloc_lock>
 8005e32:	4921      	ldr	r1, [pc, #132]	; (8005eb8 <_malloc_r+0xac>)
 8005e34:	680a      	ldr	r2, [r1, #0]
 8005e36:	4614      	mov	r4, r2
 8005e38:	b99c      	cbnz	r4, 8005e62 <_malloc_r+0x56>
 8005e3a:	4f20      	ldr	r7, [pc, #128]	; (8005ebc <_malloc_r+0xb0>)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	b923      	cbnz	r3, 8005e4a <_malloc_r+0x3e>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4630      	mov	r0, r6
 8005e44:	f000 f862 	bl	8005f0c <_sbrk_r>
 8005e48:	6038      	str	r0, [r7, #0]
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f85d 	bl	8005f0c <_sbrk_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d123      	bne.n	8005e9e <_malloc_r+0x92>
 8005e56:	230c      	movs	r3, #12
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f000 f86c 	bl	8005f38 <__malloc_unlock>
 8005e60:	e7e3      	b.n	8005e2a <_malloc_r+0x1e>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	1b5b      	subs	r3, r3, r5
 8005e66:	d417      	bmi.n	8005e98 <_malloc_r+0x8c>
 8005e68:	2b0b      	cmp	r3, #11
 8005e6a:	d903      	bls.n	8005e74 <_malloc_r+0x68>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	441c      	add	r4, r3
 8005e70:	6025      	str	r5, [r4, #0]
 8005e72:	e004      	b.n	8005e7e <_malloc_r+0x72>
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	42a2      	cmp	r2, r4
 8005e78:	bf0c      	ite	eq
 8005e7a:	600b      	streq	r3, [r1, #0]
 8005e7c:	6053      	strne	r3, [r2, #4]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f000 f85a 	bl	8005f38 <__malloc_unlock>
 8005e84:	f104 000b 	add.w	r0, r4, #11
 8005e88:	1d23      	adds	r3, r4, #4
 8005e8a:	f020 0007 	bic.w	r0, r0, #7
 8005e8e:	1ac2      	subs	r2, r0, r3
 8005e90:	d0cc      	beq.n	8005e2c <_malloc_r+0x20>
 8005e92:	1a1b      	subs	r3, r3, r0
 8005e94:	50a3      	str	r3, [r4, r2]
 8005e96:	e7c9      	b.n	8005e2c <_malloc_r+0x20>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	6864      	ldr	r4, [r4, #4]
 8005e9c:	e7cc      	b.n	8005e38 <_malloc_r+0x2c>
 8005e9e:	1cc4      	adds	r4, r0, #3
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d0e3      	beq.n	8005e70 <_malloc_r+0x64>
 8005ea8:	1a21      	subs	r1, r4, r0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 f82e 	bl	8005f0c <_sbrk_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d1dd      	bne.n	8005e70 <_malloc_r+0x64>
 8005eb4:	e7cf      	b.n	8005e56 <_malloc_r+0x4a>
 8005eb6:	bf00      	nop
 8005eb8:	200000d4 	.word	0x200000d4
 8005ebc:	200000d8 	.word	0x200000d8

08005ec0 <_realloc_r>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	460e      	mov	r6, r1
 8005ec8:	b921      	cbnz	r1, 8005ed4 <_realloc_r+0x14>
 8005eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ece:	4611      	mov	r1, r2
 8005ed0:	f7ff bf9c 	b.w	8005e0c <_malloc_r>
 8005ed4:	b922      	cbnz	r2, 8005ee0 <_realloc_r+0x20>
 8005ed6:	f7ff ff49 	bl	8005d6c <_free_r>
 8005eda:	4625      	mov	r5, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee0:	f000 f830 	bl	8005f44 <_malloc_usable_size_r>
 8005ee4:	42a0      	cmp	r0, r4
 8005ee6:	d20f      	bcs.n	8005f08 <_realloc_r+0x48>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4638      	mov	r0, r7
 8005eec:	f7ff ff8e 	bl	8005e0c <_malloc_r>
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0f2      	beq.n	8005edc <_realloc_r+0x1c>
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4622      	mov	r2, r4
 8005efa:	f7ff ff0f 	bl	8005d1c <memcpy>
 8005efe:	4631      	mov	r1, r6
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff ff33 	bl	8005d6c <_free_r>
 8005f06:	e7e9      	b.n	8005edc <_realloc_r+0x1c>
 8005f08:	4635      	mov	r5, r6
 8005f0a:	e7e7      	b.n	8005edc <_realloc_r+0x1c>

08005f0c <_sbrk_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d06      	ldr	r5, [pc, #24]	; (8005f28 <_sbrk_r+0x1c>)
 8005f10:	2300      	movs	r3, #0
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	f7fa fd74 	bl	8000a04 <_sbrk>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_sbrk_r+0x1a>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_sbrk_r+0x1a>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	2000033c 	.word	0x2000033c

08005f2c <__malloc_lock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_lock+0x8>)
 8005f2e:	f000 b811 	b.w	8005f54 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20000344 	.word	0x20000344

08005f38 <__malloc_unlock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_unlock+0x8>)
 8005f3a:	f000 b80c 	b.w	8005f56 <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000344 	.word	0x20000344

08005f44 <_malloc_usable_size_r>:
 8005f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f48:	1f18      	subs	r0, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfbc      	itt	lt
 8005f4e:	580b      	ldrlt	r3, [r1, r0]
 8005f50:	18c0      	addlt	r0, r0, r3
 8005f52:	4770      	bx	lr

08005f54 <__retarget_lock_acquire_recursive>:
 8005f54:	4770      	bx	lr

08005f56 <__retarget_lock_release_recursive>:
 8005f56:	4770      	bx	lr

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
