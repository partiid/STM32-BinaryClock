
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a41  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001707  00000000  00000000  00029a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0e4  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be88  00000000  00000000  0004af14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc18a  00000000  00000000  00056d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00112f26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018fc  00000000  00000000  00112f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003964 	.word	0x08003964

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003964 	.word	0x08003964

080001d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b56      	ldr	r3, [pc, #344]	; (8000344 <MX_GPIO_Init+0x170>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a55      	ldr	r2, [pc, #340]	; (8000344 <MX_GPIO_Init+0x170>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b53      	ldr	r3, [pc, #332]	; (8000344 <MX_GPIO_Init+0x170>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b50      	ldr	r3, [pc, #320]	; (8000344 <MX_GPIO_Init+0x170>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a4f      	ldr	r2, [pc, #316]	; (8000344 <MX_GPIO_Init+0x170>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b4d      	ldr	r3, [pc, #308]	; (8000344 <MX_GPIO_Init+0x170>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b4a      	ldr	r3, [pc, #296]	; (8000344 <MX_GPIO_Init+0x170>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a49      	ldr	r2, [pc, #292]	; (8000344 <MX_GPIO_Init+0x170>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b47      	ldr	r3, [pc, #284]	; (8000344 <MX_GPIO_Init+0x170>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b44      	ldr	r3, [pc, #272]	; (8000344 <MX_GPIO_Init+0x170>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a43      	ldr	r2, [pc, #268]	; (8000344 <MX_GPIO_Init+0x170>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b41      	ldr	r3, [pc, #260]	; (8000344 <MX_GPIO_Init+0x170>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b3e      	ldr	r3, [pc, #248]	; (8000344 <MX_GPIO_Init+0x170>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a3d      	ldr	r2, [pc, #244]	; (8000344 <MX_GPIO_Init+0x170>)
 8000250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000254:	6153      	str	r3, [r2, #20]
 8000256:	4b3b      	ldr	r3, [pc, #236]	; (8000344 <MX_GPIO_Init+0x170>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2120      	movs	r1, #32
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f000 fe61 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIA_GPIO_Port, BIA_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	4834      	ldr	r0, [pc, #208]	; (8000348 <MX_GPIO_Init+0x174>)
 8000276:	f000 fe5b 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800027a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800027e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000280:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	4619      	mov	r1, r3
 8000290:	482d      	ldr	r0, [pc, #180]	; (8000348 <MX_GPIO_Init+0x174>)
 8000292:	f000 fbbb 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000296:	f641 63ff 	movw	r3, #7935	; 0x1eff
 800029a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800029c:	2303      	movs	r3, #3
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4619      	mov	r1, r3
 80002aa:	4827      	ldr	r0, [pc, #156]	; (8000348 <MX_GPIO_Init+0x174>)
 80002ac:	f000 fbae 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002b0:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 80002b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b6:	2303      	movs	r3, #3
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	f107 0314 	add.w	r3, r7, #20
 80002c2:	4619      	mov	r1, r3
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c8:	f000 fba0 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002cc:	2320      	movs	r3, #32
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d8:	2300      	movs	r3, #0
 80002da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4619      	mov	r1, r3
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fb91 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80002ea:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80002ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f0:	2303      	movs	r3, #3
 80002f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f8:	f107 0314 	add.w	r3, r7, #20
 80002fc:	4619      	mov	r1, r3
 80002fe:	4813      	ldr	r0, [pc, #76]	; (800034c <MX_GPIO_Init+0x178>)
 8000300:	f000 fb84 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BIA_Pin;
 8000304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2300      	movs	r3, #0
 8000314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIA_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <MX_GPIO_Init+0x174>)
 800031e:	f000 fb75 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000322:	2304      	movs	r3, #4
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000326:	2303      	movs	r3, #3
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4619      	mov	r1, r3
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <MX_GPIO_Init+0x17c>)
 8000336:	f000 fb69 	bl	8000a0c <HAL_GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3728      	adds	r7, #40	; 0x28
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800
 800034c:	48000400 	.word	0x48000400
 8000350:	48000c00 	.word	0x48000c00

08000354 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	x1hzTime++;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <delay_1hz+0x30>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <delay_1hz+0x30>)
 8000360:	6013      	str	r3, [r2, #0]
	if( x1hzTime >= 833.33){
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <delay_1hz+0x30>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f240 3241 	movw	r2, #833	; 0x341
 800036a:	4293      	cmp	r3, r2
 800036c:	d905      	bls.n	800037a <delay_1hz+0x26>
		x1hz = 1;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <delay_1hz+0x34>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <delay_1hz+0x30>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
	}
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	20000028 	.word	0x20000028
 8000388:	20000030 	.word	0x20000030

0800038c <delay_4hz>:

void delay_4hz(){
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	x4hzTime++;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <delay_4hz+0x2c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <delay_4hz+0x2c>)
 8000398:	6013      	str	r3, [r2, #0]

	if(x4hzTime >= 250){
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <delay_4hz+0x2c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2bf9      	cmp	r3, #249	; 0xf9
 80003a0:	d905      	bls.n	80003ae <delay_4hz+0x22>
		x4hz = 1;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <delay_4hz+0x30>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <delay_4hz+0x2c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
	}

}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	2000002c 	.word	0x2000002c
 80003bc:	20000031 	.word	0x20000031

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 f9b2 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f842 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f7ff ff02 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003d0:	f000 f910 	bl	80005f4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	4819      	ldr	r0, [pc, #100]	; (8000440 <main+0x80>)
 80003da:	f000 fd83 	bl	8000ee4 <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10f      	bne.n	8000404 <main+0x44>

		  buttonMode = !buttonMode;
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <main+0x84>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf0c      	ite	eq
 80003ec:	2301      	moveq	r3, #1
 80003ee:	2300      	movne	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <main+0x84>)
 80003f6:	801a      	strh	r2, [r3, #0]

		  x1hz = 0;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <main+0x88>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
		  x4hz = 0;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <main+0x8c>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
	  }

	  if(buttonMode == 1){
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <main+0x84>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d10c      	bne.n	8000426 <main+0x66>
		  if(x1hz == 1){
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <main+0x88>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d1df      	bne.n	80003d4 <main+0x14>
			  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <main+0x80>)
 800041a:	f000 fdb9 	bl	8000f90 <HAL_GPIO_TogglePin>
			  x1hz = 0;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <main+0x88>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	e7d6      	b.n	80003d4 <main+0x14>
		  }


	  } else {
		  if(x4hz == 1){
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <main+0x8c>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d1d2      	bne.n	80003d4 <main+0x14>
			  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4803      	ldr	r0, [pc, #12]	; (8000440 <main+0x80>)
 8000434:	f000 fdac 	bl	8000f90 <HAL_GPIO_TogglePin>
			  x4hz = 0;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <main+0x8c>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800043e:	e7c9      	b.n	80003d4 <main+0x14>
 8000440:	48000800 	.word	0x48000800
 8000444:	20000032 	.word	0x20000032
 8000448:	20000030 	.word	0x20000030
 800044c:	20000031 	.word	0x20000031

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0a6      	sub	sp, #152	; 0x98
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f003 fa78 	bl	8003954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2258      	movs	r2, #88	; 0x58
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f003 fa6a 	bl	8003954 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000480:	2302      	movs	r3, #2
 8000482:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000488:	2310      	movs	r3, #16
 800048a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fd96 	bl	8000fe0 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f827 	bl	800050c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2302      	movs	r3, #2
 80004c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004d8:	2102      	movs	r1, #2
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 fdf2 	bl	80020c4 <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004e6:	f000 f811 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 f8bf 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000500:	f000 f804 	bl	800050c <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3798      	adds	r7, #152	; 0x98
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>

08000516 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x44>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x44>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x44>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x44>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_MspInit+0x44>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_MspInit+0x44>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000562:	2007      	movs	r0, #7
 8000564:	f000 f9fa 	bl	800095c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 80005c0:	f7ff fec8 	bl	8000354 <delay_1hz>
	delay_4hz();
 80005c4:	f7ff fee2 	bl	800038c <delay_4hz>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c8:	f000 f8f6 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	f002 fc16 	bl	8002e68 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f7ff ff63 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000034 	.word	0x20000034
 8000650:	40004400 	.word	0x40004400

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_UART_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d128      	bne.n	80006c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <HAL_UART_MspInit+0x80>)
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_UART_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006a6:	230c      	movs	r3, #12
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006b6:	2307      	movs	r3, #7
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 f9a2 	bl	8000a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40004400 	.word	0x40004400
 80006d4:	40021000 	.word	0x40021000

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0b      	ldr	r4, [pc, #44]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000702:	f7ff ff65 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f003 f901 	bl	800390c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fe59 	bl	80003c0 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08003b04 	.word	0x08003b04
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	200000bc 	.word	0x200000bc

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f90d 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff fef0 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f93c 	bl	80009f4 <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f902 	bl	800099c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_IncTick+0x20>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_IncTick+0x24>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	200000b8 	.word	0x200000b8

080007e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	200000b8 	.word	0x200000b8

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff8e 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d00f      	beq.n	800098a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b06      	cmp	r3, #6
 800096e:	d00c      	beq.n	800098a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d009      	beq.n	800098a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b04      	cmp	r3, #4
 800097a:	d006      	beq.n	800098a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d003      	beq.n	800098a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000982:	21ac      	movs	r1, #172	; 0xac
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000986:	f7ff fdc6 	bl	8000516 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff34 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	0800397c 	.word	0x0800397c

0800099c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d903      	bls.n	80009bc <HAL_NVIC_SetPriority+0x20>
 80009b4:	21c4      	movs	r1, #196	; 0xc4
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <HAL_NVIC_SetPriority+0x54>)
 80009b8:	f7ff fdad 	bl	8000516 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d903      	bls.n	80009ca <HAL_NVIC_SetPriority+0x2e>
 80009c2:	21c5      	movs	r1, #197	; 0xc5
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <HAL_NVIC_SetPriority+0x54>)
 80009c6:	f7ff fda6 	bl	8000516 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ca:	f7ff ff39 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff ff6b 	bl	80008b0 <NVIC_EncodePriority>
 80009da:	4602      	mov	r2, r0
 80009dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff3a 	bl	800085c <__NVIC_SetPriority>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	0800397c 	.word	0x0800397c

080009f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff8b 	bl	8000918 <SysTick_Config>
 8000a02:	4603      	mov	r3, r0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a20:	d01f      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <HAL_GPIO_Init+0x104>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d01b      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a39      	ldr	r2, [pc, #228]	; (8000b14 <HAL_GPIO_Init+0x108>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d017      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a38      	ldr	r2, [pc, #224]	; (8000b18 <HAL_GPIO_Init+0x10c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d013      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a37      	ldr	r2, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x110>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d00f      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a36      	ldr	r2, [pc, #216]	; (8000b20 <HAL_GPIO_Init+0x114>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d00b      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a35      	ldr	r2, [pc, #212]	; (8000b24 <HAL_GPIO_Init+0x118>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d007      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <HAL_GPIO_Init+0x11c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x56>
 8000a5a:	21b2      	movs	r1, #178	; 0xb2
 8000a5c:	4833      	ldr	r0, [pc, #204]	; (8000b2c <HAL_GPIO_Init+0x120>)
 8000a5e:	f7ff fd5a 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <HAL_GPIO_Init+0x6c>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	0c1b      	lsrs	r3, r3, #16
 8000a72:	041b      	lsls	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x74>
 8000a78:	21b3      	movs	r1, #179	; 0xb3
 8000a7a:	482c      	ldr	r0, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x120>)
 8000a7c:	f7ff fd4b 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 821c 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	f000 8217 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b11      	cmp	r3, #17
 8000a9a:	f000 8212 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	f000 820d 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b12      	cmp	r3, #18
 8000aae:	f000 8208 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000aba:	f000 8202 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000ac6:	f000 81fc 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000ad2:	f000 81f6 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000ade:	f000 81f0 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000aea:	f000 81ea 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000af6:	f000 81e4 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	f000 81df 	beq.w	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000b04:	21b4      	movs	r1, #180	; 0xb4
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <HAL_GPIO_Init+0x120>)
 8000b08:	f7ff fd05 	bl	8000516 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	e1d9      	b.n	8000ec2 <HAL_GPIO_Init+0x4b6>
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	48001000 	.word	0x48001000
 8000b20:	48001400 	.word	0x48001400
 8000b24:	48001800 	.word	0x48001800
 8000b28:	48001c00 	.word	0x48001c00
 8000b2c:	080039b8 	.word	0x080039b8
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 81ba 	beq.w	8000ebc <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d005      	beq.n	8000b60 <HAL_GPIO_Init+0x154>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d140      	bne.n	8000be2 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00b      	beq.n	8000b80 <HAL_GPIO_Init+0x174>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x174>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x174>
 8000b78:	21c3      	movs	r1, #195	; 0xc3
 8000b7a:	4894      	ldr	r0, [pc, #592]	; (8000dcc <HAL_GPIO_Init+0x3c0>)
 8000b7c:	f7ff fccb 	bl	8000516 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d027      	beq.n	8000c3e <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <HAL_GPIO_Init+0x202>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x202>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x202>
 8000c06:	21d4      	movs	r1, #212	; 0xd4
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_GPIO_Init+0x3c0>)
 8000c0a:	f7ff fc84 	bl	8000516 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d157      	bne.n	8000cfa <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c50:	d01f      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a5e      	ldr	r2, [pc, #376]	; (8000dd0 <HAL_GPIO_Init+0x3c4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d01b      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a5d      	ldr	r2, [pc, #372]	; (8000dd4 <HAL_GPIO_Init+0x3c8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d017      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a5c      	ldr	r2, [pc, #368]	; (8000dd8 <HAL_GPIO_Init+0x3cc>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a5b      	ldr	r2, [pc, #364]	; (8000ddc <HAL_GPIO_Init+0x3d0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00f      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a5a      	ldr	r2, [pc, #360]	; (8000de0 <HAL_GPIO_Init+0x3d4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00b      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a59      	ldr	r2, [pc, #356]	; (8000de4 <HAL_GPIO_Init+0x3d8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d007      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <HAL_GPIO_Init+0x3dc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
 8000c8a:	21e2      	movs	r1, #226	; 0xe2
 8000c8c:	484f      	ldr	r0, [pc, #316]	; (8000dcc <HAL_GPIO_Init+0x3c0>)
 8000c8e:	f7ff fc42 	bl	8000516 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b0c      	cmp	r3, #12
 8000c98:	d90b      	bls.n	8000cb2 <HAL_GPIO_Init+0x2a6>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b0e      	cmp	r3, #14
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x2a6>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x2a6>
 8000caa:	21e3      	movs	r1, #227	; 0xe3
 8000cac:	4847      	ldr	r0, [pc, #284]	; (8000dcc <HAL_GPIO_Init+0x3c0>)
 8000cae:	f7ff fc32 	bl	8000516 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0203 	and.w	r2, r3, #3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80c0 	beq.w	8000ebc <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_GPIO_Init+0x3e0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <HAL_GPIO_Init+0x3e0>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_GPIO_Init+0x3e0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <HAL_GPIO_Init+0x3e4>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7e:	d039      	beq.n	8000df4 <HAL_GPIO_Init+0x3e8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <HAL_GPIO_Init+0x3c4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01f      	beq.n	8000dc8 <HAL_GPIO_Init+0x3bc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_GPIO_Init+0x3c8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x3b8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_GPIO_Init+0x3cc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x3b4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_GPIO_Init+0x3d0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x3b0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x3d4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x3ac>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x3d8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x3a8>
 8000db0:	2306      	movs	r3, #6
 8000db2:	e020      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000db4:	2307      	movs	r3, #7
 8000db6:	e01e      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e01c      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e01a      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e018      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e016      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e014      	b.n	8000df6 <HAL_GPIO_Init+0x3ea>
 8000dcc:	080039b8 	.word	0x080039b8
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	48001000 	.word	0x48001000
 8000de0:	48001400 	.word	0x48001400
 8000de4:	48001800 	.word	0x48001800
 8000de8:	48001c00 	.word	0x48001c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	2300      	movs	r3, #0
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e06:	4935      	ldr	r1, [pc, #212]	; (8000edc <HAL_GPIO_Init+0x4d0>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e38:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_GPIO_Init+0x4d4>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f ae2f 	bne.w	8000b30 <HAL_GPIO_Init+0x124>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <HAL_GPIO_ReadPin+0x1c>
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	041b      	lsls	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <HAL_GPIO_ReadPin+0x26>
 8000f00:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <HAL_GPIO_ReadPin+0x48>)
 8000f06:	f7ff fb06 	bl	8000516 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e001      	b.n	8000f20 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	080039b8 	.word	0x080039b8

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HAL_GPIO_WritePin+0x20>
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <HAL_GPIO_WritePin+0x2a>
 8000f50:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <HAL_GPIO_WritePin+0x5c>)
 8000f56:	f7ff fade 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000f5a:	787b      	ldrb	r3, [r7, #1]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_WritePin+0x40>
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d004      	beq.n	8000f70 <HAL_GPIO_WritePin+0x40>
 8000f66:	f240 11a5 	movw	r1, #421	; 0x1a5
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <HAL_GPIO_WritePin+0x5c>)
 8000f6c:	f7ff fad3 	bl	8000516 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	080039b8 	.word	0x080039b8

08000f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <HAL_GPIO_TogglePin+0x1c>
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d004      	beq.n	8000fb6 <HAL_GPIO_TogglePin+0x26>
 8000fac:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000fb0:	480a      	ldr	r0, [pc, #40]	; (8000fdc <HAL_GPIO_TogglePin+0x4c>)
 8000fb2:	f7ff fab0 	bl	8000516 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbc:	887a      	ldrh	r2, [r7, #2]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	041a      	lsls	r2, r3, #16
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	400b      	ands	r3, r1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	080039b8 	.word	0x080039b8

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f001 b85e 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x66>
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d119      	bne.n	8001046 <HAL_RCC_OscConfig+0x66>
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d112      	bne.n	8001046 <HAL_RCC_OscConfig+0x66>
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10b      	bne.n	8001046 <HAL_RCC_OscConfig+0x66>
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <HAL_RCC_OscConfig+0x66>
 800103c:	f240 114b 	movw	r1, #331	; 0x14b
 8001040:	48be      	ldr	r0, [pc, #760]	; (800133c <HAL_RCC_OscConfig+0x35c>)
 8001042:	f7ff fa68 	bl	8000516 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 8178 	beq.w	8001346 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d010      	beq.n	8001082 <HAL_RCC_OscConfig+0xa2>
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d00a      	beq.n	8001082 <HAL_RCC_OscConfig+0xa2>
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001076:	d004      	beq.n	8001082 <HAL_RCC_OscConfig+0xa2>
 8001078:	f240 1151 	movw	r1, #337	; 0x151
 800107c:	48af      	ldr	r0, [pc, #700]	; (800133c <HAL_RCC_OscConfig+0x35c>)
 800107e:	f7ff fa4a 	bl	8000516 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001082:	4baf      	ldr	r3, [pc, #700]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b04      	cmp	r3, #4
 800108c:	d00c      	beq.n	80010a8 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800108e:	4bac      	ldr	r3, [pc, #688]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d159      	bne.n	800114e <HAL_RCC_OscConfig+0x16e>
 800109a:	4ba9      	ldr	r3, [pc, #676]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a6:	d152      	bne.n	800114e <HAL_RCC_OscConfig+0x16e>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <HAL_RCC_OscConfig+0xfa>
 80010d4:	4b9a      	ldr	r3, [pc, #616]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x126>
 80010da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001102:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800110e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001112:	fa92 f2a2 	rbit	r2, r2
 8001116:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800111a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800111e:	fab2 f282 	clz	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f002 021f 	and.w	r2, r2, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8104 	beq.w	8001344 <HAL_RCC_OscConfig+0x364>
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 80fe 	bne.w	8001344 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	f000 bfb4 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x188>
 800115a:	4b79      	ldr	r3, [pc, #484]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a78      	ldr	r2, [pc, #480]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e030      	b.n	80011ca <HAL_RCC_OscConfig+0x1ea>
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x1ac>
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x1ea>
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001196:	d10c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x1d2>
 8001198:	4b69      	ldr	r3, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a68      	ldr	r2, [pc, #416]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b66      	ldr	r3, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a65      	ldr	r2, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e00b      	b.n	80011ca <HAL_RCC_OscConfig+0x1ea>
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a62      	ldr	r2, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b60      	ldr	r3, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5f      	ldr	r2, [pc, #380]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d059      	beq.n	8001288 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb04 	bl	80007e0 <HAL_GetTick>
 80011d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff faff 	bl	80007e0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d902      	bls.n	80011f4 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f000 bf61 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001208:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x246>
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x272>
 8001226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800123a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001242:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001256:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800125a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001266:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800126a:	fab2 f282 	clz	r2, r2
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f042 0220 	orr.w	r2, r2, #32
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f002 021f 	and.w	r2, r2, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ab      	beq.n	80011de <HAL_RCC_OscConfig+0x1fe>
 8001286:	e05e      	b.n	8001346 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff faaa 	bl	80007e0 <HAL_GetTick>
 800128c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001292:	f7ff faa5 	bl	80007e0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d902      	bls.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f000 bf07 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x2fa>
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x326>
 80012da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_OscConfig+0x360>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800130a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800130e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001312:	fa92 f2a2 	rbit	r2, r2
 8001316:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800131a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800131e:	fab2 f282 	clz	r2, r2
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f042 0220 	orr.w	r2, r2, #32
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ab      	bne.n	8001292 <HAL_RCC_OscConfig+0x2b2>
 800133a:	e004      	b.n	8001346 <HAL_RCC_OscConfig+0x366>
 800133c:	080039f4 	.word	0x080039f4
 8001340:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 818e 	beq.w	8001672 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <HAL_RCC_OscConfig+0x394>
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d004      	beq.n	8001374 <HAL_RCC_OscConfig+0x394>
 800136a:	f240 1189 	movw	r1, #393	; 0x189
 800136e:	48a8      	ldr	r0, [pc, #672]	; (8001610 <HAL_RCC_OscConfig+0x630>)
 8001370:	f7ff f8d1 	bl	8000516 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b1f      	cmp	r3, #31
 800137c:	d904      	bls.n	8001388 <HAL_RCC_OscConfig+0x3a8>
 800137e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001382:	48a3      	ldr	r0, [pc, #652]	; (8001610 <HAL_RCC_OscConfig+0x630>)
 8001384:	f7ff f8c7 	bl	8000516 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001388:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00c      	beq.n	80013ae <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001394:	4b9f      	ldr	r3, [pc, #636]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d16d      	bne.n	800147c <HAL_RCC_OscConfig+0x49c>
 80013a0:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ac:	d166      	bne.n	800147c <HAL_RCC_OscConfig+0x49c>
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x3fe>
 80013d8:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0x426>
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001402:	4b84      	ldr	r3, [pc, #528]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	2202      	movs	r2, #2
 8001408:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800140c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001410:	fa92 f2a2 	rbit	r2, r2
 8001414:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001418:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800141c:	fab2 f282 	clz	r2, r2
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	f042 0220 	orr.w	r2, r2, #32
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f002 021f 	and.w	r2, r2, #31
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_RCC_OscConfig+0x468>
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d002      	beq.n	8001448 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 be37 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	21f8      	movs	r1, #248	; 0xf8
 8001458:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001460:	fa91 f1a1 	rbit	r1, r1
 8001464:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001468:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800146c:	fab1 f181 	clz	r1, r1
 8001470:	b2c9      	uxtb	r1, r1
 8001472:	408b      	lsls	r3, r1
 8001474:	4967      	ldr	r1, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	e0fa      	b.n	8001672 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8085 	beq.w	8001592 <HAL_RCC_OscConfig+0x5b2>
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800149a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	2301      	movs	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff f994 	bl	80007e0 <HAL_GetTick>
 80014b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff f98f 	bl	80007e0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d902      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f000 bdf1 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x524>
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800151c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2202      	movs	r2, #2
 800152e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001532:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800153e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0af      	beq.n	80014be <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	21f8      	movs	r1, #248	; 0xf8
 800156e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001576:	fa91 f1a1 	rbit	r1, r1
 800157a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800157e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001582:	fab1 f181 	clz	r1, r1
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	408b      	lsls	r3, r1
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e06f      	b.n	8001672 <HAL_RCC_OscConfig+0x692>
 8001592:	2301      	movs	r3, #1
 8001594:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	461a      	mov	r2, r3
 80015ba:	2300      	movs	r3, #0
 80015bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f90f 	bl	80007e0 <HAL_GetTick>
 80015c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff f90a 	bl	80007e0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d902      	bls.n	80015de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	f000 bd6c 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_RCC_OscConfig+0x638>
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e018      	b.n	8001640 <HAL_RCC_OscConfig+0x660>
 800160e:	bf00      	nop
 8001610:	080039f4 	.word	0x080039f4
 8001614:	40021000 	.word	0x40021000
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001630:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800163c:	4bc0      	ldr	r3, [pc, #768]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	2202      	movs	r2, #2
 8001642:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001646:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800164a:	fa92 f2a2 	rbit	r2, r2
 800164e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001652:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1aa      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80e7 	beq.w	8001850 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_OscConfig+0x6c0>
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d004      	beq.n	80016a0 <HAL_RCC_OscConfig+0x6c0>
 8001696:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800169a:	48aa      	ldr	r0, [pc, #680]	; (8001944 <HAL_RCC_OscConfig+0x964>)
 800169c:	f7fe ff3b 	bl	8000516 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d066      	beq.n	8001778 <HAL_RCC_OscConfig+0x798>
 80016aa:	2301      	movs	r3, #1
 80016ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b9f      	ldr	r3, [pc, #636]	; (8001948 <HAL_RCC_OscConfig+0x968>)
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	461a      	mov	r2, r3
 80016d0:	2301      	movs	r3, #1
 80016d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff f884 	bl	80007e0 <HAL_GetTick>
 80016d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff f87f 	bl	80007e0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d902      	bls.n	80016f4 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	f000 bce1 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001736:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001738:	4b81      	ldr	r3, [pc, #516]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 800173a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001740:	2102      	movs	r1, #2
 8001742:	6019      	str	r1, [r3, #0]
 8001744:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f1a3 	rbit	r1, r3
 800174e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001752:	6019      	str	r1, [r3, #0]
  return result;
 8001754:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0b3      	beq.n	80016de <HAL_RCC_OscConfig+0x6fe>
 8001776:	e06b      	b.n	8001850 <HAL_RCC_OscConfig+0x870>
 8001778:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800178e:	601a      	str	r2, [r3, #0]
  return result;
 8001790:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001794:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x968>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f819 	bl	80007e0 <HAL_GetTick>
 80017ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff f814 	bl	80007e0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bc76 	b.w	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80017ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017ce:	2202      	movs	r2, #2
 80017d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001816:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800181a:	2102      	movs	r1, #2
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f1a3 	rbit	r1, r3
 8001828:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800182c:	6019      	str	r1, [r3, #0]
  return result;
 800182e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1b1      	bne.n	80017b4 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8171 	beq.w	8001b42 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00e      	beq.n	800188e <HAL_RCC_OscConfig+0x8ae>
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d009      	beq.n	800188e <HAL_RCC_OscConfig+0x8ae>
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d004      	beq.n	800188e <HAL_RCC_OscConfig+0x8ae>
 8001884:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001888:	482e      	ldr	r0, [pc, #184]	; (8001944 <HAL_RCC_OscConfig+0x964>)
 800188a:	f7fe fe44 	bl	8000516 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_OscConfig+0x96c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11a      	bne.n	8001902 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_RCC_OscConfig+0x96c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_RCC_OscConfig+0x96c>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d8:	f7fe ff82 	bl	80007e0 <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7fe ff7d 	bl	80007e0 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e3df      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x96c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ef      	beq.n	80018e2 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x93a>
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e038      	b.n	800198c <HAL_RCC_OscConfig+0x9ac>
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d115      	bne.n	8001950 <HAL_RCC_OscConfig+0x970>
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a02      	ldr	r2, [pc, #8]	; (8001940 <HAL_RCC_OscConfig+0x960>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e026      	b.n	800198c <HAL_RCC_OscConfig+0x9ac>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	080039f4 	.word	0x080039f4
 8001948:	10908120 	.word	0x10908120
 800194c:	40007000 	.word	0x40007000
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x994>
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x9ac>
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d064      	beq.n	8001a60 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7fe ff23 	bl	80007e0 <HAL_GetTick>
 800199a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7fe ff1e 	bl	80007e0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e37e      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
 80019b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019e6:	601a      	str	r2, [r3, #0]
  return result;
 80019e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0xa28>
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	e00d      	b.n	8001a24 <HAL_RCC_OscConfig+0xa44>
 8001a08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a28:	2102      	movs	r1, #2
 8001a2a:	6011      	str	r1, [r2, #0]
 8001a2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fa92 f1a2 	rbit	r1, r2
 8001a36:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a3a:	6011      	str	r1, [r2, #0]
  return result;
 8001a3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0a0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x9c0>
 8001a5e:	e066      	b.n	8001b2e <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7fe febe 	bl	80007e0 <HAL_GetTick>
 8001a64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7fe feb9 	bl	80007e0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e319      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
 8001a82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a86:	2202      	movs	r2, #2
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ab0:	601a      	str	r2, [r3, #0]
  return result;
 8001ab2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ab6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xaf8>
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <HAL_RCC_OscConfig+0xaf4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	e010      	b.n	8001af4 <HAL_RCC_OscConfig+0xb14>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	4bad      	ldr	r3, [pc, #692]	; (8001da8 <HAL_RCC_OscConfig+0xdc8>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001af8:	2102      	movs	r1, #2
 8001afa:	6011      	str	r1, [r2, #0]
 8001afc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	fa92 f1a2 	rbit	r1, r2
 8001b06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b0a:	6011      	str	r1, [r2, #0]
  return result;
 8001b0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d19d      	bne.n	8001a6a <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b9c      	ldr	r3, [pc, #624]	; (8001da8 <HAL_RCC_OscConfig+0xdc8>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a9b      	ldr	r2, [pc, #620]	; (8001da8 <HAL_RCC_OscConfig+0xdc8>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <HAL_RCC_OscConfig+0xb8a>
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_OscConfig+0xb8a>
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d004      	beq.n	8001b6a <HAL_RCC_OscConfig+0xb8a>
 8001b60:	f240 213a 	movw	r1, #570	; 0x23a
 8001b64:	4891      	ldr	r0, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0xdcc>)
 8001b66:	f7fe fcd6 	bl	8000516 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 829f 	beq.w	80020b4 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b76:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0xdc8>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	f000 826c 	beq.w	800205c <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	f040 81e4 	bne.w	8001f58 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_RCC_OscConfig+0xbd2>
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d004      	beq.n	8001bb2 <HAL_RCC_OscConfig+0xbd2>
 8001ba8:	f240 2143 	movw	r1, #579	; 0x243
 8001bac:	487f      	ldr	r0, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0xdcc>)
 8001bae:	f7fe fcb2 	bl	8000516 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d058      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bc6:	d052      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bd2:	d04c      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001bde:	d046      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bea:	d040      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001bf6:	d03a      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001c02:	d034      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001c0e:	d02e      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c1a:	d028      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001c26:	d022      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001c3e:	d016      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001c56:	d00a      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001c62:	d004      	beq.n	8001c6e <HAL_RCC_OscConfig+0xc8e>
 8001c64:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001c68:	4850      	ldr	r0, [pc, #320]	; (8001dac <HAL_RCC_OscConfig+0xdcc>)
 8001c6a:	f7fe fc54 	bl	8000516 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d04f      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d04a      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d045      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d040      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d03b      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d031      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d02c      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d027      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	d022      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	d01d      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b0b      	cmp	r3, #11
 8001ce4:	d018      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2b0d      	cmp	r3, #13
 8001cf8:	d00e      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b0e      	cmp	r3, #14
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	d004      	beq.n	8001d18 <HAL_RCC_OscConfig+0xd38>
 8001d0e:	f240 2146 	movw	r1, #582	; 0x246
 8001d12:	4826      	ldr	r0, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0xdcc>)
 8001d14:	f7fe fbff 	bl	8000516 <assert_failed>
 8001d18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d30:	601a      	str	r2, [r3, #0]
  return result;
 8001d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d36:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fd47 	bl	80007e0 <HAL_GetTick>
 8001d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7fe fd42 	bl	80007e0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1a4      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
 8001d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d84:	601a      	str	r2, [r3, #0]
  return result;
 8001d86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0xdd0>
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <HAL_RCC_OscConfig+0xdc8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e020      	b.n	8001de8 <HAL_RCC_OscConfig+0xe08>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080039f4 	.word	0x080039f4
 8001db0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4bb6      	ldr	r3, [pc, #728]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df0:	6011      	str	r1, [r2, #0]
 8001df2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fa92 f1a2 	rbit	r1, r2
 8001dfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e00:	6011      	str	r1, [r2, #0]
  return result;
 8001e02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d199      	bne.n	8001d58 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e24:	4ba6      	ldr	r3, [pc, #664]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	f023 020f 	bic.w	r2, r3, #15
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	49a3      	ldr	r1, [pc, #652]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001e38:	4ba1      	ldr	r3, [pc, #644]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a19      	ldr	r1, [r3, #32]
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	499c      	ldr	r1, [pc, #624]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
 8001e54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e6c:	601a      	str	r2, [r3, #0]
  return result;
 8001e6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	461a      	mov	r2, r3
 8001e86:	2301      	movs	r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fca9 	bl	80007e0 <HAL_GetTick>
 8001e8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fca4 	bl	80007e0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e106      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
 8001ea8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ec0:	601a      	str	r2, [r3, #0]
  return result;
 8001ec2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ec6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_OscConfig+0xf02>
 8001edc:	4b78      	ldr	r3, [pc, #480]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	e01b      	b.n	8001f1a <HAL_RCC_OscConfig+0xf3a>
 8001ee2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	fa92 f1a2 	rbit	r1, r2
 8001f2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f32:	6011      	str	r1, [r2, #0]
  return result;
 8001f34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d09e      	beq.n	8001e94 <HAL_RCC_OscConfig+0xeb4>
 8001f56:	e0ad      	b.n	80020b4 <HAL_RCC_OscConfig+0x10d4>
 8001f58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fc27 	bl	80007e0 <HAL_GetTick>
 8001f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fc22 	bl	80007e0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e084      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc4:	601a      	str	r2, [r3, #0]
  return result;
 8001fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1006>
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e01b      	b.n	800201e <HAL_RCC_OscConfig+0x103e>
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f107 0214 	add.w	r2, r7, #20
 8002022:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002026:	6011      	str	r1, [r2, #0]
 8002028:	f107 0214 	add.w	r2, r7, #20
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	fa92 f1a2 	rbit	r1, r2
 8002032:	f107 0210 	add.w	r2, r7, #16
 8002036:	6011      	str	r1, [r2, #0]
  return result;
 8002038:	f107 0210 	add.w	r2, r7, #16
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f002 021f 	and.w	r2, r2, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d19e      	bne.n	8001f98 <HAL_RCC_OscConfig+0xfb8>
 800205a:	e02b      	b.n	80020b4 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e025      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_RCC_OscConfig+0x10e0>)
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800207a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800207e:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d111      	bne.n	80020b0 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800208c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002090:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800209a:	429a      	cmp	r2, r3
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800209e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09e      	sub	sp, #120	; 0x78
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e203      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d116      	bne.n	8002116 <HAL_RCC_ClockConfig+0x52>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d110      	bne.n	8002116 <HAL_RCC_ClockConfig+0x52>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_RCC_ClockConfig+0x52>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <HAL_RCC_ClockConfig+0x52>
 800210c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002110:	48a5      	ldr	r0, [pc, #660]	; (80023a8 <HAL_RCC_ClockConfig+0x2e4>)
 8002112:	f7fe fa00 	bl	8000516 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCC_ClockConfig+0x6e>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d007      	beq.n	8002132 <HAL_RCC_ClockConfig+0x6e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d004      	beq.n	8002132 <HAL_RCC_ClockConfig+0x6e>
 8002128:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800212c:	489e      	ldr	r0, [pc, #632]	; (80023a8 <HAL_RCC_ClockConfig+0x2e4>)
 800212e:	f7fe f9f2 	bl	8000516 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002132:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d910      	bls.n	8002162 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002140:	4b9a      	ldr	r3, [pc, #616]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 0207 	bic.w	r2, r3, #7
 8002148:	4998      	ldr	r1, [pc, #608]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002150:	4b96      	ldr	r3, [pc, #600]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1c0      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d031      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d024      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d020      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b90      	cmp	r3, #144	; 0x90
 8002184:	d01c      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2ba0      	cmp	r3, #160	; 0xa0
 800218c:	d018      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2bb0      	cmp	r3, #176	; 0xb0
 8002194:	d014      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2bc0      	cmp	r3, #192	; 0xc0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2bd0      	cmp	r3, #208	; 0xd0
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2be0      	cmp	r3, #224	; 0xe0
 80021ac:	d008      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2bf0      	cmp	r3, #240	; 0xf0
 80021b4:	d004      	beq.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
 80021b6:	f240 21db 	movw	r1, #731	; 0x2db
 80021ba:	487b      	ldr	r0, [pc, #492]	; (80023a8 <HAL_RCC_ClockConfig+0x2e4>)
 80021bc:	f7fe f9ab 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4978      	ldr	r1, [pc, #480]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80f3 	beq.w	80023c6 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_ClockConfig+0x13e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x13e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d004      	beq.n	8002202 <HAL_RCC_ClockConfig+0x13e>
 80021f8:	f240 21e2 	movw	r1, #738	; 0x2e2
 80021fc:	486a      	ldr	r0, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x2e4>)
 80021fe:	f7fe f98a 	bl	8000516 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d13c      	bne.n	8002284 <HAL_RCC_ClockConfig+0x1c0>
 800220a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_ClockConfig+0x170>
 800222e:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e00f      	b.n	8002254 <HAL_RCC_ClockConfig+0x190>
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	667b      	str	r3, [r7, #100]	; 0x64
 8002242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002246:	663b      	str	r3, [r7, #96]	; 0x60
 8002248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002258:	65ba      	str	r2, [r7, #88]	; 0x58
 800225a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002262:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f002 021f 	and.w	r2, r2, #31
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d17b      	bne.n	8002378 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e12f      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d13c      	bne.n	8002306 <HAL_RCC_ClockConfig+0x242>
 800228c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002290:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1f2>
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e00f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x212>
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
 80022c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022da:	63ba      	str	r2, [r7, #56]	; 0x38
 80022dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d13a      	bne.n	8002378 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0ee      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
 8002306:	2302      	movs	r3, #2
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_RCC_ClockConfig+0x26a>
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e00d      	b.n	800234a <HAL_RCC_ClockConfig+0x286>
 800232e:	2302      	movs	r3, #2
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2302      	movs	r3, #2
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2202      	movs	r2, #2
 800234c:	61ba      	str	r2, [r7, #24]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	fa92 f2a2 	rbit	r2, r2
 8002354:	617a      	str	r2, [r7, #20]
  return result;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	fab2 f282 	clz	r2, r2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f042 0220 	orr.w	r2, r2, #32
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f002 021f 	and.w	r2, r2, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f202 	lsl.w	r2, r1, r2
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b5      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238a:	f7fe fa29 	bl	80007e0 <HAL_GetTick>
 800238e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	e010      	b.n	80023b4 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe fa25 	bl	80007e0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d907      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e09d      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
 80023a8:	080039f4 	.word	0x080039f4
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 020c 	and.w	r2, r3, #12
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d1e5      	bne.n	8002392 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_ClockConfig+0x42c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d210      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d4:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <HAL_RCC_ClockConfig+0x42c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 0207 	bic.w	r2, r3, #7
 80023dc:	4944      	ldr	r1, [pc, #272]	; (80024f0 <HAL_RCC_ClockConfig+0x42c>)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <HAL_RCC_ClockConfig+0x42c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e076      	b.n	80024e4 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d025      	beq.n	800244e <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d018      	beq.n	800243c <HAL_RCC_ClockConfig+0x378>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002412:	d013      	beq.n	800243c <HAL_RCC_ClockConfig+0x378>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800241c:	d00e      	beq.n	800243c <HAL_RCC_ClockConfig+0x378>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002426:	d009      	beq.n	800243c <HAL_RCC_ClockConfig+0x378>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002430:	d004      	beq.n	800243c <HAL_RCC_ClockConfig+0x378>
 8002432:	f240 311e 	movw	r1, #798	; 0x31e
 8002436:	482f      	ldr	r0, [pc, #188]	; (80024f4 <HAL_RCC_ClockConfig+0x430>)
 8002438:	f7fe f86d 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4928      	ldr	r1, [pc, #160]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d026      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3d0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d013      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3d0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002474:	d00e      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3d0>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800247e:	d009      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3d0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002488:	d004      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3d0>
 800248a:	f240 3125 	movw	r1, #805	; 0x325
 800248e:	4819      	ldr	r0, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x430>)
 8002490:	f7fe f841 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4912      	ldr	r1, [pc, #72]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a8:	f000 f82c 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_ClockConfig+0x428>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b6:	22f0      	movs	r2, #240	; 0xf0
 80024b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	60fa      	str	r2, [r7, #12]
  return result;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	40d3      	lsrs	r3, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x434>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	fa21 f303 	lsr.w	r3, r1, r3
 80024d4:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x438>)
 80024d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x43c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f93b 	bl	8000758 <HAL_InitTick>
  
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3778      	adds	r7, #120	; 0x78
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40022000 	.word	0x40022000
 80024f4:	080039f4 	.word	0x080039f4
 80024f8:	08003ac4 	.word	0x08003ac4
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x30>
 800252e:	2b08      	cmp	r3, #8
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x36>
 8002532:	e03f      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002536:	623b      	str	r3, [r7, #32]
      break;
 8002538:	e03f      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002540:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002544:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	607a      	str	r2, [r7, #4]
  return result;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	40d3      	lsrs	r3, r2
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	220f      	movs	r2, #15
 8002568:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	60fa      	str	r2, [r7, #12]
  return result;
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	fbb2 f2f3 	udiv	r2, r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	e007      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	623b      	str	r3, [r7, #32]
      break;
 80025b2:	e002      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80025b6:	623b      	str	r3, [r7, #32]
      break;
 80025b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	372c      	adds	r7, #44	; 0x2c
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	007a1200 	.word	0x007a1200
 80025d0:	08003adc 	.word	0x08003adc
 80025d4:	08003aec 	.word	0x08003aec

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025f6:	f7ff ffef 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025fa:	4601      	mov	r1, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002604:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002608:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	fa92 f2a2 	rbit	r2, r2
 8002610:	603a      	str	r2, [r7, #0]
  return result;
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	40d3      	lsrs	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x40>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	08003ad4 	.word	0x08003ad4

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800263a:	f7ff ffcd 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 800263e:	4601      	mov	r1, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002648:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800264c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	fa92 f2a2 	rbit	r2, r2
 8002654:	603a      	str	r2, [r7, #0]
  return result;
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	40d3      	lsrs	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	08003ad4 	.word	0x08003ad4

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b092      	sub	sp, #72	; 0x48
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d303      	bcc.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002698:	2172      	movs	r1, #114	; 0x72
 800269a:	4861      	ldr	r0, [pc, #388]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800269c:	f7fd ff3b 	bl	8000516 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80f1 	beq.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026be:	d00d      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c8:	d008      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d2:	d003      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d4:	2178      	movs	r1, #120	; 0x78
 80026d6:	4852      	ldr	r0, [pc, #328]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026d8:	f7fd ff1d 	bl	8000516 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026dc:	4b51      	ldr	r3, [pc, #324]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10e      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	4b4e      	ldr	r3, [pc, #312]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f2:	61d3      	str	r3, [r2, #28]
 80026f4:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b48      	ldr	r3, [pc, #288]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe f85f 	bl	80007e0 <HAL_GetTick>
 8002722:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe f85b 	bl	80007e0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e38f      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002744:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808a 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002760:	429a      	cmp	r2, r3
 8002762:	f000 8082 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027b8:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d050      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe f80a 	bl	80007e0 <HAL_GetTick>
 80027cc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe f806 	bl	80007e0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e338      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 80027e6:	2302      	movs	r3, #2
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	61fb      	str	r3, [r7, #28]
  return result;
 80027fe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d10d      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	e012      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800281a:	bf00      	nop
 800281c:	03f73400 	.word	0x03f73400
 8002820:	08003a2c 	.word	0x08003a2c
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	10908100 	.word	0x10908100
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2202      	movs	r2, #2
 8002842:	613a      	str	r2, [r7, #16]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	60fa      	str	r2, [r7, #12]
  return result;
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0b2      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800286a:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4989      	ldr	r1, [pc, #548]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002878:	4313      	orrs	r3, r2
 800287a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4a84      	ldr	r2, [pc, #528]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01c      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00f      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d00b      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d007      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80028bc:	21be      	movs	r1, #190	; 0xbe
 80028be:	4878      	ldr	r0, [pc, #480]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80028c0:	f7fd fe29 	bl	8000516 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c4:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f023 0203 	bic.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4972      	ldr	r1, [pc, #456]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01f      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f2:	d00d      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002908:	21c9      	movs	r1, #201	; 0xc9
 800290a:	4865      	ldr	r0, [pc, #404]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800290c:	f7fd fe03 	bl	8000516 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002910:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	495f      	ldr	r1, [pc, #380]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01f      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d012      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800293e:	d00d      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002952:	d003      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002954:	21d5      	movs	r1, #213	; 0xd5
 8002956:	4852      	ldr	r0, [pc, #328]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002958:	f7fd fddd 	bl	8000516 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295c:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	494c      	ldr	r1, [pc, #304]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800296a:	4313      	orrs	r3, r2
 800296c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d014      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d003      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800298a:	21e0      	movs	r1, #224	; 0xe0
 800298c:	4844      	ldr	r0, [pc, #272]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800298e:	f7fd fdc2 	bl	8000516 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f023 0210 	bic.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	493f      	ldr	r1, [pc, #252]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d007      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x352>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x352>
 80029c2:	21ee      	movs	r1, #238	; 0xee
 80029c4:	4836      	ldr	r0, [pc, #216]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029c6:	f7fd fda6 	bl	8000516 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	4931      	ldr	r1, [pc, #196]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d015      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d004      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80029f8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80029fc:	4828      	ldr	r0, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029fe:	f7fd fd8a 	bl	8000516 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 0220 	bic.w	r2, r3, #32
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4923      	ldr	r1, [pc, #140]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d004      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002a30:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002a34:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a36:	f7fd fd6e 	bl	8000516 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	4915      	ldr	r1, [pc, #84]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d025      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a68:	d00e      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a72:	d009      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a7c:	d004      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a7e:	f240 1123 	movw	r1, #291	; 0x123
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a84:	f7fd fd47 	bl	8000516 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4901      	ldr	r1, [pc, #4]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
 8002a9a:	e003      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08003a2c 	.word	0x08003a2c
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad4:	d004      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8002ad6:	f240 112d 	movw	r1, #301	; 0x12d
 8002ada:	48a1      	ldr	r0, [pc, #644]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002adc:	f7fd fd1b 	bl	8000516 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae0:	4ba0      	ldr	r3, [pc, #640]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	499d      	ldr	r1, [pc, #628]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b0e:	d004      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8002b10:	f240 113d 	movw	r1, #317	; 0x13d
 8002b14:	4892      	ldr	r0, [pc, #584]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002b16:	f7fd fcfe 	bl	8000516 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b1a:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	498f      	ldr	r1, [pc, #572]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d04d      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d040      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b48:	d03b      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002b52:	d036      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002b5c:	d031      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002b66:	d02c      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b70:	d027      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8002b7a:	d022      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8002b84:	d01d      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8002b8e:	d018      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002b98:	d013      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002bb8:	f240 115d 	movw	r1, #349	; 0x15d
 8002bbc:	4868      	ldr	r0, [pc, #416]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002bbe:	f7fd fcaa 	bl	8000516 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc2:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	4965      	ldr	r1, [pc, #404]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d04d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d040      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf0:	d03b      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8002bfa:	d036      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8002c04:	d031      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8002c0e:	d02c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8002c18:	d027      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8002c22:	d022      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8002c2c:	d01d      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8002c36:	d018      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c40:	d013      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8002c4a:	d00e      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8002c54:	d009      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8002c5e:	d004      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002c60:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8002c64:	483e      	ldr	r0, [pc, #248]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002c66:	f7fd fc56 	bl	8000516 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	493b      	ldr	r1, [pc, #236]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c98:	d004      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002c9a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002c9e:	4830      	ldr	r0, [pc, #192]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002ca0:	f7fd fc39 	bl	8000516 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ca4:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	492c      	ldr	r1, [pc, #176]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x666>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd2:	d004      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x666>
 8002cd4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002cd8:	4821      	ldr	r0, [pc, #132]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002cda:	f7fd fc1c 	bl	8000516 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	491e      	ldr	r1, [pc, #120]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d0c:	d004      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002d0e:	f240 11f7 	movw	r1, #503	; 0x1f7
 8002d12:	4813      	ldr	r0, [pc, #76]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002d14:	f7fd fbff 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	490f      	ldr	r1, [pc, #60]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01b      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d46:	d004      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8002d48:	f240 2101 	movw	r1, #513	; 0x201
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8002d4e:	f7fd fbe2 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002d60:	08003a2c 	.word	0x08003a2c
 8002d64:	40021000 	.word	0x40021000
 8002d68:	493d      	ldr	r1, [pc, #244]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d004      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002d8c:	f240 210b 	movw	r1, #523	; 0x20b
 8002d90:	4834      	ldr	r0, [pc, #208]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8002d92:	f7fd fbc0 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d96:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	492f      	ldr	r1, [pc, #188]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d016      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	d004      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8002dc6:	f240 2115 	movw	r1, #533	; 0x215
 8002dca:	4826      	ldr	r0, [pc, #152]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8002dcc:	f7fd fba3 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ddc:	4920      	ldr	r1, [pc, #128]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x792>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	d004      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x792>
 8002e00:	f240 211f 	movw	r1, #543	; 0x21f
 8002e04:	4817      	ldr	r0, [pc, #92]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8002e06:	f7fd fb86 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	4912      	ldr	r1, [pc, #72]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e38:	d004      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8002e3a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8002e3e:	4809      	ldr	r0, [pc, #36]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8002e40:	f7fd fb69 	bl	8000516 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3748      	adds	r7, #72	; 0x48
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08003a2c 	.word	0x08003a2c

08002e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e077      	b.n	8002f6a <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_UART_Init+0x10c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02d      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <HAL_UART_Init+0x110>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d028      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <HAL_UART_Init+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d023      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002ea0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ea4:	4836      	ldr	r0, [pc, #216]	; (8002f80 <HAL_UART_Init+0x118>)
 8002ea6:	f7fd fb36 	bl	8000516 <assert_failed>
 8002eaa:	e01d      	b.n	8002ee8 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_UART_Init+0x10c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d018      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_UART_Init+0x110>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2d      	ldr	r2, [pc, #180]	; (8002f7c <HAL_UART_Init+0x114>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_UART_Init+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_UART_Init+0x120>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_UART_Init+0x80>
 8002ede:	f240 1131 	movw	r1, #305	; 0x131
 8002ee2:	4827      	ldr	r0, [pc, #156]	; (8002f80 <HAL_UART_Init+0x118>)
 8002ee4:	f7fd fb17 	bl	8000516 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fbab 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2224      	movs	r2, #36	; 0x24
 8002f02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f839 	bl	8002f8c <UART_SetConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e022      	b.n	8002f6a <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fa91 	bl	8003454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fbc4 	bl	80036f0 <UART_CheckIdleState>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	08003a88 	.word	0x08003a88
 8002f84:	40004c00 	.word	0x40004c00
 8002f88:	40005000 	.word	0x40005000

08002f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a9a      	ldr	r2, [pc, #616]	; (8003208 <UART_SetConfig+0x27c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d904      	bls.n	8002fac <UART_SetConfig+0x20>
 8002fa2:	f640 313f 	movw	r1, #2879	; 0xb3f
 8002fa6:	4899      	ldr	r0, [pc, #612]	; (800320c <UART_SetConfig+0x280>)
 8002fa8:	f7fd fab5 	bl	8000516 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb4:	d00d      	beq.n	8002fd2 <UART_SetConfig+0x46>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <UART_SetConfig+0x46>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d004      	beq.n	8002fd2 <UART_SetConfig+0x46>
 8002fc8:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8002fcc:	488f      	ldr	r0, [pc, #572]	; (800320c <UART_SetConfig+0x280>)
 8002fce:	f7fd faa2 	bl	8000516 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	d012      	beq.n	8003002 <UART_SetConfig+0x76>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <UART_SetConfig+0x76>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fec:	d009      	beq.n	8003002 <UART_SetConfig+0x76>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	d004      	beq.n	8003002 <UART_SetConfig+0x76>
 8002ff8:	f640 3141 	movw	r1, #2881	; 0xb41
 8002ffc:	4883      	ldr	r0, [pc, #524]	; (800320c <UART_SetConfig+0x280>)
 8002ffe:	f7fd fa8a 	bl	8000516 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <UART_SetConfig+0x92>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d004      	beq.n	800301e <UART_SetConfig+0x92>
 8003014:	f640 3142 	movw	r1, #2882	; 0xb42
 8003018:	487c      	ldr	r0, [pc, #496]	; (800320c <UART_SetConfig+0x280>)
 800301a:	f7fd fa7c 	bl	8000516 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <UART_SetConfig+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d009      	beq.n	8003044 <UART_SetConfig+0xb8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003038:	d004      	beq.n	8003044 <UART_SetConfig+0xb8>
 800303a:	f640 3144 	movw	r1, #2884	; 0xb44
 800303e:	4873      	ldr	r0, [pc, #460]	; (800320c <UART_SetConfig+0x280>)
 8003040:	f7fd fa69 	bl	8000516 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f023 030c 	bic.w	r3, r3, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <UART_SetConfig+0xcc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <UART_SetConfig+0xd6>
 8003058:	f640 3145 	movw	r1, #2885	; 0xb45
 800305c:	486b      	ldr	r0, [pc, #428]	; (800320c <UART_SetConfig+0x280>)
 800305e:	f7fd fa5a 	bl	8000516 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <UART_SetConfig+0x106>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003072:	d00e      	beq.n	8003092 <UART_SetConfig+0x106>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d009      	beq.n	8003092 <UART_SetConfig+0x106>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003086:	d004      	beq.n	8003092 <UART_SetConfig+0x106>
 8003088:	f640 3146 	movw	r1, #2886	; 0xb46
 800308c:	485f      	ldr	r0, [pc, #380]	; (800320c <UART_SetConfig+0x280>)
 800308e:	f7fd fa42 	bl	8000516 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <UART_SetConfig+0x122>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d004      	beq.n	80030ae <UART_SetConfig+0x122>
 80030a4:	f640 3147 	movw	r1, #2887	; 0xb47
 80030a8:	4858      	ldr	r0, [pc, #352]	; (800320c <UART_SetConfig+0x280>)
 80030aa:	f7fd fa34 	bl	8000516 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <UART_SetConfig+0x284>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	6979      	ldr	r1, [r7, #20]
 80030d6:	430b      	orrs	r3, r1
 80030d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3e      	ldr	r2, [pc, #248]	; (8003214 <UART_SetConfig+0x288>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d11f      	bne.n	800315e <UART_SetConfig+0x1d2>
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <UART_SetConfig+0x28c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b03      	cmp	r3, #3
 8003128:	d816      	bhi.n	8003158 <UART_SetConfig+0x1cc>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x1a4>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003141 	.word	0x08003141
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003153 	.word	0x08003153
 800313c:	08003147 	.word	0x08003147
 8003140:	2301      	movs	r3, #1
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e0c4      	b.n	80032d0 <UART_SetConfig+0x344>
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e0c1      	b.n	80032d0 <UART_SetConfig+0x344>
 800314c:	2304      	movs	r3, #4
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e0be      	b.n	80032d0 <UART_SetConfig+0x344>
 8003152:	2308      	movs	r3, #8
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e0bb      	b.n	80032d0 <UART_SetConfig+0x344>
 8003158:	2310      	movs	r3, #16
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0b8      	b.n	80032d0 <UART_SetConfig+0x344>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2e      	ldr	r2, [pc, #184]	; (800321c <UART_SetConfig+0x290>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d124      	bne.n	80031b2 <UART_SetConfig+0x226>
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <UART_SetConfig+0x28c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003174:	d011      	beq.n	800319a <UART_SetConfig+0x20e>
 8003176:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317a:	d817      	bhi.n	80031ac <UART_SetConfig+0x220>
 800317c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003180:	d011      	beq.n	80031a6 <UART_SetConfig+0x21a>
 8003182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003186:	d811      	bhi.n	80031ac <UART_SetConfig+0x220>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <UART_SetConfig+0x208>
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d006      	beq.n	80031a0 <UART_SetConfig+0x214>
 8003192:	e00b      	b.n	80031ac <UART_SetConfig+0x220>
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e09a      	b.n	80032d0 <UART_SetConfig+0x344>
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e097      	b.n	80032d0 <UART_SetConfig+0x344>
 80031a0:	2304      	movs	r3, #4
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e094      	b.n	80032d0 <UART_SetConfig+0x344>
 80031a6:	2308      	movs	r3, #8
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e091      	b.n	80032d0 <UART_SetConfig+0x344>
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e08e      	b.n	80032d0 <UART_SetConfig+0x344>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <UART_SetConfig+0x294>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d133      	bne.n	8003224 <UART_SetConfig+0x298>
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <UART_SetConfig+0x28c>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031c8:	d011      	beq.n	80031ee <UART_SetConfig+0x262>
 80031ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ce:	d817      	bhi.n	8003200 <UART_SetConfig+0x274>
 80031d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031d4:	d011      	beq.n	80031fa <UART_SetConfig+0x26e>
 80031d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031da:	d811      	bhi.n	8003200 <UART_SetConfig+0x274>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <UART_SetConfig+0x25c>
 80031e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031e4:	d006      	beq.n	80031f4 <UART_SetConfig+0x268>
 80031e6:	e00b      	b.n	8003200 <UART_SetConfig+0x274>
 80031e8:	2300      	movs	r3, #0
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e070      	b.n	80032d0 <UART_SetConfig+0x344>
 80031ee:	2302      	movs	r3, #2
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e06d      	b.n	80032d0 <UART_SetConfig+0x344>
 80031f4:	2304      	movs	r3, #4
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e06a      	b.n	80032d0 <UART_SetConfig+0x344>
 80031fa:	2308      	movs	r3, #8
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e067      	b.n	80032d0 <UART_SetConfig+0x344>
 8003200:	2310      	movs	r3, #16
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e064      	b.n	80032d0 <UART_SetConfig+0x344>
 8003206:	bf00      	nop
 8003208:	00895440 	.word	0x00895440
 800320c:	08003a88 	.word	0x08003a88
 8003210:	efff69f3 	.word	0xefff69f3
 8003214:	40013800 	.word	0x40013800
 8003218:	40021000 	.word	0x40021000
 800321c:	40004400 	.word	0x40004400
 8003220:	40004800 	.word	0x40004800
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a86      	ldr	r2, [pc, #536]	; (8003444 <UART_SetConfig+0x4b8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d124      	bne.n	8003278 <UART_SetConfig+0x2ec>
 800322e:	4b86      	ldr	r3, [pc, #536]	; (8003448 <UART_SetConfig+0x4bc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800323a:	d011      	beq.n	8003260 <UART_SetConfig+0x2d4>
 800323c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003240:	d817      	bhi.n	8003272 <UART_SetConfig+0x2e6>
 8003242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003246:	d011      	beq.n	800326c <UART_SetConfig+0x2e0>
 8003248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800324c:	d811      	bhi.n	8003272 <UART_SetConfig+0x2e6>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <UART_SetConfig+0x2ce>
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d006      	beq.n	8003266 <UART_SetConfig+0x2da>
 8003258:	e00b      	b.n	8003272 <UART_SetConfig+0x2e6>
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e037      	b.n	80032d0 <UART_SetConfig+0x344>
 8003260:	2302      	movs	r3, #2
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e034      	b.n	80032d0 <UART_SetConfig+0x344>
 8003266:	2304      	movs	r3, #4
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e031      	b.n	80032d0 <UART_SetConfig+0x344>
 800326c:	2308      	movs	r3, #8
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e02e      	b.n	80032d0 <UART_SetConfig+0x344>
 8003272:	2310      	movs	r3, #16
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e02b      	b.n	80032d0 <UART_SetConfig+0x344>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a73      	ldr	r2, [pc, #460]	; (800344c <UART_SetConfig+0x4c0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d124      	bne.n	80032cc <UART_SetConfig+0x340>
 8003282:	4b71      	ldr	r3, [pc, #452]	; (8003448 <UART_SetConfig+0x4bc>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800328a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800328e:	d011      	beq.n	80032b4 <UART_SetConfig+0x328>
 8003290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003294:	d817      	bhi.n	80032c6 <UART_SetConfig+0x33a>
 8003296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329a:	d011      	beq.n	80032c0 <UART_SetConfig+0x334>
 800329c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a0:	d811      	bhi.n	80032c6 <UART_SetConfig+0x33a>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <UART_SetConfig+0x322>
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d006      	beq.n	80032ba <UART_SetConfig+0x32e>
 80032ac:	e00b      	b.n	80032c6 <UART_SetConfig+0x33a>
 80032ae:	2300      	movs	r3, #0
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e00d      	b.n	80032d0 <UART_SetConfig+0x344>
 80032b4:	2302      	movs	r3, #2
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e00a      	b.n	80032d0 <UART_SetConfig+0x344>
 80032ba:	2304      	movs	r3, #4
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e007      	b.n	80032d0 <UART_SetConfig+0x344>
 80032c0:	2308      	movs	r3, #8
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e004      	b.n	80032d0 <UART_SetConfig+0x344>
 80032c6:	2310      	movs	r3, #16
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e001      	b.n	80032d0 <UART_SetConfig+0x344>
 80032cc:	2310      	movs	r3, #16
 80032ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	d15c      	bne.n	8003394 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d828      	bhi.n	8003332 <UART_SetConfig+0x3a6>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <UART_SetConfig+0x35c>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800330d 	.word	0x0800330d
 80032ec:	08003315 	.word	0x08003315
 80032f0:	0800331d 	.word	0x0800331d
 80032f4:	08003333 	.word	0x08003333
 80032f8:	08003323 	.word	0x08003323
 80032fc:	08003333 	.word	0x08003333
 8003300:	08003333 	.word	0x08003333
 8003304:	08003333 	.word	0x08003333
 8003308:	0800332b 	.word	0x0800332b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800330c:	f7ff f970 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003310:	61b8      	str	r0, [r7, #24]
        break;
 8003312:	e013      	b.n	800333c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7ff f98e 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8003318:	61b8      	str	r0, [r7, #24]
        break;
 800331a:	e00f      	b.n	800333c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <UART_SetConfig+0x4c4>)
 800331e:	61bb      	str	r3, [r7, #24]
        break;
 8003320:	e00c      	b.n	800333c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003322:	f7ff f8ef 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 8003326:	61b8      	str	r0, [r7, #24]
        break;
 8003328:	e008      	b.n	800333c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332e:	61bb      	str	r3, [r7, #24]
        break;
 8003330:	e004      	b.n	800333c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	77bb      	strb	r3, [r7, #30]
        break;
 800333a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d074      	beq.n	800342c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	005a      	lsls	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	b29b      	uxth	r3, r3
 8003358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d916      	bls.n	800338e <UART_SetConfig+0x402>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	d212      	bcs.n	800338e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f023 030f 	bic.w	r3, r3, #15
 8003370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	b29b      	uxth	r3, r3
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	b29a      	uxth	r2, r3
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	4313      	orrs	r3, r2
 8003382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	89fa      	ldrh	r2, [r7, #14]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e04e      	b.n	800342c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
 8003392:	e04b      	b.n	800342c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	2b08      	cmp	r3, #8
 8003398:	d827      	bhi.n	80033ea <UART_SetConfig+0x45e>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <UART_SetConfig+0x414>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033d5 	.word	0x080033d5
 80033ac:	080033eb 	.word	0x080033eb
 80033b0:	080033db 	.word	0x080033db
 80033b4:	080033eb 	.word	0x080033eb
 80033b8:	080033eb 	.word	0x080033eb
 80033bc:	080033eb 	.word	0x080033eb
 80033c0:	080033e3 	.word	0x080033e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c4:	f7ff f914 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80033c8:	61b8      	str	r0, [r7, #24]
        break;
 80033ca:	e013      	b.n	80033f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033cc:	f7ff f932 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 80033d0:	61b8      	str	r0, [r7, #24]
        break;
 80033d2:	e00f      	b.n	80033f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <UART_SetConfig+0x4c4>)
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e00c      	b.n	80033f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033da:	f7ff f893 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80033de:	61b8      	str	r0, [r7, #24]
        break;
 80033e0:	e008      	b.n	80033f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e6:	61bb      	str	r3, [r7, #24]
        break;
 80033e8:	e004      	b.n	80033f4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	77bb      	strb	r3, [r7, #30]
        break;
 80033f2:	bf00      	nop
    }

    if (pclk != 0U)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d018      	beq.n	800342c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085a      	lsrs	r2, r3, #1
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	d908      	bls.n	8003428 <UART_SetConfig+0x49c>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d204      	bcs.n	8003428 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e001      	b.n	800342c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003438:	7fbb      	ldrb	r3, [r7, #30]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40004c00 	.word	0x40004c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40005000 	.word	0x40005000
 8003450:	007a1200 	.word	0x007a1200

08003454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2bff      	cmp	r3, #255	; 0xff
 8003462:	d904      	bls.n	800346e <UART_AdvFeatureConfig+0x1a>
 8003464:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8003468:	489d      	ldr	r0, [pc, #628]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800346a:	f7fd f854 	bl	8000516 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <UART_AdvFeatureConfig+0x42>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348a:	d004      	beq.n	8003496 <UART_AdvFeatureConfig+0x42>
 800348c:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8003490:	4893      	ldr	r0, [pc, #588]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 8003492:	f7fd f840 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d018      	beq.n	80034ea <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <UART_AdvFeatureConfig+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d004      	beq.n	80034d4 <UART_AdvFeatureConfig+0x80>
 80034ca:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80034ce:	4884      	ldr	r0, [pc, #528]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 80034d0:	f7fd f821 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <UART_AdvFeatureConfig+0xbe>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003506:	d004      	beq.n	8003512 <UART_AdvFeatureConfig+0xbe>
 8003508:	f640 31db 	movw	r1, #3035	; 0xbdb
 800350c:	4874      	ldr	r0, [pc, #464]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800350e:	f7fd f802 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d018      	beq.n	8003566 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <UART_AdvFeatureConfig+0xfc>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d004      	beq.n	8003550 <UART_AdvFeatureConfig+0xfc>
 8003546:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800354a:	4865      	ldr	r0, [pc, #404]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800354c:	f7fc ffe3 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <UART_AdvFeatureConfig+0x13a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d004      	beq.n	800358e <UART_AdvFeatureConfig+0x13a>
 8003584:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8003588:	4855      	ldr	r0, [pc, #340]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800358a:	f7fc ffc4 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d018      	beq.n	80035e2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <UART_AdvFeatureConfig+0x178>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	d004      	beq.n	80035cc <UART_AdvFeatureConfig+0x178>
 80035c2:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 80035c6:	4846      	ldr	r0, [pc, #280]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 80035c8:	f7fc ffa5 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d054      	beq.n	8003698 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <UART_AdvFeatureConfig+0x290>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <UART_AdvFeatureConfig+0x1c2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <UART_AdvFeatureConfig+0x294>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <UART_AdvFeatureConfig+0x1c2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a39      	ldr	r2, [pc, #228]	; (80036ec <UART_AdvFeatureConfig+0x298>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <UART_AdvFeatureConfig+0x1c2>
 800360c:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8003610:	4833      	ldr	r0, [pc, #204]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 8003612:	f7fc ff80 	bl	8000516 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <UART_AdvFeatureConfig+0x1de>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d004      	beq.n	8003632 <UART_AdvFeatureConfig+0x1de>
 8003628:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800362c:	482c      	ldr	r0, [pc, #176]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800362e:	f7fc ff72 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003650:	d122      	bne.n	8003698 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <UART_AdvFeatureConfig+0x22e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003662:	d00e      	beq.n	8003682 <UART_AdvFeatureConfig+0x22e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366c:	d009      	beq.n	8003682 <UART_AdvFeatureConfig+0x22e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003676:	d004      	beq.n	8003682 <UART_AdvFeatureConfig+0x22e>
 8003678:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800367c:	4818      	ldr	r0, [pc, #96]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 800367e:	f7fc ff4a 	bl	8000516 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <UART_AdvFeatureConfig+0x26c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036b4:	d004      	beq.n	80036c0 <UART_AdvFeatureConfig+0x26c>
 80036b6:	f640 4105 	movw	r1, #3077	; 0xc05
 80036ba:	4809      	ldr	r0, [pc, #36]	; (80036e0 <UART_AdvFeatureConfig+0x28c>)
 80036bc:	f7fc ff2b 	bl	8000516 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	08003a88 	.word	0x08003a88
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40004800 	.word	0x40004800

080036f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003700:	f7fd f86e 	bl	80007e0 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d10e      	bne.n	8003732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f82d 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e023      	b.n	800377a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d10e      	bne.n	800375e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f817 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00d      	b.n	800377a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b09c      	sub	sp, #112	; 0x70
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	e0a5      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	f000 80a1 	beq.w	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd f81f 	bl	80007e0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d13e      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	663b      	str	r3, [r7, #96]	; 0x60
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003806:	64ba      	str	r2, [r7, #72]	; 0x48
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800380c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e067      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d04f      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d147      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003858:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800386e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
 800387a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e6      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	613b      	str	r3, [r7, #16]
   return(result);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3308      	adds	r3, #8
 80038aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ac:	623a      	str	r2, [r7, #32]
 80038ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	69f9      	ldr	r1, [r7, #28]
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e5      	bne.n	800388c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e010      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	f43f af4a 	beq.w	8003794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3770      	adds	r7, #112	; 0x70
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <__libc_init_array>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4d0d      	ldr	r5, [pc, #52]	; (8003944 <__libc_init_array+0x38>)
 8003910:	4c0d      	ldr	r4, [pc, #52]	; (8003948 <__libc_init_array+0x3c>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	2600      	movs	r6, #0
 8003918:	42a6      	cmp	r6, r4
 800391a:	d109      	bne.n	8003930 <__libc_init_array+0x24>
 800391c:	4d0b      	ldr	r5, [pc, #44]	; (800394c <__libc_init_array+0x40>)
 800391e:	4c0c      	ldr	r4, [pc, #48]	; (8003950 <__libc_init_array+0x44>)
 8003920:	f000 f820 	bl	8003964 <_init>
 8003924:	1b64      	subs	r4, r4, r5
 8003926:	10a4      	asrs	r4, r4, #2
 8003928:	2600      	movs	r6, #0
 800392a:	42a6      	cmp	r6, r4
 800392c:	d105      	bne.n	800393a <__libc_init_array+0x2e>
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	f855 3b04 	ldr.w	r3, [r5], #4
 8003934:	4798      	blx	r3
 8003936:	3601      	adds	r6, #1
 8003938:	e7ee      	b.n	8003918 <__libc_init_array+0xc>
 800393a:	f855 3b04 	ldr.w	r3, [r5], #4
 800393e:	4798      	blx	r3
 8003940:	3601      	adds	r6, #1
 8003942:	e7f2      	b.n	800392a <__libc_init_array+0x1e>
 8003944:	08003afc 	.word	0x08003afc
 8003948:	08003afc 	.word	0x08003afc
 800394c:	08003afc 	.word	0x08003afc
 8003950:	08003b00 	.word	0x08003b00

08003954 <memset>:
 8003954:	4402      	add	r2, r0
 8003956:	4603      	mov	r3, r0
 8003958:	4293      	cmp	r3, r2
 800395a:	d100      	bne.n	800395e <memset+0xa>
 800395c:	4770      	bx	lr
 800395e:	f803 1b01 	strb.w	r1, [r3], #1
 8003962:	e7f9      	b.n	8003958 <memset+0x4>

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
