
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800c784  0800c784  0001c784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce20  0800ce20  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce20  0800ce20  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce20  0800ce20  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce24  0800ce24  0001ce24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ce28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000a38  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eed2  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004175  00000000  00000000  0003efee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00043168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  00044740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a2c  00000000  00000000  00045b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025044  00000000  00000000  0006a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4b5a  00000000  00000000  0008f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016412a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000656c  00000000  00000000  00164180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c76c 	.word	0x0800c76c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800c76c 	.word	0x0800c76c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <getDate>:
extern uint16_t  days[16];
extern uint16_t  minutes[16];
extern uint16_t  seconds[16];


RTC_DateTypeDef getDate(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80002b4:	2200      	movs	r2, #0
 80002b6:	4903      	ldr	r1, [pc, #12]	; (80002c4 <getDate+0x14>)
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <getDate+0x18>)
 80002ba:	f007 fc75 	bl	8007ba8 <HAL_RTC_GetDate>

}
 80002be:	bf00      	nop
 80002c0:	4618      	mov	r0, r3
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000190 	.word	0x20000190
 80002c8:	200005c8 	.word	0x200005c8

080002cc <reinitAlarms>:

//save all the contents without 255 to flash
void reinitAlarms(){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0





}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <HAL_RTC_AlarmAEventCallback>:


/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b087      	sub	sp, #28
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	6078      	str	r0, [r7, #4]

	getDate();
 80002e4:	f7ff ffe4 	bl	80002b0 <getDate>

	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	4832      	ldr	r0, [pc, #200]	; (80003b8 <HAL_RTC_AlarmAEventCallback+0xdc>)
 80002ee:	f003 f8c9 	bl	8003484 <HAL_GPIO_WritePin>

	handleGetAlarms();
 80002f2:	f000 ff5f 	bl	80011b4 <handleGetAlarms>


	uint8_t earliestAlarm = parseAlarms(FlashTx_buff);
 80002f6:	4831      	ldr	r0, [pc, #196]	; (80003bc <HAL_RTC_AlarmAEventCallback+0xe0>)
 80002f8:	f001 fb80 	bl	80019fc <parseAlarms>
 80002fc:	4603      	mov	r3, r0
 80002fe:	73fb      	strb	r3, [r7, #15]

	uint8_t day = days[earliestAlarm];
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	4a2f      	ldr	r2, [pc, #188]	; (80003c0 <HAL_RTC_AlarmAEventCallback+0xe4>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	73bb      	strb	r3, [r7, #14]
	uint8_t month = months[earliestAlarm];
 800030a:	7bfb      	ldrb	r3, [r7, #15]
 800030c:	4a2d      	ldr	r2, [pc, #180]	; (80003c4 <HAL_RTC_AlarmAEventCallback+0xe8>)
 800030e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000312:	737b      	strb	r3, [r7, #13]
	uint8_t hour = hours[earliestAlarm];
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <HAL_RTC_AlarmAEventCallback+0xec>)
 8000318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800031c:	733b      	strb	r3, [r7, #12]
	uint8_t minute = minutes[earliestAlarm];
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	4a2a      	ldr	r2, [pc, #168]	; (80003cc <HAL_RTC_AlarmAEventCallback+0xf0>)
 8000322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000326:	72fb      	strb	r3, [r7, #11]
	uint8_t second = seconds[earliestAlarm];
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	4a29      	ldr	r2, [pc, #164]	; (80003d0 <HAL_RTC_AlarmAEventCallback+0xf4>)
 800032c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000330:	72bb      	strb	r3, [r7, #10]



	sAlarm.Alarm = RTC_ALARM_A;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 8000334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
	sAlarm.AlarmTime.Hours = hour;
 800033a:	4a26      	ldr	r2, [pc, #152]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 800033c:	7b3b      	ldrb	r3, [r7, #12]
 800033e:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = minute;
 8000340:	4a24      	ldr	r2, [pc, #144]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = second;
 8000346:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 8000348:	7abb      	ldrb	r3, [r7, #10]
 800034a:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmDateWeekDay = day;
 800034c:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	f882 3020 	strb.w	r3, [r2, #32]

	Flash_delete(day, month, hour, minute, second);
 8000354:	7bb8      	ldrb	r0, [r7, #14]
 8000356:	7b79      	ldrb	r1, [r7, #13]
 8000358:	7b3a      	ldrb	r2, [r7, #12]
 800035a:	7afc      	ldrb	r4, [r7, #11]
 800035c:	7abb      	ldrb	r3, [r7, #10]
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	4623      	mov	r3, r4
 8000362:	f000 fbad 	bl	8000ac0 <Flash_delete>





	Send("current day == %d\r\n day readen: %d", currentDate.Date, day);
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <HAL_RTC_AlarmAEventCallback+0xfc>)
 8000368:	789b      	ldrb	r3, [r3, #2]
 800036a:	4619      	mov	r1, r3
 800036c:	7bbb      	ldrb	r3, [r7, #14]
 800036e:	461a      	mov	r2, r3
 8000370:	481a      	ldr	r0, [pc, #104]	; (80003dc <HAL_RTC_AlarmAEventCallback+0x100>)
 8000372:	f001 f8ad 	bl	80014d0 <Send>
	if(day == currentDate.Date && month == currentDate.Month){
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_RTC_AlarmAEventCallback+0xfc>)
 8000378:	789b      	ldrb	r3, [r3, #2]
 800037a:	7bba      	ldrb	r2, [r7, #14]
 800037c:	429a      	cmp	r2, r3
 800037e:	d115      	bne.n	80003ac <HAL_RTC_AlarmAEventCallback+0xd0>
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_RTC_AlarmAEventCallback+0xfc>)
 8000382:	785b      	ldrb	r3, [r3, #1]
 8000384:	7b7a      	ldrb	r2, [r7, #13]
 8000386:	429a      	cmp	r2, r3
 8000388:	d110      	bne.n	80003ac <HAL_RTC_AlarmAEventCallback+0xd0>
		Send("next alarm found: %d %d %d %d %d \r\n ", day, month, hour, minute, second);
 800038a:	7bb9      	ldrb	r1, [r7, #14]
 800038c:	7b78      	ldrb	r0, [r7, #13]
 800038e:	7b3c      	ldrb	r4, [r7, #12]
 8000390:	7afb      	ldrb	r3, [r7, #11]
 8000392:	7aba      	ldrb	r2, [r7, #10]
 8000394:	9201      	str	r2, [sp, #4]
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	4623      	mov	r3, r4
 800039a:	4602      	mov	r2, r0
 800039c:	4810      	ldr	r0, [pc, #64]	; (80003e0 <HAL_RTC_AlarmAEventCallback+0x104>)
 800039e:	f001 f897 	bl	80014d0 <Send>

		HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 80003a2:	2200      	movs	r2, #0
 80003a4:	490b      	ldr	r1, [pc, #44]	; (80003d4 <HAL_RTC_AlarmAEventCallback+0xf8>)
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f007 fc5a 	bl	8007c60 <HAL_RTC_SetAlarm_IT>

	}


	//set the next earliest alarm if date is correct
	reinitAlarms();
 80003ac:	f7ff ff8e 	bl	80002cc <reinitAlarms>




	//
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd90      	pop	{r4, r7, pc}
 80003b8:	48000800 	.word	0x48000800
 80003bc:	200001ac 	.word	0x200001ac
 80003c0:	200002f8 	.word	0x200002f8
 80003c4:	200009d0 	.word	0x200009d0
 80003c8:	200009b0 	.word	0x200009b0
 80003cc:	20000990 	.word	0x20000990
 80003d0:	20000668 	.word	0x20000668
 80003d4:	2000039c 	.word	0x2000039c
 80003d8:	20000190 	.word	0x20000190
 80003dc:	0800c784 	.word	0x0800c784
 80003e0:	0800c7a8 	.word	0x0800c7a8

080003e4 <Alarms_init>:



}

void Alarms_init(){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	RTC_DateTypeDef currentDate;
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != 0x32f3){
 80003ea:	2102      	movs	r1, #2
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <Alarms_init+0x98>)
 80003ee:	f008 fa17 	bl	8008820 <HAL_RTCEx_BKUPRead>
 80003f2:	4603      	mov	r3, r0
 80003f4:	f243 22f3 	movw	r2, #13043	; 0x32f3
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d023      	beq.n	8000444 <Alarms_init+0x60>
		sAlarm.AlarmTime.Hours = 23;
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <Alarms_init+0x9c>)
 80003fe:	2217      	movs	r2, #23
 8000400:	701a      	strb	r2, [r3, #0]
		sAlarm.AlarmTime.Minutes = 59;
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <Alarms_init+0x9c>)
 8000404:	223b      	movs	r2, #59	; 0x3b
 8000406:	705a      	strb	r2, [r3, #1]
		sAlarm.AlarmTime.Seconds = 0;
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <Alarms_init+0x9c>)
 800040a:	2200      	movs	r2, #0
 800040c:	709a      	strb	r2, [r3, #2]
		sAlarm.AlarmDateWeekDay = 30;
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <Alarms_init+0x9c>)
 8000410:	221e      	movs	r2, #30
 8000412:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarm.Alarm = RTC_ALARM_A;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <Alarms_init+0x9c>)
 8000418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800041c:	625a      	str	r2, [r3, #36]	; 0x24

		 if(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 800041e:	2200      	movs	r2, #0
 8000420:	4917      	ldr	r1, [pc, #92]	; (8000480 <Alarms_init+0x9c>)
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <Alarms_init+0x98>)
 8000424:	f007 fc1c 	bl	8007c60 <HAL_RTC_SetAlarm_IT>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <Alarms_init+0x54>
						 		Error_Handler();
 800042e:	f001 ff9f 	bl	8002370 <Error_Handler>
						 		sendFail(4);
 8000432:	2004      	movs	r0, #4
 8000434:	f001 fe6e 	bl	8002114 <sendFail>
		};
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 0x32f3);
 8000438:	f243 22f3 	movw	r2, #13043	; 0x32f3
 800043c:	2102      	movs	r1, #2
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <Alarms_init+0x98>)
 8000440:	f008 f9cc 	bl	80087dc <HAL_RTCEx_BKUPWrite>
	}

	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <Alarms_init+0x98>)
 800044c:	f007 fbac 	bl	8007ba8 <HAL_RTC_GetDate>
	AlarmB.AlarmTime.Hours = 00;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <Alarms_init+0xa0>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
	AlarmB.AlarmTime.Minutes = 00;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <Alarms_init+0xa0>)
 8000458:	2200      	movs	r2, #0
 800045a:	705a      	strb	r2, [r3, #1]
	AlarmB.AlarmTime.Seconds = 0;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <Alarms_init+0xa0>)
 800045e:	2200      	movs	r2, #0
 8000460:	709a      	strb	r2, [r3, #2]
	AlarmB.AlarmDateWeekDay = currentDate.Date;
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <Alarms_init+0xa0>)
 8000466:	f883 2020 	strb.w	r2, [r3, #32]
	AlarmB.Alarm = RTC_ALARM_B;
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <Alarms_init+0xa0>)
 800046c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000470:	625a      	str	r2, [r3, #36]	; 0x24





}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200005c8 	.word	0x200005c8
 8000480:	2000039c 	.word	0x2000039c
 8000484:	20000168 	.word	0x20000168

08000488 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d131      	bne.n	8000500 <splitNumber+0x78>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d039      	beq.n	8000516 <splitNumber+0x8e>
             while(num > 0 ){
 80004a2:	e02d      	b.n	8000500 <splitNumber+0x78>
              arr[i++] = num % 10;
 80004a4:	6978      	ldr	r0, [r7, #20]
 80004a6:	1c43      	adds	r3, r0, #1
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <splitNumber+0x98>)
 80004ae:	fb83 2301 	smull	r2, r3, r3, r1
 80004b2:	109a      	asrs	r2, r3, #2
 80004b4:	17cb      	asrs	r3, r1, #31
 80004b6:	1ad2      	subs	r2, r2, r3
 80004b8:	4613      	mov	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	1aca      	subs	r2, r1, r3
 80004c2:	0083      	lsls	r3, r0, #2
 80004c4:	f107 0118 	add.w	r1, r7, #24
 80004c8:	440b      	add	r3, r1
 80004ca:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a13      	ldr	r2, [pc, #76]	; (8000520 <splitNumber+0x98>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1092      	asrs	r2, r2, #2
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	607b      	str	r3, [r7, #4]
              if(num == 0){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d109      	bne.n	80004f8 <splitNumber+0x70>
                  arr[i++] = 0;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	617a      	str	r2, [r7, #20]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f107 0218 	add.w	r2, r7, #24
 80004f0:	4413      	add	r3, r2
 80004f2:	2200      	movs	r2, #0
 80004f4:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <splitNumber+0x9c>)
 80004fc:	f00a fb4a 	bl	800ab94 <iprintf>
             while(num > 0 ){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dcce      	bgt.n	80004a4 <splitNumber+0x1c>


            }
        return arr[return_val];
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	f107 0218 	add.w	r2, r7, #24
 800050e:	4413      	add	r3, r2
 8000510:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000514:	e000      	b.n	8000518 <splitNumber+0x90>
         } else {
             return 0;
 8000516:	2300      	movs	r3, #0
         }


}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	66666667 	.word	0x66666667
 8000524:	0800c7d0 	.word	0x0800c7d0

08000528 <convertToBinary>:

int convertToBinary(int num){
 8000528:	b480      	push	{r7}
 800052a:	b08f      	sub	sp, #60	; 0x3c
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000538:	e015      	b.n	8000566 <convertToBinary+0x3e>
              arr[i] = num % 2;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b00      	cmp	r3, #0
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	bfb8      	it	lt
 8000544:	425b      	neglt	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000550:	440b      	add	r3, r1
 8000552:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0fda      	lsrs	r2, r3, #31
 800055a:	4413      	add	r3, r2
 800055c:	105b      	asrs	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
              i++;
 8000560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000562:	3301      	adds	r3, #1
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1e6      	bne.n	800053a <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	3b01      	subs	r3, #1
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000572:	e005      	b.n	8000580 <convertToBinary+0x58>
              count++;
 8000574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000576:	3301      	adds	r3, #1
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 800057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057c:	3b01      	subs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000582:	2b00      	cmp	r3, #0
 8000584:	daf6      	bge.n	8000574 <convertToBinary+0x4c>

          }
          return count;
 8000586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000588:	4618      	mov	r0, r3
 800058a:	373c      	adds	r7, #60	; 0x3c
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <setTime>:



void setTime(RTC_TimeTypeDef sTime, int8_t hours, uint8_t minutes, uint8_t seconds){
 8000594:	b084      	sub	sp, #16
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
 800059a:	f107 0c08 	add.w	ip, r7, #8
 800059e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <setTime+0x6c>)
 80005a4:	f008 f89e 	bl	80086e4 <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80005a8:	7f3b      	ldrb	r3, [r7, #28]
 80005aa:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80005ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005b0:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80005b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005b6:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <setTime+0x6c>)
 80005c0:	f006 ffea 	bl	8007598 <HAL_RTC_SetTime>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f107 0108 	add.w	r1, r7, #8
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <setTime+0x6c>)
 80005cc:	f006 ffe4 	bl	8007598 <HAL_RTC_SetTime>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <setTime+0x46>
	{
		Error_Handler();
 80005d6:	f001 fecb 	bl	8002370 <Error_Handler>
//	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80005da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005de:	2101      	movs	r1, #1
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <setTime+0x6c>)
 80005e2:	f008 f8fb 	bl	80087dc <HAL_RTCEx_BKUPWrite>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <setTime+0x6c>)
 80005ee:	f007 ffa3 	bl	8008538 <HAL_RTCEx_SetWakeUpTimer_IT>



}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fa:	b004      	add	sp, #16
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200005c8 	.word	0x200005c8

08000604 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000616:	f000 f8d1 	bl	80007bc <resetPins>

	int bits_count = convertToBinary(hour);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff83 	bl	8000528 <convertToBinary>
 8000622:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b05      	cmp	r3, #5
 8000628:	dd03      	ble.n	8000632 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800062a:	4858      	ldr	r0, [pc, #352]	; (800078c <displayHour+0x188>)
 800062c:	f000 ff50 	bl	80014d0 <Send>
		hour_displayed = 1;

	}


}
 8000630:	e0a7      	b.n	8000782 <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
 8000636:	e016      	b.n	8000666 <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	fa42 f303 	asr.w	r3, r2, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00b      	beq.n	8000660 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 8000648:	4a51      	ldr	r2, [pc, #324]	; (8000790 <displayHour+0x18c>)
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000650:	4a50      	ldr	r2, [pc, #320]	; (8000794 <displayHour+0x190>)
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f002 ff12 	bl	8003484 <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	3301      	adds	r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	2b05      	cmp	r3, #5
 800066a:	dde5      	ble.n	8000638 <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e01b      	b.n	80006aa <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff06 	bl	8000488 <splitNumber>
 800067c:	4602      	mov	r2, r0
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00b      	beq.n	80006a4 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 800068c:	4a42      	ldr	r2, [pc, #264]	; (8000798 <displayHour+0x194>)
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <displayHour+0x198>)
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 fef0 	bl	8003484 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	dde0      	ble.n	8000672 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e01b      	b.n	80006ee <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fee4 	bl	8000488 <splitNumber>
 80006c0:	4602      	mov	r2, r0
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	fa42 f303 	asr.w	r3, r2, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00b      	beq.n	80006e8 <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80006d0:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <displayHour+0x19c>)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <displayHour+0x1a0>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	f002 fece 	bl	8003484 <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	dde0      	ble.n	80006b6 <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	e01b      	b.n	8000732 <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fec2 	bl	8000488 <splitNumber>
 8000704:	4602      	mov	r2, r0
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	fa42 f303 	asr.w	r3, r2, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <displayHour+0x1a4>)
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800071c:	4a23      	ldr	r2, [pc, #140]	; (80007ac <displayHour+0x1a8>)
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	f002 feac 	bl	8003484 <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	3301      	adds	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	2b04      	cmp	r3, #4
 8000736:	dde0      	ble.n	80006fa <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e01b      	b.n	8000776 <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 800073e:	797b      	ldrb	r3, [r7, #5]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fea0 	bl	8000488 <splitNumber>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	fa42 f303 	asr.w	r3, r2, r3
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00b      	beq.n	8000770 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 8000758:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <displayHour+0x1ac>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <displayHour+0x1b0>)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	f002 fe8a 	bl	8003484 <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b03      	cmp	r3, #3
 800077a:	dde0      	ble.n	800073e <displayHour+0x13a>
		hour_displayed = 1;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <displayHour+0x1b4>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800c7d4 	.word	0x0800c7d4
 8000790:	20000000 	.word	0x20000000
 8000794:	20000014 	.word	0x20000014
 8000798:	20000020 	.word	0x20000020
 800079c:	20000030 	.word	0x20000030
 80007a0:	20000038 	.word	0x20000038
 80007a4:	20000044 	.word	0x20000044
 80007a8:	20000060 	.word	0x20000060
 80007ac:	20000070 	.word	0x20000070
 80007b0:	2000004c 	.word	0x2000004c
 80007b4:	20000058 	.word	0x20000058
 80007b8:	20000125 	.word	0x20000125

080007bc <resetPins>:

void resetPins(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e00e      	b.n	80007e6 <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <resetPins+0xc0>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007d0:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <resetPins+0xc4>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	f002 fe52 	bl	8003484 <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	dded      	ble.n	80007c8 <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e01a      	b.n	8000828 <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <resetPins+0xc8>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <resetPins+0xcc>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	f002 fe3d 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800080a:	4a20      	ldr	r2, [pc, #128]	; (800088c <resetPins+0xd0>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <resetPins+0xd4>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081a:	2200      	movs	r2, #0
 800081c:	4619      	mov	r1, r3
 800081e:	f002 fe31 	bl	8003484 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3301      	adds	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b02      	cmp	r3, #2
 800082c:	dde1      	ble.n	80007f2 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e01a      	b.n	800086a <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <resetPins+0xd8>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <resetPins+0xdc>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	f002 fe1c 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <resetPins+0xe0>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <resetPins+0xe4>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	f002 fe10 	bl	8003484 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b03      	cmp	r3, #3
 800086e:	dde1      	ble.n	8000834 <resetPins+0x78>
	}



}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000
 8000880:	20000014 	.word	0x20000014
 8000884:	20000038 	.word	0x20000038
 8000888:	20000044 	.word	0x20000044
 800088c:	2000004c 	.word	0x2000004c
 8000890:	20000058 	.word	0x20000058
 8000894:	20000020 	.word	0x20000020
 8000898:	20000030 	.word	0x20000030
 800089c:	20000060 	.word	0x20000060
 80008a0:	20000070 	.word	0x20000070

080008a4 <getNumOfDaysInMonth>:





uint8_t getNumOfDaysInMonth(uint8_t N){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d011      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d00e      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	d00b      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d008      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d005      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b0a      	cmp	r3, #10
 80008d0:	d002      	beq.n	80008d8 <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b0c      	cmp	r3, #12
 80008d6:	d101      	bne.n	80008dc <getNumOfDaysInMonth+0x38>
	        return 31;
 80008d8:	231f      	movs	r3, #31
 80008da:	e013      	b.n	8000904 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d008      	beq.n	80008f4 <getNumOfDaysInMonth+0x50>
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d005      	beq.n	80008f4 <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	d002      	beq.n	80008f4 <getNumOfDaysInMonth+0x50>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b0b      	cmp	r3, #11
 80008f2:	d101      	bne.n	80008f8 <getNumOfDaysInMonth+0x54>
	        return 30;
 80008f4:	231e      	movs	r3, #30
 80008f6:	e005      	b.n	8000904 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d101      	bne.n	8000902 <getNumOfDaysInMonth+0x5e>
	        return 28;
 80008fe:	231c      	movs	r3, #28
 8000900:	e000      	b.n	8000904 <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 8000902:	2300      	movs	r3, #0
	    }

}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <FLASH_init>:

/* ===== FLASH INIT ===== */
uint16_t search_word[12];


void FLASH_init(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <FLASH_init+0x20>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <FLASH_init+0x24>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 255, FLASHTX_BUFF_SIZE);
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <FLASH_init+0x28>)
 8000926:	f00a f92d 	bl	800ab84 <memset>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000010c 	.word	0x2000010c
 8000934:	2000010d 	.word	0x2000010d
 8000938:	200001ac 	.word	0x200001ac

0800093c <HAL_I2C_MemTxCpltCallback>:

}



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <Flash_flush>:





void Flash_flush(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 8000956:	23ff      	movs	r3, #255	; 0xff
 8000958:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	e010      	b.n	8000982 <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b29a      	uxth	r2, r3
 8000964:	2301      	movs	r3, #1
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	21a0      	movs	r1, #160	; 0xa0
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <Flash_flush+0x44>)
 8000972:	f003 f845 	bl	8003a00 <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 8000976:	2005      	movs	r0, #5
 8000978:	f002 f90a 	bl	8002b90 <HAL_Delay>
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3301      	adds	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b80      	cmp	r3, #128	; 0x80
 8000986:	ddeb      	ble.n	8000960 <Flash_flush+0x10>
	}
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200002ac 	.word	0x200002ac

08000998 <Flash_write>:



uint8_t bt = 0;

void Flash_write(uint8_t data[], int start_idx){
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 80009a2:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <Flash_write+0x80>)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	6013      	str	r3, [r2, #0]



		uint8_t arr_size = 6;
 80009a8:	2306      	movs	r3, #6
 80009aa:	72fb      	strb	r3, [r7, #11]

		//control memory
		if(counter >= FLASHTX_BUFF_SIZE - arr_size - 1){
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <Flash_write+0x80>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	dc02      	bgt.n	80009c0 <Flash_write+0x28>
			counter = 0;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <Flash_write+0x80>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
		}


		Send("Counter at: %d\r\n", counter);
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <Flash_write+0x80>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <Flash_write+0x84>)
 80009c8:	f000 fd82 	bl	80014d0 <Send>

		for(int i = 0; i < arr_size ; i++){
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e019      	b.n	8000a06 <Flash_write+0x6e>

			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <Flash_write+0x80>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b299      	uxth	r1, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	9201      	str	r2, [sp, #4]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2301      	movs	r3, #1
 80009e6:	460a      	mov	r2, r1
 80009e8:	21a0      	movs	r1, #160	; 0xa0
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <Flash_write+0x88>)
 80009ec:	f003 f808 	bl	8003a00 <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];

			counter++;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <Flash_write+0x80>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <Flash_write+0x80>)
 80009f8:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 80009fa:	2005      	movs	r0, #5
 80009fc:	f002 f8c8 	bl	8002b90 <HAL_Delay>
		for(int i = 0; i < arr_size ; i++){
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbe1      	blt.n	80009d2 <Flash_write+0x3a>
		}

}
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000108 	.word	0x20000108
 8000a1c:	0800c7f4 	.word	0x0800c7f4
 8000a20:	200002ac 	.word	0x200002ac

08000a24 <Flash_read>:


void Flash_read(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af04      	add	r7, sp, #16
	FLASH_init();
 8000a2a:	f7ff ff71 	bl	8000910 <FLASH_init>

	uint8_t byte = 0x00;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	717b      	strb	r3, [r7, #5]
	uint8_t data_found = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]


	uint8_t page = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	71bb      	strb	r3, [r7, #6]
	for(page = 0; page <= 128; page++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71bb      	strb	r3, [r7, #6]
 8000a3e:	e031      	b.n	8000aa4 <Flash_read+0x80>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, page, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d7b      	adds	r3, r7, #5
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	21a1      	movs	r1, #161	; 0xa1
 8000a56:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <Flash_read+0x90>)
 8000a58:	f002 feaa 	bl	80037b0 <HAL_I2C_Mem_Read>

		//if byte is found then start downloading bytes to buffer
		if(byte != 0x00 ){
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <Flash_read+0x42>
			//FlashTx_buff[Tx_busy++] = byte;
			data_found = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]

		}

		if(data_found == 1){
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d118      	bne.n	8000a9e <Flash_read+0x7a>
				FlashTx_buff[FlashTx_busy++] = byte;
 8000a6c:	7979      	ldrb	r1, [r7, #5]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <Flash_read+0x94>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	b2d0      	uxtb	r0, r2
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <Flash_read+0x94>)
 8000a78:	7010      	strb	r0, [r2, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	b289      	uxth	r1, r1
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <Flash_read+0x98>)
 8000a80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(FlashTx_busy >= FLASHTX_BUFF_SIZE){
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <Flash_read+0x94>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da02      	bge.n	8000a94 <Flash_read+0x70>
					FlashTx_busy = 0;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <Flash_read+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
				}
				//if too many zeros found stop downlaoding to save only data
				if(byte == 0x00 ){
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <Flash_read+0x7a>
					data_found = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	for(page = 0; page <= 128; page++){
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71bb      	strb	r3, [r7, #6]
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d9ca      	bls.n	8000a40 <Flash_read+0x1c>

}



}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200002ac 	.word	0x200002ac
 8000ab8:	2000010d 	.word	0x2000010d
 8000abc:	200001ac 	.word	0x200001ac

08000ac0 <Flash_delete>:


void Flash_delete(uint8_t day, uint8_t month, uint8_t hour, uint8_t minute, uint8_t second){
 8000ac0:	b490      	push	{r4, r7}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4623      	mov	r3, r4
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71bb      	strb	r3, [r7, #6]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	717b      	strb	r3, [r7, #5]
 8000ada:	4613      	mov	r3, r2
 8000adc:	713b      	strb	r3, [r7, #4]


	uint8_t byte = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	72fb      	strb	r3, [r7, #11]
	uint8_t data_found = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	72bb      	strb	r3, [r7, #10]



	for(int i = 0; i <= 128; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e058      	b.n	8000b9e <Flash_delete+0xde>



		if(FlashTx_buff[i] == second && FlashTx_buff[i - 1] == minute && FlashTx_buff[i - 2] == hour && FlashTx_buff[i - 3] == 22 && FlashTx_buff[i - 4] == month && FlashTx_buff[i - 5 ] == day){
 8000aec:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <Flash_delete+0xf0>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000af4:	7e3b      	ldrb	r3, [r7, #24]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d14d      	bne.n	8000b98 <Flash_delete+0xd8>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <Flash_delete+0xf0>)
 8000b02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b06:	793b      	ldrb	r3, [r7, #4]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d144      	bne.n	8000b98 <Flash_delete+0xd8>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3b02      	subs	r3, #2
 8000b12:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <Flash_delete+0xf0>)
 8000b14:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b18:	797b      	ldrb	r3, [r7, #5]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d13b      	bne.n	8000b98 <Flash_delete+0xd8>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3b03      	subs	r3, #3
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <Flash_delete+0xf0>)
 8000b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2a:	2b16      	cmp	r3, #22
 8000b2c:	d134      	bne.n	8000b98 <Flash_delete+0xd8>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3b04      	subs	r3, #4
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <Flash_delete+0xf0>)
 8000b34:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d12b      	bne.n	8000b98 <Flash_delete+0xd8>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3b05      	subs	r3, #5
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <Flash_delete+0xf0>)
 8000b46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d122      	bne.n	8000b98 <Flash_delete+0xd8>
			FlashTx_buff[i] = 255;
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <Flash_delete+0xf0>)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	21ff      	movs	r1, #255	; 0xff
 8000b58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlashTx_buff[i - 1] = 255;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <Flash_delete+0xf0>)
 8000b62:	21ff      	movs	r1, #255	; 0xff
 8000b64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlashTx_buff[i - 2] = 255;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <Flash_delete+0xf0>)
 8000b6e:	21ff      	movs	r1, #255	; 0xff
 8000b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlashTx_buff[i -3] = 255;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3b03      	subs	r3, #3
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <Flash_delete+0xf0>)
 8000b7a:	21ff      	movs	r1, #255	; 0xff
 8000b7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlashTx_buff[i -4] = 255;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3b04      	subs	r3, #4
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <Flash_delete+0xf0>)
 8000b86:	21ff      	movs	r1, #255	; 0xff
 8000b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlashTx_buff[i - 5] = 255;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3b05      	subs	r3, #5
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <Flash_delete+0xf0>)
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 128; i++){
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b80      	cmp	r3, #128	; 0x80
 8000ba2:	dda3      	ble.n	8000aec <Flash_delete+0x2c>


	}


}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc90      	pop	{r4, r7}
 8000bae:	4770      	bx	lr
 8000bb0:	200001ac 	.word	0x200001ac

08000bb4 <Flash_getFreeSpace>:


// function to get first free address to write to
int Flash_getFreeSpace(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 8000bc2:	e010      	b.n	8000be6 <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	1cfb      	adds	r3, r7, #3
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	21a1      	movs	r1, #161	; 0xa1
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <Flash_getFreeSpace+0x44>)
 8000bdc:	f002 fde8 	bl	80037b0 <HAL_I2C_Mem_Read>
		i++;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2bff      	cmp	r3, #255	; 0xff
 8000bea:	d1eb      	bne.n	8000bc4 <Flash_getFreeSpace+0x10>

	}
	return i;
 8000bec:	687b      	ldr	r3, [r7, #4]


}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002ac 	.word	0x200002ac

08000bfc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a68      	ldr	r2, [pc, #416]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a62      	ldr	r2, [pc, #392]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a5c      	ldr	r2, [pc, #368]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a56      	ldr	r2, [pc, #344]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b54      	ldr	r3, [pc, #336]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b51      	ldr	r3, [pc, #324]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a50      	ldr	r2, [pc, #320]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f641 515f 	movw	r1, #7519	; 0x1d5f
 8000c90:	484a      	ldr	r0, [pc, #296]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000c92:	f002 fbf7 	bl	8003484 <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f002 fbf0 	bl	8003484 <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000caa:	4845      	ldr	r0, [pc, #276]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000cac:	f002 fbea 	bl	8003484 <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <MX_GPIO_Init+0x1c8>)
 8000cb6:	f002 fbe5 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483a      	ldr	r0, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000cd2:	f002 f945 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000cd6:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000cda:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4833      	ldr	r0, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000cf0:	f002 f936 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 8000cf4:	f248 2313 	movw	r3, #33299	; 0x8213
 8000cf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f002 f928 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000d10:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 8000d14:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f002 f918 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000d30:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	481d      	ldr	r0, [pc, #116]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000d46:	f002 f90b 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000d4a:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000d4e:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000d64:	f002 f8fc 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000d68:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000d6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000d7e:	f002 f8ef 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000d82:	2304      	movs	r3, #4
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <MX_GPIO_Init+0x1c8>)
 8000d9a:	f002 f8e1 	bl	8002f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f002 f808 	bl	8002db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f002 f831 	bl	8002e10 <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	48000c00 	.word	0x48000c00

08000dc8 <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000dce:	f000 fdf9 	bl	80019c4 <parseIntData>
 8000dd2:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d002      	beq.n	8000de0 <handleSetClockMode+0x18>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d117      	bne.n	8000e10 <handleSetClockMode+0x48>

			clock_mode = mode;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <handleSetClockMode+0x58>)
 8000de6:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d10c      	bne.n	8000e08 <handleSetClockMode+0x40>
				resetPins();
 8000dee:	f7ff fce5 	bl	80007bc <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <handleSetClockMode+0x5c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <handleSetClockMode+0x60>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <handleSetClockMode+0x64>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	f7ff fbfe 	bl	8000604 <displayHour>
			}

			Send("$Success=1#\r\n");
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <handleSetClockMode+0x68>)
 8000e0a:	f000 fb61 	bl	80014d0 <Send>
		if(mode == 1 || mode == 2){
 8000e0e:	e003      	b.n	8000e18 <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f001 f97f 	bl	8002114 <sendFail>
		}


}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000078 	.word	0x20000078
 8000e24:	20000140 	.word	0x20000140
 8000e28:	20000141 	.word	0x20000141
 8000e2c:	20000142 	.word	0x20000142
 8000e30:	0800c808 	.word	0x0800c808

08000e34 <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000e46:	f7ff fcb9 	bl	80007bc <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00c      	beq.n	8000e6a <handleShowHour+0x36>
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b16      	cmp	r3, #22
 8000e54:	d809      	bhi.n	8000e6a <handleShowHour+0x36>
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	2b3b      	cmp	r3, #59	; 0x3b
 8000e5a:	d806      	bhi.n	8000e6a <handleShowHour+0x36>
 8000e5c:	797b      	ldrb	r3, [r7, #5]
 8000e5e:	2b3b      	cmp	r3, #59	; 0x3b
 8000e60:	d803      	bhi.n	8000e6a <handleShowHour+0x36>

			 hour_displayed = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <handleShowHour+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e003      	b.n	8000e72 <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f001 f952 	bl	8002114 <sendFail>
	        }


}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000125 	.word	0x20000125

08000e80 <compareAlarms>:

//compare alarms that are set
/**
 * @returns earlier alarm in form of 1/2
 */
uint8_t compareAlarms(RTC_AlarmTypeDef alarmA, RTC_AlarmTypeDef alarmB){
 8000e80:	b084      	sub	sp, #16
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	f107 0c10 	add.w	ip, r7, #16
 8000e8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			//todo
			//add month checking
			uint8_t alarmA_day = alarmA.AlarmDateWeekDay;
 8000e90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e94:	71fb      	strb	r3, [r7, #7]
			uint8_t alarmA_hours = alarmA.AlarmTime.Hours;
 8000e96:	7c3b      	ldrb	r3, [r7, #16]
 8000e98:	71bb      	strb	r3, [r7, #6]
			uint8_t alarmA_minutes = alarmA.AlarmTime.Minutes;
 8000e9a:	7c7b      	ldrb	r3, [r7, #17]
 8000e9c:	717b      	strb	r3, [r7, #5]
			uint8_t alarmA_seconds = alarmA.AlarmTime.Seconds;
 8000e9e:	7cbb      	ldrb	r3, [r7, #18]
 8000ea0:	713b      	strb	r3, [r7, #4]

			uint8_t alarmB_day = alarmB.AlarmDateWeekDay;
 8000ea2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000ea6:	70fb      	strb	r3, [r7, #3]
			uint8_t alarmB_hours = alarmB.AlarmTime.Hours;
 8000ea8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000eac:	70bb      	strb	r3, [r7, #2]
			uint8_t alarmB_minutes = alarmB.AlarmTime.Minutes;
 8000eae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000eb2:	707b      	strb	r3, [r7, #1]
			uint8_t alarmB_seconds = alarmB.AlarmTime.Seconds;
 8000eb4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000eb8:	703b      	strb	r3, [r7, #0]

			if(alarmA_day == alarmB_day){ //check if day is same if yes - check if hour is the same
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d125      	bne.n	8000f0e <compareAlarms+0x8e>

				if(alarmA_hours == alarmB_hours){
 8000ec2:	79ba      	ldrb	r2, [r7, #6]
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d119      	bne.n	8000efe <compareAlarms+0x7e>

					if(alarmA_minutes == alarmB_minutes){
 8000eca:	797a      	ldrb	r2, [r7, #5]
 8000ecc:	787b      	ldrb	r3, [r7, #1]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10d      	bne.n	8000eee <compareAlarms+0x6e>


						if(alarmA_seconds == alarmB_seconds){
 8000ed2:	793a      	ldrb	r2, [r7, #4]
 8000ed4:	783b      	ldrb	r3, [r7, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d101      	bne.n	8000ede <compareAlarms+0x5e>
							return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e01e      	b.n	8000f1c <compareAlarms+0x9c>
						} else {
							if(alarmA_seconds < alarmB_seconds){
 8000ede:	793a      	ldrb	r2, [r7, #4]
 8000ee0:	783b      	ldrb	r3, [r7, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d201      	bcs.n	8000eea <compareAlarms+0x6a>
								return 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e018      	b.n	8000f1c <compareAlarms+0x9c>
							} else {
								return 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	e016      	b.n	8000f1c <compareAlarms+0x9c>



					}else {

						if(alarmA_minutes < alarmB_minutes){
 8000eee:	797a      	ldrb	r2, [r7, #5]
 8000ef0:	787b      	ldrb	r3, [r7, #1]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d201      	bcs.n	8000efa <compareAlarms+0x7a>
							return 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e010      	b.n	8000f1c <compareAlarms+0x9c>
						} else {
							return 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	e00e      	b.n	8000f1c <compareAlarms+0x9c>
						}
					}

				} else {

					if(alarmA_hours < alarmB_hours){
 8000efe:	79ba      	ldrb	r2, [r7, #6]
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d201      	bcs.n	8000f0a <compareAlarms+0x8a>

						return 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e008      	b.n	8000f1c <compareAlarms+0x9c>
					} else {
						return 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e006      	b.n	8000f1c <compareAlarms+0x9c>
					}

				}
			} else {
				if(alarmA_day < alarmB_day){
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d201      	bcs.n	8000f1a <compareAlarms+0x9a>
					return 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <compareAlarms+0x9c>
				} else {
					return 2;
 8000f1a:	2302      	movs	r3, #2
				}

			}


}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	b004      	add	sp, #16
 8000f28:	4770      	bx	lr
	...

08000f2c <getAlarm>:


/**
 * @param INT {alarm} 1 for alarm A 2 for alarmB
 */
RTC_AlarmTypeDef getAlarm(uint8_t whichAlarm){
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef alarm;

	switch(whichAlarm){
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d002      	beq.n	8000f44 <getAlarm+0x18>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d009      	beq.n	8000f56 <getAlarm+0x2a>
 8000f42:	e011      	b.n	8000f68 <getAlarm+0x3c>
	case 1:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000f44:	f107 0108 	add.w	r1, r7, #8
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <getAlarm+0x5c>)
 8000f50:	f007 f972 	bl	8008238 <HAL_RTC_GetAlarm>
		break;
 8000f54:	e008      	b.n	8000f68 <getAlarm+0x3c>
	case 2:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8000f56:	f107 0108 	add.w	r1, r7, #8
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <getAlarm+0x5c>)
 8000f62:	f007 f969 	bl	8008238 <HAL_RTC_GetAlarm>
		break;
 8000f66:	bf00      	nop
	}



	return alarm;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	f107 0408 	add.w	r4, r7, #8
 8000f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f7c:	e885 0003 	stmia.w	r5, {r0, r1}




}
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bdb0      	pop	{r4, r5, r7, pc}
 8000f88:	200005c8 	.word	0x200005c8

08000f8c <handleSetAlarm>:
uint8_t getWeekDay(){
	return getDate().WeekDay;
}

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second){
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0a4      	sub	sp, #144	; 0x90
 8000f90:	af10      	add	r7, sp, #64	; 0x40
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	70fb      	strb	r3, [r7, #3]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70bb      	strb	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]



	//i sprawdzac czy juz jest ten dzien i zaprogramowac alarm na najblizszy dzien

	uint8_t max_days = getNumOfDaysInMonth(month); //get maximum days in a month
 8000fa6:	78bb      	ldrb	r3, [r7, #2]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc7b 	bl	80008a4 <getNumOfDaysInMonth>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//fill array to encode it and save to flash
	uint8_t alarm_to_set[7];
	uint8_t alarm_to_backup[7];

	RTC_DateTypeDef currentDate ;
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4870      	ldr	r0, [pc, #448]	; (8001180 <handleSetAlarm+0x1f4>)
 8000fbe:	f006 fdf3 	bl	8007ba8 <HAL_RTC_GetDate>
	Send("Current date: %d/%d", currentDate.Month, currentDate.Date);
 8000fc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fcc:	461a      	mov	r2, r3
 8000fce:	486d      	ldr	r0, [pc, #436]	; (8001184 <handleSetAlarm+0x1f8>)
 8000fd0:	f000 fa7e 	bl	80014d0 <Send>


	if(year >= 22 && (day > 0 && day <= max_days) && (month > 0 && month <= 12)){
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	2b15      	cmp	r3, #21
 8000fd8:	f240 80c9 	bls.w	800116e <handleSetAlarm+0x1e2>
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80c5 	beq.w	800116e <handleSetAlarm+0x1e2>
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fea:	429a      	cmp	r2, r3
 8000fec:	f200 80bf 	bhi.w	800116e <handleSetAlarm+0x1e2>
 8000ff0:	78bb      	ldrb	r3, [r7, #2]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80bb 	beq.w	800116e <handleSetAlarm+0x1e2>
 8000ff8:	78bb      	ldrb	r3, [r7, #2]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	f200 80b7 	bhi.w	800116e <handleSetAlarm+0x1e2>
		if(currentDate.Month <= month && currentDate.Date <= day){
 8001000:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001004:	78ba      	ldrb	r2, [r7, #2]
 8001006:	429a      	cmp	r2, r3

		}


			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8001008:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80aa 	beq.w	8001166 <handleSetAlarm+0x1da>
 8001012:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001016:	2b17      	cmp	r3, #23
 8001018:	f200 80a5 	bhi.w	8001166 <handleSetAlarm+0x1da>
 800101c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001020:	2b3b      	cmp	r3, #59	; 0x3b
 8001022:	f200 80a0 	bhi.w	8001166 <handleSetAlarm+0x1da>
 8001026:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800102a:	2b3b      	cmp	r3, #59	; 0x3b
 800102c:	f200 809b 	bhi.w	8001166 <handleSetAlarm+0x1da>

				alarm_to_set[0] = day;
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				alarm_to_set[1] = month;
 8001036:	78bb      	ldrb	r3, [r7, #2]
 8001038:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				alarm_to_set[2] = year;
 800103c:	883b      	ldrh	r3, [r7, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				alarm_to_set[3] = hour;
 8001044:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001048:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				alarm_to_set[4] = minute;
 800104c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001050:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				alarm_to_set[5] = second;
 8001054:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001058:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				alarm_to_set[6] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46





			sAlarm.AlarmTime.Hours = hour;
 8001062:	4a49      	ldr	r2, [pc, #292]	; (8001188 <handleSetAlarm+0x1fc>)
 8001064:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001068:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 800106a:	4a47      	ldr	r2, [pc, #284]	; (8001188 <handleSetAlarm+0x1fc>)
 800106c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001070:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = second;
 8001072:	4a45      	ldr	r2, [pc, #276]	; (8001188 <handleSetAlarm+0x1fc>)
 8001074:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001078:	7093      	strb	r3, [r2, #2]
			sAlarm.AlarmDateWeekDay = day;
 800107a:	4a43      	ldr	r2, [pc, #268]	; (8001188 <handleSetAlarm+0x1fc>)
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	f882 3020 	strb.w	r3, [r2, #32]



			int start_idx = Flash_getFreeSpace() - 1;
 8001082:	f7ff fd97 	bl	8000bb4 <Flash_getFreeSpace>
 8001086:	4603      	mov	r3, r0
 8001088:	3b01      	subs	r3, #1
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48


			Send("Start idx: %d\r\n", start_idx);
 800108c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800108e:	483f      	ldr	r0, [pc, #252]	; (800118c <handleSetAlarm+0x200>)
 8001090:	f000 fa1e 	bl	80014d0 <Send>




			//get two already defined alarms
			RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff46 	bl	8000f2c <getAlarm>

					alarm_to_backup[0] = alarmA.AlarmDateWeekDay;
 80010a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					alarm_to_backup[1] = 02;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					alarm_to_backup[2] = year;
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					alarm_to_backup[3] = alarmA.AlarmTime.Hours;
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					alarm_to_backup[4] = alarmA.AlarmTime.Minutes;
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					alarm_to_backup[5] = alarmA.AlarmTime.Seconds;
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					alarm_to_backup[6] = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
//			Send("AlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//					alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);


			//check which of the two is earlier
			uint8_t earlierAlarm = compareAlarms(alarmA, sAlarm);
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <handleSetAlarm+0x1fc>)
 80010d0:	ac06      	add	r4, sp, #24
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80010e4:	466d      	mov	r5, sp
 80010e6:	f107 041c 	add.w	r4, r7, #28
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fc:	f7ff fec0 	bl	8000e80 <compareAlarms>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			//if alarm is earlier set that alarm set that alarm
			if(earlierAlarm == 2 ){
 8001106:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800110a:	2b02      	cmp	r3, #2
 800110c:	d11e      	bne.n	800114c <handleSetAlarm+0x1c0>
				 sAlarm.Alarm = RTC_ALARM_A;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <handleSetAlarm+0x1fc>)
 8001110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
				 Flash_write(alarm_to_backup, start_idx);
 8001116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800111a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc3b 	bl	8000998 <Flash_write>
				 Send("$Success=1#\r\n");
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <handleSetAlarm+0x204>)
 8001124:	f000 f9d4 	bl	80014d0 <Send>

				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8001128:	e004      	b.n	8001134 <handleSetAlarm+0x1a8>
						Error_Handler();
 800112a:	f001 f921 	bl	8002370 <Error_Handler>
						sendFail(4);
 800112e:	2004      	movs	r0, #4
 8001130:	f000 fff0 	bl	8002114 <sendFail>
				 while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8001134:	2200      	movs	r2, #0
 8001136:	4914      	ldr	r1, [pc, #80]	; (8001188 <handleSetAlarm+0x1fc>)
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <handleSetAlarm+0x1f4>)
 800113a:	f006 fd91 	bl	8007c60 <HAL_RTC_SetAlarm_IT>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f2      	bne.n	800112a <handleSetAlarm+0x19e>
				 };

				 HAL_Delay(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f001 fd23 	bl	8002b90 <HAL_Delay>
 800114a:	e008      	b.n	800115e <handleSetAlarm+0x1d2>

			}  else {
				Send("$Success=1#\r\n");
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <handleSetAlarm+0x204>)
 800114e:	f000 f9bf 	bl	80014d0 <Send>
				Flash_write(alarm_to_set, start_idx);
 8001152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001156:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fc1d 	bl	8000998 <Flash_write>





			handleGetAlarms();
 800115e:	f000 f829 	bl	80011b4 <handleGetAlarms>
			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8001162:	bf00      	nop
 8001164:	e007      	b.n	8001176 <handleSetAlarm+0x1ea>

			} else { //send fail if data not correct
				sendFail(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 ffd4 	bl	8002114 <sendFail>
			if((hour > 0 && hour <= 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 800116c:	e003      	b.n	8001176 <handleSetAlarm+0x1ea>
			}


		} else {
			sendFail(2);
 800116e:	2002      	movs	r0, #2
 8001170:	f000 ffd0 	bl	8002114 <sendFail>
		}
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bdb0      	pop	{r4, r5, r7, pc}
 800117e:	bf00      	nop
 8001180:	200005c8 	.word	0x200005c8
 8001184:	0800c818 	.word	0x0800c818
 8001188:	2000039c 	.word	0x2000039c
 800118c:	0800c82c 	.word	0x0800c82c
 8001190:	0800c808 	.word	0x0800c808

08001194 <handleResetAlarms>:


void handleResetAlarms(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	Flash_flush();
 8001198:	f7ff fbda 	bl	8000950 <Flash_flush>
	FLASH_init();
 800119c:	f7ff fbb8 	bl	8000910 <FLASH_init>
	Alarms_init();
 80011a0:	f7ff f920 	bl	80003e4 <Alarms_init>
	Send("$Success=1#\r\n");
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <handleResetAlarms+0x1c>)
 80011a6:	f000 f993 	bl	80014d0 <Send>



}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800c808 	.word	0x0800c808

080011b4 <handleGetAlarms>:



void handleGetAlarms(){
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b09b      	sub	sp, #108	; 0x6c
 80011b8:	af06      	add	r7, sp, #24

	Flash_read();
 80011ba:	f7ff fc33 	bl	8000a24 <Flash_read>


	RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff feb1 	bl	8000f2c <getAlarm>
	RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff feac 	bl	8000f2c <getAlarm>


		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 80011d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011d8:	461d      	mov	r5, r3
 80011da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011de:	461e      	mov	r6, r3
 80011e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80011e4:	469c      	mov	ip, r3
 80011e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
							alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes, alarmA.AlarmTime.Seconds);
 80011ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ee:	7839      	ldrb	r1, [r7, #0]
 80011f0:	7878      	ldrb	r0, [r7, #1]
 80011f2:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 80011f6:	9404      	str	r4, [sp, #16]
 80011f8:	9003      	str	r0, [sp, #12]
 80011fa:	9102      	str	r1, [sp, #8]
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4663      	mov	r3, ip
 8001202:	4632      	mov	r2, r6
 8001204:	4629      	mov	r1, r5
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <handleGetAlarms+0x60>)
 8001208:	f000 f962 	bl	80014d0 <Send>

	//parseAlarms(FlashTx_buff);


}
 800120c:	bf00      	nop
 800120e:	3754      	adds	r7, #84	; 0x54
 8001210:	46bd      	mov	sp, r7
 8001212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001214:	0800c83c 	.word	0x0800c83c

08001218 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_I2C1_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <MX_I2C1_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_I2C1_Init+0x74>)
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <MX_I2C1_Init+0x7c>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_I2C1_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_I2C1_Init+0x74>)
 8001254:	f002 f992 	bl	800357c <HAL_I2C_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800125e:	f001 f887 	bl	8002370 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_I2C1_Init+0x74>)
 8001266:	f004 f873 	bl	8005350 <HAL_I2CEx_ConfigAnalogFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001270:	f001 f87e 	bl	8002370 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_I2C1_Init+0x74>)
 8001278:	f004 f8da 	bl	8005430 <HAL_I2CEx_ConfigDigitalFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f001 f875 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002ac 	.word	0x200002ac
 8001290:	40005400 	.word	0x40005400
 8001294:	2000090e 	.word	0x2000090e

08001298 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_I2C_MspInit+0x8c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12f      	bne.n	800131a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_I2C_MspInit+0x90>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_I2C_MspInit+0x90>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_I2C_MspInit+0x90>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23c0      	movs	r3, #192	; 0xc0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e2:	2304      	movs	r3, #4
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <HAL_I2C_MspInit+0x94>)
 80012ee:	f001 fe37 	bl	8002f60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0x90>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_I2C_MspInit+0x90>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_I2C_MspInit+0x90>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	201f      	movs	r0, #31
 8001310:	f001 fd52 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001314:	201f      	movs	r0, #31
 8001316:	f001 fd7b 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	x1hzTime++;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <delay_1hz+0x30>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <delay_1hz+0x30>)
 800133e:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <delay_1hz+0x30>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001348:	d305      	bcc.n	8001356 <delay_1hz+0x26>
		x1hz = 1;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <delay_1hz+0x34>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <delay_1hz+0x30>)
 8001352:	2200      	movs	r2, #0
 8001354:	801a      	strh	r2, [r3, #0]
	}
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	2000010e 	.word	0x2000010e
 8001364:	20000112 	.word	0x20000112

08001368 <delay_4hz>:

void delay_4hz(){
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	x4hzTime++;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <delay_4hz+0x30>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <delay_4hz+0x30>)
 8001376:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <delay_4hz+0x30>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2bf9      	cmp	r3, #249	; 0xf9
 800137e:	d905      	bls.n	800138c <delay_4hz+0x24>
		x4hz = 1;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <delay_4hz+0x34>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <delay_4hz+0x30>)
 8001388:	2200      	movs	r2, #0
 800138a:	801a      	strh	r2, [r3, #0]
	}

}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000110 	.word	0x20000110
 800139c:	20000113 	.word	0x20000113

080013a0 <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <delayUs+0x30>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80013b2:	bf00      	nop
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <delayUs+0x34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3f9      	bcc.n	80013b4 <delayUs+0x14>
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000a40 	.word	0x20000a40
 80013d4:	200009f4 	.word	0x200009f4

080013d8 <delayMs>:

void delayMs(uint16_t ms){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	81fb      	strh	r3, [r7, #14]
 80013e6:	e006      	b.n	80013f6 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f7ff ffd8 	bl	80013a0 <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	3301      	adds	r3, #1
 80013f4:	81fb      	strh	r3, [r7, #14]
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3f4      	bcc.n	80013e8 <delayMs+0x10>
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <handleBlinkCommand+0x60>)
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <handleBlinkCommand+0x64>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	d805      	bhi.n	8001426 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2140      	movs	r1, #64	; 0x40
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <handleBlinkCommand+0x68>)
 8001420:	f002 f830 	bl	8003484 <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8001424:	e01e      	b.n	8001464 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <handleBlinkCommand+0x60>)
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <handleBlinkCommand+0x6c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	429a      	cmp	r2, r3
 8001432:	d805      	bhi.n	8001440 <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <handleBlinkCommand+0x68>)
 800143a:	f002 f823 	bl	8003484 <HAL_GPIO_WritePin>
}
 800143e:	e011      	b.n	8001464 <handleBlinkCommand+0x5c>
		led_delay = 0;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <handleBlinkCommand+0x60>)
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <handleBlinkCommand+0x70>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <handleBlinkCommand+0x70>)
 8001452:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <handleBlinkCommand+0x70>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <handleBlinkCommand+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000158 	.word	0x20000158
 800146c:	2000007a 	.word	0x2000007a
 8001470:	48000800 	.word	0x48000800
 8001474:	2000014c 	.word	0x2000014c
 8001478:	2000014e 	.word	0x2000014e
 800147c:	2000014b 	.word	0x2000014b

08001480 <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <UART_init+0x38>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <UART_init+0x3c>)
 800148c:	2200      	movs	r2, #0
 800148e:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <UART_init+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <UART_init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	2100      	movs	r1, #0
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <UART_init+0x48>)
 80014a4:	f009 fb6e 	bl	800ab84 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80014a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <UART_init+0x4c>)
 80014b0:	f009 fb68 	bl	800ab84 <memset>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000116 	.word	0x20000116
 80014bc:	20000118 	.word	0x20000118
 80014c0:	2000011a 	.word	0x2000011a
 80014c4:	2000011c 	.word	0x2000011c
 80014c8:	20000790 	.word	0x20000790
 80014cc:	200003c8 	.word	0x200003c8

080014d0 <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 80014d0:	b40f      	push	{r0, r1, r2, r3}
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b0c4      	sub	sp, #272	; 0x110
 80014d6:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <Send+0x110>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 80014e6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	f107 000c 	add.w	r0, r7, #12
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80014fa:	f009 fbeb 	bl	800acd4 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001504:	e020      	b.n	8001548 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f107 010c 	add.w	r1, r7, #12
 8001510:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001514:	440a      	add	r2, r1
 8001516:	7811      	ldrb	r1, [r2, #0]
 8001518:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <Send+0x114>)
 800151a:	54d1      	strb	r1, [r2, r3]
		idx++;
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	db03      	blt.n	800153e <Send+0x6e>
			idx = 0;
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 800153e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001542:	3301      	adds	r3, #1
 8001544:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe51 	bl	80001f4 <strlen>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001558:	429a      	cmp	r2, r3
 800155a:	d8d4      	bhi.n	8001506 <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <Send+0x110>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <Send+0x118>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	429a      	cmp	r2, r3
 800156e:	d127      	bne.n	80015c0 <Send+0xf0>
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <Send+0x11c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <Send+0x110>)
 8001580:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <Send+0x118>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <Send+0x114>)
 800158c:	5c9a      	ldrb	r2, [r3, r2]
 800158e:	1cfb      	adds	r3, r7, #3
 8001590:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <Send+0x118>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <Send+0x118>)
 800159e:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <Send+0x118>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015aa:	d302      	bcc.n	80015b2 <Send+0xe2>
			Tx_busy = 0;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <Send+0x118>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <Send+0x11c>)
 80015ba:	f007 fed7 	bl	800936c <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 80015be:	e005      	b.n	80015cc <Send+0xfc>

	} else {
		Tx_empty = idx;
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <Send+0x110>)
 80015ca:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015cc:	b662      	cpsie	i
}
 80015ce:	bf00      	nop
	}
	__enable_irq();


}
 80015d0:	bf00      	nop
 80015d2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015d6:	46bd      	mov	sp, r7
 80015d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015dc:	b004      	add	sp, #16
 80015de:	4770      	bx	lr
 80015e0:	2000011a 	.word	0x2000011a
 80015e4:	200003c8 	.word	0x200003c8
 80015e8:	2000011c 	.word	0x2000011c
 80015ec:	20000a8c 	.word	0x20000a8c

080015f0 <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_TxCpltCallback+0x60>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	d01d      	beq.n	8001644 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_UART_TxCpltCallback+0x64>)
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 8001622:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162e:	d302      	bcc.n	8001636 <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_UART_TxCpltCallback+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001636:	f107 030f 	add.w	r3, r7, #15
 800163a:	2201      	movs	r2, #1
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <HAL_UART_TxCpltCallback+0x68>)
 8001640:	f007 fe94 	bl	800936c <HAL_UART_Transmit_IT>
	}
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000011c 	.word	0x2000011c
 8001650:	2000011a 	.word	0x2000011a
 8001654:	200003c8 	.word	0x200003c8
 8001658:	20000a8c 	.word	0x20000a8c

0800165c <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_UART_RxCpltCallback+0x50>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d11a      	bne.n	80016a4 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 800167a:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001686:	d302      	bcc.n	800168e <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_UART_RxCpltCallback+0x58>)
 8001698:	4413      	add	r3, r2
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_UART_RxCpltCallback+0x5c>)
 80016a0:	f007 fed2 	bl	8009448 <HAL_UART_Receive_IT>


	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40004400 	.word	0x40004400
 80016b0:	20000116 	.word	0x20000116
 80016b4:	20000790 	.word	0x20000790
 80016b8:	20000a8c 	.word	0x20000a8c

080016bc <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <uart_ready+0x24>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <uart_ready+0x28>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d101      	bne.n	80016d4 <uart_ready+0x18>
		return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <uart_ready+0x1a>
	} else {
		return 1;
 80016d4:	2301      	movs	r3, #1
	}
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000116 	.word	0x20000116
 80016e4:	20000118 	.word	0x20000118

080016e8 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ======== RTC =========== */



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80016f0:	2200      	movs	r2, #0
 80016f2:	4910      	ldr	r1, [pc, #64]	; (8001734 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f006 f8bb 	bl	8007870 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80016fa:	2200      	movs	r2, #0
 80016fc:	490e      	ldr	r1, [pc, #56]	; (8001738 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f006 fa52 	bl	8007ba8 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	737b      	strb	r3, [r7, #13]


	 if(clock_mode == 1){
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	7bb9      	ldrb	r1, [r7, #14]
 8001724:	7b7a      	ldrb	r2, [r7, #13]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff6c 	bl	8000604 <displayHour>





}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000128 	.word	0x20000128
 8001738:	2000013c 	.word	0x2000013c
 800173c:	20000078 	.word	0x20000078

08001740 <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b087      	sub	sp, #28
 8001744:	af04      	add	r7, sp, #16
	uint8_t picked_command = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 800174a:	495b      	ldr	r1, [pc, #364]	; (80018b8 <parseCommand+0x178>)
 800174c:	485b      	ldr	r0, [pc, #364]	; (80018bc <parseCommand+0x17c>)
 800174e:	f7fe fd47 	bl	80001e0 <strcmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <parseCommand+0x1e>

		handleSetClockMode();
 8001758:	f7ff fb36 	bl	8000dc8 <handleSetClockMode>
 800175c:	e0a1      	b.n	80018a2 <parseCommand+0x162>


	} else if (strcmp("setTime", command) == 0){
 800175e:	4956      	ldr	r1, [pc, #344]	; (80018b8 <parseCommand+0x178>)
 8001760:	4857      	ldr	r0, [pc, #348]	; (80018c0 <parseCommand+0x180>)
 8001762:	f7fe fd3d 	bl	80001e0 <strcmp>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <parseCommand+0x60>
		parseTime();
 800176c:	f000 f8d2 	bl	8001914 <parseTime>
		resetPins();
 8001770:	f7ff f824 	bl	80007bc <resetPins>

		setTime(sTime, hour_to_show, minute_to_show, second_to_show);
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <parseCommand+0x184>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <parseCommand+0x188>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <parseCommand+0x18c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <parseCommand+0x190>)
 800178e:	9003      	str	r0, [sp, #12]
 8001790:	9102      	str	r1, [sp, #8]
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179a:	f7fe fefb 	bl	8000594 <setTime>
 800179e:	e080      	b.n	80018a2 <parseCommand+0x162>


	} else if (strcmp("getTime", command) == 0) {
 80017a0:	4945      	ldr	r1, [pc, #276]	; (80018b8 <parseCommand+0x178>)
 80017a2:	484c      	ldr	r0, [pc, #304]	; (80018d4 <parseCommand+0x194>)
 80017a4:	f7fe fd1c 	bl	80001e0 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <parseCommand+0x9c>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <parseCommand+0x190>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <parseCommand+0x190>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <parseCommand+0x190>)
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	4846      	ldr	r0, [pc, #280]	; (80018d8 <parseCommand+0x198>)
 80017c0:	f7ff fe86 	bl	80014d0 <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <parseCommand+0x19c>)
 80017c6:	789b      	ldrb	r3, [r3, #2]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <parseCommand+0x19c>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <parseCommand+0x19c>)
 80017d2:	78db      	ldrb	r3, [r3, #3]
 80017d4:	4842      	ldr	r0, [pc, #264]	; (80018e0 <parseCommand+0x1a0>)
 80017d6:	f7ff fe7b 	bl	80014d0 <Send>
 80017da:	e062      	b.n	80018a2 <parseCommand+0x162>


	}else if(strcmp("setAlarm", command) == 0){
 80017dc:	4936      	ldr	r1, [pc, #216]	; (80018b8 <parseCommand+0x178>)
 80017de:	4841      	ldr	r0, [pc, #260]	; (80018e4 <parseCommand+0x1a4>)
 80017e0:	f7fe fcfe 	bl	80001e0 <strcmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <parseCommand+0xf2>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 80017ea:	f000 f8c1 	bl	8001970 <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set, second_to_set);
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <parseCommand+0x1a8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461c      	mov	r4, r3
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <parseCommand+0x1ac>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461d      	mov	r5, r3
 80017fe:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <parseCommand+0x1b0>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461e      	mov	r6, r3
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <parseCommand+0x1b4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <parseCommand+0x1b8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <parseCommand+0x1bc>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	482f      	ldr	r0, [pc, #188]	; (80018dc <parseCommand+0x19c>)
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	9101      	str	r1, [sp, #4]
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	4633      	mov	r3, r6
 8001826:	462a      	mov	r2, r5
 8001828:	4621      	mov	r1, r4
 800182a:	6800      	ldr	r0, [r0, #0]
 800182c:	f7ff fbae 	bl	8000f8c <handleSetAlarm>
 8001830:	e037      	b.n	80018a2 <parseCommand+0x162>


	} else if(strcmp("getAlarms", command) == 0){
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <parseCommand+0x178>)
 8001834:	4832      	ldr	r0, [pc, #200]	; (8001900 <parseCommand+0x1c0>)
 8001836:	f7fe fcd3 	bl	80001e0 <strcmp>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <parseCommand+0x106>
		handleGetAlarms();
 8001840:	f7ff fcb8 	bl	80011b4 <handleGetAlarms>
 8001844:	e02d      	b.n	80018a2 <parseCommand+0x162>


	} else if (strcmp("getAlarmsCount", command) == 0){
 8001846:	491c      	ldr	r1, [pc, #112]	; (80018b8 <parseCommand+0x178>)
 8001848:	482e      	ldr	r0, [pc, #184]	; (8001904 <parseCommand+0x1c4>)
 800184a:	f7fe fcc9 	bl	80001e0 <strcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d026      	beq.n	80018a2 <parseCommand+0x162>



	} else if (strcmp("resetAlarms", command) == 0){
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <parseCommand+0x178>)
 8001856:	482c      	ldr	r0, [pc, #176]	; (8001908 <parseCommand+0x1c8>)
 8001858:	f7fe fcc2 	bl	80001e0 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d104      	bne.n	800186c <parseCommand+0x12c>
		handleResetAlarms();
 8001862:	f7ff fc97 	bl	8001194 <handleResetAlarms>
		clearAlarms();
 8001866:	f000 faad 	bl	8001dc4 <clearAlarms>
 800186a:	e01a      	b.n	80018a2 <parseCommand+0x162>


	} else if (strcmp("showHour", command) == 0){
 800186c:	4912      	ldr	r1, [pc, #72]	; (80018b8 <parseCommand+0x178>)
 800186e:	4827      	ldr	r0, [pc, #156]	; (800190c <parseCommand+0x1cc>)
 8001870:	f7fe fcb6 	bl	80001e0 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d110      	bne.n	800189c <parseCommand+0x15c>

		parseTime();
 800187a:	f000 f84b 	bl	8001914 <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <parseCommand+0x184>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <parseCommand+0x188>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <parseCommand+0x18c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	f7ff facd 	bl	8000e34 <handleShowHour>
 800189a:	e002      	b.n	80018a2 <parseCommand+0x162>

	}
	else {
		sendFail(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f000 fc39 	bl	8002114 <sendFail>
	}

	//handle picked command

	clearCommand();
 80018a2:	f000 fa6f 	bl	8001d84 <clearCommand>
	clearData();
 80018a6:	f000 fa7d 	bl	8001da4 <clearData>
	Frame_busy = 0;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <parseCommand+0x1d0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b8:	2000031c 	.word	0x2000031c
 80018bc:	0800c874 	.word	0x0800c874
 80018c0:	0800c87c 	.word	0x0800c87c
 80018c4:	20000140 	.word	0x20000140
 80018c8:	20000141 	.word	0x20000141
 80018cc:	20000142 	.word	0x20000142
 80018d0:	20000128 	.word	0x20000128
 80018d4:	0800c884 	.word	0x0800c884
 80018d8:	0800c88c 	.word	0x0800c88c
 80018dc:	2000013c 	.word	0x2000013c
 80018e0:	0800c8ac 	.word	0x0800c8ac
 80018e4:	0800c8cc 	.word	0x0800c8cc
 80018e8:	20000143 	.word	0x20000143
 80018ec:	20000144 	.word	0x20000144
 80018f0:	20000146 	.word	0x20000146
 80018f4:	20000148 	.word	0x20000148
 80018f8:	20000149 	.word	0x20000149
 80018fc:	2000014a 	.word	0x2000014a
 8001900:	0800c8d8 	.word	0x0800c8d8
 8001904:	0800c8e4 	.word	0x0800c8e4
 8001908:	0800c8f4 	.word	0x0800c8f4
 800190c:	0800c900 	.word	0x0800c900
 8001910:	2000011e 	.word	0x2000011e

08001914 <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <parseTime+0x44>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <parseTime+0x48>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <parseTime+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <parseTime+0x4c>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <parseTime+0x48>)
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <parseTime+0x44>)
 8001934:	490b      	ldr	r1, [pc, #44]	; (8001964 <parseTime+0x50>)
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <parseTime+0x54>)
 8001938:	f009 f944 	bl	800abc4 <siscanf>
 800193c:	4603      	mov	r3, r0
 800193e:	2b03      	cmp	r3, #3
 8001940:	d103      	bne.n	800194a <parseTime+0x36>

		 Send("$Success=1#\r\n");
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <parseTime+0x58>)
 8001944:	f7ff fdc4 	bl	80014d0 <Send>

	 } else {

		 sendFail(2);
	 }
}
 8001948:	e002      	b.n	8001950 <parseTime+0x3c>
		 sendFail(2);
 800194a:	2002      	movs	r0, #2
 800194c:	f000 fbe2 	bl	8002114 <sendFail>
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000140 	.word	0x20000140
 800195c:	20000141 	.word	0x20000141
 8001960:	20000142 	.word	0x20000142
 8001964:	0800c90c 	.word	0x0800c90c
 8001968:	200005e8 	.word	0x200005e8
 800196c:	0800c918 	.word	0x0800c918

08001970 <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set, &second_to_set) == 6){
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <parseDateTime+0x34>)
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <parseDateTime+0x38>)
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <parseDateTime+0x3c>)
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <parseDateTime+0x40>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <parseDateTime+0x44>)
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <parseDateTime+0x48>)
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <parseDateTime+0x4c>)
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <parseDateTime+0x50>)
 800198e:	f009 f919 	bl	800abc4 <siscanf>
 8001992:	4603      	mov	r3, r0
 8001994:	2b06      	cmp	r3, #6
 8001996:	d002      	beq.n	800199e <parseDateTime+0x2e>


	} else {
		sendFail(2);
 8001998:	2002      	movs	r0, #2
 800199a:	f000 fbbb 	bl	8002114 <sendFail>
	}
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000014a 	.word	0x2000014a
 80019a8:	20000149 	.word	0x20000149
 80019ac:	20000148 	.word	0x20000148
 80019b0:	20000146 	.word	0x20000146
 80019b4:	20000144 	.word	0x20000144
 80019b8:	20000143 	.word	0x20000143
 80019bc:	0800c928 	.word	0x0800c928
 80019c0:	200005e8 	.word	0x200005e8

080019c4 <parseIntData>:



int parseIntData(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	int single_param = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	461a      	mov	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <parseIntData+0x30>)
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <parseIntData+0x34>)
 80019d6:	f009 f8f5 	bl	800abc4 <siscanf>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <parseIntData+0x20>
		return single_param;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	e002      	b.n	80019ea <parseIntData+0x26>
	}
	else {
		sendFail(2);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f000 fb95 	bl	8002114 <sendFail>
	}


}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800c93c 	.word	0x0800c93c
 80019f8:	200005e8 	.word	0x200005e8

080019fc <parseAlarms>:
//function to parse alarms downloaded from flash

uint8_t parseAlarms(uint16_t alarms[]){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b090      	sub	sp, #64	; 0x40
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
//					alarm_to_set[2] = year;
//					alarm_to_set[3] = hour;
//					alarm_to_set[4] = minute;
//					alarm_to_set[5] = second;

	clearAlarms();
 8001a04:	f000 f9de 	bl	8001dc4 <clearAlarms>


	//arrays with separate values to find the min value


	uint8_t days_idx = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


	uint8_t months_idx = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


	uint8_t hours_idx = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d


	uint8_t minutes_idx = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c


	uint8_t seconds_idx = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	uint8_t alarms_size = 128;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	73fb      	strb	r3, [r7, #15]

	uint8_t day_start_idx = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t month_start_idx = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t year_start_idx = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
	uint8_t hour_start_idx = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t minute_start_idx = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t second_start_idx = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36



	for(int i = 0; i < alarms_size; i++){
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a50:	e020      	b.n	8001a94 <parseAlarms+0x98>
		//
		if(i == 0 ){
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <parseAlarms+0x62>
			day_start_idx = i;
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

		}
		if(i == 1){
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d102      	bne.n	8001a6a <parseAlarms+0x6e>
			month_start_idx = i;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		}
		if(i == 3){
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d102      	bne.n	8001a76 <parseAlarms+0x7a>
			hour_start_idx = i;
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		}
		if(i == 4){
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d102      	bne.n	8001a82 <parseAlarms+0x86>
			minute_start_idx = i;
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		if(i == 5){
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d102      	bne.n	8001a8e <parseAlarms+0x92>
			second_start_idx = i;
 8001a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for(int i = 0; i < alarms_size; i++){
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	3301      	adds	r3, #1
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbda      	blt.n	8001a52 <parseAlarms+0x56>
		}
	}

	//sepearte each value to different array
	//inc by 5 to check only days
	for(int i = day_start_idx; i < alarms_size; i+=6){
 8001a9c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	e017      	b.n	8001ad4 <parseAlarms+0xd8>
		if(alarms[i] != 255){
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d00d      	beq.n	8001ace <parseAlarms+0xd2>

		days[days_idx++] = alarms[i];
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	441a      	add	r2, r3
 8001aba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	f887 103f 	strb.w	r1, [r7, #63]	; 0x3f
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	8812      	ldrh	r2, [r2, #0]
 8001ac8:	4ba8      	ldr	r3, [pc, #672]	; (8001d6c <parseAlarms+0x370>)
 8001aca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = day_start_idx; i < alarms_size; i+=6){
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	3306      	adds	r3, #6
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbe3      	blt.n	8001aa4 <parseAlarms+0xa8>
		}
	}

	//check month
	for(int i = month_start_idx; i < alarms_size; i+=6){
 8001adc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	e017      	b.n	8001b14 <parseAlarms+0x118>
		if(alarms[i] != 255){
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d00d      	beq.n	8001b0e <parseAlarms+0x112>
			months[months_idx++] = alarms[i];
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	441a      	add	r2, r3
 8001afa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001afe:	1c59      	adds	r1, r3, #1
 8001b00:	f887 103e 	strb.w	r1, [r7, #62]	; 0x3e
 8001b04:	4619      	mov	r1, r3
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	4b99      	ldr	r3, [pc, #612]	; (8001d70 <parseAlarms+0x374>)
 8001b0a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = month_start_idx; i < alarms_size; i+=6){
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	3306      	adds	r3, #6
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbe3      	blt.n	8001ae4 <parseAlarms+0xe8>
		}

	}

	for(int i = hour_start_idx; i < alarms_size; i+=6){
 8001b1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e017      	b.n	8001b54 <parseAlarms+0x158>
			if(alarms[i] != 255){
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2bff      	cmp	r3, #255	; 0xff
 8001b30:	d00d      	beq.n	8001b4e <parseAlarms+0x152>
				hours[hours_idx++] = alarms[i];
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	441a      	add	r2, r3
 8001b3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 8001b44:	4619      	mov	r1, r3
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <parseAlarms+0x378>)
 8001b4a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = hour_start_idx; i < alarms_size; i+=6){
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3306      	adds	r3, #6
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbe3      	blt.n	8001b24 <parseAlarms+0x128>
			}

		}
	for(int i = minute_start_idx; i < alarms_size; i+=6){
 8001b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	e017      	b.n	8001b94 <parseAlarms+0x198>
				if(alarms[i] != 255){
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d00d      	beq.n	8001b8e <parseAlarms+0x192>
					minutes[minutes_idx++] = alarms[i];
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	441a      	add	r2, r3
 8001b7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	f887 103c 	strb.w	r1, [r7, #60]	; 0x3c
 8001b84:	4619      	mov	r1, r3
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <parseAlarms+0x37c>)
 8001b8a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = minute_start_idx; i < alarms_size; i+=6){
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	3306      	adds	r3, #6
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	6a3a      	ldr	r2, [r7, #32]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbe3      	blt.n	8001b64 <parseAlarms+0x168>
				}

			}
	for(int i = second_start_idx; i < alarms_size; i+=6){
 8001b9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e017      	b.n	8001bd4 <parseAlarms+0x1d8>
			if(alarms[i] != 255){
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d00d      	beq.n	8001bce <parseAlarms+0x1d2>
			seconds[seconds_idx++] = alarms[i];
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	441a      	add	r2, r3
 8001bba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	f887 103b 	strb.w	r1, [r7, #59]	; 0x3b
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	8812      	ldrh	r2, [r2, #0]
 8001bc8:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <parseAlarms+0x380>)
 8001bca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(int i = second_start_idx; i < alarms_size; i+=6){
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbe3      	blt.n	8001ba4 <parseAlarms+0x1a8>
		}

		}
	//parse alarm to get the earliest alarm to set

	uint8_t location_months = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	76fb      	strb	r3, [r7, #27]
	uint8_t location_days = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	76bb      	strb	r3, [r7, #26]
	uint8_t location_hours = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	767b      	strb	r3, [r7, #25]
	uint8_t location_minutes = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	763b      	strb	r3, [r7, #24]
	uint8_t location_seconds = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]


	uint8_t checker = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	737b      	strb	r3, [r7, #13]


		for(int i = 0; i < 16; i++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e06b      	b.n	8001cd2 <parseAlarms+0x2d6>
			if(months[i] > 0){
 8001bfa:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <parseAlarms+0x374>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <parseAlarms+0x228>
				if(months[i] < months[location_months]){
 8001c08:	4a59      	ldr	r2, [pc, #356]	; (8001d70 <parseAlarms+0x374>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	7efb      	ldrb	r3, [r7, #27]
 8001c14:	4956      	ldr	r1, [pc, #344]	; (8001d70 <parseAlarms+0x374>)
 8001c16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d201      	bcs.n	8001c24 <parseAlarms+0x228>
					location_months = i;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	76fb      	strb	r3, [r7, #27]
				}
			}
			if(days[i] > 0){
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <parseAlarms+0x370>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <parseAlarms+0x252>
				if(days[i] < days[location_days]){
 8001c32:	4a4e      	ldr	r2, [pc, #312]	; (8001d6c <parseAlarms+0x370>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	7ebb      	ldrb	r3, [r7, #26]
 8001c3e:	494b      	ldr	r1, [pc, #300]	; (8001d6c <parseAlarms+0x370>)
 8001c40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d201      	bcs.n	8001c4e <parseAlarms+0x252>
					location_days = i;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	76bb      	strb	r3, [r7, #26]
				}
			}
			if(hours[i] > 0){
 8001c4e:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <parseAlarms+0x378>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00d      	beq.n	8001c78 <parseAlarms+0x27c>
				if(hours[i] < hours[location_hours]){
 8001c5c:	4a45      	ldr	r2, [pc, #276]	; (8001d74 <parseAlarms+0x378>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	7e7b      	ldrb	r3, [r7, #25]
 8001c68:	4942      	ldr	r1, [pc, #264]	; (8001d74 <parseAlarms+0x378>)
 8001c6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d201      	bcs.n	8001c78 <parseAlarms+0x27c>
					location_hours = i;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	767b      	strb	r3, [r7, #25]
				}
			}
			if(minutes[i] > 0){
 8001c78:	4a3f      	ldr	r2, [pc, #252]	; (8001d78 <parseAlarms+0x37c>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <parseAlarms+0x2a6>
				if(minutes[i] < minutes[location_minutes]){
 8001c86:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <parseAlarms+0x37c>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	7e3b      	ldrb	r3, [r7, #24]
 8001c92:	4939      	ldr	r1, [pc, #228]	; (8001d78 <parseAlarms+0x37c>)
 8001c94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d201      	bcs.n	8001ca2 <parseAlarms+0x2a6>
					location_minutes = i;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	763b      	strb	r3, [r7, #24]
				}

			}
			if(seconds[i] > 0){
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <parseAlarms+0x380>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <parseAlarms+0x2d0>
				if(seconds[i] < seconds[location_seconds]){
 8001cb0:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <parseAlarms+0x380>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	492f      	ldr	r1, [pc, #188]	; (8001d7c <parseAlarms+0x380>)
 8001cbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d201      	bcs.n	8001ccc <parseAlarms+0x2d0>
					location_seconds = i;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < 16; i++){
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	dd90      	ble.n	8001bfa <parseAlarms+0x1fe>

		}


		//get the minimum month - closest alarm
		uint8_t min_day = days[location_days];
 8001cd8:	7ebb      	ldrb	r3, [r7, #26]
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <parseAlarms+0x370>)
 8001cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	733b      	strb	r3, [r7, #12]
		uint8_t min_month = months[location_months];
 8001ce4:	7efb      	ldrb	r3, [r7, #27]
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <parseAlarms+0x374>)
 8001ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	72fb      	strb	r3, [r7, #11]
		uint8_t min_hour = hours[location_hours];
 8001cf0:	7e7b      	ldrb	r3, [r7, #25]
 8001cf2:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <parseAlarms+0x378>)
 8001cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	72bb      	strb	r3, [r7, #10]
		uint8_t min_minute = minutes[location_minutes];
 8001cfc:	7e3b      	ldrb	r3, [r7, #24]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <parseAlarms+0x37c>)
 8001d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	727b      	strb	r3, [r7, #9]
		uint8_t min_second = seconds[location_seconds];
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <parseAlarms+0x380>)
 8001d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	723b      	strb	r3, [r7, #8]

		//check for same values to distinc the minimum value
		if(months[location_days] == min_month){
 8001d14:	7ebb      	ldrb	r3, [r7, #26]
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <parseAlarms+0x374>)
 8001d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d101      	bne.n	8001d2a <parseAlarms+0x32e>
			location_months = location_days;
 8001d26:	7ebb      	ldrb	r3, [r7, #26]
 8001d28:	76fb      	strb	r3, [r7, #27]
		}

		if(hours[location_minutes] == min_hour){
 8001d2a:	7e3b      	ldrb	r3, [r7, #24]
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <parseAlarms+0x378>)
 8001d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d101      	bne.n	8001d40 <parseAlarms+0x344>
			location_hours = location_minutes;
 8001d3c:	7e3b      	ldrb	r3, [r7, #24]
 8001d3e:	767b      	strb	r3, [r7, #25]
		}

		if(minutes[location_seconds] == min_second){
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <parseAlarms+0x37c>)
 8001d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	7a3b      	ldrb	r3, [r7, #8]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d101      	bne.n	8001d56 <parseAlarms+0x35a>
			location_minutes = min_second;
 8001d52:	7a3b      	ldrb	r3, [r7, #8]
 8001d54:	763b      	strb	r3, [r7, #24]
		}

		Send("Location minuets: %d  ", location_minutes);
 8001d56:	7e3b      	ldrb	r3, [r7, #24]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <parseAlarms+0x384>)
 8001d5c:	f7ff fbb8 	bl	80014d0 <Send>

		return location_minutes;
 8001d60:	7e3b      	ldrb	r3, [r7, #24]





}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3740      	adds	r7, #64	; 0x40
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002f8 	.word	0x200002f8
 8001d70:	200009d0 	.word	0x200009d0
 8001d74:	200009b0 	.word	0x200009b0
 8001d78:	20000990 	.word	0x20000990
 8001d7c:	20000668 	.word	0x20000668
 8001d80:	0800c940 	.word	0x0800c940

08001d84 <clearCommand>:



/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <clearCommand+0x18>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	2100      	movs	r1, #0
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <clearCommand+0x1c>)
 8001d94:	f008 fef6 	bl	800ab84 <memset>

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000123 	.word	0x20000123
 8001da0:	2000031c 	.word	0x2000031c

08001da4 <clearData>:

void clearData(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	data_busy = 0;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <clearData+0x18>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8001dae:	227d      	movs	r2, #125	; 0x7d
 8001db0:	2100      	movs	r1, #0
 8001db2:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <clearData+0x1c>)
 8001db4:	f008 fee6 	bl	800ab84 <memset>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000124 	.word	0x20000124
 8001dc0:	200005e8 	.word	0x200005e8

08001dc4 <clearAlarms>:

void clearAlarms(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
		memset(days, 0, sizeof(days));
 8001dc8:	2220      	movs	r2, #32
 8001dca:	2100      	movs	r1, #0
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <clearAlarms+0x3c>)
 8001dce:	f008 fed9 	bl	800ab84 <memset>
		memset(minutes, 0, sizeof(minutes));
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <clearAlarms+0x40>)
 8001dd8:	f008 fed4 	bl	800ab84 <memset>
		memset(months, 0, sizeof(months));
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2100      	movs	r1, #0
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <clearAlarms+0x44>)
 8001de2:	f008 fecf 	bl	800ab84 <memset>
		memset(seconds, 0, sizeof(seconds));
 8001de6:	2220      	movs	r2, #32
 8001de8:	2100      	movs	r1, #0
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <clearAlarms+0x48>)
 8001dec:	f008 feca 	bl	800ab84 <memset>
		memset(hours, 0, sizeof(hours));
 8001df0:	2220      	movs	r2, #32
 8001df2:	2100      	movs	r1, #0
 8001df4:	4806      	ldr	r0, [pc, #24]	; (8001e10 <clearAlarms+0x4c>)
 8001df6:	f008 fec5 	bl	800ab84 <memset>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002f8 	.word	0x200002f8
 8001e04:	20000990 	.word	0x20000990
 8001e08:	200009d0 	.word	0x200009d0
 8001e0c:	20000668 	.word	0x20000668
 8001e10:	200009b0 	.word	0x200009b0

08001e14 <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 8001e26:	2300      	movs	r3, #0
 8001e28:	757b      	strb	r3, [r7, #21]



	//check if begining exists
	if(frame[0] == start_sign){
 8001e2a:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <decodeFrame+0x158>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b24      	cmp	r3, #36	; 0x24
 8001e30:	d105      	bne.n	8001e3e <decodeFrame+0x2a>
		required_pass++;
 8001e32:	7d7b      	ldrb	r3, [r7, #21]
 8001e34:	3301      	adds	r3, #1
 8001e36:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <decodeFrame+0x158>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
		//if char was received, consider it as first sign so the length should be + 1

	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <decodeFrame+0x15c>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <decodeFrame+0x158>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	2b23      	cmp	r3, #35	; 0x23
 8001e4c:	d109      	bne.n	8001e62 <decodeFrame+0x4e>
		required_pass++;
 8001e4e:	7d7b      	ldrb	r3, [r7, #21]
 8001e50:	3301      	adds	r3, #1
 8001e52:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 8001e54:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <decodeFrame+0x15c>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <decodeFrame+0x158>)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e013      	b.n	8001e90 <decodeFrame+0x7c>
		if(frame[i] == '='){
 8001e68:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <decodeFrame+0x158>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b3d      	cmp	r3, #61	; 0x3d
 8001e72:	d10a      	bne.n	8001e8a <decodeFrame+0x76>
			required_pass++;
 8001e74:	7d7b      	ldrb	r3, [r7, #21]
 8001e76:	3301      	adds	r3, #1
 8001e78:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <decodeFrame+0x15c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dbe4      	blt.n	8001e68 <decodeFrame+0x54>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 8001e9e:	7d7b      	ldrb	r3, [r7, #21]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d12b      	bne.n	8001efc <decodeFrame+0xe8>
 8001ea4:	7dba      	ldrb	r2, [r7, #22]
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d027      	beq.n	8001efc <decodeFrame+0xe8>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8001eac:	2301      	movs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e020      	b.n	8001ef4 <decodeFrame+0xe0>

			//prevent memory leaks
			if(command_busy >= command_size){
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <decodeFrame+0x160>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da09      	bge.n	8001ed2 <decodeFrame+0xbe>
				command_busy = 0;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <decodeFrame+0x160>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	482b      	ldr	r0, [pc, #172]	; (8001f78 <decodeFrame+0x164>)
 8001eca:	f008 fe5b 	bl	800ab84 <memset>
				i = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <decodeFrame+0x160>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	b2d1      	uxtb	r1, r2
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <decodeFrame+0x160>)
 8001ede:	7011      	strb	r1, [r2, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <decodeFrame+0x158>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <decodeFrame+0x164>)
 8001eec:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	7dbb      	ldrb	r3, [r7, #22]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	ddda      	ble.n	8001eb2 <decodeFrame+0x9e>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8001efc:	7d7b      	ldrb	r3, [r7, #21]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d130      	bne.n	8001f64 <decodeFrame+0x150>
 8001f02:	7dfa      	ldrb	r2, [r7, #23]
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <decodeFrame+0x15c>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d029      	beq.n	8001f64 <decodeFrame+0x150>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	e01f      	b.n	8001f56 <decodeFrame+0x142>
			//prevent memory leaks
			if(data_busy >= data_size){
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <decodeFrame+0x168>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b7c      	cmp	r3, #124	; 0x7c
 8001f1e:	d909      	bls.n	8001f34 <decodeFrame+0x120>
				data_busy = 0;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <decodeFrame+0x168>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 8001f26:	227d      	movs	r2, #125	; 0x7d
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4815      	ldr	r0, [pc, #84]	; (8001f80 <decodeFrame+0x16c>)
 8001f2c:	f008 fe2a 	bl	800ab84 <memset>
				i = data_idx;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <decodeFrame+0x168>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	b2d1      	uxtb	r1, r2
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <decodeFrame+0x168>)
 8001f40:	7011      	strb	r1, [r2, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <decodeFrame+0x158>)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <decodeFrame+0x16c>)
 8001f4e:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <decodeFrame+0x15c>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4293      	cmp	r3, r2
 8001f62:	dbd8      	blt.n	8001f16 <decodeFrame+0x102>
		}

	}


}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000068c 	.word	0x2000068c
 8001f70:	20000120 	.word	0x20000120
 8001f74:	20000123 	.word	0x20000123
 8001f78:	2000031c 	.word	0x2000031c
 8001f7c:	20000124 	.word	0x20000124
 8001f80:	200005e8 	.word	0x200005e8

08001f84 <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <downloadFrame+0xec>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <downloadFrame+0xf0>)
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <downloadFrame+0xec>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <downloadFrame+0xec>)
 8001fa4:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <downloadFrame+0xec>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb0:	d302      	bcc.n	8001fb8 <downloadFrame+0x34>
		Rx_busy = 0;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <downloadFrame+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	2b24      	cmp	r3, #36	; 0x24
 8001fbc:	d10f      	bne.n	8001fde <downloadFrame+0x5a>
			memset(frame, 0x00, FRAME_SIZE); //reset frame #
 8001fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	482c      	ldr	r0, [pc, #176]	; (8002078 <downloadFrame+0xf4>)
 8001fc6:	f008 fddd 	bl	800ab84 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <downloadFrame+0xf8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]

			Frame_busy = 0;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <downloadFrame+0xfc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
			frameLength = 1; //set frame length to one cos $ is already in the frame
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <downloadFrame+0x100>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	e00a      	b.n	8001ff4 <downloadFrame+0x70>

		} else if(frame_found == 1){ //frame length if more than one start sign is found
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <downloadFrame+0xf8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <downloadFrame+0x70>

			frameLength++;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <downloadFrame+0x100>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <downloadFrame+0x100>)
 8001ff2:	801a      	strh	r2, [r3, #0]

		}

		//if frame found start downloading frame
		//start downloading the frame
		if(frame_found == 1){
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <downloadFrame+0xf8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10a      	bne.n	8002012 <downloadFrame+0x8e>

				//copy a frame to analyze it
					frame[Frame_busy++] = byte; //download chars
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <downloadFrame+0xfc>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	b291      	uxth	r1, r2
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <downloadFrame+0xfc>)
 8002008:	8011      	strh	r1, [r2, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <downloadFrame+0xf4>)
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	5453      	strb	r3, [r2, r1]

			}

		//check if frame is not too long
		if(frameLength >= FRAME_SIZE){
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <downloadFrame+0x100>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2bff      	cmp	r3, #255	; 0xff
 800201a:	d911      	bls.n	8002040 <downloadFrame+0xbc>
			memset(frame, 0x00, FRAME_SIZE);
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	2100      	movs	r1, #0
 8002022:	4815      	ldr	r0, [pc, #84]	; (8002078 <downloadFrame+0xf4>)
 8002024:	f008 fdae 	bl	800ab84 <memset>
			Frame_busy = 0;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <downloadFrame+0xfc>)
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <downloadFrame+0x100>)
 8002030:	2200      	movs	r2, #0
 8002032:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <downloadFrame+0xf8>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 800203a:	2004      	movs	r0, #4
 800203c:	f000 f86a 	bl	8002114 <sendFail>
		}


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b23      	cmp	r3, #35	; 0x23
 8002044:	d110      	bne.n	8002068 <downloadFrame+0xe4>
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <downloadFrame+0xf8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10c      	bne.n	8002068 <downloadFrame+0xe4>
			frame_found = 0; //stop downloading chars
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <downloadFrame+0xf8>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <downloadFrame+0xfc>)
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]

		  //if frame is received, analyze it
			decodeFrame();
 800205a:	f7ff fedb 	bl	8001e14 <decodeFrame>
			parseCommand();
 800205e:	f7ff fb6f 	bl	8001740 <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <downloadFrame+0x100>)
 8002064:	2200      	movs	r2, #0
 8002066:	801a      	strh	r2, [r3, #0]

		 }



}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000118 	.word	0x20000118
 8002074:	20000790 	.word	0x20000790
 8002078:	2000068c 	.word	0x2000068c
 800207c:	20000122 	.word	0x20000122
 8002080:	2000011e 	.word	0x2000011e
 8002084:	20000120 	.word	0x20000120

08002088 <buttonHandler>:





void buttonHandler() {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800208c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002090:	481c      	ldr	r0, [pc, #112]	; (8002104 <buttonHandler+0x7c>)
 8002092:	f001 f9d1 	bl	8003438 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d113      	bne.n	80020c4 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <buttonHandler+0x80>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <buttonHandler+0x80>)
 80020ae:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <buttonHandler+0x84>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <buttonHandler+0x88>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 80020bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80020c0:	f000 fd66 	bl	8002b90 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <buttonHandler+0x80>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10c      	bne.n	80020e6 <buttonHandler+0x5e>
			  if(x1hz == 1){
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <buttonHandler+0x84>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d114      	bne.n	80020fe <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 80020d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d8:	480a      	ldr	r0, [pc, #40]	; (8002104 <buttonHandler+0x7c>)
 80020da:	f001 fa03 	bl	80034e4 <HAL_GPIO_TogglePin>
				  x1hz = 0;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <buttonHandler+0x84>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 80020e4:	e00b      	b.n	80020fe <buttonHandler+0x76>
			  if(x4hz == 1){
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <buttonHandler+0x88>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 80020ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f2:	4804      	ldr	r0, [pc, #16]	; (8002104 <buttonHandler+0x7c>)
 80020f4:	f001 f9f6 	bl	80034e4 <HAL_GPIO_TogglePin>
				  x4hz = 0;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <buttonHandler+0x88>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	48000800 	.word	0x48000800
 8002108:	20000114 	.word	0x20000114
 800210c:	20000112 	.word	0x20000112
 8002110:	20000113 	.word	0x20000113

08002114 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4619      	mov	r1, r3
 8002122:	4803      	ldr	r0, [pc, #12]	; (8002130 <sendFail+0x1c>)
 8002124:	f7ff f9d4 	bl	80014d0 <Send>

}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800c958 	.word	0x0800c958

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 800213a:	f7ff f9a1 	bl	8001480 <UART_init>
	FLASH_init();
 800213e:	f7fe fbe7 	bl	8000910 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002142:	f000 fcbf 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002146:	f000 f8ab 	bl	80022a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214a:	f7fe fd57 	bl	8000bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800214e:	f000 fc15 	bl	800297c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002152:	f000 fb63 	bl	800281c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002156:	f000 fb99 	bl	800288c <MX_TIM7_Init>

  MX_I2C1_Init();
 800215a:	f7ff f85d 	bl	8001218 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 800215e:	2101      	movs	r1, #1
 8002160:	483e      	ldr	r0, [pc, #248]	; (800225c <main+0x128>)
 8002162:	f006 fb5d 	bl	8008820 <HAL_RTCEx_BKUPRead>
 8002166:	4603      	mov	r3, r0
 8002168:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800216c:	4293      	cmp	r3, r2
 800216e:	d001      	beq.n	8002174 <main+0x40>
	  MX_RTC_Init();
 8002170:	f000 f90e 	bl	8002390 <MX_RTC_Init>
  }
  Alarms_init();
 8002174:	f7fe f936 	bl	80003e4 <Alarms_init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002178:	4838      	ldr	r0, [pc, #224]	; (800225c <main+0x128>)
 800217a:	f006 fab3 	bl	80086e4 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2500 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800217e:	2200      	movs	r2, #0
 8002180:	f640 11c3 	movw	r1, #2499	; 0x9c3
 8002184:	4835      	ldr	r0, [pc, #212]	; (800225c <main+0x128>)
 8002186:	f006 f9d7 	bl	8008538 <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <main+0x12c>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <main+0x130>)
 8002194:	4413      	add	r3, r2
 8002196:	2201      	movs	r2, #1
 8002198:	4619      	mov	r1, r3
 800219a:	4833      	ldr	r0, [pc, #204]	; (8002268 <main+0x134>)
 800219c:	f007 f954 	bl	8009448 <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 80021a0:	4832      	ldr	r0, [pc, #200]	; (800226c <main+0x138>)
 80021a2:	f7ff f995 	bl	80014d0 <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 80021a6:	4832      	ldr	r0, [pc, #200]	; (8002270 <main+0x13c>)
 80021a8:	f006 fc46 	bl	8008a38 <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <main+0x13c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	4a30      	ldr	r2, [pc, #192]	; (8002274 <main+0x140>)
 80021b4:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <main+0x144>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d116      	bne.n	80021ee <main+0xba>
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <main+0x148>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d112      	bne.n	80021ee <main+0xba>
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <main+0x14c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <main+0xba>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <main+0x14c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <main+0x150>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <main+0x154>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	f7fe fa0b 	bl	8000604 <displayHour>
	   }


	 buttonHandler();
 80021ee:	f7ff ff4b 	bl	8002088 <buttonHandler>


	 while(uart_ready()){
 80021f2:	e001      	b.n	80021f8 <main+0xc4>

		 downloadFrame();
 80021f4:	f7ff fec6 	bl	8001f84 <downloadFrame>
	 while(uart_ready()){
 80021f8:	f7ff fa60 	bl	80016bc <uart_ready>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f8      	bne.n	80021f4 <main+0xc0>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <main+0x158>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <main+0xde>
		 handleBlinkCommand();
 800220c:	f7ff f8fc 	bl	8001408 <handleBlinkCommand>
 8002210:	e018      	b.n	8002244 <main+0x110>
	 } else if(blink_mode == 2){
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <main+0x158>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d113      	bne.n	8002244 <main+0x110>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <main+0x13c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <main+0x140>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <main+0x15c>)
 800222a:	8812      	ldrh	r2, [r2, #0]
 800222c:	b292      	uxth	r2, r2
 800222e:	4293      	cmp	r3, r2
 8002230:	d308      	bcc.n	8002244 <main+0x110>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8002232:	2140      	movs	r1, #64	; 0x40
 8002234:	4817      	ldr	r0, [pc, #92]	; (8002294 <main+0x160>)
 8002236:	f001 f955 	bl	80034e4 <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <main+0x13c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <main+0x140>)
 8002242:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <main+0x164>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d1b3      	bne.n	80021b6 <main+0x82>


		 delayMs(delayTime);
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <main+0x168>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f8bf 	bl	80013d8 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 800225a:	e7ac      	b.n	80021b6 <main+0x82>
 800225c:	200005c8 	.word	0x200005c8
 8002260:	20000116 	.word	0x20000116
 8002264:	20000790 	.word	0x20000790
 8002268:	20000a8c 	.word	0x20000a8c
 800226c:	0800c964 	.word	0x0800c964
 8002270:	200009f4 	.word	0x200009f4
 8002274:	20000150 	.word	0x20000150
 8002278:	20000078 	.word	0x20000078
 800227c:	20000125 	.word	0x20000125
 8002280:	20000140 	.word	0x20000140
 8002284:	20000141 	.word	0x20000141
 8002288:	20000142 	.word	0x20000142
 800228c:	2000014b 	.word	0x2000014b
 8002290:	200003c4 	.word	0x200003c4
 8002294:	48000800 	.word	0x48000800
 8002298:	20000154 	.word	0x20000154
 800229c:	20000156 	.word	0x20000156

080022a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a6      	sub	sp, #152	; 0x98
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022aa:	2228      	movs	r2, #40	; 0x28
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f008 fc68 	bl	800ab84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2258      	movs	r2, #88	; 0x58
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f008 fc5a 	bl	800ab84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022d0:	230a      	movs	r3, #10
 80022d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d4:	2301      	movs	r3, #1
 80022d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d8:	2310      	movs	r3, #16
 80022da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022de:	2301      	movs	r3, #1
 80022e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002300:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002304:	4618      	mov	r0, r3
 8002306:	f003 f90f 	bl	8005528 <HAL_RCC_OscConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002310:	f000 f82e 	bl	8002370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002314:	230f      	movs	r3, #15
 8002316:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002318:	2302      	movs	r3, #2
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800232a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f004 f96b 	bl	800660c <HAL_RCC_ClockConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800233c:	f000 f818 	bl	8002370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <SystemClock_Config+0xcc>)
 8002342:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800234c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002350:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f004 fc33 	bl	8006bc0 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002360:	f000 f806 	bl	8002370 <Error_Handler>
  }
}
 8002364:	bf00      	nop
 8002366:	3798      	adds	r7, #152	; 0x98
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	00010022 	.word	0x00010022

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>

0800237a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	; 0x40
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023aa:	463b      	mov	r3, r7
 80023ac:	2228      	movs	r2, #40	; 0x28
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f008 fbe7 	bl	800ab84 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023b6:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <MX_RTC_Init+0x160>)
 80023b8:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <MX_RTC_Init+0x164>)
 80023ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <MX_RTC_Init+0x160>)
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <MX_RTC_Init+0x160>)
 80023c4:	227f      	movs	r2, #127	; 0x7f
 80023c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <MX_RTC_Init+0x160>)
 80023ca:	22ff      	movs	r2, #255	; 0xff
 80023cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023ce:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <MX_RTC_Init+0x160>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023d4:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <MX_RTC_Init+0x160>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <MX_RTC_Init+0x160>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023e0:	4843      	ldr	r0, [pc, #268]	; (80024f0 <MX_RTC_Init+0x160>)
 80023e2:	f004 ffe5 	bl	80073b0 <HAL_RTC_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80023ec:	f7ff ffc0 	bl	8002370 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */


  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32f2){
 80023f0:	2101      	movs	r1, #1
 80023f2:	483f      	ldr	r0, [pc, #252]	; (80024f0 <MX_RTC_Init+0x160>)
 80023f4:	f006 fa14 	bl	8008820 <HAL_RTCEx_BKUPRead>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80023fe:	4293      	cmp	r3, r2
 8002400:	d072      	beq.n	80024e8 <MX_RTC_Init+0x158>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8002402:	2317      	movs	r3, #23
 8002404:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 59;
 8002408:	233b      	movs	r3, #59	; 0x3b
 800240a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 55;
 800240e:	2337      	movs	r3, #55	; 0x37
 8002410:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002414:	2300      	movs	r3, #0
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800241c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002420:	2200      	movs	r2, #0
 8002422:	4619      	mov	r1, r3
 8002424:	4832      	ldr	r0, [pc, #200]	; (80024f0 <MX_RTC_Init+0x160>)
 8002426:	f005 f8b7 	bl	8007598 <HAL_RTC_SetTime>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002430:	f7ff ff9e 	bl	8002370 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002434:	2303      	movs	r3, #3
 8002436:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_FEBRUARY;
 800243a:	2302      	movs	r3, #2
 800243c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 15;
 8002440:	230f      	movs	r3, #15
 8002442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8002446:	2316      	movs	r3, #22
 8002448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800244c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	4826      	ldr	r0, [pc, #152]	; (80024f0 <MX_RTC_Init+0x160>)
 8002456:	f005 fa77 	bl	8007948 <HAL_RTC_SetDate>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8002460:	f7ff ff86 	bl	8002370 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 13;
 8002464:	230d      	movs	r3, #13
 8002466:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 20;
 8002468:	2314      	movs	r3, #20
 800246a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 30;
 800246c:	231e      	movs	r3, #30
 800246e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 13;
 8002488:	230d      	movs	r3, #13
 800248a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	4815      	ldr	r0, [pc, #84]	; (80024f0 <MX_RTC_Init+0x160>)
 800249c:	f005 fbe0 	bl	8007c60 <HAL_RTC_SetAlarm_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 80024a6:	f7ff ff63 	bl	8002370 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80024aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_RTC_Init+0x160>)
 80024b8:	f005 fbd2 	bl	8007c60 <HAL_RTC_SetAlarm_IT>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80024c2:	f7ff ff55 	bl	8002370 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <MX_RTC_Init+0x160>)
 80024cc:	f006 f834 	bl	8008538 <HAL_RTCEx_SetWakeUpTimer_IT>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 80024d6:	f7ff ff4b 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //write backup registry
  //HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80024da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80024de:	2101      	movs	r1, #1
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <MX_RTC_Init+0x160>)
 80024e2:	f006 f97b 	bl	80087dc <HAL_RTCEx_BKUPWrite>
 80024e6:	e000      	b.n	80024ea <MX_RTC_Init+0x15a>
	  return;
 80024e8:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 80024ea:	3740      	adds	r7, #64	; 0x40
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200005c8 	.word	0x200005c8
 80024f4:	40002800 	.word	0x40002800

080024f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_RTC_MspInit+0x64>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d123      	bne.n	8002552 <HAL_RTC_MspInit+0x5a>
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002518:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RTC_MspInit+0x68>)
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2003      	movs	r0, #3
 8002534:	f000 fc40 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 fc69 	bl	8002e10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	2029      	movs	r0, #41	; 0x29
 8002544:	f000 fc38 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002548:	2029      	movs	r0, #41	; 0x29
 800254a:	f000 fc61 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

    HAL_PWR_EnableBkUpAccess();
 800254e:	f002 ffdb 	bl	8005508 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40002800 	.word	0x40002800
 8002560:	10908100 	.word	0x10908100

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_MspInit+0x44>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_MspInit+0x44>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6193      	str	r3, [r2, #24]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_MspInit+0x44>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_MspInit+0x44>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_MspInit+0x44>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_MspInit+0x44>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800259a:	2007      	movs	r0, #7
 800259c:	f000 fbec 	bl	8002d78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <NMI_Handler+0x4>

080025b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <HardFault_Handler+0x4>

080025b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <MemManage_Handler+0x4>

080025be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <UsageFault_Handler+0x4>

080025ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 80025f8:	f7fe fe9a 	bl	8001330 <delay_1hz>
	delay_4hz();
 80025fc:	f7fe feb4 	bl	8001368 <delay_4hz>

	if(blink_mode == 1){
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <SysTick_Handler+0x2c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <SysTick_Handler+0x22>
		led_delay++;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SysTick_Handler+0x30>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Handler+0x30>)
 8002614:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002616:	f000 fa9b 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000014b 	.word	0x2000014b
 8002624:	20000158 	.word	0x20000158

08002628 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <RTC_WKUP_IRQHandler+0x10>)
 800262e:	f006 f8b1 	bl	8008794 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200005c8 	.word	0x200005c8

0800263c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <I2C1_EV_IRQHandler+0x10>)
 8002642:	f001 fa7d 	bl	8003b40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200002ac 	.word	0x200002ac

08002650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <USART2_IRQHandler+0x10>)
 8002656:	f006 ff45 	bl	80094e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000a8c 	.word	0x20000a8c

08002664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002668:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800266c:	f000 ff62 	bl	8003534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}

08002674 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <RTC_Alarm_IRQHandler+0x10>)
 800267a:	f005 fe87 	bl	800838c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200005c8 	.word	0x200005c8

08002688 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <TIM6_DAC_IRQHandler+0x10>)
 800268e:	f006 fa7f 	bl	8008b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200009f4 	.word	0x200009f4

0800269c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <TIM7_IRQHandler+0x10>)
 80026a2:	f006 fa75 	bl	8008b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000a40 	.word	0x20000a40

080026b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e00a      	b.n	80026d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026c2:	f3af 8000 	nop.w
 80026c6:	4601      	mov	r1, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbf0      	blt.n	80026c2 <_read+0x12>
	}

return len;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbf1      	blt.n	80026fc <_write+0x12>
	}
	return len;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_close>:

int _close(int file)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	return -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274a:	605a      	str	r2, [r3, #4]
	return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_isatty>:

int _isatty(int file)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	return 1;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	return 0;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f008 f9b8 	bl	800ab30 <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20010000 	.word	0x20010000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	2000015c 	.word	0x2000015c
 80027f4:	20000b28 	.word	0x20000b28

080027f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <SystemInit+0x20>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <SystemInit+0x20>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <MX_TIM6_Init+0x68>)
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <MX_TIM6_Init+0x6c>)
 8002830:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <MX_TIM6_Init+0x68>)
 8002834:	f242 720f 	movw	r2, #9999	; 0x270f
 8002838:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <MX_TIM6_Init+0x68>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <MX_TIM6_Init+0x68>)
 8002842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002846:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_TIM6_Init+0x68>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <MX_TIM6_Init+0x68>)
 8002850:	f006 f810 	bl	8008874 <HAL_TIM_Base_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800285a:	f7ff fd89 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_TIM6_Init+0x68>)
 800286c:	f006 fb80 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002876:	f7ff fd7b 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200009f4 	.word	0x200009f4
 8002888:	40001000 	.word	0x40001000

0800288c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_TIM7_Init+0x64>)
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <MX_TIM7_Init+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028a4:	2247      	movs	r2, #71	; 0x47
 80028a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028be:	f005 ffd9 	bl	8008874 <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80028c8:	f7ff fd52 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_TIM7_Init+0x64>)
 80028da:	f006 fb49 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80028e4:	f7ff fd44 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000a40 	.word	0x20000a40
 80028f4:	40001400 	.word	0x40001400

080028f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_TIM_Base_MspInit+0x78>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d114      	bne.n	8002934 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 8002910:	f043 0310 	orr.w	r3, r3, #16
 8002914:	61d3      	str	r3, [r2, #28]
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2036      	movs	r0, #54	; 0x36
 8002928:	f000 fa46 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800292c:	2036      	movs	r0, #54	; 0x36
 800292e:	f000 fa6f 	bl	8002e10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002932:	e018      	b.n	8002966 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_TIM_Base_MspInit+0x80>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d113      	bne.n	8002966 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	61d3      	str	r3, [r2, #28]
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_TIM_Base_MspInit+0x7c>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2037      	movs	r0, #55	; 0x37
 800295c:	f000 fa2c 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002960:	2037      	movs	r0, #55	; 0x37
 8002962:	f000 fa55 	bl	8002e10 <HAL_NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40001000 	.word	0x40001000
 8002974:	40021000 	.word	0x40021000
 8002978:	40001400 	.word	0x40001400

0800297c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <MX_USART2_UART_Init+0x5c>)
 8002984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 8002988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800298c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029a2:	220c      	movs	r2, #12
 80029a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_USART2_UART_Init+0x58>)
 80029c0:	f006 fc42 	bl	8009248 <HAL_UART_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029ca:	f7ff fcd1 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000a8c 	.word	0x20000a8c
 80029d8:	40004400 	.word	0x40004400

080029dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d130      	bne.n	8002a60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	61d3      	str	r3, [r2, #28]
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	6153      	str	r3, [r2, #20]
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a2e:	230c      	movs	r3, #12
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f000 fa88 	bl	8002f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2026      	movs	r0, #38	; 0x26
 8002a56:	f000 f9af 	bl	8002db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a5a:	2026      	movs	r0, #38	; 0x26
 8002a5c:	f000 f9d8 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	40021000 	.word	0x40021000

08002a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopForever+0x6>)
  ldr r1, =_edata
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopForever+0xe>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopForever+0x16>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a9a:	f7ff fead 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f008 f84d 	bl	800ab3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aa2:	f7ff fb47 	bl	8002134 <main>

08002aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8002aa6:	e7fe      	b.n	8002aa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002aa8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002ab4:	0800ce28 	.word	0x0800ce28
  ldr r2, =_sbss
 8002ab8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002abc:	20000b24 	.word	0x20000b24

08002ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC1_2_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_Init+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_Init+0x28>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 f94f 	bl	8002d78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fd40 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f996 	bl	8002e40 <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 f944 	bl	8002db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000007c 	.word	0x2000007c
 8002b48:	20000084 	.word	0x20000084
 8002b4c:	20000080 	.word	0x20000080

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_IncTick+0x20>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x24>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_IncTick+0x24>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000084 	.word	0x20000084
 8002b74:	20000b10 	.word	0x20000b10

08002b78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000b10 	.word	0x20000b10

08002b90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bb6:	bf00      	nop
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000084 	.word	0x20000084

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	; (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d44:	d301      	bcc.n	8002d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00f      	b.n	8002d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <SysTick_Config+0x40>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d52:	210f      	movs	r1, #15
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f7ff ff8e 	bl	8002c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <SysTick_Config+0x40>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <SysTick_Config+0x40>)
 8002d64:	2207      	movs	r2, #7
 8002d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	e000e010 	.word	0xe000e010

08002d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d00f      	beq.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d00c      	beq.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d009      	beq.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d006      	beq.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d003      	beq.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d9e:	21ac      	movs	r1, #172	; 0xac
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002da2:	f7ff faea 	bl	800237a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff16 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0800c984 	.word	0x0800c984

08002db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d903      	bls.n	8002dd8 <HAL_NVIC_SetPriority+0x20>
 8002dd0:	21c4      	movs	r1, #196	; 0xc4
 8002dd2:	480e      	ldr	r0, [pc, #56]	; (8002e0c <HAL_NVIC_SetPriority+0x54>)
 8002dd4:	f7ff fad1 	bl	800237a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	d903      	bls.n	8002de6 <HAL_NVIC_SetPriority+0x2e>
 8002dde:	21c5      	movs	r1, #197	; 0xc5
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <HAL_NVIC_SetPriority+0x54>)
 8002de2:	f7ff faca 	bl	800237a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de6:	f7ff ff1b 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6978      	ldr	r0, [r7, #20]
 8002df2:	f7ff ff6b 	bl	8002ccc <NVIC_EncodePriority>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff3a 	bl	8002c78 <__NVIC_SetPriority>
}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	0800c984 	.word	0x0800c984

08002e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da03      	bge.n	8002e2a <HAL_NVIC_EnableIRQ+0x1a>
 8002e22:	21d8      	movs	r1, #216	; 0xd8
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <HAL_NVIC_EnableIRQ+0x2c>)
 8002e26:	f7ff faa8 	bl	800237a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff04 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0800c984 	.word	0x0800c984

08002e40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff73 	bl	8002d34 <SysTick_Config>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d008      	beq.n	8002e7c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e020      	b.n	8002ebe <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020e 	bic.w	r2, r2, #14
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d005      	beq.n	8002eec <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e027      	b.n	8002f3c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 020e 	bic.w	r2, r2, #14
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
    } 
  }
  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <HAL_GPIO_Init+0x104>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01b      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a39      	ldr	r2, [pc, #228]	; (8003068 <HAL_GPIO_Init+0x108>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d017      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_GPIO_Init+0x10c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a37      	ldr	r2, [pc, #220]	; (8003070 <HAL_GPIO_Init+0x110>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <HAL_GPIO_Init+0x114>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a35      	ldr	r2, [pc, #212]	; (8003078 <HAL_GPIO_Init+0x118>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_GPIO_Init+0x11c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002fae:	21b2      	movs	r1, #178	; 0xb2
 8002fb0:	4833      	ldr	r0, [pc, #204]	; (8003080 <HAL_GPIO_Init+0x120>)
 8002fb2:	f7ff f9e2 	bl	800237a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_GPIO_Init+0x6c>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x74>
 8002fcc:	21b3      	movs	r1, #179	; 0xb3
 8002fce:	482c      	ldr	r0, [pc, #176]	; (8003080 <HAL_GPIO_Init+0x120>)
 8002fd0:	f7ff f9d3 	bl	800237a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 821c 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	f000 8217 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b11      	cmp	r3, #17
 8002fee:	f000 8212 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	f000 820d 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b12      	cmp	r3, #18
 8003002:	f000 8208 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800300e:	f000 8202 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800301a:	f000 81fc 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003026:	f000 81f6 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003032:	f000 81f0 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800303e:	f000 81ea 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800304a:	f000 81e4 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b03      	cmp	r3, #3
 8003054:	f000 81df 	beq.w	8003416 <HAL_GPIO_Init+0x4b6>
 8003058:	21b4      	movs	r1, #180	; 0xb4
 800305a:	4809      	ldr	r0, [pc, #36]	; (8003080 <HAL_GPIO_Init+0x120>)
 800305c:	f7ff f98d 	bl	800237a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003060:	e1d9      	b.n	8003416 <HAL_GPIO_Init+0x4b6>
 8003062:	bf00      	nop
 8003064:	48000400 	.word	0x48000400
 8003068:	48000800 	.word	0x48000800
 800306c:	48000c00 	.word	0x48000c00
 8003070:	48001000 	.word	0x48001000
 8003074:	48001400 	.word	0x48001400
 8003078:	48001800 	.word	0x48001800
 800307c:	48001c00 	.word	0x48001c00
 8003080:	0800c9c0 	.word	0x0800c9c0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 81ba 	beq.w	8003410 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d005      	beq.n	80030b4 <HAL_GPIO_Init+0x154>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d140      	bne.n	8003136 <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_GPIO_Init+0x174>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <HAL_GPIO_Init+0x174>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x174>
 80030cc:	21c3      	movs	r1, #195	; 0xc3
 80030ce:	4894      	ldr	r0, [pc, #592]	; (8003320 <HAL_GPIO_Init+0x3c0>)
 80030d0:	f7ff f953 	bl	800237a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310a:	2201      	movs	r2, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0201 	and.w	r2, r3, #1
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b03      	cmp	r3, #3
 8003140:	d027      	beq.n	8003192 <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_GPIO_Init+0x202>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x202>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x202>
 800315a:	21d4      	movs	r1, #212	; 0xd4
 800315c:	4870      	ldr	r0, [pc, #448]	; (8003320 <HAL_GPIO_Init+0x3c0>)
 800315e:	f7ff f90c 	bl	800237a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d157      	bne.n	800324e <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031a4:	d01f      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <HAL_GPIO_Init+0x3c4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01b      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <HAL_GPIO_Init+0x3c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a5c      	ldr	r2, [pc, #368]	; (800332c <HAL_GPIO_Init+0x3cc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a5b      	ldr	r2, [pc, #364]	; (8003330 <HAL_GPIO_Init+0x3d0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <HAL_GPIO_Init+0x3d4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a59      	ldr	r2, [pc, #356]	; (8003338 <HAL_GPIO_Init+0x3d8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a58      	ldr	r2, [pc, #352]	; (800333c <HAL_GPIO_Init+0x3dc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x286>
 80031de:	21e2      	movs	r1, #226	; 0xe2
 80031e0:	484f      	ldr	r0, [pc, #316]	; (8003320 <HAL_GPIO_Init+0x3c0>)
 80031e2:	f7ff f8ca 	bl	800237a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d90b      	bls.n	8003206 <HAL_GPIO_Init+0x2a6>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b0e      	cmp	r3, #14
 80031f4:	d007      	beq.n	8003206 <HAL_GPIO_Init+0x2a6>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x2a6>
 80031fe:	21e3      	movs	r1, #227	; 0xe3
 8003200:	4847      	ldr	r0, [pc, #284]	; (8003320 <HAL_GPIO_Init+0x3c0>)
 8003202:	f7ff f8ba 	bl	800237a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	6939      	ldr	r1, [r7, #16]
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0203 	and.w	r2, r3, #3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80c0 	beq.w	8003410 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_GPIO_Init+0x3e0>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <HAL_GPIO_Init+0x3e0>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_GPIO_Init+0x3e0>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <HAL_GPIO_Init+0x3e4>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d2:	d039      	beq.n	8003348 <HAL_GPIO_Init+0x3e8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <HAL_GPIO_Init+0x3c4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01f      	beq.n	800331c <HAL_GPIO_Init+0x3bc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <HAL_GPIO_Init+0x3c8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d019      	beq.n	8003318 <HAL_GPIO_Init+0x3b8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_GPIO_Init+0x3cc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_Init+0x3b4>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_GPIO_Init+0x3d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_Init+0x3b0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_GPIO_Init+0x3d4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_Init+0x3ac>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <HAL_GPIO_Init+0x3d8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_Init+0x3a8>
 8003304:	2306      	movs	r3, #6
 8003306:	e020      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 8003308:	2307      	movs	r3, #7
 800330a:	e01e      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 800330c:	2305      	movs	r3, #5
 800330e:	e01c      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 8003310:	2304      	movs	r3, #4
 8003312:	e01a      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 8003314:	2303      	movs	r3, #3
 8003316:	e018      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 8003318:	2302      	movs	r3, #2
 800331a:	e016      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 800331c:	2301      	movs	r3, #1
 800331e:	e014      	b.n	800334a <HAL_GPIO_Init+0x3ea>
 8003320:	0800c9c0 	.word	0x0800c9c0
 8003324:	48000400 	.word	0x48000400
 8003328:	48000800 	.word	0x48000800
 800332c:	48000c00 	.word	0x48000c00
 8003330:	48001000 	.word	0x48001000
 8003334:	48001400 	.word	0x48001400
 8003338:	48001800 	.word	0x48001800
 800333c:	48001c00 	.word	0x48001c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000
 8003348:	2300      	movs	r3, #0
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800335a:	4935      	ldr	r1, [pc, #212]	; (8003430 <HAL_GPIO_Init+0x4d0>)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_GPIO_Init+0x4d4>)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3301      	adds	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	f47f ae2f 	bne.w	8003084 <HAL_GPIO_Init+0x124>
  }
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40010000 	.word	0x40010000
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_GPIO_ReadPin+0x1c>
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_GPIO_ReadPin+0x26>
 8003454:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8003458:	4809      	ldr	r0, [pc, #36]	; (8003480 <HAL_GPIO_ReadPin+0x48>)
 800345a:	f7fe ff8e 	bl	800237a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	887b      	ldrh	r3, [r7, #2]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e001      	b.n	8003474 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	0800c9c0 	.word	0x0800c9c0

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_GPIO_WritePin+0x20>
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_GPIO_WritePin+0x2a>
 80034a4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <HAL_GPIO_WritePin+0x5c>)
 80034aa:	f7fe ff66 	bl	800237a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80034ae:	787b      	ldrb	r3, [r7, #1]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_GPIO_WritePin+0x40>
 80034b4:	787b      	ldrb	r3, [r7, #1]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d004      	beq.n	80034c4 <HAL_GPIO_WritePin+0x40>
 80034ba:	f240 11a5 	movw	r1, #421	; 0x1a5
 80034be:	4808      	ldr	r0, [pc, #32]	; (80034e0 <HAL_GPIO_WritePin+0x5c>)
 80034c0:	f7fe ff5b 	bl	800237a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	0800c9c0 	.word	0x0800c9c0

080034e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_GPIO_TogglePin+0x1c>
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_GPIO_TogglePin+0x26>
 8003500:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003504:	480a      	ldr	r0, [pc, #40]	; (8003530 <HAL_GPIO_TogglePin+0x4c>)
 8003506:	f7fe ff38 	bl	800237a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003510:	887a      	ldrh	r2, [r7, #2]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	041a      	lsls	r2, r3, #16
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43d9      	mvns	r1, r3
 800351c:	887b      	ldrh	r3, [r7, #2]
 800351e:	400b      	ands	r3, r1
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	0800c9c0 	.word	0x0800c9c0

08003534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800354a:	4a05      	ldr	r2, [pc, #20]	; (8003560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f806 	bl	8003564 <HAL_GPIO_EXTI_Callback>
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40010400 	.word	0x40010400

08003564 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e104      	b.n	8003798 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a83      	ldr	r2, [pc, #524]	; (80037a0 <HAL_I2C_Init+0x224>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_I2C_Init+0x3a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a81      	ldr	r2, [pc, #516]	; (80037a4 <HAL_I2C_Init+0x228>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_I2C_Init+0x3a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <HAL_I2C_Init+0x22c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_I2C_Init+0x3a>
 80035ac:	f240 2113 	movw	r1, #531	; 0x213
 80035b0:	487e      	ldr	r0, [pc, #504]	; (80037ac <HAL_I2C_Init+0x230>)
 80035b2:	f7fe fee2 	bl	800237a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d304      	bcc.n	80035ca <HAL_I2C_Init+0x4e>
 80035c0:	f44f 7105 	mov.w	r1, #532	; 0x214
 80035c4:	4879      	ldr	r0, [pc, #484]	; (80037ac <HAL_I2C_Init+0x230>)
 80035c6:	f7fe fed8 	bl	800237a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d008      	beq.n	80035e4 <HAL_I2C_Init+0x68>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HAL_I2C_Init+0x68>
 80035da:	f240 2115 	movw	r1, #533	; 0x215
 80035de:	4873      	ldr	r0, [pc, #460]	; (80037ac <HAL_I2C_Init+0x230>)
 80035e0:	f7fe fecb 	bl	800237a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_I2C_Init+0x84>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f4:	d004      	beq.n	8003600 <HAL_I2C_Init+0x84>
 80035f6:	f240 2116 	movw	r1, #534	; 0x216
 80035fa:	486c      	ldr	r0, [pc, #432]	; (80037ac <HAL_I2C_Init+0x230>)
 80035fc:	f7fe febd 	bl	800237a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2bff      	cmp	r3, #255	; 0xff
 8003606:	d904      	bls.n	8003612 <HAL_I2C_Init+0x96>
 8003608:	f240 2117 	movw	r1, #535	; 0x217
 800360c:	4867      	ldr	r0, [pc, #412]	; (80037ac <HAL_I2C_Init+0x230>)
 800360e:	f7fe feb4 	bl	800237a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_I2C_Init+0xe0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d01c      	beq.n	800365c <HAL_I2C_Init+0xe0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d018      	beq.n	800365c <HAL_I2C_Init+0xe0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d014      	beq.n	800365c <HAL_I2C_Init+0xe0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d010      	beq.n	800365c <HAL_I2C_Init+0xe0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d00c      	beq.n	800365c <HAL_I2C_Init+0xe0>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d008      	beq.n	800365c <HAL_I2C_Init+0xe0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b07      	cmp	r3, #7
 8003650:	d004      	beq.n	800365c <HAL_I2C_Init+0xe0>
 8003652:	f44f 7106 	mov.w	r1, #536	; 0x218
 8003656:	4855      	ldr	r0, [pc, #340]	; (80037ac <HAL_I2C_Init+0x230>)
 8003658:	f7fe fe8f 	bl	800237a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_I2C_Init+0xfc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800366c:	d004      	beq.n	8003678 <HAL_I2C_Init+0xfc>
 800366e:	f240 2119 	movw	r1, #537	; 0x219
 8003672:	484e      	ldr	r0, [pc, #312]	; (80037ac <HAL_I2C_Init+0x230>)
 8003674:	f7fe fe81 	bl	800237a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_I2C_Init+0x118>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003688:	d004      	beq.n	8003694 <HAL_I2C_Init+0x118>
 800368a:	f240 211a 	movw	r1, #538	; 0x21a
 800368e:	4847      	ldr	r0, [pc, #284]	; (80037ac <HAL_I2C_Init+0x230>)
 8003690:	f7fe fe73 	bl	800237a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fd fdf5 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2224      	movs	r2, #36	; 0x24
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	e006      	b.n	800370a <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003708:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d104      	bne.n	800371c <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800371a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800372a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69d9      	ldr	r1, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40005400 	.word	0x40005400
 80037a4:	40005800 	.word	0x40005800
 80037a8:	40007800 	.word	0x40007800
 80037ac:	0800c9fc 	.word	0x0800c9fc

080037b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d007      	beq.n	80037e0 <HAL_I2C_Mem_Read+0x30>
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d004      	beq.n	80037e0 <HAL_I2C_Mem_Read+0x30>
 80037d6:	f640 11ca 	movw	r1, #2506	; 0x9ca
 80037da:	4886      	ldr	r0, [pc, #536]	; (80039f4 <HAL_I2C_Mem_Read+0x244>)
 80037dc:	f7fe fdcd 	bl	800237a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	f040 80fd 	bne.w	80039e8 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_I2C_Mem_Read+0x4a>
 80037f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0f1      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2C_Mem_Read+0x64>
 8003810:	2302      	movs	r3, #2
 8003812:	e0ea      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381c:	f7ff f9ac 	bl	8002b78 <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2319      	movs	r3, #25
 8003828:	2201      	movs	r2, #1
 800382a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f001 fb27 	bl	8004e82 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0d5      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2222      	movs	r2, #34	; 0x22
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003866:	88f8      	ldrh	r0, [r7, #6]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fe2c 	bl	80044d4 <I2C_RequestMemoryRead>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0ad      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d90e      	bls.n	80038b6 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_I2C_Mem_Read+0x248>)
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f001 fc1a 	bl	80050e8 <I2C_TransferConfig>
 80038b4:	e00f      	b.n	80038d6 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	8979      	ldrh	r1, [r7, #10]
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_I2C_Mem_Read+0x248>)
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f001 fc09 	bl	80050e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2200      	movs	r2, #0
 80038de:	2104      	movs	r1, #4
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f001 face 	bl	8004e82 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e07c      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d034      	beq.n	8003996 <HAL_I2C_Mem_Read+0x1e6>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
 8003932:	d130      	bne.n	8003996 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2200      	movs	r2, #0
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f001 fa9f 	bl	8004e82 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e04d      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	d90e      	bls.n	8003976 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	b2da      	uxtb	r2, r3
 8003964:	8979      	ldrh	r1, [r7, #10]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f001 fbba 	bl	80050e8 <I2C_TransferConfig>
 8003974:	e00f      	b.n	8003996 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	b2da      	uxtb	r2, r3
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f001 fba9 	bl	80050e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d19a      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f001 faec 	bl	8004f82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e01a      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2220      	movs	r2, #32
 80039ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_I2C_Mem_Read+0x24c>)
 80039c8:	400b      	ands	r3, r1
 80039ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	0800c9fc 	.word	0x0800c9fc
 80039f8:	80002400 	.word	0x80002400
 80039fc:	fe00e800 	.word	0xfe00e800

08003a00 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d007      	beq.n	8003a30 <HAL_I2C_Mem_Write_IT+0x30>
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d004      	beq.n	8003a30 <HAL_I2C_Mem_Write_IT+0x30>
 8003a26:	f640 2154 	movw	r1, #2644	; 0xa54
 8003a2a:	4842      	ldr	r0, [pc, #264]	; (8003b34 <HAL_I2C_Mem_Write_IT+0x134>)
 8003a2c:	f7fe fca5 	bl	800237a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d176      	bne.n	8003b2a <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_I2C_Mem_Write_IT+0x48>
 8003a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e06b      	b.n	8003b2c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
 8003a66:	e061      	b.n	8003b2c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Mem_Write_IT+0x76>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e05a      	b.n	8003b2c <HAL_I2C_Mem_Write_IT+0x12c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a7e:	f7ff f87b 	bl	8002b78 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <HAL_I2C_Mem_Write_IT+0x138>)
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_I2C_Mem_Write_IT+0x13c>)
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d906      	bls.n	8003aca <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e007      	b.n	8003ada <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad8:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8003ada:	88f8      	ldrh	r0, [r7, #6]
 8003adc:	893a      	ldrh	r2, [r7, #8]
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2319      	movs	r3, #25
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fc9e 	bl	800442c <I2C_RequestMemoryWrite>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e014      	b.n	8003b2c <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	8979      	ldrh	r1, [r7, #10]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f001 fae9 	bl	80050e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b1e:	2101      	movs	r1, #1
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f001 fb53 	bl	80051cc <I2C_Enable_IRQ>

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0800c9fc 	.word	0x0800c9fc
 8003b38:	ffff0000 	.word	0xffff0000
 8003b3c:	08003c31 	.word	0x08003c31

08003b40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <I2C_Master_ISR_IT+0x1e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e114      	b.n	8003e78 <I2C_Master_ISR_IT+0x248>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d013      	beq.n	8003c8a <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2210      	movs	r2, #16
 8003c74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f043 0204 	orr.w	r2, r3, #4
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f001 f8bb 	bl	8004dfe <I2C_Flush_TXDR>
 8003c88:	e0e1      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01d      	beq.n	8003cde <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cdc:	e0b7      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01e      	beq.n	8003d28 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d26:	e092      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	09db      	lsrs	r3, r3, #7
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05d      	beq.n	8003df0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d057      	beq.n	8003df0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d040      	beq.n	8003dcc <I2C_Master_ISR_IT+0x19c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d13c      	bne.n	8003dcc <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2bff      	cmp	r3, #255	; 0xff
 8003d68:	d90e      	bls.n	8003d88 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8a79      	ldrh	r1, [r7, #18]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f001 f9b1 	bl	80050e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d86:	e032      	b.n	8003dee <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d9a:	d00b      	beq.n	8003db4 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	8a79      	ldrh	r1, [r7, #18]
 8003da8:	2000      	movs	r0, #0
 8003daa:	9000      	str	r0, [sp, #0]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f001 f99b 	bl	80050e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db2:	e01c      	b.n	8003dee <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	8a79      	ldrh	r1, [r7, #18]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f001 f98f 	bl	80050e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dca:	e010      	b.n	8003dee <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dda:	d003      	beq.n	8003de4 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fc51 	bl	8004684 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003de2:	e034      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 ff12 	bl	8004c10 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dec:	e02f      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
 8003dee:	e02e      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d022      	beq.n	8003e4e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e20:	d015      	beq.n	8003e4e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e2a:	d108      	bne.n	8003e3e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	e007      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fc20 	bl	8004684 <I2C_ITMasterSeqCplt>
 8003e44:	e003      	b.n	8003e4e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fee1 	bl	8004c10 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fca7 	bl	80047bc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <I2C_Slave_ISR_IT+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e0ec      	b.n	800407e <I2C_Slave_ISR_IT+0x1fe>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fd42 	bl	8004950 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04d      	beq.n	8003f74 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d047      	beq.n	8003f74 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d128      	bne.n	8003f40 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b28      	cmp	r3, #40	; 0x28
 8003ef8:	d108      	bne.n	8003f0c <I2C_Slave_ISR_IT+0x8c>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f00:	d104      	bne.n	8003f0c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fe2d 	bl	8004b64 <I2C_ITListenCplt>
 8003f0a:	e032      	b.n	8003f72 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b29      	cmp	r3, #41	; 0x29
 8003f16:	d10e      	bne.n	8003f36 <I2C_Slave_ISR_IT+0xb6>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f1e:	d00a      	beq.n	8003f36 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2210      	movs	r2, #16
 8003f26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 ff68 	bl	8004dfe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fbe5 	bl	80046fe <I2C_ITSlaveSeqCplt>
 8003f34:	e01d      	b.n	8003f72 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f3e:	e096      	b.n	800406e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2210      	movs	r2, #16
 8003f46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <I2C_Slave_ISR_IT+0xe4>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f60:	f040 8085 	bne.w	800406e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	4619      	mov	r1, r3
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fe50 	bl	8004c10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f70:	e07d      	b.n	800406e <I2C_Slave_ISR_IT+0x1ee>
 8003f72:	e07c      	b.n	800406e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d030      	beq.n	8003fe2 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02a      	beq.n	8003fe2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d14f      	bne.n	8004072 <I2C_Slave_ISR_IT+0x1f2>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd8:	d04b      	beq.n	8004072 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fb8f 	bl	80046fe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003fe0:	e047      	b.n	8004072 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	08db      	lsrs	r3, r3, #3
 8003ff2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fabd 	bl	800457c <I2C_ITAddrCplt>
 8004002:	e037      	b.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d031      	beq.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02b      	beq.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
 8004056:	e00d      	b.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405e:	d002      	beq.n	8004066 <I2C_Slave_ISR_IT+0x1e6>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fb49 	bl	80046fe <I2C_ITSlaveSeqCplt>
 800406c:	e002      	b.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004072:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af02      	add	r7, sp, #8
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <I2C_Master_ISR_DMA+0x1a>
 800409c:	2302      	movs	r3, #2
 800409e:	e0e1      	b.n	8004264 <I2C_Master_ISR_DMA+0x1de>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d017      	beq.n	80040e4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d011      	beq.n	80040e4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2210      	movs	r2, #16
 80040c6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80040d4:	2120      	movs	r1, #32
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f001 f878 	bl	80051cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fe8e 	bl	8004dfe <I2C_Flush_TXDR>
 80040e2:	e0ba      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d072      	beq.n	80041d6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d06c      	beq.n	80041d6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04e      	beq.n	80041b4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004122:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d906      	bls.n	800413c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e010      	b.n	800415e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414e:	d003      	beq.n	8004158 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e002      	b.n	800415e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800415c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8a79      	ldrh	r1, [r7, #18]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 ffbb 	bl	80050e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b22      	cmp	r3, #34	; 0x22
 800418e:	d108      	bne.n	80041a2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80041a0:	e05b      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80041b2:	e052      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041c2:	d003      	beq.n	80041cc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fa5d 	bl	8004684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80041ca:	e046      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80041cc:	2140      	movs	r1, #64	; 0x40
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fd1e 	bl	8004c10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80041d4:	e041      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d029      	beq.n	8004236 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d119      	bne.n	800422c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004206:	d027      	beq.n	8004258 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004210:	d108      	bne.n	8004224 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004220:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004222:	e019      	b.n	8004258 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fa2d 	bl	8004684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800422a:	e015      	b.n	8004258 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fcee 	bl	8004c10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004234:	e010      	b.n	8004258 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fab3 	bl	80047bc <I2C_ITMasterCplt>
 8004256:	e000      	b.n	800425a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004258:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <I2C_Slave_ISR_DMA+0x24>
 800428c:	2302      	movs	r3, #2
 800428e:	e0c9      	b.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fb4c 	bl	8004950 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 809a 	beq.w	80043fa <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8093 	beq.w	80043fa <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0b9b      	lsrs	r3, r3, #14
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0bdb      	lsrs	r3, r3, #15
 80042e4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d07f      	beq.n	80043ec <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0bdb      	lsrs	r3, r3, #15
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0b9b      	lsrs	r3, r3, #14
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d128      	bne.n	800438c <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b28      	cmp	r3, #40	; 0x28
 8004344:	d108      	bne.n	8004358 <I2C_Slave_ISR_DMA+0xec>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434c:	d104      	bne.n	8004358 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fc07 	bl	8004b64 <I2C_ITListenCplt>
 8004356:	e048      	b.n	80043ea <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b29      	cmp	r3, #41	; 0x29
 8004362:	d10e      	bne.n	8004382 <I2C_Slave_ISR_DMA+0x116>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800436a:	d00a      	beq.n	8004382 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2210      	movs	r2, #16
 8004372:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fd42 	bl	8004dfe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f9bf 	bl	80046fe <I2C_ITSlaveSeqCplt>
 8004380:	e033      	b.n	80043ea <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2210      	movs	r2, #16
 8004388:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800438a:	e034      	b.n	80043f6 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2210      	movs	r2, #16
 8004392:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f043 0204 	orr.w	r2, r3, #4
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <I2C_Slave_ISR_DMA+0x14a>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b4:	d11f      	bne.n	80043f6 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b21      	cmp	r3, #33	; 0x21
 80043ba:	d002      	beq.n	80043c2 <I2C_Slave_ISR_DMA+0x156>
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b29      	cmp	r3, #41	; 0x29
 80043c0:	d103      	bne.n	80043ca <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2221      	movs	r2, #33	; 0x21
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
 80043c8:	e008      	b.n	80043dc <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	2b22      	cmp	r3, #34	; 0x22
 80043ce:	d002      	beq.n	80043d6 <I2C_Slave_ISR_DMA+0x16a>
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b2a      	cmp	r3, #42	; 0x2a
 80043d4:	d102      	bne.n	80043dc <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2222      	movs	r2, #34	; 0x22
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fc14 	bl	8004c10 <I2C_ITError>
      if (treatdmanack == 1U)
 80043e8:	e005      	b.n	80043f6 <I2C_Slave_ISR_DMA+0x18a>
 80043ea:	e004      	b.n	80043f6 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2210      	movs	r2, #16
 80043f2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80043f4:	e011      	b.n	800441a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80043f6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80043f8:	e00f      	b.n	800441a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f8b1 	bl	800457c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <I2C_RequestMemoryWrite+0xa4>)
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fe47 	bl	80050e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fd4f 	bl	8004f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e02c      	b.n	80044c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004474:	893b      	ldrh	r3, [r7, #8]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
 800447e:	e015      	b.n	80044ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b29b      	uxth	r3, r3
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fd35 	bl	8004f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e012      	b.n	80044c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fce3 	bl	8004e82 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	80002000 	.word	0x80002000

080044d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	461a      	mov	r2, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	817b      	strh	r3, [r7, #10]
 80044e6:	460b      	mov	r3, r1
 80044e8:	813b      	strh	r3, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	8979      	ldrh	r1, [r7, #10]
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <I2C_RequestMemoryRead+0xa4>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2300      	movs	r3, #0
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fdf4 	bl	80050e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fcfc 	bl	8004f02 <I2C_WaitOnTXISFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e02c      	b.n	800456e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
 8004524:	e015      	b.n	8004552 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004526:	893b      	ldrh	r3, [r7, #8]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	b29b      	uxth	r3, r3
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	69b9      	ldr	r1, [r7, #24]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fce2 	bl	8004f02 <I2C_WaitOnTXISFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e012      	b.n	800456e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2200      	movs	r2, #0
 800455a:	2140      	movs	r1, #64	; 0x40
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fc90 	bl	8004e82 <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	80002000 	.word	0x80002000

0800457c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004592:	2b28      	cmp	r3, #40	; 0x28
 8004594:	d16a      	bne.n	800466c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d138      	bne.n	800464c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	09db      	lsrs	r3, r3, #7
 80045de:	b29a      	uxth	r2, r3
 80045e0:	89bb      	ldrh	r3, [r7, #12]
 80045e2:	4053      	eors	r3, r2
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f003 0306 	and.w	r3, r3, #6
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11c      	bne.n	8004628 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004600:	2b02      	cmp	r3, #2
 8004602:	d13b      	bne.n	800467c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2208      	movs	r2, #8
 8004610:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800461a:	89ba      	ldrh	r2, [r7, #12]
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff facf 	bl	8003bc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004626:	e029      	b.n	800467c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800462c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fe2f 	bl	8005294 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800463e:	89ba      	ldrh	r2, [r7, #12]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fabd 	bl	8003bc4 <HAL_I2C_AddrCallback>
}
 800464a:	e017      	b.n	800467c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800464c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fe1f 	bl	8005294 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800465e:	89ba      	ldrh	r2, [r7, #12]
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff faad 	bl	8003bc4 <HAL_I2C_AddrCallback>
}
 800466a:	e007      	b.n	800467c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2208      	movs	r2, #8
 8004672:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b21      	cmp	r3, #33	; 0x21
 800469e:	d115      	bne.n	80046cc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2211      	movs	r2, #17
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046b4:	2101      	movs	r1, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fdec 	bl	8005294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fa55 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046ca:	e014      	b.n	80046f6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2212      	movs	r2, #18
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046e0:	2102      	movs	r1, #2
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fdd6 	bl	8005294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fa49 	bl	8003b88 <HAL_I2C_MasterRxCpltCallback>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0b9b      	lsrs	r3, r3, #14
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e00d      	b.n	8004750 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	0bdb      	lsrs	r3, r3, #15
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b29      	cmp	r3, #41	; 0x29
 800475a:	d112      	bne.n	8004782 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2228      	movs	r2, #40	; 0x28
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2221      	movs	r2, #33	; 0x21
 8004768:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800476a:	2101      	movs	r1, #1
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fd91 	bl	8005294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fa0e 	bl	8003b9c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004780:	e017      	b.n	80047b2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b2a      	cmp	r3, #42	; 0x2a
 800478c:	d111      	bne.n	80047b2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2228      	movs	r2, #40	; 0x28
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2222      	movs	r2, #34	; 0x22
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800479c:	2102      	movs	r1, #2
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fd78 	bl	8005294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff f9ff 	bl	8003bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2220      	movs	r2, #32
 80047d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b21      	cmp	r3, #33	; 0x21
 80047dc:	d107      	bne.n	80047ee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047de:	2101      	movs	r1, #1
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fd57 	bl	8005294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2211      	movs	r2, #17
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
 80047ec:	e00c      	b.n	8004808 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b22      	cmp	r3, #34	; 0x22
 80047f8:	d106      	bne.n	8004808 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047fa:	2102      	movs	r1, #2
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fd49 	bl	8005294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2212      	movs	r2, #18
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b4d      	ldr	r3, [pc, #308]	; (8004948 <I2C_ITMasterCplt+0x18c>)
 8004814:	400b      	ands	r3, r1
 8004816:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4a      	ldr	r2, [pc, #296]	; (800494c <I2C_ITMasterCplt+0x190>)
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2210      	movs	r2, #16
 8004836:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d10b      	bne.n	8004868 <I2C_ITMasterCplt+0xac>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2db      	uxtb	r3, r3
 8004864:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004866:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fac8 	bl	8004dfe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d002      	beq.n	8004886 <I2C_ITMasterCplt+0xca>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9bf 	bl	8004c10 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004892:	e054      	b.n	800493e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b21      	cmp	r3, #33	; 0x21
 800489e:	d124      	bne.n	80048ea <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d10b      	bne.n	80048d2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc f836 	bl	800093c <HAL_I2C_MemTxCpltCallback>
}
 80048d0:	e035      	b.n	800493e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff f946 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
}
 80048e8:	e029      	b.n	800493e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b22      	cmp	r3, #34	; 0x22
 80048f4:	d123      	bne.n	800493e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d10b      	bne.n	8004928 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff f967 	bl	8003bf4 <HAL_I2C_MemRxCpltCallback>
}
 8004926:	e00a      	b.n	800493e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff f925 	bl	8003b88 <HAL_I2C_MasterRxCpltCallback>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	fe00e800 	.word	0xfe00e800
 800494c:	ffff0000 	.word	0xffff0000

08004950 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2220      	movs	r2, #32
 8004974:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b21      	cmp	r3, #33	; 0x21
 800497a:	d002      	beq.n	8004982 <I2C_ITSlaveCplt+0x32>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b29      	cmp	r3, #41	; 0x29
 8004980:	d108      	bne.n	8004994 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004982:	f248 0101 	movw	r1, #32769	; 0x8001
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fc84 	bl	8005294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2221      	movs	r2, #33	; 0x21
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
 8004992:	e00d      	b.n	80049b0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b22      	cmp	r3, #34	; 0x22
 8004998:	d002      	beq.n	80049a0 <I2C_ITSlaveCplt+0x50>
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b2a      	cmp	r3, #42	; 0x2a
 800499e:	d107      	bne.n	80049b0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049a0:	f248 0102 	movw	r1, #32770	; 0x8002
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fc75 	bl	8005294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2222      	movs	r2, #34	; 0x22
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <I2C_ITSlaveCplt+0x20c>)
 80049cc:	400b      	ands	r3, r1
 80049ce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa14 	bl	8004dfe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	0b9b      	lsrs	r3, r3, #14
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d020      	beq.n	8004a3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a08:	e018      	b.n	8004a3c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	0bdb      	lsrs	r3, r3, #15
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8a7 	bl	8004c10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b28      	cmp	r3, #40	; 0x28
 8004acc:	d141      	bne.n	8004b52 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f847 	bl	8004b64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad6:	e03c      	b.n	8004b52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae0:	d014      	beq.n	8004b0c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe0b 	bl	80046fe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <I2C_ITSlaveCplt+0x210>)
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff f86b 	bl	8003be0 <HAL_I2C_ListenCpltCallback>
}
 8004b0a:	e022      	b.n	8004b52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b22      	cmp	r3, #34	; 0x22
 8004b16:	d10e      	bne.n	8004b36 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff f83e 	bl	8003bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b34:	e00d      	b.n	8004b52 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff f825 	bl	8003b9c <HAL_I2C_SlaveTxCpltCallback>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	fe00e800 	.word	0xfe00e800
 8004b60:	ffff0000 	.word	0xffff0000

08004b64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <I2C_ITListenCplt+0xa8>)
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d022      	beq.n	8004be2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d012      	beq.n	8004be2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004be2:	f248 0103 	movw	r1, #32771	; 0x8003
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb54 	bl	8005294 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fe ffef 	bl	8003be0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	ffff0000 	.word	0xffff0000

08004c10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a5d      	ldr	r2, [pc, #372]	; (8004da4 <I2C_ITError+0x194>)
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d005      	beq.n	8004c54 <I2C_ITError+0x44>
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b29      	cmp	r3, #41	; 0x29
 8004c4c:	d002      	beq.n	8004c54 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b2a      	cmp	r3, #42	; 0x2a
 8004c52:	d10b      	bne.n	8004c6c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c54:	2103      	movs	r1, #3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb1c 	bl	8005294 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2228      	movs	r2, #40	; 0x28
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a50      	ldr	r2, [pc, #320]	; (8004da8 <I2C_ITError+0x198>)
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34
 8004c6a:	e011      	b.n	8004c90 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c6c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fb0f 	bl	8005294 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b60      	cmp	r3, #96	; 0x60
 8004c80:	d003      	beq.n	8004c8a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d039      	beq.n	8004d12 <I2C_ITError+0x102>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b11      	cmp	r3, #17
 8004ca2:	d002      	beq.n	8004caa <I2C_ITError+0x9a>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b21      	cmp	r3, #33	; 0x21
 8004ca8:	d133      	bne.n	8004d12 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb8:	d107      	bne.n	8004cca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe f939 	bl	8002f46 <HAL_DMA_GetState>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d017      	beq.n	8004d0a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	4a33      	ldr	r2, [pc, #204]	; (8004dac <I2C_ITError+0x19c>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe f8eb 	bl	8002eca <HAL_DMA_Abort_IT>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04d      	beq.n	8004d96 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d08:	e045      	b.n	8004d96 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f850 	bl	8004db0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d10:	e041      	b.n	8004d96 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d039      	beq.n	8004d8e <I2C_ITError+0x17e>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b12      	cmp	r3, #18
 8004d1e:	d002      	beq.n	8004d26 <I2C_ITError+0x116>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b22      	cmp	r3, #34	; 0x22
 8004d24:	d133      	bne.n	8004d8e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d34:	d107      	bne.n	8004d46 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe f8fb 	bl	8002f46 <HAL_DMA_GetState>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d017      	beq.n	8004d86 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <I2C_ITError+0x19c>)
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe f8ad 	bl	8002eca <HAL_DMA_Abort_IT>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d84:	e009      	b.n	8004d9a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f812 	bl	8004db0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d8c:	e005      	b.n	8004d9a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f80e 	bl	8004db0 <I2C_TreatErrorCallback>
  }
}
 8004d94:	e002      	b.n	8004d9c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d9a:	bf00      	nop
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	ffff0000 	.word	0xffff0000
 8004da8:	08003e81 	.word	0x08003e81
 8004dac:	08004e47 	.word	0x08004e47

08004db0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b60      	cmp	r3, #96	; 0x60
 8004dc2:	d10e      	bne.n	8004de2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe ff1e 	bl	8003c1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004de0:	e009      	b.n	8004df6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe ff09 	bl	8003c08 <HAL_I2C_ErrorCallback>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d103      	bne.n	8004e1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d007      	beq.n	8004e3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	619a      	str	r2, [r3, #24]
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	2200      	movs	r2, #0
 8004e62:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	2200      	movs	r2, #0
 8004e72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff ff9b 	bl	8004db0 <I2C_TreatErrorCallback>
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e92:	e022      	b.n	8004eda <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d01e      	beq.n	8004eda <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7fd fe6c 	bl	8002b78 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e00f      	b.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d0cd      	beq.n	8004e94 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f0e:	e02c      	b.n	8004f6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f871 	bl	8004ffc <I2C_IsAcknowledgeFailed>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02a      	b.n	8004f7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d01e      	beq.n	8004f6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fd fe24 	bl	8002b78 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d113      	bne.n	8004f6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e007      	b.n	8004f7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d1cb      	bne.n	8004f10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f8e:	e028      	b.n	8004fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f831 	bl	8004ffc <I2C_IsAcknowledgeFailed>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e026      	b.n	8004ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa4:	f7fd fde8 	bl	8002b78 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d113      	bne.n	8004fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e007      	b.n	8004ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d1cf      	bne.n	8004f90 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b10      	cmp	r3, #16
 8005014:	d161      	bne.n	80050da <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005024:	d02b      	beq.n	800507e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005034:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005036:	e022      	b.n	800507e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d01e      	beq.n	800507e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fd fd9a 	bl	8002b78 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <I2C_IsAcknowledgeFailed+0x5a>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d113      	bne.n	800507e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e02e      	b.n	80050dc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d1d5      	bne.n	8005038 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2210      	movs	r2, #16
 8005092:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2220      	movs	r2, #32
 800509a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff feae 	bl	8004dfe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <I2C_IsAcknowledgeFailed+0xe8>)
 80050ae:	400b      	ands	r3, r1
 80050b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	fe00e800 	.word	0xfe00e800

080050e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	4613      	mov	r3, r2
 80050f8:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <I2C_TransferConfig+0xc4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <I2C_TransferConfig+0x3a>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <I2C_TransferConfig+0xc8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <I2C_TransferConfig+0x3a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <I2C_TransferConfig+0xcc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <I2C_TransferConfig+0x3a>
 8005118:	f641 11cb 	movw	r1, #6603	; 0x19cb
 800511c:	4826      	ldr	r0, [pc, #152]	; (80051b8 <I2C_TransferConfig+0xd0>)
 800511e:	f7fd f92c 	bl	800237a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005128:	d00b      	beq.n	8005142 <I2C_TransferConfig+0x5a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005130:	d007      	beq.n	8005142 <I2C_TransferConfig+0x5a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <I2C_TransferConfig+0x5a>
 8005138:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800513c:	481e      	ldr	r0, [pc, #120]	; (80051b8 <I2C_TransferConfig+0xd0>)
 800513e:	f7fd f91c 	bl	800237a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <I2C_TransferConfig+0xd4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <I2C_TransferConfig+0x82>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <I2C_TransferConfig+0xd8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <I2C_TransferConfig+0x82>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <I2C_TransferConfig+0xdc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <I2C_TransferConfig+0x82>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <I2C_TransferConfig+0x82>
 8005160:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8005164:	4814      	ldr	r0, [pc, #80]	; (80051b8 <I2C_TransferConfig+0xd0>)
 8005166:	f7fd f908 	bl	800237a <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	0d5b      	lsrs	r3, r3, #21
 8005174:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <I2C_TransferConfig+0xe0>)
 800517a:	430b      	orrs	r3, r1
 800517c:	43db      	mvns	r3, r3
 800517e:	ea02 0103 	and.w	r1, r2, r3
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005188:	7a7b      	ldrb	r3, [r7, #9]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	431a      	orrs	r2, r3
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40005400 	.word	0x40005400
 80051b0:	40005800 	.word	0x40005800
 80051b4:	40007800 	.word	0x40007800
 80051b8:	0800c9fc 	.word	0x0800c9fc
 80051bc:	80004000 	.word	0x80004000
 80051c0:	80002400 	.word	0x80002400
 80051c4:	80002000 	.word	0x80002000
 80051c8:	03ff63ff 	.word	0x03ff63ff

080051cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <I2C_Enable_IRQ+0xc0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80051ea:	4a29      	ldr	r2, [pc, #164]	; (8005290 <I2C_Enable_IRQ+0xc4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d11d      	bne.n	800522c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da03      	bge.n	8005200 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005200:	887b      	ldrh	r3, [r7, #2]
 8005202:	2b10      	cmp	r3, #16
 8005204:	d103      	bne.n	800520e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800520c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	2b20      	cmp	r3, #32
 8005212:	d103      	bne.n	800521c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800521a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d125      	bne.n	800526e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005228:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800522a:	e020      	b.n	800526e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800522c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da03      	bge.n	800523c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800523a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800524c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800525e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	2b20      	cmp	r3, #32
 8005264:	d103      	bne.n	800526e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f043 0320 	orr.w	r3, r3, #32
 800526c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	430a      	orrs	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	08004087 	.word	0x08004087
 8005290:	0800426d 	.word	0x0800426d

08005294 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80052b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052c2:	2b28      	cmp	r3, #40	; 0x28
 80052c4:	d003      	beq.n	80052ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052ce:	887b      	ldrh	r3, [r7, #2]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00f      	beq.n	80052f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80052de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052ec:	2b28      	cmp	r3, #40	; 0x28
 80052ee:	d003      	beq.n	80052f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da03      	bge.n	8005308 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005306:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	2b10      	cmp	r3, #16
 800530c:	d103      	bne.n	8005316 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	2b20      	cmp	r3, #32
 800531a:	d103      	bne.n	8005324 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f043 0320 	orr.w	r3, r3, #32
 8005322:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d103      	bne.n	8005332 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005330:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6819      	ldr	r1, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43da      	mvns	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00d      	beq.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d008      	beq.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8005378:	2164      	movs	r1, #100	; 0x64
 800537a:	482c      	ldr	r0, [pc, #176]	; (800542c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800537c:	f7fc fffd 	bl	800237a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538c:	d003      	beq.n	8005396 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800538e:	2165      	movs	r1, #101	; 0x65
 8005390:	4826      	ldr	r0, [pc, #152]	; (800542c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8005392:	f7fc fff2 	bl	800237a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d138      	bne.n	8005414 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e032      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40005400 	.word	0x40005400
 8005424:	40005800 	.word	0x40005800
 8005428:	40007800 	.word	0x40007800
 800542c:	0800ca34 	.word	0x0800ca34

08005430 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2e      	ldr	r2, [pc, #184]	; (80054f8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00d      	beq.n	8005460 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d008      	beq.n	8005460 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2b      	ldr	r2, [pc, #172]	; (8005500 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8005458:	2192      	movs	r1, #146	; 0x92
 800545a:	482a      	ldr	r0, [pc, #168]	; (8005504 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800545c:	f7fc ff8d 	bl	800237a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d903      	bls.n	800546e <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8005466:	2193      	movs	r1, #147	; 0x93
 8005468:	4826      	ldr	r0, [pc, #152]	; (8005504 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800546a:	f7fc ff86 	bl	800237a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b20      	cmp	r3, #32
 8005478:	d139      	bne.n	80054ee <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8005484:	2302      	movs	r3, #2
 8005486:	e033      	b.n	80054f0 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40005400 	.word	0x40005400
 80054fc:	40005800 	.word	0x40005800
 8005500:	40007800 	.word	0x40007800
 8005504:	0800ca34 	.word	0x0800ca34

08005508 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a04      	ldr	r2, [pc, #16]	; (8005524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6013      	str	r3, [r2, #0]
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40007000 	.word	0x40007000

08005528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800552e:	af00      	add	r7, sp, #0
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f001 b85e 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_OscConfig+0x66>
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d119      	bne.n	800558e <HAL_RCC_OscConfig+0x66>
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d112      	bne.n	800558e <HAL_RCC_OscConfig+0x66>
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_RCC_OscConfig+0x66>
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_RCC_OscConfig+0x66>
 8005584:	f240 114b 	movw	r1, #331	; 0x14b
 8005588:	48be      	ldr	r0, [pc, #760]	; (8005884 <HAL_RCC_OscConfig+0x35c>)
 800558a:	f7fc fef6 	bl	800237a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8178 	beq.w	800588e <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d010      	beq.n	80055ca <HAL_RCC_OscConfig+0xa2>
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d00a      	beq.n	80055ca <HAL_RCC_OscConfig+0xa2>
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055be:	d004      	beq.n	80055ca <HAL_RCC_OscConfig+0xa2>
 80055c0:	f240 1151 	movw	r1, #337	; 0x151
 80055c4:	48af      	ldr	r0, [pc, #700]	; (8005884 <HAL_RCC_OscConfig+0x35c>)
 80055c6:	f7fc fed8 	bl	800237a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055ca:	4baf      	ldr	r3, [pc, #700]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d00c      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055d6:	4bac      	ldr	r3, [pc, #688]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d159      	bne.n	8005696 <HAL_RCC_OscConfig+0x16e>
 80055e2:	4ba9      	ldr	r3, [pc, #676]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ee:	d152      	bne.n	8005696 <HAL_RCC_OscConfig+0x16e>
 80055f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80055fc:	fa93 f3a3 	rbit	r3, r3
 8005600:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8005604:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d102      	bne.n	8005622 <HAL_RCC_OscConfig+0xfa>
 800561c:	4b9a      	ldr	r3, [pc, #616]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	e015      	b.n	800564e <HAL_RCC_OscConfig+0x126>
 8005622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005626:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800563a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800563e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005642:	fa93 f3a3 	rbit	r3, r3
 8005646:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800564a:	4b8f      	ldr	r3, [pc, #572]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005652:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005656:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800565a:	fa92 f2a2 	rbit	r2, r2
 800565e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005662:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005666:	fab2 f282 	clz	r2, r2
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	f042 0220 	orr.w	r2, r2, #32
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	f002 021f 	and.w	r2, r2, #31
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f202 	lsl.w	r2, r1, r2
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 8104 	beq.w	800588c <HAL_RCC_OscConfig+0x364>
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 80fe 	bne.w	800588c <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f000 bfb4 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d106      	bne.n	80056b0 <HAL_RCC_OscConfig+0x188>
 80056a2:	4b79      	ldr	r3, [pc, #484]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a78      	ldr	r2, [pc, #480]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e030      	b.n	8005712 <HAL_RCC_OscConfig+0x1ea>
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x1ac>
 80056ba:	4b73      	ldr	r3, [pc, #460]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a72      	ldr	r2, [pc, #456]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b70      	ldr	r3, [pc, #448]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6f      	ldr	r2, [pc, #444]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01e      	b.n	8005712 <HAL_RCC_OscConfig+0x1ea>
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056de:	d10c      	bne.n	80056fa <HAL_RCC_OscConfig+0x1d2>
 80056e0:	4b69      	ldr	r3, [pc, #420]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a68      	ldr	r2, [pc, #416]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	4b66      	ldr	r3, [pc, #408]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a65      	ldr	r2, [pc, #404]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e00b      	b.n	8005712 <HAL_RCC_OscConfig+0x1ea>
 80056fa:	4b63      	ldr	r3, [pc, #396]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a62      	ldr	r2, [pc, #392]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 8005700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b60      	ldr	r3, [pc, #384]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a5f      	ldr	r2, [pc, #380]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800570c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005710:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d059      	beq.n	80057d0 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fd fa2c 	bl	8002b78 <HAL_GetTick>
 8005720:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005726:	f7fd fa27 	bl	8002b78 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d902      	bls.n	800573c <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	f000 bf61 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 800573c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005740:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005750:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	b2db      	uxtb	r3, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_RCC_OscConfig+0x246>
 8005768:	4b47      	ldr	r3, [pc, #284]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x272>
 800576e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005772:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005786:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800578a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005796:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800579e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80057a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80057a6:	fa92 f2a2 	rbit	r2, r2
 80057aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80057ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80057b2:	fab2 f282 	clz	r2, r2
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	f042 0220 	orr.w	r2, r2, #32
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	f002 021f 	and.w	r2, r2, #31
 80057c2:	2101      	movs	r1, #1
 80057c4:	fa01 f202 	lsl.w	r2, r1, r2
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ab      	beq.n	8005726 <HAL_RCC_OscConfig+0x1fe>
 80057ce:	e05e      	b.n	800588e <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fd f9d2 	bl	8002b78 <HAL_GetTick>
 80057d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057da:	f7fd f9cd 	bl	8002b78 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d902      	bls.n	80057f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	f000 bf07 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 80057f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005804:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d102      	bne.n	8005822 <HAL_RCC_OscConfig+0x2fa>
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	e015      	b.n	800584e <HAL_RCC_OscConfig+0x326>
 8005822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005826:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800583a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800583e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RCC_OscConfig+0x360>)
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005852:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005856:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800585a:	fa92 f2a2 	rbit	r2, r2
 800585e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005862:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005866:	fab2 f282 	clz	r2, r2
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	f042 0220 	orr.w	r2, r2, #32
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	f002 021f 	and.w	r2, r2, #31
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ab      	bne.n	80057da <HAL_RCC_OscConfig+0x2b2>
 8005882:	e004      	b.n	800588e <HAL_RCC_OscConfig+0x366>
 8005884:	0800ca70 	.word	0x0800ca70
 8005888:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 818e 	beq.w	8005bba <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_RCC_OscConfig+0x394>
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d004      	beq.n	80058bc <HAL_RCC_OscConfig+0x394>
 80058b2:	f240 1189 	movw	r1, #393	; 0x189
 80058b6:	48a8      	ldr	r0, [pc, #672]	; (8005b58 <HAL_RCC_OscConfig+0x630>)
 80058b8:	f7fc fd5f 	bl	800237a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b1f      	cmp	r3, #31
 80058c4:	d904      	bls.n	80058d0 <HAL_RCC_OscConfig+0x3a8>
 80058c6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80058ca:	48a3      	ldr	r0, [pc, #652]	; (8005b58 <HAL_RCC_OscConfig+0x630>)
 80058cc:	f7fc fd55 	bl	800237a <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80058d0:	4ba2      	ldr	r3, [pc, #648]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058dc:	4b9f      	ldr	r3, [pc, #636]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d16d      	bne.n	80059c4 <HAL_RCC_OscConfig+0x49c>
 80058e8:	4b9c      	ldr	r3, [pc, #624]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d166      	bne.n	80059c4 <HAL_RCC_OscConfig+0x49c>
 80058f6:	2302      	movs	r3, #2
 80058f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005908:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <HAL_RCC_OscConfig+0x3fe>
 8005920:	4b8e      	ldr	r3, [pc, #568]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	e013      	b.n	800594e <HAL_RCC_OscConfig+0x426>
 8005926:	2302      	movs	r3, #2
 8005928:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005930:	fa93 f3a3 	rbit	r3, r3
 8005934:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005938:	2302      	movs	r3, #2
 800593a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800593e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005942:	fa93 f3a3 	rbit	r3, r3
 8005946:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800594a:	4b84      	ldr	r3, [pc, #528]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2202      	movs	r2, #2
 8005950:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005954:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005958:	fa92 f2a2 	rbit	r2, r2
 800595c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005960:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0220 	orr.w	r2, r2, #32
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_RCC_OscConfig+0x468>
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d002      	beq.n	8005990 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f000 be37 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	4b72      	ldr	r3, [pc, #456]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	21f8      	movs	r1, #248	; 0xf8
 80059a0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80059a8:	fa91 f1a1 	rbit	r1, r1
 80059ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80059b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80059b4:	fab1 f181 	clz	r1, r1
 80059b8:	b2c9      	uxtb	r1, r1
 80059ba:	408b      	lsls	r3, r1
 80059bc:	4967      	ldr	r1, [pc, #412]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c2:	e0fa      	b.n	8005bba <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8085 	beq.w	8005ada <HAL_RCC_OscConfig+0x5b2>
 80059d0:	2301      	movs	r3, #1
 80059d2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80059e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e6:	fab3 f383 	clz	r3, r3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	461a      	mov	r2, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fd f8bc 	bl	8002b78 <HAL_GetTick>
 8005a00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a04:	e00a      	b.n	8005a1c <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a06:	f7fd f8b7 	bl	8002b78 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d902      	bls.n	8005a1c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	f000 bdf1 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005a2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d102      	bne.n	8005a4c <HAL_RCC_OscConfig+0x524>
 8005a46:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	e013      	b.n	8005a74 <HAL_RCC_OscConfig+0x54c>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a56:	fa93 f3a3 	rbit	r3, r3
 8005a5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005a5e:	2302      	movs	r3, #2
 8005a60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a64:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005a68:	fa93 f3a3 	rbit	r3, r3
 8005a6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a70:	4b3a      	ldr	r3, [pc, #232]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2202      	movs	r2, #2
 8005a76:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005a7a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005a7e:	fa92 f2a2 	rbit	r2, r2
 8005a82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005a86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a8a:	fab2 f282 	clz	r2, r2
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	f042 0220 	orr.w	r2, r2, #32
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f002 021f 	and.w	r2, r2, #31
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0af      	beq.n	8005a06 <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aae:	1d3b      	adds	r3, r7, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	21f8      	movs	r1, #248	; 0xf8
 8005ab6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005abe:	fa91 f1a1 	rbit	r1, r1
 8005ac2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005ac6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005aca:	fab1 f181 	clz	r1, r1
 8005ace:	b2c9      	uxtb	r1, r1
 8005ad0:	408b      	lsls	r3, r1
 8005ad2:	4922      	ldr	r1, [pc, #136]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	e06f      	b.n	8005bba <HAL_RCC_OscConfig+0x692>
 8005ada:	2301      	movs	r3, #1
 8005adc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005ae4:	fa93 f3a3 	rbit	r3, r3
 8005ae8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005aec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af0:	fab3 f383 	clz	r3, r3
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005afa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b06:	f7fd f837 	bl	8002b78 <HAL_GetTick>
 8005b0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b10:	f7fd f832 	bl	8002b78 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d902      	bls.n	8005b26 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	f000 bd6c 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005b26:	2302      	movs	r3, #2
 8005b28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005b38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3c:	fab3 f383 	clz	r3, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_OscConfig+0x638>
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <HAL_RCC_OscConfig+0x634>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	e018      	b.n	8005b88 <HAL_RCC_OscConfig+0x660>
 8005b56:	bf00      	nop
 8005b58:	0800ca70 	.word	0x0800ca70
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	2302      	movs	r3, #2
 8005b62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b72:	2302      	movs	r3, #2
 8005b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b84:	4bc0      	ldr	r3, [pc, #768]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005b8e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005b92:	fa92 f2a2 	rbit	r2, r2
 8005b96:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005b9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b9e:	fab2 f282 	clz	r2, r2
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	f042 0220 	orr.w	r2, r2, #32
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	f002 021f 	and.w	r2, r2, #31
 8005bae:	2101      	movs	r1, #1
 8005bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1aa      	bne.n	8005b10 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80e7 	beq.w	8005d98 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005bca:	1d3b      	adds	r3, r7, #4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_RCC_OscConfig+0x6c0>
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d004      	beq.n	8005be8 <HAL_RCC_OscConfig+0x6c0>
 8005bde:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8005be2:	48aa      	ldr	r0, [pc, #680]	; (8005e8c <HAL_RCC_OscConfig+0x964>)
 8005be4:	f7fc fbc9 	bl	800237a <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d066      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x798>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005c04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c08:	fab3 f383 	clz	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4b9f      	ldr	r3, [pc, #636]	; (8005e90 <HAL_RCC_OscConfig+0x968>)
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	461a      	mov	r2, r3
 8005c18:	2301      	movs	r3, #1
 8005c1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1c:	f7fc ffac 	bl	8002b78 <HAL_GetTick>
 8005c20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c26:	f7fc ffa7 	bl	8002b78 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f000 bce1 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c46:	fa93 f2a3 	rbit	r2, r3
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005c54:	2202      	movs	r2, #2
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	fa93 f2a3 	rbit	r2, r3
 8005c62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	fa93 f2a3 	rbit	r2, r3
 8005c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c80:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c88:	2102      	movs	r1, #2
 8005c8a:	6019      	str	r1, [r3, #0]
 8005c8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	fa93 f1a3 	rbit	r1, r3
 8005c96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c9a:	6019      	str	r1, [r3, #0]
  return result;
 8005c9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0b3      	beq.n	8005c26 <HAL_RCC_OscConfig+0x6fe>
 8005cbe:	e06b      	b.n	8005d98 <HAL_RCC_OscConfig+0x870>
 8005cc0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	fa93 f2a3 	rbit	r2, r3
 8005cd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cd6:	601a      	str	r2, [r3, #0]
  return result;
 8005cd8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cdc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b6a      	ldr	r3, [pc, #424]	; (8005e90 <HAL_RCC_OscConfig+0x968>)
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fc ff41 	bl	8002b78 <HAL_GetTick>
 8005cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfc:	f7fc ff3c 	bl	8002b78 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d902      	bls.n	8005d12 <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f000 bc76 	b.w	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005d12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d16:	2202      	movs	r2, #2
 8005d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	fa93 f2a3 	rbit	r2, r3
 8005d24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d2e:	2202      	movs	r2, #2
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	fa93 f2a3 	rbit	r2, r3
 8005d3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d46:	2202      	movs	r2, #2
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	fa93 f2a3 	rbit	r2, r3
 8005d54:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5a:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d62:	2102      	movs	r1, #2
 8005d64:	6019      	str	r1, [r3, #0]
 8005d66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	fa93 f1a3 	rbit	r1, r3
 8005d70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d74:	6019      	str	r1, [r3, #0]
  return result;
 8005d76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	fab3 f383 	clz	r3, r3
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1b1      	bne.n	8005cfc <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8171 	beq.w	800608a <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x8ae>
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x8ae>
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d004      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x8ae>
 8005dcc:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005dd0:	482e      	ldr	r0, [pc, #184]	; (8005e8c <HAL_RCC_OscConfig+0x964>)
 8005dd2:	f7fc fad2 	bl	800237a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d112      	bne.n	8005e08 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a28      	ldr	r2, [pc, #160]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005df6:	f107 030c 	add.w	r3, r7, #12
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e08:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_OscConfig+0x96c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11a      	bne.n	8005e4a <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_RCC_OscConfig+0x96c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_RCC_OscConfig+0x96c>)
 8005e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e20:	f7fc feaa 	bl	8002b78 <HAL_GetTick>
 8005e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	e009      	b.n	8005e3e <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fc fea5 	bl	8002b78 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e3df      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <HAL_RCC_OscConfig+0x96c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0ef      	beq.n	8005e2a <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <HAL_RCC_OscConfig+0x93a>
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6213      	str	r3, [r2, #32]
 8005e60:	e038      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <HAL_RCC_OscConfig+0x970>
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	6213      	str	r3, [r2, #32]
 8005e78:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	4a02      	ldr	r2, [pc, #8]	; (8005e88 <HAL_RCC_OscConfig+0x960>)
 8005e7e:	f023 0304 	bic.w	r3, r3, #4
 8005e82:	6213      	str	r3, [r2, #32]
 8005e84:	e026      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005e86:	bf00      	nop
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	0800ca70 	.word	0x0800ca70
 8005e90:	10908120 	.word	0x10908120
 8005e94:	40007000 	.word	0x40007000
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x994>
 8005ea2:	4b5e      	ldr	r3, [pc, #376]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4a5d      	ldr	r2, [pc, #372]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005ea8:	f043 0304 	orr.w	r3, r3, #4
 8005eac:	6213      	str	r3, [r2, #32]
 8005eae:	4b5b      	ldr	r3, [pc, #364]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	4a5a      	ldr	r2, [pc, #360]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6213      	str	r3, [r2, #32]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005ebc:	4b57      	ldr	r3, [pc, #348]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	4a56      	ldr	r2, [pc, #344]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	6213      	str	r3, [r2, #32]
 8005ec8:	4b54      	ldr	r3, [pc, #336]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	4a53      	ldr	r2, [pc, #332]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d064      	beq.n	8005fa8 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ede:	f7fc fe4b 	bl	8002b78 <HAL_GetTick>
 8005ee2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee6:	e00b      	b.n	8005f00 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee8:	f7fc fe46 	bl	8002b78 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e37e      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005f00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f04:	2202      	movs	r2, #2
 8005f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	fa93 f2a3 	rbit	r2, r3
 8005f12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	fa93 f2a3 	rbit	r2, r3
 8005f2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f2e:	601a      	str	r2, [r3, #0]
  return result;
 8005f30:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f36:	fab3 f383 	clz	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d102      	bne.n	8005f50 <HAL_RCC_OscConfig+0xa28>
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	e00d      	b.n	8005f6c <HAL_RCC_OscConfig+0xa44>
 8005f50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f54:	2202      	movs	r2, #2
 8005f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	fa93 f2a3 	rbit	r2, r3
 8005f62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	4b2c      	ldr	r3, [pc, #176]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f70:	2102      	movs	r1, #2
 8005f72:	6011      	str	r1, [r2, #0]
 8005f74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	fa92 f1a2 	rbit	r1, r2
 8005f7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f82:	6011      	str	r1, [r2, #0]
  return result;
 8005f84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	fab2 f282 	clz	r2, r2
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	f002 021f 	and.w	r2, r2, #31
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0a0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x9c0>
 8005fa6:	e066      	b.n	8006076 <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa8:	f7fc fde6 	bl	8002b78 <HAL_GetTick>
 8005fac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb0:	e00b      	b.n	8005fca <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f7fc fde1 	bl	8002b78 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e319      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
 8005fca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fce:	2202      	movs	r2, #2
 8005fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	fa93 f2a3 	rbit	r2, r3
 8005fdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	fa93 f2a3 	rbit	r2, r3
 8005ff4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ff8:	601a      	str	r2, [r3, #0]
  return result;
 8005ffa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006000:	fab3 f383 	clz	r3, r3
 8006004:	b2db      	uxtb	r3, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f043 0302 	orr.w	r3, r3, #2
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d105      	bne.n	8006020 <HAL_RCC_OscConfig+0xaf8>
 8006014:	4b01      	ldr	r3, [pc, #4]	; (800601c <HAL_RCC_OscConfig+0xaf4>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	e010      	b.n	800603c <HAL_RCC_OscConfig+0xb14>
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006024:	2202      	movs	r2, #2
 8006026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	fa93 f2a3 	rbit	r2, r3
 8006032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	4bad      	ldr	r3, [pc, #692]	; (80062f0 <HAL_RCC_OscConfig+0xdc8>)
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006040:	2102      	movs	r1, #2
 8006042:	6011      	str	r1, [r2, #0]
 8006044:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	fa92 f1a2 	rbit	r1, r2
 800604e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006052:	6011      	str	r1, [r2, #0]
  return result;
 8006054:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	fab2 f282 	clz	r2, r2
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	f002 021f 	and.w	r2, r2, #31
 800606a:	2101      	movs	r1, #1
 800606c:	fa01 f202 	lsl.w	r2, r1, r2
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d19d      	bne.n	8005fb2 <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006076:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800607a:	2b01      	cmp	r3, #1
 800607c:	d105      	bne.n	800608a <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800607e:	4b9c      	ldr	r3, [pc, #624]	; (80062f0 <HAL_RCC_OscConfig+0xdc8>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4a9b      	ldr	r2, [pc, #620]	; (80062f0 <HAL_RCC_OscConfig+0xdc8>)
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <HAL_RCC_OscConfig+0xb8a>
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d009      	beq.n	80060b2 <HAL_RCC_OscConfig+0xb8a>
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d004      	beq.n	80060b2 <HAL_RCC_OscConfig+0xb8a>
 80060a8:	f240 213a 	movw	r1, #570	; 0x23a
 80060ac:	4891      	ldr	r0, [pc, #580]	; (80062f4 <HAL_RCC_OscConfig+0xdcc>)
 80060ae:	f7fc f964 	bl	800237a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 829f 	beq.w	80065fc <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060be:	4b8c      	ldr	r3, [pc, #560]	; (80062f0 <HAL_RCC_OscConfig+0xdc8>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	f000 826c 	beq.w	80065a4 <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	f040 81e4 	bne.w	80064a0 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80060d8:	1d3b      	adds	r3, r7, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e2:	d00a      	beq.n	80060fa <HAL_RCC_OscConfig+0xbd2>
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ee:	d004      	beq.n	80060fa <HAL_RCC_OscConfig+0xbd2>
 80060f0:	f240 2143 	movw	r1, #579	; 0x243
 80060f4:	487f      	ldr	r0, [pc, #508]	; (80062f4 <HAL_RCC_OscConfig+0xdcc>)
 80060f6:	f7fc f940 	bl	800237a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d058      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006104:	1d3b      	adds	r3, r7, #4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800610e:	d052      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800611a:	d04c      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006126:	d046      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006132:	d040      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006134:	1d3b      	adds	r3, r7, #4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800613e:	d03a      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800614a:	d034      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006156:	d02e      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006162:	d028      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006164:	1d3b      	adds	r3, r7, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800616e:	d022      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800617a:	d01c      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006186:	d016      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006192:	d010      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800619e:	d00a      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80061aa:	d004      	beq.n	80061b6 <HAL_RCC_OscConfig+0xc8e>
 80061ac:	f44f 7111 	mov.w	r1, #580	; 0x244
 80061b0:	4850      	ldr	r0, [pc, #320]	; (80062f4 <HAL_RCC_OscConfig+0xdcc>)
 80061b2:	f7fc f8e2 	bl	800237a <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d04f      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d04a      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d045      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d040      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d03b      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d036      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d031      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 80061fc:	1d3b      	adds	r3, r7, #4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b07      	cmp	r3, #7
 8006204:	d02c      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2b08      	cmp	r3, #8
 800620e:	d027      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b09      	cmp	r3, #9
 8006218:	d022      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b0a      	cmp	r3, #10
 8006222:	d01d      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b0b      	cmp	r3, #11
 800622c:	d018      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b0c      	cmp	r3, #12
 8006236:	d013      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b0d      	cmp	r3, #13
 8006240:	d00e      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b0e      	cmp	r3, #14
 800624a:	d009      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b0f      	cmp	r3, #15
 8006254:	d004      	beq.n	8006260 <HAL_RCC_OscConfig+0xd38>
 8006256:	f240 2146 	movw	r1, #582	; 0x246
 800625a:	4826      	ldr	r0, [pc, #152]	; (80062f4 <HAL_RCC_OscConfig+0xdcc>)
 800625c:	f7fc f88d 	bl	800237a <assert_failed>
 8006260:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	fa93 f2a3 	rbit	r2, r3
 8006274:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006278:	601a      	str	r2, [r3, #0]
  return result;
 800627a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800627e:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006280:	fab3 f383 	clz	r3, r3
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800628a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006296:	f7fc fc6f 	bl	8002b78 <HAL_GetTick>
 800629a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800629e:	e009      	b.n	80062b4 <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fc fc6a 	bl	8002b78 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e1a4      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
 80062b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80062b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	fa93 f2a3 	rbit	r2, r3
 80062c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062cc:	601a      	str	r2, [r3, #0]
  return result;
 80062ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d4:	fab3 f383 	clz	r3, r3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_OscConfig+0xdd0>
 80062e8:	4b01      	ldr	r3, [pc, #4]	; (80062f0 <HAL_RCC_OscConfig+0xdc8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	e020      	b.n	8006330 <HAL_RCC_OscConfig+0xe08>
 80062ee:	bf00      	nop
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800ca70 	.word	0x0800ca70
 80062f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80062fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006302:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	fa93 f2a3 	rbit	r2, r3
 800630c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	fa93 f2a3 	rbit	r2, r3
 8006326:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	4bb6      	ldr	r3, [pc, #728]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006334:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	fa92 f1a2 	rbit	r1, r2
 8006344:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006348:	6011      	str	r1, [r2, #0]
  return result;
 800634a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	fab2 f282 	clz	r2, r2
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	f042 0220 	orr.w	r2, r2, #32
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	f002 021f 	and.w	r2, r2, #31
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f202 	lsl.w	r2, r1, r2
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d199      	bne.n	80062a0 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800636c:	4ba6      	ldr	r3, [pc, #664]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	f023 020f 	bic.w	r2, r3, #15
 8006374:	1d3b      	adds	r3, r7, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	49a3      	ldr	r1, [pc, #652]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 800637c:	4313      	orrs	r3, r2
 800637e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006380:	4ba1      	ldr	r3, [pc, #644]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a19      	ldr	r1, [r3, #32]
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	430b      	orrs	r3, r1
 8006396:	499c      	ldr	r1, [pc, #624]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	604b      	str	r3, [r1, #4]
 800639c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	fa93 f2a3 	rbit	r2, r3
 80063b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063b4:	601a      	str	r2, [r3, #0]
  return result;
 80063b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	461a      	mov	r2, r3
 80063ce:	2301      	movs	r3, #1
 80063d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d2:	f7fc fbd1 	bl	8002b78 <HAL_GetTick>
 80063d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063da:	e009      	b.n	80063f0 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fc fbcc 	bl	8002b78 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e106      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
 80063f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	fa93 f2a3 	rbit	r2, r3
 8006404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006408:	601a      	str	r2, [r3, #0]
  return result;
 800640a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800640e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006410:	fab3 f383 	clz	r3, r3
 8006414:	b2db      	uxtb	r3, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d102      	bne.n	800642a <HAL_RCC_OscConfig+0xf02>
 8006424:	4b78      	ldr	r3, [pc, #480]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	e01b      	b.n	8006462 <HAL_RCC_OscConfig+0xf3a>
 800642a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800642e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	fa93 f2a3 	rbit	r2, r3
 800643e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	fa93 f2a3 	rbit	r2, r3
 8006458:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006466:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800646a:	6011      	str	r1, [r2, #0]
 800646c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	fa92 f1a2 	rbit	r1, r2
 8006476:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800647a:	6011      	str	r1, [r2, #0]
  return result;
 800647c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	fab2 f282 	clz	r2, r2
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	f042 0220 	orr.w	r2, r2, #32
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	f002 021f 	and.w	r2, r2, #31
 8006492:	2101      	movs	r1, #1
 8006494:	fa01 f202 	lsl.w	r2, r1, r2
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d09e      	beq.n	80063dc <HAL_RCC_OscConfig+0xeb4>
 800649e:	e0ad      	b.n	80065fc <HAL_RCC_OscConfig+0x10d4>
 80064a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	fa93 f2a3 	rbit	r2, r3
 80064b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064b8:	601a      	str	r2, [r3, #0]
  return result;
 80064ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064be:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c0:	fab3 f383 	clz	r3, r3
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d6:	f7fc fb4f 	bl	8002b78 <HAL_GetTick>
 80064da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064de:	e009      	b.n	80064f4 <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e0:	f7fc fb4a 	bl	8002b78 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e084      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
 80064f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	fa93 f2a3 	rbit	r2, r3
 8006508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800650c:	601a      	str	r2, [r3, #0]
  return result;
 800650e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006512:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006514:	fab3 f383 	clz	r3, r3
 8006518:	b2db      	uxtb	r3, r3
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <HAL_RCC_OscConfig+0x1006>
 8006528:	4b37      	ldr	r3, [pc, #220]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	e01b      	b.n	8006566 <HAL_RCC_OscConfig+0x103e>
 800652e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	fa93 f2a3 	rbit	r2, r3
 8006542:	f107 0320 	add.w	r3, r7, #32
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f107 031c 	add.w	r3, r7, #28
 800654c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f107 031c 	add.w	r3, r7, #28
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	fa93 f2a3 	rbit	r2, r3
 800655c:	f107 0318 	add.w	r3, r7, #24
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	4b29      	ldr	r3, [pc, #164]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	f107 0214 	add.w	r2, r7, #20
 800656a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800656e:	6011      	str	r1, [r2, #0]
 8006570:	f107 0214 	add.w	r2, r7, #20
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	fa92 f1a2 	rbit	r1, r2
 800657a:	f107 0210 	add.w	r2, r7, #16
 800657e:	6011      	str	r1, [r2, #0]
  return result;
 8006580:	f107 0210 	add.w	r2, r7, #16
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	fab2 f282 	clz	r2, r2
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	f042 0220 	orr.w	r2, r2, #32
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	f002 021f 	and.w	r2, r2, #31
 8006596:	2101      	movs	r1, #1
 8006598:	fa01 f202 	lsl.w	r2, r1, r2
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d19e      	bne.n	80064e0 <HAL_RCC_OscConfig+0xfb8>
 80065a2:	e02b      	b.n	80065fc <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e025      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <HAL_RCC_OscConfig+0x10e0>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80065c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80065c6:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d111      	bne.n	80065f8 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80065d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80065d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d108      	bne.n	80065f8 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80065e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40021000 	.word	0x40021000

0800660c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b09e      	sub	sp, #120	; 0x78
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e203      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d116      	bne.n	800665e <HAL_RCC_ClockConfig+0x52>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d110      	bne.n	800665e <HAL_RCC_ClockConfig+0x52>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <HAL_RCC_ClockConfig+0x52>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_RCC_ClockConfig+0x52>
 8006654:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006658:	48a5      	ldr	r0, [pc, #660]	; (80068f0 <HAL_RCC_ClockConfig+0x2e4>)
 800665a:	f7fb fe8e 	bl	800237a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <HAL_RCC_ClockConfig+0x6e>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d007      	beq.n	800667a <HAL_RCC_ClockConfig+0x6e>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d004      	beq.n	800667a <HAL_RCC_ClockConfig+0x6e>
 8006670:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8006674:	489e      	ldr	r0, [pc, #632]	; (80068f0 <HAL_RCC_ClockConfig+0x2e4>)
 8006676:	f7fb fe80 	bl	800237a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800667a:	4b9e      	ldr	r3, [pc, #632]	; (80068f4 <HAL_RCC_ClockConfig+0x2e8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d910      	bls.n	80066aa <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006688:	4b9a      	ldr	r3, [pc, #616]	; (80068f4 <HAL_RCC_ClockConfig+0x2e8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f023 0207 	bic.w	r2, r3, #7
 8006690:	4998      	ldr	r1, [pc, #608]	; (80068f4 <HAL_RCC_ClockConfig+0x2e8>)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006698:	4b96      	ldr	r3, [pc, #600]	; (80068f4 <HAL_RCC_ClockConfig+0x2e8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d001      	beq.n	80066aa <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e1c0      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d031      	beq.n	800671a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d024      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d020      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b90      	cmp	r3, #144	; 0x90
 80066cc:	d01c      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2ba0      	cmp	r3, #160	; 0xa0
 80066d4:	d018      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2bb0      	cmp	r3, #176	; 0xb0
 80066dc:	d014      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2bc0      	cmp	r3, #192	; 0xc0
 80066e4:	d010      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2bd0      	cmp	r3, #208	; 0xd0
 80066ec:	d00c      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2be0      	cmp	r3, #224	; 0xe0
 80066f4:	d008      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2bf0      	cmp	r3, #240	; 0xf0
 80066fc:	d004      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
 80066fe:	f240 21db 	movw	r1, #731	; 0x2db
 8006702:	487b      	ldr	r0, [pc, #492]	; (80068f0 <HAL_RCC_ClockConfig+0x2e4>)
 8006704:	f7fb fe39 	bl	800237a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b7b      	ldr	r3, [pc, #492]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4978      	ldr	r1, [pc, #480]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80f3 	beq.w	800690e <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <HAL_RCC_ClockConfig+0x13e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d008      	beq.n	800674a <HAL_RCC_ClockConfig+0x13e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d004      	beq.n	800674a <HAL_RCC_ClockConfig+0x13e>
 8006740:	f240 21e2 	movw	r1, #738	; 0x2e2
 8006744:	486a      	ldr	r0, [pc, #424]	; (80068f0 <HAL_RCC_ClockConfig+0x2e4>)
 8006746:	f7fb fe18 	bl	800237a <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d13c      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1c0>
 8006752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006756:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675a:	fa93 f3a3 	rbit	r3, r3
 800675e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	fab3 f383 	clz	r3, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d102      	bne.n	800677c <HAL_RCC_ClockConfig+0x170>
 8006776:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	e00f      	b.n	800679c <HAL_RCC_ClockConfig+0x190>
 800677c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006784:	fa93 f3a3 	rbit	r3, r3
 8006788:	667b      	str	r3, [r7, #100]	; 0x64
 800678a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800678e:	663b      	str	r3, [r7, #96]	; 0x60
 8006790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006792:	fa93 f3a3 	rbit	r3, r3
 8006796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006798:	4b57      	ldr	r3, [pc, #348]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80067a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067a4:	fa92 f2a2 	rbit	r2, r2
 80067a8:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80067aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067ac:	fab2 f282 	clz	r2, r2
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	f042 0220 	orr.w	r2, r2, #32
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	f002 021f 	and.w	r2, r2, #31
 80067bc:	2101      	movs	r1, #1
 80067be:	fa01 f202 	lsl.w	r2, r1, r2
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d17b      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e12f      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d13c      	bne.n	800684e <HAL_RCC_ClockConfig+0x242>
 80067d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067dc:	fa93 f3a3 	rbit	r3, r3
 80067e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e4:	fab3 f383 	clz	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d102      	bne.n	80067fe <HAL_RCC_ClockConfig+0x1f2>
 80067f8:	4b3f      	ldr	r3, [pc, #252]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	e00f      	b.n	800681e <HAL_RCC_ClockConfig+0x212>
 80067fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006802:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006806:	fa93 f3a3 	rbit	r3, r3
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
 800680c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681a:	4b37      	ldr	r3, [pc, #220]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006822:	63ba      	str	r2, [r7, #56]	; 0x38
 8006824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006826:	fa92 f2a2 	rbit	r2, r2
 800682a:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	fab2 f282 	clz	r2, r2
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	f042 0220 	orr.w	r2, r2, #32
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	f002 021f 	and.w	r2, r2, #31
 800683e:	2101      	movs	r1, #1
 8006840:	fa01 f202 	lsl.w	r2, r1, r2
 8006844:	4013      	ands	r3, r2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d13a      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0ee      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
 800684e:	2302      	movs	r3, #2
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	fa93 f3a3 	rbit	r3, r3
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d102      	bne.n	8006876 <HAL_RCC_ClockConfig+0x26a>
 8006870:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	e00d      	b.n	8006892 <HAL_RCC_ClockConfig+0x286>
 8006876:	2302      	movs	r3, #2
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	fa93 f3a3 	rbit	r3, r3
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	2302      	movs	r3, #2
 8006884:	623b      	str	r3, [r7, #32]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	fa93 f3a3 	rbit	r3, r3
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2202      	movs	r2, #2
 8006894:	61ba      	str	r2, [r7, #24]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	fa92 f2a2 	rbit	r2, r2
 800689c:	617a      	str	r2, [r7, #20]
  return result;
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	fab2 f282 	clz	r2, r2
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	f042 0220 	orr.w	r2, r2, #32
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	f002 021f 	and.w	r2, r2, #31
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f202 	lsl.w	r2, r1, r2
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0b5      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f023 0203 	bic.w	r2, r3, #3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	490a      	ldr	r1, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x2ec>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d2:	f7fc f951 	bl	8002b78 <HAL_GetTick>
 80068d6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d8:	e010      	b.n	80068fc <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068da:	f7fc f94d 	bl	8002b78 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d907      	bls.n	80068fc <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e09d      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
 80068f0:	0800ca70 	.word	0x0800ca70
 80068f4:	40022000 	.word	0x40022000
 80068f8:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fc:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 020c 	and.w	r2, r3, #12
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	429a      	cmp	r2, r3
 800690c:	d1e5      	bne.n	80068da <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <HAL_RCC_ClockConfig+0x42c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d210      	bcs.n	800693e <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691c:	4b46      	ldr	r3, [pc, #280]	; (8006a38 <HAL_RCC_ClockConfig+0x42c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 0207 	bic.w	r2, r3, #7
 8006924:	4944      	ldr	r1, [pc, #272]	; (8006a38 <HAL_RCC_ClockConfig+0x42c>)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800692c:	4b42      	ldr	r3, [pc, #264]	; (8006a38 <HAL_RCC_ClockConfig+0x42c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d001      	beq.n	800693e <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e076      	b.n	8006a2c <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d025      	beq.n	8006996 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d018      	beq.n	8006984 <HAL_RCC_ClockConfig+0x378>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d013      	beq.n	8006984 <HAL_RCC_ClockConfig+0x378>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006964:	d00e      	beq.n	8006984 <HAL_RCC_ClockConfig+0x378>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800696e:	d009      	beq.n	8006984 <HAL_RCC_ClockConfig+0x378>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006978:	d004      	beq.n	8006984 <HAL_RCC_ClockConfig+0x378>
 800697a:	f240 311e 	movw	r1, #798	; 0x31e
 800697e:	482f      	ldr	r0, [pc, #188]	; (8006a3c <HAL_RCC_ClockConfig+0x430>)
 8006980:	f7fb fcfb 	bl	800237a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4928      	ldr	r1, [pc, #160]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 8006992:	4313      	orrs	r3, r2
 8006994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d026      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d018      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3d0>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b2:	d013      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3d0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80069bc:	d00e      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3d0>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069c6:	d009      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3d0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d0:	d004      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3d0>
 80069d2:	f240 3125 	movw	r1, #805	; 0x325
 80069d6:	4819      	ldr	r0, [pc, #100]	; (8006a3c <HAL_RCC_ClockConfig+0x430>)
 80069d8:	f7fb fccf 	bl	800237a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4912      	ldr	r1, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80069f0:	f000 f82c 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <HAL_RCC_ClockConfig+0x428>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069fe:	22f0      	movs	r2, #240	; 0xf0
 8006a00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	fa92 f2a2 	rbit	r2, r2
 8006a08:	60fa      	str	r2, [r7, #12]
  return result;
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	fab2 f282 	clz	r2, r2
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	40d3      	lsrs	r3, r2
 8006a14:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <HAL_RCC_ClockConfig+0x434>)
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	fa21 f303 	lsr.w	r3, r1, r3
 8006a1c:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <HAL_RCC_ClockConfig+0x438>)
 8006a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_RCC_ClockConfig+0x43c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fc f863 	bl	8002af0 <HAL_InitTick>
  
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3778      	adds	r7, #120	; 0x78
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40022000 	.word	0x40022000
 8006a3c:	0800ca70 	.word	0x0800ca70
 8006a40:	0800cc34 	.word	0x0800cc34
 8006a44:	2000007c 	.word	0x2000007c
 8006a48:	20000080 	.word	0x20000080

08006a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b08b      	sub	sp, #44	; 0x2c
 8006a50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006a66:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d002      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0x30>
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d003      	beq.n	8006a82 <HAL_RCC_GetSysClockFreq+0x36>
 8006a7a:	e03f      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006a7e:	623b      	str	r3, [r7, #32]
      break;
 8006a80:	e03f      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006a88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006a8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	fa92 f2a2 	rbit	r2, r2
 8006a94:	607a      	str	r2, [r7, #4]
  return result;
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	fab2 f282 	clz	r2, r2
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	40d3      	lsrs	r3, r2
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006aa2:	5cd3      	ldrb	r3, [r2, r3]
 8006aa4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	220f      	movs	r2, #15
 8006ab0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	fa92 f2a2 	rbit	r2, r2
 8006ab8:	60fa      	str	r2, [r7, #12]
  return result;
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	fab2 f282 	clz	r2, r2
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	40d3      	lsrs	r3, r2
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ac6:	5cd3      	ldrb	r3, [r2, r3]
 8006ac8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ad4:	4a0f      	ldr	r2, [pc, #60]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	e007      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	623b      	str	r3, [r7, #32]
      break;
 8006afa:	e002      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006afe:	623b      	str	r3, [r7, #32]
      break;
 8006b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	372c      	adds	r7, #44	; 0x2c
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40021000 	.word	0x40021000
 8006b14:	007a1200 	.word	0x007a1200
 8006b18:	0800cc4c 	.word	0x0800cc4c
 8006b1c:	0800cc5c 	.word	0x0800cc5c

08006b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b26:	681b      	ldr	r3, [r3, #0]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000007c 	.word	0x2000007c

08006b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006b3e:	f7ff ffef 	bl	8006b20 <HAL_RCC_GetHCLKFreq>
 8006b42:	4601      	mov	r1, r0
 8006b44:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	fa92 f2a2 	rbit	r2, r2
 8006b58:	603a      	str	r2, [r7, #0]
  return result;
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	fab2 f282 	clz	r2, r2
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	40d3      	lsrs	r3, r2
 8006b64:	4a04      	ldr	r2, [pc, #16]	; (8006b78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006b66:	5cd3      	ldrb	r3, [r2, r3]
 8006b68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40021000 	.word	0x40021000
 8006b78:	0800cc44 	.word	0x0800cc44

08006b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006b82:	f7ff ffcd 	bl	8006b20 <HAL_RCC_GetHCLKFreq>
 8006b86:	4601      	mov	r1, r0
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006b90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	fa92 f2a2 	rbit	r2, r2
 8006b9c:	603a      	str	r2, [r7, #0]
  return result;
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	fab2 f282 	clz	r2, r2
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	40d3      	lsrs	r3, r2
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006baa:	5cd3      	ldrb	r3, [r2, r3]
 8006bac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	0800cc44 	.word	0x0800cc44

08006bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b092      	sub	sp, #72	; 0x48
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a62      	ldr	r2, [pc, #392]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d303      	bcc.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006be0:	2172      	movs	r1, #114	; 0x72
 8006be2:	4861      	ldr	r0, [pc, #388]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006be4:	f7fb fbc9 	bl	800237a <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80f1 	beq.w	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d012      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c06:	d00d      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c10:	d008      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c1a:	d003      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c1c:	2178      	movs	r1, #120	; 0x78
 8006c1e:	4852      	ldr	r0, [pc, #328]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c20:	f7fb fbab 	bl	800237a <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c24:	4b51      	ldr	r3, [pc, #324]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10e      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c30:	4b4e      	ldr	r3, [pc, #312]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	4a4d      	ldr	r2, [pc, #308]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	61d3      	str	r3, [r2, #28]
 8006c3c:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4e:	4b48      	ldr	r3, [pc, #288]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d118      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c5a:	4b45      	ldr	r3, [pc, #276]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a44      	ldr	r2, [pc, #272]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c66:	f7fb ff87 	bl	8002b78 <HAL_GetTick>
 8006c6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6c:	e008      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c6e:	f7fb ff83 	bl	8002b78 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b64      	cmp	r3, #100	; 0x64
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e38f      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c80:	4b3b      	ldr	r3, [pc, #236]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c8c:	4b37      	ldr	r3, [pc, #220]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 808a 	beq.w	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	f000 8082 	beq.w	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	fa93 f3a3 	rbit	r3, r3
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cc8:	fab3 f383 	clz	r3, r3
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2301      	movs	r3, #1
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	fa93 f3a3 	rbit	r3, r3
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cec:	fab3 f383 	clz	r3, r3
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d00:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d050      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d10:	f7fb ff32 	bl	8002b78 <HAL_GetTick>
 8006d14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d16:	e00a      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d18:	f7fb ff2e 	bl	8002b78 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e338      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	fa93 f3a3 	rbit	r3, r3
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	61fb      	str	r3, [r7, #28]
  return result;
 8006d46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d48:	fab3 f383 	clz	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f043 0302 	orr.w	r3, r3, #2
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d10d      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	e012      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006d62:	bf00      	nop
 8006d64:	03f73400 	.word	0x03f73400
 8006d68:	0800caa8 	.word	0x0800caa8
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	40007000 	.word	0x40007000
 8006d74:	10908100 	.word	0x10908100
 8006d78:	2302      	movs	r3, #2
 8006d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	fa93 f3a3 	rbit	r3, r3
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	4b97      	ldr	r3, [pc, #604]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	2202      	movs	r2, #2
 8006d8a:	613a      	str	r2, [r7, #16]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	fa92 f2a2 	rbit	r2, r2
 8006d92:	60fa      	str	r2, [r7, #12]
  return result;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	fab2 f282 	clz	r2, r2
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	f002 021f 	and.w	r2, r2, #31
 8006da6:	2101      	movs	r1, #1
 8006da8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0b2      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006db2:	4b8c      	ldr	r3, [pc, #560]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4989      	ldr	r1, [pc, #548]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dcc:	4b85      	ldr	r3, [pc, #532]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4a84      	ldr	r2, [pc, #528]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01c      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d00b      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d007      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d003      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006e04:	21be      	movs	r1, #190	; 0xbe
 8006e06:	4878      	ldr	r0, [pc, #480]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006e08:	f7fb fab7 	bl	800237a <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e0c:	4b75      	ldr	r3, [pc, #468]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	f023 0203 	bic.w	r2, r3, #3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4972      	ldr	r1, [pc, #456]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01f      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3a:	d00d      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e44:	d008      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e50:	21c9      	movs	r1, #201	; 0xc9
 8006e52:	4865      	ldr	r0, [pc, #404]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006e54:	f7fb fa91 	bl	800237a <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e58:	4b62      	ldr	r3, [pc, #392]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	495f      	ldr	r1, [pc, #380]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01f      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d012      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e86:	d00d      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e90:	d008      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e9a:	d003      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006e9c:	21d5      	movs	r1, #213	; 0xd5
 8006e9e:	4852      	ldr	r0, [pc, #328]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006ea0:	f7fb fa6b 	bl	800237a <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	494c      	ldr	r1, [pc, #304]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d003      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006ed2:	21e0      	movs	r1, #224	; 0xe0
 8006ed4:	4844      	ldr	r0, [pc, #272]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006ed6:	f7fb fa50 	bl	800237a <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eda:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f023 0210 	bic.w	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	493f      	ldr	r1, [pc, #252]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f00:	d007      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006f0a:	21ee      	movs	r1, #238	; 0xee
 8006f0c:	4836      	ldr	r0, [pc, #216]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006f0e:	f7fb fa34 	bl	800237a <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006f12:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	4931      	ldr	r1, [pc, #196]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d015      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d004      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006f40:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006f44:	4828      	ldr	r0, [pc, #160]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006f46:	f7fb fa18 	bl	800237a <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f4a:	4b26      	ldr	r3, [pc, #152]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	f023 0220 	bic.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4923      	ldr	r1, [pc, #140]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d004      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006f78:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006f7c:	481a      	ldr	r0, [pc, #104]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006f7e:	f7fb f9fc 	bl	800237a <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	4915      	ldr	r1, [pc, #84]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d025      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d013      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fc4:	d004      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fc6:	f240 1123 	movw	r1, #291	; 0x123
 8006fca:	4807      	ldr	r0, [pc, #28]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006fcc:	f7fb f9d5 	bl	800237a <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	4901      	ldr	r1, [pc, #4]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	630b      	str	r3, [r1, #48]	; 0x30
 8006fe2:	e003      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	0800caa8 	.word	0x0800caa8
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d013      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007008:	d00e      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007012:	d009      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800701c:	d004      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800701e:	f240 112d 	movw	r1, #301	; 0x12d
 8007022:	48a1      	ldr	r0, [pc, #644]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007024:	f7fb f9a9 	bl	800237a <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007028:	4ba0      	ldr	r3, [pc, #640]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	499d      	ldr	r1, [pc, #628]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007036:	4313      	orrs	r3, r2
 8007038:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007042:	2b00      	cmp	r3, #0
 8007044:	d016      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007056:	d004      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8007058:	f240 113d 	movw	r1, #317	; 0x13d
 800705c:	4892      	ldr	r0, [pc, #584]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800705e:	f7fb f98c 	bl	800237a <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007062:	4b92      	ldr	r3, [pc, #584]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	498f      	ldr	r1, [pc, #572]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	d04d      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	d040      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007090:	d03b      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800709a:	d036      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80070a4:	d031      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80070ae:	d02c      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80070b8:	d027      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 80070c2:	d022      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80070cc:	d01d      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80070d6:	d018      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80070e0:	d013      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80070ea:	d00e      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80070f4:	d009      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80070fe:	d004      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8007100:	f240 115d 	movw	r1, #349	; 0x15d
 8007104:	4868      	ldr	r0, [pc, #416]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007106:	f7fb f938 	bl	800237a <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800710a:	4b68      	ldr	r3, [pc, #416]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	4965      	ldr	r1, [pc, #404]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007118:	4313      	orrs	r3, r2
 800711a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007124:	2b00      	cmp	r3, #0
 8007126:	d04d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d040      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007138:	d03b      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8007142:	d036      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800714c:	d031      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8007156:	d02c      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007160:	d027      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 800716a:	d022      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8007174:	d01d      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 800717e:	d018      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007188:	d013      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8007192:	d00e      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 800719c:	d009      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 80071a6:	d004      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80071a8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80071ac:	483e      	ldr	r0, [pc, #248]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80071ae:	f7fb f8e4 	bl	800237a <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80071b2:	4b3e      	ldr	r3, [pc, #248]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	493b      	ldr	r1, [pc, #236]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d016      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d009      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e0:	d004      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80071e2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80071e6:	4830      	ldr	r0, [pc, #192]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80071e8:	f7fb f8c7 	bl	800237a <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80071ec:	4b2f      	ldr	r3, [pc, #188]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	492c      	ldr	r1, [pc, #176]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d016      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721a:	d004      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800721c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007220:	4821      	ldr	r0, [pc, #132]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007222:	f7fb f8aa 	bl	800237a <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	491e      	ldr	r1, [pc, #120]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007234:	4313      	orrs	r3, r2
 8007236:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d016      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d009      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007254:	d004      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8007256:	f240 11f7 	movw	r1, #503	; 0x1f7
 800725a:	4813      	ldr	r0, [pc, #76]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800725c:	f7fb f88d 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007260:	4b12      	ldr	r3, [pc, #72]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	490f      	ldr	r1, [pc, #60]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800726e:	4313      	orrs	r3, r2
 8007270:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01b      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728e:	d004      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007290:	f240 2101 	movw	r1, #513	; 0x201
 8007294:	4804      	ldr	r0, [pc, #16]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007296:	f7fb f870 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	e003      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80072a8:	0800caa8 	.word	0x0800caa8
 80072ac:	40021000 	.word	0x40021000
 80072b0:	493d      	ldr	r1, [pc, #244]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d2:	d004      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80072d4:	f240 210b 	movw	r1, #523	; 0x20b
 80072d8:	4834      	ldr	r0, [pc, #208]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 80072da:	f7fb f84e 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80072de:	4b32      	ldr	r3, [pc, #200]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ea:	492f      	ldr	r1, [pc, #188]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d016      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007300:	2b00      	cmp	r3, #0
 8007302:	d009      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730c:	d004      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800730e:	f240 2115 	movw	r1, #533	; 0x215
 8007312:	4826      	ldr	r0, [pc, #152]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8007314:	f7fb f831 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007318:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007324:	4920      	ldr	r1, [pc, #128]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007326:	4313      	orrs	r3, r2
 8007328:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x792>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8007348:	f240 211f 	movw	r1, #543	; 0x21f
 800734c:	4817      	ldr	r0, [pc, #92]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 800734e:	f7fb f814 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	4912      	ldr	r1, [pc, #72]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8007360:	4313      	orrs	r3, r2
 8007362:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007380:	d004      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8007382:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8007386:	4809      	ldr	r0, [pc, #36]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8007388:	f7fa fff7 	bl	800237a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	4903      	ldr	r1, [pc, #12]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800739a:	4313      	orrs	r3, r2
 800739c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3748      	adds	r7, #72	; 0x48
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0800caa8 	.word	0x0800caa8

080073b0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e0e1      	b.n	8007586 <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a72      	ldr	r2, [pc, #456]	; (8007590 <HAL_RTC_Init+0x1e0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_RTC_Init+0x26>
 80073cc:	f240 1121 	movw	r1, #289	; 0x121
 80073d0:	4870      	ldr	r0, [pc, #448]	; (8007594 <HAL_RTC_Init+0x1e4>)
 80073d2:	f7fa ffd2 	bl	800237a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d008      	beq.n	80073f0 <HAL_RTC_Init+0x40>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <HAL_RTC_Init+0x40>
 80073e6:	f44f 7191 	mov.w	r1, #290	; 0x122
 80073ea:	486a      	ldr	r0, [pc, #424]	; (8007594 <HAL_RTC_Init+0x1e4>)
 80073ec:	f7fa ffc5 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b7f      	cmp	r3, #127	; 0x7f
 80073f6:	d904      	bls.n	8007402 <HAL_RTC_Init+0x52>
 80073f8:	f240 1123 	movw	r1, #291	; 0x123
 80073fc:	4865      	ldr	r0, [pc, #404]	; (8007594 <HAL_RTC_Init+0x1e4>)
 80073fe:	f7fa ffbc 	bl	800237a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740a:	d304      	bcc.n	8007416 <HAL_RTC_Init+0x66>
 800740c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8007410:	4860      	ldr	r0, [pc, #384]	; (8007594 <HAL_RTC_Init+0x1e4>)
 8007412:	f7fa ffb2 	bl	800237a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d013      	beq.n	8007446 <HAL_RTC_Init+0x96>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007426:	d00e      	beq.n	8007446 <HAL_RTC_Init+0x96>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007430:	d009      	beq.n	8007446 <HAL_RTC_Init+0x96>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800743a:	d004      	beq.n	8007446 <HAL_RTC_Init+0x96>
 800743c:	f240 1125 	movw	r1, #293	; 0x125
 8007440:	4854      	ldr	r0, [pc, #336]	; (8007594 <HAL_RTC_Init+0x1e4>)
 8007442:	f7fa ff9a 	bl	800237a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_RTC_Init+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007456:	d004      	beq.n	8007462 <HAL_RTC_Init+0xb2>
 8007458:	f44f 7193 	mov.w	r1, #294	; 0x126
 800745c:	484d      	ldr	r0, [pc, #308]	; (8007594 <HAL_RTC_Init+0x1e4>)
 800745e:	f7fa ff8c 	bl	800237a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_RTC_Init+0xce>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007472:	d004      	beq.n	800747e <HAL_RTC_Init+0xce>
 8007474:	f240 1127 	movw	r1, #295	; 0x127
 8007478:	4846      	ldr	r0, [pc, #280]	; (8007594 <HAL_RTC_Init+0x1e4>)
 800747a:	f7fa ff7e 	bl	800237a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7f5b      	ldrb	r3, [r3, #29]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb f832 	bl	80024f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	22ca      	movs	r2, #202	; 0xca
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2253      	movs	r2, #83	; 0x53
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ffdc 	bl	8008468 <RTC_EnterInitMode>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d008      	beq.n	80074c8 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	22ff      	movs	r2, #255	; 0xff
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2204      	movs	r2, #4
 80074c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e05e      	b.n	8007586 <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6899      	ldr	r1, [r3, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	68d2      	ldr	r2, [r2, #12]
 8007502:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6919      	ldr	r1, [r3, #16]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	041a      	lsls	r2, r3, #16
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007526:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10e      	bne.n	8007554 <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 ff6e 	bl	8008418 <HAL_RTC_WaitForSynchro>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d008      	beq.n	8007554 <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	22ff      	movs	r2, #255	; 0xff
 8007548:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2204      	movs	r2, #4
 800754e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e018      	b.n	8007586 <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007562:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	22ff      	movs	r2, #255	; 0xff
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007584:	2300      	movs	r3, #0
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40002800 	.word	0x40002800
 8007594:	0800cb04 	.word	0x0800cb04

08007598 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_RTC_SetTime+0x26>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d004      	beq.n	80075be <HAL_RTC_SetTime+0x26>
 80075b4:	f240 310f 	movw	r1, #783	; 0x30f
 80075b8:	48a4      	ldr	r0, [pc, #656]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 80075ba:	f7fa fede 	bl	800237a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c6:	d00d      	beq.n	80075e4 <HAL_RTC_SetTime+0x4c>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d008      	beq.n	80075e4 <HAL_RTC_SetTime+0x4c>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HAL_RTC_SetTime+0x4c>
 80075da:	f44f 7144 	mov.w	r1, #784	; 0x310
 80075de:	489b      	ldr	r0, [pc, #620]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 80075e0:	f7fa fecb 	bl	800237a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <HAL_RTC_SetTime+0x68>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075f4:	d004      	beq.n	8007600 <HAL_RTC_SetTime+0x68>
 80075f6:	f240 3111 	movw	r1, #785	; 0x311
 80075fa:	4894      	ldr	r0, [pc, #592]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 80075fc:	f7fa febd 	bl	800237a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7f1b      	ldrb	r3, [r3, #28]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_RTC_SetTime+0x74>
 8007608:	2302      	movs	r3, #2
 800760a:	e12c      	b.n	8007866 <HAL_RTC_SetTime+0x2ce>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2202      	movs	r2, #2
 8007616:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d15c      	bne.n	80076d8 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01a      	beq.n	8007662 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_RTC_SetTime+0xa4>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b0c      	cmp	r3, #12
 800763a:	d904      	bls.n	8007646 <HAL_RTC_SetTime+0xae>
 800763c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8007640:	4882      	ldr	r0, [pc, #520]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007642:	f7fa fe9a 	bl	800237a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <HAL_RTC_SetTime+0xe2>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d011      	beq.n	800767a <HAL_RTC_SetTime+0xe2>
 8007656:	f240 311d 	movw	r1, #797	; 0x31d
 800765a:	487c      	ldr	r0, [pc, #496]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 800765c:	f7fa fe8d 	bl	800237a <assert_failed>
 8007660:	e00b      	b.n	800767a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b17      	cmp	r3, #23
 800766e:	d904      	bls.n	800767a <HAL_RTC_SetTime+0xe2>
 8007670:	f240 3122 	movw	r1, #802	; 0x322
 8007674:	4875      	ldr	r0, [pc, #468]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007676:	f7fa fe80 	bl	800237a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b3b      	cmp	r3, #59	; 0x3b
 8007680:	d904      	bls.n	800768c <HAL_RTC_SetTime+0xf4>
 8007682:	f44f 7149 	mov.w	r1, #804	; 0x324
 8007686:	4871      	ldr	r0, [pc, #452]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007688:	f7fa fe77 	bl	800237a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	2b3b      	cmp	r3, #59	; 0x3b
 8007692:	d904      	bls.n	800769e <HAL_RTC_SetTime+0x106>
 8007694:	f240 3125 	movw	r1, #805	; 0x325
 8007698:	486c      	ldr	r0, [pc, #432]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 800769a:	f7fa fe6e 	bl	800237a <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 ff0c 	bl	80084c0 <RTC_ByteToBcd2>
 80076a8:	4603      	mov	r3, r0
 80076aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ff05 	bl	80084c0 <RTC_ByteToBcd2>
 80076b6:	4603      	mov	r3, r0
 80076b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80076ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fefd 	bl	80084c0 <RTC_ByteToBcd2>
 80076c6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80076c8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	78db      	ldrb	r3, [r3, #3]
 80076d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e062      	b.n	800779e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d022      	beq.n	800772c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 ff06 	bl	80084fc <RTC_Bcd2ToByte>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <HAL_RTC_SetTime+0x16e>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fefe 	bl	80084fc <RTC_Bcd2ToByte>
 8007700:	4603      	mov	r3, r0
 8007702:	2b0c      	cmp	r3, #12
 8007704:	d904      	bls.n	8007710 <HAL_RTC_SetTime+0x178>
 8007706:	f44f 714c 	mov.w	r1, #816	; 0x330
 800770a:	4850      	ldr	r0, [pc, #320]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 800770c:	f7fa fe35 	bl	800237a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	78db      	ldrb	r3, [r3, #3]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d019      	beq.n	800774c <HAL_RTC_SetTime+0x1b4>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b40      	cmp	r3, #64	; 0x40
 800771e:	d015      	beq.n	800774c <HAL_RTC_SetTime+0x1b4>
 8007720:	f240 3131 	movw	r1, #817	; 0x331
 8007724:	4849      	ldr	r0, [pc, #292]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007726:	f7fa fe28 	bl	800237a <assert_failed>
 800772a:	e00f      	b.n	800774c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fee0 	bl	80084fc <RTC_Bcd2ToByte>
 800773c:	4603      	mov	r3, r0
 800773e:	2b17      	cmp	r3, #23
 8007740:	d904      	bls.n	800774c <HAL_RTC_SetTime+0x1b4>
 8007742:	f240 3136 	movw	r1, #822	; 0x336
 8007746:	4841      	ldr	r0, [pc, #260]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007748:	f7fa fe17 	bl	800237a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fed3 	bl	80084fc <RTC_Bcd2ToByte>
 8007756:	4603      	mov	r3, r0
 8007758:	2b3b      	cmp	r3, #59	; 0x3b
 800775a:	d904      	bls.n	8007766 <HAL_RTC_SetTime+0x1ce>
 800775c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007760:	483a      	ldr	r0, [pc, #232]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 8007762:	f7fa fe0a 	bl	800237a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fec6 	bl	80084fc <RTC_Bcd2ToByte>
 8007770:	4603      	mov	r3, r0
 8007772:	2b3b      	cmp	r3, #59	; 0x3b
 8007774:	d904      	bls.n	8007780 <HAL_RTC_SetTime+0x1e8>
 8007776:	f240 3139 	movw	r1, #825	; 0x339
 800777a:	4834      	ldr	r0, [pc, #208]	; (800784c <HAL_RTC_SetTime+0x2b4>)
 800777c:	f7fa fdfd 	bl	800237a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800778c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007792:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	22ca      	movs	r2, #202	; 0xca
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2253      	movs	r2, #83	; 0x53
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fe5a 	bl	8008468 <RTC_EnterInitMode>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	22ff      	movs	r2, #255	; 0xff
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2204      	movs	r2, #4
 80077c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e049      	b.n	8007866 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6899      	ldr	r1, [r3, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	431a      	orrs	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007818:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d113      	bne.n	8007850 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fdf5 	bl	8008418 <HAL_RTC_WaitForSynchro>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	22ff      	movs	r2, #255	; 0xff
 800783a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2204      	movs	r2, #4
 8007840:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e00c      	b.n	8007866 <HAL_RTC_SetTime+0x2ce>
 800784c:	0800cb04 	.word	0x0800cb04
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007864:	2300      	movs	r3, #0
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd90      	pop	{r4, r7, pc}
 800786e:	bf00      	nop

08007870 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <HAL_RTC_GetTime+0x26>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d004      	beq.n	8007896 <HAL_RTC_GetTime+0x26>
 800788c:	f44f 7164 	mov.w	r1, #912	; 0x390
 8007890:	482c      	ldr	r0, [pc, #176]	; (8007944 <HAL_RTC_GetTime+0xd4>)
 8007892:	f7fa fd72 	bl	800237a <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11a      	bne.n	8007938 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fdf8 	bl	80084fc <RTC_Bcd2ToByte>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fdef 	bl	80084fc <RTC_Bcd2ToByte>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fde6 	bl	80084fc <RTC_Bcd2ToByte>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	0800cb04 	.word	0x0800cb04

08007948 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <HAL_RTC_SetDate+0x26>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d004      	beq.n	800796e <HAL_RTC_SetDate+0x26>
 8007964:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8007968:	488e      	ldr	r0, [pc, #568]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 800796a:	f7fa fd06 	bl	800237a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	7f1b      	ldrb	r3, [r3, #28]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_RTC_SetDate+0x32>
 8007976:	2302      	movs	r3, #2
 8007978:	e10f      	b.n	8007b9a <HAL_RTC_SetDate+0x252>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2202      	movs	r2, #2
 8007984:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10e      	bne.n	80079aa <HAL_RTC_SetDate+0x62>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	f023 0310 	bic.w	r3, r3, #16
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	330a      	adds	r3, #10
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d01c      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d018      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d014      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d010      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d00c      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b06      	cmp	r3, #6
 80079d8:	d008      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b07      	cmp	r3, #7
 80079e0:	d004      	beq.n	80079ec <HAL_RTC_SetDate+0xa4>
 80079e2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 80079e6:	486f      	ldr	r0, [pc, #444]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 80079e8:	f7fa fcc7 	bl	800237a <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d13f      	bne.n	8007a72 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	2b63      	cmp	r3, #99	; 0x63
 80079f8:	d904      	bls.n	8007a04 <HAL_RTC_SetDate+0xbc>
 80079fa:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80079fe:	4869      	ldr	r0, [pc, #420]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007a00:	f7fa fcbb 	bl	800237a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <HAL_RTC_SetDate+0xcc>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b0c      	cmp	r3, #12
 8007a12:	d904      	bls.n	8007a1e <HAL_RTC_SetDate+0xd6>
 8007a14:	f240 31cd 	movw	r1, #973	; 0x3cd
 8007a18:	4862      	ldr	r0, [pc, #392]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007a1a:	f7fa fcae 	bl	800237a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	789b      	ldrb	r3, [r3, #2]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_RTC_SetDate+0xe6>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	789b      	ldrb	r3, [r3, #2]
 8007a2a:	2b1f      	cmp	r3, #31
 8007a2c:	d904      	bls.n	8007a38 <HAL_RTC_SetDate+0xf0>
 8007a2e:	f240 31ce 	movw	r1, #974	; 0x3ce
 8007a32:	485c      	ldr	r0, [pc, #368]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007a34:	f7fa fca1 	bl	800237a <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	78db      	ldrb	r3, [r3, #3]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fd3f 	bl	80084c0 <RTC_ByteToBcd2>
 8007a42:	4603      	mov	r3, r0
 8007a44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fd38 	bl	80084c0 <RTC_ByteToBcd2>
 8007a50:	4603      	mov	r3, r0
 8007a52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fd30 	bl	80084c0 <RTC_ByteToBcd2>
 8007a60:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a62:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e045      	b.n	8007afe <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	78db      	ldrb	r3, [r3, #3]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fd40 	bl	80084fc <RTC_Bcd2ToByte>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b63      	cmp	r3, #99	; 0x63
 8007a80:	d904      	bls.n	8007a8c <HAL_RTC_SetDate+0x144>
 8007a82:	f240 31d7 	movw	r1, #983	; 0x3d7
 8007a86:	4847      	ldr	r0, [pc, #284]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007a88:	f7fa fc77 	bl	800237a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fd33 	bl	80084fc <RTC_Bcd2ToByte>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <HAL_RTC_SetDate+0x164>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fd2b 	bl	80084fc <RTC_Bcd2ToByte>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d904      	bls.n	8007ab6 <HAL_RTC_SetDate+0x16e>
 8007aac:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8007ab0:	483c      	ldr	r0, [pc, #240]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007ab2:	f7fa fc62 	bl	800237a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	789b      	ldrb	r3, [r3, #2]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fd1e 	bl	80084fc <RTC_Bcd2ToByte>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_RTC_SetDate+0x18e>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	789b      	ldrb	r3, [r3, #2]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fd16 	bl	80084fc <RTC_Bcd2ToByte>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b1f      	cmp	r3, #31
 8007ad4:	d904      	bls.n	8007ae0 <HAL_RTC_SetDate+0x198>
 8007ad6:	f240 31d9 	movw	r1, #985	; 0x3d9
 8007ada:	4832      	ldr	r0, [pc, #200]	; (8007ba4 <HAL_RTC_SetDate+0x25c>)
 8007adc:	f7fa fc4d 	bl	800237a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007aec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007af2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	22ca      	movs	r2, #202	; 0xca
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2253      	movs	r2, #83	; 0x53
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fcaa 	bl	8008468 <RTC_EnterInitMode>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	22ff      	movs	r2, #255	; 0xff
 8007b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2204      	movs	r2, #4
 8007b26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e033      	b.n	8007b9a <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d111      	bne.n	8007b84 <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fc59 	bl	8008418 <HAL_RTC_WaitForSynchro>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	22ff      	movs	r2, #255	; 0xff
 8007b72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2204      	movs	r2, #4
 8007b78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e00a      	b.n	8007b9a <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b98:	2300      	movs	r3, #0
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800cb04 	.word	0x0800cb04

08007ba8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <HAL_RTC_GetDate+0x26>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d004      	beq.n	8007bce <HAL_RTC_GetDate+0x26>
 8007bc4:	f240 4126 	movw	r1, #1062	; 0x426
 8007bc8:	4824      	ldr	r0, [pc, #144]	; (8007c5c <HAL_RTC_GetDate+0xb4>)
 8007bca:	f7fa fbd6 	bl	800237a <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	0a1b      	lsrs	r3, r3, #8
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	0b5b      	lsrs	r3, r3, #13
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11a      	bne.n	8007c52 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	78db      	ldrb	r3, [r3, #3]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fc6b 	bl	80084fc <RTC_Bcd2ToByte>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fc62 	bl	80084fc <RTC_Bcd2ToByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fc59 	bl	80084fc <RTC_Bcd2ToByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	0800cb04 	.word	0x0800cb04

08007c60 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c60:	b590      	push	{r4, r7, lr}
 8007c62:	b089      	sub	sp, #36	; 0x24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_RTC_SetAlarm_IT+0x2e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d004      	beq.n	8007c8e <HAL_RTC_SetAlarm_IT+0x2e>
 8007c84:	f240 5153 	movw	r1, #1363	; 0x553
 8007c88:	48a1      	ldr	r0, [pc, #644]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007c8a:	f7fa fb76 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c96:	d009      	beq.n	8007cac <HAL_RTC_SetAlarm_IT+0x4c>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d004      	beq.n	8007cac <HAL_RTC_SetAlarm_IT+0x4c>
 8007ca2:	f240 5154 	movw	r1, #1364	; 0x554
 8007ca6:	489a      	ldr	r0, [pc, #616]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007ca8:	f7fa fb67 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <HAL_RTC_SetAlarm_IT+0x62>
 8007cb8:	f240 5155 	movw	r1, #1365	; 0x555
 8007cbc:	4894      	ldr	r0, [pc, #592]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007cbe:	f7fa fb5c 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <HAL_RTC_SetAlarm_IT+0x7e>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd2:	d004      	beq.n	8007cde <HAL_RTC_SetAlarm_IT+0x7e>
 8007cd4:	f240 5156 	movw	r1, #1366	; 0x556
 8007cd8:	488d      	ldr	r0, [pc, #564]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007cda:	f7fa fb4e 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce6:	d304      	bcc.n	8007cf2 <HAL_RTC_SetAlarm_IT+0x92>
 8007ce8:	f240 5157 	movw	r1, #1367	; 0x557
 8007cec:	4888      	ldr	r0, [pc, #544]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007cee:	f7fa fb44 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d04f      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d02:	d04a      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d0c:	d045      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d16:	d040      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d20:	d03b      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007d2a:	d036      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007d34:	d031      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8007d3e:	d02c      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d48:	d027      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8007d52:	d022      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8007d5c:	d01d      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8007d66:	d018      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007d70:	d013      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8007d7a:	d00e      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8007d84:	d009      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d8e:	d004      	beq.n	8007d9a <HAL_RTC_SetAlarm_IT+0x13a>
 8007d90:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8007d94:	485e      	ldr	r0, [pc, #376]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007d96:	f7fa faf0 	bl	800237a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	7f1b      	ldrb	r3, [r3, #28]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_RTC_SetAlarm_IT+0x146>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e242      	b.n	800822c <HAL_RTC_SetAlarm_IT+0x5cc>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2202      	movs	r2, #2
 8007db0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f040 80ad 	bne.w	8007f14 <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01a      	beq.n	8007dfe <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_RTC_SetAlarm_IT+0x178>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	d904      	bls.n	8007de2 <HAL_RTC_SetAlarm_IT+0x182>
 8007dd8:	f240 5163 	movw	r1, #1379	; 0x563
 8007ddc:	484c      	ldr	r0, [pc, #304]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007dde:	f7fa facc 	bl	800237a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d015      	beq.n	8007e16 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	78db      	ldrb	r3, [r3, #3]
 8007dee:	2b40      	cmp	r3, #64	; 0x40
 8007df0:	d011      	beq.n	8007e16 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007df2:	f240 5164 	movw	r1, #1380	; 0x564
 8007df6:	4846      	ldr	r0, [pc, #280]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007df8:	f7fa fabf 	bl	800237a <assert_failed>
 8007dfc:	e00b      	b.n	8007e16 <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b17      	cmp	r3, #23
 8007e0a:	d904      	bls.n	8007e16 <HAL_RTC_SetAlarm_IT+0x1b6>
 8007e0c:	f240 5169 	movw	r1, #1385	; 0x569
 8007e10:	483f      	ldr	r0, [pc, #252]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007e12:	f7fa fab2 	bl	800237a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	2b3b      	cmp	r3, #59	; 0x3b
 8007e1c:	d904      	bls.n	8007e28 <HAL_RTC_SetAlarm_IT+0x1c8>
 8007e1e:	f240 516b 	movw	r1, #1387	; 0x56b
 8007e22:	483b      	ldr	r0, [pc, #236]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007e24:	f7fa faa9 	bl	800237a <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	2b3b      	cmp	r3, #59	; 0x3b
 8007e2e:	d904      	bls.n	8007e3a <HAL_RTC_SetAlarm_IT+0x1da>
 8007e30:	f240 516c 	movw	r1, #1388	; 0x56c
 8007e34:	4836      	ldr	r0, [pc, #216]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007e36:	f7fa faa0 	bl	800237a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <HAL_RTC_SetAlarm_IT+0x1f6>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e52:	2b1f      	cmp	r3, #31
 8007e54:	d92d      	bls.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e56:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8007e5a:	482d      	ldr	r0, [pc, #180]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007e5c:	f7fa fa8d 	bl	800237a <assert_failed>
 8007e60:	e027      	b.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d022      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d01d      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d018      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d013      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d00e      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e9a:	2b06      	cmp	r3, #6
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ea4:	2b07      	cmp	r3, #7
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RTC_SetAlarm_IT+0x252>
 8007ea8:	f240 5174 	movw	r1, #1396	; 0x574
 8007eac:	4818      	ldr	r0, [pc, #96]	; (8007f10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007eae:	f7fa fa64 	bl	800237a <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fb02 	bl	80084c0 <RTC_ByteToBcd2>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fafb 	bl	80084c0 <RTC_ByteToBcd2>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ece:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	789b      	ldrb	r3, [r3, #2]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 faf3 	bl	80084c0 <RTC_ByteToBcd2>
 8007eda:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007edc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	78db      	ldrb	r3, [r3, #3]
 8007ee4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ee6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fae5 	bl	80084c0 <RTC_ByteToBcd2>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007efa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007f02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e0d0      	b.n	80080b0 <HAL_RTC_SetAlarm_IT+0x450>
 8007f0e:	bf00      	nop
 8007f10:	0800cb04 	.word	0x0800cb04
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d022      	beq.n	8007f68 <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fae8 	bl	80084fc <RTC_Bcd2ToByte>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_RTC_SetAlarm_IT+0x2e2>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fae0 	bl	80084fc <RTC_Bcd2ToByte>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b0c      	cmp	r3, #12
 8007f40:	d904      	bls.n	8007f4c <HAL_RTC_SetAlarm_IT+0x2ec>
 8007f42:	f240 5182 	movw	r1, #1410	; 0x582
 8007f46:	489d      	ldr	r0, [pc, #628]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007f48:	f7fa fa17 	bl	800237a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	78db      	ldrb	r3, [r3, #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d019      	beq.n	8007f88 <HAL_RTC_SetAlarm_IT+0x328>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	78db      	ldrb	r3, [r3, #3]
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d015      	beq.n	8007f88 <HAL_RTC_SetAlarm_IT+0x328>
 8007f5c:	f240 5183 	movw	r1, #1411	; 0x583
 8007f60:	4896      	ldr	r0, [pc, #600]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007f62:	f7fa fa0a 	bl	800237a <assert_failed>
 8007f66:	e00f      	b.n	8007f88 <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fac2 	bl	80084fc <RTC_Bcd2ToByte>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b17      	cmp	r3, #23
 8007f7c:	d904      	bls.n	8007f88 <HAL_RTC_SetAlarm_IT+0x328>
 8007f7e:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8007f82:	488e      	ldr	r0, [pc, #568]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007f84:	f7fa f9f9 	bl	800237a <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fab5 	bl	80084fc <RTC_Bcd2ToByte>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b3b      	cmp	r3, #59	; 0x3b
 8007f96:	d904      	bls.n	8007fa2 <HAL_RTC_SetAlarm_IT+0x342>
 8007f98:	f240 518b 	movw	r1, #1419	; 0x58b
 8007f9c:	4887      	ldr	r0, [pc, #540]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007f9e:	f7fa f9ec 	bl	800237a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	789b      	ldrb	r3, [r3, #2]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 faa8 	bl	80084fc <RTC_Bcd2ToByte>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b3b      	cmp	r3, #59	; 0x3b
 8007fb0:	d904      	bls.n	8007fbc <HAL_RTC_SetAlarm_IT+0x35c>
 8007fb2:	f240 518c 	movw	r1, #1420	; 0x58c
 8007fb6:	4881      	ldr	r0, [pc, #516]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007fb8:	f7fa f9df 	bl	800237a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d117      	bne.n	8007ff4 <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fa96 	bl	80084fc <RTC_Bcd2ToByte>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d008      	beq.n	8007fe8 <HAL_RTC_SetAlarm_IT+0x388>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fa8d 	bl	80084fc <RTC_Bcd2ToByte>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b1f      	cmp	r3, #31
 8007fe6:	d949      	bls.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 8007fe8:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8007fec:	4873      	ldr	r0, [pc, #460]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8007fee:	f7fa f9c4 	bl	800237a <assert_failed>
 8007ff2:	e043      	b.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fa7e 	bl	80084fc <RTC_Bcd2ToByte>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	d03a      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fa75 	bl	80084fc <RTC_Bcd2ToByte>
 8008012:	4603      	mov	r3, r0
 8008014:	2b02      	cmp	r3, #2
 8008016:	d031      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fa6c 	bl	80084fc <RTC_Bcd2ToByte>
 8008024:	4603      	mov	r3, r0
 8008026:	2b03      	cmp	r3, #3
 8008028:	d028      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fa63 	bl	80084fc <RTC_Bcd2ToByte>
 8008036:	4603      	mov	r3, r0
 8008038:	2b04      	cmp	r3, #4
 800803a:	d01f      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fa5a 	bl	80084fc <RTC_Bcd2ToByte>
 8008048:	4603      	mov	r3, r0
 800804a:	2b05      	cmp	r3, #5
 800804c:	d016      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fa51 	bl	80084fc <RTC_Bcd2ToByte>
 800805a:	4603      	mov	r3, r0
 800805c:	2b06      	cmp	r3, #6
 800805e:	d00d      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa48 	bl	80084fc <RTC_Bcd2ToByte>
 800806c:	4603      	mov	r3, r0
 800806e:	2b07      	cmp	r3, #7
 8008070:	d004      	beq.n	800807c <HAL_RTC_SetAlarm_IT+0x41c>
 8008072:	f240 5194 	movw	r1, #1428	; 0x594
 8008076:	4851      	ldr	r0, [pc, #324]	; (80081bc <HAL_RTC_SetAlarm_IT+0x55c>)
 8008078:	f7fa f97f 	bl	800237a <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008088:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800808e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	78db      	ldrb	r3, [r3, #3]
 8008094:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008096:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800809e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80080a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80080a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	22ca      	movs	r2, #202	; 0xca
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2253      	movs	r2, #83	; 0x53
 80080ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d4:	d148      	bne.n	8008168 <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080e4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80080f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80080f8:	f7fa fd3e 	bl	8002b78 <HAL_GetTick>
 80080fc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080fe:	e013      	b.n	8008128 <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008100:	f7fa fd3a 	bl	8002b78 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800810e:	d90b      	bls.n	8008128 <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2203      	movs	r2, #3
 800811c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e081      	b.n	800822c <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0e4      	beq.n	8008100 <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008154:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008164:	609a      	str	r2, [r3, #8]
 8008166:	e04a      	b.n	80081fe <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008176:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008188:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800818a:	f7fa fcf5 	bl	8002b78 <HAL_GetTick>
 800818e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008190:	e016      	b.n	80081c0 <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008192:	f7fa fcf1 	bl	8002b78 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a0:	d90e      	bls.n	80081c0 <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	22ff      	movs	r2, #255	; 0xff
 80081a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2203      	movs	r2, #3
 80081ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e038      	b.n	800822c <HAL_RTC_SetAlarm_IT+0x5cc>
 80081ba:	bf00      	nop
 80081bc:	0800cb04 	.word	0x0800cb04
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0e1      	beq.n	8008192 <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081fc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a0c      	ldr	r2, [pc, #48]	; (8008234 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8008204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008208:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800820a:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <HAL_RTC_SetAlarm_IT+0x5d4>)
 8008210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008214:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	22ff      	movs	r2, #255	; 0xff
 800821c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3724      	adds	r7, #36	; 0x24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd90      	pop	{r4, r7, pc}
 8008234:	40010400 	.word	0x40010400

08008238 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_RTC_GetAlarm+0x2c>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d004      	beq.n	8008264 <HAL_RTC_GetAlarm+0x2c>
 800825a:	f240 6166 	movw	r1, #1638	; 0x666
 800825e:	484a      	ldr	r0, [pc, #296]	; (8008388 <HAL_RTC_GetAlarm+0x150>)
 8008260:	f7fa f88b 	bl	800237a <assert_failed>
  assert_param(IS_RTC_ALARM(Alarm));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	d008      	beq.n	800827e <HAL_RTC_GetAlarm+0x46>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008272:	d004      	beq.n	800827e <HAL_RTC_GetAlarm+0x46>
 8008274:	f240 6167 	movw	r1, #1639	; 0x667
 8008278:	4843      	ldr	r0, [pc, #268]	; (8008388 <HAL_RTC_GetAlarm+0x150>)
 800827a:	f7fa f87e 	bl	800237a <assert_failed>

  if (Alarm == RTC_ALARM_A)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d10e      	bne.n	80082a4 <HAL_RTC_GetAlarm+0x6c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800828c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	e00d      	b.n	80082c0 <HAL_RTC_GetAlarm+0x88>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80082be:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	0c1b      	lsrs	r3, r3, #16
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	0e1b      	lsrs	r3, r3, #24
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800830e:	b2da      	uxtb	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d125      	bne.n	800837c <HAL_RTC_GetAlarm+0x144>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f8e1 	bl	80084fc <RTC_Bcd2ToByte>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f8d8 	bl	80084fc <RTC_Bcd2ToByte>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	789b      	ldrb	r3, [r3, #2]
 8008358:	4618      	mov	r0, r3
 800835a:	f000 f8cf 	bl	80084fc <RTC_Bcd2ToByte>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f8c5 	bl	80084fc <RTC_Bcd2ToByte>
 8008372:	4603      	mov	r3, r0
 8008374:	461a      	mov	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	0800cb04 	.word	0x0800cb04

0800838c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d012      	beq.n	80083c8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7f7 ff93 	bl	80002dc <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80083c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d012      	beq.n	80083fc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa3b 	bl	8008860 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80083fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <HAL_RTC_AlarmIRQHandler+0x88>)
 80083fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008402:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	775a      	strb	r2, [r3, #29]
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40010400 	.word	0x40010400

08008418 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008432:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008434:	f7fa fba0 	bl	8002b78 <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800843a:	e009      	b.n	8008450 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800843c:	f7fa fb9c 	bl	8002b78 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800844a:	d901      	bls.n	8008450 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e007      	b.n	8008460 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ee      	beq.n	800843c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d119      	bne.n	80084b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800848c:	f7fa fb74 	bl	8002b78 <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008492:	e009      	b.n	80084a8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008494:	f7fa fb70 	bl	8002b78 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084a2:	d901      	bls.n	80084a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e007      	b.n	80084b8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0ee      	beq.n	8008494 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80084ce:	e005      	b.n	80084dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	3b0a      	subs	r3, #10
 80084da:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2b09      	cmp	r3, #9
 80084e0:	d8f6      	bhi.n	80084d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	b2db      	uxtb	r3, r3
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	b2db      	uxtb	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	4413      	add	r3, r2
 800852a:	b2db      	uxtb	r3, r3
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d013      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d010      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d00d      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d00a      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d007      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b06      	cmp	r3, #6
 800856a:	d004      	beq.n	8008576 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 800856c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8008570:	485a      	ldr	r0, [pc, #360]	; (80086dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8008572:	f7f9 ff02 	bl	800237a <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857c:	d304      	bcc.n	8008588 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 800857e:	f240 3161 	movw	r1, #865	; 0x361
 8008582:	4856      	ldr	r0, [pc, #344]	; (80086dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8008584:	f7f9 fef9 	bl	800237a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	7f1b      	ldrb	r3, [r3, #28]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8008590:	2302      	movs	r3, #2
 8008592:	e09e      	b.n	80086d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2202      	movs	r2, #2
 800859e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	22ca      	movs	r2, #202	; 0xca
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2253      	movs	r2, #83	; 0x53
 80085ae:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d01e      	beq.n	80085fc <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 80085be:	f7fa fadb 	bl	8002b78 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80085c4:	e013      	b.n	80085ee <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085c6:	f7fa fad7 	bl	8002b78 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d4:	d90b      	bls.n	80085ee <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	22ff      	movs	r2, #255	; 0xff
 80085dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2203      	movs	r2, #3
 80085e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e071      	b.n	80086d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800860a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800861c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800861e:	f7fa faab 	bl	8002b78 <HAL_GetTick>
 8008622:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008624:	e013      	b.n	800864e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008626:	f7fa faa7 	bl	8002b78 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008634:	d90b      	bls.n	800864e <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	22ff      	movs	r2, #255	; 0xff
 800863c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2203      	movs	r2, #3
 8008642:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e041      	b.n	80086d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0e4      	beq.n	8008626 <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0207 	bic.w	r2, r2, #7
 8008672:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6899      	ldr	r1, [r3, #8]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	430a      	orrs	r2, r1
 8008682:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008684:	4b16      	ldr	r3, [pc, #88]	; (80086e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a15      	ldr	r2, [pc, #84]	; (80086e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 800868a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800868e:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	4a12      	ldr	r2, [pc, #72]	; (80086e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8008696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086aa:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	0800cb3c 	.word	0x0800cb3c
 80086e0:	40010400 	.word	0x40010400

080086e4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7f1b      	ldrb	r3, [r3, #28]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e047      	b.n	800878c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	22ca      	movs	r2, #202	; 0xca
 800870e:	625a      	str	r2, [r3, #36]	; 0x24
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2253      	movs	r2, #83	; 0x53
 8008716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008726:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008736:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008738:	f7fa fa1e 	bl	8002b78 <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800873e:	e013      	b.n	8008768 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008740:	f7fa fa1a 	bl	8002b78 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800874e:	d90b      	bls.n	8008768 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2203      	movs	r2, #3
 800875c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e011      	b.n	800878c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0e4      	beq.n	8008740 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7f8 ff9c 	bl	80016e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80087c0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80087c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087c8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	775a      	strb	r2, [r3, #29]
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	40010400 	.word	0x40010400

080087dc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d904      	bls.n	80087fc <HAL_RTCEx_BKUPWrite+0x20>
 80087f2:	f240 4171 	movw	r1, #1137	; 0x471
 80087f6:	4809      	ldr	r0, [pc, #36]	; (800881c <HAL_RTCEx_BKUPWrite+0x40>)
 80087f8:	f7f9 fdbf 	bl	800237a <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3350      	adds	r3, #80	; 0x50
 8008802:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4413      	add	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	0800cb3c 	.word	0x0800cb3c

08008820 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b0f      	cmp	r3, #15
 8008832:	d904      	bls.n	800883e <HAL_RTCEx_BKUPRead+0x1e>
 8008834:	f240 4187 	movw	r1, #1159	; 0x487
 8008838:	4808      	ldr	r0, [pc, #32]	; (800885c <HAL_RTCEx_BKUPRead+0x3c>)
 800883a:	f7f9 fd9e 	bl	800237a <assert_failed>

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3350      	adds	r3, #80	; 0x50
 8008844:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	0800cb3c 	.word	0x0800cb3c

08008860 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e0be      	b.n	8008a04 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a60      	ldr	r2, [pc, #384]	; (8008a0c <HAL_TIM_Base_Init+0x198>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d036      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d031      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a5c      	ldr	r2, [pc, #368]	; (8008a10 <HAL_TIM_Base_Init+0x19c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d02c      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a5a      	ldr	r2, [pc, #360]	; (8008a14 <HAL_TIM_Base_Init+0x1a0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d027      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a59      	ldr	r2, [pc, #356]	; (8008a18 <HAL_TIM_Base_Init+0x1a4>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d022      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a57      	ldr	r2, [pc, #348]	; (8008a1c <HAL_TIM_Base_Init+0x1a8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d01d      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a56      	ldr	r2, [pc, #344]	; (8008a20 <HAL_TIM_Base_Init+0x1ac>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d018      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a54      	ldr	r2, [pc, #336]	; (8008a24 <HAL_TIM_Base_Init+0x1b0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a53      	ldr	r2, [pc, #332]	; (8008a28 <HAL_TIM_Base_Init+0x1b4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a51      	ldr	r2, [pc, #324]	; (8008a2c <HAL_TIM_Base_Init+0x1b8>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a50      	ldr	r2, [pc, #320]	; (8008a30 <HAL_TIM_Base_Init+0x1bc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIM_Base_Init+0x8a>
 80088f4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80088f8:	484e      	ldr	r0, [pc, #312]	; (8008a34 <HAL_TIM_Base_Init+0x1c0>)
 80088fa:	f7f9 fd3e 	bl	800237a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d014      	beq.n	8008930 <HAL_TIM_Base_Init+0xbc>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b10      	cmp	r3, #16
 800890c:	d010      	beq.n	8008930 <HAL_TIM_Base_Init+0xbc>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b20      	cmp	r3, #32
 8008914:	d00c      	beq.n	8008930 <HAL_TIM_Base_Init+0xbc>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d008      	beq.n	8008930 <HAL_TIM_Base_Init+0xbc>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b60      	cmp	r3, #96	; 0x60
 8008924:	d004      	beq.n	8008930 <HAL_TIM_Base_Init+0xbc>
 8008926:	f240 111b 	movw	r1, #283	; 0x11b
 800892a:	4842      	ldr	r0, [pc, #264]	; (8008a34 <HAL_TIM_Base_Init+0x1c0>)
 800892c:	f7f9 fd25 	bl	800237a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00e      	beq.n	8008956 <HAL_TIM_Base_Init+0xe2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008940:	d009      	beq.n	8008956 <HAL_TIM_Base_Init+0xe2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800894a:	d004      	beq.n	8008956 <HAL_TIM_Base_Init+0xe2>
 800894c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008950:	4838      	ldr	r0, [pc, #224]	; (8008a34 <HAL_TIM_Base_Init+0x1c0>)
 8008952:	f7f9 fd12 	bl	800237a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <HAL_TIM_Base_Init+0xfc>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d004      	beq.n	8008970 <HAL_TIM_Base_Init+0xfc>
 8008966:	f240 111d 	movw	r1, #285	; 0x11d
 800896a:	4832      	ldr	r0, [pc, #200]	; (8008a34 <HAL_TIM_Base_Init+0x1c0>)
 800896c:	f7f9 fd05 	bl	800237a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7f9 ffb7 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f000 fa49 	bl	8008e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40012c00 	.word	0x40012c00
 8008a10:	40000400 	.word	0x40000400
 8008a14:	40000800 	.word	0x40000800
 8008a18:	40001000 	.word	0x40001000
 8008a1c:	40001400 	.word	0x40001400
 8008a20:	40013400 	.word	0x40013400
 8008a24:	40014000 	.word	0x40014000
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800
 8008a30:	40015000 	.word	0x40015000
 8008a34:	0800cb78 	.word	0x0800cb78

08008a38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a46      	ldr	r2, [pc, #280]	; (8008b60 <HAL_TIM_Base_Start+0x128>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d036      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a52:	d031      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a42      	ldr	r2, [pc, #264]	; (8008b64 <HAL_TIM_Base_Start+0x12c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d02c      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a41      	ldr	r2, [pc, #260]	; (8008b68 <HAL_TIM_Base_Start+0x130>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d027      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <HAL_TIM_Base_Start+0x134>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d022      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a3e      	ldr	r2, [pc, #248]	; (8008b70 <HAL_TIM_Base_Start+0x138>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d01d      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a3c      	ldr	r2, [pc, #240]	; (8008b74 <HAL_TIM_Base_Start+0x13c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d018      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3b      	ldr	r2, [pc, #236]	; (8008b78 <HAL_TIM_Base_Start+0x140>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d013      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a39      	ldr	r2, [pc, #228]	; (8008b7c <HAL_TIM_Base_Start+0x144>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00e      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a38      	ldr	r2, [pc, #224]	; (8008b80 <HAL_TIM_Base_Start+0x148>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d009      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a36      	ldr	r2, [pc, #216]	; (8008b84 <HAL_TIM_Base_Start+0x14c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x80>
 8008aae:	f240 119b 	movw	r1, #411	; 0x19b
 8008ab2:	4835      	ldr	r0, [pc, #212]	; (8008b88 <HAL_TIM_Base_Start+0x150>)
 8008ab4:	f7f9 fc61 	bl	800237a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d001      	beq.n	8008ac8 <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e047      	b.n	8008b58 <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <HAL_TIM_Base_Start+0x128>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01d      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d018      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <HAL_TIM_Base_Start+0x12c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a1d      	ldr	r2, [pc, #116]	; (8008b68 <HAL_TIM_Base_Start+0x130>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00e      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1d      	ldr	r2, [pc, #116]	; (8008b74 <HAL_TIM_Base_Start+0x13c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d009      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <HAL_TIM_Base_Start+0x140>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_TIM_Base_Start+0xde>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1c      	ldr	r2, [pc, #112]	; (8008b84 <HAL_TIM_Base_Start+0x14c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d115      	bne.n	8008b42 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	4b1b      	ldr	r3, [pc, #108]	; (8008b8c <HAL_TIM_Base_Start+0x154>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b06      	cmp	r3, #6
 8008b26:	d015      	beq.n	8008b54 <HAL_TIM_Base_Start+0x11c>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2e:	d011      	beq.n	8008b54 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b40:	e008      	b.n	8008b54 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e000      	b.n	8008b56 <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40000400 	.word	0x40000400
 8008b68:	40000800 	.word	0x40000800
 8008b6c:	40001000 	.word	0x40001000
 8008b70:	40001400 	.word	0x40001400
 8008b74:	40013400 	.word	0x40013400
 8008b78:	40014000 	.word	0x40014000
 8008b7c:	40014400 	.word	0x40014400
 8008b80:	40014800 	.word	0x40014800
 8008b84:	40015000 	.word	0x40015000
 8008b88:	0800cb78 	.word	0x0800cb78
 8008b8c:	00010007 	.word	0x00010007

08008b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d122      	bne.n	8008bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d11b      	bne.n	8008bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0202 	mvn.w	r2, #2
 8008bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f90f 	bl	8008df6 <HAL_TIM_IC_CaptureCallback>
 8008bd8:	e005      	b.n	8008be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f901 	bl	8008de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f912 	bl	8008e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d122      	bne.n	8008c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d11b      	bne.n	8008c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0204 	mvn.w	r2, #4
 8008c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f8e5 	bl	8008df6 <HAL_TIM_IC_CaptureCallback>
 8008c2c:	e005      	b.n	8008c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f8d7 	bl	8008de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f8e8 	bl	8008e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d122      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d11b      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0208 	mvn.w	r2, #8
 8008c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8bb 	bl	8008df6 <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f8ad 	bl	8008de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8be 	bl	8008e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b10      	cmp	r3, #16
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0210 	mvn.w	r2, #16
 8008cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f891 	bl	8008df6 <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f883 	bl	8008de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f894 	bl	8008e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d10e      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d107      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0201 	mvn.w	r2, #1
 8008d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f85d 	bl	8008dce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d10e      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2c:	2b80      	cmp	r3, #128	; 0x80
 8008d2e:	d107      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa70 	bl	8009220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4e:	d10e      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	d107      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fa63 	bl	8009234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d10e      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b40      	cmp	r3, #64	; 0x40
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f842 	bl	8008e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d10e      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d107      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f06f 0220 	mvn.w	r2, #32
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa23 	bl	800920c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a42      	ldr	r2, [pc, #264]	; (8008f50 <TIM_Base_SetConfig+0x11c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d013      	beq.n	8008e74 <TIM_Base_SetConfig+0x40>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e52:	d00f      	beq.n	8008e74 <TIM_Base_SetConfig+0x40>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a3f      	ldr	r2, [pc, #252]	; (8008f54 <TIM_Base_SetConfig+0x120>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d00b      	beq.n	8008e74 <TIM_Base_SetConfig+0x40>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a3e      	ldr	r2, [pc, #248]	; (8008f58 <TIM_Base_SetConfig+0x124>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d007      	beq.n	8008e74 <TIM_Base_SetConfig+0x40>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a3d      	ldr	r2, [pc, #244]	; (8008f5c <TIM_Base_SetConfig+0x128>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d003      	beq.n	8008e74 <TIM_Base_SetConfig+0x40>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a3c      	ldr	r2, [pc, #240]	; (8008f60 <TIM_Base_SetConfig+0x12c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d108      	bne.n	8008e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a31      	ldr	r2, [pc, #196]	; (8008f50 <TIM_Base_SetConfig+0x11c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01f      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e94:	d01b      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a2e      	ldr	r2, [pc, #184]	; (8008f54 <TIM_Base_SetConfig+0x120>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d017      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a2d      	ldr	r2, [pc, #180]	; (8008f58 <TIM_Base_SetConfig+0x124>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a2c      	ldr	r2, [pc, #176]	; (8008f5c <TIM_Base_SetConfig+0x128>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00f      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a2c      	ldr	r2, [pc, #176]	; (8008f64 <TIM_Base_SetConfig+0x130>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2b      	ldr	r2, [pc, #172]	; (8008f68 <TIM_Base_SetConfig+0x134>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2a      	ldr	r2, [pc, #168]	; (8008f6c <TIM_Base_SetConfig+0x138>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a25      	ldr	r2, [pc, #148]	; (8008f60 <TIM_Base_SetConfig+0x12c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d108      	bne.n	8008ee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a12      	ldr	r2, [pc, #72]	; (8008f50 <TIM_Base_SetConfig+0x11c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <TIM_Base_SetConfig+0x100>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <TIM_Base_SetConfig+0x128>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00f      	beq.n	8008f34 <TIM_Base_SetConfig+0x100>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <TIM_Base_SetConfig+0x130>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00b      	beq.n	8008f34 <TIM_Base_SetConfig+0x100>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a12      	ldr	r2, [pc, #72]	; (8008f68 <TIM_Base_SetConfig+0x134>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_Base_SetConfig+0x100>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a11      	ldr	r2, [pc, #68]	; (8008f6c <TIM_Base_SetConfig+0x138>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_Base_SetConfig+0x100>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a0c      	ldr	r2, [pc, #48]	; (8008f60 <TIM_Base_SetConfig+0x12c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d103      	bne.n	8008f3c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	615a      	str	r2, [r3, #20]
}
 8008f42:	bf00      	nop
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	40012c00 	.word	0x40012c00
 8008f54:	40000400 	.word	0x40000400
 8008f58:	40000800 	.word	0x40000800
 8008f5c:	40013400 	.word	0x40013400
 8008f60:	40015000 	.word	0x40015000
 8008f64:	40014000 	.word	0x40014000
 8008f68:	40014400 	.word	0x40014400
 8008f6c:	40014800 	.word	0x40014800

08008f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a9a      	ldr	r2, [pc, #616]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d02c      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d027      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a96      	ldr	r2, [pc, #600]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d022      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a94      	ldr	r2, [pc, #592]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d01d      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a93      	ldr	r2, [pc, #588]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d018      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a91      	ldr	r2, [pc, #580]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d013      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a90      	ldr	r2, [pc, #576]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00e      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a8e      	ldr	r2, [pc, #568]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d009      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a8d      	ldr	r2, [pc, #564]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d004      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008fd4:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8008fd8:	488b      	ldr	r0, [pc, #556]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008fda:	f7f9 f9ce 	bl	800237a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d020      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d01c      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d018      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b30      	cmp	r3, #48	; 0x30
 8008ffc:	d014      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d010      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b50      	cmp	r3, #80	; 0x50
 800900c:	d00c      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b60      	cmp	r3, #96	; 0x60
 8009014:	d008      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b70      	cmp	r3, #112	; 0x70
 800901c:	d004      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800901e:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8009022:	4879      	ldr	r0, [pc, #484]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009024:	f7f9 f9a9 	bl	800237a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b80      	cmp	r3, #128	; 0x80
 800902e:	d008      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009038:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800903c:	4872      	ldr	r0, [pc, #456]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800903e:	f7f9 f99c 	bl	800237a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800904c:	2302      	movs	r3, #2
 800904e:	e0c6      	b.n	80091de <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a5c      	ldr	r2, [pc, #368]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a5f      	ldr	r2, [pc, #380]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a5e      	ldr	r2, [pc, #376]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d161      	bne.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d054      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800909e:	d04f      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a8:	d04a      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090b2:	d045      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090bc:	d040      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80090c6:	d03b      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090d0:	d036      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090da:	d031      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80090e4:	d02c      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ee:	d027      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80090f8:	d022      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009102:	d01d      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800910c:	d018      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009116:	d013      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8009120:	d00e      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800912a:	d009      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009134:	d004      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8009136:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800913a:	4833      	ldr	r0, [pc, #204]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800913c:	f7f9 f91d 	bl	800237a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009158:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4313      	orrs	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1d      	ldr	r2, [pc, #116]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d01d      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917e:	d018      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a19      	ldr	r2, [pc, #100]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d013      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d00e      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a18      	ldr	r2, [pc, #96]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d009      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a17      	ldr	r2, [pc, #92]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d004      	beq.n	80091b2 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a15      	ldr	r2, [pc, #84]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d10c      	bne.n	80091cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40001000 	.word	0x40001000
 80091f8:	40001400 	.word	0x40001400
 80091fc:	40013400 	.word	0x40013400
 8009200:	40014000 	.word	0x40014000
 8009204:	40015000 	.word	0x40015000
 8009208:	0800cbb0 	.word	0x0800cbb0

0800920c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e077      	b.n	800934a <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d014      	beq.n	800928c <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <HAL_UART_Init+0x10c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d02d      	beq.n	80092c8 <HAL_UART_Init+0x80>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a39      	ldr	r2, [pc, #228]	; (8009358 <HAL_UART_Init+0x110>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d028      	beq.n	80092c8 <HAL_UART_Init+0x80>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a38      	ldr	r2, [pc, #224]	; (800935c <HAL_UART_Init+0x114>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d023      	beq.n	80092c8 <HAL_UART_Init+0x80>
 8009280:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009284:	4836      	ldr	r0, [pc, #216]	; (8009360 <HAL_UART_Init+0x118>)
 8009286:	f7f9 f878 	bl	800237a <assert_failed>
 800928a:	e01d      	b.n	80092c8 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a30      	ldr	r2, [pc, #192]	; (8009354 <HAL_UART_Init+0x10c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d018      	beq.n	80092c8 <HAL_UART_Init+0x80>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a2f      	ldr	r2, [pc, #188]	; (8009358 <HAL_UART_Init+0x110>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <HAL_UART_Init+0x80>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a2d      	ldr	r2, [pc, #180]	; (800935c <HAL_UART_Init+0x114>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00e      	beq.n	80092c8 <HAL_UART_Init+0x80>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a2d      	ldr	r2, [pc, #180]	; (8009364 <HAL_UART_Init+0x11c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d009      	beq.n	80092c8 <HAL_UART_Init+0x80>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a2b      	ldr	r2, [pc, #172]	; (8009368 <HAL_UART_Init+0x120>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d004      	beq.n	80092c8 <HAL_UART_Init+0x80>
 80092be:	f240 1131 	movw	r1, #305	; 0x131
 80092c2:	4827      	ldr	r0, [pc, #156]	; (8009360 <HAL_UART_Init+0x118>)
 80092c4:	f7f9 f859 	bl	800237a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7f9 fb7f 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2224      	movs	r2, #36	; 0x24
 80092e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0201 	bic.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fbe9 	bl	8009acc <UART_SetConfig>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e022      	b.n	800934a <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fe41 	bl	8009f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009320:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009330:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0201 	orr.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 ff74 	bl	800a230 <UART_CheckIdleState>
 8009348:	4603      	mov	r3, r0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	40013800 	.word	0x40013800
 8009358:	40004400 	.word	0x40004400
 800935c:	40004800 	.word	0x40004800
 8009360:	0800cbec 	.word	0x0800cbec
 8009364:	40004c00 	.word	0x40004c00
 8009368:	40005000 	.word	0x40005000

0800936c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800936c:	b480      	push	{r7}
 800936e:	b08b      	sub	sp, #44	; 0x2c
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800937e:	2b20      	cmp	r3, #32
 8009380:	d156      	bne.n	8009430 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <HAL_UART_Transmit_IT+0x22>
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e04f      	b.n	8009432 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_UART_Transmit_IT+0x34>
 800939c:	2302      	movs	r3, #2
 800939e:	e048      	b.n	8009432 <HAL_UART_Transmit_IT+0xc6>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2221      	movs	r2, #33	; 0x21
 80093d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093da:	d107      	bne.n	80093ec <HAL_UART_Transmit_IT+0x80>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a16      	ldr	r2, [pc, #88]	; (8009440 <HAL_UART_Transmit_IT+0xd4>)
 80093e8:	669a      	str	r2, [r3, #104]	; 0x68
 80093ea:	e002      	b.n	80093f2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <HAL_UART_Transmit_IT+0xd8>)
 80093f0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	613b      	str	r3, [r7, #16]
   return(result);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	623b      	str	r3, [r7, #32]
 800941a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	69f9      	ldr	r1, [r7, #28]
 800941e:	6a3a      	ldr	r2, [r7, #32]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	61bb      	str	r3, [r7, #24]
   return(result);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	4618      	mov	r0, r3
 8009434:	372c      	adds	r7, #44	; 0x2c
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	0800a74f 	.word	0x0800a74f
 8009444:	0800a697 	.word	0x0800a697

08009448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	; 0x28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945a:	2b20      	cmp	r3, #32
 800945c:	d13d      	bne.n	80094da <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_UART_Receive_IT+0x22>
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e036      	b.n	80094dc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_UART_Receive_IT+0x34>
 8009478:	2302      	movs	r3, #2
 800947a:	e02f      	b.n	80094dc <HAL_UART_Receive_IT+0x94>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d018      	beq.n	80094ca <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	613b      	str	r3, [r7, #16]
   return(result);
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	623b      	str	r3, [r7, #32]
 80094b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	69f9      	ldr	r1, [r7, #28]
 80094bc:	6a3a      	ldr	r2, [r7, #32]
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e6      	bne.n	8009498 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	461a      	mov	r2, r3
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 ffbb 	bl	800a44c <UART_Start_Receive_IT>
 80094d6:	4603      	mov	r3, r0
 80094d8:	e000      	b.n	80094dc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3728      	adds	r7, #40	; 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b0ba      	sub	sp, #232	; 0xe8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800950a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800950e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009512:	4013      	ands	r3, r2
 8009514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d115      	bne.n	800954c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00f      	beq.n	800954c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800952c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009530:	f003 0320 	and.w	r3, r3, #32
 8009534:	2b00      	cmp	r3, #0
 8009536:	d009      	beq.n	800954c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 82a3 	beq.w	8009a88 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
      }
      return;
 800954a:	e29d      	b.n	8009a88 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800954c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8117 	beq.w	8009784 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009566:	4b85      	ldr	r3, [pc, #532]	; (800977c <HAL_UART_IRQHandler+0x298>)
 8009568:	4013      	ands	r3, r2
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 810a 	beq.w	8009784 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d011      	beq.n	80095a0 <HAL_UART_IRQHandler+0xbc>
 800957c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2201      	movs	r2, #1
 800958e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d011      	beq.n	80095d0 <HAL_UART_IRQHandler+0xec>
 80095ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2202      	movs	r2, #2
 80095be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c6:	f043 0204 	orr.w	r2, r3, #4
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d011      	beq.n	8009600 <HAL_UART_IRQHandler+0x11c>
 80095dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2204      	movs	r2, #4
 80095ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d017      	beq.n	800963c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800960c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d105      	bne.n	8009624 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2208      	movs	r2, #8
 800962a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009632:	f043 0208 	orr.w	r2, r3, #8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800963c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009644:	2b00      	cmp	r3, #0
 8009646:	d012      	beq.n	800966e <HAL_UART_IRQHandler+0x18a>
 8009648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800965c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009664:	f043 0220 	orr.w	r2, r3, #32
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8209 	beq.w	8009a8c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800967a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00d      	beq.n	80096a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d007      	beq.n	80096a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b6:	2b40      	cmp	r3, #64	; 0x40
 80096b8:	d005      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d04f      	beq.n	8009766 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 ff6c 	bl	800a5a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d141      	bne.n	800975e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3308      	adds	r3, #8
 8009702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800970a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800971e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1d9      	bne.n	80096da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	2b00      	cmp	r3, #0
 800972c:	d013      	beq.n	8009756 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	4a13      	ldr	r2, [pc, #76]	; (8009780 <HAL_UART_IRQHandler+0x29c>)
 8009734:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	4618      	mov	r0, r3
 800973c:	f7f9 fbc5 	bl	8002eca <HAL_DMA_Abort_IT>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d017      	beq.n	8009776 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009750:	4610      	mov	r0, r2
 8009752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	e00f      	b.n	8009776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f9a2 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975c:	e00b      	b.n	8009776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f99e 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009764:	e007      	b.n	8009776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f99a 	bl	8009aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009774:	e18a      	b.n	8009a8c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009776:	bf00      	nop
    return;
 8009778:	e188      	b.n	8009a8c <HAL_UART_IRQHandler+0x5a8>
 800977a:	bf00      	nop
 800977c:	04000120 	.word	0x04000120
 8009780:	0800a66b 	.word	0x0800a66b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009788:	2b01      	cmp	r3, #1
 800978a:	f040 8143 	bne.w	8009a14 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009792:	f003 0310 	and.w	r3, r3, #16
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 813c 	beq.w	8009a14 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8135 	beq.w	8009a14 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2210      	movs	r2, #16
 80097b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	f040 80b1 	bne.w	8009924 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 815c 	beq.w	8009a90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097e2:	429a      	cmp	r2, r3
 80097e4:	f080 8154 	bcs.w	8009a90 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	f000 8085 	beq.w	8009908 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800981a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800982c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009834:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1da      	bne.n	80097fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800986c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009870:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800987e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e1      	bne.n	8009848 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3308      	adds	r3, #8
 800988a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800989a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e3      	bne.n	8009884 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d8:	f023 0310 	bic.w	r3, r3, #16
 80098dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80098ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e4      	bne.n	80098c8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009902:	4618      	mov	r0, r3
 8009904:	f7f9 faa8 	bl	8002e58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009914:	b29b      	uxth	r3, r3
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	b29b      	uxth	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f8c9 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009922:	e0b5      	b.n	8009a90 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009930:	b29b      	uxth	r3, r3
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80a7 	beq.w	8009a94 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a2 	beq.w	8009a94 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009972:	647b      	str	r3, [r7, #68]	; 0x44
 8009974:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e4      	bne.n	8009950 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3308      	adds	r3, #8
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	623b      	str	r3, [r7, #32]
   return(result);
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	f023 0301 	bic.w	r3, r3, #1
 800999c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3308      	adds	r3, #8
 80099a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099aa:	633a      	str	r2, [r7, #48]	; 0x30
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e3      	bne.n	8009986 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f023 0310 	bic.w	r3, r3, #16
 80099e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	69b9      	ldr	r1, [r7, #24]
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e4      	bne.n	80099d0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f851 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a12:	e03f      	b.n	8009a94 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <HAL_UART_IRQHandler+0x55a>
 8009a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d008      	beq.n	8009a3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 f86f 	bl	800ab1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a3c:	e02d      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00e      	beq.n	8009a68 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01c      	beq.n	8009a98 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	4798      	blx	r3
    }
    return;
 8009a66:	e017      	b.n	8009a98 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d012      	beq.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00c      	beq.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fec4 	bl	800a80e <UART_EndTransmit_IT>
    return;
 8009a86:	e008      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009a88:	bf00      	nop
 8009a8a:	e006      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8009a8c:	bf00      	nop
 8009a8e:	e004      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009a90:	bf00      	nop
 8009a92:	e002      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8009a98:	bf00      	nop
  }

}
 8009a9a:	37e8      	adds	r7, #232	; 0xe8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4a9a      	ldr	r2, [pc, #616]	; (8009d48 <UART_SetConfig+0x27c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d904      	bls.n	8009aec <UART_SetConfig+0x20>
 8009ae2:	f640 313f 	movw	r1, #2879	; 0xb3f
 8009ae6:	4899      	ldr	r0, [pc, #612]	; (8009d4c <UART_SetConfig+0x280>)
 8009ae8:	f7f8 fc47 	bl	800237a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009af4:	d00d      	beq.n	8009b12 <UART_SetConfig+0x46>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <UART_SetConfig+0x46>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b06:	d004      	beq.n	8009b12 <UART_SetConfig+0x46>
 8009b08:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8009b0c:	488f      	ldr	r0, [pc, #572]	; (8009d4c <UART_SetConfig+0x280>)
 8009b0e:	f7f8 fc34 	bl	800237a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1a:	d012      	beq.n	8009b42 <UART_SetConfig+0x76>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00e      	beq.n	8009b42 <UART_SetConfig+0x76>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b2c:	d009      	beq.n	8009b42 <UART_SetConfig+0x76>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b36:	d004      	beq.n	8009b42 <UART_SetConfig+0x76>
 8009b38:	f640 3141 	movw	r1, #2881	; 0xb41
 8009b3c:	4883      	ldr	r0, [pc, #524]	; (8009d4c <UART_SetConfig+0x280>)
 8009b3e:	f7f8 fc1c 	bl	800237a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <UART_SetConfig+0x92>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b52:	d004      	beq.n	8009b5e <UART_SetConfig+0x92>
 8009b54:	f640 3142 	movw	r1, #2882	; 0xb42
 8009b58:	487c      	ldr	r0, [pc, #496]	; (8009d4c <UART_SetConfig+0x280>)
 8009b5a:	f7f8 fc0e 	bl	800237a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00e      	beq.n	8009b84 <UART_SetConfig+0xb8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b6e:	d009      	beq.n	8009b84 <UART_SetConfig+0xb8>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b78:	d004      	beq.n	8009b84 <UART_SetConfig+0xb8>
 8009b7a:	f640 3144 	movw	r1, #2884	; 0xb44
 8009b7e:	4873      	ldr	r0, [pc, #460]	; (8009d4c <UART_SetConfig+0x280>)
 8009b80:	f7f8 fbfb 	bl	800237a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	f023 030c 	bic.w	r3, r3, #12
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <UART_SetConfig+0xcc>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <UART_SetConfig+0xd6>
 8009b98:	f640 3145 	movw	r1, #2885	; 0xb45
 8009b9c:	486b      	ldr	r0, [pc, #428]	; (8009d4c <UART_SetConfig+0x280>)
 8009b9e:	f7f8 fbec 	bl	800237a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d013      	beq.n	8009bd2 <UART_SetConfig+0x106>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb2:	d00e      	beq.n	8009bd2 <UART_SetConfig+0x106>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bbc:	d009      	beq.n	8009bd2 <UART_SetConfig+0x106>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc6:	d004      	beq.n	8009bd2 <UART_SetConfig+0x106>
 8009bc8:	f640 3146 	movw	r1, #2886	; 0xb46
 8009bcc:	485f      	ldr	r0, [pc, #380]	; (8009d4c <UART_SetConfig+0x280>)
 8009bce:	f7f8 fbd4 	bl	800237a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <UART_SetConfig+0x122>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be2:	d004      	beq.n	8009bee <UART_SetConfig+0x122>
 8009be4:	f640 3147 	movw	r1, #2887	; 0xb47
 8009be8:	4858      	ldr	r0, [pc, #352]	; (8009d4c <UART_SetConfig+0x280>)
 8009bea:	f7f8 fbc6 	bl	800237a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b50      	ldr	r3, [pc, #320]	; (8009d50 <UART_SetConfig+0x284>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6812      	ldr	r2, [r2, #0]
 8009c14:	6979      	ldr	r1, [r7, #20]
 8009c16:	430b      	orrs	r3, r1
 8009c18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3e      	ldr	r2, [pc, #248]	; (8009d54 <UART_SetConfig+0x288>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d11f      	bne.n	8009c9e <UART_SetConfig+0x1d2>
 8009c5e:	4b3e      	ldr	r3, [pc, #248]	; (8009d58 <UART_SetConfig+0x28c>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d816      	bhi.n	8009c98 <UART_SetConfig+0x1cc>
 8009c6a:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <UART_SetConfig+0x1a4>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c93 	.word	0x08009c93
 8009c7c:	08009c87 	.word	0x08009c87
 8009c80:	2301      	movs	r3, #1
 8009c82:	77fb      	strb	r3, [r7, #31]
 8009c84:	e0c4      	b.n	8009e10 <UART_SetConfig+0x344>
 8009c86:	2302      	movs	r3, #2
 8009c88:	77fb      	strb	r3, [r7, #31]
 8009c8a:	e0c1      	b.n	8009e10 <UART_SetConfig+0x344>
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	77fb      	strb	r3, [r7, #31]
 8009c90:	e0be      	b.n	8009e10 <UART_SetConfig+0x344>
 8009c92:	2308      	movs	r3, #8
 8009c94:	77fb      	strb	r3, [r7, #31]
 8009c96:	e0bb      	b.n	8009e10 <UART_SetConfig+0x344>
 8009c98:	2310      	movs	r3, #16
 8009c9a:	77fb      	strb	r3, [r7, #31]
 8009c9c:	e0b8      	b.n	8009e10 <UART_SetConfig+0x344>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a2e      	ldr	r2, [pc, #184]	; (8009d5c <UART_SetConfig+0x290>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d124      	bne.n	8009cf2 <UART_SetConfig+0x226>
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <UART_SetConfig+0x28c>)
 8009caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cb4:	d011      	beq.n	8009cda <UART_SetConfig+0x20e>
 8009cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cba:	d817      	bhi.n	8009cec <UART_SetConfig+0x220>
 8009cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc0:	d011      	beq.n	8009ce6 <UART_SetConfig+0x21a>
 8009cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc6:	d811      	bhi.n	8009cec <UART_SetConfig+0x220>
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <UART_SetConfig+0x208>
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd0:	d006      	beq.n	8009ce0 <UART_SetConfig+0x214>
 8009cd2:	e00b      	b.n	8009cec <UART_SetConfig+0x220>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	77fb      	strb	r3, [r7, #31]
 8009cd8:	e09a      	b.n	8009e10 <UART_SetConfig+0x344>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	77fb      	strb	r3, [r7, #31]
 8009cde:	e097      	b.n	8009e10 <UART_SetConfig+0x344>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	77fb      	strb	r3, [r7, #31]
 8009ce4:	e094      	b.n	8009e10 <UART_SetConfig+0x344>
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	77fb      	strb	r3, [r7, #31]
 8009cea:	e091      	b.n	8009e10 <UART_SetConfig+0x344>
 8009cec:	2310      	movs	r3, #16
 8009cee:	77fb      	strb	r3, [r7, #31]
 8009cf0:	e08e      	b.n	8009e10 <UART_SetConfig+0x344>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a1a      	ldr	r2, [pc, #104]	; (8009d60 <UART_SetConfig+0x294>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d133      	bne.n	8009d64 <UART_SetConfig+0x298>
 8009cfc:	4b16      	ldr	r3, [pc, #88]	; (8009d58 <UART_SetConfig+0x28c>)
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009d04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d08:	d011      	beq.n	8009d2e <UART_SetConfig+0x262>
 8009d0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d0e:	d817      	bhi.n	8009d40 <UART_SetConfig+0x274>
 8009d10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d14:	d011      	beq.n	8009d3a <UART_SetConfig+0x26e>
 8009d16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d1a:	d811      	bhi.n	8009d40 <UART_SetConfig+0x274>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <UART_SetConfig+0x25c>
 8009d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d24:	d006      	beq.n	8009d34 <UART_SetConfig+0x268>
 8009d26:	e00b      	b.n	8009d40 <UART_SetConfig+0x274>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e070      	b.n	8009e10 <UART_SetConfig+0x344>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	77fb      	strb	r3, [r7, #31]
 8009d32:	e06d      	b.n	8009e10 <UART_SetConfig+0x344>
 8009d34:	2304      	movs	r3, #4
 8009d36:	77fb      	strb	r3, [r7, #31]
 8009d38:	e06a      	b.n	8009e10 <UART_SetConfig+0x344>
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	77fb      	strb	r3, [r7, #31]
 8009d3e:	e067      	b.n	8009e10 <UART_SetConfig+0x344>
 8009d40:	2310      	movs	r3, #16
 8009d42:	77fb      	strb	r3, [r7, #31]
 8009d44:	e064      	b.n	8009e10 <UART_SetConfig+0x344>
 8009d46:	bf00      	nop
 8009d48:	00895440 	.word	0x00895440
 8009d4c:	0800cbec 	.word	0x0800cbec
 8009d50:	efff69f3 	.word	0xefff69f3
 8009d54:	40013800 	.word	0x40013800
 8009d58:	40021000 	.word	0x40021000
 8009d5c:	40004400 	.word	0x40004400
 8009d60:	40004800 	.word	0x40004800
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a86      	ldr	r2, [pc, #536]	; (8009f84 <UART_SetConfig+0x4b8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d124      	bne.n	8009db8 <UART_SetConfig+0x2ec>
 8009d6e:	4b86      	ldr	r3, [pc, #536]	; (8009f88 <UART_SetConfig+0x4bc>)
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d7a:	d011      	beq.n	8009da0 <UART_SetConfig+0x2d4>
 8009d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d80:	d817      	bhi.n	8009db2 <UART_SetConfig+0x2e6>
 8009d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d86:	d011      	beq.n	8009dac <UART_SetConfig+0x2e0>
 8009d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d8c:	d811      	bhi.n	8009db2 <UART_SetConfig+0x2e6>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <UART_SetConfig+0x2ce>
 8009d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d96:	d006      	beq.n	8009da6 <UART_SetConfig+0x2da>
 8009d98:	e00b      	b.n	8009db2 <UART_SetConfig+0x2e6>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	77fb      	strb	r3, [r7, #31]
 8009d9e:	e037      	b.n	8009e10 <UART_SetConfig+0x344>
 8009da0:	2302      	movs	r3, #2
 8009da2:	77fb      	strb	r3, [r7, #31]
 8009da4:	e034      	b.n	8009e10 <UART_SetConfig+0x344>
 8009da6:	2304      	movs	r3, #4
 8009da8:	77fb      	strb	r3, [r7, #31]
 8009daa:	e031      	b.n	8009e10 <UART_SetConfig+0x344>
 8009dac:	2308      	movs	r3, #8
 8009dae:	77fb      	strb	r3, [r7, #31]
 8009db0:	e02e      	b.n	8009e10 <UART_SetConfig+0x344>
 8009db2:	2310      	movs	r3, #16
 8009db4:	77fb      	strb	r3, [r7, #31]
 8009db6:	e02b      	b.n	8009e10 <UART_SetConfig+0x344>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a73      	ldr	r2, [pc, #460]	; (8009f8c <UART_SetConfig+0x4c0>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d124      	bne.n	8009e0c <UART_SetConfig+0x340>
 8009dc2:	4b71      	ldr	r3, [pc, #452]	; (8009f88 <UART_SetConfig+0x4bc>)
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009dca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dce:	d011      	beq.n	8009df4 <UART_SetConfig+0x328>
 8009dd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dd4:	d817      	bhi.n	8009e06 <UART_SetConfig+0x33a>
 8009dd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dda:	d011      	beq.n	8009e00 <UART_SetConfig+0x334>
 8009ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009de0:	d811      	bhi.n	8009e06 <UART_SetConfig+0x33a>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <UART_SetConfig+0x322>
 8009de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dea:	d006      	beq.n	8009dfa <UART_SetConfig+0x32e>
 8009dec:	e00b      	b.n	8009e06 <UART_SetConfig+0x33a>
 8009dee:	2300      	movs	r3, #0
 8009df0:	77fb      	strb	r3, [r7, #31]
 8009df2:	e00d      	b.n	8009e10 <UART_SetConfig+0x344>
 8009df4:	2302      	movs	r3, #2
 8009df6:	77fb      	strb	r3, [r7, #31]
 8009df8:	e00a      	b.n	8009e10 <UART_SetConfig+0x344>
 8009dfa:	2304      	movs	r3, #4
 8009dfc:	77fb      	strb	r3, [r7, #31]
 8009dfe:	e007      	b.n	8009e10 <UART_SetConfig+0x344>
 8009e00:	2308      	movs	r3, #8
 8009e02:	77fb      	strb	r3, [r7, #31]
 8009e04:	e004      	b.n	8009e10 <UART_SetConfig+0x344>
 8009e06:	2310      	movs	r3, #16
 8009e08:	77fb      	strb	r3, [r7, #31]
 8009e0a:	e001      	b.n	8009e10 <UART_SetConfig+0x344>
 8009e0c:	2310      	movs	r3, #16
 8009e0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e18:	d15c      	bne.n	8009ed4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009e1a:	7ffb      	ldrb	r3, [r7, #31]
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d828      	bhi.n	8009e72 <UART_SetConfig+0x3a6>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x35c>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	08009e73 	.word	0x08009e73
 8009e38:	08009e63 	.word	0x08009e63
 8009e3c:	08009e73 	.word	0x08009e73
 8009e40:	08009e73 	.word	0x08009e73
 8009e44:	08009e73 	.word	0x08009e73
 8009e48:	08009e6b 	.word	0x08009e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e4c:	f7fc fe74 	bl	8006b38 <HAL_RCC_GetPCLK1Freq>
 8009e50:	61b8      	str	r0, [r7, #24]
        break;
 8009e52:	e013      	b.n	8009e7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e54:	f7fc fe92 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8009e58:	61b8      	str	r0, [r7, #24]
        break;
 8009e5a:	e00f      	b.n	8009e7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e5c:	4b4c      	ldr	r3, [pc, #304]	; (8009f90 <UART_SetConfig+0x4c4>)
 8009e5e:	61bb      	str	r3, [r7, #24]
        break;
 8009e60:	e00c      	b.n	8009e7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e62:	f7fc fdf3 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8009e66:	61b8      	str	r0, [r7, #24]
        break;
 8009e68:	e008      	b.n	8009e7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e6e:	61bb      	str	r3, [r7, #24]
        break;
 8009e70:	e004      	b.n	8009e7c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	77bb      	strb	r3, [r7, #30]
        break;
 8009e7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d074      	beq.n	8009f6c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	005a      	lsls	r2, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	085b      	lsrs	r3, r3, #1
 8009e8c:	441a      	add	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	d916      	bls.n	8009ece <UART_SetConfig+0x402>
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea6:	d212      	bcs.n	8009ece <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	f023 030f 	bic.w	r3, r3, #15
 8009eb0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	085b      	lsrs	r3, r3, #1
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	89fb      	ldrh	r3, [r7, #14]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	89fa      	ldrh	r2, [r7, #14]
 8009eca:	60da      	str	r2, [r3, #12]
 8009ecc:	e04e      	b.n	8009f6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	77bb      	strb	r3, [r7, #30]
 8009ed2:	e04b      	b.n	8009f6c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ed4:	7ffb      	ldrb	r3, [r7, #31]
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	d827      	bhi.n	8009f2a <UART_SetConfig+0x45e>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <UART_SetConfig+0x414>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f15 	.word	0x08009f15
 8009eec:	08009f2b 	.word	0x08009f2b
 8009ef0:	08009f1b 	.word	0x08009f1b
 8009ef4:	08009f2b 	.word	0x08009f2b
 8009ef8:	08009f2b 	.word	0x08009f2b
 8009efc:	08009f2b 	.word	0x08009f2b
 8009f00:	08009f23 	.word	0x08009f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f04:	f7fc fe18 	bl	8006b38 <HAL_RCC_GetPCLK1Freq>
 8009f08:	61b8      	str	r0, [r7, #24]
        break;
 8009f0a:	e013      	b.n	8009f34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f0c:	f7fc fe36 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8009f10:	61b8      	str	r0, [r7, #24]
        break;
 8009f12:	e00f      	b.n	8009f34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f14:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <UART_SetConfig+0x4c4>)
 8009f16:	61bb      	str	r3, [r7, #24]
        break;
 8009f18:	e00c      	b.n	8009f34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f1a:	f7fc fd97 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8009f1e:	61b8      	str	r0, [r7, #24]
        break;
 8009f20:	e008      	b.n	8009f34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f26:	61bb      	str	r3, [r7, #24]
        break;
 8009f28:	e004      	b.n	8009f34 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	77bb      	strb	r3, [r7, #30]
        break;
 8009f32:	bf00      	nop
    }

    if (pclk != 0U)
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d018      	beq.n	8009f6c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	085a      	lsrs	r2, r3, #1
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	441a      	add	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b0f      	cmp	r3, #15
 8009f54:	d908      	bls.n	8009f68 <UART_SetConfig+0x49c>
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5c:	d204      	bcs.n	8009f68 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	60da      	str	r2, [r3, #12]
 8009f66:	e001      	b.n	8009f6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009f78:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	40004c00 	.word	0x40004c00
 8009f88:	40021000 	.word	0x40021000
 8009f8c:	40005000 	.word	0x40005000
 8009f90:	007a1200 	.word	0x007a1200

08009f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	2bff      	cmp	r3, #255	; 0xff
 8009fa2:	d904      	bls.n	8009fae <UART_AdvFeatureConfig+0x1a>
 8009fa4:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8009fa8:	489d      	ldr	r0, [pc, #628]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 8009faa:	f7f8 f9e6 	bl	800237a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d018      	beq.n	8009fec <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <UART_AdvFeatureConfig+0x42>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fca:	d004      	beq.n	8009fd6 <UART_AdvFeatureConfig+0x42>
 8009fcc:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8009fd0:	4893      	ldr	r0, [pc, #588]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 8009fd2:	f7f8 f9d2 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d018      	beq.n	800a02a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <UART_AdvFeatureConfig+0x80>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a008:	d004      	beq.n	800a014 <UART_AdvFeatureConfig+0x80>
 800a00a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800a00e:	4884      	ldr	r0, [pc, #528]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a010:	f7f8 f9b3 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d018      	beq.n	800a068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <UART_AdvFeatureConfig+0xbe>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a046:	d004      	beq.n	800a052 <UART_AdvFeatureConfig+0xbe>
 800a048:	f640 31db 	movw	r1, #3035	; 0xbdb
 800a04c:	4874      	ldr	r0, [pc, #464]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a04e:	f7f8 f994 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	2b00      	cmp	r3, #0
 800a072:	d018      	beq.n	800a0a6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d009      	beq.n	800a090 <UART_AdvFeatureConfig+0xfc>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a084:	d004      	beq.n	800a090 <UART_AdvFeatureConfig+0xfc>
 800a086:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800a08a:	4865      	ldr	r0, [pc, #404]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a08c:	f7f8 f975 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d018      	beq.n	800a0e4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <UART_AdvFeatureConfig+0x13a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c2:	d004      	beq.n	800a0ce <UART_AdvFeatureConfig+0x13a>
 800a0c4:	f640 31e9 	movw	r1, #3049	; 0xbe9
 800a0c8:	4855      	ldr	r0, [pc, #340]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a0ca:	f7f8 f956 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d018      	beq.n	800a122 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d009      	beq.n	800a10c <UART_AdvFeatureConfig+0x178>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a100:	d004      	beq.n	800a10c <UART_AdvFeatureConfig+0x178>
 800a102:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 800a106:	4846      	ldr	r0, [pc, #280]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a108:	f7f8 f937 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d054      	beq.n	800a1d8 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a3c      	ldr	r2, [pc, #240]	; (800a224 <UART_AdvFeatureConfig+0x290>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d00e      	beq.n	800a156 <UART_AdvFeatureConfig+0x1c2>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a3a      	ldr	r2, [pc, #232]	; (800a228 <UART_AdvFeatureConfig+0x294>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d009      	beq.n	800a156 <UART_AdvFeatureConfig+0x1c2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a39      	ldr	r2, [pc, #228]	; (800a22c <UART_AdvFeatureConfig+0x298>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d004      	beq.n	800a156 <UART_AdvFeatureConfig+0x1c2>
 800a14c:	f640 31f7 	movw	r1, #3063	; 0xbf7
 800a150:	4833      	ldr	r0, [pc, #204]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a152:	f7f8 f912 	bl	800237a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <UART_AdvFeatureConfig+0x1de>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a166:	d004      	beq.n	800a172 <UART_AdvFeatureConfig+0x1de>
 800a168:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800a16c:	482c      	ldr	r0, [pc, #176]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a16e:	f7f8 f904 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a190:	d122      	bne.n	800a1d8 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a196:	2b00      	cmp	r3, #0
 800a198:	d013      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x22e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1a2:	d00e      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x22e>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1ac:	d009      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x22e>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1b6:	d004      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x22e>
 800a1b8:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800a1bc:	4818      	ldr	r0, [pc, #96]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a1be:	f7f8 f8dc 	bl	800237a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d018      	beq.n	800a216 <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <UART_AdvFeatureConfig+0x26c>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1f4:	d004      	beq.n	800a200 <UART_AdvFeatureConfig+0x26c>
 800a1f6:	f640 4105 	movw	r1, #3077	; 0xc05
 800a1fa:	4809      	ldr	r0, [pc, #36]	; (800a220 <UART_AdvFeatureConfig+0x28c>)
 800a1fc:	f7f8 f8bd 	bl	800237a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
  }
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	0800cbec 	.word	0x0800cbec
 800a224:	40013800 	.word	0x40013800
 800a228:	40004400 	.word	0x40004400
 800a22c:	40004800 	.word	0x40004800

0800a230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a240:	f7f8 fc9a 	bl	8002b78 <HAL_GetTick>
 800a244:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0308 	and.w	r3, r3, #8
 800a250:	2b08      	cmp	r3, #8
 800a252:	d10e      	bne.n	800a272 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f82d 	bl	800a2c2 <UART_WaitOnFlagUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e023      	b.n	800a2ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d10e      	bne.n	800a29e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f817 	bl	800a2c2 <UART_WaitOnFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e00d      	b.n	800a2ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b09c      	sub	sp, #112	; 0x70
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2d2:	e0a5      	b.n	800a420 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	f000 80a1 	beq.w	800a420 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2de:	f7f8 fc4b 	bl	8002b78 <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d302      	bcc.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d13e      	bne.n	800a372 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a308:	667b      	str	r3, [r7, #100]	; 0x64
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a312:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a314:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e6      	bne.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	663b      	str	r3, [r7, #96]	; 0x60
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a346:	64ba      	str	r2, [r7, #72]	; 0x48
 800a348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a34c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e5      	bne.n	800a326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2220      	movs	r2, #32
 800a35e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2220      	movs	r2, #32
 800a364:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e067      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d04f      	beq.n	800a420 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a38a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a38e:	d147      	bne.n	800a420 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e6      	bne.n	800a39a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	613b      	str	r3, [r7, #16]
   return(result);
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3ec:	623a      	str	r2, [r7, #32]
 800a3ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	69f9      	ldr	r1, [r7, #28]
 800a3f2:	6a3a      	ldr	r2, [r7, #32]
 800a3f4:	e841 2300 	strex	r3, r2, [r1]
 800a3f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e5      	bne.n	800a3cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2220      	movs	r2, #32
 800a404:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2220      	movs	r2, #32
 800a40a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e010      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69da      	ldr	r2, [r3, #28]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	f43f af4a 	beq.w	800a2d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3770      	adds	r7, #112	; 0x70
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b091      	sub	sp, #68	; 0x44
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	88fa      	ldrh	r2, [r7, #6]
 800a464:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	88fa      	ldrh	r2, [r7, #6]
 800a46c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47e:	d10e      	bne.n	800a49e <UART_Start_Receive_IT+0x52>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d105      	bne.n	800a494 <UART_Start_Receive_IT+0x48>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a48e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a492:	e02d      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	22ff      	movs	r2, #255	; 0xff
 800a498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a49c:	e028      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10d      	bne.n	800a4c2 <UART_Start_Receive_IT+0x76>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d104      	bne.n	800a4b8 <UART_Start_Receive_IT+0x6c>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	22ff      	movs	r2, #255	; 0xff
 800a4b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4b6:	e01b      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	227f      	movs	r2, #127	; 0x7f
 800a4bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4c0:	e016      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4ca:	d10d      	bne.n	800a4e8 <UART_Start_Receive_IT+0x9c>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <UART_Start_Receive_IT+0x92>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	227f      	movs	r2, #127	; 0x7f
 800a4d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4dc:	e008      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	223f      	movs	r2, #63	; 0x3f
 800a4e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4e6:	e003      	b.n	800a4f0 <UART_Start_Receive_IT+0xa4>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2222      	movs	r2, #34	; 0x22
 800a4fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3308      	adds	r3, #8
 800a51c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a51e:	637a      	str	r2, [r7, #52]	; 0x34
 800a520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53a:	d107      	bne.n	800a54c <UART_Start_Receive_IT+0x100>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d103      	bne.n	800a54c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4a15      	ldr	r2, [pc, #84]	; (800a59c <UART_Start_Receive_IT+0x150>)
 800a548:	665a      	str	r2, [r3, #100]	; 0x64
 800a54a:	e002      	b.n	800a552 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4a14      	ldr	r2, [pc, #80]	; (800a5a0 <UART_Start_Receive_IT+0x154>)
 800a550:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	e853 3f00 	ldrex	r3, [r3]
 800a566:	613b      	str	r3, [r7, #16]
   return(result);
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a56e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	623b      	str	r3, [r7, #32]
 800a57a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	69f9      	ldr	r1, [r7, #28]
 800a57e:	6a3a      	ldr	r2, [r7, #32]
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	61bb      	str	r3, [r7, #24]
   return(result);
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e6      	bne.n	800a55a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3744      	adds	r7, #68	; 0x44
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	0800a9bf 	.word	0x0800a9bf
 800a5a0:	0800a863 	.word	0x0800a863

0800a5a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b095      	sub	sp, #84	; 0x54
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	e853 3f00 	ldrex	r3, [r3]
 800a5b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a5cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e6      	bne.n	800a5ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	f023 0301 	bic.w	r3, r3, #1
 800a5f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e5      	bne.n	800a5de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a616:	2b01      	cmp	r3, #1
 800a618:	d118      	bne.n	800a64c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	60bb      	str	r3, [r7, #8]
   return(result);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f023 0310 	bic.w	r3, r3, #16
 800a62e:	647b      	str	r3, [r7, #68]	; 0x44
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6979      	ldr	r1, [r7, #20]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	613b      	str	r3, [r7, #16]
   return(result);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2220      	movs	r2, #32
 800a650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a65e:	bf00      	nop
 800a660:	3754      	adds	r7, #84	; 0x54
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7ff fa09 	bl	8009aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a696:	b480      	push	{r7}
 800a698:	b08f      	sub	sp, #60	; 0x3c
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a2:	2b21      	cmp	r3, #33	; 0x21
 800a6a4:	d14d      	bne.n	800a742 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d132      	bne.n	800a718 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e6      	bne.n	800a6b2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	61bb      	str	r3, [r7, #24]
 800a704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6979      	ldr	r1, [r7, #20]
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	613b      	str	r3, [r7, #16]
   return(result);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e6      	bne.n	800a6e4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a716:	e014      	b.n	800a742 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a71c:	781a      	ldrb	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	b292      	uxth	r2, r2
 800a724:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a742:	bf00      	nop
 800a744:	373c      	adds	r7, #60	; 0x3c
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a74e:	b480      	push	{r7}
 800a750:	b091      	sub	sp, #68	; 0x44
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a75a:	2b21      	cmp	r3, #33	; 0x21
 800a75c:	d151      	bne.n	800a802 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a764:	b29b      	uxth	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d132      	bne.n	800a7d0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	623b      	str	r3, [r7, #32]
   return(result);
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a77e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	633b      	str	r3, [r7, #48]	; 0x30
 800a78a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a78e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e6      	bne.n	800a76a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	69b9      	ldr	r1, [r7, #24]
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e6      	bne.n	800a79c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a7ce:	e018      	b.n	800a802 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	881a      	ldrh	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ea:	1c9a      	adds	r2, r3, #2
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a802:	bf00      	nop
 800a804:	3744      	adds	r7, #68	; 0x44
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b088      	sub	sp, #32
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	60bb      	str	r3, [r7, #8]
   return(result);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	61bb      	str	r3, [r7, #24]
 800a836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	6979      	ldr	r1, [r7, #20]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	613b      	str	r3, [r7, #16]
   return(result);
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e6      	bne.n	800a816 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2220      	movs	r2, #32
 800a84c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7f6 fecb 	bl	80015f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85a:	bf00      	nop
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b096      	sub	sp, #88	; 0x58
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a870:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a878:	2b22      	cmp	r3, #34	; 0x22
 800a87a:	f040 8094 	bne.w	800a9a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a884:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a888:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a88c:	b2d9      	uxtb	r1, r3
 800a88e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a892:	b2da      	uxtb	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a898:	400a      	ands	r2, r1
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d177      	bne.n	800a9b6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8da:	653b      	str	r3, [r7, #80]	; 0x50
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a8e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e6      	bne.n	800a8c6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	623b      	str	r3, [r7, #32]
   return(result);
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a918:	633a      	str	r2, [r7, #48]	; 0x30
 800a91a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e5      	bne.n	800a8f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2220      	movs	r2, #32
 800a930:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d12e      	bne.n	800a99e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	60fb      	str	r3, [r7, #12]
   return(result);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0310 	bic.w	r3, r3, #16
 800a95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	69b9      	ldr	r1, [r7, #24]
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	617b      	str	r3, [r7, #20]
   return(result);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f003 0310 	and.w	r3, r3, #16
 800a982:	2b10      	cmp	r3, #16
 800a984:	d103      	bne.n	800a98e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2210      	movs	r2, #16
 800a98c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff f88c 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a99c:	e00b      	b.n	800a9b6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7f6 fe5c 	bl	800165c <HAL_UART_RxCpltCallback>
}
 800a9a4:	e007      	b.n	800a9b6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	699a      	ldr	r2, [r3, #24]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f042 0208 	orr.w	r2, r2, #8
 800a9b4:	619a      	str	r2, [r3, #24]
}
 800a9b6:	bf00      	nop
 800a9b8:	3758      	adds	r7, #88	; 0x58
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b096      	sub	sp, #88	; 0x58
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d4:	2b22      	cmp	r3, #34	; 0x22
 800a9d6:	f040 8094 	bne.w	800ab02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a9ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fe:	1c9a      	adds	r2, r3, #2
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d177      	bne.n	800ab12 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa40:	643b      	str	r3, [r7, #64]	; 0x40
 800aa42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa48:	e841 2300 	strex	r3, r2, [r1]
 800aa4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e6      	bne.n	800aa22 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3308      	adds	r3, #8
 800aa5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f023 0301 	bic.w	r3, r3, #1
 800aa6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	3308      	adds	r3, #8
 800aa72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e5      	bne.n	800aa54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d12e      	bne.n	800aafa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	60bb      	str	r3, [r7, #8]
   return(result);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f023 0310 	bic.w	r3, r3, #16
 800aab6:	647b      	str	r3, [r7, #68]	; 0x44
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	461a      	mov	r2, r3
 800aabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6979      	ldr	r1, [r7, #20]
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	613b      	str	r3, [r7, #16]
   return(result);
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e6      	bne.n	800aaa2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 0310 	and.w	r3, r3, #16
 800aade:	2b10      	cmp	r3, #16
 800aae0:	d103      	bne.n	800aaea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2210      	movs	r2, #16
 800aae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7fe ffde 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaf8:	e00b      	b.n	800ab12 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7f6 fdae 	bl	800165c <HAL_UART_RxCpltCallback>
}
 800ab00:	e007      	b.n	800ab12 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f042 0208 	orr.w	r2, r2, #8
 800ab10:	619a      	str	r2, [r3, #24]
}
 800ab12:	bf00      	nop
 800ab14:	3758      	adds	r7, #88	; 0x58
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab22:	bf00      	nop
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <__errno>:
 800ab30:	4b01      	ldr	r3, [pc, #4]	; (800ab38 <__errno+0x8>)
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	20000088 	.word	0x20000088

0800ab3c <__libc_init_array>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	4d0d      	ldr	r5, [pc, #52]	; (800ab74 <__libc_init_array+0x38>)
 800ab40:	4c0d      	ldr	r4, [pc, #52]	; (800ab78 <__libc_init_array+0x3c>)
 800ab42:	1b64      	subs	r4, r4, r5
 800ab44:	10a4      	asrs	r4, r4, #2
 800ab46:	2600      	movs	r6, #0
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	d109      	bne.n	800ab60 <__libc_init_array+0x24>
 800ab4c:	4d0b      	ldr	r5, [pc, #44]	; (800ab7c <__libc_init_array+0x40>)
 800ab4e:	4c0c      	ldr	r4, [pc, #48]	; (800ab80 <__libc_init_array+0x44>)
 800ab50:	f001 fe0c 	bl	800c76c <_init>
 800ab54:	1b64      	subs	r4, r4, r5
 800ab56:	10a4      	asrs	r4, r4, #2
 800ab58:	2600      	movs	r6, #0
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	d105      	bne.n	800ab6a <__libc_init_array+0x2e>
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab64:	4798      	blx	r3
 800ab66:	3601      	adds	r6, #1
 800ab68:	e7ee      	b.n	800ab48 <__libc_init_array+0xc>
 800ab6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6e:	4798      	blx	r3
 800ab70:	3601      	adds	r6, #1
 800ab72:	e7f2      	b.n	800ab5a <__libc_init_array+0x1e>
 800ab74:	0800ce20 	.word	0x0800ce20
 800ab78:	0800ce20 	.word	0x0800ce20
 800ab7c:	0800ce20 	.word	0x0800ce20
 800ab80:	0800ce24 	.word	0x0800ce24

0800ab84 <memset>:
 800ab84:	4402      	add	r2, r0
 800ab86:	4603      	mov	r3, r0
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d100      	bne.n	800ab8e <memset+0xa>
 800ab8c:	4770      	bx	lr
 800ab8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab92:	e7f9      	b.n	800ab88 <memset+0x4>

0800ab94 <iprintf>:
 800ab94:	b40f      	push	{r0, r1, r2, r3}
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <iprintf+0x2c>)
 800ab98:	b513      	push	{r0, r1, r4, lr}
 800ab9a:	681c      	ldr	r4, [r3, #0]
 800ab9c:	b124      	cbz	r4, 800aba8 <iprintf+0x14>
 800ab9e:	69a3      	ldr	r3, [r4, #24]
 800aba0:	b913      	cbnz	r3, 800aba8 <iprintf+0x14>
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f91a 	bl	800addc <__sinit>
 800aba8:	ab05      	add	r3, sp, #20
 800abaa:	9a04      	ldr	r2, [sp, #16]
 800abac:	68a1      	ldr	r1, [r4, #8]
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fd77 	bl	800b6a4 <_vfiprintf_r>
 800abb6:	b002      	add	sp, #8
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	b004      	add	sp, #16
 800abbe:	4770      	bx	lr
 800abc0:	20000088 	.word	0x20000088

0800abc4 <siscanf>:
 800abc4:	b40e      	push	{r1, r2, r3}
 800abc6:	b510      	push	{r4, lr}
 800abc8:	b09f      	sub	sp, #124	; 0x7c
 800abca:	ac21      	add	r4, sp, #132	; 0x84
 800abcc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800abd0:	f854 2b04 	ldr.w	r2, [r4], #4
 800abd4:	9201      	str	r2, [sp, #4]
 800abd6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800abda:	9004      	str	r0, [sp, #16]
 800abdc:	9008      	str	r0, [sp, #32]
 800abde:	f7f5 fb09 	bl	80001f4 <strlen>
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <siscanf+0x50>)
 800abe4:	9005      	str	r0, [sp, #20]
 800abe6:	9009      	str	r0, [sp, #36]	; 0x24
 800abe8:	930d      	str	r3, [sp, #52]	; 0x34
 800abea:	480b      	ldr	r0, [pc, #44]	; (800ac18 <siscanf+0x54>)
 800abec:	9a01      	ldr	r2, [sp, #4]
 800abee:	6800      	ldr	r0, [r0, #0]
 800abf0:	9403      	str	r4, [sp, #12]
 800abf2:	2300      	movs	r3, #0
 800abf4:	9311      	str	r3, [sp, #68]	; 0x44
 800abf6:	9316      	str	r3, [sp, #88]	; 0x58
 800abf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4623      	mov	r3, r4
 800ac04:	f000 fbac 	bl	800b360 <__ssvfiscanf_r>
 800ac08:	b01f      	add	sp, #124	; 0x7c
 800ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac0e:	b003      	add	sp, #12
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	0800ac3f 	.word	0x0800ac3f
 800ac18:	20000088 	.word	0x20000088

0800ac1c <__sread>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac24:	f001 f94e 	bl	800bec4 <_read_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	bfab      	itete	ge
 800ac2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac30:	181b      	addge	r3, r3, r0
 800ac32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac36:	bfac      	ite	ge
 800ac38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac3a:	81a3      	strhlt	r3, [r4, #12]
 800ac3c:	bd10      	pop	{r4, pc}

0800ac3e <__seofread>:
 800ac3e:	2000      	movs	r0, #0
 800ac40:	4770      	bx	lr

0800ac42 <__swrite>:
 800ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	461f      	mov	r7, r3
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	05db      	lsls	r3, r3, #23
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	4616      	mov	r6, r2
 800ac52:	d505      	bpl.n	800ac60 <__swrite+0x1e>
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	2302      	movs	r3, #2
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f000 f95e 	bl	800af1c <_lseek_r>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	4628      	mov	r0, r5
 800ac72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	f000 b837 	b.w	800ace8 <_write_r>

0800ac7a <__sseek>:
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac82:	f000 f94b 	bl	800af1c <_lseek_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	bf15      	itete	ne
 800ac8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac96:	81a3      	strheq	r3, [r4, #12]
 800ac98:	bf18      	it	ne
 800ac9a:	81a3      	strhne	r3, [r4, #12]
 800ac9c:	bd10      	pop	{r4, pc}

0800ac9e <__sclose>:
 800ac9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca2:	f000 b833 	b.w	800ad0c <_close_r>
	...

0800aca8 <_vsiprintf_r>:
 800aca8:	b500      	push	{lr}
 800acaa:	b09b      	sub	sp, #108	; 0x6c
 800acac:	9100      	str	r1, [sp, #0]
 800acae:	9104      	str	r1, [sp, #16]
 800acb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acb4:	9105      	str	r1, [sp, #20]
 800acb6:	9102      	str	r1, [sp, #8]
 800acb8:	4905      	ldr	r1, [pc, #20]	; (800acd0 <_vsiprintf_r+0x28>)
 800acba:	9103      	str	r1, [sp, #12]
 800acbc:	4669      	mov	r1, sp
 800acbe:	f000 f9f5 	bl	800b0ac <_svfiprintf_r>
 800acc2:	9b00      	ldr	r3, [sp, #0]
 800acc4:	2200      	movs	r2, #0
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	b01b      	add	sp, #108	; 0x6c
 800acca:	f85d fb04 	ldr.w	pc, [sp], #4
 800acce:	bf00      	nop
 800acd0:	ffff0208 	.word	0xffff0208

0800acd4 <vsiprintf>:
 800acd4:	4613      	mov	r3, r2
 800acd6:	460a      	mov	r2, r1
 800acd8:	4601      	mov	r1, r0
 800acda:	4802      	ldr	r0, [pc, #8]	; (800ace4 <vsiprintf+0x10>)
 800acdc:	6800      	ldr	r0, [r0, #0]
 800acde:	f7ff bfe3 	b.w	800aca8 <_vsiprintf_r>
 800ace2:	bf00      	nop
 800ace4:	20000088 	.word	0x20000088

0800ace8 <_write_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	; (800ad08 <_write_r+0x20>)
 800acec:	4604      	mov	r4, r0
 800acee:	4608      	mov	r0, r1
 800acf0:	4611      	mov	r1, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f7f7 fcf7 	bl	80026ea <_write>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_write_r+0x1e>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_write_r+0x1e>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20000b20 	.word	0x20000b20

0800ad0c <_close_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	; (800ad28 <_close_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f7 fd03 	bl	8002722 <_close>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_close_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_close_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	20000b20 	.word	0x20000b20

0800ad2c <std>:
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	e9c0 3300 	strd	r3, r3, [r0]
 800ad36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3a:	6083      	str	r3, [r0, #8]
 800ad3c:	8181      	strh	r1, [r0, #12]
 800ad3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad40:	81c2      	strh	r2, [r0, #14]
 800ad42:	6183      	str	r3, [r0, #24]
 800ad44:	4619      	mov	r1, r3
 800ad46:	2208      	movs	r2, #8
 800ad48:	305c      	adds	r0, #92	; 0x5c
 800ad4a:	f7ff ff1b 	bl	800ab84 <memset>
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <std+0x38>)
 800ad50:	6263      	str	r3, [r4, #36]	; 0x24
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <std+0x3c>)
 800ad54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <std+0x40>)
 800ad58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x44>)
 800ad5c:	6224      	str	r4, [r4, #32]
 800ad5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	bf00      	nop
 800ad64:	0800ac1d 	.word	0x0800ac1d
 800ad68:	0800ac43 	.word	0x0800ac43
 800ad6c:	0800ac7b 	.word	0x0800ac7b
 800ad70:	0800ac9f 	.word	0x0800ac9f

0800ad74 <_cleanup_r>:
 800ad74:	4901      	ldr	r1, [pc, #4]	; (800ad7c <_cleanup_r+0x8>)
 800ad76:	f000 b8af 	b.w	800aed8 <_fwalk_reent>
 800ad7a:	bf00      	nop
 800ad7c:	0800c485 	.word	0x0800c485

0800ad80 <__sfmoreglue>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	1e4a      	subs	r2, r1, #1
 800ad84:	2568      	movs	r5, #104	; 0x68
 800ad86:	4355      	muls	r5, r2
 800ad88:	460e      	mov	r6, r1
 800ad8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad8e:	f000 f8d7 	bl	800af40 <_malloc_r>
 800ad92:	4604      	mov	r4, r0
 800ad94:	b140      	cbz	r0, 800ada8 <__sfmoreglue+0x28>
 800ad96:	2100      	movs	r1, #0
 800ad98:	e9c0 1600 	strd	r1, r6, [r0]
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	60a0      	str	r0, [r4, #8]
 800ada0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ada4:	f7ff feee 	bl	800ab84 <memset>
 800ada8:	4620      	mov	r0, r4
 800adaa:	bd70      	pop	{r4, r5, r6, pc}

0800adac <__sfp_lock_acquire>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__sfp_lock_acquire+0x8>)
 800adae:	f000 b8b3 	b.w	800af18 <__retarget_lock_acquire_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000b1c 	.word	0x20000b1c

0800adb8 <__sfp_lock_release>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__sfp_lock_release+0x8>)
 800adba:	f000 b8ae 	b.w	800af1a <__retarget_lock_release_recursive>
 800adbe:	bf00      	nop
 800adc0:	20000b1c 	.word	0x20000b1c

0800adc4 <__sinit_lock_acquire>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__sinit_lock_acquire+0x8>)
 800adc6:	f000 b8a7 	b.w	800af18 <__retarget_lock_acquire_recursive>
 800adca:	bf00      	nop
 800adcc:	20000b17 	.word	0x20000b17

0800add0 <__sinit_lock_release>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__sinit_lock_release+0x8>)
 800add2:	f000 b8a2 	b.w	800af1a <__retarget_lock_release_recursive>
 800add6:	bf00      	nop
 800add8:	20000b17 	.word	0x20000b17

0800addc <__sinit>:
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	f7ff fff0 	bl	800adc4 <__sinit_lock_acquire>
 800ade4:	69a3      	ldr	r3, [r4, #24]
 800ade6:	b11b      	cbz	r3, 800adf0 <__sinit+0x14>
 800ade8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adec:	f7ff bff0 	b.w	800add0 <__sinit_lock_release>
 800adf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adf4:	6523      	str	r3, [r4, #80]	; 0x50
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <__sinit+0x68>)
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <__sinit+0x6c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800adfe:	42a3      	cmp	r3, r4
 800ae00:	bf04      	itt	eq
 800ae02:	2301      	moveq	r3, #1
 800ae04:	61a3      	streq	r3, [r4, #24]
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 f820 	bl	800ae4c <__sfp>
 800ae0c:	6060      	str	r0, [r4, #4]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 f81c 	bl	800ae4c <__sfp>
 800ae14:	60a0      	str	r0, [r4, #8]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f818 	bl	800ae4c <__sfp>
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	60e0      	str	r0, [r4, #12]
 800ae20:	2104      	movs	r1, #4
 800ae22:	6860      	ldr	r0, [r4, #4]
 800ae24:	f7ff ff82 	bl	800ad2c <std>
 800ae28:	68a0      	ldr	r0, [r4, #8]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	2109      	movs	r1, #9
 800ae2e:	f7ff ff7d 	bl	800ad2c <std>
 800ae32:	68e0      	ldr	r0, [r4, #12]
 800ae34:	2202      	movs	r2, #2
 800ae36:	2112      	movs	r1, #18
 800ae38:	f7ff ff78 	bl	800ad2c <std>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	61a3      	str	r3, [r4, #24]
 800ae40:	e7d2      	b.n	800ade8 <__sinit+0xc>
 800ae42:	bf00      	nop
 800ae44:	0800cc6c 	.word	0x0800cc6c
 800ae48:	0800ad75 	.word	0x0800ad75

0800ae4c <__sfp>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	4607      	mov	r7, r0
 800ae50:	f7ff ffac 	bl	800adac <__sfp_lock_acquire>
 800ae54:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <__sfp+0x84>)
 800ae56:	681e      	ldr	r6, [r3, #0]
 800ae58:	69b3      	ldr	r3, [r6, #24]
 800ae5a:	b913      	cbnz	r3, 800ae62 <__sfp+0x16>
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffbd 	bl	800addc <__sinit>
 800ae62:	3648      	adds	r6, #72	; 0x48
 800ae64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	d503      	bpl.n	800ae74 <__sfp+0x28>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	b30b      	cbz	r3, 800aeb4 <__sfp+0x68>
 800ae70:	6836      	ldr	r6, [r6, #0]
 800ae72:	e7f7      	b.n	800ae64 <__sfp+0x18>
 800ae74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae78:	b9d5      	cbnz	r5, 800aeb0 <__sfp+0x64>
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <__sfp+0x88>)
 800ae7c:	60e3      	str	r3, [r4, #12]
 800ae7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae82:	6665      	str	r5, [r4, #100]	; 0x64
 800ae84:	f000 f847 	bl	800af16 <__retarget_lock_init_recursive>
 800ae88:	f7ff ff96 	bl	800adb8 <__sfp_lock_release>
 800ae8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae94:	6025      	str	r5, [r4, #0]
 800ae96:	61a5      	str	r5, [r4, #24]
 800ae98:	2208      	movs	r2, #8
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aea0:	f7ff fe70 	bl	800ab84 <memset>
 800aea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeac:	4620      	mov	r0, r4
 800aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb0:	3468      	adds	r4, #104	; 0x68
 800aeb2:	e7d9      	b.n	800ae68 <__sfp+0x1c>
 800aeb4:	2104      	movs	r1, #4
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f7ff ff62 	bl	800ad80 <__sfmoreglue>
 800aebc:	4604      	mov	r4, r0
 800aebe:	6030      	str	r0, [r6, #0]
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1d5      	bne.n	800ae70 <__sfp+0x24>
 800aec4:	f7ff ff78 	bl	800adb8 <__sfp_lock_release>
 800aec8:	230c      	movs	r3, #12
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	e7ee      	b.n	800aeac <__sfp+0x60>
 800aece:	bf00      	nop
 800aed0:	0800cc6c 	.word	0x0800cc6c
 800aed4:	ffff0001 	.word	0xffff0001

0800aed8 <_fwalk_reent>:
 800aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aedc:	4606      	mov	r6, r0
 800aede:	4688      	mov	r8, r1
 800aee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aee4:	2700      	movs	r7, #0
 800aee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeea:	f1b9 0901 	subs.w	r9, r9, #1
 800aeee:	d505      	bpl.n	800aefc <_fwalk_reent+0x24>
 800aef0:	6824      	ldr	r4, [r4, #0]
 800aef2:	2c00      	cmp	r4, #0
 800aef4:	d1f7      	bne.n	800aee6 <_fwalk_reent+0xe>
 800aef6:	4638      	mov	r0, r7
 800aef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefc:	89ab      	ldrh	r3, [r5, #12]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d907      	bls.n	800af12 <_fwalk_reent+0x3a>
 800af02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af06:	3301      	adds	r3, #1
 800af08:	d003      	beq.n	800af12 <_fwalk_reent+0x3a>
 800af0a:	4629      	mov	r1, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	47c0      	blx	r8
 800af10:	4307      	orrs	r7, r0
 800af12:	3568      	adds	r5, #104	; 0x68
 800af14:	e7e9      	b.n	800aeea <_fwalk_reent+0x12>

0800af16 <__retarget_lock_init_recursive>:
 800af16:	4770      	bx	lr

0800af18 <__retarget_lock_acquire_recursive>:
 800af18:	4770      	bx	lr

0800af1a <__retarget_lock_release_recursive>:
 800af1a:	4770      	bx	lr

0800af1c <_lseek_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d07      	ldr	r5, [pc, #28]	; (800af3c <_lseek_r+0x20>)
 800af20:	4604      	mov	r4, r0
 800af22:	4608      	mov	r0, r1
 800af24:	4611      	mov	r1, r2
 800af26:	2200      	movs	r2, #0
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f7f7 fc20 	bl	8002770 <_lseek>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_lseek_r+0x1e>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_lseek_r+0x1e>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20000b20 	.word	0x20000b20

0800af40 <_malloc_r>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	1ccd      	adds	r5, r1, #3
 800af44:	f025 0503 	bic.w	r5, r5, #3
 800af48:	3508      	adds	r5, #8
 800af4a:	2d0c      	cmp	r5, #12
 800af4c:	bf38      	it	cc
 800af4e:	250c      	movcc	r5, #12
 800af50:	2d00      	cmp	r5, #0
 800af52:	4606      	mov	r6, r0
 800af54:	db01      	blt.n	800af5a <_malloc_r+0x1a>
 800af56:	42a9      	cmp	r1, r5
 800af58:	d903      	bls.n	800af62 <_malloc_r+0x22>
 800af5a:	230c      	movs	r3, #12
 800af5c:	6033      	str	r3, [r6, #0]
 800af5e:	2000      	movs	r0, #0
 800af60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af62:	f001 fb57 	bl	800c614 <__malloc_lock>
 800af66:	4921      	ldr	r1, [pc, #132]	; (800afec <_malloc_r+0xac>)
 800af68:	680a      	ldr	r2, [r1, #0]
 800af6a:	4614      	mov	r4, r2
 800af6c:	b99c      	cbnz	r4, 800af96 <_malloc_r+0x56>
 800af6e:	4f20      	ldr	r7, [pc, #128]	; (800aff0 <_malloc_r+0xb0>)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	b923      	cbnz	r3, 800af7e <_malloc_r+0x3e>
 800af74:	4621      	mov	r1, r4
 800af76:	4630      	mov	r0, r6
 800af78:	f000 ffb6 	bl	800bee8 <_sbrk_r>
 800af7c:	6038      	str	r0, [r7, #0]
 800af7e:	4629      	mov	r1, r5
 800af80:	4630      	mov	r0, r6
 800af82:	f000 ffb1 	bl	800bee8 <_sbrk_r>
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	d123      	bne.n	800afd2 <_malloc_r+0x92>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	4630      	mov	r0, r6
 800af90:	f001 fb46 	bl	800c620 <__malloc_unlock>
 800af94:	e7e3      	b.n	800af5e <_malloc_r+0x1e>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	1b5b      	subs	r3, r3, r5
 800af9a:	d417      	bmi.n	800afcc <_malloc_r+0x8c>
 800af9c:	2b0b      	cmp	r3, #11
 800af9e:	d903      	bls.n	800afa8 <_malloc_r+0x68>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	441c      	add	r4, r3
 800afa4:	6025      	str	r5, [r4, #0]
 800afa6:	e004      	b.n	800afb2 <_malloc_r+0x72>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	42a2      	cmp	r2, r4
 800afac:	bf0c      	ite	eq
 800afae:	600b      	streq	r3, [r1, #0]
 800afb0:	6053      	strne	r3, [r2, #4]
 800afb2:	4630      	mov	r0, r6
 800afb4:	f001 fb34 	bl	800c620 <__malloc_unlock>
 800afb8:	f104 000b 	add.w	r0, r4, #11
 800afbc:	1d23      	adds	r3, r4, #4
 800afbe:	f020 0007 	bic.w	r0, r0, #7
 800afc2:	1ac2      	subs	r2, r0, r3
 800afc4:	d0cc      	beq.n	800af60 <_malloc_r+0x20>
 800afc6:	1a1b      	subs	r3, r3, r0
 800afc8:	50a3      	str	r3, [r4, r2]
 800afca:	e7c9      	b.n	800af60 <_malloc_r+0x20>
 800afcc:	4622      	mov	r2, r4
 800afce:	6864      	ldr	r4, [r4, #4]
 800afd0:	e7cc      	b.n	800af6c <_malloc_r+0x2c>
 800afd2:	1cc4      	adds	r4, r0, #3
 800afd4:	f024 0403 	bic.w	r4, r4, #3
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d0e3      	beq.n	800afa4 <_malloc_r+0x64>
 800afdc:	1a21      	subs	r1, r4, r0
 800afde:	4630      	mov	r0, r6
 800afe0:	f000 ff82 	bl	800bee8 <_sbrk_r>
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1dd      	bne.n	800afa4 <_malloc_r+0x64>
 800afe8:	e7cf      	b.n	800af8a <_malloc_r+0x4a>
 800afea:	bf00      	nop
 800afec:	20000160 	.word	0x20000160
 800aff0:	20000164 	.word	0x20000164

0800aff4 <__ssputs_r>:
 800aff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	688e      	ldr	r6, [r1, #8]
 800affa:	429e      	cmp	r6, r3
 800affc:	4682      	mov	sl, r0
 800affe:	460c      	mov	r4, r1
 800b000:	4690      	mov	r8, r2
 800b002:	461f      	mov	r7, r3
 800b004:	d838      	bhi.n	800b078 <__ssputs_r+0x84>
 800b006:	898a      	ldrh	r2, [r1, #12]
 800b008:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b00c:	d032      	beq.n	800b074 <__ssputs_r+0x80>
 800b00e:	6825      	ldr	r5, [r4, #0]
 800b010:	6909      	ldr	r1, [r1, #16]
 800b012:	eba5 0901 	sub.w	r9, r5, r1
 800b016:	6965      	ldr	r5, [r4, #20]
 800b018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b01c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b020:	3301      	adds	r3, #1
 800b022:	444b      	add	r3, r9
 800b024:	106d      	asrs	r5, r5, #1
 800b026:	429d      	cmp	r5, r3
 800b028:	bf38      	it	cc
 800b02a:	461d      	movcc	r5, r3
 800b02c:	0553      	lsls	r3, r2, #21
 800b02e:	d531      	bpl.n	800b094 <__ssputs_r+0xa0>
 800b030:	4629      	mov	r1, r5
 800b032:	f7ff ff85 	bl	800af40 <_malloc_r>
 800b036:	4606      	mov	r6, r0
 800b038:	b950      	cbnz	r0, 800b050 <__ssputs_r+0x5c>
 800b03a:	230c      	movs	r3, #12
 800b03c:	f8ca 3000 	str.w	r3, [sl]
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	6921      	ldr	r1, [r4, #16]
 800b052:	464a      	mov	r2, r9
 800b054:	f001 fab6 	bl	800c5c4 <memcpy>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	6126      	str	r6, [r4, #16]
 800b066:	6165      	str	r5, [r4, #20]
 800b068:	444e      	add	r6, r9
 800b06a:	eba5 0509 	sub.w	r5, r5, r9
 800b06e:	6026      	str	r6, [r4, #0]
 800b070:	60a5      	str	r5, [r4, #8]
 800b072:	463e      	mov	r6, r7
 800b074:	42be      	cmp	r6, r7
 800b076:	d900      	bls.n	800b07a <__ssputs_r+0x86>
 800b078:	463e      	mov	r6, r7
 800b07a:	4632      	mov	r2, r6
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	4641      	mov	r1, r8
 800b080:	f001 faae 	bl	800c5e0 <memmove>
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	6822      	ldr	r2, [r4, #0]
 800b088:	1b9b      	subs	r3, r3, r6
 800b08a:	4432      	add	r2, r6
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6022      	str	r2, [r4, #0]
 800b090:	2000      	movs	r0, #0
 800b092:	e7db      	b.n	800b04c <__ssputs_r+0x58>
 800b094:	462a      	mov	r2, r5
 800b096:	f001 fb19 	bl	800c6cc <_realloc_r>
 800b09a:	4606      	mov	r6, r0
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d1e1      	bne.n	800b064 <__ssputs_r+0x70>
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	f001 fac2 	bl	800c62c <_free_r>
 800b0a8:	e7c7      	b.n	800b03a <__ssputs_r+0x46>
	...

0800b0ac <_svfiprintf_r>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	4698      	mov	r8, r3
 800b0b2:	898b      	ldrh	r3, [r1, #12]
 800b0b4:	061b      	lsls	r3, r3, #24
 800b0b6:	b09d      	sub	sp, #116	; 0x74
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	d50e      	bpl.n	800b0de <_svfiprintf_r+0x32>
 800b0c0:	690b      	ldr	r3, [r1, #16]
 800b0c2:	b963      	cbnz	r3, 800b0de <_svfiprintf_r+0x32>
 800b0c4:	2140      	movs	r1, #64	; 0x40
 800b0c6:	f7ff ff3b 	bl	800af40 <_malloc_r>
 800b0ca:	6028      	str	r0, [r5, #0]
 800b0cc:	6128      	str	r0, [r5, #16]
 800b0ce:	b920      	cbnz	r0, 800b0da <_svfiprintf_r+0x2e>
 800b0d0:	230c      	movs	r3, #12
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d8:	e0d1      	b.n	800b27e <_svfiprintf_r+0x1d2>
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	616b      	str	r3, [r5, #20]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e2:	2320      	movs	r3, #32
 800b0e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ec:	2330      	movs	r3, #48	; 0x30
 800b0ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b298 <_svfiprintf_r+0x1ec>
 800b0f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f6:	f04f 0901 	mov.w	r9, #1
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	469a      	mov	sl, r3
 800b0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b102:	b10a      	cbz	r2, 800b108 <_svfiprintf_r+0x5c>
 800b104:	2a25      	cmp	r2, #37	; 0x25
 800b106:	d1f9      	bne.n	800b0fc <_svfiprintf_r+0x50>
 800b108:	ebba 0b04 	subs.w	fp, sl, r4
 800b10c:	d00b      	beq.n	800b126 <_svfiprintf_r+0x7a>
 800b10e:	465b      	mov	r3, fp
 800b110:	4622      	mov	r2, r4
 800b112:	4629      	mov	r1, r5
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff ff6d 	bl	800aff4 <__ssputs_r>
 800b11a:	3001      	adds	r0, #1
 800b11c:	f000 80aa 	beq.w	800b274 <_svfiprintf_r+0x1c8>
 800b120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b122:	445a      	add	r2, fp
 800b124:	9209      	str	r2, [sp, #36]	; 0x24
 800b126:	f89a 3000 	ldrb.w	r3, [sl]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 80a2 	beq.w	800b274 <_svfiprintf_r+0x1c8>
 800b130:	2300      	movs	r3, #0
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13a:	f10a 0a01 	add.w	sl, sl, #1
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	9307      	str	r3, [sp, #28]
 800b142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b146:	931a      	str	r3, [sp, #104]	; 0x68
 800b148:	4654      	mov	r4, sl
 800b14a:	2205      	movs	r2, #5
 800b14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b150:	4851      	ldr	r0, [pc, #324]	; (800b298 <_svfiprintf_r+0x1ec>)
 800b152:	f7f5 f85d 	bl	8000210 <memchr>
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	b9d8      	cbnz	r0, 800b192 <_svfiprintf_r+0xe6>
 800b15a:	06d0      	lsls	r0, r2, #27
 800b15c:	bf44      	itt	mi
 800b15e:	2320      	movmi	r3, #32
 800b160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b164:	0711      	lsls	r1, r2, #28
 800b166:	bf44      	itt	mi
 800b168:	232b      	movmi	r3, #43	; 0x2b
 800b16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16e:	f89a 3000 	ldrb.w	r3, [sl]
 800b172:	2b2a      	cmp	r3, #42	; 0x2a
 800b174:	d015      	beq.n	800b1a2 <_svfiprintf_r+0xf6>
 800b176:	9a07      	ldr	r2, [sp, #28]
 800b178:	4654      	mov	r4, sl
 800b17a:	2000      	movs	r0, #0
 800b17c:	f04f 0c0a 	mov.w	ip, #10
 800b180:	4621      	mov	r1, r4
 800b182:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b186:	3b30      	subs	r3, #48	; 0x30
 800b188:	2b09      	cmp	r3, #9
 800b18a:	d94e      	bls.n	800b22a <_svfiprintf_r+0x17e>
 800b18c:	b1b0      	cbz	r0, 800b1bc <_svfiprintf_r+0x110>
 800b18e:	9207      	str	r2, [sp, #28]
 800b190:	e014      	b.n	800b1bc <_svfiprintf_r+0x110>
 800b192:	eba0 0308 	sub.w	r3, r0, r8
 800b196:	fa09 f303 	lsl.w	r3, r9, r3
 800b19a:	4313      	orrs	r3, r2
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	46a2      	mov	sl, r4
 800b1a0:	e7d2      	b.n	800b148 <_svfiprintf_r+0x9c>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	1d19      	adds	r1, r3, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfbb      	ittet	lt
 800b1ae:	425b      	neglt	r3, r3
 800b1b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b4:	9307      	strge	r3, [sp, #28]
 800b1b6:	9307      	strlt	r3, [sp, #28]
 800b1b8:	bfb8      	it	lt
 800b1ba:	9204      	strlt	r2, [sp, #16]
 800b1bc:	7823      	ldrb	r3, [r4, #0]
 800b1be:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c0:	d10c      	bne.n	800b1dc <_svfiprintf_r+0x130>
 800b1c2:	7863      	ldrb	r3, [r4, #1]
 800b1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c6:	d135      	bne.n	800b234 <_svfiprintf_r+0x188>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	1d1a      	adds	r2, r3, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	9203      	str	r2, [sp, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfb8      	it	lt
 800b1d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1d8:	3402      	adds	r4, #2
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2a8 <_svfiprintf_r+0x1fc>
 800b1e0:	7821      	ldrb	r1, [r4, #0]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	f7f5 f813 	bl	8000210 <memchr>
 800b1ea:	b140      	cbz	r0, 800b1fe <_svfiprintf_r+0x152>
 800b1ec:	2340      	movs	r3, #64	; 0x40
 800b1ee:	eba0 000a 	sub.w	r0, r0, sl
 800b1f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f6:	9b04      	ldr	r3, [sp, #16]
 800b1f8:	4303      	orrs	r3, r0
 800b1fa:	3401      	adds	r4, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b202:	4826      	ldr	r0, [pc, #152]	; (800b29c <_svfiprintf_r+0x1f0>)
 800b204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b208:	2206      	movs	r2, #6
 800b20a:	f7f5 f801 	bl	8000210 <memchr>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d038      	beq.n	800b284 <_svfiprintf_r+0x1d8>
 800b212:	4b23      	ldr	r3, [pc, #140]	; (800b2a0 <_svfiprintf_r+0x1f4>)
 800b214:	bb1b      	cbnz	r3, 800b25e <_svfiprintf_r+0x1b2>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	3307      	adds	r3, #7
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	3308      	adds	r3, #8
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b224:	4433      	add	r3, r6
 800b226:	9309      	str	r3, [sp, #36]	; 0x24
 800b228:	e767      	b.n	800b0fa <_svfiprintf_r+0x4e>
 800b22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b22e:	460c      	mov	r4, r1
 800b230:	2001      	movs	r0, #1
 800b232:	e7a5      	b.n	800b180 <_svfiprintf_r+0xd4>
 800b234:	2300      	movs	r3, #0
 800b236:	3401      	adds	r4, #1
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	4619      	mov	r1, r3
 800b23c:	f04f 0c0a 	mov.w	ip, #10
 800b240:	4620      	mov	r0, r4
 800b242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b246:	3a30      	subs	r2, #48	; 0x30
 800b248:	2a09      	cmp	r2, #9
 800b24a:	d903      	bls.n	800b254 <_svfiprintf_r+0x1a8>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0c5      	beq.n	800b1dc <_svfiprintf_r+0x130>
 800b250:	9105      	str	r1, [sp, #20]
 800b252:	e7c3      	b.n	800b1dc <_svfiprintf_r+0x130>
 800b254:	fb0c 2101 	mla	r1, ip, r1, r2
 800b258:	4604      	mov	r4, r0
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7f0      	b.n	800b240 <_svfiprintf_r+0x194>
 800b25e:	ab03      	add	r3, sp, #12
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	462a      	mov	r2, r5
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <_svfiprintf_r+0x1f8>)
 800b266:	a904      	add	r1, sp, #16
 800b268:	4638      	mov	r0, r7
 800b26a:	f3af 8000 	nop.w
 800b26e:	1c42      	adds	r2, r0, #1
 800b270:	4606      	mov	r6, r0
 800b272:	d1d6      	bne.n	800b222 <_svfiprintf_r+0x176>
 800b274:	89ab      	ldrh	r3, [r5, #12]
 800b276:	065b      	lsls	r3, r3, #25
 800b278:	f53f af2c 	bmi.w	800b0d4 <_svfiprintf_r+0x28>
 800b27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b27e:	b01d      	add	sp, #116	; 0x74
 800b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	462a      	mov	r2, r5
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <_svfiprintf_r+0x1f8>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	4638      	mov	r0, r7
 800b290:	f000 fba6 	bl	800b9e0 <_printf_i>
 800b294:	e7eb      	b.n	800b26e <_svfiprintf_r+0x1c2>
 800b296:	bf00      	nop
 800b298:	0800ccd0 	.word	0x0800ccd0
 800b29c:	0800ccda 	.word	0x0800ccda
 800b2a0:	00000000 	.word	0x00000000
 800b2a4:	0800aff5 	.word	0x0800aff5
 800b2a8:	0800ccd6 	.word	0x0800ccd6

0800b2ac <_sungetc_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	1c4b      	adds	r3, r1, #1
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	d103      	bne.n	800b2bc <_sungetc_r+0x10>
 800b2b4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	8993      	ldrh	r3, [r2, #12]
 800b2be:	f023 0320 	bic.w	r3, r3, #32
 800b2c2:	8193      	strh	r3, [r2, #12]
 800b2c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2c6:	6852      	ldr	r2, [r2, #4]
 800b2c8:	b2cd      	uxtb	r5, r1
 800b2ca:	b18b      	cbz	r3, 800b2f0 <_sungetc_r+0x44>
 800b2cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	dd08      	ble.n	800b2e4 <_sungetc_r+0x38>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	1e5a      	subs	r2, r3, #1
 800b2d6:	6022      	str	r2, [r4, #0]
 800b2d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	e7e9      	b.n	800b2b8 <_sungetc_r+0xc>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f000 ff4d 	bl	800c184 <__submore>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0f1      	beq.n	800b2d2 <_sungetc_r+0x26>
 800b2ee:	e7e1      	b.n	800b2b4 <_sungetc_r+0x8>
 800b2f0:	6921      	ldr	r1, [r4, #16]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	b151      	cbz	r1, 800b30c <_sungetc_r+0x60>
 800b2f6:	4299      	cmp	r1, r3
 800b2f8:	d208      	bcs.n	800b30c <_sungetc_r+0x60>
 800b2fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b2fe:	42a9      	cmp	r1, r5
 800b300:	d104      	bne.n	800b30c <_sungetc_r+0x60>
 800b302:	3b01      	subs	r3, #1
 800b304:	3201      	adds	r2, #1
 800b306:	6023      	str	r3, [r4, #0]
 800b308:	6062      	str	r2, [r4, #4]
 800b30a:	e7d5      	b.n	800b2b8 <_sungetc_r+0xc>
 800b30c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b314:	6363      	str	r3, [r4, #52]	; 0x34
 800b316:	2303      	movs	r3, #3
 800b318:	63a3      	str	r3, [r4, #56]	; 0x38
 800b31a:	4623      	mov	r3, r4
 800b31c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	2301      	movs	r3, #1
 800b324:	e7dc      	b.n	800b2e0 <_sungetc_r+0x34>

0800b326 <__ssrefill_r>:
 800b326:	b510      	push	{r4, lr}
 800b328:	460c      	mov	r4, r1
 800b32a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b32c:	b169      	cbz	r1, 800b34a <__ssrefill_r+0x24>
 800b32e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b332:	4299      	cmp	r1, r3
 800b334:	d001      	beq.n	800b33a <__ssrefill_r+0x14>
 800b336:	f001 f979 	bl	800c62c <_free_r>
 800b33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	2000      	movs	r0, #0
 800b340:	6360      	str	r0, [r4, #52]	; 0x34
 800b342:	b113      	cbz	r3, 800b34a <__ssrefill_r+0x24>
 800b344:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	bd10      	pop	{r4, pc}
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	6063      	str	r3, [r4, #4]
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f043 0320 	orr.w	r3, r3, #32
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	f04f 30ff 	mov.w	r0, #4294967295
 800b35e:	e7f3      	b.n	800b348 <__ssrefill_r+0x22>

0800b360 <__ssvfiscanf_r>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	460c      	mov	r4, r1
 800b366:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b36a:	2100      	movs	r1, #0
 800b36c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b370:	49b2      	ldr	r1, [pc, #712]	; (800b63c <__ssvfiscanf_r+0x2dc>)
 800b372:	91a0      	str	r1, [sp, #640]	; 0x280
 800b374:	f10d 0804 	add.w	r8, sp, #4
 800b378:	49b1      	ldr	r1, [pc, #708]	; (800b640 <__ssvfiscanf_r+0x2e0>)
 800b37a:	4fb2      	ldr	r7, [pc, #712]	; (800b644 <__ssvfiscanf_r+0x2e4>)
 800b37c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b648 <__ssvfiscanf_r+0x2e8>
 800b380:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b384:	4606      	mov	r6, r0
 800b386:	91a1      	str	r1, [sp, #644]	; 0x284
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	f892 a000 	ldrb.w	sl, [r2]
 800b38e:	f1ba 0f00 	cmp.w	sl, #0
 800b392:	f000 8151 	beq.w	800b638 <__ssvfiscanf_r+0x2d8>
 800b396:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b39a:	f013 0308 	ands.w	r3, r3, #8
 800b39e:	f102 0501 	add.w	r5, r2, #1
 800b3a2:	d019      	beq.n	800b3d8 <__ssvfiscanf_r+0x78>
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dd0f      	ble.n	800b3ca <__ssvfiscanf_r+0x6a>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	781a      	ldrb	r2, [r3, #0]
 800b3ae:	5cba      	ldrb	r2, [r7, r2]
 800b3b0:	0712      	lsls	r2, r2, #28
 800b3b2:	d401      	bmi.n	800b3b8 <__ssvfiscanf_r+0x58>
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	e7e8      	b.n	800b38a <__ssvfiscanf_r+0x2a>
 800b3b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	9245      	str	r2, [sp, #276]	; 0x114
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	3a01      	subs	r2, #1
 800b3c4:	6062      	str	r2, [r4, #4]
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	e7ec      	b.n	800b3a4 <__ssvfiscanf_r+0x44>
 800b3ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4798      	blx	r3
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d0e9      	beq.n	800b3aa <__ssvfiscanf_r+0x4a>
 800b3d6:	e7ed      	b.n	800b3b4 <__ssvfiscanf_r+0x54>
 800b3d8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b3dc:	f040 8083 	bne.w	800b4e6 <__ssvfiscanf_r+0x186>
 800b3e0:	9341      	str	r3, [sp, #260]	; 0x104
 800b3e2:	9343      	str	r3, [sp, #268]	; 0x10c
 800b3e4:	7853      	ldrb	r3, [r2, #1]
 800b3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3e8:	bf02      	ittt	eq
 800b3ea:	2310      	moveq	r3, #16
 800b3ec:	1c95      	addeq	r5, r2, #2
 800b3ee:	9341      	streq	r3, [sp, #260]	; 0x104
 800b3f0:	220a      	movs	r2, #10
 800b3f2:	46ab      	mov	fp, r5
 800b3f4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b3f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	d91d      	bls.n	800b43c <__ssvfiscanf_r+0xdc>
 800b400:	4891      	ldr	r0, [pc, #580]	; (800b648 <__ssvfiscanf_r+0x2e8>)
 800b402:	2203      	movs	r2, #3
 800b404:	f7f4 ff04 	bl	8000210 <memchr>
 800b408:	b140      	cbz	r0, 800b41c <__ssvfiscanf_r+0xbc>
 800b40a:	2301      	movs	r3, #1
 800b40c:	eba0 0009 	sub.w	r0, r0, r9
 800b410:	fa03 f000 	lsl.w	r0, r3, r0
 800b414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b416:	4318      	orrs	r0, r3
 800b418:	9041      	str	r0, [sp, #260]	; 0x104
 800b41a:	465d      	mov	r5, fp
 800b41c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b420:	2b78      	cmp	r3, #120	; 0x78
 800b422:	d806      	bhi.n	800b432 <__ssvfiscanf_r+0xd2>
 800b424:	2b57      	cmp	r3, #87	; 0x57
 800b426:	d810      	bhi.n	800b44a <__ssvfiscanf_r+0xea>
 800b428:	2b25      	cmp	r3, #37	; 0x25
 800b42a:	d05c      	beq.n	800b4e6 <__ssvfiscanf_r+0x186>
 800b42c:	d856      	bhi.n	800b4dc <__ssvfiscanf_r+0x17c>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d074      	beq.n	800b51c <__ssvfiscanf_r+0x1bc>
 800b432:	2303      	movs	r3, #3
 800b434:	9347      	str	r3, [sp, #284]	; 0x11c
 800b436:	230a      	movs	r3, #10
 800b438:	9342      	str	r3, [sp, #264]	; 0x108
 800b43a:	e081      	b.n	800b540 <__ssvfiscanf_r+0x1e0>
 800b43c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b43e:	fb02 1303 	mla	r3, r2, r3, r1
 800b442:	3b30      	subs	r3, #48	; 0x30
 800b444:	9343      	str	r3, [sp, #268]	; 0x10c
 800b446:	465d      	mov	r5, fp
 800b448:	e7d3      	b.n	800b3f2 <__ssvfiscanf_r+0x92>
 800b44a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b44e:	2a20      	cmp	r2, #32
 800b450:	d8ef      	bhi.n	800b432 <__ssvfiscanf_r+0xd2>
 800b452:	a101      	add	r1, pc, #4	; (adr r1, 800b458 <__ssvfiscanf_r+0xf8>)
 800b454:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b458:	0800b52b 	.word	0x0800b52b
 800b45c:	0800b433 	.word	0x0800b433
 800b460:	0800b433 	.word	0x0800b433
 800b464:	0800b589 	.word	0x0800b589
 800b468:	0800b433 	.word	0x0800b433
 800b46c:	0800b433 	.word	0x0800b433
 800b470:	0800b433 	.word	0x0800b433
 800b474:	0800b433 	.word	0x0800b433
 800b478:	0800b433 	.word	0x0800b433
 800b47c:	0800b433 	.word	0x0800b433
 800b480:	0800b433 	.word	0x0800b433
 800b484:	0800b59f 	.word	0x0800b59f
 800b488:	0800b575 	.word	0x0800b575
 800b48c:	0800b4e3 	.word	0x0800b4e3
 800b490:	0800b4e3 	.word	0x0800b4e3
 800b494:	0800b4e3 	.word	0x0800b4e3
 800b498:	0800b433 	.word	0x0800b433
 800b49c:	0800b579 	.word	0x0800b579
 800b4a0:	0800b433 	.word	0x0800b433
 800b4a4:	0800b433 	.word	0x0800b433
 800b4a8:	0800b433 	.word	0x0800b433
 800b4ac:	0800b433 	.word	0x0800b433
 800b4b0:	0800b5af 	.word	0x0800b5af
 800b4b4:	0800b581 	.word	0x0800b581
 800b4b8:	0800b523 	.word	0x0800b523
 800b4bc:	0800b433 	.word	0x0800b433
 800b4c0:	0800b433 	.word	0x0800b433
 800b4c4:	0800b5ab 	.word	0x0800b5ab
 800b4c8:	0800b433 	.word	0x0800b433
 800b4cc:	0800b575 	.word	0x0800b575
 800b4d0:	0800b433 	.word	0x0800b433
 800b4d4:	0800b433 	.word	0x0800b433
 800b4d8:	0800b52b 	.word	0x0800b52b
 800b4dc:	3b45      	subs	r3, #69	; 0x45
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d8a7      	bhi.n	800b432 <__ssvfiscanf_r+0xd2>
 800b4e2:	2305      	movs	r3, #5
 800b4e4:	e02b      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b4e6:	6863      	ldr	r3, [r4, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dd0d      	ble.n	800b508 <__ssvfiscanf_r+0x1a8>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	781a      	ldrb	r2, [r3, #0]
 800b4f0:	4552      	cmp	r2, sl
 800b4f2:	f040 80a1 	bne.w	800b638 <__ssvfiscanf_r+0x2d8>
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	6862      	ldr	r2, [r4, #4]
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b4fe:	3a01      	subs	r2, #1
 800b500:	3301      	adds	r3, #1
 800b502:	6062      	str	r2, [r4, #4]
 800b504:	9345      	str	r3, [sp, #276]	; 0x114
 800b506:	e755      	b.n	800b3b4 <__ssvfiscanf_r+0x54>
 800b508:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b50a:	4621      	mov	r1, r4
 800b50c:	4630      	mov	r0, r6
 800b50e:	4798      	blx	r3
 800b510:	2800      	cmp	r0, #0
 800b512:	d0eb      	beq.n	800b4ec <__ssvfiscanf_r+0x18c>
 800b514:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b516:	2800      	cmp	r0, #0
 800b518:	f040 8084 	bne.w	800b624 <__ssvfiscanf_r+0x2c4>
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	e086      	b.n	800b630 <__ssvfiscanf_r+0x2d0>
 800b522:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b524:	f042 0220 	orr.w	r2, r2, #32
 800b528:	9241      	str	r2, [sp, #260]	; 0x104
 800b52a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b52c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b530:	9241      	str	r2, [sp, #260]	; 0x104
 800b532:	2210      	movs	r2, #16
 800b534:	2b6f      	cmp	r3, #111	; 0x6f
 800b536:	9242      	str	r2, [sp, #264]	; 0x108
 800b538:	bf34      	ite	cc
 800b53a:	2303      	movcc	r3, #3
 800b53c:	2304      	movcs	r3, #4
 800b53e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b540:	6863      	ldr	r3, [r4, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	dd41      	ble.n	800b5ca <__ssvfiscanf_r+0x26a>
 800b546:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b548:	0659      	lsls	r1, r3, #25
 800b54a:	d404      	bmi.n	800b556 <__ssvfiscanf_r+0x1f6>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	5cba      	ldrb	r2, [r7, r2]
 800b552:	0712      	lsls	r2, r2, #28
 800b554:	d440      	bmi.n	800b5d8 <__ssvfiscanf_r+0x278>
 800b556:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b558:	2b02      	cmp	r3, #2
 800b55a:	dc4f      	bgt.n	800b5fc <__ssvfiscanf_r+0x29c>
 800b55c:	466b      	mov	r3, sp
 800b55e:	4622      	mov	r2, r4
 800b560:	a941      	add	r1, sp, #260	; 0x104
 800b562:	4630      	mov	r0, r6
 800b564:	f000 fb62 	bl	800bc2c <_scanf_chars>
 800b568:	2801      	cmp	r0, #1
 800b56a:	d065      	beq.n	800b638 <__ssvfiscanf_r+0x2d8>
 800b56c:	2802      	cmp	r0, #2
 800b56e:	f47f af21 	bne.w	800b3b4 <__ssvfiscanf_r+0x54>
 800b572:	e7cf      	b.n	800b514 <__ssvfiscanf_r+0x1b4>
 800b574:	220a      	movs	r2, #10
 800b576:	e7dd      	b.n	800b534 <__ssvfiscanf_r+0x1d4>
 800b578:	2300      	movs	r3, #0
 800b57a:	9342      	str	r3, [sp, #264]	; 0x108
 800b57c:	2303      	movs	r3, #3
 800b57e:	e7de      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b580:	2308      	movs	r3, #8
 800b582:	9342      	str	r3, [sp, #264]	; 0x108
 800b584:	2304      	movs	r3, #4
 800b586:	e7da      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b588:	4629      	mov	r1, r5
 800b58a:	4640      	mov	r0, r8
 800b58c:	f000 fcbc 	bl	800bf08 <__sccl>
 800b590:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b596:	9341      	str	r3, [sp, #260]	; 0x104
 800b598:	4605      	mov	r5, r0
 800b59a:	2301      	movs	r3, #1
 800b59c:	e7cf      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b59e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a4:	9341      	str	r3, [sp, #260]	; 0x104
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e7c9      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	e7c7      	b.n	800b53e <__ssvfiscanf_r+0x1de>
 800b5ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b5b0:	06c3      	lsls	r3, r0, #27
 800b5b2:	f53f aeff 	bmi.w	800b3b4 <__ssvfiscanf_r+0x54>
 800b5b6:	9b00      	ldr	r3, [sp, #0]
 800b5b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b5ba:	1d19      	adds	r1, r3, #4
 800b5bc:	9100      	str	r1, [sp, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	07c0      	lsls	r0, r0, #31
 800b5c2:	bf4c      	ite	mi
 800b5c4:	801a      	strhmi	r2, [r3, #0]
 800b5c6:	601a      	strpl	r2, [r3, #0]
 800b5c8:	e6f4      	b.n	800b3b4 <__ssvfiscanf_r+0x54>
 800b5ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	4798      	blx	r3
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d0b7      	beq.n	800b546 <__ssvfiscanf_r+0x1e6>
 800b5d6:	e79d      	b.n	800b514 <__ssvfiscanf_r+0x1b4>
 800b5d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b5da:	3201      	adds	r2, #1
 800b5dc:	9245      	str	r2, [sp, #276]	; 0x114
 800b5de:	6862      	ldr	r2, [r4, #4]
 800b5e0:	3a01      	subs	r2, #1
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	6062      	str	r2, [r4, #4]
 800b5e6:	dd02      	ble.n	800b5ee <__ssvfiscanf_r+0x28e>
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	e7ae      	b.n	800b54c <__ssvfiscanf_r+0x1ec>
 800b5ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4798      	blx	r3
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0a8      	beq.n	800b54c <__ssvfiscanf_r+0x1ec>
 800b5fa:	e78b      	b.n	800b514 <__ssvfiscanf_r+0x1b4>
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	dc06      	bgt.n	800b60e <__ssvfiscanf_r+0x2ae>
 800b600:	466b      	mov	r3, sp
 800b602:	4622      	mov	r2, r4
 800b604:	a941      	add	r1, sp, #260	; 0x104
 800b606:	4630      	mov	r0, r6
 800b608:	f000 fb68 	bl	800bcdc <_scanf_i>
 800b60c:	e7ac      	b.n	800b568 <__ssvfiscanf_r+0x208>
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <__ssvfiscanf_r+0x2ec>)
 800b610:	2b00      	cmp	r3, #0
 800b612:	f43f aecf 	beq.w	800b3b4 <__ssvfiscanf_r+0x54>
 800b616:	466b      	mov	r3, sp
 800b618:	4622      	mov	r2, r4
 800b61a:	a941      	add	r1, sp, #260	; 0x104
 800b61c:	4630      	mov	r0, r6
 800b61e:	f3af 8000 	nop.w
 800b622:	e7a1      	b.n	800b568 <__ssvfiscanf_r+0x208>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b62a:	bf18      	it	ne
 800b62c:	f04f 30ff 	movne.w	r0, #4294967295
 800b630:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b638:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b63a:	e7f9      	b.n	800b630 <__ssvfiscanf_r+0x2d0>
 800b63c:	0800b2ad 	.word	0x0800b2ad
 800b640:	0800b327 	.word	0x0800b327
 800b644:	0800cd1f 	.word	0x0800cd1f
 800b648:	0800ccd6 	.word	0x0800ccd6
 800b64c:	00000000 	.word	0x00000000

0800b650 <__sfputc_r>:
 800b650:	6893      	ldr	r3, [r2, #8]
 800b652:	3b01      	subs	r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	b410      	push	{r4}
 800b658:	6093      	str	r3, [r2, #8]
 800b65a:	da08      	bge.n	800b66e <__sfputc_r+0x1e>
 800b65c:	6994      	ldr	r4, [r2, #24]
 800b65e:	42a3      	cmp	r3, r4
 800b660:	db01      	blt.n	800b666 <__sfputc_r+0x16>
 800b662:	290a      	cmp	r1, #10
 800b664:	d103      	bne.n	800b66e <__sfputc_r+0x1e>
 800b666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b66a:	f000 bdc5 	b.w	800c1f8 <__swbuf_r>
 800b66e:	6813      	ldr	r3, [r2, #0]
 800b670:	1c58      	adds	r0, r3, #1
 800b672:	6010      	str	r0, [r2, #0]
 800b674:	7019      	strb	r1, [r3, #0]
 800b676:	4608      	mov	r0, r1
 800b678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <__sfputs_r>:
 800b67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b680:	4606      	mov	r6, r0
 800b682:	460f      	mov	r7, r1
 800b684:	4614      	mov	r4, r2
 800b686:	18d5      	adds	r5, r2, r3
 800b688:	42ac      	cmp	r4, r5
 800b68a:	d101      	bne.n	800b690 <__sfputs_r+0x12>
 800b68c:	2000      	movs	r0, #0
 800b68e:	e007      	b.n	800b6a0 <__sfputs_r+0x22>
 800b690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b694:	463a      	mov	r2, r7
 800b696:	4630      	mov	r0, r6
 800b698:	f7ff ffda 	bl	800b650 <__sfputc_r>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d1f3      	bne.n	800b688 <__sfputs_r+0xa>
 800b6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6a4 <_vfiprintf_r>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	b09d      	sub	sp, #116	; 0x74
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	4698      	mov	r8, r3
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	b118      	cbz	r0, 800b6bc <_vfiprintf_r+0x18>
 800b6b4:	6983      	ldr	r3, [r0, #24]
 800b6b6:	b90b      	cbnz	r3, 800b6bc <_vfiprintf_r+0x18>
 800b6b8:	f7ff fb90 	bl	800addc <__sinit>
 800b6bc:	4b89      	ldr	r3, [pc, #548]	; (800b8e4 <_vfiprintf_r+0x240>)
 800b6be:	429d      	cmp	r5, r3
 800b6c0:	d11b      	bne.n	800b6fa <_vfiprintf_r+0x56>
 800b6c2:	6875      	ldr	r5, [r6, #4]
 800b6c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c6:	07d9      	lsls	r1, r3, #31
 800b6c8:	d405      	bmi.n	800b6d6 <_vfiprintf_r+0x32>
 800b6ca:	89ab      	ldrh	r3, [r5, #12]
 800b6cc:	059a      	lsls	r2, r3, #22
 800b6ce:	d402      	bmi.n	800b6d6 <_vfiprintf_r+0x32>
 800b6d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6d2:	f7ff fc21 	bl	800af18 <__retarget_lock_acquire_recursive>
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	071b      	lsls	r3, r3, #28
 800b6da:	d501      	bpl.n	800b6e0 <_vfiprintf_r+0x3c>
 800b6dc:	692b      	ldr	r3, [r5, #16]
 800b6de:	b9eb      	cbnz	r3, 800b71c <_vfiprintf_r+0x78>
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 fdda 	bl	800c29c <__swsetup_r>
 800b6e8:	b1c0      	cbz	r0, 800b71c <_vfiprintf_r+0x78>
 800b6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ec:	07dc      	lsls	r4, r3, #31
 800b6ee:	d50e      	bpl.n	800b70e <_vfiprintf_r+0x6a>
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	b01d      	add	sp, #116	; 0x74
 800b6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fa:	4b7b      	ldr	r3, [pc, #492]	; (800b8e8 <_vfiprintf_r+0x244>)
 800b6fc:	429d      	cmp	r5, r3
 800b6fe:	d101      	bne.n	800b704 <_vfiprintf_r+0x60>
 800b700:	68b5      	ldr	r5, [r6, #8]
 800b702:	e7df      	b.n	800b6c4 <_vfiprintf_r+0x20>
 800b704:	4b79      	ldr	r3, [pc, #484]	; (800b8ec <_vfiprintf_r+0x248>)
 800b706:	429d      	cmp	r5, r3
 800b708:	bf08      	it	eq
 800b70a:	68f5      	ldreq	r5, [r6, #12]
 800b70c:	e7da      	b.n	800b6c4 <_vfiprintf_r+0x20>
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	0598      	lsls	r0, r3, #22
 800b712:	d4ed      	bmi.n	800b6f0 <_vfiprintf_r+0x4c>
 800b714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b716:	f7ff fc00 	bl	800af1a <__retarget_lock_release_recursive>
 800b71a:	e7e9      	b.n	800b6f0 <_vfiprintf_r+0x4c>
 800b71c:	2300      	movs	r3, #0
 800b71e:	9309      	str	r3, [sp, #36]	; 0x24
 800b720:	2320      	movs	r3, #32
 800b722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b726:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72a:	2330      	movs	r3, #48	; 0x30
 800b72c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8f0 <_vfiprintf_r+0x24c>
 800b730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b734:	f04f 0901 	mov.w	r9, #1
 800b738:	4623      	mov	r3, r4
 800b73a:	469a      	mov	sl, r3
 800b73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b740:	b10a      	cbz	r2, 800b746 <_vfiprintf_r+0xa2>
 800b742:	2a25      	cmp	r2, #37	; 0x25
 800b744:	d1f9      	bne.n	800b73a <_vfiprintf_r+0x96>
 800b746:	ebba 0b04 	subs.w	fp, sl, r4
 800b74a:	d00b      	beq.n	800b764 <_vfiprintf_r+0xc0>
 800b74c:	465b      	mov	r3, fp
 800b74e:	4622      	mov	r2, r4
 800b750:	4629      	mov	r1, r5
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff ff93 	bl	800b67e <__sfputs_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	f000 80aa 	beq.w	800b8b2 <_vfiprintf_r+0x20e>
 800b75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b760:	445a      	add	r2, fp
 800b762:	9209      	str	r2, [sp, #36]	; 0x24
 800b764:	f89a 3000 	ldrb.w	r3, [sl]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 80a2 	beq.w	800b8b2 <_vfiprintf_r+0x20e>
 800b76e:	2300      	movs	r3, #0
 800b770:	f04f 32ff 	mov.w	r2, #4294967295
 800b774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b778:	f10a 0a01 	add.w	sl, sl, #1
 800b77c:	9304      	str	r3, [sp, #16]
 800b77e:	9307      	str	r3, [sp, #28]
 800b780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b784:	931a      	str	r3, [sp, #104]	; 0x68
 800b786:	4654      	mov	r4, sl
 800b788:	2205      	movs	r2, #5
 800b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78e:	4858      	ldr	r0, [pc, #352]	; (800b8f0 <_vfiprintf_r+0x24c>)
 800b790:	f7f4 fd3e 	bl	8000210 <memchr>
 800b794:	9a04      	ldr	r2, [sp, #16]
 800b796:	b9d8      	cbnz	r0, 800b7d0 <_vfiprintf_r+0x12c>
 800b798:	06d1      	lsls	r1, r2, #27
 800b79a:	bf44      	itt	mi
 800b79c:	2320      	movmi	r3, #32
 800b79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a2:	0713      	lsls	r3, r2, #28
 800b7a4:	bf44      	itt	mi
 800b7a6:	232b      	movmi	r3, #43	; 0x2b
 800b7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b2:	d015      	beq.n	800b7e0 <_vfiprintf_r+0x13c>
 800b7b4:	9a07      	ldr	r2, [sp, #28]
 800b7b6:	4654      	mov	r4, sl
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	f04f 0c0a 	mov.w	ip, #10
 800b7be:	4621      	mov	r1, r4
 800b7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c4:	3b30      	subs	r3, #48	; 0x30
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d94e      	bls.n	800b868 <_vfiprintf_r+0x1c4>
 800b7ca:	b1b0      	cbz	r0, 800b7fa <_vfiprintf_r+0x156>
 800b7cc:	9207      	str	r2, [sp, #28]
 800b7ce:	e014      	b.n	800b7fa <_vfiprintf_r+0x156>
 800b7d0:	eba0 0308 	sub.w	r3, r0, r8
 800b7d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	46a2      	mov	sl, r4
 800b7de:	e7d2      	b.n	800b786 <_vfiprintf_r+0xe2>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d19      	adds	r1, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9103      	str	r1, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfbb      	ittet	lt
 800b7ec:	425b      	neglt	r3, r3
 800b7ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f2:	9307      	strge	r3, [sp, #28]
 800b7f4:	9307      	strlt	r3, [sp, #28]
 800b7f6:	bfb8      	it	lt
 800b7f8:	9204      	strlt	r2, [sp, #16]
 800b7fa:	7823      	ldrb	r3, [r4, #0]
 800b7fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b7fe:	d10c      	bne.n	800b81a <_vfiprintf_r+0x176>
 800b800:	7863      	ldrb	r3, [r4, #1]
 800b802:	2b2a      	cmp	r3, #42	; 0x2a
 800b804:	d135      	bne.n	800b872 <_vfiprintf_r+0x1ce>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	1d1a      	adds	r2, r3, #4
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	9203      	str	r2, [sp, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfb8      	it	lt
 800b812:	f04f 33ff 	movlt.w	r3, #4294967295
 800b816:	3402      	adds	r4, #2
 800b818:	9305      	str	r3, [sp, #20]
 800b81a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b900 <_vfiprintf_r+0x25c>
 800b81e:	7821      	ldrb	r1, [r4, #0]
 800b820:	2203      	movs	r2, #3
 800b822:	4650      	mov	r0, sl
 800b824:	f7f4 fcf4 	bl	8000210 <memchr>
 800b828:	b140      	cbz	r0, 800b83c <_vfiprintf_r+0x198>
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	eba0 000a 	sub.w	r0, r0, sl
 800b830:	fa03 f000 	lsl.w	r0, r3, r0
 800b834:	9b04      	ldr	r3, [sp, #16]
 800b836:	4303      	orrs	r3, r0
 800b838:	3401      	adds	r4, #1
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b840:	482c      	ldr	r0, [pc, #176]	; (800b8f4 <_vfiprintf_r+0x250>)
 800b842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b846:	2206      	movs	r2, #6
 800b848:	f7f4 fce2 	bl	8000210 <memchr>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d03f      	beq.n	800b8d0 <_vfiprintf_r+0x22c>
 800b850:	4b29      	ldr	r3, [pc, #164]	; (800b8f8 <_vfiprintf_r+0x254>)
 800b852:	bb1b      	cbnz	r3, 800b89c <_vfiprintf_r+0x1f8>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	3307      	adds	r3, #7
 800b858:	f023 0307 	bic.w	r3, r3, #7
 800b85c:	3308      	adds	r3, #8
 800b85e:	9303      	str	r3, [sp, #12]
 800b860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b862:	443b      	add	r3, r7
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	e767      	b.n	800b738 <_vfiprintf_r+0x94>
 800b868:	fb0c 3202 	mla	r2, ip, r2, r3
 800b86c:	460c      	mov	r4, r1
 800b86e:	2001      	movs	r0, #1
 800b870:	e7a5      	b.n	800b7be <_vfiprintf_r+0x11a>
 800b872:	2300      	movs	r3, #0
 800b874:	3401      	adds	r4, #1
 800b876:	9305      	str	r3, [sp, #20]
 800b878:	4619      	mov	r1, r3
 800b87a:	f04f 0c0a 	mov.w	ip, #10
 800b87e:	4620      	mov	r0, r4
 800b880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b884:	3a30      	subs	r2, #48	; 0x30
 800b886:	2a09      	cmp	r2, #9
 800b888:	d903      	bls.n	800b892 <_vfiprintf_r+0x1ee>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0c5      	beq.n	800b81a <_vfiprintf_r+0x176>
 800b88e:	9105      	str	r1, [sp, #20]
 800b890:	e7c3      	b.n	800b81a <_vfiprintf_r+0x176>
 800b892:	fb0c 2101 	mla	r1, ip, r1, r2
 800b896:	4604      	mov	r4, r0
 800b898:	2301      	movs	r3, #1
 800b89a:	e7f0      	b.n	800b87e <_vfiprintf_r+0x1da>
 800b89c:	ab03      	add	r3, sp, #12
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	4b16      	ldr	r3, [pc, #88]	; (800b8fc <_vfiprintf_r+0x258>)
 800b8a4:	a904      	add	r1, sp, #16
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f3af 8000 	nop.w
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	1c78      	adds	r0, r7, #1
 800b8b0:	d1d6      	bne.n	800b860 <_vfiprintf_r+0x1bc>
 800b8b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b4:	07d9      	lsls	r1, r3, #31
 800b8b6:	d405      	bmi.n	800b8c4 <_vfiprintf_r+0x220>
 800b8b8:	89ab      	ldrh	r3, [r5, #12]
 800b8ba:	059a      	lsls	r2, r3, #22
 800b8bc:	d402      	bmi.n	800b8c4 <_vfiprintf_r+0x220>
 800b8be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c0:	f7ff fb2b 	bl	800af1a <__retarget_lock_release_recursive>
 800b8c4:	89ab      	ldrh	r3, [r5, #12]
 800b8c6:	065b      	lsls	r3, r3, #25
 800b8c8:	f53f af12 	bmi.w	800b6f0 <_vfiprintf_r+0x4c>
 800b8cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8ce:	e711      	b.n	800b6f4 <_vfiprintf_r+0x50>
 800b8d0:	ab03      	add	r3, sp, #12
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	462a      	mov	r2, r5
 800b8d6:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <_vfiprintf_r+0x258>)
 800b8d8:	a904      	add	r1, sp, #16
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f000 f880 	bl	800b9e0 <_printf_i>
 800b8e0:	e7e4      	b.n	800b8ac <_vfiprintf_r+0x208>
 800b8e2:	bf00      	nop
 800b8e4:	0800cc90 	.word	0x0800cc90
 800b8e8:	0800ccb0 	.word	0x0800ccb0
 800b8ec:	0800cc70 	.word	0x0800cc70
 800b8f0:	0800ccd0 	.word	0x0800ccd0
 800b8f4:	0800ccda 	.word	0x0800ccda
 800b8f8:	00000000 	.word	0x00000000
 800b8fc:	0800b67f 	.word	0x0800b67f
 800b900:	0800ccd6 	.word	0x0800ccd6

0800b904 <_printf_common>:
 800b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b908:	4616      	mov	r6, r2
 800b90a:	4699      	mov	r9, r3
 800b90c:	688a      	ldr	r2, [r1, #8]
 800b90e:	690b      	ldr	r3, [r1, #16]
 800b910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b914:	4293      	cmp	r3, r2
 800b916:	bfb8      	it	lt
 800b918:	4613      	movlt	r3, r2
 800b91a:	6033      	str	r3, [r6, #0]
 800b91c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b920:	4607      	mov	r7, r0
 800b922:	460c      	mov	r4, r1
 800b924:	b10a      	cbz	r2, 800b92a <_printf_common+0x26>
 800b926:	3301      	adds	r3, #1
 800b928:	6033      	str	r3, [r6, #0]
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	0699      	lsls	r1, r3, #26
 800b92e:	bf42      	ittt	mi
 800b930:	6833      	ldrmi	r3, [r6, #0]
 800b932:	3302      	addmi	r3, #2
 800b934:	6033      	strmi	r3, [r6, #0]
 800b936:	6825      	ldr	r5, [r4, #0]
 800b938:	f015 0506 	ands.w	r5, r5, #6
 800b93c:	d106      	bne.n	800b94c <_printf_common+0x48>
 800b93e:	f104 0a19 	add.w	sl, r4, #25
 800b942:	68e3      	ldr	r3, [r4, #12]
 800b944:	6832      	ldr	r2, [r6, #0]
 800b946:	1a9b      	subs	r3, r3, r2
 800b948:	42ab      	cmp	r3, r5
 800b94a:	dc26      	bgt.n	800b99a <_printf_common+0x96>
 800b94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b950:	1e13      	subs	r3, r2, #0
 800b952:	6822      	ldr	r2, [r4, #0]
 800b954:	bf18      	it	ne
 800b956:	2301      	movne	r3, #1
 800b958:	0692      	lsls	r2, r2, #26
 800b95a:	d42b      	bmi.n	800b9b4 <_printf_common+0xb0>
 800b95c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b960:	4649      	mov	r1, r9
 800b962:	4638      	mov	r0, r7
 800b964:	47c0      	blx	r8
 800b966:	3001      	adds	r0, #1
 800b968:	d01e      	beq.n	800b9a8 <_printf_common+0xa4>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	68e5      	ldr	r5, [r4, #12]
 800b96e:	6832      	ldr	r2, [r6, #0]
 800b970:	f003 0306 	and.w	r3, r3, #6
 800b974:	2b04      	cmp	r3, #4
 800b976:	bf08      	it	eq
 800b978:	1aad      	subeq	r5, r5, r2
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	6922      	ldr	r2, [r4, #16]
 800b97e:	bf0c      	ite	eq
 800b980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b984:	2500      	movne	r5, #0
 800b986:	4293      	cmp	r3, r2
 800b988:	bfc4      	itt	gt
 800b98a:	1a9b      	subgt	r3, r3, r2
 800b98c:	18ed      	addgt	r5, r5, r3
 800b98e:	2600      	movs	r6, #0
 800b990:	341a      	adds	r4, #26
 800b992:	42b5      	cmp	r5, r6
 800b994:	d11a      	bne.n	800b9cc <_printf_common+0xc8>
 800b996:	2000      	movs	r0, #0
 800b998:	e008      	b.n	800b9ac <_printf_common+0xa8>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4652      	mov	r2, sl
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	47c0      	blx	r8
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d103      	bne.n	800b9b0 <_printf_common+0xac>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b0:	3501      	adds	r5, #1
 800b9b2:	e7c6      	b.n	800b942 <_printf_common+0x3e>
 800b9b4:	18e1      	adds	r1, r4, r3
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	2030      	movs	r0, #48	; 0x30
 800b9ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9be:	4422      	add	r2, r4
 800b9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9c8:	3302      	adds	r3, #2
 800b9ca:	e7c7      	b.n	800b95c <_printf_common+0x58>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	47c0      	blx	r8
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	d0e6      	beq.n	800b9a8 <_printf_common+0xa4>
 800b9da:	3601      	adds	r6, #1
 800b9dc:	e7d9      	b.n	800b992 <_printf_common+0x8e>
	...

0800b9e0 <_printf_i>:
 800b9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	4691      	mov	r9, r2
 800b9e8:	7e27      	ldrb	r7, [r4, #24]
 800b9ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9ec:	2f78      	cmp	r7, #120	; 0x78
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	469a      	mov	sl, r3
 800b9f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9f6:	d807      	bhi.n	800ba08 <_printf_i+0x28>
 800b9f8:	2f62      	cmp	r7, #98	; 0x62
 800b9fa:	d80a      	bhi.n	800ba12 <_printf_i+0x32>
 800b9fc:	2f00      	cmp	r7, #0
 800b9fe:	f000 80d8 	beq.w	800bbb2 <_printf_i+0x1d2>
 800ba02:	2f58      	cmp	r7, #88	; 0x58
 800ba04:	f000 80a3 	beq.w	800bb4e <_printf_i+0x16e>
 800ba08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba10:	e03a      	b.n	800ba88 <_printf_i+0xa8>
 800ba12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba16:	2b15      	cmp	r3, #21
 800ba18:	d8f6      	bhi.n	800ba08 <_printf_i+0x28>
 800ba1a:	a001      	add	r0, pc, #4	; (adr r0, 800ba20 <_printf_i+0x40>)
 800ba1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba20:	0800ba79 	.word	0x0800ba79
 800ba24:	0800ba8d 	.word	0x0800ba8d
 800ba28:	0800ba09 	.word	0x0800ba09
 800ba2c:	0800ba09 	.word	0x0800ba09
 800ba30:	0800ba09 	.word	0x0800ba09
 800ba34:	0800ba09 	.word	0x0800ba09
 800ba38:	0800ba8d 	.word	0x0800ba8d
 800ba3c:	0800ba09 	.word	0x0800ba09
 800ba40:	0800ba09 	.word	0x0800ba09
 800ba44:	0800ba09 	.word	0x0800ba09
 800ba48:	0800ba09 	.word	0x0800ba09
 800ba4c:	0800bb99 	.word	0x0800bb99
 800ba50:	0800babd 	.word	0x0800babd
 800ba54:	0800bb7b 	.word	0x0800bb7b
 800ba58:	0800ba09 	.word	0x0800ba09
 800ba5c:	0800ba09 	.word	0x0800ba09
 800ba60:	0800bbbb 	.word	0x0800bbbb
 800ba64:	0800ba09 	.word	0x0800ba09
 800ba68:	0800babd 	.word	0x0800babd
 800ba6c:	0800ba09 	.word	0x0800ba09
 800ba70:	0800ba09 	.word	0x0800ba09
 800ba74:	0800bb83 	.word	0x0800bb83
 800ba78:	680b      	ldr	r3, [r1, #0]
 800ba7a:	1d1a      	adds	r2, r3, #4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	600a      	str	r2, [r1, #0]
 800ba80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0a3      	b.n	800bbd4 <_printf_i+0x1f4>
 800ba8c:	6825      	ldr	r5, [r4, #0]
 800ba8e:	6808      	ldr	r0, [r1, #0]
 800ba90:	062e      	lsls	r6, r5, #24
 800ba92:	f100 0304 	add.w	r3, r0, #4
 800ba96:	d50a      	bpl.n	800baae <_printf_i+0xce>
 800ba98:	6805      	ldr	r5, [r0, #0]
 800ba9a:	600b      	str	r3, [r1, #0]
 800ba9c:	2d00      	cmp	r5, #0
 800ba9e:	da03      	bge.n	800baa8 <_printf_i+0xc8>
 800baa0:	232d      	movs	r3, #45	; 0x2d
 800baa2:	426d      	negs	r5, r5
 800baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa8:	485e      	ldr	r0, [pc, #376]	; (800bc24 <_printf_i+0x244>)
 800baaa:	230a      	movs	r3, #10
 800baac:	e019      	b.n	800bae2 <_printf_i+0x102>
 800baae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bab2:	6805      	ldr	r5, [r0, #0]
 800bab4:	600b      	str	r3, [r1, #0]
 800bab6:	bf18      	it	ne
 800bab8:	b22d      	sxthne	r5, r5
 800baba:	e7ef      	b.n	800ba9c <_printf_i+0xbc>
 800babc:	680b      	ldr	r3, [r1, #0]
 800babe:	6825      	ldr	r5, [r4, #0]
 800bac0:	1d18      	adds	r0, r3, #4
 800bac2:	6008      	str	r0, [r1, #0]
 800bac4:	0628      	lsls	r0, r5, #24
 800bac6:	d501      	bpl.n	800bacc <_printf_i+0xec>
 800bac8:	681d      	ldr	r5, [r3, #0]
 800baca:	e002      	b.n	800bad2 <_printf_i+0xf2>
 800bacc:	0669      	lsls	r1, r5, #25
 800bace:	d5fb      	bpl.n	800bac8 <_printf_i+0xe8>
 800bad0:	881d      	ldrh	r5, [r3, #0]
 800bad2:	4854      	ldr	r0, [pc, #336]	; (800bc24 <_printf_i+0x244>)
 800bad4:	2f6f      	cmp	r7, #111	; 0x6f
 800bad6:	bf0c      	ite	eq
 800bad8:	2308      	moveq	r3, #8
 800bada:	230a      	movne	r3, #10
 800badc:	2100      	movs	r1, #0
 800bade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bae2:	6866      	ldr	r6, [r4, #4]
 800bae4:	60a6      	str	r6, [r4, #8]
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	bfa2      	ittt	ge
 800baea:	6821      	ldrge	r1, [r4, #0]
 800baec:	f021 0104 	bicge.w	r1, r1, #4
 800baf0:	6021      	strge	r1, [r4, #0]
 800baf2:	b90d      	cbnz	r5, 800baf8 <_printf_i+0x118>
 800baf4:	2e00      	cmp	r6, #0
 800baf6:	d04d      	beq.n	800bb94 <_printf_i+0x1b4>
 800baf8:	4616      	mov	r6, r2
 800bafa:	fbb5 f1f3 	udiv	r1, r5, r3
 800bafe:	fb03 5711 	mls	r7, r3, r1, r5
 800bb02:	5dc7      	ldrb	r7, [r0, r7]
 800bb04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb08:	462f      	mov	r7, r5
 800bb0a:	42bb      	cmp	r3, r7
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	d9f4      	bls.n	800bafa <_printf_i+0x11a>
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d10b      	bne.n	800bb2c <_printf_i+0x14c>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	07df      	lsls	r7, r3, #31
 800bb18:	d508      	bpl.n	800bb2c <_printf_i+0x14c>
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	6861      	ldr	r1, [r4, #4]
 800bb1e:	4299      	cmp	r1, r3
 800bb20:	bfde      	ittt	le
 800bb22:	2330      	movle	r3, #48	; 0x30
 800bb24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb2c:	1b92      	subs	r2, r2, r6
 800bb2e:	6122      	str	r2, [r4, #16]
 800bb30:	f8cd a000 	str.w	sl, [sp]
 800bb34:	464b      	mov	r3, r9
 800bb36:	aa03      	add	r2, sp, #12
 800bb38:	4621      	mov	r1, r4
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	f7ff fee2 	bl	800b904 <_printf_common>
 800bb40:	3001      	adds	r0, #1
 800bb42:	d14c      	bne.n	800bbde <_printf_i+0x1fe>
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295
 800bb48:	b004      	add	sp, #16
 800bb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb4e:	4835      	ldr	r0, [pc, #212]	; (800bc24 <_printf_i+0x244>)
 800bb50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	680e      	ldr	r6, [r1, #0]
 800bb58:	061f      	lsls	r7, r3, #24
 800bb5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb5e:	600e      	str	r6, [r1, #0]
 800bb60:	d514      	bpl.n	800bb8c <_printf_i+0x1ac>
 800bb62:	07d9      	lsls	r1, r3, #31
 800bb64:	bf44      	itt	mi
 800bb66:	f043 0320 	orrmi.w	r3, r3, #32
 800bb6a:	6023      	strmi	r3, [r4, #0]
 800bb6c:	b91d      	cbnz	r5, 800bb76 <_printf_i+0x196>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	f023 0320 	bic.w	r3, r3, #32
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	2310      	movs	r3, #16
 800bb78:	e7b0      	b.n	800badc <_printf_i+0xfc>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	f043 0320 	orr.w	r3, r3, #32
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	2378      	movs	r3, #120	; 0x78
 800bb84:	4828      	ldr	r0, [pc, #160]	; (800bc28 <_printf_i+0x248>)
 800bb86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb8a:	e7e3      	b.n	800bb54 <_printf_i+0x174>
 800bb8c:	065e      	lsls	r6, r3, #25
 800bb8e:	bf48      	it	mi
 800bb90:	b2ad      	uxthmi	r5, r5
 800bb92:	e7e6      	b.n	800bb62 <_printf_i+0x182>
 800bb94:	4616      	mov	r6, r2
 800bb96:	e7bb      	b.n	800bb10 <_printf_i+0x130>
 800bb98:	680b      	ldr	r3, [r1, #0]
 800bb9a:	6826      	ldr	r6, [r4, #0]
 800bb9c:	6960      	ldr	r0, [r4, #20]
 800bb9e:	1d1d      	adds	r5, r3, #4
 800bba0:	600d      	str	r5, [r1, #0]
 800bba2:	0635      	lsls	r5, r6, #24
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	d501      	bpl.n	800bbac <_printf_i+0x1cc>
 800bba8:	6018      	str	r0, [r3, #0]
 800bbaa:	e002      	b.n	800bbb2 <_printf_i+0x1d2>
 800bbac:	0671      	lsls	r1, r6, #25
 800bbae:	d5fb      	bpl.n	800bba8 <_printf_i+0x1c8>
 800bbb0:	8018      	strh	r0, [r3, #0]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	4616      	mov	r6, r2
 800bbb8:	e7ba      	b.n	800bb30 <_printf_i+0x150>
 800bbba:	680b      	ldr	r3, [r1, #0]
 800bbbc:	1d1a      	adds	r2, r3, #4
 800bbbe:	600a      	str	r2, [r1, #0]
 800bbc0:	681e      	ldr	r6, [r3, #0]
 800bbc2:	6862      	ldr	r2, [r4, #4]
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7f4 fb22 	bl	8000210 <memchr>
 800bbcc:	b108      	cbz	r0, 800bbd2 <_printf_i+0x1f2>
 800bbce:	1b80      	subs	r0, r0, r6
 800bbd0:	6060      	str	r0, [r4, #4]
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	6123      	str	r3, [r4, #16]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbdc:	e7a8      	b.n	800bb30 <_printf_i+0x150>
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	47d0      	blx	sl
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d0ab      	beq.n	800bb44 <_printf_i+0x164>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	079b      	lsls	r3, r3, #30
 800bbf0:	d413      	bmi.n	800bc1a <_printf_i+0x23a>
 800bbf2:	68e0      	ldr	r0, [r4, #12]
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	4298      	cmp	r0, r3
 800bbf8:	bfb8      	it	lt
 800bbfa:	4618      	movlt	r0, r3
 800bbfc:	e7a4      	b.n	800bb48 <_printf_i+0x168>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4632      	mov	r2, r6
 800bc02:	4649      	mov	r1, r9
 800bc04:	4640      	mov	r0, r8
 800bc06:	47d0      	blx	sl
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d09b      	beq.n	800bb44 <_printf_i+0x164>
 800bc0c:	3501      	adds	r5, #1
 800bc0e:	68e3      	ldr	r3, [r4, #12]
 800bc10:	9903      	ldr	r1, [sp, #12]
 800bc12:	1a5b      	subs	r3, r3, r1
 800bc14:	42ab      	cmp	r3, r5
 800bc16:	dcf2      	bgt.n	800bbfe <_printf_i+0x21e>
 800bc18:	e7eb      	b.n	800bbf2 <_printf_i+0x212>
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	f104 0619 	add.w	r6, r4, #25
 800bc20:	e7f5      	b.n	800bc0e <_printf_i+0x22e>
 800bc22:	bf00      	nop
 800bc24:	0800cce1 	.word	0x0800cce1
 800bc28:	0800ccf2 	.word	0x0800ccf2

0800bc2c <_scanf_chars>:
 800bc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc30:	4615      	mov	r5, r2
 800bc32:	688a      	ldr	r2, [r1, #8]
 800bc34:	4680      	mov	r8, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	b932      	cbnz	r2, 800bc48 <_scanf_chars+0x1c>
 800bc3a:	698a      	ldr	r2, [r1, #24]
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	bf0c      	ite	eq
 800bc40:	2201      	moveq	r2, #1
 800bc42:	f04f 32ff 	movne.w	r2, #4294967295
 800bc46:	608a      	str	r2, [r1, #8]
 800bc48:	6822      	ldr	r2, [r4, #0]
 800bc4a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bcd8 <_scanf_chars+0xac>
 800bc4e:	06d1      	lsls	r1, r2, #27
 800bc50:	bf5f      	itttt	pl
 800bc52:	681a      	ldrpl	r2, [r3, #0]
 800bc54:	1d11      	addpl	r1, r2, #4
 800bc56:	6019      	strpl	r1, [r3, #0]
 800bc58:	6816      	ldrpl	r6, [r2, #0]
 800bc5a:	2700      	movs	r7, #0
 800bc5c:	69a0      	ldr	r0, [r4, #24]
 800bc5e:	b188      	cbz	r0, 800bc84 <_scanf_chars+0x58>
 800bc60:	2801      	cmp	r0, #1
 800bc62:	d107      	bne.n	800bc74 <_scanf_chars+0x48>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	6963      	ldr	r3, [r4, #20]
 800bc6a:	5c9b      	ldrb	r3, [r3, r2]
 800bc6c:	b953      	cbnz	r3, 800bc84 <_scanf_chars+0x58>
 800bc6e:	bb27      	cbnz	r7, 800bcba <_scanf_chars+0x8e>
 800bc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc74:	2802      	cmp	r0, #2
 800bc76:	d120      	bne.n	800bcba <_scanf_chars+0x8e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bc80:	071b      	lsls	r3, r3, #28
 800bc82:	d41a      	bmi.n	800bcba <_scanf_chars+0x8e>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	06da      	lsls	r2, r3, #27
 800bc88:	bf5e      	ittt	pl
 800bc8a:	682b      	ldrpl	r3, [r5, #0]
 800bc8c:	781b      	ldrbpl	r3, [r3, #0]
 800bc8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bc92:	682a      	ldr	r2, [r5, #0]
 800bc94:	686b      	ldr	r3, [r5, #4]
 800bc96:	3201      	adds	r2, #1
 800bc98:	602a      	str	r2, [r5, #0]
 800bc9a:	68a2      	ldr	r2, [r4, #8]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	606b      	str	r3, [r5, #4]
 800bca2:	3701      	adds	r7, #1
 800bca4:	60a2      	str	r2, [r4, #8]
 800bca6:	b142      	cbz	r2, 800bcba <_scanf_chars+0x8e>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	dcd7      	bgt.n	800bc5c <_scanf_chars+0x30>
 800bcac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4798      	blx	r3
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d0d0      	beq.n	800bc5c <_scanf_chars+0x30>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	f013 0310 	ands.w	r3, r3, #16
 800bcc0:	d105      	bne.n	800bcce <_scanf_chars+0xa2>
 800bcc2:	68e2      	ldr	r2, [r4, #12]
 800bcc4:	3201      	adds	r2, #1
 800bcc6:	60e2      	str	r2, [r4, #12]
 800bcc8:	69a2      	ldr	r2, [r4, #24]
 800bcca:	b102      	cbz	r2, 800bcce <_scanf_chars+0xa2>
 800bccc:	7033      	strb	r3, [r6, #0]
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	441f      	add	r7, r3
 800bcd2:	6127      	str	r7, [r4, #16]
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	e7cb      	b.n	800bc70 <_scanf_chars+0x44>
 800bcd8:	0800cd1f 	.word	0x0800cd1f

0800bcdc <_scanf_i>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	4698      	mov	r8, r3
 800bce2:	4b74      	ldr	r3, [pc, #464]	; (800beb4 <_scanf_i+0x1d8>)
 800bce4:	460c      	mov	r4, r1
 800bce6:	4682      	mov	sl, r0
 800bce8:	4616      	mov	r6, r2
 800bcea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	ab03      	add	r3, sp, #12
 800bcf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bcf6:	4b70      	ldr	r3, [pc, #448]	; (800beb8 <_scanf_i+0x1dc>)
 800bcf8:	69a1      	ldr	r1, [r4, #24]
 800bcfa:	4a70      	ldr	r2, [pc, #448]	; (800bebc <_scanf_i+0x1e0>)
 800bcfc:	2903      	cmp	r1, #3
 800bcfe:	bf18      	it	ne
 800bd00:	461a      	movne	r2, r3
 800bd02:	68a3      	ldr	r3, [r4, #8]
 800bd04:	9201      	str	r2, [sp, #4]
 800bd06:	1e5a      	subs	r2, r3, #1
 800bd08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd0c:	bf88      	it	hi
 800bd0e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd12:	4627      	mov	r7, r4
 800bd14:	bf82      	ittt	hi
 800bd16:	eb03 0905 	addhi.w	r9, r3, r5
 800bd1a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd1e:	60a3      	strhi	r3, [r4, #8]
 800bd20:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd24:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd28:	bf98      	it	ls
 800bd2a:	f04f 0900 	movls.w	r9, #0
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	463d      	mov	r5, r7
 800bd32:	f04f 0b00 	mov.w	fp, #0
 800bd36:	6831      	ldr	r1, [r6, #0]
 800bd38:	ab03      	add	r3, sp, #12
 800bd3a:	7809      	ldrb	r1, [r1, #0]
 800bd3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bd40:	2202      	movs	r2, #2
 800bd42:	f7f4 fa65 	bl	8000210 <memchr>
 800bd46:	b328      	cbz	r0, 800bd94 <_scanf_i+0xb8>
 800bd48:	f1bb 0f01 	cmp.w	fp, #1
 800bd4c:	d159      	bne.n	800be02 <_scanf_i+0x126>
 800bd4e:	6862      	ldr	r2, [r4, #4]
 800bd50:	b92a      	cbnz	r2, 800bd5e <_scanf_i+0x82>
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	2308      	movs	r3, #8
 800bd56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd5a:	6063      	str	r3, [r4, #4]
 800bd5c:	6022      	str	r2, [r4, #0]
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bd64:	6022      	str	r2, [r4, #0]
 800bd66:	68a2      	ldr	r2, [r4, #8]
 800bd68:	1e51      	subs	r1, r2, #1
 800bd6a:	60a1      	str	r1, [r4, #8]
 800bd6c:	b192      	cbz	r2, 800bd94 <_scanf_i+0xb8>
 800bd6e:	6832      	ldr	r2, [r6, #0]
 800bd70:	1c51      	adds	r1, r2, #1
 800bd72:	6031      	str	r1, [r6, #0]
 800bd74:	7812      	ldrb	r2, [r2, #0]
 800bd76:	f805 2b01 	strb.w	r2, [r5], #1
 800bd7a:	6872      	ldr	r2, [r6, #4]
 800bd7c:	3a01      	subs	r2, #1
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	6072      	str	r2, [r6, #4]
 800bd82:	dc07      	bgt.n	800bd94 <_scanf_i+0xb8>
 800bd84:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	4790      	blx	r2
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f040 8085 	bne.w	800be9e <_scanf_i+0x1c2>
 800bd94:	f10b 0b01 	add.w	fp, fp, #1
 800bd98:	f1bb 0f03 	cmp.w	fp, #3
 800bd9c:	d1cb      	bne.n	800bd36 <_scanf_i+0x5a>
 800bd9e:	6863      	ldr	r3, [r4, #4]
 800bda0:	b90b      	cbnz	r3, 800bda6 <_scanf_i+0xca>
 800bda2:	230a      	movs	r3, #10
 800bda4:	6063      	str	r3, [r4, #4]
 800bda6:	6863      	ldr	r3, [r4, #4]
 800bda8:	4945      	ldr	r1, [pc, #276]	; (800bec0 <_scanf_i+0x1e4>)
 800bdaa:	6960      	ldr	r0, [r4, #20]
 800bdac:	1ac9      	subs	r1, r1, r3
 800bdae:	f000 f8ab 	bl	800bf08 <__sccl>
 800bdb2:	f04f 0b00 	mov.w	fp, #0
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	6822      	ldr	r2, [r4, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d03d      	beq.n	800be3a <_scanf_i+0x15e>
 800bdbe:	6831      	ldr	r1, [r6, #0]
 800bdc0:	6960      	ldr	r0, [r4, #20]
 800bdc2:	f891 c000 	ldrb.w	ip, [r1]
 800bdc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d035      	beq.n	800be3a <_scanf_i+0x15e>
 800bdce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bdd2:	d124      	bne.n	800be1e <_scanf_i+0x142>
 800bdd4:	0510      	lsls	r0, r2, #20
 800bdd6:	d522      	bpl.n	800be1e <_scanf_i+0x142>
 800bdd8:	f10b 0b01 	add.w	fp, fp, #1
 800bddc:	f1b9 0f00 	cmp.w	r9, #0
 800bde0:	d003      	beq.n	800bdea <_scanf_i+0x10e>
 800bde2:	3301      	adds	r3, #1
 800bde4:	f109 39ff 	add.w	r9, r9, #4294967295
 800bde8:	60a3      	str	r3, [r4, #8]
 800bdea:	6873      	ldr	r3, [r6, #4]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	6073      	str	r3, [r6, #4]
 800bdf2:	dd1b      	ble.n	800be2c <_scanf_i+0x150>
 800bdf4:	6833      	ldr	r3, [r6, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	6033      	str	r3, [r6, #0]
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	e7d9      	b.n	800bdb6 <_scanf_i+0xda>
 800be02:	f1bb 0f02 	cmp.w	fp, #2
 800be06:	d1ae      	bne.n	800bd66 <_scanf_i+0x8a>
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be12:	d1bf      	bne.n	800bd94 <_scanf_i+0xb8>
 800be14:	2310      	movs	r3, #16
 800be16:	6063      	str	r3, [r4, #4]
 800be18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be1c:	e7a2      	b.n	800bd64 <_scanf_i+0x88>
 800be1e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be22:	6022      	str	r2, [r4, #0]
 800be24:	780b      	ldrb	r3, [r1, #0]
 800be26:	f805 3b01 	strb.w	r3, [r5], #1
 800be2a:	e7de      	b.n	800bdea <_scanf_i+0x10e>
 800be2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be30:	4631      	mov	r1, r6
 800be32:	4650      	mov	r0, sl
 800be34:	4798      	blx	r3
 800be36:	2800      	cmp	r0, #0
 800be38:	d0df      	beq.n	800bdfa <_scanf_i+0x11e>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	05d9      	lsls	r1, r3, #23
 800be3e:	d50d      	bpl.n	800be5c <_scanf_i+0x180>
 800be40:	42bd      	cmp	r5, r7
 800be42:	d909      	bls.n	800be58 <_scanf_i+0x17c>
 800be44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800be48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be4c:	4632      	mov	r2, r6
 800be4e:	4650      	mov	r0, sl
 800be50:	4798      	blx	r3
 800be52:	f105 39ff 	add.w	r9, r5, #4294967295
 800be56:	464d      	mov	r5, r9
 800be58:	42bd      	cmp	r5, r7
 800be5a:	d028      	beq.n	800beae <_scanf_i+0x1d2>
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	f012 0210 	ands.w	r2, r2, #16
 800be62:	d113      	bne.n	800be8c <_scanf_i+0x1b0>
 800be64:	702a      	strb	r2, [r5, #0]
 800be66:	6863      	ldr	r3, [r4, #4]
 800be68:	9e01      	ldr	r6, [sp, #4]
 800be6a:	4639      	mov	r1, r7
 800be6c:	4650      	mov	r0, sl
 800be6e:	47b0      	blx	r6
 800be70:	f8d8 3000 	ldr.w	r3, [r8]
 800be74:	6821      	ldr	r1, [r4, #0]
 800be76:	1d1a      	adds	r2, r3, #4
 800be78:	f8c8 2000 	str.w	r2, [r8]
 800be7c:	f011 0f20 	tst.w	r1, #32
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	d00f      	beq.n	800bea4 <_scanf_i+0x1c8>
 800be84:	6018      	str	r0, [r3, #0]
 800be86:	68e3      	ldr	r3, [r4, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	60e3      	str	r3, [r4, #12]
 800be8c:	1bed      	subs	r5, r5, r7
 800be8e:	44ab      	add	fp, r5
 800be90:	6925      	ldr	r5, [r4, #16]
 800be92:	445d      	add	r5, fp
 800be94:	6125      	str	r5, [r4, #16]
 800be96:	2000      	movs	r0, #0
 800be98:	b007      	add	sp, #28
 800be9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9e:	f04f 0b00 	mov.w	fp, #0
 800bea2:	e7ca      	b.n	800be3a <_scanf_i+0x15e>
 800bea4:	07ca      	lsls	r2, r1, #31
 800bea6:	bf4c      	ite	mi
 800bea8:	8018      	strhmi	r0, [r3, #0]
 800beaa:	6018      	strpl	r0, [r3, #0]
 800beac:	e7eb      	b.n	800be86 <_scanf_i+0x1aa>
 800beae:	2001      	movs	r0, #1
 800beb0:	e7f2      	b.n	800be98 <_scanf_i+0x1bc>
 800beb2:	bf00      	nop
 800beb4:	0800cc28 	.word	0x0800cc28
 800beb8:	0800c181 	.word	0x0800c181
 800bebc:	0800c085 	.word	0x0800c085
 800bec0:	0800cd1c 	.word	0x0800cd1c

0800bec4 <_read_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4d07      	ldr	r5, [pc, #28]	; (800bee4 <_read_r+0x20>)
 800bec8:	4604      	mov	r4, r0
 800beca:	4608      	mov	r0, r1
 800becc:	4611      	mov	r1, r2
 800bece:	2200      	movs	r2, #0
 800bed0:	602a      	str	r2, [r5, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	f7f6 fbec 	bl	80026b0 <_read>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_read_r+0x1e>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_read_r+0x1e>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20000b20 	.word	0x20000b20

0800bee8 <_sbrk_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_sbrk_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f6 fc4a 	bl	800278c <_sbrk>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_sbrk_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_sbrk_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20000b20 	.word	0x20000b20

0800bf08 <__sccl>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	780b      	ldrb	r3, [r1, #0]
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	2b5e      	cmp	r3, #94	; 0x5e
 800bf10:	bf0b      	itete	eq
 800bf12:	784b      	ldrbeq	r3, [r1, #1]
 800bf14:	1c48      	addne	r0, r1, #1
 800bf16:	1c88      	addeq	r0, r1, #2
 800bf18:	2200      	movne	r2, #0
 800bf1a:	bf08      	it	eq
 800bf1c:	2201      	moveq	r2, #1
 800bf1e:	1e61      	subs	r1, r4, #1
 800bf20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bf24:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bf28:	42a9      	cmp	r1, r5
 800bf2a:	d1fb      	bne.n	800bf24 <__sccl+0x1c>
 800bf2c:	b90b      	cbnz	r3, 800bf32 <__sccl+0x2a>
 800bf2e:	3801      	subs	r0, #1
 800bf30:	bd70      	pop	{r4, r5, r6, pc}
 800bf32:	f082 0101 	eor.w	r1, r2, #1
 800bf36:	54e1      	strb	r1, [r4, r3]
 800bf38:	1c42      	adds	r2, r0, #1
 800bf3a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bf3e:	2d2d      	cmp	r5, #45	; 0x2d
 800bf40:	f102 36ff 	add.w	r6, r2, #4294967295
 800bf44:	4610      	mov	r0, r2
 800bf46:	d006      	beq.n	800bf56 <__sccl+0x4e>
 800bf48:	2d5d      	cmp	r5, #93	; 0x5d
 800bf4a:	d0f1      	beq.n	800bf30 <__sccl+0x28>
 800bf4c:	b90d      	cbnz	r5, 800bf52 <__sccl+0x4a>
 800bf4e:	4630      	mov	r0, r6
 800bf50:	e7ee      	b.n	800bf30 <__sccl+0x28>
 800bf52:	462b      	mov	r3, r5
 800bf54:	e7ef      	b.n	800bf36 <__sccl+0x2e>
 800bf56:	7816      	ldrb	r6, [r2, #0]
 800bf58:	2e5d      	cmp	r6, #93	; 0x5d
 800bf5a:	d0fa      	beq.n	800bf52 <__sccl+0x4a>
 800bf5c:	42b3      	cmp	r3, r6
 800bf5e:	dcf8      	bgt.n	800bf52 <__sccl+0x4a>
 800bf60:	4618      	mov	r0, r3
 800bf62:	3001      	adds	r0, #1
 800bf64:	4286      	cmp	r6, r0
 800bf66:	5421      	strb	r1, [r4, r0]
 800bf68:	dcfb      	bgt.n	800bf62 <__sccl+0x5a>
 800bf6a:	43d8      	mvns	r0, r3
 800bf6c:	4430      	add	r0, r6
 800bf6e:	1c5d      	adds	r5, r3, #1
 800bf70:	42b3      	cmp	r3, r6
 800bf72:	bfa8      	it	ge
 800bf74:	2000      	movge	r0, #0
 800bf76:	182b      	adds	r3, r5, r0
 800bf78:	3202      	adds	r2, #2
 800bf7a:	e7de      	b.n	800bf3a <__sccl+0x32>

0800bf7c <_strtol_l.isra.0>:
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf82:	d001      	beq.n	800bf88 <_strtol_l.isra.0+0xc>
 800bf84:	2b24      	cmp	r3, #36	; 0x24
 800bf86:	d906      	bls.n	800bf96 <_strtol_l.isra.0+0x1a>
 800bf88:	f7fe fdd2 	bl	800ab30 <__errno>
 800bf8c:	2316      	movs	r3, #22
 800bf8e:	6003      	str	r3, [r0, #0]
 800bf90:	2000      	movs	r0, #0
 800bf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf96:	4f3a      	ldr	r7, [pc, #232]	; (800c080 <_strtol_l.isra.0+0x104>)
 800bf98:	468e      	mov	lr, r1
 800bf9a:	4676      	mov	r6, lr
 800bf9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bfa0:	5de5      	ldrb	r5, [r4, r7]
 800bfa2:	f015 0508 	ands.w	r5, r5, #8
 800bfa6:	d1f8      	bne.n	800bf9a <_strtol_l.isra.0+0x1e>
 800bfa8:	2c2d      	cmp	r4, #45	; 0x2d
 800bfaa:	d134      	bne.n	800c016 <_strtol_l.isra.0+0x9a>
 800bfac:	f89e 4000 	ldrb.w	r4, [lr]
 800bfb0:	f04f 0801 	mov.w	r8, #1
 800bfb4:	f106 0e02 	add.w	lr, r6, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d05c      	beq.n	800c076 <_strtol_l.isra.0+0xfa>
 800bfbc:	2b10      	cmp	r3, #16
 800bfbe:	d10c      	bne.n	800bfda <_strtol_l.isra.0+0x5e>
 800bfc0:	2c30      	cmp	r4, #48	; 0x30
 800bfc2:	d10a      	bne.n	800bfda <_strtol_l.isra.0+0x5e>
 800bfc4:	f89e 4000 	ldrb.w	r4, [lr]
 800bfc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bfcc:	2c58      	cmp	r4, #88	; 0x58
 800bfce:	d14d      	bne.n	800c06c <_strtol_l.isra.0+0xf0>
 800bfd0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bfd4:	2310      	movs	r3, #16
 800bfd6:	f10e 0e02 	add.w	lr, lr, #2
 800bfda:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bfde:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfe2:	2600      	movs	r6, #0
 800bfe4:	fbbc f9f3 	udiv	r9, ip, r3
 800bfe8:	4635      	mov	r5, r6
 800bfea:	fb03 ca19 	mls	sl, r3, r9, ip
 800bfee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bff2:	2f09      	cmp	r7, #9
 800bff4:	d818      	bhi.n	800c028 <_strtol_l.isra.0+0xac>
 800bff6:	463c      	mov	r4, r7
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	dd24      	ble.n	800c046 <_strtol_l.isra.0+0xca>
 800bffc:	2e00      	cmp	r6, #0
 800bffe:	db1f      	blt.n	800c040 <_strtol_l.isra.0+0xc4>
 800c000:	45a9      	cmp	r9, r5
 800c002:	d31d      	bcc.n	800c040 <_strtol_l.isra.0+0xc4>
 800c004:	d101      	bne.n	800c00a <_strtol_l.isra.0+0x8e>
 800c006:	45a2      	cmp	sl, r4
 800c008:	db1a      	blt.n	800c040 <_strtol_l.isra.0+0xc4>
 800c00a:	fb05 4503 	mla	r5, r5, r3, r4
 800c00e:	2601      	movs	r6, #1
 800c010:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c014:	e7eb      	b.n	800bfee <_strtol_l.isra.0+0x72>
 800c016:	2c2b      	cmp	r4, #43	; 0x2b
 800c018:	bf08      	it	eq
 800c01a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c01e:	46a8      	mov	r8, r5
 800c020:	bf08      	it	eq
 800c022:	f106 0e02 	addeq.w	lr, r6, #2
 800c026:	e7c7      	b.n	800bfb8 <_strtol_l.isra.0+0x3c>
 800c028:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c02c:	2f19      	cmp	r7, #25
 800c02e:	d801      	bhi.n	800c034 <_strtol_l.isra.0+0xb8>
 800c030:	3c37      	subs	r4, #55	; 0x37
 800c032:	e7e1      	b.n	800bff8 <_strtol_l.isra.0+0x7c>
 800c034:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c038:	2f19      	cmp	r7, #25
 800c03a:	d804      	bhi.n	800c046 <_strtol_l.isra.0+0xca>
 800c03c:	3c57      	subs	r4, #87	; 0x57
 800c03e:	e7db      	b.n	800bff8 <_strtol_l.isra.0+0x7c>
 800c040:	f04f 36ff 	mov.w	r6, #4294967295
 800c044:	e7e4      	b.n	800c010 <_strtol_l.isra.0+0x94>
 800c046:	2e00      	cmp	r6, #0
 800c048:	da05      	bge.n	800c056 <_strtol_l.isra.0+0xda>
 800c04a:	2322      	movs	r3, #34	; 0x22
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	4665      	mov	r5, ip
 800c050:	b942      	cbnz	r2, 800c064 <_strtol_l.isra.0+0xe8>
 800c052:	4628      	mov	r0, r5
 800c054:	e79d      	b.n	800bf92 <_strtol_l.isra.0+0x16>
 800c056:	f1b8 0f00 	cmp.w	r8, #0
 800c05a:	d000      	beq.n	800c05e <_strtol_l.isra.0+0xe2>
 800c05c:	426d      	negs	r5, r5
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d0f7      	beq.n	800c052 <_strtol_l.isra.0+0xd6>
 800c062:	b10e      	cbz	r6, 800c068 <_strtol_l.isra.0+0xec>
 800c064:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c068:	6011      	str	r1, [r2, #0]
 800c06a:	e7f2      	b.n	800c052 <_strtol_l.isra.0+0xd6>
 800c06c:	2430      	movs	r4, #48	; 0x30
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1b3      	bne.n	800bfda <_strtol_l.isra.0+0x5e>
 800c072:	2308      	movs	r3, #8
 800c074:	e7b1      	b.n	800bfda <_strtol_l.isra.0+0x5e>
 800c076:	2c30      	cmp	r4, #48	; 0x30
 800c078:	d0a4      	beq.n	800bfc4 <_strtol_l.isra.0+0x48>
 800c07a:	230a      	movs	r3, #10
 800c07c:	e7ad      	b.n	800bfda <_strtol_l.isra.0+0x5e>
 800c07e:	bf00      	nop
 800c080:	0800cd1f 	.word	0x0800cd1f

0800c084 <_strtol_r>:
 800c084:	f7ff bf7a 	b.w	800bf7c <_strtol_l.isra.0>

0800c088 <_strtoul_l.isra.0>:
 800c088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c08c:	4e3b      	ldr	r6, [pc, #236]	; (800c17c <_strtoul_l.isra.0+0xf4>)
 800c08e:	4686      	mov	lr, r0
 800c090:	468c      	mov	ip, r1
 800c092:	4660      	mov	r0, ip
 800c094:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c098:	5da5      	ldrb	r5, [r4, r6]
 800c09a:	f015 0508 	ands.w	r5, r5, #8
 800c09e:	d1f8      	bne.n	800c092 <_strtoul_l.isra.0+0xa>
 800c0a0:	2c2d      	cmp	r4, #45	; 0x2d
 800c0a2:	d134      	bne.n	800c10e <_strtoul_l.isra.0+0x86>
 800c0a4:	f89c 4000 	ldrb.w	r4, [ip]
 800c0a8:	f04f 0801 	mov.w	r8, #1
 800c0ac:	f100 0c02 	add.w	ip, r0, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d05e      	beq.n	800c172 <_strtoul_l.isra.0+0xea>
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d10c      	bne.n	800c0d2 <_strtoul_l.isra.0+0x4a>
 800c0b8:	2c30      	cmp	r4, #48	; 0x30
 800c0ba:	d10a      	bne.n	800c0d2 <_strtoul_l.isra.0+0x4a>
 800c0bc:	f89c 0000 	ldrb.w	r0, [ip]
 800c0c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0c4:	2858      	cmp	r0, #88	; 0x58
 800c0c6:	d14f      	bne.n	800c168 <_strtoul_l.isra.0+0xe0>
 800c0c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c0cc:	2310      	movs	r3, #16
 800c0ce:	f10c 0c02 	add.w	ip, ip, #2
 800c0d2:	f04f 37ff 	mov.w	r7, #4294967295
 800c0d6:	2500      	movs	r5, #0
 800c0d8:	fbb7 f7f3 	udiv	r7, r7, r3
 800c0dc:	fb03 f907 	mul.w	r9, r3, r7
 800c0e0:	ea6f 0909 	mvn.w	r9, r9
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c0ea:	2e09      	cmp	r6, #9
 800c0ec:	d818      	bhi.n	800c120 <_strtoul_l.isra.0+0x98>
 800c0ee:	4634      	mov	r4, r6
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	dd24      	ble.n	800c13e <_strtoul_l.isra.0+0xb6>
 800c0f4:	2d00      	cmp	r5, #0
 800c0f6:	db1f      	blt.n	800c138 <_strtoul_l.isra.0+0xb0>
 800c0f8:	4287      	cmp	r7, r0
 800c0fa:	d31d      	bcc.n	800c138 <_strtoul_l.isra.0+0xb0>
 800c0fc:	d101      	bne.n	800c102 <_strtoul_l.isra.0+0x7a>
 800c0fe:	45a1      	cmp	r9, r4
 800c100:	db1a      	blt.n	800c138 <_strtoul_l.isra.0+0xb0>
 800c102:	fb00 4003 	mla	r0, r0, r3, r4
 800c106:	2501      	movs	r5, #1
 800c108:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c10c:	e7eb      	b.n	800c0e6 <_strtoul_l.isra.0+0x5e>
 800c10e:	2c2b      	cmp	r4, #43	; 0x2b
 800c110:	bf08      	it	eq
 800c112:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c116:	46a8      	mov	r8, r5
 800c118:	bf08      	it	eq
 800c11a:	f100 0c02 	addeq.w	ip, r0, #2
 800c11e:	e7c7      	b.n	800c0b0 <_strtoul_l.isra.0+0x28>
 800c120:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c124:	2e19      	cmp	r6, #25
 800c126:	d801      	bhi.n	800c12c <_strtoul_l.isra.0+0xa4>
 800c128:	3c37      	subs	r4, #55	; 0x37
 800c12a:	e7e1      	b.n	800c0f0 <_strtoul_l.isra.0+0x68>
 800c12c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c130:	2e19      	cmp	r6, #25
 800c132:	d804      	bhi.n	800c13e <_strtoul_l.isra.0+0xb6>
 800c134:	3c57      	subs	r4, #87	; 0x57
 800c136:	e7db      	b.n	800c0f0 <_strtoul_l.isra.0+0x68>
 800c138:	f04f 35ff 	mov.w	r5, #4294967295
 800c13c:	e7e4      	b.n	800c108 <_strtoul_l.isra.0+0x80>
 800c13e:	2d00      	cmp	r5, #0
 800c140:	da07      	bge.n	800c152 <_strtoul_l.isra.0+0xca>
 800c142:	2322      	movs	r3, #34	; 0x22
 800c144:	f8ce 3000 	str.w	r3, [lr]
 800c148:	f04f 30ff 	mov.w	r0, #4294967295
 800c14c:	b942      	cbnz	r2, 800c160 <_strtoul_l.isra.0+0xd8>
 800c14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c152:	f1b8 0f00 	cmp.w	r8, #0
 800c156:	d000      	beq.n	800c15a <_strtoul_l.isra.0+0xd2>
 800c158:	4240      	negs	r0, r0
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	d0f7      	beq.n	800c14e <_strtoul_l.isra.0+0xc6>
 800c15e:	b10d      	cbz	r5, 800c164 <_strtoul_l.isra.0+0xdc>
 800c160:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c164:	6011      	str	r1, [r2, #0]
 800c166:	e7f2      	b.n	800c14e <_strtoul_l.isra.0+0xc6>
 800c168:	2430      	movs	r4, #48	; 0x30
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1b1      	bne.n	800c0d2 <_strtoul_l.isra.0+0x4a>
 800c16e:	2308      	movs	r3, #8
 800c170:	e7af      	b.n	800c0d2 <_strtoul_l.isra.0+0x4a>
 800c172:	2c30      	cmp	r4, #48	; 0x30
 800c174:	d0a2      	beq.n	800c0bc <_strtoul_l.isra.0+0x34>
 800c176:	230a      	movs	r3, #10
 800c178:	e7ab      	b.n	800c0d2 <_strtoul_l.isra.0+0x4a>
 800c17a:	bf00      	nop
 800c17c:	0800cd1f 	.word	0x0800cd1f

0800c180 <_strtoul_r>:
 800c180:	f7ff bf82 	b.w	800c088 <_strtoul_l.isra.0>

0800c184 <__submore>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c190:	4299      	cmp	r1, r3
 800c192:	d11d      	bne.n	800c1d0 <__submore+0x4c>
 800c194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c198:	f7fe fed2 	bl	800af40 <_malloc_r>
 800c19c:	b918      	cbnz	r0, 800c1a6 <__submore+0x22>
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c1b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c1b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c1b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c1be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c1c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c1ca:	6020      	str	r0, [r4, #0]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e7e8      	b.n	800c1a2 <__submore+0x1e>
 800c1d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c1d2:	0077      	lsls	r7, r6, #1
 800c1d4:	463a      	mov	r2, r7
 800c1d6:	f000 fa79 	bl	800c6cc <_realloc_r>
 800c1da:	4605      	mov	r5, r0
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d0de      	beq.n	800c19e <__submore+0x1a>
 800c1e0:	eb00 0806 	add.w	r8, r0, r6
 800c1e4:	4601      	mov	r1, r0
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	f000 f9eb 	bl	800c5c4 <memcpy>
 800c1ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c1f2:	f8c4 8000 	str.w	r8, [r4]
 800c1f6:	e7e9      	b.n	800c1cc <__submore+0x48>

0800c1f8 <__swbuf_r>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	460e      	mov	r6, r1
 800c1fc:	4614      	mov	r4, r2
 800c1fe:	4605      	mov	r5, r0
 800c200:	b118      	cbz	r0, 800c20a <__swbuf_r+0x12>
 800c202:	6983      	ldr	r3, [r0, #24]
 800c204:	b90b      	cbnz	r3, 800c20a <__swbuf_r+0x12>
 800c206:	f7fe fde9 	bl	800addc <__sinit>
 800c20a:	4b21      	ldr	r3, [pc, #132]	; (800c290 <__swbuf_r+0x98>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d12b      	bne.n	800c268 <__swbuf_r+0x70>
 800c210:	686c      	ldr	r4, [r5, #4]
 800c212:	69a3      	ldr	r3, [r4, #24]
 800c214:	60a3      	str	r3, [r4, #8]
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	071a      	lsls	r2, r3, #28
 800c21a:	d52f      	bpl.n	800c27c <__swbuf_r+0x84>
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	b36b      	cbz	r3, 800c27c <__swbuf_r+0x84>
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	6820      	ldr	r0, [r4, #0]
 800c224:	1ac0      	subs	r0, r0, r3
 800c226:	6963      	ldr	r3, [r4, #20]
 800c228:	b2f6      	uxtb	r6, r6
 800c22a:	4283      	cmp	r3, r0
 800c22c:	4637      	mov	r7, r6
 800c22e:	dc04      	bgt.n	800c23a <__swbuf_r+0x42>
 800c230:	4621      	mov	r1, r4
 800c232:	4628      	mov	r0, r5
 800c234:	f000 f926 	bl	800c484 <_fflush_r>
 800c238:	bb30      	cbnz	r0, 800c288 <__swbuf_r+0x90>
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	60a3      	str	r3, [r4, #8]
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	6022      	str	r2, [r4, #0]
 800c246:	701e      	strb	r6, [r3, #0]
 800c248:	6963      	ldr	r3, [r4, #20]
 800c24a:	3001      	adds	r0, #1
 800c24c:	4283      	cmp	r3, r0
 800c24e:	d004      	beq.n	800c25a <__swbuf_r+0x62>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	07db      	lsls	r3, r3, #31
 800c254:	d506      	bpl.n	800c264 <__swbuf_r+0x6c>
 800c256:	2e0a      	cmp	r6, #10
 800c258:	d104      	bne.n	800c264 <__swbuf_r+0x6c>
 800c25a:	4621      	mov	r1, r4
 800c25c:	4628      	mov	r0, r5
 800c25e:	f000 f911 	bl	800c484 <_fflush_r>
 800c262:	b988      	cbnz	r0, 800c288 <__swbuf_r+0x90>
 800c264:	4638      	mov	r0, r7
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <__swbuf_r+0x9c>)
 800c26a:	429c      	cmp	r4, r3
 800c26c:	d101      	bne.n	800c272 <__swbuf_r+0x7a>
 800c26e:	68ac      	ldr	r4, [r5, #8]
 800c270:	e7cf      	b.n	800c212 <__swbuf_r+0x1a>
 800c272:	4b09      	ldr	r3, [pc, #36]	; (800c298 <__swbuf_r+0xa0>)
 800c274:	429c      	cmp	r4, r3
 800c276:	bf08      	it	eq
 800c278:	68ec      	ldreq	r4, [r5, #12]
 800c27a:	e7ca      	b.n	800c212 <__swbuf_r+0x1a>
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f000 f80c 	bl	800c29c <__swsetup_r>
 800c284:	2800      	cmp	r0, #0
 800c286:	d0cb      	beq.n	800c220 <__swbuf_r+0x28>
 800c288:	f04f 37ff 	mov.w	r7, #4294967295
 800c28c:	e7ea      	b.n	800c264 <__swbuf_r+0x6c>
 800c28e:	bf00      	nop
 800c290:	0800cc90 	.word	0x0800cc90
 800c294:	0800ccb0 	.word	0x0800ccb0
 800c298:	0800cc70 	.word	0x0800cc70

0800c29c <__swsetup_r>:
 800c29c:	4b32      	ldr	r3, [pc, #200]	; (800c368 <__swsetup_r+0xcc>)
 800c29e:	b570      	push	{r4, r5, r6, lr}
 800c2a0:	681d      	ldr	r5, [r3, #0]
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	b125      	cbz	r5, 800c2b2 <__swsetup_r+0x16>
 800c2a8:	69ab      	ldr	r3, [r5, #24]
 800c2aa:	b913      	cbnz	r3, 800c2b2 <__swsetup_r+0x16>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fe fd95 	bl	800addc <__sinit>
 800c2b2:	4b2e      	ldr	r3, [pc, #184]	; (800c36c <__swsetup_r+0xd0>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	d10f      	bne.n	800c2d8 <__swsetup_r+0x3c>
 800c2b8:	686c      	ldr	r4, [r5, #4]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	d42c      	bmi.n	800c31e <__swsetup_r+0x82>
 800c2c4:	06dd      	lsls	r5, r3, #27
 800c2c6:	d411      	bmi.n	800c2ec <__swsetup_r+0x50>
 800c2c8:	2309      	movs	r3, #9
 800c2ca:	6033      	str	r3, [r6, #0]
 800c2cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d6:	e03e      	b.n	800c356 <__swsetup_r+0xba>
 800c2d8:	4b25      	ldr	r3, [pc, #148]	; (800c370 <__swsetup_r+0xd4>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d101      	bne.n	800c2e2 <__swsetup_r+0x46>
 800c2de:	68ac      	ldr	r4, [r5, #8]
 800c2e0:	e7eb      	b.n	800c2ba <__swsetup_r+0x1e>
 800c2e2:	4b24      	ldr	r3, [pc, #144]	; (800c374 <__swsetup_r+0xd8>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	bf08      	it	eq
 800c2e8:	68ec      	ldreq	r4, [r5, #12]
 800c2ea:	e7e6      	b.n	800c2ba <__swsetup_r+0x1e>
 800c2ec:	0758      	lsls	r0, r3, #29
 800c2ee:	d512      	bpl.n	800c316 <__swsetup_r+0x7a>
 800c2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f2:	b141      	cbz	r1, 800c306 <__swsetup_r+0x6a>
 800c2f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	d002      	beq.n	800c302 <__swsetup_r+0x66>
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 f995 	bl	800c62c <_free_r>
 800c302:	2300      	movs	r3, #0
 800c304:	6363      	str	r3, [r4, #52]	; 0x34
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	2300      	movs	r3, #0
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f043 0308 	orr.w	r3, r3, #8
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	b94b      	cbnz	r3, 800c336 <__swsetup_r+0x9a>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32c:	d003      	beq.n	800c336 <__swsetup_r+0x9a>
 800c32e:	4621      	mov	r1, r4
 800c330:	4630      	mov	r0, r6
 800c332:	f000 f907 	bl	800c544 <__smakebuf_r>
 800c336:	89a0      	ldrh	r0, [r4, #12]
 800c338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c33c:	f010 0301 	ands.w	r3, r0, #1
 800c340:	d00a      	beq.n	800c358 <__swsetup_r+0xbc>
 800c342:	2300      	movs	r3, #0
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	6963      	ldr	r3, [r4, #20]
 800c348:	425b      	negs	r3, r3
 800c34a:	61a3      	str	r3, [r4, #24]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	b943      	cbnz	r3, 800c362 <__swsetup_r+0xc6>
 800c350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c354:	d1ba      	bne.n	800c2cc <__swsetup_r+0x30>
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	0781      	lsls	r1, r0, #30
 800c35a:	bf58      	it	pl
 800c35c:	6963      	ldrpl	r3, [r4, #20]
 800c35e:	60a3      	str	r3, [r4, #8]
 800c360:	e7f4      	b.n	800c34c <__swsetup_r+0xb0>
 800c362:	2000      	movs	r0, #0
 800c364:	e7f7      	b.n	800c356 <__swsetup_r+0xba>
 800c366:	bf00      	nop
 800c368:	20000088 	.word	0x20000088
 800c36c:	0800cc90 	.word	0x0800cc90
 800c370:	0800ccb0 	.word	0x0800ccb0
 800c374:	0800cc70 	.word	0x0800cc70

0800c378 <__sflush_r>:
 800c378:	898a      	ldrh	r2, [r1, #12]
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	4605      	mov	r5, r0
 800c380:	0710      	lsls	r0, r2, #28
 800c382:	460c      	mov	r4, r1
 800c384:	d458      	bmi.n	800c438 <__sflush_r+0xc0>
 800c386:	684b      	ldr	r3, [r1, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc05      	bgt.n	800c398 <__sflush_r+0x20>
 800c38c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	dc02      	bgt.n	800c398 <__sflush_r+0x20>
 800c392:	2000      	movs	r0, #0
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39a:	2e00      	cmp	r6, #0
 800c39c:	d0f9      	beq.n	800c392 <__sflush_r+0x1a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a4:	682f      	ldr	r7, [r5, #0]
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	d032      	beq.n	800c410 <__sflush_r+0x98>
 800c3aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	075a      	lsls	r2, r3, #29
 800c3b0:	d505      	bpl.n	800c3be <__sflush_r+0x46>
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	1ac0      	subs	r0, r0, r3
 800c3b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3b8:	b10b      	cbz	r3, 800c3be <__sflush_r+0x46>
 800c3ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3bc:	1ac0      	subs	r0, r0, r3
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c4:	6a21      	ldr	r1, [r4, #32]
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	47b0      	blx	r6
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	d106      	bne.n	800c3de <__sflush_r+0x66>
 800c3d0:	6829      	ldr	r1, [r5, #0]
 800c3d2:	291d      	cmp	r1, #29
 800c3d4:	d82c      	bhi.n	800c430 <__sflush_r+0xb8>
 800c3d6:	4a2a      	ldr	r2, [pc, #168]	; (800c480 <__sflush_r+0x108>)
 800c3d8:	40ca      	lsrs	r2, r1
 800c3da:	07d6      	lsls	r6, r2, #31
 800c3dc:	d528      	bpl.n	800c430 <__sflush_r+0xb8>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	6062      	str	r2, [r4, #4]
 800c3e2:	04d9      	lsls	r1, r3, #19
 800c3e4:	6922      	ldr	r2, [r4, #16]
 800c3e6:	6022      	str	r2, [r4, #0]
 800c3e8:	d504      	bpl.n	800c3f4 <__sflush_r+0x7c>
 800c3ea:	1c42      	adds	r2, r0, #1
 800c3ec:	d101      	bne.n	800c3f2 <__sflush_r+0x7a>
 800c3ee:	682b      	ldr	r3, [r5, #0]
 800c3f0:	b903      	cbnz	r3, 800c3f4 <__sflush_r+0x7c>
 800c3f2:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f6:	602f      	str	r7, [r5, #0]
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d0ca      	beq.n	800c392 <__sflush_r+0x1a>
 800c3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c400:	4299      	cmp	r1, r3
 800c402:	d002      	beq.n	800c40a <__sflush_r+0x92>
 800c404:	4628      	mov	r0, r5
 800c406:	f000 f911 	bl	800c62c <_free_r>
 800c40a:	2000      	movs	r0, #0
 800c40c:	6360      	str	r0, [r4, #52]	; 0x34
 800c40e:	e7c1      	b.n	800c394 <__sflush_r+0x1c>
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	2301      	movs	r3, #1
 800c414:	4628      	mov	r0, r5
 800c416:	47b0      	blx	r6
 800c418:	1c41      	adds	r1, r0, #1
 800c41a:	d1c7      	bne.n	800c3ac <__sflush_r+0x34>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0c4      	beq.n	800c3ac <__sflush_r+0x34>
 800c422:	2b1d      	cmp	r3, #29
 800c424:	d001      	beq.n	800c42a <__sflush_r+0xb2>
 800c426:	2b16      	cmp	r3, #22
 800c428:	d101      	bne.n	800c42e <__sflush_r+0xb6>
 800c42a:	602f      	str	r7, [r5, #0]
 800c42c:	e7b1      	b.n	800c392 <__sflush_r+0x1a>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	e7ad      	b.n	800c394 <__sflush_r+0x1c>
 800c438:	690f      	ldr	r7, [r1, #16]
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	d0a9      	beq.n	800c392 <__sflush_r+0x1a>
 800c43e:	0793      	lsls	r3, r2, #30
 800c440:	680e      	ldr	r6, [r1, #0]
 800c442:	bf08      	it	eq
 800c444:	694b      	ldreq	r3, [r1, #20]
 800c446:	600f      	str	r7, [r1, #0]
 800c448:	bf18      	it	ne
 800c44a:	2300      	movne	r3, #0
 800c44c:	eba6 0807 	sub.w	r8, r6, r7
 800c450:	608b      	str	r3, [r1, #8]
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	dd9c      	ble.n	800c392 <__sflush_r+0x1a>
 800c458:	6a21      	ldr	r1, [r4, #32]
 800c45a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c45c:	4643      	mov	r3, r8
 800c45e:	463a      	mov	r2, r7
 800c460:	4628      	mov	r0, r5
 800c462:	47b0      	blx	r6
 800c464:	2800      	cmp	r0, #0
 800c466:	dc06      	bgt.n	800c476 <__sflush_r+0xfe>
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e78e      	b.n	800c394 <__sflush_r+0x1c>
 800c476:	4407      	add	r7, r0
 800c478:	eba8 0800 	sub.w	r8, r8, r0
 800c47c:	e7e9      	b.n	800c452 <__sflush_r+0xda>
 800c47e:	bf00      	nop
 800c480:	20400001 	.word	0x20400001

0800c484 <_fflush_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	690b      	ldr	r3, [r1, #16]
 800c488:	4605      	mov	r5, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	b913      	cbnz	r3, 800c494 <_fflush_r+0x10>
 800c48e:	2500      	movs	r5, #0
 800c490:	4628      	mov	r0, r5
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	b118      	cbz	r0, 800c49e <_fflush_r+0x1a>
 800c496:	6983      	ldr	r3, [r0, #24]
 800c498:	b90b      	cbnz	r3, 800c49e <_fflush_r+0x1a>
 800c49a:	f7fe fc9f 	bl	800addc <__sinit>
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <_fflush_r+0x6c>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d11b      	bne.n	800c4dc <_fflush_r+0x58>
 800c4a4:	686c      	ldr	r4, [r5, #4]
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0ef      	beq.n	800c48e <_fflush_r+0xa>
 800c4ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4b0:	07d0      	lsls	r0, r2, #31
 800c4b2:	d404      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b4:	0599      	lsls	r1, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f7fe fd2d 	bl	800af18 <__retarget_lock_acquire_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7ff ff59 	bl	800c378 <__sflush_r>
 800c4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c8:	07da      	lsls	r2, r3, #31
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	d4e0      	bmi.n	800c490 <_fflush_r+0xc>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	059b      	lsls	r3, r3, #22
 800c4d2:	d4dd      	bmi.n	800c490 <_fflush_r+0xc>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f7fe fd20 	bl	800af1a <__retarget_lock_release_recursive>
 800c4da:	e7d9      	b.n	800c490 <_fflush_r+0xc>
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <_fflush_r+0x70>)
 800c4de:	429c      	cmp	r4, r3
 800c4e0:	d101      	bne.n	800c4e6 <_fflush_r+0x62>
 800c4e2:	68ac      	ldr	r4, [r5, #8]
 800c4e4:	e7df      	b.n	800c4a6 <_fflush_r+0x22>
 800c4e6:	4b04      	ldr	r3, [pc, #16]	; (800c4f8 <_fflush_r+0x74>)
 800c4e8:	429c      	cmp	r4, r3
 800c4ea:	bf08      	it	eq
 800c4ec:	68ec      	ldreq	r4, [r5, #12]
 800c4ee:	e7da      	b.n	800c4a6 <_fflush_r+0x22>
 800c4f0:	0800cc90 	.word	0x0800cc90
 800c4f4:	0800ccb0 	.word	0x0800ccb0
 800c4f8:	0800cc70 	.word	0x0800cc70

0800c4fc <__swhatbuf_r>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	460e      	mov	r6, r1
 800c500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c504:	2900      	cmp	r1, #0
 800c506:	b096      	sub	sp, #88	; 0x58
 800c508:	4614      	mov	r4, r2
 800c50a:	461d      	mov	r5, r3
 800c50c:	da07      	bge.n	800c51e <__swhatbuf_r+0x22>
 800c50e:	2300      	movs	r3, #0
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	89b3      	ldrh	r3, [r6, #12]
 800c514:	061a      	lsls	r2, r3, #24
 800c516:	d410      	bmi.n	800c53a <__swhatbuf_r+0x3e>
 800c518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c51c:	e00e      	b.n	800c53c <__swhatbuf_r+0x40>
 800c51e:	466a      	mov	r2, sp
 800c520:	f000 f8fa 	bl	800c718 <_fstat_r>
 800c524:	2800      	cmp	r0, #0
 800c526:	dbf2      	blt.n	800c50e <__swhatbuf_r+0x12>
 800c528:	9a01      	ldr	r2, [sp, #4]
 800c52a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c52e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c532:	425a      	negs	r2, r3
 800c534:	415a      	adcs	r2, r3
 800c536:	602a      	str	r2, [r5, #0]
 800c538:	e7ee      	b.n	800c518 <__swhatbuf_r+0x1c>
 800c53a:	2340      	movs	r3, #64	; 0x40
 800c53c:	2000      	movs	r0, #0
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	b016      	add	sp, #88	; 0x58
 800c542:	bd70      	pop	{r4, r5, r6, pc}

0800c544 <__smakebuf_r>:
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c548:	079d      	lsls	r5, r3, #30
 800c54a:	4606      	mov	r6, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	d507      	bpl.n	800c560 <__smakebuf_r+0x1c>
 800c550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	2301      	movs	r3, #1
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	b002      	add	sp, #8
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	ab01      	add	r3, sp, #4
 800c562:	466a      	mov	r2, sp
 800c564:	f7ff ffca 	bl	800c4fc <__swhatbuf_r>
 800c568:	9900      	ldr	r1, [sp, #0]
 800c56a:	4605      	mov	r5, r0
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7fe fce7 	bl	800af40 <_malloc_r>
 800c572:	b948      	cbnz	r0, 800c588 <__smakebuf_r+0x44>
 800c574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c578:	059a      	lsls	r2, r3, #22
 800c57a:	d4ef      	bmi.n	800c55c <__smakebuf_r+0x18>
 800c57c:	f023 0303 	bic.w	r3, r3, #3
 800c580:	f043 0302 	orr.w	r3, r3, #2
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	e7e3      	b.n	800c550 <__smakebuf_r+0xc>
 800c588:	4b0d      	ldr	r3, [pc, #52]	; (800c5c0 <__smakebuf_r+0x7c>)
 800c58a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	6020      	str	r0, [r4, #0]
 800c590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	9b00      	ldr	r3, [sp, #0]
 800c598:	6163      	str	r3, [r4, #20]
 800c59a:	9b01      	ldr	r3, [sp, #4]
 800c59c:	6120      	str	r0, [r4, #16]
 800c59e:	b15b      	cbz	r3, 800c5b8 <__smakebuf_r+0x74>
 800c5a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f000 f8c9 	bl	800c73c <_isatty_r>
 800c5aa:	b128      	cbz	r0, 800c5b8 <__smakebuf_r+0x74>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	89a0      	ldrh	r0, [r4, #12]
 800c5ba:	4305      	orrs	r5, r0
 800c5bc:	81a5      	strh	r5, [r4, #12]
 800c5be:	e7cd      	b.n	800c55c <__smakebuf_r+0x18>
 800c5c0:	0800ad75 	.word	0x0800ad75

0800c5c4 <memcpy>:
 800c5c4:	440a      	add	r2, r1
 800c5c6:	4291      	cmp	r1, r2
 800c5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5cc:	d100      	bne.n	800c5d0 <memcpy+0xc>
 800c5ce:	4770      	bx	lr
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5da:	4291      	cmp	r1, r2
 800c5dc:	d1f9      	bne.n	800c5d2 <memcpy+0xe>
 800c5de:	bd10      	pop	{r4, pc}

0800c5e0 <memmove>:
 800c5e0:	4288      	cmp	r0, r1
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	eb01 0402 	add.w	r4, r1, r2
 800c5e8:	d902      	bls.n	800c5f0 <memmove+0x10>
 800c5ea:	4284      	cmp	r4, r0
 800c5ec:	4623      	mov	r3, r4
 800c5ee:	d807      	bhi.n	800c600 <memmove+0x20>
 800c5f0:	1e43      	subs	r3, r0, #1
 800c5f2:	42a1      	cmp	r1, r4
 800c5f4:	d008      	beq.n	800c608 <memmove+0x28>
 800c5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5fe:	e7f8      	b.n	800c5f2 <memmove+0x12>
 800c600:	4402      	add	r2, r0
 800c602:	4601      	mov	r1, r0
 800c604:	428a      	cmp	r2, r1
 800c606:	d100      	bne.n	800c60a <memmove+0x2a>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c60e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c612:	e7f7      	b.n	800c604 <memmove+0x24>

0800c614 <__malloc_lock>:
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <__malloc_lock+0x8>)
 800c616:	f7fe bc7f 	b.w	800af18 <__retarget_lock_acquire_recursive>
 800c61a:	bf00      	nop
 800c61c:	20000b18 	.word	0x20000b18

0800c620 <__malloc_unlock>:
 800c620:	4801      	ldr	r0, [pc, #4]	; (800c628 <__malloc_unlock+0x8>)
 800c622:	f7fe bc7a 	b.w	800af1a <__retarget_lock_release_recursive>
 800c626:	bf00      	nop
 800c628:	20000b18 	.word	0x20000b18

0800c62c <_free_r>:
 800c62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c62e:	2900      	cmp	r1, #0
 800c630:	d048      	beq.n	800c6c4 <_free_r+0x98>
 800c632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c636:	9001      	str	r0, [sp, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f1a1 0404 	sub.w	r4, r1, #4
 800c63e:	bfb8      	it	lt
 800c640:	18e4      	addlt	r4, r4, r3
 800c642:	f7ff ffe7 	bl	800c614 <__malloc_lock>
 800c646:	4a20      	ldr	r2, [pc, #128]	; (800c6c8 <_free_r+0x9c>)
 800c648:	9801      	ldr	r0, [sp, #4]
 800c64a:	6813      	ldr	r3, [r2, #0]
 800c64c:	4615      	mov	r5, r2
 800c64e:	b933      	cbnz	r3, 800c65e <_free_r+0x32>
 800c650:	6063      	str	r3, [r4, #4]
 800c652:	6014      	str	r4, [r2, #0]
 800c654:	b003      	add	sp, #12
 800c656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c65a:	f7ff bfe1 	b.w	800c620 <__malloc_unlock>
 800c65e:	42a3      	cmp	r3, r4
 800c660:	d90b      	bls.n	800c67a <_free_r+0x4e>
 800c662:	6821      	ldr	r1, [r4, #0]
 800c664:	1862      	adds	r2, r4, r1
 800c666:	4293      	cmp	r3, r2
 800c668:	bf04      	itt	eq
 800c66a:	681a      	ldreq	r2, [r3, #0]
 800c66c:	685b      	ldreq	r3, [r3, #4]
 800c66e:	6063      	str	r3, [r4, #4]
 800c670:	bf04      	itt	eq
 800c672:	1852      	addeq	r2, r2, r1
 800c674:	6022      	streq	r2, [r4, #0]
 800c676:	602c      	str	r4, [r5, #0]
 800c678:	e7ec      	b.n	800c654 <_free_r+0x28>
 800c67a:	461a      	mov	r2, r3
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	b10b      	cbz	r3, 800c684 <_free_r+0x58>
 800c680:	42a3      	cmp	r3, r4
 800c682:	d9fa      	bls.n	800c67a <_free_r+0x4e>
 800c684:	6811      	ldr	r1, [r2, #0]
 800c686:	1855      	adds	r5, r2, r1
 800c688:	42a5      	cmp	r5, r4
 800c68a:	d10b      	bne.n	800c6a4 <_free_r+0x78>
 800c68c:	6824      	ldr	r4, [r4, #0]
 800c68e:	4421      	add	r1, r4
 800c690:	1854      	adds	r4, r2, r1
 800c692:	42a3      	cmp	r3, r4
 800c694:	6011      	str	r1, [r2, #0]
 800c696:	d1dd      	bne.n	800c654 <_free_r+0x28>
 800c698:	681c      	ldr	r4, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	6053      	str	r3, [r2, #4]
 800c69e:	4421      	add	r1, r4
 800c6a0:	6011      	str	r1, [r2, #0]
 800c6a2:	e7d7      	b.n	800c654 <_free_r+0x28>
 800c6a4:	d902      	bls.n	800c6ac <_free_r+0x80>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	e7d3      	b.n	800c654 <_free_r+0x28>
 800c6ac:	6825      	ldr	r5, [r4, #0]
 800c6ae:	1961      	adds	r1, r4, r5
 800c6b0:	428b      	cmp	r3, r1
 800c6b2:	bf04      	itt	eq
 800c6b4:	6819      	ldreq	r1, [r3, #0]
 800c6b6:	685b      	ldreq	r3, [r3, #4]
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	bf04      	itt	eq
 800c6bc:	1949      	addeq	r1, r1, r5
 800c6be:	6021      	streq	r1, [r4, #0]
 800c6c0:	6054      	str	r4, [r2, #4]
 800c6c2:	e7c7      	b.n	800c654 <_free_r+0x28>
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bd30      	pop	{r4, r5, pc}
 800c6c8:	20000160 	.word	0x20000160

0800c6cc <_realloc_r>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	4614      	mov	r4, r2
 800c6d2:	460e      	mov	r6, r1
 800c6d4:	b921      	cbnz	r1, 800c6e0 <_realloc_r+0x14>
 800c6d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6da:	4611      	mov	r1, r2
 800c6dc:	f7fe bc30 	b.w	800af40 <_malloc_r>
 800c6e0:	b922      	cbnz	r2, 800c6ec <_realloc_r+0x20>
 800c6e2:	f7ff ffa3 	bl	800c62c <_free_r>
 800c6e6:	4625      	mov	r5, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ec:	f000 f836 	bl	800c75c <_malloc_usable_size_r>
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d20f      	bcs.n	800c714 <_realloc_r+0x48>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	f7fe fc22 	bl	800af40 <_malloc_r>
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d0f2      	beq.n	800c6e8 <_realloc_r+0x1c>
 800c702:	4631      	mov	r1, r6
 800c704:	4622      	mov	r2, r4
 800c706:	f7ff ff5d 	bl	800c5c4 <memcpy>
 800c70a:	4631      	mov	r1, r6
 800c70c:	4638      	mov	r0, r7
 800c70e:	f7ff ff8d 	bl	800c62c <_free_r>
 800c712:	e7e9      	b.n	800c6e8 <_realloc_r+0x1c>
 800c714:	4635      	mov	r5, r6
 800c716:	e7e7      	b.n	800c6e8 <_realloc_r+0x1c>

0800c718 <_fstat_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d07      	ldr	r5, [pc, #28]	; (800c738 <_fstat_r+0x20>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	4611      	mov	r1, r2
 800c724:	602b      	str	r3, [r5, #0]
 800c726:	f7f6 f808 	bl	800273a <_fstat>
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	d102      	bne.n	800c734 <_fstat_r+0x1c>
 800c72e:	682b      	ldr	r3, [r5, #0]
 800c730:	b103      	cbz	r3, 800c734 <_fstat_r+0x1c>
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	bd38      	pop	{r3, r4, r5, pc}
 800c736:	bf00      	nop
 800c738:	20000b20 	.word	0x20000b20

0800c73c <_isatty_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d06      	ldr	r5, [pc, #24]	; (800c758 <_isatty_r+0x1c>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	602b      	str	r3, [r5, #0]
 800c748:	f7f6 f807 	bl	800275a <_isatty>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d102      	bne.n	800c756 <_isatty_r+0x1a>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	b103      	cbz	r3, 800c756 <_isatty_r+0x1a>
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	20000b20 	.word	0x20000b20

0800c75c <_malloc_usable_size_r>:
 800c75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c760:	1f18      	subs	r0, r3, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	bfbc      	itt	lt
 800c766:	580b      	ldrlt	r3, [r1, r0]
 800c768:	18c0      	addlt	r0, r0, r3
 800c76a:	4770      	bx	lr

0800c76c <_init>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	bf00      	nop
 800c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c772:	bc08      	pop	{r3}
 800c774:	469e      	mov	lr, r3
 800c776:	4770      	bx	lr

0800c778 <_fini>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	bf00      	nop
 800c77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77e:	bc08      	pop	{r3}
 800c780:	469e      	mov	lr, r3
 800c782:	4770      	bx	lr
